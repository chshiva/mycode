'use strict';

const readdir = require('fs').readdirSync;
const inherits = require('util').inherits;

const EventEmitter = require('events').EventEmitter;

const isJs = /.+\.js$/i;
const lastSlash = /\/$/;

/**
 * Позволяет расширять прототип из файлов
 * И другой полезный функционал
 */
module.exports = class Base {
	/**
	 * Конструктор
	 */
	constructor () {
		this.prepare = function(){};
		this.path = process.cwd();
	}

	/**
	 * Импортирует конструктор
	 *
	 * @param object prepare
	 *
	 * @return this
	 */
	import (prepare) {
		this.prepare = prepare;

		return this;
	}

	/**
	 * Возвращает готовый конструктор
	 *
	 * @return object
	 */
	export () {
		return this.prepare;
	}

	/**
	 * Устанавливает корневую директорию
	 * Для поиска директорий
	 *
	 * @param string path
	 *
	 * @return this
	 */
	root (path) {
		this.path = path.replace(lastSlash,'')+'/';

		return this;
	}

	/**
	 * Наследует объекты
	 *
	 * @param object proto
	 *
	 * @return this
	 */
	extend (proto) {
		Object.assign(this.prepare.prototype,proto);

		return this;
	}

	/**
	 * Наследует EventEmitter
	 *
	 * @return this
	 */
	emitter () {
		inherits(this.prepare,EventEmitter);

		return this;
	}

	/**
	 * Добавляет метод в прототип для создания цепочек
	 *
	 * @param string name
	 * @param array  extensions
	 *
	 * @return this
	 */
	change () {
		this.extend({
			_properties (name,extensions) {
				this[name] = this[name] || {};

				var extension,way,end,self;

				for (extension of extensions) {
					way = extension.way.split('.');
					end = way.length-1;
					self = this[name];

					way.forEach((key,i) => {
						if (end === i) {
							return self[key] = extension.handler.bind(this);
						}

						self = self[key] = self[key] || {};
					});
				}
			}
		});

		return this;
	}

	/**
	 * Сканирует директорию и импортирует файлы
	 *
	 * @param mixed path
	 *
	 * @return this
	 */
	scan (path) {
		if (Array.isArray(path)) {
			path.forEach(this.scan.bind(this));

			return this;
		}

		path = this.path+path+'/';

		for (var file of readdir(path)) {
			if (isJs.test(file)) {
				this.extend(require(path+file));
			}
		}

		return this;
	}
};
