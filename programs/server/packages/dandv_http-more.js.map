{"version":3,"sources":["meteor://ðŸ’»app/packages/dandv_http-more/packages/dandv_http-more.js"],"names":[],"mappingsfile":"/packages/dandv_http-more.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/dandv:http-more/meteor/packages/http/httpcall_common.js                                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmakeErrorByStatus = function(statusCode, content) {                                                                 // 1\n  var MAX_LENGTH = 500; // if you change this, also change the appropriate test                                     // 2\n                                                                                                                    // 3\n  var truncate = function(str, length) {                                                                            // 4\n    return str.length > length ? str.slice(0, length) + '...' : str;                                                // 5\n  };                                                                                                                // 6\n                                                                                                                    // 7\n  var message = \"failed [\" + statusCode + \"]\";                                                                      // 8\n  if (content)                                                                                                      // 9\n    message += \" \" + truncate(content.replace(/\\n/g, \" \"), MAX_LENGTH);                                             // 10\n                                                                                                                    // 11\n  return new Error(message);                                                                                        // 12\n};                                                                                                                  // 13\n                                                                                                                    // 14\n                                                                                                                    // 15\n// Fill in `response.data` if the content-type is JSON.                                                             // 16\npopulateData = function(response) {                                                                                 // 17\n  // Read Content-Type header, up to a ';' if there is one.                                                         // 18\n  // A typical header might be \"application/json; charset=utf-8\"                                                    // 19\n  // or just \"application/json\".                                                                                    // 20\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];                                        // 21\n                                                                                                                    // 22\n  // Only try to parse data as JSON if server sets correct content type.                                            // 23\n  if (_.include(['application/json', 'text/javascript'], contentType)) {                                            // 24\n    try {                                                                                                           // 25\n      response.data = JSON.parse(response.content);                                                                 // 26\n    } catch (err) {                                                                                                 // 27\n      response.data = null;                                                                                         // 28\n    }                                                                                                               // 29\n  } else {                                                                                                          // 30\n    response.data = null;                                                                                           // 31\n  }                                                                                                                 // 32\n};                                                                                                                  // 33\n                                                                                                                    // 34\nHTTP = {};                                                                                                          // 35\n                                                                                                                    // 36\n/**                                                                                                                 // 37\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 // 39\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    // 40\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client. // 41\n * @locus Anywhere                                                                                                  // 42\n */                                                                                                                 // 43\nHTTP.get = function (/* varargs */) {                                                                               // 44\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));                                               // 45\n};                                                                                                                  // 46\n                                                                                                                    // 47\n/**                                                                                                                 // 48\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 // 50\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    // 51\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client. // 52\n * @locus Anywhere                                                                                                  // 53\n */                                                                                                                 // 54\nHTTP.post = function (/* varargs */) {                                                                              // 55\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));                                              // 56\n};                                                                                                                  // 57\n                                                                                                                    // 58\n/**                                                                                                                 // 59\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                 // 61\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    // 62\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client. // 63\n * @locus Anywhere                                                                                                  // 64\n */                                                                                                                 // 65\nHTTP.put = function (/* varargs */) {                                                                               // 66\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));                                               // 67\n};                                                                                                                  // 68\n                                                                                                                    // 69\n/**                                                                                                                 // 70\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflic with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.                                                 // 72\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    // 73\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client. // 74\n * @locus Anywhere                                                                                                  // 75\n */                                                                                                                 // 76\nHTTP.del = function (/* varargs */) {                                                                               // 77\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));                                            // 78\n};                                                                                                                  // 79\n                                                                                                                    // 80\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/dandv:http-more/httpcall_server.js                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar path = Npm.require('path');                                                                                     // 1\nvar request = Npm.require('request');                                                                               // 2\nvar url_util = Npm.require('url');                                                                                  // 3\n                                                                                                                    // 4\n// _call always runs asynchronously; HTTP.call, defined below,                                                      // 5\n// wraps _call and runs synchronously when no callback is provided.                                                 // 6\nvar _call = function(method, url, options, callback) {                                                              // 7\n                                                                                                                    // 8\n  ////////// Process arguments //////////                                                                           // 9\n                                                                                                                    // 10\n  if (! callback && typeof options === \"function\") {                                                                // 11\n    // support (method, url, callback) argument list                                                                // 12\n    callback = options;                                                                                             // 13\n    options = null;                                                                                                 // 14\n  }                                                                                                                 // 15\n                                                                                                                    // 16\n  options = options || {};                                                                                          // 17\n                                                                                                                    // 18\n  method = (method || \"\").toUpperCase();                                                                            // 19\n                                                                                                                    // 20\n  if (! /^https?:\\/\\//.test(url))                                                                                   // 21\n    throw new Error(\"url must be absolute and start with http:// or https://\");                                     // 22\n                                                                                                                    // 23\n  var headers = {};                                                                                                 // 24\n                                                                                                                    // 25\n  var content = options.content;                                                                                    // 26\n  if (options.data) {                                                                                               // 27\n    content = JSON.stringify(options.data);                                                                         // 28\n    headers['Content-Type'] = 'application/json';                                                                   // 29\n  }                                                                                                                 // 30\n                                                                                                                    // 31\n                                                                                                                    // 32\n  var params_for_url, params_for_body;                                                                              // 33\n  if (content || method === \"GET\" || method === \"HEAD\")                                                             // 34\n    params_for_url = options.params;                                                                                // 35\n  else                                                                                                              // 36\n    params_for_body = options.params;                                                                               // 37\n                                                                                                                    // 38\n  var new_url = URL._constructUrl(url, options.query, params_for_url);                                              // 39\n                                                                                                                    // 40\n  if (options.auth) {                                                                                               // 41\n    if (options.auth.indexOf(':') < 0)                                                                              // 42\n      throw new Error('auth option should be of the form \"username:password\"');                                     // 43\n    headers['Authorization'] = \"Basic \"+                                                                            // 44\n      (new Buffer(options.auth, \"ascii\")).toString(\"base64\");                                                       // 45\n  }                                                                                                                 // 46\n                                                                                                                    // 47\n  if (params_for_body) {                                                                                            // 48\n    content = URL._encodeParams(params_for_body);                                                                   // 49\n    headers['Content-Type'] = \"application/x-www-form-urlencoded\";                                                  // 50\n  }                                                                                                                 // 51\n                                                                                                                    // 52\n  _.extend(headers, options.headers || {});                                                                         // 53\n                                                                                                                    // 54\n  // wrap callback to add a 'response' property on an error, in case                                                // 55\n  // we have both (http 4xx/5xx error, which has a response payload)                                                // 56\n  callback = (function(callback) {                                                                                  // 57\n    return function(error, response) {                                                                              // 58\n      if (error && response)                                                                                        // 59\n        error.response = response;                                                                                  // 60\n      callback(error, response);                                                                                    // 61\n    };                                                                                                              // 62\n  })(callback);                                                                                                     // 63\n                                                                                                                    // 64\n  // safety belt: only call the callback once.                                                                      // 65\n  callback = _.once(callback);                                                                                      // 66\n                                                                                                                    // 67\n                                                                                                                    // 68\n  ////////// Kickoff! //////////                                                                                    // 69\n                                                                                                                    // 70\n  delete options.auth;  // auth, if any, was moved into the headers                                                 // 71\n  var req_options = _.extend(options, {                                                                             // 72\n    url: new_url,                                                                                                   // 73\n    method: method,                                                                                                 // 74\n    encoding: \"utf8\",                                                                                               // 75\n    body: content,                                                                                                  // 76\n    headers: headers                                                                                                // 77\n  });                                                                                                               // 78\n  req_options.followRedirect = options.followRedirects;  // meteor calls it followRedirect*s*                       // 79\n  delete req_options.followRedirects;                                                                               // 80\n                                                                                                                    // 81\n                                                                                                                    // 82\n  request(req_options, function(error, res, body) {                                                                 // 83\n    var response = null;                                                                                            // 84\n                                                                                                                    // 85\n    if (! error) {                                                                                                  // 86\n                                                                                                                    // 87\n      response = {};                                                                                                // 88\n      response.statusCode = res.statusCode;                                                                         // 89\n      response.content = body;                                                                                      // 90\n      response.headers = res.headers;                                                                               // 91\n      response.href = res.request.uri.href;  // the final URL after following the redirects, per https://github.com/mikeal/request/pull/220#issuecomment-40551122\n                                                                                                                    // 93\n      populateData(response);                                                                                       // 94\n                                                                                                                    // 95\n      if (response.statusCode >= 400)                                                                               // 96\n        error = makeErrorByStatus(response.statusCode, response.content);                                           // 97\n    }                                                                                                               // 98\n                                                                                                                    // 99\n    callback(error, response);                                                                                      // 100\n                                                                                                                    // 101\n  });                                                                                                               // 102\n};                                                                                                                  // 103\n                                                                                                                    // 104\nHTTP.call = Meteor.wrapAsync(_call);                                                                                // 105\n                                                                                                                    // 106\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/dandv:http-more/meteor/packages/http/deprecated.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// The HTTP object used to be called Meteor.http.                                                                   // 1\n// XXX COMPAT WITH 0.6.4                                                                                            // 2\nMeteor.http = HTTP;                                                                                                 // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}