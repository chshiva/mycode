{"version":3,"sources":["meteor://ðŸ’»app/packages/tdamsma_meteor-accounts-ldap/ldap_server.coffee"],"names":[],"mappings":"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","file":"/packages/tdamsma_meteor-accounts-ldap.js","sourcesContent":["ActiveDirectory = Npm.require('activedirectory');\r\nFuture = Npm.require('fibers/future')\r\nassert = Npm.require('assert')\r\n\r\nif !Meteor.settings.ldap\r\n  throw new Error('\"ldap\" not found in Meteor.settings')\r\n\r\nclass UserQuery\r\n  constructor: (username) -> \r\n    @ad = ActiveDirectory({\r\n      url: Meteor.settings.ldap.url,\r\n      baseDN: Meteor.settings.ldap.baseDn,\r\n      username: Meteor.settings.ldap.bindCn,\r\n      password: Meteor.settings.ldap.bindPassword\r\n      attributes: {\r\n        user: [\"dn\"].concat(Meteor.settings.ldap.autopublishFields),\r\n        }\r\n       });\r\n    @username = @sanitize_for_search(username)\r\n\r\n  sanitize_for_search: (s) ->\r\n    # Escape search string for LDAP according to RFC4515\r\n    s = s.replace('\\\\', '\\\\5C')\r\n    s = s.replace('\\0', '\\\\00')\r\n    s = s.replace('*','\\\\2A' )\r\n    s = s.replace('(','\\\\28' )\r\n    s = s.replace(')','\\\\29' )\r\n    return s\r\n\r\n  findUser: () -> \r\n    userFuture = new Future\r\n    username = @username\r\n\r\n    @ad.findUser @username, (err, userObj) ->\r\n      if err\r\n        if Meteor.settings.ldap.debug\r\n          console.log 'ERROR: ' + JSON.stringify(err)\r\n        userFuture.return false\r\n        return\r\n      if !userObj\r\n        if Meteor.settings.ldap.debug\r\n          console.log 'User: ' + username + ' not found.'\r\n        userFuture.return false\r\n      else\r\n        if Meteor.settings.ldap.debug\r\n          console.log JSON.stringify(userObj)\r\n        userFuture.return userObj\r\n\r\n    userObj = userFuture.wait()\r\n    if not userObj\r\n      throw new (Meteor.Error)(403, 'Invalid username') \r\n    \r\n    @userObj = userObj\r\n  \r\n  authenticate: (password) ->\r\n    authenticateFuture = new Future\r\n    @ad.authenticate @userObj.dn, password, (err, auth) ->\r\n      if err\r\n        if Meteor.settings.ldap.debug\r\n          console.log 'ERROR: ' + JSON.stringify(err)\r\n        authenticateFuture.return false\r\n        return\r\n      if auth\r\n        if Meteor.settings.ldap.debug\r\n          console.log 'Authenticated!'\r\n        authenticateFuture.return true\r\n      else\r\n        if Meteor.settings.ldap.debug\r\n          console.log 'Authentication failed!'\r\n        authenticateFuture.return false \r\n      return\r\n    success = authenticateFuture.wait() \r\n    if not success or password == ''\r\n      throw new (Meteor.Error)(403, 'Invalid credentials')\r\n    @autenticated = success\r\n    return success\r\n\r\n  getGroupMembershipForUser: () ->\r\n    groupsFuture = new Future\r\n    @ad.getGroupMembershipForUser @userObj.dn, (err, groups) ->\r\n      if err\r\n        console.log('ERROR: ' +JSON.stringify(err));\r\n        groupsFuture.return false\r\n        return \r\n      if not groups\r\n        console.log('User: ' + @userObj.dn + ' not found.')\r\n        groupsFuture.return false\r\n      else \r\n        if Meteor.settings.ldap.debug\r\n          console.log('Groups found for ' + @userObj.dn + ': '+ JSON.stringify(groups))\r\n        groupsFuture.return groups\r\n      return\r\n    return groupsFuture.wait()\r\n\r\n  isUserMemberOf: (groupName) ->\r\n    isMemberFuture = new Future\r\n    @ad.isUserMemberOf @userObj.dn, groupName, (err, isMember) ->\r\n      if err\r\n        console.log 'ERROR: ' + JSON.stringify(err)\r\n        isMemberFuture.return false\r\n        return\r\n      if Meteor.settings.ldap.debug\r\n        console.log @userObj.displayName + ' isMemberOf ' + groupName + ': ' + isMember\r\n      isMemberFuture.return isMember\r\n      return\r\n    return isMemberFuture.wait()\r\n\r\n  queryMembershipAndAddToMeteor: (callback) ->\r\n    for groupName in Meteor.settings.ldap.groupMembership\r\n        ad = @ad\r\n        userObj = @userObj\r\n        do (groupName) ->\r\n          ad.isUserMemberOf userObj.dn, groupName, (err, isMember) ->\r\n            do (groupName) ->\r\n              if err\r\n                if Meteor.settings.ldap.debug\r\n                  console.log 'ERROR: ' + JSON.stringify(err)\r\n              else\r\n                if Meteor.settings.ldap.debug\r\n                  console.log userObj.dn + ' isMemberOf ' + groupName + ': ' + isMember\r\n                callback(groupName,isMember)\r\n\r\n\r\nAccounts.registerLoginHandler 'ldap', (request) ->\r\n  return undefined if !request.ldap\r\n\r\n  # 1. create query\r\n  user_query = new UserQuery(request.username)\r\n  if Meteor.settings.ldap.debug\r\n    console.log 'LDAP authentication for ' + request.username\r\n\r\n  user_query.findUser() # Allows both sAMAccountName and email\r\n\r\n  # 2. authenticate user\r\n  authenticated = user_query.authenticate(request.pass)\r\n  if Meteor.settings.ldap.debug\r\n    console.log('* AUTENTICATED:',authenticated)\r\n\r\n  # 3. update database\r\n  userId = undefined\r\n  userObj = user_query.userObj\r\n  userObj.username = request.username\r\n  user = Meteor.users.findOne(dn: userObj.dn)\r\n  if user\r\n    userId = user._id\r\n    Meteor.users.update userId, $set: userObj\r\n  else\r\n    userId = Meteor.users.insert(userObj)\r\n  if Meteor.settings.ldap.autopublishFields\r\n    Accounts.addAutopublishFields\r\n      forLoggedInUser: Meteor.settings.ldap.autopublishFields\r\n      forOtherUsers: Meteor.settings.ldap.autopublishFields\r\n  stampedToken = Accounts._generateStampedLoginToken()\r\n  hashStampedToken = Accounts._hashStampedToken(stampedToken)\r\n  Meteor.users.update userId, $push: 'services.resume.loginTokens': hashStampedToken\r\n  \r\n  # 4. update membership of groups (asynchronously, as this can be really slow)\r\n  user_query.queryMembershipAndAddToMeteor Meteor.bindEnvironment (groupName,isMember) ->\r\n    if isMember\r\n      Meteor.users.update userId, $addToSet: 'memberOf': groupName\r\n      Meteor.users.update userId, $pull: 'notMemberOf': groupName\r\n    else\r\n      Meteor.users.update userId, $pull: 'memberOf': groupName\r\n      Meteor.users.update userId, $addToSet: 'notMemberOf': groupName\r\n\r\n  {\r\n    userId: userId\r\n    token: stampedToken.token\r\n    tokenExpires: Accounts._tokenExpiration(hashStampedToken.when)\r\n  }\r\n"]}