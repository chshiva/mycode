/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded chunks
/******/ 	// "0" means "already loaded"
/******/ 	var installedChunks = {
/******/ 		3: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] !== 0) {
/******/ 			var chunk = require("./" + chunkId + ".server.bundle.js");
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids;
/******/ 			for(var moduleId in moreModules) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 		}
/******/ 		return Promise.resolve();
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// uncatched error handler for webpack runtime
/******/ 	__webpack_require__.oe = function(err) {
/******/ 		process.nextTick(function() {
/******/ 			throw err; // catch this error by using System.import().catch()
/******/ 		});
/******/ 	};
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 109);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ function(module, exports) {

	module.exports = require("moment");

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("mongoose");

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("react-router");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.addSlash = addSlash;
	exports.stripSlash = stripSlash;
	var slashes = __webpack_require__(265);
	
	function addSlash(msg) {
		// console.log("msg---- ", msg);
		/*var newMsg = slashes.add(msg);
	 console.log("newMsg---- ", newMsg);
	 return newMsg;*/
		return slashes.add(msg);
	}
	
	function stripSlash(msg) {
		// console.log("strip msg1---- ", msg);
		return msg != undefined ? slashes.strip(msg, 2) : msg;
		/*var newMsg = slashes.strip(msg, 2);
	 console.log("strip newMsg2---- ", newMsg);
	 console.log("after === ", (newMsg != 'undefined' ? newMsg : ''));
	 return (newMsg != 'undefined' ? newMsg : '');*/
	}

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = require("react");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Schema = _mongoose2.default.Schema;
	var moment = __webpack_require__(1);
	
	_mongoose2.default.Promise = __webpack_require__(40);
	
	var userSchema = new Schema({
	  password: {
	    type: String
	    // required : [true, "Please enter password"],
	  },
	  firstname: {
	    type: String,
	    required: [true, "Please enter First Name"],
	    match: [/^[a-zA-Z\-\s]+$/, "Please enter valid First Name"],
	    maxlength: [30, 'First name length should be maximum of 30 characters'],
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash,
	    index: true
	  },
	  lastname: {
	    type: String,
	    match: [/^[a-zA-Z\-\s]+$/, "Please enter valid Last Name"],
	    maxlength: [30, 'Last name length should be maximum of 30 characters'],
	    default: "",
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash,
	    index: true
	  },
	  email: {
	    type: String,
	    lowercase: true, trim: true,
	    required: [true, "Please enter Email"],
	    index: { unique: true },
	    match: [/^((([a-zA-Z]|[0-9])|([-]|[_]|[.])){2,})+[@](([a-zA-Z0-9])|([-]|[.])){2,40}[.]((([a-zA-Z0-9]){2,4})|(([a-zA-Z0-9]){2,4}[.]([a-zA-Z0-9]){2,4}))$/, "Please enter valid Email"],
	    maxlength: [50, 'Email length should be maximum of 50 characters'],
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  gmail: {
	    type: String,
	    lowercase: true, trim: true,
	    match: [/^((([a-zA-Z]|[0-9])|([-]|[_]|[.])){2,})+[@](([a-zA-Z0-9])|([-]|[.])){2,40}[.]((([a-zA-Z0-9]){2,4})|(([a-zA-Z0-9]){2,4}[.]([a-zA-Z0-9]){2,4}))$/, "Please enter valid Email"],
	    maxlength: [50, 'Email length should be maximum of 50 characters'],
	    index: true,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  facebookMail: {
	    type: String,
	    lowercase: true, trim: true,
	    match: [/^((([a-zA-Z]|[0-9])|([-]|[_]|[.])){2,})+[@](([a-zA-Z0-9])|([-]|[.])){2,40}[.]((([a-zA-Z0-9]){2,4})|(([a-zA-Z0-9]){2,4}[.]([a-zA-Z0-9]){2,4}))$/, "Please enter valid Email"],
	    maxlength: [50, 'Email length should be maximum 50 of characters'],
	    index: true,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  token: {
	    type: String,
	    required: false
	  },
	  deviceType: {
	    type: String,
	    required: false
	  },
	  deviceId: {
	    type: String,
	    required: false
	  },
	  userStatus: {
	    type: String,
	    enum: ['Active', 'Registered', 'Deleted', 'Blocked'],
	    default: 'Active',
	    index: true
	  },
	  loginType: {
	    type: String,
	    enum: ['Application', 'Google', 'Facebook'],
	    default: 'Application'
	  },
	  googleId: {
	    type: String
	  },
	  facebookId: {
	    type: String
	  },
	  profile: {
	    companyid: {
	      type: String,
	      match: [/^[a-zA-Z0-9]+$/, "Please enter valid Company Id"],
	      ref: 'corporate',
	      index: true
	      // set : addSlash,
	      // get : stripSlash
	    },
	    phone: [{
	      type: String,
	      maxlength: [20, 'Phone number length should be maximum 20 of characters'],
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    }],
	    gender: {
	      type: String,
	      enum: ['', 'Male', 'Female']
	    },
	    dateofbirth: {
	      type: Date,
	      validate: {
	        validator: function validator(v) {
	          if (v < moment().utc().toDate()) return true;else return false;
	        },
	        message: 'Date of birth  {VALUE} should not be a future date!'
	      }
	    },
	    aboutme: {
	      type: String,
	      maxlength: [150, 'About me length should be maximum 150 characters'],
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    position: {
	      type: String,
	      maxlength: [30, 'Position length should be maximum 30 characters'],
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    dept: {
	      type: String,
	      maxlength: [30, 'Department length should be maximum 30 characters'],
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    roomid: {
	      type: String
	    },
	    profileImage: {
	      type: String
	    },
	    contact: {
	      address: {
	        type: String,
	        maxlength: [50, 'Address length should be maximum 50 characters'],
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash
	      },
	      street: {
	        type: String,
	        maxlength: [20, 'Street length should be maximum 20 characters'],
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash
	      },
	      city: {
	        type: String,
	        maxlength: [20, 'City length should be maximum 20 characters'],
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash
	      },
	      zip: {
	        type: Number,
	        maxlength: [10, 'Zip code length should be maximum 10 characters'],
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash
	      },
	      landMark: {
	        type: String,
	        maxlength: [30, 'Landmark length should be maximum 30 characters'],
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash
	      },
	      state: {
	        type: String,
	        maxlength: [20, 'State length should be maximum 20 characters'],
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash
	      },
	      country: {
	        type: String,
	        maxlength: [20, 'Country length should be maximum 20 characters'],
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash
	      }
	    },
	    website: {
	      type: String,
	      maxlength: [50, 'Website length should be maximum 50 characters'],
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    socialLink: {
	      type: String,
	      maxlength: [50, 'Social link length should be maximum 50 characters'],
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    experience: {
	      workplace: [{
	        company: {
	          type: String,
	          maxlength: [50, 'Company name length should be maximum 50 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        position: {
	          type: String,
	          maxlength: [30, 'Position length should be maximum 30 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        city: {
	          type: String,
	          maxlength: [20, 'City length should be maximum 20 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        country: {
	          type: String,
	          maxlength: [20, 'Country length should be maximum 20 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        description: {
	          type: String,
	          maxlength: [150, 'Description length should be maximum 150 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        yearFrom: {
	          type: Date
	        },
	        yearTo: {
	          type: Date
	        },
	        present: {
	          type: Boolean
	        }
	      }],
	      professionalSkills: {
	        type: Array
	      }
	    },
	    education: {
	      college: [{
	        university: {
	          type: String,
	          maxlength: [50, 'University length should be maximum 50 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        city: {
	          type: String,
	          maxlength: [20, 'City length should be maximum 20 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        country: {
	          type: String,
	          maxlength: [20, 'Country length should be maximum 20 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        yearFrom: {
	          type: Date
	        },
	        yearTo: {
	          type: Date
	        },
	        graduated: {
	          type: Boolean
	        },
	        description: {
	          type: String,
	          maxlength: [150, 'Description length should be maximum 150 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        concentration: {
	          type: String,
	          maxlength: [30, 'Concentration length should be maximum 30 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        }
	      }],
	      highSchool: {
	        school: {
	          type: String,
	          maxlength: [50, 'School length should be maximum 50 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        city: {
	          type: String,
	          maxlength: [20, 'City length should be maximum 20 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        country: {
	          type: String,
	          maxlength: [20, 'Country length should be maximum 20 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        },
	        yearFrom: {
	          type: Date
	        },
	        yearTo: {
	          type: Date
	        },
	        graduated: {
	          type: Boolean
	        },
	        description: {
	          type: String,
	          maxlength: [150, 'Description length should be maximum 150 characters'],
	          set: _slashesActions.addSlash,
	          get: _slashesActions.stripSlash
	        }
	      }
	    }
	  },
	  contacts: [{
	    _id: {
	      type: _mongoose2.default.Schema.Types.ObjectId,
	      ref: 'Users'
	    },
	    status: {
	      type: Number,
	      enum: [0, 1, 2, 3]
	    }
	  }],
	  locale: {
	    timezone: {
	      type: String,
	      trim: true,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    dateformat: {
	      type: String,
	      trim: true,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    timeformat: {
	      type: String,
	      trim: true,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    currencyformat: {
	      type: String,
	      trim: true,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    preferedlanguage: {
	      type: String,
	      trim: true
	    }
	  },
	  modifiedAt: {
	    type: Date,
	    default: moment().utc().toDate(),
	    required: true
	  },
	  role: {
	    type: Number,
	    required: true,
	    default: 4
	  },
	  studentId: {
	    type: String
	  },
	  guest: {
	    type: Boolean,
	    required: false,
	    default: false
	  },
	  createdby: {
	    type: String,
	    required: true
	  },
	  modifiedby: {
	    type: String,
	    required: true
	  },
	  dateAdded: {
	    type: Date,
	    default: moment().utc().toDate(),
	    required: true
	  },
	  passwordToken: {
	    type: String
	  },
	  resetPasswordExpires: {
	    type: String
	  }
	}, {
	  toObject: { getters: true },
	  toJSON: { getters: true }
	});
	
	userSchema.index({ email: 1 }, { unique: true }); // schema level
	
	exports.default = _mongoose2.default.model('Users', userSchema);

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = require("lodash");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.API_URL = undefined;
	exports.default = callApi;
	
	var _isomorphicFetch = __webpack_require__(248);
	
	var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _jsCookie = __webpack_require__(68);
	
	var _jsCookie2 = _interopRequireDefault(_jsCookie);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var API_URL = exports.API_URL = typeof window === 'undefined' || process.env.NODE_ENV === 'test' ? process.env.BASE_URL || 'http://localhost:' + (process.env.PORT || _config2.default.port) + '/api' : '/api';
	
	function callApi(endpoint) {
	  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'get';
	  var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	
	  var csrfToken = _jsCookie2.default.get('csrf');
	  var options = {
	    headers: { 'content-type': 'application/json', 'Authorization': 'Basic ' + _AuthController2.default.getSession(), 'csrf': csrfToken },
	    method: method
	  };
	  if (method != 'get' && method != 'delete') {
	    options['body'] = JSON.stringify(body);
	  }
	
	  return (0, _isomorphicFetch2.default)(API_URL + '/' + endpoint, options).then(function (response) {
	    return response.json() //(Cookies.set('_csrf', response.headers.get('_csrf')), console.log("REESSS", response, response.headers.get('_csrf')), 
	    .then(function (json) {
	      return { json: json, response: response };
	    });
	  }).then(function (_ref) {
	    var json = _ref.json,
	        response = _ref.response;
	
	
	    if (!response.ok) {
	      return Promise.reject(json);
	    }
	
	    return json;
	  }).then(function (response) {
	    return response;
	  }, function (error) {
	    return error;
	  });
	}

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	//import React, { Component, PropTypes } from 'react';
	
	
	var _jsCookie = __webpack_require__(68);
	
	var _jsCookie2 = _interopRequireDefault(_jsCookie);
	
	var _SocketHandler = __webpack_require__(32);
	
	var _SocketHandler2 = _interopRequireDefault(_SocketHandler);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//import { logoutUser } from '../modules/Login/LoginActions';
	
	var AuthClient = function () {
		function AuthClient() {
			_classCallCheck(this, AuthClient);
		}
	
		_createClass(AuthClient, null, [{
			key: 'getSession',
			value: function getSession() {
				if (typeof Storage !== "undefined") {
					// return localStorage.getItem("login_session");
					return _jsCookie2.default.get("token");
				} else {
					return false;
				}
			}
		}, {
			key: 'setSession',
			value: function setSession(sessionValue) {
				if (typeof Storage !== "undefined") {
					// localStorage.setItem("login_session", sessionValue);
					_jsCookie2.default.set("token", sessionValue, { expires: 7 });
				}
			}
		}, {
			key: 'deleteSession',
			value: function deleteSession() {
				// store.dispatch( logoutUser()).then(res=>{
				// if(res.status) {
				if (typeof Storage !== "undefined") {
					// localStorage.removeItem("login_session");
					_jsCookie2.default.remove("token");
					_SocketHandler2.default.disconnectServer();
				}
				//  else {
				// 	console.log("Delete session Error");
				// }
				// }
				// })		
			}
	
			//  //Code added by - Najib, Desc - Setting and getting user role in cookies to use it for routing level access control  
			// static setRole(role){
			// 	if(typeof(Storage) !== "undefined"){
			// 		// localStorage.setItem("login_session", sessionValue);
			// 		Cookies.set("role", role);
			// 	}
			// }
	
			// static getRole(){
			// 	if(typeof(Storage) !== "undefined"){
			// 		// return localStorage.getItem("login_session");
			// 		return Cookies.get("role");
			// 	}else{
			// 		return false;
			// 	}
			// }
	
		}]);
	
		return AuthClient;
	}();
	
	exports.default = AuthClient;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.checkValidRequest = checkValidRequest;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* @Function Name: "checkValidRequest",
	* @Purpose: "To check valid request or not.",
	* @Request Object: header : { authorization : "access_token" },
	* @Response Object: Success- User, Failure- null,
	* @Author: "Prudhvi"
	*/
	function checkValidRequest(header, cb) {
	  try {
	    var access_token = header.authorization;
	
	    // check access_token
	    if (access_token) {
	      var userQuery = _users2.default.findOne({ token: access_token.split("Basic ")[1], userStatus: 'Active' }).populate('profile.companyid', 'businessType');
	      userQuery.exec(function (error, user) {
	        if (user) cb(user);else cb(null);
	      });
	    } else cb(null);
	  } catch (e) {
	    console.log("e in checkValidRequest === ", e);
	    cb(null);
	  }
	}

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("react-intl");

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = require("validator");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Roles = undefined;
	exports.listUser = listUser;
	exports.myUserSelector = myUserSelector;
	exports.myUsers = myUsers;
	exports.deleteUser = deleteUser;
	exports.myStudents = myStudents;
	exports.exportUsers = exportUsers;
	exports.exportUsersData = exportUsersData;
	exports.importUsers = importUsers;
	exports.createGuest = createGuest;
	exports.deleteGuest = deleteGuest;
	exports.myGroups = myGroups;
	exports.activateUser = activateUser;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _package = __webpack_require__(25);
	
	var _package2 = _interopRequireDefault(_package);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _corporate = __webpack_require__(41);
	
	var _corporate2 = _interopRequireDefault(_corporate);
	
	var _cuid = __webpack_require__(26);
	
	var _cuid2 = _interopRequireDefault(_cuid);
	
	var _limax = __webpack_require__(27);
	
	var _limax2 = _interopRequireDefault(_limax);
	
	var _sanitizeHtml = __webpack_require__(28);
	
	var _sanitizeHtml2 = _interopRequireDefault(_sanitizeHtml);
	
	var _md = __webpack_require__(31);
	
	var _md2 = _interopRequireDefault(_md);
	
	var _feedback = __webpack_require__(104);
	
	var _feedback2 = _interopRequireDefault(_feedback);
	
	var _students = __webpack_require__(33);
	
	var _students2 = _interopRequireDefault(_students);
	
	var _schedule = __webpack_require__(43);
	
	var _schedule2 = _interopRequireDefault(_schedule);
	
	var _questionnaire = __webpack_require__(42);
	
	var _questionnaire2 = _interopRequireDefault(_questionnaire);
	
	var _category = __webpack_require__(59);
	
	var _category2 = _interopRequireDefault(_category);
	
	var _location = __webpack_require__(75);
	
	var _location2 = _interopRequireDefault(_location);
	
	var _group = __webpack_require__(105);
	
	var _group2 = _interopRequireDefault(_group);
	
	var _datalog = __webpack_require__(48);
	
	var _datalog2 = _interopRequireDefault(_datalog);
	
	var _login = __webpack_require__(36);
	
	var LoginController = _interopRequireWildcard(_login);
	
	var _participantsgroup = __webpack_require__(76);
	
	var _participantsgroup2 = _interopRequireDefault(_participantsgroup);
	
	var _admin = __webpack_require__(54);
	
	var _randomstring = __webpack_require__(35);
	
	var _reflect = __webpack_require__(61);
	
	var _reflect2 = _interopRequireDefault(_reflect);
	
	var _parallel = __webpack_require__(60);
	
	var _parallel2 = _interopRequireDefault(_parallel);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	var moment = __webpack_require__(1);
	var exportToExcel = __webpack_require__(110);
	var Promise = __webpack_require__(40);
	var fs = __webpack_require__(23);
	var async = __webpack_require__(44);
	
	
	/**
	*  @Function name : listUser
	*  @Purpose : For fetching complete user data
	*  @Request Object : userdata : { data: { uid: "user id", currentPage: 1, totalItems: 0, itemsPerPage: 5, searchKeyword: 'searchKeyword' } }
	*  @Response Object : Success - User data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	//http://stackoverflow.com/questions/5539955/how-to-paginate-with-mongoose-in-node-js
	function listUser(req, res) {
		// console.log("req.body.userdata", req.body.userdata);
		// Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.query.items && req.query.page) {
					var selector = {};
					var corporateId = '';
	
					//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
					var bussinessID = null;
					if (person.profile.companyid && person.profile.companyid._id) {
						bussinessID = person.profile.companyid._id;
					}
					// console.log("req.query.isActive", req.query.isActive);
					//Query for finding corporate data based on search keyword
					var search = (0, _slashesActions.addSlash)(req.query.search);
					var query = _corporate2.default.findOne({ 'businessId': RegExp(search, 'i') });
					query.exec(function (err, corporate) {
						if (err) {
							console.log(err);
							res.json({ status: false, error: err.message });
						} else {
							var _corporateId = corporate ? corporate._id : '';
	
							//Search selector based on user role
							if (person.role == Roles.Superadmin) {
								selector = {
									_id: { $ne: person._id }
									// guest : {$exists : false},
									//   guest : false               
	
								};
							} else if (person.role == Roles.Admin || person.role == Roles.Lmsadmin || person.role == Roles.CRMadmin || person.role == Roles.Presenteradmin) {
								selector = {
									_id: { $ne: person._id },
									"profile.companyid": bussinessID
									/*guest : {$exists : false},
	          guest : false  */
	
								};
							}
	
							//If searchKeyword is not empty then create RegExp
							if (req.query.search && req.query.search.trim() != '') {
								var slash_search = (0, _slashesActions.addSlash)(req.query.search.trim());
								var _search = req.query.search.trim();
								var searchKey = RegExp(slash_search, 'i');
								var roleSearchKeyword = (0, _slashesActions.addSlash)(_search.charAt(0).toUpperCase() + _search.slice(1).toLowerCase());
								var roleKey = Roles[roleSearchKeyword];
								var role = roleKey ? roleKey : '';
								var activeUser = '';
	
								selector['$or'] = [{ 'firstname': { $regex: searchKey } }, { 'lastname': { $regex: searchKey } }, { 'email': { $regex: searchKey } }, { 'role': role }, { 'profile.companyid': _corporateId }];
							}
	
							if (req.query.userStatus != '') {
								if (req.query.userStatus == 'Guest') {
									selector['guest'] = true;
								} else {
									selector['userStatus'] = req.query.userStatus.trim();
									selector['guest'] = false;
								}
							} else {
								selector['guest'] = false;
							}
	
							//Query for fetching complete user data based on selector and skip items based on itemsPerPage on previous page
	
							var fetchquery = _users2.default.find(selector).limit(Number(req.query.items)).select('firstname lastname email role dateAdded profile guest').populate('profile.companyid', 'businessId _id').skip(Number(req.query.items) * (Number(req.query.page) - 1));
							if (req.query.sort == 'undefined' || req.query.sort == undefined) {
								fetchquery.sort({ dateAdded: -1 });
							} else {
								fetchquery.sort(JSON.parse(req.query.sort));
							}
	
							fetchquery.exec(function (error, result) {
								if (error) {
									console.log(error);
								} else {
	
									//Query for counting complete user data based on selector
									_users2.default.count(selector).exec(function (err, count) {
										// console.log("controller result", result);
										res.json({
											status: true,
											data: result,
											count: count
										});
									});
								}
							});
						}
					});
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				console.log("e in listUser", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	function myUserSelector(obj, cb) {
		try {
			_users2.default.findOne({ _id: mongoose.Types.ObjectId(obj.uid) }).select('role -_id').exec(function (usererr, person) {
				if (person) {
					var slash_input = (0, _slashesActions.addSlash)(obj.input);
					if (obj.moduleName && obj.moduleName[2].toLowerCase() == 'room') {
						_room2.default.findOne({ _id: mongoose.Types.ObjectId(obj.moduleName[4]) }).select('users corporateId -_id').exec(function (roomerr, room) {
							if (room) {
								_corporate2.default.findOne({ _id: room.corporateId }).select('businessType _id').exec(function (corporateerr, corporate) {
									if (corporate) {
										var selector = null;
										if (corporate.businessType && corporate.businessType == 'Conference') {
											if (person.role == Roles.Superadmin) {
												selector = { "role": Roles.Admin,
													"profile.companyid": mongoose.Types.ObjectId(corporate._id),
													"_id": { $nin: room.users },
													$or: [{ "email": { "$regex": slash_input, $options: "i" } }, { "firstname": { "$regex": slash_input, $options: "i" } }]
												};
											} else if (person.role == Roles.Admin) {
												selector = { $and: [{ $or: [{ "email": { "$regex": slash_input, $options: "i" } }, { "firstname": { "$regex": slash_input, $options: "i" } }] }, { "role": { $lte: Roles.User, $gte: Roles.Admin } }, { "profile.companyid": mongoose.Types.ObjectId(corporate._id) }, { "_id": { $nin: room.users } }] };
											}
										} else if (corporate.businessType && corporate.businessType == 'LMS') {
											// console.log("in lms");
											if (person.role == Roles.Superadmin) {
												selector = { "role": Roles.Lmsadmin,
													"profile.companyid": mongoose.Types.ObjectId(corporate._id),
													"_id": { $nin: room.users },
													$or: [{ "email": { "$regex": slash_input, $options: "i" } }, { "firstname": { "$regex": slash_input, $options: "i" } }]
												};
											} else if (person.role == Roles.Lmsadmin) {
												selector = { $and: [{ $or: [{ "email": { "$regex": slash_input, $options: "i" } }, { "firstname": { "$regex": slash_input, $options: "i" } }] }, { $or: [{ "role": Roles.Instructor }, { "role": Roles.Lmsadmin }] }, { "profile.companyid": mongoose.Types.ObjectId(corporate._id) }, { "_id": { $nin: room.users } }] };
											}
										} else if (corporate.businessType && corporate.businessType == 'Presenter') {
											// console.log("in Presenter");
											if (person.role == Roles.Superadmin) {
												selector = { "role": Roles.Presenteradmin,
													"profile.companyid": mongoose.Types.ObjectId(corporate._id),
													"_id": { $nin: room.users },
													$or: [{ "email": { "$regex": slash_input, $options: "i" } }, { "firstname": { "$regex": slash_input, $options: "i" } }]
												};
											} else if (person.role == Roles.Presenteradmin) {
												selector = { $and: [{ $or: [{ "email": { "$regex": slash_input, $options: "i" } }, { "firstname": { "$regex": slash_input, $options: "i" } }] }, { $or: [{ "role": Roles.Presenter }, { "role": Roles.Presenteradmin }] }, { "profile.companyid": mongoose.Types.ObjectId(corporate._id) }, { "_id": { $nin: room.users } }] };
											}
										}
										cb(null, selector);
									} else cb(corporateerr, null);
								});
							} else cb(roomerr, null);
						});
					} else if (obj.moduleName && obj.moduleName[2].toLowerCase() == 'package') {
						var selector = { $and: [{ $or: [{ "email": { "$regex": slash_input, $options: "i" } }, { "firstname": { "$regex": slash_input, $options: "i" } }] }, { $or: [{ "role": Roles.Admin }, { "role": Roles.Lmsadmin }, { "role": Roles.Presenteradmin }] }] };
						cb(null, selector);
					} else {
						cb(null, null);
					}
				} else cb("Unauthorized user.", null);
			});
		} catch (e) {
			console.log('error in myUserSelector', e);
			cb('Internal server error', null);
		}
	}
	
	function myUsers(req, res) {
		try {
			// console.log("my users server req = ", req.body);
			if (req.body.searchData && req.body.searchData.uid) {
				var obj = req.body.searchData;
				myUserSelector(obj, function (selectorerr, selector) {
					/*console.log("selector === ",selector);
	    console.log("selectorerr === ",selectorerr);*/
					if (selector != null) {
						selector['userStatus'] = 'Active';
						selector['guest'] = false;
						var query = _users2.default.find(selector).select('firstname lastname email profile.profileImage role');
						query.exec(function (err, result) {
							if (err) {
								console.log("error--", err);
								res.json({ status: false, error: "Error while fatching result." });
							} else {
								res.json({ status: true, data: result });
							}
						});
					} else if (selectorerr != null) {
						res.json({ status: true, error: selectorerr });
					} else {
						res.json({ status: true, error: "Invalid request." });
					}
				});
			} else {
				res.json({ status: true, error: "Invalid request." });
			}
		} catch (e) {
			console.log('error in myUsers', e);
			res.json({
				status: false,
				error: 'Internal server error'
			});
		}
	}
	
	/**
	*  @Function name : getCompanyIds
	*  @Purpose : For fetching corporate data
	*  @Request Object : { token: 'token' }
	*  @Response Object : Success - Corporate data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	// Currently Unsed
	// export function getCompanyIds(req, res){
	// 	//var options = [['', 'Select Company Id']];
	
	// 	//Verifying if token is there or not
	// 	if(!req.body.token) {
	// 		res.json({ 
	// 			data : []
	// 		});
	// 	} else {
	
	// 		//Query for finding user data based on token
	// 		var userquery = Users
	// 		.findOne({'token': req.body.token})
	// 		.select('-password');
	// 		userquery.exec(function (err, person) {
	
	// 			//If user is present
	// 			if (person) {
	
	// 				//Verifying if user is superadmin or not
	// 				if(person.role == Roles.Superadmin ) {
	
	// 					//Query for finding complete corporate data
	// 					var query = Corporate.find({});
	// 					query.exec(function(error, doc){
	// 						if(doc) {
	// 							/*_.forIn(doc, function(value, key) {
	// 								let name = value.businessId+"("+value.businessName+")";
	// 								options.push([value._id, name]);
	// 							});*/
	// 							res.json({ 
	// 								data : doc
	// 							});
	// 						} else {
	// 							res.json({ 
	// 								data : []
	// 							});
	// 						}
	// 					});
	// 				} else if(person.role == Roles.Admin || person.role == Roles.Lmsadmin || person.role == Roles.CRMadmin || person.role == Roles.Presenteradmin) {
	
	// 					//Query for finding corporate data based on company id
	// 					var query = Corporate.find({ 
	// 						_id : person.profile.companyid
	// 					});
	// 					query.exec(function (error,doc) {
	// 						if(doc) { 
	// 							/*_.forIn(doc, function(value, key) {
	// 								let name = value.businessId+"("+value.businessName+")";
	// 								options.push([value._id, name]);
	// 							});*/
	// 							res.json({ 
	// 								data : doc
	// 							});
	// 						} else{
	// 							res.json({ 
	// 								data : []
	// 							});
	// 						}
	// 					});
	// 				}
	// 			} else {
	// 				res.json({ 
	// 					data : []
	// 				});
	// 			}
	// 		});
	// 	}  
	// }
	
	/**
	*  @Function name : deleteUser
	*  @Purpose : For deleting user
	*  @Request Object : userdata : { id: 'user id' }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteUser(req, res) {
		try {
			//Verifying if request is valid or not
			if (req.body.userdata) {
				var obj = req.body.userdata;
	
				//Validating if user id is valid or not
				if (!obj.id || validator.isEmpty(obj.id) || !mongoose.Types.ObjectId.isValid(obj.id)) {
					res.json({
						status: false,
						error: "Invalid user."
					});
				} else {
					var recordId = mongoose.Types.ObjectId(req.body.userdata.id);
	
					//Query for checking if user is present in database
					var query = _users2.default.findOne({
						_id: recordId
					});
					query.exec(function (err, doc) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							// console.log("user document:", doc);
							// var now = moment().utc().toDate();
	
							// //Log obj which need to be inserted in logger collection
							//     var logObj = {
							//       logType : 'User',
							//       actionType : 'Deleted',
							//       actionTime : now,
							//       uid : doc.createdby,
							//       details : {
							//         name : doc.firstname,
							//         companyId : doc.profile.companyid,
							//         remoteAddress : req.connection.remoteAddress,
							//         userAgent : req.headers['user-agent']
							//       }
							//     }
	
							//Verifying if user is admin or not
							if (doc.role == Roles.Admin || doc.role == Roles.Lmsadmin || doc.role == Roles.Presenteradmin) {
	
								//Query for finding package data based on user id
								var packageQuery = _package2.default.find({
									"assignedTo": doc._id
								});
								packageQuery.exec(function (error, packageDoc) {
									if (error) {
										res.json({
											status: false,
											error: error.message
										});
									} else {
	
										//Verifying if package is present or not
										if (packageDoc && packageDoc.length > 0) {
											res.json({
												status: false,
												error: "Package exists:delete all package assigned to the user and try again."
											});
										} else {
	
											//Used async parallel for running the tasks collection of functions in parallel, 
											//without waiting until the previous function has completed.
											//Used async refect to continue the execution of other tasks when a task fails.deleteUser
											async.parallel([async.reflect(function (callback) {
												var checkScheduleQuery = _schedule2.default.remove({
													createdBy: doc._id
												});
												checkScheduleQuery.exec(function (schError, scheduleDoc) {
													if (schError) {
														callback(schError.message);
													} else {
														callback(null);
													}
												});
											}), async.reflect(function (callback) {
												var checkQuestionnaireQuery = _questionnaire2.default.remove({
													createdBy: doc._id
												});
												checkQuestionnaireQuery.exec(function (queError, questionnaireDoc) {
													if (queError) {
														callback(queError.message);
													} else {
														callback(null);
													}
												});
											}), async.reflect(function (callback) {
												var checkCategoryQuery = _category2.default.remove({
													createdBy: doc._id
												});
												checkCategoryQuery.exec(function (catError, categoryDoc) {
													if (catError) {
														callback(catError.message);
													} else {
														callback(null);
													}
												});
											}), async.reflect(function (callback) {
												var checkLocationQuery = _location2.default.remove({
													createdBy: doc._id
												});
												checkLocationQuery.exec(function (locError, locationDoc) {
													if (locError) {
														callback(locError.message);
													} else {
														callback(null);
													}
												});
											}), async.reflect(function (callback) {
												var checkGroupQuery = _group2.default.remove({
													createdBy: doc._id
												});
												checkGroupQuery.exec(function (groupError, groupDoc) {
													if (groupError) {
														callback(groupError.message);
													} else {
														callback(null);
													}
												});
											}), async.reflect(function (callback) {
												var checkPartGroupQuery = _participantsgroup2.default.remove({
													createdBy: doc._id
												});
												checkPartGroupQuery.exec(function (partgroupError, partgroupDoc) {
													if (partgroupError) {
														callback(partgroupError.message);
													} else {
														callback(null);
													}
												});
											}), async.reflect(function (callback) {
												if (_.isEmpty(doc.contacts)) {
													callback(null);
												} else {
	
													//Async.forEachOf iteratee to each item in doc.contacts, in parallely
													async.forEachOf(doc.contacts, function (data, key, callback) {
														var checkUserContactQuery = _users2.default.update({
															_id: data._id
														}, {
															$pull: {
																"contacts": {
																	"_id": doc._id
																}
															}
														});
														checkUserContactQuery.exec(function (contactError, contactDoc) {
															if (contactError) {
																return callback(contactError.message);
															} else {
																callback();
															}
														});
													}, function (err) {
														if (err) {
															callback(err);
														} else {
															callback(null);
														}
													});
												}
											}), async.reflect(function (callback) {
												var checkRoomLocationParticipants = _room2.default.update({
													locations: {
														$elemMatch: {
															locationParticipants: doc._id
														}
													}
												}, {
													$pull: {
														"locations.$.locationParticipants": doc._id
													}
												}, {
													multi: true
												});
												checkRoomLocationParticipants.exec(function (error, locationData) {
													if (error) {
														callback(error.message);
													} else {
														callback(null);
													}
												});
											})],
											// optional callback
											function (err, results) {
												if (err) {
													res.json({
														status: false,
														error: err.message
													});
												} else {
	
													//For finding error object in results
													var errorObject = _.find(results, 'error');
	
													//Verifying if error object is there or not
													if (errorObject == undefined) {
														var innerquery = _users2.default.update({
															_id: recordId
														}, { $set: { userStatus: 'Deleted' } });
														innerquery.exec(function (userError, response) {
															if (userError) {
																res.json({
																	status: false,
																	error: "Error while deleteing user."
																});
															} else {
																res.json({
																	status: true,
																	message: "Deleted successfully."
																});
	
																//Function for creating log on successful deletion of user
																// createLog(logObj, function(status) {
																//         if(status) {
																//           // console.log(status);
																//         }
																//       });
															}
														});
													} else {
														res.json({
															status: false,
															error: "Error while deleteing user."
														});
													}
												}
											});
										}
									}
								});
							} else {
	
								//Used async parallel for running the tasks collection of functions in parallel, 
								//without waiting until the previous function has completed.
								//Used async refect to continue the execution of other tasks when a task fails.
								async.parallel([async.reflect(function (callback) {
									var checkScheduleQuery = _schedule2.default.remove({
										createdBy: doc._id
									});
									checkScheduleQuery.exec(function (schError, scheduleDoc) {
										if (schError) {
											callback(schError.message);
										} else {
											callback(null);
										}
									});
								}), async.reflect(function (callback) {
									var checkParticipantsGroup = _participantsgroup2.default.remove({
										createdBy: recordId
									});
									checkParticipantsGroup.exec(function (groupError, groupDoc) {
										if (groupError) {
											callback(groupError.message);
										} else {
											callback(null);
										}
									});
								}), async.reflect(function (callback) {
									var checkPartGroupQuery = _participantsgroup2.default.update({}, {
										$pull: {
											participants: mongoose.Types.ObjectId(recordId)
										}
									}, {
										multi: true
									});
									checkPartGroupQuery.exec(function (partgroupError, partgroupDoc) {
										if (partgroupError) {
											callback(partgroupError.message);
										} else {
											callback(null);
										}
									});
								}), async.reflect(function (callback) {
									if (_.isEmpty(doc.contacts)) {
										callback(null);
									} else {
	
										//Async.forEachOf iteratee to each item in doc.contacts, in parallely
										async.forEachOf(doc.contacts, function (data, key, callback) {
											var checkUserContactQuery = _users2.default.update({
												_id: data._id
											}, {
												$pull: {
													"contacts": {
														"_id": doc._id
													}
												}
											});
											checkUserContactQuery.exec(function (contactError, contactDoc) {
												if (contactError) {
													return callback(contactError.message);
												} else {
													callback();
												}
											});
										}, function (err) {
											if (err) {
												callback(err);
											} else {
												callback(null);
											}
										});
									}
								}), async.reflect(function (callback) {
									var checkRoomLocationParticipants = _room2.default.update({
										locations: {
											$elemMatch: {
												locationParticipants: doc._id
											}
										}
									}, {
										$pull: {
											"locations.$.locationParticipants": doc._id
										}
									}, {
										multi: true
									});
									checkRoomLocationParticipants.exec(function (error, locationData) {
										if (error) {
											callback(error.message);
										} else {
											callback(null);
										}
									});
								})],
								// optional callback
								function (err, results) {
									if (err) {
										res.json({
											status: false,
											error: err.message
										});
									} else {
	
										//For finding error object in results
										var errorObject = _.find(results, 'error');
	
										//Verifying if error object is there or not
										if (errorObject == undefined) {
											var innerquery = _users2.default.update({
												_id: recordId
											}, { $set: { userStatus: 'Deleted' } });
											innerquery.exec(function (userError, response) {
												if (userError) {
													res.json({
														status: false,
														error: "Error while deleteing user."
													});
												} else {
													res.json({
														status: true,
														message: "Deleted successfully."
													});
	
													//Function for creating log on successful deletion of user
													// createLog(logObj, function(status) {
													//         if(status) {
													//           // console.log(status);
													//         }
													//       });
												}
											});
										} else {
											res.json({
												status: false,
												error: "Error while deleteing user."
											});
										}
									}
								});
							}
						}
					});
				}
			} else {
				res.json({
					status: false,
					error: "Invalid request."
				});
			}
		} catch (e) {
			console.log('error in deleteUser', e);
			res.json({
				status: false,
				error: 'Internal server error'
			});
		}
	}
	
	/*
	@Function Name : myStudents
	@Purpose : "To search students as per input from client side for assigning into room"
	@Request Object : query:{input,roomId,instId}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function myStudents(req, res) {
	
		// Verifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.query.roomId && mongoose.Types.ObjectId.isValid(req.query.roomId) && req.query.instId && mongoose.Types.ObjectId.isValid(req.query.instId) && req.query.input) {
					var obj = req.query;
	
					//Firing a query to find whether the room document exists or not
					_room2.default.findOne({
						_id: obj.roomId
					}).select('users corporateId -_id').exec(function (err, roomDoc) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
	
							if (roomDoc) {
								var slash_input = (0, _slashesActions.addSlash)(obj.input);
	
								//Firing a query to find whether students document for partiular roomId and instId exists or not
								_students2.default.findOne({ roomId: obj.roomId, instId: obj.instId }).select('students -_id').exec(function (err, student) {
									if (err) {
										res.json({
											status: false,
											error: "Invalid student id."
										});
									} else {
										if (student == null) {
	
											//if student document is null then fire a query without checking for students in student document 
											_users2.default.find({
												$and: [{
													$or: [{
														"email": {
															"$regex": slash_input,
															$options: "i"
														}
													}, {
														"firstname": {
															"$regex": slash_input,
															$options: "i"
														}
													}]
												}, {
													"userStatus": 'Active',
													"guest": false
												}, {
													$or: [{
														"role": Roles.Student
													}, {
														"role": Roles.Attendee
													}]
												}, {
													"profile.companyid": mongoose.Types.ObjectId(roomDoc.corporateId)
												}]
											}).select('firstname lastname email profile.profileImage role').exec(function (error, result) {
												if (error) {
													res.json({
														status: false,
														error: "Error while fetching result."
													});
												} else {
													res.json({
														status: true,
														data: result
													});
												}
											});
										} else {
	
											//if student document is not null then fire a query with checking for students in student document 
											_users2.default.find({
												$and: [{
													$or: [{
														"email": {
															"$regex": slash_input,
															$options: "i"
														}
													}, {
														"firstname": {
															"$regex": slash_input,
															$options: "i"
														}
													}]
												}, {
													"userStatus": 'Active',
													"guest": false
												}, {
													$or: [{
														"role": Roles.Student
													}, {
														"role": Roles.Attendee
													}]
												}, {
													"profile.companyid": mongoose.Types.ObjectId(roomDoc.corporateId)
												}, {
													"_id": {
														$nin: student.students
													}
												}]
											}).select('firstname lastname email profile.profileImage role').exec(function (error, result) {
												if (error) {
													res.json({
														status: false,
														error: "Error while fetching result."
													});
												} else {
													res.json({
														status: true,
														data: result
													});
												}
											});
										}
									}
								});
							} else {
								res.json({
									status: false,
									error: "Error while fetching room detail."
								});
							}
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in myStudents', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	var Roles = exports.Roles = {
		Superadmin: 1,
		Admin: 2,
		Moderator: 3,
		User: 4,
		Guest: 5,
		Lmsadmin: 12,
		Instructor: 13,
		Student: 14,
		Parent: 15,
		CRMadmin: 22,
		CRMuser: 23,
		Presenteradmin: 31,
		Presenter: 32,
		Attendee: 33
	
		/**
	 *  @Function name : exportUsers
	 *  @Purpose : For exporting users to excel sheet
	 *  @Request Object : {userData: searched user data}
	 *  @Response Object : Success - Exported excel filename, Failure - Error message
	 *  @Author : Aniket Gupta
	 */
	
	};function exportUsers(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				//changeBy: pranathi, disc: exporting users data based on role and user status
				//Verifying if request is valid or not
				if (person == null || !req.query.userStatus) {
					res.json({
						status: false,
						error: "InValid request."
					});
				} else {
	
					var exportData = void 0;
					var selector = {};
	
					//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
					var bussinessID = null;
					if (person.profile.companyid && person.profile.companyid._id) {
						bussinessID = person.profile.companyid._id;
					}
	
					//Query for finding all user data created by logged in user
					if (person.role == Roles.Superadmin) {
						selector = {
							_id: { $ne: person._id }
						};
					} else {
						selector = {
							// createdby : person._id,
							_id: { $ne: person._id },
							"profile.companyid": bussinessID
						};
					}
	
					//If searchKeyword is not empty then create RegExp
					if (req.query.searchKeyword && req.query.searchKeyword.trim() != '') {
						var slash_search = (0, _slashesActions.addSlash)(req.query.searchKeyword.trim());
						var search = req.query.searchKeyword.trim();
						var searchKey = RegExp(slash_search, 'i');
	
						selector['$or'] = [{ 'firstname': { $regex: searchKey } }, { 'lastname': { $regex: searchKey } }];
					}
	
					if (req.query.userStatus != '') {
						if (req.query.userStatus == 'Guest') {
							selector['guest'] = true;
						} else {
							selector['userStatus'] = req.query.userStatus;
							selector['guest'] = false;
						}
					} else {
						selector['guest'] = false;
					}
	
					_users2.default.find(selector).lean().exec(function (err, doc) {
						if (err) {
							res.json({
								status: false,
								error: "Data not found."
							});
						} else if (doc && doc.length > 0) {
							var roleObj = _.invert(Roles);
							for (var index in doc) {
								doc[index].role = roleObj[doc[index].role];
							}
	
							//Funciton call for exporting users
							exportUsersData(doc, function (error, filename) {
								if (filename != null) {
									res.json({
										status: true,
										data: filename
									});
								} else {
									res.json({
										status: false,
										error: error
									});
								}
							});
						} else {
							res.json({
								status: false,
								error: "Data not found."
							});
						}
					});
				}
			} catch (e) {
				console.log('error in exportUsers', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	/**
	*  @Function name : exportUsersData
	*  @Purpose : For exporting users to excel sheet
	*  @exportData : { user data}
	*  @callback : Status, Data
	*  @Author : Aniket Gupta
	*/
	
	function exportUsersData(exportData, callback) {
	
		try {
			var timeStamp = new Date().getTime();
			var invertedRole = _.invert();
	
			//For converting exportData to excel using export-to-excel package and creating unique filenames accoriding to timestamp
			var fileName = exportToExcel.exportXLSX({
				filename: 'Users' + '_' + timeStamp,
				sheetname: 'Sheet1',
				title: [{
					"fieldName": "firstname",
					"displayName": "FirstName",
					"cellWidth": 30
				}, {
					"fieldName": "lastname",
					"displayName": "LastName",
					"cellWidth": 30
				}, {
					"fieldName": "email",
					"displayName": "Email",
					"cellWidth": 30
				}, {
					"fieldName": "userStatus",
					"displayName": "UserStatus",
					"cellWidth": 30
				}, {
					"fieldName": "role",
					"displayName": "Role",
					"cellWidth": 30
				}],
				data: exportData
			});
	
			//Default destination of exported excel sheet i.e root
			var dest = process.env.PWD + "/" + fileName;
	
			//New destination for exported excel sheet i.e public
			var newDest = process.env.PWD + "/public/" + fileName;
	
			//For copying exported excel sheet from default destination to new destination
			fs.createReadStream(dest).pipe(fs.createWriteStream(newDest));
	
			//Deleting exported excel sheet from default destination
			fs.unlink(dest, function (err, result) {
				if (err) {
					callback(err.message, null);
					// res.json({ status: false, error: err.message });
				} else {
					// console.log("res", result)
					// callback({ 
					// 	status: true, 
					// 	data: fileName
					// })
					callback(null, fileName);
					// }
				}
			});
		} catch (e) {
			console.log('error in exportUsersData', e);
			callback("Internal server error.", null);
		}
	}
	
	/**
	*  @Function name : importUsers
	*  @Purpose : For importing users to database converted from excel to json
	*  @Request Object : userdata : { importData : { all users data in array of objects }, userData: { uid: "user id", currentPage: 1, totalItems: 0, itemsPerPage: 5, searchKeyword: 'searchKeyword'} }
	*  @Response Object : Success - User data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	//Todo: Async flow problem ( sometimes list is not being updated instantly)
	function importUsers(req, res) {
		// console.log("import user:", req.body.userdata);
		(0, _authorization.checkValidRequest)(req.headers, function (user) {
			try {
				//Verifying if request is valid or not
				if (!req.body.userdata || req.body.userData && !req.body.userData.importData || req.body.userData && req.body.userData.importData && req.body.userData.importData.length <= 0) {
					res.json({
						status: false,
						error: "Invalid request"
					});
				} else {
					var userData = req.body.userdata.userData;
	
					//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
					var bussinessID = user.profile.companyid && user.profile.companyid._id ? user.profile.companyid._id : null;
	
					//Validating if user is valid or not
					if (!userData.uid || validator.isEmpty(userData.uid) || !mongoose.Types.ObjectId.isValid(userData.uid)) {
						res.json({
							status: false,
							error: "InValid user."
						});
					} else {
	
						//Query for checking if the user is present in database
						var query = _users2.default.findOne({
							_id: mongoose.Types.ObjectId(userData.uid)
						});
						query.exec(function (err, person) {
							if (err) {
								res.json({
									status: false,
									error: "Unauthorized user."
								});
							}
	
							//If user is present in database
							if (person) {
	
								//If user has a valid role
								if (person.role == Roles.Superadmin || person.role == Roles.Admin || person.role == Roles.Lmsadmin || person.role == Roles.Presenteradmin || person.role == Roles.CRMadmin) {
									var importData = req.body.userdata.importData;
									var itemsProcessed = 0;
									var errorData = [];
									// console.log("total data", importData)
	
									//Verifying if importData is empty or not
									if (_.isEmpty(importData)) {
										errorData.push("Can't export empty sheet");
									} else {
										//console.log("importData----", importData);
										//Map the importData using bluebird promise
										Promise.map(importData, function (userObject) {
											// console.log("map data", userObject)
											if (userObject == null) {
												errorData.push("Row shouldn't be empty");
												//   	itemsProcessed++;
												// if(itemsProcessed === importData.length) {
												//      importSuccess();
												//  }
												// res.json({ status : false, error : "Row shouldn't be empty" });
											} else {
												var obj = {};
												var corporateId = '';
												var role = '';
												var corporateType = '';
												if (userObject.BusinessCode == undefined && userObject.FirstName == undefined && userObject.Email == undefined && userObject.Role == undefined) {
													errorData.indexOf("FirstName, Email, Business Code and Role is required ") === -1 ? errorData.push("FirstName, Email, Business Code and Role is required ") : null;
												} else if (userObject.FirstName == undefined && userObject.Email) {
													errorData.push("FirstName is required for " + userObject.Email);
												} else if (userObject.Email == undefined && userObject.FirstName) {
													errorData.push("Email is required for " + userObject.FirstName);
												} else if (userObject.BusinessCode == undefined && userObject.FirstName) {
													errorData.push("Business Code is required for " + userObject.FirstName);
												} else if (userObject.Role == undefined && userObject.FirstName) {
													errorData.push("Role is required for " + userObject.FirstName);
												} else if (userObject.BusinessCode == undefined || userObject.FirstName == undefined || userObject.Email == undefined || userObject.Role == undefined) {
													errorData.indexOf("Please fill all the fields ") === -1 ? errorData.push("Please fill all the fields ") : null;
												} else {
	
													//If BusinessCode is present or not
													if (userObject.BusinessCode) {
	
														//Query for finding the corporate data based on business id
														_corporate2.default.findOne({
															businessId: (0, _slashesActions.addSlash)(userObject.BusinessCode)
														}, function (err, corp) {
															if (err) {
																errorData.push(err.message);
															} else if (corp) {
																corporateId = corp._id;
																corporateType = corp.businessType;
																// console.log("corporateId.toString()---", corporateId.toString());
																// console.log("bussinessID.toString()---", bussinessID.toString());
																//console.log("(corp---", corp);
																//Add toString() for convert these two to strings
																//For checking if logged in user is not importing user by typing others business code
																if (corporateId.toString() == bussinessID.toString()) {
																	// console.log("corp", corporateId)
																	if (userObject.Role) {
	
																		//Find role code against name(userObject.Role)
																		role = Roles[userObject.Role];
																		// console.log("role", role)
																		// if (businessType == "LMS") {
	
																		// }
																		if (role == Roles.Admin || role == Roles.Lmsadmin || role == Roles.Presenteradmin) {
																			errorData.push("Can't Import Admin");
																		} else if (corporateType == 'LMS' && (role == Roles.Instructor || role == Roles.Student) || corporateType == 'Conference' && (role == Roles.Moderator || role == Roles.User) || corporateType == 'Presenter' && (role == Roles.Presenter || role == Roles.Attendee)) {
																			obj["createdby"] = mongoose.Types.ObjectId(person._id);
																			obj["modifiedby"] = mongoose.Types.ObjectId(person._id);
																			obj["dateAdded"] = moment().utc().toDate();
																			obj["modifiedAt"] = moment().utc().toDate();
																			obj['firstname'] = userObject.FirstName;
																			obj['lastname'] = userObject.LastName;
																			obj['email'] = userObject.Email;
																			obj['profile.companyid'] = corporateId;
																			obj['role'] = role;
																			obj["password"] = (0, _md2.default)('123456');
	
																			//Query for checking the exisitng data based on email
																			_users2.default.findOne({
																				email: (0, _slashesActions.addSlash)(obj.email)
																			}, function (err, doc) {
																				if (err) {
																					errorData.push(err.message);
																				} else if (doc) {
																					errorData.push("Email" + " " + obj.email + " already existed. ");
																				} else {
	
																					//Create new user
																					var objUser = new _users2.default(obj);
																					objUser.save(function (err, doc) {
																						if (err) {
																							console.log("err", err);
																							errorData.push(err.message);
																						} else {
																							// console.log("doc", doc)
																						}
																					});
																				}
																			});
																		} else {
																			errorData.indexOf("Invalid role") === -1 ? errorData.push("Invalid role") : null;
																		}
																	}
																} else {
																	errorData.indexOf("Incorrect Business Code ") === -1 ? errorData.push("Incorrect Business Code ") : null;
																}
															} else {
																errorData.indexOf("Incorrect Business Code ") === -1 ? errorData.push("Incorrect Business Code ") : null;
															}
														});
													}
												}
												// console.log("i", itemsProcessed)
												// itemsProcessed++;
												// if(itemsProcessed === importData.length) {
												//      importSuccess();
												//  }
											}
										}).then(function importSuccess() {
											// console.log("in success")
											var selector = {};
											var corpId = '';
	
											//Query for finding the corporate data based on searched keryword
											var query = _corporate2.default.findOne({
												'businessId': (0, _slashesActions.addSlash)(userData.searchKeyword)
											});
											query.exec(function (err, corp) {
												if (err) {
													console.log(err);
												} else {
													if (corp) {
														corpId = corp._id;
													}
	
													//Search selector based on user role
													if (person.role == Roles.Superadmin) {
														selector = {
															_id: {
																$ne: mongoose.Types.ObjectId(userData.uid)
															}, userStatus: "Active", guest: false
														};
													} else if (person.role == Roles.Admin || person.role == Roles.Lmsadmin || person.role == Roles.CRMadmin || person.role == Roles.Presenteradmin) {
														selector = {
															_id: {
																$ne: mongoose.Types.ObjectId(userData.uid)
															}, "profile.companyid": (0, _slashesActions.addSlash)(bussinessID),
															userStatus: "Active", guest: false
														};
													}
	
													//If searchKeyword is not empty then create RegExp
													if (userData.searchKeyword && userData.searchKeyword != '') {
	
														var searchKey = RegExp((0, _slashesActions.addSlash)(userData.searchKeyword), 'i');
														var roleSearchKeyword = userData.searchKeyword.charAt(0).toUpperCase() + userData.searchKeyword.slice(1).toLowerCase();
	
														//Find role code against name which is searched(roleSearchKeyword)
														var roleKey = Roles[roleSearchKeyword];
														var role;
	
														//Verifying if roleKey is undefined then assign empty string to role
														if (roleKey == undefined) {
															role = '';
														} else {
															role = roleKey;
														}
														selector['$or'] = [{ 'firstname': { $regex: searchKey } }, { 'lastname': { $regex: searchKey } }, { 'email': { $regex: searchKey } }, { 'role': role }, { 'profile.companyid': corpId }];
													}
	
													//Query for fetching complete user data based on selector and skip items based on itemsPerPage on previous page
													var query = _users2.default.find(selector).limit(userData.itemsPerPage).select('firstname lastname email role dateAdded profile').populate('profile.companyid', 'businessId _id').skip(userData.itemsPerPage * (userData.currentPage - 1)).sort({
														dateAdded: -1
													});
													if (query) {
														query.exec(function (error, result) {
															if (error) {
																console.log("error at count");
																console.log(error);
															} else {
	
																//Query for counting complete user data based on selector
																_users2.default.count(selector).exec(function (err, count) {
																	//console.log("controller result", result);
																	if (errorData && errorData.length > 0) {
																		errorData.unshift('Import process completed But Below errors are there');
																		res.json({
																			status: true,
																			data: result,
																			count: count,
																			message: 'Import process completed',
																			error: errorData
																		});
																	} else {
																		res.json({
																			status: true,
																			data: result,
																			count: count,
																			message: 'Imported all data successfully'
																		});
																	}
																});
															}
														});
													} else {
														res.json({
															status: false,
															error: "Access denied."
														});
													}
												}
											});
										});
									}
								} else {
									res.json({
										status: false,
										error: "Access denied."
									});
								}
							}
						});
					}
				}
			} catch (e) {
				console.log('error in importUsers', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	function createGuest(req, res) {
		// console.log(req.body.guestObject);
		try {
			var guestObject = req.body.guestObject;
	
			if (guestObject.slotId) {
				// console.log("Scheduled guest invite");
				var today = Number(moment().utc().format('x'));
				_schedule2.default.findOne({ "dates._id": guestObject.slotId,
					dates: { $elemMatch: { startTime: { $lte: today }, endTime: { $gte: today } } }
				}).exec(function (schErr, schRes) {
					// console.log("sch res---", schRes);
					if (!schErr && schRes && schRes.dates && schRes.dates.length > 0) {
						_room2.default.findOne({ _id: schRes.roomId }).populate('corporateId', 'businessType _id').populate('users', 'role').exec(function (err, room) {
							if (err) {
								res.json({ status: false, error: "Error fetching Room Data." });
							} else if (room && room.roomid) {
								// console.log(room);
								if (room.corporateId) {
	
									guestUserCreateAndAddToRoom(guestObject, room, function (finalErr, finalRes) {
										if (finalErr) res.json(finalErr);else res.json(finalRes);
									});
								} else {
									res.json({ status: false, error: "Corporate Type is missing." });
								}
							} else {
								// resConfObj['error'] = "Missing Room or Key.";
								res.json({ status: false, error: "Missing Room or Key." });
							}
						});
					} else if (schErr) {
						res.json({ status: false, error: "Error while fetching schedule." });
					} else {
						res.json({ status: false, error: "No schedule exist. Please join at the time of schedule." });
					}
				});
			} else if (guestObject.roomKey) {
				// console.log("Room guest invite");
				_room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(guestObject.roomKey) }).populate('corporateId', 'businessType _id').populate('users', 'role').exec(function (err, room) {
					if (err) {
						res.json({ status: false, error: "Error fetching Room Data." });
					} else if (room && room.roomid) {
						// console.log(room);
						if (room.corporateId) {
	
							guestUserCreateAndAddToRoom(guestObject, room, function (finalErr, finalRes) {
								if (finalErr) res.json(finalErr);else res.json(finalRes);
							});
						} else {
							res.json({ status: false, error: "Corporate Type is missing." });
						}
					} else {
						// resConfObj['error'] = "Missing Room or Key.";
						res.json({ status: false, error: "Missing Room or Key." });
					}
				});
			} else {
				// console.log("Invalid guest invite");
				res.json({
					status: false,
					error: "Some error occured, Please try again"
				});
			}
		} catch (e) {
			console.log("error in createGuest", e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	function guestUserCreateAndAddToRoom(guestObject, room, callback) {
	
		try {
			var now = moment().utc().toDate();
	
			//Check whether the user is present or not.
			_users2.default.findOne({ email: (0, _slashesActions.addSlash)(guestObject.guestEmail) }, function (userError, userDoc) {
				// console.log(userError, userDoc);
				if (userError) {
					callback({ status: false, error: userError.message }, null);
					// res.json({ status: false, error : userError.message });
				} else if (userDoc) {
					if (userDoc.guest && userDoc.guest == true) {
						if (room.corporateId.businessType == 'Conference') {
							_users2.default.findOneAndUpdate({ _id: userDoc._id }, { $set: { firstname: guestObject.guestName, userStatus: 'Active' } }, { returnNewDocument: true }).exec(function (newusererr, newdata) {
								if (newdata) {
									_room2.default.update({
										users: {
											$in: [newdata._id]
										}
									}, {
										$pull: {
											users: newdata._id
										}
									}, function (error, result) {
	
										//For adding user to room
										_room2.default.update({
											_id: mongoose.Types.ObjectId(room._id),
											users: {
												$nin: [newdata._id]
											}
										}, {
											$push: {
												users: newdata._id
											}
										}, function (error, result) {
											if (error) {
												//TODO - user present in any other room
	
												// console.log("update error == ",error);
												callback({ status: false, error: error.message, message: "Internal server error, Please try again." }, null);
												// res.json({ 
												//  	status : false, 
												//  	error: error.message, 
												//  	message : "Internal server error, Please try again." 
												// });
											} else {
												callback(null, { status: true, roomKey: room.roomKey, /*data: newdata,*/message: "User added successfully." });
												// res.json({ 
												//  	status: true, 
												//  	data: newdata, 
												//  	message : "User added successfully."
												// });
											}
										});
									});
								} else {
									callback({ status: false, error: "Internal server error, Please try again later." }, null);
									// res.json({ status : false, error : "Internal server error, Please try again later."});
								}
							});
						} else {
							var today = Number(moment().utc().format('x'));
							_schedule2.default.findOne({ roomId: room._id, dates: { $elemMatch: { startTime: { $lte: today }, endTime: { $gte: today } } } }, { "dates.$.startTime": 1, meetingName: 1, password: 1, createdBy: 1 }).populate('createdBy', 'role').exec(function (schErr, schRes) {
								if (!schErr && schRes && schRes.dates && schRes.dates.length > 0) {
									_users2.default.findOneAndUpdate({ _id: userDoc._id }, { $set: { firstname: guestObject.guestName, userStatus: 'Active' } }, { returnNewDocument: true }).exec(function (newusererr, newdata) {
										if (newdata) {
											var checkobj = {
												role: schRes.createdBy.role,
												createdBy: mongoose.Types.ObjectId(schRes.createdBy._id),
												users: room.users
											};
											getRoomInstructor(checkobj, function (instructorerr, instId) {
												if (instId != null) {
													_students2.default.update({
														students: { $in: [newdata._id] }
													}, {
														$pull: { students: newdata._id }
													}).exec(function (removeerr, removeres) {
														_students2.default.findOne({
															"roomId": mongoose.Types.ObjectId(room._id),
															"instId": instId
														}).exec(function (error, student) {
															if (error) {
																callback({ status: false, error: "Error while fatching room students." }, null);
																// res.json({ 
																//   status: false,
																//   error : "Error while fatching room students." 
																// });
															} else if (student) {
	
																//Verifying whether the student added to instructor or not
																_students2.default.update({
																	"roomId": mongoose.Types.ObjectId(room._id),
																	"instId": instId,
																	students: {
																		$nin: [mongoose.Types.ObjectId(newdata._id)]
																	}
																}, {
																	$push: {
																		students: mongoose.Types.ObjectId(newdata._id)
																	},
																	modifiedBy: instId,
																	modifiedOn: moment().utc().toDate()
																}).exec(function (err1, doc1) {
																	if (err1) {
																		callback({ status: false, error: err1, message: "Student already added to current Instructor." }, null);
																		// res.json({ 
																		//   status : false, 
																		//   error: err1, 
																		//   message : "Student already added to current Instructor." 
																		// });
																	} else {
																		callback(null, {
																			status: true,
																			roomKey: room.roomKey,
																			/*data: newdata,*/
																			message: "Student added successfully."
																		});
																		// res.json({ 
																		//   status: true, 
																		//   data: newdata, 
																		//   message : "Student added successfully."
																		// });
																	}
																});
															} else {
	
																//Create
																var objSave = {};
																objSave['roomId'] = mongoose.Types.ObjectId(room._id);
																objSave['instId'] = instId;
																objSave['students'] = [mongoose.Types.ObjectId(newdata._id)];
																objSave['createdBy'] = instId;
																objSave['modifiedBy'] = instId;
																var studentObj = new _students2.default(objSave);
																studentObj.save(function (err1, doc1) {
																	if (err1) {
																		callback({ status: false, error: err1, message: "Error while adding User." }, null);
																		// res.json({ 
																		//   status : false,
																		//   error : err1 
																		// });
																	} else {
																		callback(null, {
																			status: true,
																			roomKey: room.roomKey,
																			/*data: newdata, */
																			message: "User added successfully."
																		});
																		// res.json({ 
																		//  	status: true, 
																		//   data: newdata, 
																		//   message : "User added successfully."
																		// });
																	}
																});
															}
														});
													});
												} else {
													callback({ status: false, error: instructorerr, message: "Error while getting Instructor." }, null);
													// res.json({ 
													//      status: false,
													//      error : instructorerr
													//    });
												}
											});
										} else {
											callback({ status: false, error: "Internal server error, Please try again later." }, null);
											// res.json({ status : false, error : "Internal server error, Please try again later."});
										}
									});
								} else if (schErr) {
									callback({ status: false, error: "Error while fetching schedule." }, null);
									// res.json({status: false, error : "Error while fetching schedule."});
								} else {
									callback({ status: false, error: "No schedule exist. Please join at the time of schedule." }, null);
									// res.json({status: false, error : "No schedule exist. Please join at the time of schedule."});
								}
							});
						}
					} else {
						callback({ status: false, error: "User already exist, please login directly from home page." }, null);
						// res.json({ status : false, error : "User already exist, please login directly from home page."});
					}
				} else {
					var obj = {
						dateAdded: now,
						modifiedAt: now,
						firstname: guestObject.guestName,
						email: guestObject.guestEmail,
						profile: {
							companyid: room.corporateId._id
						},
						password: (0, _md2.default)('Guest@123DefaultPwd'),
						guest: true,
						createdby: room.createdBy,
						modifiedby: room.createdBy
					};
					if (room.corporateId.businessType == 'Conference') {
						obj['role'] = Roles.User;
						saveGuestUser(obj, function (responseerr, response) {
							if (response != null) {
	
								//For adding user to room
								_room2.default.update({
									_id: mongoose.Types.ObjectId(room._id),
									users: {
										$nin: [response._id]
									}
								}, {
									$push: {
										users: response._id
									}
								}, function (error, result) {
									if (error) {
										//TODO - user present in any other room
	
										console.log("update error == ", error);
										callback({
											status: false,
											error: error.message,
											message: "User already present in current room."
										}, null);
										// res.json({ 
										//  	status : false, 
										//  	error: error.message, 
										//  	message : "User already present in current room." 
										// });
									} else {
										callback(null, {
											status: true,
											roomKey: room.roomKey,
											/*data: response, */
											message: "User added successfully."
										});
										// res.json({ 
										//  	status: true, 
										//  	data: response, 
										//  	message : "User added successfully."
										// });
									}
								});
							} else if (responseerr) {
								console.log("responseerr === ", responseerr);
								callback({ status: false, error: responseerr }, null);
								// res.json({status : false, error : responseerr});
							}
						});
					} else {
						var _today = Number(moment().utc().format('x'));
						_schedule2.default.findOne({ roomId: room._id, dates: { $elemMatch: { startTime: { $lte: _today }, endTime: { $gte: _today } } } }, { "dates.$.startTime": 1, meetingName: 1, password: 1, createdBy: 1 }).populate('createdBy', 'role').exec(function (schErr, schRes) {
							if (!schErr && schRes && schRes.dates && schRes.dates.length > 0) {
								obj['role'] = Roles.Student;
								saveGuestUser(obj, function (responseerr, response) {
									if (response != null) {
										var checkobj = {
											role: schRes.createdBy.role,
											createdBy: mongoose.Types.ObjectId(schRes.createdBy._id),
											users: room.users
										};
										getRoomInstructor(checkobj, function (instructorerr, instId) {
											if (instId != null) {
												_students2.default.findOne({
													"roomId": mongoose.Types.ObjectId(room._id),
													"instId": instId
												}).exec(function (error, student) {
													if (error) {
														callback({
															status: false,
															error: "Error while fatching room students."
														}, null);
														// res.json({ 
														//   status: false,
														//   error : "Error while fatching room students." 
														// });
													} else if (student) {
	
														//Verifying whether the student added to instructor or not
														_students2.default.update({
															"roomId": mongoose.Types.ObjectId(room._id),
															"instId": instId,
															students: {
																$nin: [mongoose.Types.ObjectId(response._id)]
															}
														}, {
															$push: {
																students: mongoose.Types.ObjectId(response._id)
															},
															modifiedBy: instId,
															modifiedOn: moment().utc().toDate()
														}).exec(function (err1, doc1) {
															if (err1) {
																callback({
																	status: false,
																	error: err1.message,
																	message: "Student already added to current Instructor."
																}, null);
																// res.json({ 
																//   status : false, 
																//   error: err1.message, 
																//   message : "Student already added to current Instructor." 
																// });
															} else {
																callback(null, {
																	status: true,
																	roomKey: room.roomKey,
																	/*data: response,*/
																	message: "Student added successfully."
																});
																// res.json({ 
																//   status: true, 
																//   data: response, 
																//   message : "Student added successfully."
																// });
															}
														});
													} else {
	
														//Create
														var objSave = {};
														objSave['roomId'] = mongoose.Types.ObjectId(room._id);
														objSave['instId'] = instId;
														objSave['students'] = [mongoose.Types.ObjectId(response._id)];
														objSave['createdBy'] = instId;
														objSave['modifiedBy'] = instId;
														var studentObj = new _students2.default(objSave);
														studentObj.save(function (err1, doc1) {
															if (err1) {
																callback({
																	status: false,
																	error: err1.message
																}, null);
																// res.json({ 
																//   status : false,
																//   error : err1.message 
																// });
															} else {
																callback(null, {
																	status: true,
																	roomKey: room.roomKey,
																	/*data: response,*/
																	message: "User added successfully."
																});
																// res.json({ 
																//  	status: true, 
																//   data: response, 
																//   message : "User added successfully."
																// });
															}
														});
													}
												});
											} else {
												callback({
													status: false,
													error: instructorerr
												}, null);
												// res.json({ 
												//            status: false,
												//            error : instructorerr
												//          });
											}
										});
									} else if (responseerr) {
										console.log("responseerr === ", responseerr);
										callback({ status: false, error: responseerr }, null);
										// res.json({status : false, error : responseerr});
									}
								});
							} else if (schErr) {
								callback({ status: false, error: "Error while fetching schedule." }, null);
								// res.json({status: false, error : "Error while fetching schedule."});
							} else {
								callback({ status: false, error: "No schedule exist. Please join at the time of schedule." }, null);
								// res.json({status: false, error : "No schedule exist. Please join at the time of schedule."});
							}
						});
					}
				}
			});
		} catch (e) {
			console.log('error in guestUserCreateAndAddToRoom', e);
			callback('Internal server error.', null);
		}
	}
	
	function saveGuestUser(obj, callback) {
		try {
			var objUser = new _users2.default(obj);
			objUser.save(function (err, doc) {
				if (err) {
					console.log("err", err);
					callback(err.message, null);
				} else {
					callback(null, doc);
				}
			});
		} catch (e) {
			console.log('error in saveGuestUser', e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	function getRoomInstructor(obj, callback) {
		try {
			if (obj.role == Roles.Instructor) {
				callback(null, obj.createdBy);
			} else {
				var index = _.findIndex(obj.users, function (o) {
					return o.role == Roles.Instructor || o.role == Roles.Presenter;
				});
				if (index > -1) {
					var instId = obj.users[index]._id;
					callback(null, instId);
				} else {
					callback("No instructor exist in this room", null);
				}
			}
		} catch (e) {
			console.log("error in getRoomInstructor", e);
			callback("Internal server error.", null);
		}
	}
	
	//Delete Guest(student) record on End of call.
	function deleteGuest(req, res) {
		// console.log(req.params);
		try {
			// Varifying request is valid or not
			(0, _authorization.checkValidRequest)(req.headers, function (person) {
				try {
					if (person != null && person.guest == true) {
						if (req.params.roomkey && req.params.roomkey != 'loginPage') {
							_room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(req.params.roomkey) }).select('_id').exec(function (roomerr, room) {
								if (room) {
									if (person.role == Roles.Student) {
										_students2.default.update({
											"roomId": mongoose.Types.ObjectId(room._id),
											students: {
												$in: [person._id]
											}
										}, {
											$pull: {
												students: person._id
											}
										}).exec(function (studerr, studres) {
											// console.log(studerr, studres);
											_users2.default.update({ _id: person._id }, { $set: { userStatus: 'Deleted' } }).exec(function (err, response) {
												if (err) {
													res.json({ status: false, error: err.message });
												} else {
													res.json({ status: true, error: "Deleted successfully" });
												}
											});
										});
									} else if (person.role == Roles.User) {
										_room2.default.update({
											_id: room._id,
											users: {
												$in: [person._id]
											}
										}, {
											$pull: {
												users: person._id
											}
										}, function (error, result) {
											// console.log(error, result);
											_users2.default.update({ _id: person._id }, { $set: { userStatus: 'Deleted' } }).exec(function (err, response) {
												if (err) {
													res.json({ status: false, error: err.message });
												} else {
													res.json({ status: true, error: "Deleted successfully" });
												}
											});
										});
									}
								} else {
									res.json({ status: false, error: "Invalid room." });
								}
							});
						} else {
							_users2.default.update({ _id: person._id }, { $set: { userStatus: 'Deleted' } }).exec(function (err, response) {
								if (err) {
									res.json({ status: false, error: err.message });
								} else {
									res.json({ status: true, error: "Deleted successfully" });
								}
							});
						}
					} else res.json({ status: false, error: "Invalid request." });
				} catch (e) {
					console.log("e in deleteGuest inner === ", e);
					res.json({ status: false, error: "Internal server error." });
				}
			});
		} catch (e) {
			console.log("error in deleteGuest", e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	// export const RoleName = {
	// 	"1" : 'Superadmin',
	// 	"2" : 'Admin',
	// 	"3" : 'Moderator',
	// 	"4" : 'Presenter',
	// 	"5" : 'User',
	// 	"6" : 'Guest',
	// 	"12" : 'Lmsadmin',
	// 	"13" : 'Instructor',
	// 	"14" : 'Student',
	// 	"15" : 'Parent',
	// 	"22" : 'CRMadmin',
	// 	"23" : 'CRMuser'
	// }
	
	/*
	@Function Name : myGroups
	@Purpose : "To search groups as per input from client side from participantgroup collection"
	@Request Object : studentdata:{input,roomId,uid,instId}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function myGroups(req, res) {
	
		// Verifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.query.roomId && mongoose.Types.ObjectId.isValid(req.query.roomId) && req.query.instId && mongoose.Types.ObjectId.isValid(req.query.instId) && req.query.input) {
					var queryData = req.query;
					var slash_input = (0, _slashesActions.addSlash)(queryData.input);
	
					//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
					var bussinessID = null;
					if (person.profile.companyid && person.profile.companyid._id) {
						bussinessID = person.profile.companyid._id;
					}
					var selectorForParticipantsGroup = {
						groupName: { $regex: slash_input, $options: "i" },
						companyid: (0, _slashesActions.addSlash)(bussinessID)
	
						//Searching group based on input passed from client side from participantgroups collection
					};_participantsgroup2.default.find(selectorForParticipantsGroup).select('_id groupName').exec(function (error, groupData) {
						if (error) {
							res.json({
								status: false,
								error: "Error while fetching result."
							});
						} else {
							res.json({
								status: true,
								data: groupData
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in myGroups', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	function activateUser(req, res) {
	
		// Verifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				//console.log("Inside if try");
				if (person != null && req.body.userdata) {
					var userId = req.body.userdata;
					//console.log("Inside if condition");
					//Verifying if user is admin or not
					if (person.role == Roles.Superadmin || person.role == Roles.Admin || person.role == Roles.Lmsadmin || person.role == Roles.Presenteradmin) {
	
						//	console.log("Inside role condition");
						var query = _users2.default.findOne({ _id: mongoose.Types.ObjectId(userId) }).select('role profile userStatus');
						query.exec(function (error, user) {
							if (user) {
								(0, _admin.checkUsersCount)(person._id, person.role, user.role, user.profile.companyid, user.userStatus, function (status, count) {
									if (status == true) {
										/* changes made by prateek for bug#2844
	         Date : 16/09/2017 */
										if (user.role == Roles.Admin || user.role == Roles.Presenteradmin || user.role == Roles.Lmsadmin) {
											var cid = user["profile"]["companyid"];
											var recordId = user._id;
	
											(0, _admin.checkhaveAdmin)(cid, user.role, recordId, function (checkerr, checkres) {
												if (checkerr != null) {
													res.json({ status: false, error: checkerr });
												} else if (checkres != false) {
													var msg = "Multiple admin not allowed, " + checkres + " is already assigned to this corporate";
													res.json({ status: false, error: msg });
												} else if (checkres == false) {
													var userQuery = _users2.default.update({ _id: mongoose.Types.ObjectId(userId) }, { $set: { userStatus: 'Active' } });
													userQuery.exec(function (err, data) {
														if (err) {
															//console.log("query err", err);
															res.json({
																status: false,
																error: err
															});
														} else if (data) {
															//console.log("Success", data);
															_datalog2.default.update({ uid: mongoose.Types.ObjectId(userId), category: 'User', action: 'Log_In_Failed', 'value.logged': false }, { $set: { 'value.logged': true } }, { multi: true }, function (logerr, logres) {});
															res.json({
																status: true,
																message: "Successfully Activated"
															});
														}
													});
												}
											});
										} else {
											var userQuery = _users2.default.update({ _id: mongoose.Types.ObjectId(userId) }, { $set: { userStatus: 'Active' } });
											userQuery.exec(function (err, data) {
												if (err) {
													//console.log("query err", err);
													res.json({
														status: false,
														error: err
													});
												} else if (data) {
													//console.log("Success", data);
													_datalog2.default.update({ uid: mongoose.Types.ObjectId(userId), category: 'User', action: 'Log_In_Failed', 'value.logged': false }, { $set: { 'value.logged': true } }, { multi: true }, function (logerr, logres) {});
													res.json({
														status: true,
														message: "Successfully Activated"
													});
												}
											});
										}
									} else {
										var statusMsg = '';
	
										//code changed by - Najib, Showing relevent error message while  activating users when limit has been exceeded
										if (_.includes(status, "You can't create new user")) {
											statusMsg = "You can't activate new user, limit has been exceeded";
										} else {
											statusMsg = status;
										}
										// console.log("status ==== ", statusMsg);
	
										res.json({ status: false, error: statusMsg });
									}
								});
							} else {
								res.json({
									status: false,
									error: "Invalid user."
								});
							}
						});
					} else {
						res.json({
							status: false,
							error: "Unauthorized User."
						});
					}
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in activateUser', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = require("react-bootstrap");

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = require("react-fontawesome");

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = require("react-redux");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// let moment = require('moment');
	var roomSchema = new _mongoose2.default.Schema({
		selPackage: {
			type: String,
			required: [true, 'Please select Package Name'],
			trim: true,
			ref: 'Package',
			match: [/^[a-zA-Z0-9\-\s]+$/, 'Please Select valid Package name']
		},
		roomName: {
			type: String,
			required: [true, 'Please enter Room Name'],
			trim: true,
			match: [/^[a-zA-Z0-9\-\s]+$/, 'Please enter valid Room Name'],
			maxlength: [30, 'Room Name length should be maximum of 30 characters'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash,
			index: true
		},
		roomType: {
			type: String,
			required: [true, 'Please select Conference Type'],
			enum: ['Mix', 'Forward', 'Hybrid']
		},
		// roomLicense: {
		// 	type: String,
		// 	required: [true, 'Room License is required'],
		// 	trim: true,
		// 	match: [/^[a-zA-Z0-9]+$/, 'Invalid format room license!'],
		// },
		corporateId: {
			type: String,
			trim: true,
			ref: 'corporate'
		},
		categoryId: {
			type: String,
			trim: true,
			ref: 'category'
		},
		roomPassword: {
			type: String,
			required: false,
			trim: true,
			maxlength: [15, 'Room Password length should be maximum of 15 characters'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		expiryDate: {
			type: 'Date',
			validate: {
				validator: function validator(v) {
					if (v > (0, _moment2.default)().utc().toDate()) return true;else return false;
				},
				message: "Room Expiry date can't be less than current Date"
			}
		},
		hostPassword: {
			type: String,
			required: [true, 'Please enter Host Password'],
			trim: true,
			maxlength: [15, 'Host Password length should be maximum of 15 characters'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		// mcuServer: {
		// 	type: String,
		// 	required: false,
		// },
		// bridgeNumber: {
		// 	type: String,
		// 	required: false,
		// },
		users: [{
			type: _mongoose2.default.Schema.Types.ObjectId,
			required: false,
			ref: 'Users'
		}],
		locations: [{
			locationId: {
				type: _mongoose2.default.Schema.Types.ObjectId,
				ref: 'Location'
			},
			locationParticipants: [{
				type: _mongoose2.default.Schema.Types.ObjectId,
				ref: 'Users'
			}]
		}],
		roomConfiguration: {
			feedback: {
				feedbackType: {
					type: String,
					default: "Default",
					set: _slashesActions.addSlash,
					get: _slashesActions.stripSlash
				},
				questionnaireId: {
					type: _mongoose2.default.Schema.Types.ObjectId,
					ref: 'Questionnaire'
				}
			},
			codecType: {
				type: String,
				default: 'vp8',
				set: _slashesActions.addSlash,
				get: _slashesActions.stripSlash
			},
			enableLive: {
				type: Boolean,
				default: true
			}
		},
		roomKey: {
			type: String,
			required: true,
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		roomid: {
			type: String,
			required: false
		},
		createdBy: {
			type: String,
			required: true
		},
		createdOn: {
			type: Date,
			required: true,
			default: (0, _moment2.default)().utc().toDate()
		},
		modifiedBy: {
			type: String,
			required: true
		},
		modifiedOn: {
			type: Date,
			required: true,
			default: (0, _moment2.default)().utc().toDate()
		}
	}, {
		toObject: { getters: true },
		toJSON: { getters: true }
	});
	
	roomSchema.index({ roomKey: 1 }, { unique: true }); // schema level
	
	exports.default = _mongoose2.default.model('Room', roomSchema);

/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var config = {
	  mongoURL: process.env.MONGO_URL || 'mongodb://127.0.0.1:27017/instavc_be',
	
	  port: process.env.PORT || 3023,
	  confLink: 'https://test9.instavc.com/',
	  domin: process.env.DOMAIN || 'test9.instavc.com',
	  language: 'en',
	  location: [['https://localmcu.instavc.com', 'India Development'], ['https://mcu-uk.instavc.com', 'UK Production 1'], ['https://gpumcu.instavc.com', 'India Production'], ['https://mcu-uk1.instavc.com', 'UK Production 2'], ['https://mcu-ge.instavc.com', 'UK-Ge Production']],
	  ga_id: 'UA-101900941-1',
	  socketServer: 'https://globalpeer.instavc.com',
	  iceServers: [{
	    urls: "stun:203.196.151.150:3478"
	  }, {
	    urls: ["turn:turn2.instavc.com:443?transport=tcp", "turn:turn1.instavc.com:443?transport=udp"],
	    credential: "admin123",
	    username: "admin"
	  }],
	  isSignUp: false,
	  isGoogleSignIn: false,
	  isCaptcha: false,
	  failLimit: 5,
	  captcha_sitekey: "6Lc8hC4UAAAAAJFrYqExB4FE4CIy8aloD-aLO1Iq",
	  googleEnable: false,
	  facebookEnable: false,
	  iosProduction: false,
	  fullCalendar: false,
	  broadCast: false,
	  iosShowRoom: true,
	  mail_from_address: 'no-reply@peoplelinkvc.com',
	  mail_head_url: 'http://www.peoplelinkvc.com/',
	  mail_head_logo: 'http://www.instavc.com/images/instavc-white-logo.png',
	  mail_body_logo: 'https://global.instavc.com/images/instavc-email.jpg',
	  mail_body_title: 'Welcome to InstaVC',
	  mail_signature: 'InstaVC',
	  mail_timezone: {
	    zone: 'Asia/Calcutta',
	    code: 'IST'
	  },
	  footer: {
	    year: '2017',
	    name: 'instaVC',
	    company: 'PeopleLink Unified Communications Pvt. Ltd.'
	  },
	  bussinessType: 'Conference', // LMS (or) Conference (or) CRM (or) Presenter
	  smtp: {
	    host: 'smtp.mailgun.org',
	    port: 587,
	    username: 'postmaster@mg.instavc.com',
	    password: 'Ajarsun123'
	  },
	  plagiarism_email: 'pradeepyadav@peoplelinkvc.com',
	  plagiarism_apikey: '1E4DBC73-A734-4232-9026-EDEB5954C293',
	  android_api_key: 'a25ab04b-bb99-4fe0-9452-fd9c0ab203ee'
	};
	exports.default = config;

/***/ },
/* 19 */
/***/ function(module, exports) {

	module.exports = require("express");

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.loggedInData = undefined;
	
	var _LoginActions = __webpack_require__(21);
	
	// Initial State
	var initialState = {
	  status: false, isLoggingIn: false, token: '', data: {}, file: "", socketServer: '', ga_ui: '', iceServers: '', success: ''
	};
	
	var LoginReducer = function LoginReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _LoginActions.LOGIN_USER:
	      return Object.assign({}, state, { status: action.status });
	    case _LoginActions.IS_LOGGING:
	      return Object.assign({}, state, { isLoggingIn: true });
	    case _LoginActions.IS_LOGGED_IN:
	      {
	        return Object.assign({}, state, { status: action.status, token: action.token, data: action.data /*, error : action.error*/, socketServer: action.socketServer, ga_ui: action.ga_ui, iceServers: action.iceServers, isLoggingIn: action.status });
	      }
	    case _LoginActions.LOGOUT_USER:
	      return Object.assign({}, state, { isLoggingIn: false, status: false });
	    case _LoginActions.LOGGED_IN:
	      return Object.assign({}, state, {
	        status: action.status, isLoggingIn: false, token: action.token /*, error : action.error*/
	      });
	    case _LoginActions.HAS_IMAGE:
	      return Object.assign({}, state, {
	        state: action.status, file: action.file
	      });
	    case _LoginActions.SAVE_USER:
	      return action.status ? Object.assign({}, state, { status: action.status, data: action.data, success: action.message }) : Object.assign({}, state, {});
	    case _LoginActions.CLEAR_LOGIN:
	      return Object.assign({}, state, { success: '' });
	    case _LoginActions.CLEAR_IMAGE:
	      return Object.assign({}, state, {
	        state: '', file: ''
	      });
	    case _LoginActions.UPDATE_DATA:
	      return action.data ? Object.assign({}, state, { data: action.data }) : Object.assign({}, state, {});
	    case _LoginActions.SET_HEADER_FLAG:
	      return Object.assign({}, state, { headerFlag: action.headerFlag, showHeaderFlag: action.showHeaderFlag });
	    case _LoginActions.SET_RESPONSE:
	      return Object.assign({}, state, { success: action.message });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var loggedInData = exports.loggedInData = function loggedInData(state) {
	  return state.login;
	};
	
	// Export Reducer
	exports.default = LoginReducer;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SET_RESPONSE = exports.SET_HEADER_FLAG = exports.UPDATE_DATA = exports.CLEAR_IMAGE = exports.CLEAR_LOGIN = exports.SAVE_USER = exports.HAS_IMAGE = exports.LOGGED_IN = exports.IS_LOGGED_IN = exports.IS_LOGGING = exports.LOGOUT_USER = exports.LOGIN_USER = undefined;
	exports.userLoggingIn = userLoggingIn;
	exports.userLoggedGlb = userLoggedGlb;
	exports.userLogged = userLogged;
	exports.ClearLoginData = ClearLoginData;
	exports.isLoginClear = isLoginClear;
	exports.isLoggedIn = isLoggedIn;
	exports.loginUser = loginUser;
	exports.loginUserRequest = loginUserRequest;
	exports.userLoggedIn = userLoggedIn;
	exports.getProfileImage = getProfileImage;
	exports.hasProfileImage = hasProfileImage;
	exports.ClearLogin = ClearLogin;
	exports.setLoginResponse = setLoginResponse;
	exports.ForgotPassword = ForgotPassword;
	exports.resetPassword = resetPassword;
	exports.isRestPasswordTokenExpired = isRestPasswordTokenExpired;
	exports.SaveProfile = SaveProfile;
	exports.SavedStatus = SavedStatus;
	exports.ClearImage = ClearImage;
	exports.setAndroidId = setAndroidId;
	exports.isSignUp = isSignUp;
	exports.connectWithGoogle = connectWithGoogle;
	exports.disConnectSocialMedia = disConnectSocialMedia;
	exports.SaveLoggedInData = SaveLoggedInData;
	exports.AddUsertoContact = AddUsertoContact;
	exports.requestResponse = requestResponse;
	exports.setHeaderFlag = setHeaderFlag;
	exports.activateUser = activateUser;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _IntlActions = __webpack_require__(37);
	
	var _SocketHandler = __webpack_require__(32);
	
	var _SocketHandler2 = _interopRequireDefault(_SocketHandler);
	
	var _Analytics = __webpack_require__(66);
	
	var _Analytics2 = _interopRequireDefault(_Analytics);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LOGIN_USER = exports.LOGIN_USER = 'LOGIN_USER';
	var LOGOUT_USER = exports.LOGOUT_USER = 'LOGOUT_USER';
	var IS_LOGGING = exports.IS_LOGGING = 'IS_LOGGING';
	var IS_LOGGED_IN = exports.IS_LOGGED_IN = 'IS_LOGGED_IN';
	var LOGGED_IN = exports.LOGGED_IN = 'LOGGED_IN';
	var HAS_IMAGE = exports.HAS_IMAGE = 'HAS_IMAGE';
	var SAVE_USER = exports.SAVE_USER = 'SAVE_USER';
	var CLEAR_LOGIN = exports.CLEAR_LOGIN = 'CLEAR_LOGIN';
	var CLEAR_IMAGE = exports.CLEAR_IMAGE = 'CLEAR_IMAGE';
	var UPDATE_DATA = exports.UPDATE_DATA = 'UPDATE_DATA';
	var SET_HEADER_FLAG = exports.SET_HEADER_FLAG = 'SET_HEADER_FLAG';
	var SET_RESPONSE = exports.SET_RESPONSE = 'SET_RESPONSE';
	
	// Export Actions
	
	function userLoggingIn() {
	  return {
	    type: IS_LOGGING
	  };
	}
	
	// {
	//         type: IS_LOGGED_IN,
	//         status: response.status,
	//         token: response.token,
	//         data: response.data,
	//         socketServer: response.socketServer,
	//         iceServers: response.iceServers,
	//         ctype: response.data.profile.companyid.businessType,
	//         error : []
	//     };
	
	function userLoggedGlb(response) {
	  console.log("GLB", response);
	  return function (dispatch) {
	    return dispatch(userLogged(response));
	  };
	}
	
	function userLogged(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  if (response.status) {
	    // loginLanguage(response);
	    return {
	      type: IS_LOGGED_IN,
	      status: response.status,
	      token: response.token,
	      data: response.data,
	      socketServer: response.socketServer,
	      ga_ui: response.ga_ui,
	      iceServers: response.iceServers,
	      error: []
	    };
	  } else if (response.error) {
	    _AuthController2.default.deleteSession();
	    return {
	      type: IS_LOGGED_IN,
	      status: response.status,
	      token: '',
	      data: {},
	      error: [response.error]
	    };
	  } else {
	    _AuthController2.default.deleteSession();
	    return {
	      type: LOGOUT_USER
	    };
	  }
	}
	
	function ClearLoginData() {
	  return function (dispatch) {
	    return dispatch(isLoginClear());
	  };
	}
	
	function isLoginClear() {
	  return {
	    type: LOGOUT_USER
	  };
	}
	
	function isLoggedIn(userSession, pageName) {
	
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('is-loggedin', 'post', {
	      userdata: {
	        session: userSession
	      }
	    }).then(function (res) {
	      // dispatch(loginLanguage(res));
	      return dispatch(userLogged(res, pageName)) /*.then(response => { return dispatch(loginLanguage(res))})*/;
	    });
	  };
	}
	
	function loginUser(userdata) {
	  return {
	    type: LOGIN_USER,
	    status: true
	  };
	}
	
	function loginUserRequest(userdata) {
	  // console.log("Login Request", userdata);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('login', 'post', {
	      userdata: {
	        username: userdata.username,
	        password: userdata.password,
	        deviceType: 'BROWSER',
	        isGoogle: userdata.isGoogle
	      }
	    }).then(function (res) {
	      console.log(res);
	      if (res.status) {
	        var temp = res;
	        _SocketHandler2.default.connectServer(res.data._id, res.socketServer, res.iceServers, function (status) {
	          if (status) {}
	        });
	        var _objAnalytics = new _Analytics2.default();
	        console.log(res.ga_ui, res.data._id);
	        _objAnalytics.Initialize(res.ga_ui, res.data._id);
	        // loginLanguage(temp);
	        return dispatch(userLoggedIn(temp, temp.token, ''));
	      } else if (res.error) {
	        return dispatch(userLoggedIn(res, null, '/'));
	      }
	    });
	  };
	}
	
	function userLoggedIn(response) {
	  var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	  var page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
	
	
	  //console.log("userLoggedIn------", response);
	  if (response.status) {
	    if (token != '') {
	      _AuthController2.default.setSession(token);
	    }
	    if (page != '') {
	      //browserHistory.push(page);
	    }
	    return {
	      type: IS_LOGGED_IN,
	      status: response.status,
	      token: response.token,
	      data: response.data,
	      socketServer: response.socketServer,
	      ga_ui: response.ga_ui,
	      iceServers: response.iceServers,
	      error: []
	    };
	  } else if (response.error) {
	    _AuthController2.default.deleteSession();
	    return {
	      type: LOGGED_IN,
	      status: response.status,
	      token: '',
	      error: [response.error]
	    };
	  } else {
	    _AuthController2.default.deleteSession();
	    return {
	      type: LOGOUT_USER
	    };
	  }
	}
	
	function getProfileImage(uid) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('getProfileImage', 'post', {
	      uid: uid
	    }).then(function (res) {
	      if (res.status) return dispatch(hasProfileImage(res.status, res.data));
	    });
	  };
	}
	
	function hasProfileImage(status, data) {
	  return {
	    type: HAS_IMAGE,
	    status: status,
	    file: data
	  };
	}
	
	function ClearLogin() {
	  return {
	    type: CLEAR_LOGIN
	  };
	}
	
	function setLoginResponse(message) {
	  return {
	    type: SET_RESPONSE,
	    message: message
	  };
	}
	
	function ForgotPassword(username) {
	  //alert('hi')
	  return (0, _apiCaller2.default)('validateforgotpassword', 'post', {
	    username: username
	  });
	}
	
	function resetPassword(userdata) {
	  //alert('hi')
	  return (0, _apiCaller2.default)('resetpassword', 'post', {
	    userdata: userdata
	  });
	}
	function isRestPasswordTokenExpired(data) {
	  return (0, _apiCaller2.default)('isresettokenexpired', 'post', {
	    userdata: {
	      token: data.token
	    }
	  });
	}
	
	function SaveProfile(data) {
	  //console.log(data);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('updateprofile', 'put', {
	      profiledata: {
	        data: data
	      }
	    }).then(function (res) {
	      return dispatch(SavedStatus(res));
	    });
	  };
	}
	
	function SavedStatus(response) {
	  // console.log(status);
	  // console.log("response === ",response);
	  if (response.status) {
	    // browserHistory.push('/admin/profile');
	    return {
	      type: SAVE_USER,
	      status: response.status,
	      error: [],
	      data: response.data,
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVE_USER,
	        status: response.status,
	        error: err,
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVE_USER,
	        status: response.status,
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVE_USER,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	function ClearImage() {
	  return {
	    type: CLEAR_IMAGE
	  };
	}
	
	/*Pradeep + Android push notification*/
	function setAndroidId(deviceId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('androidDeviceId', 'post', {
	      deviceData: { deviceId: deviceId }
	    });
	  };
	}
	/*Pradeep - Android push notification*/
	
	//Configration of SignUp option on login page
	function isSignUp() {
	  // return (dispatch) => {
	  return (0, _apiCaller2.default)('isSignUp', 'get');
	  // }
	}
	
	function connectWithGoogle(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('put-google-id', 'put', {
	      data: data
	    }).then(function (res) {
	      return dispatch(SaveLoggedInData(res));
	    });
	  };
	}
	
	function disConnectSocialMedia(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('disconnect-Social-media', 'put', {
	      data: data
	    }).then(function (res) {
	      return dispatch(SaveLoggedInData(res));
	    });
	  };
	}
	
	function SaveLoggedInData(res) {
	
	  if (res.status) {
	    return {
	      type: UPDATE_DATA,
	      message: res.message,
	      data: res.data
	    };
	  } else {
	    return {
	      type: UPDATE_DATA,
	      error: res.error
	    };
	  }
	}
	
	function AddUsertoContact(obj) {
	  console.log("enter");
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('add-contact', 'post', {
	      data: obj
	    }).then(function (res) {
	      return dispatch(SaveLoggedInData(res));
	    });
	  };
	}
	
	function requestResponse(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('contact-response', 'put', {
	      data: obj
	    }).then(function (res) {
	      return dispatch(SaveLoggedInData(res));
	    });
	  };
	}
	
	//Set header how/hide on Conference page video layout for mobile device
	function setHeaderFlag(headerFlag, showHeaderFlag) {
	  return {
	    type: SET_HEADER_FLAG,
	    headerFlag: headerFlag,
	    showHeaderFlag: showHeaderFlag
	  };
	}
	
	function activateUser(token) {
	  var url = 'activate-user/' + token;
	  return (0, _apiCaller2.default)(url, 'put', {});
	}
	
	// export function logoutUser(obj){
	//   return (dispatch) => {
	//     return callApi('logout-user', 'get')
	//   };
	// }
	
	// export function userLoggedoutRes(res) {
	//   console.log("At logout action response", res);
	//   if(res.status) {
	//     AuthClient.deleteSession();
	//     //browserHistory.push('/')
	//     return {
	//     type: LOGOUT_USER
	//   };
	//   }
	// }

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.createUserMail = createUserMail;
	exports.createCorporateMail = createCorporateMail;
	exports.resetRequestMail = resetRequestMail;
	exports.defaultUserMail = defaultUserMail;
	exports.createuserAndResetpassword = createuserAndResetpassword;
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// var Mailgun = require('mailgun-js')({apiKey: 'key-0cc25d966ca39450c408884c0dfa0b49', domain: 'mg.instavc.com'});
	// var Email = require('../node_modules/email').Email;
	var fs = __webpack_require__(23);
	
	var nodemailer = __webpack_require__(252);
	
	// create reusable transporter object using the default SMTP transport
	var transporter = nodemailer.createTransport({
		host: _config2.default.smtp.host,
		port: _config2.default.smtp.port,
		secure: false, // secure:true for port 465, secure:false for port 587
		auth: {
			user: _config2.default.smtp.username,
			pass: _config2.default.smtp.password
		}
	});
	
	var head_url = _config2.default.mail_head_url;
	var head_logo = _config2.default.mail_head_logo;
	var body_logo = _config2.default.mail_body_logo;
	var mail_body_title = _config2.default.mail_body_title;
	var head = '';
	var mail_body_logo = '';
	if (head_logo && head_logo != '') {
		head = '<div> <a href=' + head_url + ' target="#"> <img src=' + head_logo + '> </a> <p style="font-family: monospace;">Make your conference Simple & Easy </p> </div>';
	}
	
	if (body_logo && body_logo != '') {
		mail_body_logo = '<img src=' + body_logo + ' style="width: 100%;">';
	}
	//var test =  fs.readFileSync(process.env.PWD+'/public/EMAIL_TEMPLATES/emailforPayment.html', "utf8");
	
	/*export function createUserMail(exchangeData, response) {
		fs.readFile(process.env.PWD+'/public/EMAIL_TEMPLATES/createuser.html', "utf8", function(err, file) {
			if (err) throw err;
			file = file.replace('[MAIL_CONTENT]', exchangeData.body);
			file = file.replace('[MAIL_HEADER]', head);
			file = file.replace('[MAIL_BODY_TITLE]', mail_body_title);
			file = file.replace('[MAIL_BODY_LOGO]', mail_body_logo);
	
			var data = {
				from: serverConfig.mail_from_address,
				to: exchangeData.to,
				subject: exchangeData.subject,
				html: file,
			};
			Mailgun.messages().send(data, function (error, body) {
				if (error) {
					console.log(error)
					response({status:false});
				}
				else {
					console.log("attachment sent");
					response({status:true});
				}
			});
		})
	}*/
	
	function createUserMail(exchangeData, response) {
		if (!process.env.PWD) {
			process.env.PWD = process.cwd();
		}
		console.log("1", process.env.PWD);
		fs.readFile(process.env.PWD + '/public/EMAIL_TEMPLATES/createuser.html', "utf8", function (err, file) {
			if (err) throw err;
			file = file.replace('[MAIL_CONTENT]', exchangeData.body);
			file = file.replace('[MAIL_HEADER]', head);
			file = file.replace('[MAIL_BODY_TITLE]', mail_body_title);
			file = file.replace('[MAIL_BODY_LOGO]', mail_body_logo);
			// var myMsg = new Email(
			// { from: serverConfig.mail_from_address, 
			// 	to: exchangeData.to,
			// 	subject: exchangeData.subject,
			// 	body: file,
			// 	bodyType : 'html'
			// });
			// console.log("myMsg === ", myMsg);
			// myMsg.send(function(error){
			// 	if (error) {
			// 		console.log(error)
			// 		response({status:false});
			// 	} else {
			// 		console.log("attachment sent");
			// 		response({status:true});
			// 	}
			// });
			var mailOptions = {
				from: _config2.default.mail_from_address,
				to: exchangeData.to,
				subject: exchangeData.subject,
				// text: 'Hello world ?',
				html: file
			};
			try {
	
				// send mail with defined transport object
				transporter.sendMail(mailOptions, function (error, info) {
					try {
						if (error) {
							console.log(error);
							response({ status: false });
						} else {
							console.log("attachment sent");
							response({ status: true });
						}
						console.log('Message %s sent: %s', info.messageId, info.response);
					} catch (e) {
						console.log("inner invalid smtp settings in createUserMail === ", e);
					}
				});
			} catch (e) {
				console.log("invalid smtp settings in createUserMail === ", e);
			}
		});
	}
	
	function createCorporateMail(exchangeData, response) {
	
		fs.readFile(process.env.PWD + '/public/EMAIL_TEMPLATES/emailforPayment.html', "utf8", function (err, userFile) {
			if (err) throw err;
	
			/*file=file.replace('[RECIVER_NAME]',exchangeData.name);
	  file= file.replace('[SENDER_NAME]',exchangeData.creatorName);*/
			userFile = userFile.replace('[MAIL_CONTENT_FNAME]', exchangeData.firstname);
			userFile = userFile.replace('[MAIL_CONTENT_ORDERID]', exchangeData.order_id);
			userFile = userFile.replace('[MAIL_CONTENT_PASSWORD]', exchangeData.password);
	
			var data = {
				from: _config2.default.mail_from_address,
				to: exchangeData.to,
				subject: exchangeData.subject,
				html: userFile,
				bcc: exchangeData.whoCreated
	
			};
			// Mailgun.messages().send(data, function (error, body) {
			//      	if (error) {
			//      		response({status:false});
			//        }
			//       	else {
			//             console.log("User created and mail sent successfully");
			//             response({status:true});
	
			//        }
			//    });
		});
	}
	
	/*export function resetRequestMail(exchangeData, response) {
		fs.readFile(process.env.PWD+'/public/EMAIL_TEMPLATES/resetRequest.html', "utf8", function(err, file) {
			if (err) throw err;
			file = file.replace('[MAIL_CONTENT]', exchangeData.body);
			var data = {
				from: serverConfig.mail_from_address,
				to: exchangeData.to,
				subject: exchangeData.subject,
				html: file,
			};
			Mailgun.messages().send(data, function (error, body) {
				if (error) {
					console.log(error)
					response({status:false});
				}
				else {
					console.log("attachment sent");
					response({status:true});
				}
			});
		})
	}*/
	
	function resetRequestMail(exchangeData, response) {
		fs.readFile(process.env.PWD + '/public/EMAIL_TEMPLATES/resetRequest.html', "utf8", function (err, file) {
			if (err) throw err;
			file = file.replace('[MAIL_CONTENT]', exchangeData.body);
			file = file.replace('[MAIL_HEADER]', head);
			var mailOptions = {
				from: _config2.default.mail_from_address,
				to: exchangeData.to,
				subject: exchangeData.subject,
				// text: 'Hello world ?',
				html: file
			};
			try {
				// send mail with defined transport object
				transporter.sendMail(mailOptions, function (error, info) {
					try {
						if (error) {
							console.log(error);
							response({ status: false });
						} else {
							console.log("attachment sent");
							response({ status: true });
						}
						console.log('Message %s sent: %s', info.messageId, info.response);
					} catch (e) {
						console.log("inner invalid smtp settings in createUserMail === ", e);
					}
				});
			} catch (e) {
				console.log("invalid smtp settings in resetRequestMail === ", e);
			}
		});
	}
	
	/*export function defaultUserMail(exchangeData, response) {
		fs.readFile(process.env.PWD+'/public/EMAIL_TEMPLATES/defaultMail.html', "utf8", function(err, file) {
			if (err) throw err;
			file = file.replace('[MAIL_CONTENT]', exchangeData.body);
			file = file.replace('[MAIL_DESCREPTION]', exchangeData.descreption);
			file = file.replace('[MAIL_HEADER]', head);
			file = file.replace('[MAIL_BODY_TITLE]', mail_body_title);
			var data = {
				from: serverConfig.mail_from_address,
				to: exchangeData.to,
				subject: exchangeData.subject,
				html: file,
			};
			// Mailgun.messages().send(data, function (error, body) {
			// 	if (error) {
			// 		console.log(error)
			// 		response({status:false});
			// 	}
			// 	else {
			// 		//console.log("attachment sent");
			// 		response({status:true});
			// 	}
			// });
		})
	}*/
	
	function defaultUserMail(exchangeData, response) {
		fs.readFile(process.env.PWD + '/public/EMAIL_TEMPLATES/defaultMail.html', "utf8", function (err, file) {
			if (err) throw err;
			file = file.replace('[MAIL_CONTENT]', exchangeData.body);
			file = file.replace('[MAIL_DESCREPTION]', exchangeData.descreption);
			file = file.replace('[MAIL_HEADER]', head);
			file = file.replace('[MAIL_BODY_TITLE]', mail_body_title);
			var mailOptions = {
				from: _config2.default.mail_from_address,
				to: exchangeData.to,
				subject: exchangeData.subject,
				// text: 'Hello world ?',
				html: file
			};
			try {
				// send mail with defined transport object
				transporter.sendMail(mailOptions, function (error, info) {
					try {
						if (error) {
							console.log(error);
							response({ status: false });
						} else {
							console.log("attachment sent");
							response({ status: true });
						}
						console.log('Message %s sent: %s', info.messageId, info.response);
					} catch (e) {
						console.log("inner invalid smtp settings in createUserMail === ", e);
					}
				});
			} catch (e) {
				console.log("invalid smtp settings in defaultUserMail === ", e);
			}
		});
	}
	
	function createuserAndResetpassword(exchangeData, response) {
		fs.readFile(process.env.PWD + '/public/EMAIL_TEMPLATES/resetUserPassword.html', "utf8", function (err, file) {
			if (err) throw err;
	
			file = file.replace('[MAIL_CONTENT]', exchangeData.body);
			file = file.replace('[MAIL_HEADER]', head);
			file = file.replace('[MAIL_BODY_TITLE]', mail_body_title);
			file = file.replace('[MAIL_BODY_LOGO]', mail_body_logo);
	
			var mailOptions = {
				from: _config2.default.mail_from_address,
				to: exchangeData.to,
				subject: exchangeData.subject,
				html: file
			};
			try {
				// send mail with defined transport object
				transporter.sendMail(mailOptions, function (error, info) {
					try {
						if (error) {
							console.log(error);
							response({ status: false });
						} else {
							console.log("attachment sent");
							response({ status: true });
						}
						console.log('Message %s sent: %s', info.messageId, info.response);
					} catch (e) {
						console.log("inner invalid smtp settings in createUserMail === ", e);
					}
				});
			} catch (e) {
				console.log("invalid smtp settings in resetRequestMail === ", e);
			}
		});
	}

/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.contactRequest = exports.BROADCAST_NOTIFICATION = exports.SET_DASHBOARD = exports.SCHEDULE_DATES = exports.CLEAR_FEEDBACK = exports.SAVE_FEEDBACK_TYPE = exports.UPDATE_ASSIGNMENT_DATA = exports.FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS_FAILED = exports.FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS = exports.FETCHED_FEEDBACK_TYPE_FAILED = exports.FETCHED_FEEDBACK_TYPE = exports.CLEAR_ROOMS = exports.FETCHED_CONFERENCE_TOPIC_FILES_FAILED = exports.FETCHED_CONFERENCE_TOPIC_FILES = exports.CONF_DATA = exports.CONFERENCE_TOPIC_FETCH_FAILED = exports.FETCHED_CONFERENCE_TOPIC = exports.GET_TOKEN = exports.MY_CONTACTS = exports.CURRENT_SCHEDULE = exports.PAST_SCHEDULE = exports.UPCOMING_SCHEDULE = exports.MY_ROOMS = undefined;
	exports.setDashboard = setDashboard;
	exports.RegenerateLink = RegenerateLink;
	exports.ConformRegenarate = ConformRegenarate;
	exports.sendInviteLink = sendInviteLink;
	exports.getRoomData = getRoomData;
	exports.clearDashboardRooms = clearDashboardRooms;
	exports.getMyRooms = getMyRooms;
	exports.searchMyRooms = searchMyRooms;
	exports.setMyRooms = setMyRooms;
	exports.setDashboardRooms = setDashboardRooms;
	exports.setSchedule = setSchedule;
	exports.updateSchedule = updateSchedule;
	exports.updateSlotSchedule = updateSlotSchedule;
	exports.setDashUpcomingSch = setDashUpcomingSch;
	exports.getScheduleDates = getScheduleDates;
	exports.setScheduleDates = setScheduleDates;
	exports.getMyDateSchedules = getMyDateSchedules;
	exports.getMyPastSchedules = getMyPastSchedules;
	exports.setDashPastSch = setDashPastSch;
	exports.deleteMySchedule = deleteMySchedule;
	exports.deleteMyReucrringSchedule = deleteMyReucrringSchedule;
	exports.getAfterSchDelete = getAfterSchDelete;
	exports.getSchedule = getSchedule;
	exports.setSchRes = setSchRes;
	exports.clearSchedule = clearSchedule;
	exports.getMyContacts = getMyContacts;
	exports.setDashboardContacts = setDashboardContacts;
	exports.getMachedUsers = getMachedUsers;
	exports.getMachedContacts = getMachedContacts;
	exports.AddUsertoContact = AddUsertoContact;
	exports.requestResponse = requestResponse;
	exports.requestToken = requestToken;
	exports.setConfData = setConfData;
	exports.getConferenceTopicData = getConferenceTopicData;
	exports.setConferenceTopic = setConferenceTopic;
	exports.getfiles = getfiles;
	exports.setConferenceTopicFiles = setConferenceTopicFiles;
	exports.saveFeedback = saveFeedback;
	exports.saveFeedbackRequest = saveFeedbackRequest;
	exports.ClearFeeadback = ClearFeeadback;
	exports.getFeedbackTypeRequest = getFeedbackTypeRequest;
	exports.getFeedbackTypeRequestStatus = getFeedbackTypeRequestStatus;
	exports.getMyScheduleRooms = getMyScheduleRooms;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var MY_ROOMS = exports.MY_ROOMS = 'MY_ROOMS';
	var UPCOMING_SCHEDULE = exports.UPCOMING_SCHEDULE = 'UPCOMING_SCHEDULE';
	var PAST_SCHEDULE = exports.PAST_SCHEDULE = 'PAST_SCHEDULE';
	var CURRENT_SCHEDULE = exports.CURRENT_SCHEDULE = 'CURRENT_SCHEDULE';
	var MY_CONTACTS = exports.MY_CONTACTS = 'MY_CONTACTS';
	var GET_TOKEN = exports.GET_TOKEN = 'GET_TOKEN';
	var FETCHED_CONFERENCE_TOPIC = exports.FETCHED_CONFERENCE_TOPIC = 'FETCHED_CONFERENCE_TOPIC';
	var CONFERENCE_TOPIC_FETCH_FAILED = exports.CONFERENCE_TOPIC_FETCH_FAILED = 'CONFERENCE_TOPIC_FETCH_FAILED';
	var CONF_DATA = exports.CONF_DATA = 'CONF_DATA';
	var FETCHED_CONFERENCE_TOPIC_FILES = exports.FETCHED_CONFERENCE_TOPIC_FILES = 'FETCHED_CONFERENCE_TOPIC_FILES';
	var FETCHED_CONFERENCE_TOPIC_FILES_FAILED = exports.FETCHED_CONFERENCE_TOPIC_FILES_FAILED = 'FETCHED_CONFERENCE_TOPIC_FILES_FAILED';
	var CLEAR_ROOMS = exports.CLEAR_ROOMS = 'CLEAR_ROOMS';
	var FETCHED_FEEDBACK_TYPE = exports.FETCHED_FEEDBACK_TYPE = 'FETCHED_FEEDBACK_TYPE';
	var FETCHED_FEEDBACK_TYPE_FAILED = exports.FETCHED_FEEDBACK_TYPE_FAILED = 'FETCHED_FEEDBACK_TYPE_FAILED';
	var FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS = exports.FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS = 'FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS';
	var FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS_FAILED = exports.FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS_FAILED = 'FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS_FAILED';
	var UPDATE_ASSIGNMENT_DATA = exports.UPDATE_ASSIGNMENT_DATA = 'UPDATE_ASSIGNMENT_DATA';
	var SAVE_FEEDBACK_TYPE = exports.SAVE_FEEDBACK_TYPE = 'SAVE_FEEDBACK_TYPE';
	var CLEAR_FEEDBACK = exports.CLEAR_FEEDBACK = 'CLEAR_FEEDBACK';
	var SCHEDULE_DATES = exports.SCHEDULE_DATES = 'SCHEDULE_DATES';
	var SET_DASHBOARD = exports.SET_DASHBOARD = 'SET_DASHBOARD';
	var BROADCAST_NOTIFICATION = exports.BROADCAST_NOTIFICATION = 'BROADCAST_NOTIFICATION';
	
	function setDashboard(obj) {
	  return {
	    type: SET_DASHBOARD,
	    data: obj
	  };
	}
	
	function RegenerateLink(obj) {
	  return (0, _apiCaller2.default)('regenerate-link', 'post', {
	    data: obj
	  });
	}
	
	function ConformRegenarate(obj) {
	  return (0, _apiCaller2.default)('conform-regenarate', 'post', {
	    data: obj
	  });
	}
	
	/*export function shareLink(obj){
		return callApi('sharelink', 'post', {
			data : obj,
		});
	}*/
	
	function sendInviteLink(obj) {
	  return (0, _apiCaller2.default)('share-link', 'post', {
	    data: obj
	  });
	}
	
	function getRoomData(obj) {
	  return (0, _apiCaller2.default)('fetch-room/' + obj.id, 'get');
	}
	
	function clearDashboardRooms() {
	  return {
	    type: CLEAR_ROOMS
	  };
	}
	
	function getMyRooms() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-my-rooms', 'get').then(function (res) {
	      return dispatch(setDashboardRooms(res));
	    });
	  };
	}
	
	function searchMyRooms(searchKey) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-my-rooms/' + searchKey, 'get').then(function (res) {
	      return dispatch(setDashboardRooms(res));
	    });
	  };
	}
	
	function setMyRooms(response) {
	  return function (dispatch) {
	    return dispatch(setDashboardRooms(response));
	  };
	}
	
	function setDashboardRooms(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: MY_ROOMS,
	      status: response.status,
	      myrooms: response.data
	      // topics : response.topics ? response.topics : null
	    };
	  } else {
	    return {
	      type: MY_ROOMS,
	      status: response.status,
	      myrooms: []
	    };
	  }
	}
	
	function setSchedule(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('schedules', 'post', {
	      data: obj
	    }).then(function (res) {
	      return dispatch(setDashUpcomingSch(res));
	    });
	  };
	}
	
	function updateSchedule(obj, id) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('schedules/' + id, 'put', {
	      data: obj
	    }).then(function (res) {
	      return dispatch(setDashUpcomingSch(res));
	    });
	  };
	}
	
	function updateSlotSchedule(obj, id) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('schedule-slot/' + id, 'put', {
	      data: obj
	    }).then(function (res) {
	      return dispatch(setDashUpcomingSch(res));
	    });
	  };
	}
	
	function setDashUpcomingSch(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: UPCOMING_SCHEDULE,
	      status: response.status,
	      schedules: response.data,
	      message: response.message
	    };
	  } else {
	    if (response.error == 801) {
	      response.error = response.object.meetingName + " is already reserved " + response.object.roomName + " from " + (0, _moment2.default)(response.object.startTime).format("DD/MM/YYYY hh:mm A") + " to " + (0, _moment2.default)(response.object.endTime).format("DD/MM/YYYY hh:mm A") + ".";
	    }
	    return {
	      type: UPCOMING_SCHEDULE,
	      status: response.status,
	      // schedules: schedules,
	      error: response.error
	    };
	  }
	}
	
	function getScheduleDates() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('schedule-dates', 'get').then(function (res) {
	      return dispatch(setScheduleDates(res));
	    });
	  };
	}
	
	function setScheduleDates(response) {
	  var dateRanges = [];
	  if (response.dates != null) {
	    var now = Number((0, _moment2.default)().startOf('day').format('x'));
	    var filterdates = [];
	    var scheduleDates = response.dates.sort();
	    _.each(scheduleDates, function (schDate) {
	      var date = Number((0, _moment2.default)(schDate, 'x').startOf('day').format('x'));
	      /*if (filterdates.indexOf(date) <= -1) {
	        filterdates.push(date);*/
	      if (now <= date) {
	        dateRanges.push({ state: 'enquire', range: _moment2.default.range((0, _moment2.default)(schDate, 'x'), (0, _moment2.default)(schDate, 'x').endOf('day')) });
	      } else {
	        dateRanges.push({ state: 'past', range: _moment2.default.range((0, _moment2.default)(schDate, 'x'), (0, _moment2.default)(schDate, 'x').endOf('day')) });
	      }
	      // }
	    });
	  }
	
	  return {
	    type: SCHEDULE_DATES,
	    status: response.status,
	    dates: dateRanges
	  };
	}
	
	function getMyDateSchedules(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('date-schedules/' + obj.startDate + '/' + obj.endDate, 'get').then(function (res) {
	      return dispatch(setDashUpcomingSch(res));
	    });
	  };
	}
	
	function getMyPastSchedules(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('date-schedules/' + obj.currentDate, 'get').then(function (res) {
	      return dispatch(setDashPastSch(res));
	    });
	  };
	}
	
	function setDashPastSch(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: PAST_SCHEDULE,
	      status: response.status,
	      schedules: response.data,
	      message: response.message
	    };
	  } else {
	    return {
	      type: PAST_SCHEDULE,
	      status: response.status,
	      schedules: [],
	      error: response.error
	    };
	  }
	}
	
	function deleteMySchedule(recordId, scheduleId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-slot/' + recordId + '/' + scheduleId, 'delete').then(function (res) {
	      return dispatch(getAfterSchDelete(res));
	    });
	  };
	}
	
	function deleteMyReucrringSchedule(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-schedule/' + obj.recordId + '/' + obj.currentDate, 'delete').then(function (res) {
	      return dispatch(getAfterSchDelete(res));
	    });
	  };
	}
	
	function getAfterSchDelete(response) {
	  if (response.status) {
	    return {
	      type: UPCOMING_SCHEDULE,
	      status: response.status,
	      message: response.message,
	      error: response.error
	    };
	  } else {
	    return {
	      type: UPCOMING_SCHEDULE,
	      status: response.status,
	      error: response.error
	    };
	  }
	}
	
	function getSchedule(recordId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('schedules/' + recordId, 'get').then(function (res) {
	      return dispatch(setSchRes(res));
	    });
	  };
	}
	
	function setSchRes(response) {
	  // console.log("response in setSchRes === ", response);
	  if (response.status) {
	    return {
	      type: CURRENT_SCHEDULE,
	      status: response.status,
	      data: response.data
	    };
	  } else if (response.error) {
	    return {
	      type: CURRENT_SCHEDULE,
	      status: response.status,
	      data: {},
	      error: response.error
	    };
	  }
	}
	
	function clearSchedule() {
	  return function (dispatch) {
	    var response = {
	      status: true,
	      data: {}
	    };
	    dispatch(setSchRes(response));
	  };
	}
	
	function getMyContacts() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('contacts', 'get').then(function (res) {
	      return dispatch(setDashboardContacts(res));
	    });
	  };
	}
	
	function setDashboardContacts(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  // console.log("response ======== ",response);
	  if (response.status) {
	    // if(page != ''){
	    //   browserHistory.push(page);
	    // }
	    return {
	      type: MY_CONTACTS,
	      status: response.status,
	      mycontacts: response.data,
	      message: response.message
	    };
	  } else {
	    return {
	      type: MY_CONTACTS,
	      status: response.status,
	      mycontacts: [],
	      error: response.error
	    };
	  }
	}
	
	function getMachedUsers(obj) {
	  return (0, _apiCaller2.default)('get-matched-user/' + obj.input, 'get');
	}
	
	function getMachedContacts(obj) {
	  return (0, _apiCaller2.default)('getmachedcontacts', 'post', {
	    searchData: obj
	  });
	}
	
	function AddUsertoContact(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('add-contact', 'post', {
	      data: obj
	    }).then(function (res) {
	      return dispatch(setDashboardContacts(res));
	    });
	  };
	}
	
	function requestResponse(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('contact-response', 'put', {
	      data: obj
	    }).then(function (res) {
	      return dispatch(setDashboardContacts(res));
	    });
	  };
	}
	
	function requestToken(requestToken, uid) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('requesttoken', 'post', {
	      data: { key: requestToken, username: uid }
	    }).then(function (res) {
	      return dispatch(setConfData(res));
	    });
	  };
	}
	
	function setConfData(res) {
	  console.log("res ===== ", res);
	  if (res.status) {
	    return {
	      type: CONF_DATA,
	      data: res.data,
	      roomSuccess: true
	    };
	  } else {
	    return {
	      type: CONF_DATA,
	      data: res.data,
	      roomSuccess: false
	    };
	  }
	}
	
	var contactRequest = exports.contactRequest = {
	  Requested: 0,
	  Accept: 1,
	  Request: 2,
	  Reject: 3
	};
	
	function getConferenceTopicData(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-conference-topic/' + data.roomKey, 'get').then(function (res) {
	      return dispatch(setConferenceTopic(res));
	    });
	  };
	}
	
	function setConferenceTopic(response) {
	
	  if (response.status) {
	    return {
	      type: FETCHED_CONFERENCE_TOPIC,
	      status: response.status,
	      data: response.data,
	      roomName: response.roomName,
	      roomId: response.roomId,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: CONFERENCE_TOPIC_FETCH_FAILED,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: CONFERENCE_TOPIC_FETCH_FAILED,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getfiles(data) {
	  // console.log("getfiles Action:", data);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-conference-topic-files/' + data.topicId, 'get').then(function (res) {
	      return dispatch(setConferenceTopicFiles(res));
	    });
	  };
	}
	
	function setConferenceTopicFiles(response) {
	  // console.log("response in acions:", response);
	  if (response.status) {
	    return {
	      type: FETCHED_CONFERENCE_TOPIC_FILES,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: FETCHED_CONFERENCE_TOPIC_FILES_FAILED,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: FETCHED_CONFERENCE_TOPIC_FILES_FAILED,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function saveFeedback(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-feedback', 'post', {
	      feedbackData: data
	    }).then(function (res) {
	      return dispatch(saveFeedbackRequest(res));
	    });
	  };
	}
	
	function saveFeedbackRequest(response) {
	  console.log("response in acions:", response);
	  if (response.status) {
	    return {
	      type: SAVE_FEEDBACK_TYPE,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  }
	}
	
	function ClearFeeadback() {
	  return {
	    type: CLEAR_FEEDBACK
	  };
	}
	function getFeedbackTypeRequest(data) {
	  return function (dispatch) {
	    var query = "rid=" + data;
	    return (0, _apiCaller2.default)('fetchFeedbackType?' + query, 'get').then(function (res) {
	      return dispatch(getFeedbackTypeRequestStatus(res));
	    });
	  };
	}
	
	function getFeedbackTypeRequestStatus(response) {
	  // console.log("response in acions:", response);
	  if (response.status) {
	    return {
	      type: FETCHED_FEEDBACK_TYPE,
	      status: response.status,
	      data: response.data,
	      questionnaireData: response.questionnaireData,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: FETCHED_FEEDBACK_TYPE_FAILED,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: FETCHED_FEEDBACK_TYPE_FAILED,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getMyScheduleRooms() {
	  return (0, _apiCaller2.default)('schedule-fetch-room', 'get');
	}

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var moment = __webpack_require__(1);
	
	
	var packageSchema = new _mongoose2.default.Schema({
		packageName: {
			type: String,
			required: [true, 'Please enter Package Name'],
			trim: true,
			match: [/^[a-zA-Z0-9\-\s]+$/, 'Please enter valid Package Name'],
			maxlength: [50, 'Package Name length should be maximum of 50 characters'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		packagePrice: {
			type: Number,
	
			/* commented because of no functionality, need to implement */
			// required: [true, 'Please enter Package Price'],
			match: [/^[0-9\-\s]+$/, 'Please enter valid Package Price']
		},
		packageValidity: {
			type: 'Date',
			required: [true, 'Please select Package Validity'],
			validate: {
				validator: function validator(v) {
					if (v > moment().utc().toDate()) return true;else return false;
				},
				message: "Package validity {VALUE} can't be past date!"
			}
		},
		userCount: {
			type: Number,
			required: [true, 'Please enter User Count'],
			match: [/^[0-9\-\s]+$/, 'Please enter valid User Count'],
			min: [-1, 'User count should be minimum of -1'],
			max: [100000, 'User count should be maximum of 100000']
		},
		roomCount: {
			type: Number,
			required: [true, 'Please enter No. of Rooms'],
			match: [/^[0-9\-\s]+$/, 'Please enter valid No. of Rooms'],
			min: [-1, 'No. of Rooms should be minimum of -1'],
			max: [100000, 'No. of Rooms should be maximum of 100000']
		},
		topicCount: {
			type: Number,
	
			/* commented because of no functionality, need to implement */
			// required:[true,'Please enter No. of Topics'],
			match: [/^[0-9\-\s]+$/, 'Please enter valid No. of Topics'],
			min: [-1, 'No. of Topics should be minimum of -1'],
			max: [100000, 'No. of Topics should be maximum of 100000']
		},
		continuousPresence: {
			type: Number,
			required: [true, 'Please enter Continuous Presence'],
			match: [/^[0-9\-\s]+$/, 'Please enter valid Continuous Presence'],
			min: [-1, 'Continuous Presence should be minimum of -1'],
			max: [100000, 'Continuous Presence should be maximum of 100000']
		},
		serverLocation: {
			type: String,
			required: [true, 'Please select Server Location'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		assignedTo: {
			type: _mongoose2.default.Schema.Types.ObjectId,
			required: [true, 'Please select Assigned To'],
			ref: 'Users'
		},
		features: {
			type: [String],
			required: [true, 'Please select at least one Features'],
			enum: ['User Presence', 'Whiteboard', 'Screen Share', 'Q&A', 'Video Conference', 'Topics']
			/*set : addSlash,
	    get : stripSlash*/
		},
		createdBy: {
			type: _mongoose2.default.Schema.Types.ObjectId,
			required: true,
			ref: 'Users'
		},
		createdAt: {
			type: Date,
			required: true,
			default: moment().utc().toDate()
		},
		modifiedBy: {
			type: String,
			required: true
		},
		modifiedAt: {
			type: Date,
			required: true,
			default: moment().utc().toDate()
		},
		payment_details: {
			order_id: {
				type: String
			},
			bank_ref_no: {
				type: [String]
			},
			order_status: {
				type: String
	
			},
			failure_message: {
				type: String
			},
			card_name: {
				type: String
			},
			status_code: {
				type: String
			},
			status_message: {
				type: String
			},
			currency: {
				type: String
			},
			card_type: {
				type: String
			},
			data_accept: {
				type: [String]
			},
			card_number: {
				type: String
			},
			expiry_month: {
				type: String
			},
			expiry_year: {
				type: String
			},
			cvv_number: {
				type: String
			},
			issuing_bank: {
				type: String
			},
			mm_id: {
				type: String
			},
			promo_code: {
				type: String
			},
			tracking_id: {
				type: String
			},
			amount: {
				type: String
			},
			payment_mode: {
				type: String
			}
	
		}
	}, {
		toObject: { getters: true },
		toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('Package', packageSchema);

/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = require("cuid");

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = require("limax");

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = require("sanitize-html");

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ConferenceActions = __webpack_require__(38);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _WorkDashboardReloadActions = __webpack_require__(91);
	
	var _roles = __webpack_require__(46);
	
	var _SoundMeter = __webpack_require__(190);
	
	var _SoundMeter2 = _interopRequireDefault(_SoundMeter);
	
	var _reactRouter = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var browser = __webpack_require__(239);
	var _ = __webpack_require__(7);
	
	var conference = null;
	var localStream = null;
	var localRemote = null;
	var additionalStream = [];
	var confConnected = false;
	var isJoining = false;
	var addstreamCallback = null;
	
	var SetSpeakerListenerCallback = null;
	var HandraiseListenerCallback = null;
	var WhiteBoardListenerCallBack = null;
	var RoomChatListenerCallBack = null;
	var HandraiseAnsListenerCallback = {};
	var HandraiseReplyListenerCallback = {};
	var SyncListenerCallback = null;
	var setSelfVideoCallback = null;
	var setRemoveVideoCallback = null;
	var RoomNotificationCallback = null;
	var HandraiseNotificationCallback = null;
	var HandraiseAnsNotificationCallback = null;
	var setSelfSpeakerCallback = null;
	var EditHandraiseCallback = {};
	var TopicListenerCallback = null;
	var AssignmentListenerCallback = null;
	var PollListenerCallback = null;
	var SyncScrollListenerCallback = null;
	var SyncSSPdfListenerCallback = null;
	var SyncPdfPageListenerCallback = null;
	var SyncPdfCloseListenerCallback = null;
	var ScreenShareNotificationCallBack = null;
	var SyncDashConfStatusListenerCallback = null;
	var _uid = null;
	var _selfID = '';
	var TopicContentSelectListenerCallback = null;
	var AssignmentContentSelectListenerCallback = null;
	var PollContentSelectListenerCallback = null;
	var SyncConfStatusListenerCallback = null;
	var handleRoomChatListenerCallback = null;
	var screenShareKey = 'jckdbnkecmmpemaghimijhehobdeplmd';
	var attendees = [];
	var allStreams = [];
	var allStreamStats = [];
	var subScribedStreams = [];
	var screenStream = null;
	
	var resolution = 'vga';
	var _codec = 'vp9';
	var _cameraSource = undefined;
	var _audioSource = undefined;
	
	var _role = '';
	var _users = [];
	var _host;
	var _presenter = '';
	var _presenterID = '';
	var _speaker = '';
	var _mixStream = null;
	var _activeRoom = '';
	var _frameRate = 15;
	var _maxVideoBW = 400;
	var _maxAudioBW = 28;
	var _videoQuality = "Standard";
	var roomkeyend = '';
	var roomKey = '';
	var hostId = '';
	var scheduleId = '';
	var restartFlag = false;
	var RecorderId = '';
	
	var _enableVad = false;
	var soundIntervalID = '';
	var audioContext = null;
	var subscribedScreen = null;
	var isFeedBackDsipacth = true;
	
	var WoogeenManager = function () {
	  function WoogeenManager() {
	    _classCallCheck(this, WoogeenManager);
	
	    this.WhatIsMyBrowser = function () {
	      return browser.name;
	    };
	
	    this.WhatIsMyBrowserVersion = function () {
	      return browser.version;
	    };
	
	    this.SetSpeakerListener = function (callback) {
	      SetSpeakerListenerCallback = callback;
	    };
	
	    this.selfSpeaker = function (callback) {
	      setSelfSpeakerCallback = callback;
	    };
	
	    this.setSelfVideo = function (callback) {
	      setSelfVideoCallback = callback;
	    };
	
	    this.setRemoveVideo = function (callback) {
	      setRemoveVideoCallback = callback;
	    };
	
	    this.HandraiseListener = function (callback) {
	      HandraiseListenerCallback = callback;
	    };
	
	    this.HandraiseAnsListener = function (callback, id) {
	      HandraiseAnsListenerCallback[id] = callback;
	    };
	
	    this.HandraiseReplyListener = function (callback, id) {
	      HandraiseReplyListenerCallback[id] = callback;
	    };
	
	    this.TopicListener = function (callback) {
	      TopicListenerCallback = callback;
	    };
	
	    this.TopicContentSelectListener = function (callback) {
	      TopicContentSelectListenerCallback = callback;
	    };
	
	    this.AssignmentListener = function (callback) {
	      AssignmentListenerCallback = callback;
	    };
	
	    this.AssignmentContentSelectListener = function (callback) {
	      AssignmentContentSelectListenerCallback = callback;
	    };
	
	    this.PollListener = function (callback) {
	      PollListenerCallback = callback;
	    };
	
	    this.PollContentSelectListener = function (callback) {
	      PollContentSelectListenerCallback = callback;
	    };
	
	    this.SyncScrollListener = function (callback) {
	      SyncScrollListenerCallback = callback;
	    };
	
	    this.SyncSSPdfListener = function (callback) {
	      SyncSSPdfListenerCallback = callback;
	    };
	
	    this.SyncPdfPageListener = function (callback) {
	      SyncPdfPageListenerCallback = callback;
	    };
	
	    this.SyncPdfCloseListener = function (callback) {
	      SyncPdfCloseListenerCallback = callback;
	    };
	
	    this.handleConfStatusListener = function (callback) {
	      SyncConfStatusListenerCallback = callback;
	    };
	
	    this.handleDashConfStatusListener = function (callback) {
	      SyncDashConfStatusListenerCallback = callback;
	    };
	
	    this.handleRoomChatListener = function (callback) {
	      handleRoomChatListenerCallback = callback;
	    };
	
	    this.ScreenShareNotificationListener = function (callback) {
	      ScreenShareNotificationCallBack = callback;
	    };
	
	    this.clearWorkDashboardListener = function () {
	      SyncScrollListenerCallback = null;
	    };
	
	    this.clearTopicListeners = function () {
	      TopicListenerCallback = null;
	    };
	
	    this.clearAssignmentListeners = function () {
	      AssignmentListenerCallback = null;
	    };
	
	    this.clearPollListeners = function () {
	      PollListenerCallback = null;
	    };
	
	    this.ClearHandraiseReplyListener = function (id) {
	      delete HandraiseReplyListenerCallback[id];
	    };
	
	    this.ClearHandraiseAnsListener = function (id) {
	      delete HandraiseAnsListenerCallback[id];
	    };
	
	    this.ClearEditHandraiseListener = function (id) {
	      delete EditHandraiseCallback[id];
	    };
	
	    this.HandraiseNotificationListener = function (callback) {
	      HandraiseNotificationCallback = callback;
	    };
	
	    this.HandraiseAnsNotificationListener = function (callback) {
	      HandraiseAnsNotificationCallback = callback;
	    };
	
	    this.EditHandraiseListener = function (callback, id) {
	      EditHandraiseCallback[id] = callback;
	    };
	
	    this.ClearHandraiseListener = function () {
	      HandraiseAnsListenerCallback = {};
	      HandraiseListenerCallback = null;
	      HandraiseReplyListenerCallback = {};
	      EditHandraiseCallback = {};
	    };
	
	    this.WhiteBoardListener = function (callback) {
	      WhiteBoardListenerCallBack = callback;
	    };
	
	    this.RoomChatListener = function (callback) {
	      console.log("called RoomChatListener");
	      RoomChatListenerCallBack = callback;
	    };
	
	    this.RoomNotificationListener = function (callback) {
	      RoomNotificationCallback = callback;
	    };
	
	    this.SyncListener = function (callback) {
	      SyncListenerCallback = callback;
	    };
	
	    this.MuteOrUnMute = function (stream) {
	      if (_host) {
	        var defIndex = _.findIndex(allStreams, ['sid', stream.sid]);
	        var additionalIndex = _.findIndex(additionalStream, ['sid', stream.sid]);
	
	        if (additionalIndex < 0 && stream.sid != localStream.sid) this.sendMute(allStreams[defIndex].from);
	
	        return this._MuteOrUnMute(stream);
	        //Needs to remove the code later
	        // return;
	      } else {
	        return this._MuteOrUnMute(stream);
	      }
	    };
	
	    this._MuteOrUnMute = function (stream, isNotify) {
	      var defIndex = _.findIndex(allStreams, ['sid', stream.sid]);
	      if (defIndex >= 0) {
	
	        // host muted then self cannot unmute
	        if (localStream.hostedByMute && !_host && store.getState().conference.remoteMute) return true;
	
	        if (allStreams[defIndex].mute && isNotify) {
	          store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	          return allStreams[defIndex].mute;
	        }
	
	        if (allStreams[defIndex].mute == undefined) {
	          allStreams[defIndex].mute = true;
	          allStreams[defIndex].hostedByMute = true;
	          allStreams[defIndex].disableAudio();
	        } else if (allStreams[defIndex].mute) {
	          allStreams[defIndex].mute = false;
	          allStreams[defIndex].hostedByMute = false;
	          allStreams[defIndex].enableAudio();
	        } else {
	          allStreams[defIndex].mute = true;
	          allStreams[defIndex].hostedByMute = true;
	          allStreams[defIndex].disableAudio();
	        }
	        if (allStreams[defIndex].mute) {
	          // conference.mute(stream, "audio");
	          conference.pauseAudio(stream, function (result) {
	            console.log('pauseAudio', result);
	          }, function (err) {
	            console.log('pauseAudio', err);
	          });
	        } else {
	          // conference.unmute(stream, "audio");
	          conference.playAudio(stream, function (result) {
	            console.log('playAudio', result);
	          }, function (err) {
	            console.log('playAudio', err);
	          });
	        }
	        if (stream.sid == localStream.sid) {
	          console.log("Local Mute Fired", localStream);
	          localStream.mute = allStreams[defIndex].mute;
	        }
	        store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	        return allStreams[defIndex].mute;
	      }
	      return false;
	      //conference.mute(stream, "audio");
	    };
	
	    this.volumeOnorOff = function (stream) {
	      var defIndex = _.findIndex(allStreams, ['sid', stream.sid]);
	      if (defIndex >= 0) {
	        if (allStreams[defIndex].volume == undefined) {
	          allStreams[defIndex].volume = true;
	          allStreams[defIndex].disableAudio();
	        } else if (allStreams[defIndex].volume) {
	          allStreams[defIndex].volume = false;
	          allStreams[defIndex].enableAudio();
	        } else {
	          allStreams[defIndex].volume = true;
	          allStreams[defIndex].disableAudio();
	        }
	        store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	        return allStreams[defIndex].volume;
	      }
	      return false;
	    };
	
	    this.setSpeaker = function (stream) {
	      //Find Index
	      var defIndex = _.findIndex(allStreams, ['from', stream.from]);
	      if (defIndex > 1) {
	
	        allStreams.splice(1, 0, allStreams[defIndex]);
	        allStreams.splice(defIndex + 1, 1);
	
	        store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	      }
	    };
	
	    this.sendMessage = function (message, toWhome) {
	      if (conference) {
	        var msg = JSON.stringify(message);
	        if (toWhome == 0) {
	          conference.send(msg, function () {
	            console.log("Request Sent");
	          }, function (err) {
	            console.log("Request Fail", err);
	          });
	        } else {
	          conference.send(msg, toWhome, function () {
	            console.log("Request Sent");
	          }, function (err) {
	            console.log("Request Fail", err);
	          });
	        }
	      }
	    };
	
	    this.handleSoundMeter = function (stream) {
	      var AudioContext = window.AudioContext || window.webkitAudioContext;
	      if (audioContext == null) {
	        audioContext = new AudioContext();
	      }
	
	      var soundMeter = new _SoundMeter2.default(audioContext);
	
	      var that = this;
	      soundMeter.connectToSource(stream, function (e) {
	        if (e) {
	          alert(e);
	          return;
	        }
	
	        soundIntervalID = setInterval(function () {
	          // console.log("Sound Low Test", _presenterID, localStream.from);
	          try {
	            if (_presenterID != localStream.from) {
	              if (_presenterID != '') {
	                var _slowValue = soundMeter.slow.toFixed(2);
	                var obj = {
	                  command: 'SOUND_METER',
	                  content: { sid: localStream.sid, slowValue: _slowValue },
	                  type: 'OBJECT'
	                };
	                // console.log("Slow Before Value", _slowValue, localStream.sid);
	                if (_slowValue > 0.05) {
	                  console.log("Slow Meter Value", _slowValue);
	                  that.sendMessage(obj, _presenterID);
	                }
	              }
	            }
	          } catch (error) {
	            console.log("Interval Error");
	          }
	
	          // instantMeter.value = instantValueDisplay.innerText =
	          //     soundMeter.instant.toFixed(2);
	          // slowMeter.value = slowValueDisplay.innerText =
	          //     soundMeter.slow.toFixed(2);
	          // clipMeter.value = clipValueDisplay.innerText =
	          //     soundMeter.clip;
	        }, 1000);
	      });
	
	      console.log("Sound Meter ", stream, soundMeter);
	    };
	
	    this.closeConference = function () {
	      console.log("inside closeConference");
	      conference.clearEventListener('user-joined');
	      conference.clearEventListener('user-left');
	      conference.clearEventListener('message-received');
	      conference.clearEventListener('stream-added');
	      conference.clearEventListener('stream-removed');
	      conference.clearEventListener('stream-failed');
	      conference.clearEventListener('recorder-removed');
	      conference.clearEventListener('server-disconnected');
	
	      conference = null;
	      console.log("Server Disconnectiond");
	
	      attendees = [];
	      allStreams = [];
	      subScribedStreams = [];
	      if (screenStream) {
	        screenStream.close();
	      }
	      screenStream = null;
	
	      addstreamCallback = null;
	      SetSpeakerListenerCallback = null;
	      HandraiseListenerCallback = null;
	      WhiteBoardListenerCallBack = null;
	      RoomChatListenerCallBack = null;
	      HandraiseAnsListenerCallback = {};
	      HandraiseReplyListenerCallback = {};
	      SyncListenerCallback = null;
	      setSelfVideoCallback = null;
	      RoomNotificationCallback = null;
	      HandraiseNotificationCallback = null;
	      HandraiseAnsNotificationCallback = null;
	      setSelfSpeakerCallback = null;
	      subscribedScreen = null;
	      _role = '';
	      _host = false;
	
	      EditHandraiseCallback = {};
	
	      isJoining = false;
	      confConnected = false;
	
	      if (localStream) {
	        localStream.close();
	      }
	
	      if (additionalStream.length > 0) {
	        for (var i = 0; i < additionalStream.length; i++) {
	          additionalStream[i].close();
	        }
	      }
	
	      additionalStream = [];
	      localStream = null;
	
	      store.dispatch((0, _ConferenceActions.CloseConf)());
	      store.dispatch((0, _ConferenceActions.RemoteMute)(false));
	
	      if (restartFlag) {
	        restartFlag = false;
	        location.reload();
	        // browserHistory.push("/conf/" + roomkeyend);
	      } else {
	        if (roomkeyend != '') {
	          _reactRouter.browserHistory.push("/conf/feedback/" + roomkeyend);
	        }
	      }
	    };
	
	    this.successStats = function (stats) {
	      console.log("Stats", stats);
	      var statLength = stats.length;
	      var reportType;
	      var curReport;
	      var s_id;
	
	      for (var i = 0; i < statLength; i++) {
	        var curStat = stats[i];
	
	        reportType = curStat.type;
	        curReport = curStat.stats;
	        s_id = curStat.id;
	
	        if (reportType == "ssrc_audio_send") {
	          //This is bytes that has been sent for this audio stream after the peer connection is setup.
	          var bytes_sent = curReport.bytes_sent;
	          //This is RTP packets that has been sent over for this audio stream after the peer connection is setup.
	          var packets_sent = curReport.packets_sent;
	          //This is RTP packets that is lost for this audio stream after the peer connection is setup.
	          var packets_lost = curReport.packets_lost;
	          //Round trip time in ms measured by the stack when retrieving the statistics for this audio stream.
	          var rtt_ms = curReport.rtt_ms;
	          //Audio encoder used for this audio stream.
	          var codec_name = curReport.codec_name;
	
	          store.dispatch((0, _ConferenceActions.StatsAudioSend)({
	            bytes_sent: bytes_sent, packets_sent: packets_sent,
	            packets_lost: packets_lost, rtt_ms: rtt_ms,
	            codec_name: codec_name
	          }));
	        }
	
	        if (reportType == "ssrc_audio_recv") {
	          //This is bytes that has been received for this audio stream after the peer connection is setup;
	          var bytes_recv = curReport.bytes_rcvd;
	          //This is RTP packets that has been received for this audio stream after the peer connection is setup.
	          var packets_recv = curReport.packets_rcvd;
	          //This is RTP packets that has been lost for this audio stream after the peer connection is setup.
	          var packets_lost = curReport.packets_lost;
	          //Current e2e delay in ms as estimated by the stack for this audio stream.
	          var delay_estimated_ms = curReport.delay_estimated_ms;
	          //audio decoder used for this audio stream;
	          var codec_name = curReport.codec_name;
	
	          store.dispatch((0, _ConferenceActions.StatsAudioRecv)({
	            bytes_recv: bytes_recv, packets_recv: packets_recv,
	            packets_lost: packets_lost, delay_estimated_ms: delay_estimated_ms,
	            codec_name: codec_name
	          }));
	        }
	
	        if (reportType == "ssrc_video_send") {
	          //This is bytes that has been sent for this video stream after the peer connection is setup.
	          var bytes_sent = curReport.bytes_sent;
	          //This is RTP packets that has been sent over for this video stream after the peer connection is setup.
	          var packets_sent = curReport.packets_sent;
	          //This is RTP packets that is lost for this video stream after the peer connection is setup.
	          var packets_lost = curReport.packets_lost;
	          //round trip time in ms measured by the stack when retrieving the statistics for this video stream.
	          var rtt_ms = curReport.rtt_ms;
	          //video encoder used for this video stream.
	          var codec_name = curReport.codec_name;
	          //FIR packets received from the remote end for this video stream afte the peer connection is setup.
	          var firs_rcvd = curReport.firs_rcvd;
	          //NACK packets received from the remote end for this video stream after the peer connection is setup.
	          var nacks_rcvd = curReport.nacks_rcvd;
	          //PLI packets received from the remote end for this video stream after the peer connection is setup.
	          var plis_rcvd = curReport.plis_rcvd;
	          //current frame height that is sent to remote for this video stream. this is not neccessarily to be the capture frame height.
	          var send_frame_height = curReport.send_frame_height;
	          //current frame width that is sent to remote for this video stream; this is not neccessarily to be the capture frame width.
	          var send_frame_width = curReport.send_frame_width;
	          //current frame rate of the video stream sending to remote peer. This is not neccessarily to be the capture frame rate.
	          var framerate_sent = curReport.framerate_sent;
	          // If there is a resolution degrade on the sent video stream, for example, from VGA to CIF, this field shows the reason for
	          // most recent resolution change.
	          // if last_adapt_reason = 1,  the resolution change is because of high CPU usage;
	          // if last_adapt_reason = 2, the resolution change is caused by current available bandwidth for sending the stream is too low.
	          // If last_adpat_reason = 3, the resolution change is view renderer is at heavy load.
	          // If last_adapt_reason = 99, there is no resolution degrade recently.
	          var last_adapt_reason = curReport.adapt_reason;
	          // how many resolution degradation has happend on this video stream since the peer connection is setup.
	          var adapt_changes = curReport.adapt_reason;
	
	          store.dispatch((0, _ConferenceActions.StatsVideoSend)({
	            bytes_sent: bytes_sent, packets_sent: packets_sent,
	            packets_lost: packets_lost, rtt_ms: rtt_ms, codec_name: codec_name,
	            firs_rcvd: firs_rcvd, nacks_rcvd: nacks_rcvd, plis_rcvd: plis_rcvd,
	            send_frame_height: send_frame_height, send_frame_width: send_frame_width,
	            framerate_sent: framerate_sent, last_adapt_reason: last_adapt_reason,
	            adapt_changes: adapt_changes
	          }));
	        }
	
	        if (reportType == "ssrc_video_recv") {
	          //This is bytes that has been received for this video stream after the peer connection is setup;
	          var bytes_recv = curReport.bytes_rcvd;
	          //This is RTP packets that has been received for this video stream after the peer connection is setup.
	          var packets_recv = curReport.packets_rcvd;
	          //This is RTP packets that has been lost for this video stream after the peer connection is setup.
	          var packets_lost = curReport.packets_lost;
	          //Current e2e delay in ms as estimated by the stack for this video stream.
	          var current_delay_ms = curReport.current_delay_ms;
	          //video decoder used for this video stream;
	          var codec_name = curReport.codec_name;
	          //FIR packets sent from local end for this video stream afte the peer connection is setup.
	          var firs_sent = curReport.firs_sent;
	          //NACK packets sent from local end for this video stream after the peer connection is setup.
	          var nacks_rcvd = curReport.nacks_rcvd;
	          //PLI packets sent from local end for this video stream after the peer connection is setup.
	          var plis_rcvd = curReport.plis_rcvd;
	          //current frame height that is received for this video stream.
	          var frame_height = curReport.frame_height;
	          //current frame width that is received for this video stream.
	          var frame_width = curReport.frame_width;
	          //current frame rate of the video stream received from remote peerr. This is not neccessarily to be the rendered frame rate.
	          var framerate_rcvd = curReport.framerate_rcvd;
	          //current rendered frame rate on this video stream.  This is usually smaller or equal to received frame rate.
	          var framereate_output = curReport.framerate_output;
	
	          store.dispatch((0, _ConferenceActions.StatsVideoRecv)({
	            bytes_recv: bytes_recv, packets_recv: packets_recv,
	            packets_lost: packets_lost, current_delay_ms: current_delay_ms,
	            codec_name: codec_name, firs_sent: firs_sent, nacks_rcvd: nacks_rcvd,
	            plis_rcvd: plis_rcvd, frame_height: frame_height,
	            frame_width: frame_width, framerate_rcvd: framerate_rcvd,
	            framereate_output: framereate_output
	          }));
	        }
	
	        if (reportType == "VideoBWE") {
	          //the estimated available send bandwidth on local peer, in kbps.
	          var available_send_bandwidth = curReport.available_send_bandwidth;
	          //the estimated avaiable receive bandwidth on local peer in kbps.
	          var available_recv_bandwidth = curReport.available_receive_bandwidth;
	          //the current total sending bitrate of the video channels, in kbps;
	          var trasmit_bitrate = curReport.transmit_bitrate;
	          //the current total re-trasmitting bitrate of the video channels, in kbps
	          var retransmit_bitrate = curReport.retransmit_bitrate;
	
	          store.dispatch((0, _ConferenceActions.StatsVideoBWE)({
	            available_send_bandwidth: available_send_bandwidth,
	            available_recv_bandwidth: available_recv_bandwidth,
	            trasmit_bitrate: trasmit_bitrate,
	            retransmit_bitrate: retransmit_bitrate
	          }));
	        }
	      } ///Loop Ends here...
	    };
	
	    this.failedStats = function (err) {
	      console.log("Err Stats", err);
	    };
	  }
	
	  _createClass(WoogeenManager, [{
	    key: 'setSubscribedScreen',
	    value: function setSubscribedScreen(stream) {
	      subscribedScreen = stream;
	    }
	  }, {
	    key: 'getSubscrbedStream',
	    value: function getSubscrbedStream() {
	      return subscribedScreen;
	    }
	  }, {
	    key: 'trySubscribeMixStream',
	    value: function trySubscribeMixStream(callback) {
	      if (_mixStream == null || _mixStream == undefined) {
	        console.log('Mix stream null');
	        return;
	      }
	      var that = this;
	      console.log("Quality Level - Mix", _videoQuality, this.getScreenSize(resolution));
	
	      if (!_mixStream.mediaStream) {
	        conference.subscribe(_mixStream, { video: { /*resolution: this.getScreenSize(resolution), */qualityLevel: _videoQuality } }, function () {
	          store.dispatch((0, _ConferenceActions.setMixStream)(_mixStream));
	          callback(_mixStream);
	        }, function (err) {
	          console.log("Mix Error", err);
	        });
	      } else {
	        callback(_mixStream);
	      }
	    }
	  }, {
	    key: 'setRoomKey',
	    value: function setRoomKey(key) {
	      _activeRoom = key;
	    }
	  }, {
	    key: 'getRoomKey',
	    value: function getRoomKey() {
	      return _activeRoom;
	    }
	  }, {
	    key: 'enableVad',
	    value: function enableVad(status) {
	      _enableVad = status;
	    }
	  }, {
	    key: 'getSelfId',
	    value: function getSelfId() {
	      return _selfID;
	    }
	  }, {
	    key: 'getScreenSize',
	    value: function getScreenSize(_res) {
	      switch (_res) {
	        case 'sif':
	          return { width: 320, height: 240 };
	          break;
	        case 'vga':
	          return { width: 640, height: 480 };
	          break;
	        case 'hd720p':
	          return { width: 1280, height: 720 };
	          break;
	        case 'hd1080p':
	          return { width: 1920, height: 1080 };
	          break;
	        default:
	          return { width: 640, height: 480 };
	      }
	    }
	  }, {
	    key: 'trySubscribeStream',
	    value: function trySubscribeStream(stream, callback) {
	      var that = this;
	
	      if (stream instanceof Woogeen.RemoteMixedStream) {
	        // L.Logger.info('Its Mix Stream', stream.id());
	        // _mixStream = stream;
	      } else {
	
	        conference.subscribe(stream, function () {
	          L.Logger.info('subscribed:', stream.id());
	
	          callback(stream);
	
	          if (!stream.isScreen()) {
	            subScribedStreams.push(stream);
	            store.dispatch((0, _ConferenceActions.setStreamStats)(subScribedStreams));
	          }
	        }, function (err) {
	          L.Logger.error(stream.id(), 'subscribe failed:', err);
	        });
	      }
	    }
	  }, {
	    key: 'applyDevices',
	    value: function applyDevices(devices) {
	      _cameraSource = devices.camera;
	      _audioSource = devices.audio;
	
	      this.rePublishCamera();
	    }
	  }, {
	    key: 'applyResolution',
	    value: function applyResolution(res) {
	      resolution = res;
	      this.rePublishCamera();
	    }
	  }, {
	    key: 'getLocalStream',
	    value: function getLocalStream() {
	      return localStream;
	    }
	
	    //  getTotalStreams = function(){
	    // 	return totalStreams;
	    // }
	
	  }, {
	    key: 'onlyPresenter',
	    value: function onlyPresenter(status) {
	      store.dispatch((0, _ConferenceActions.onlyPresenter)(status));
	    }
	  }, {
	    key: 'sendMute',
	    value: function sendMute(to) {
	      if (_host) {
	        var obj = {
	          command: 'SELF_MUTE',
	          content: {},
	          type: 'OBJECT'
	        };
	
	        this.sendMessage(obj, to);
	      }
	    }
	  }, {
	    key: 'displayStream',
	    value: function displayStream(stream) {
	      var streamId = stream.id();
	      var div = document.createElement('div');
	      div.setAttribute('id', 'scrlvid' + streamId);
	      div.setAttribute('class', 'rsc-slider-item');
	      div.setAttribute('style', 'flex: 0 0 100%');
	
	      var div1 = document.createElement('div');
	      div1.setAttribute('id', 'subvid' + streamId);
	      div1.setAttribute('class', 'rsc-slider-item-img rsc-slider-item_transparent');
	      div1.setAttribute('style', 'width:160px; height: 90px; position:none;');
	
	      div.appendChild(div1);
	
	      if (document.getElementById('refBefore')) {
	        var refBefore = document.getElementById('refBefore').parentNode.parentNode;
	        document.getElementById('confScroller').insertBefore(div, refBefore);
	      }
	
	      stream.show('subvid' + streamId);
	    }
	  }, {
	    key: 'getConference',
	    value: function getConference(iceservers, transport, callback) {
	      // console.log("ICE GOT", iceservers);
	      if (!conference) {
	
	        conference = Woogeen.ConferenceClient.create({});
	
	        //Thrid party Ice Servers, if required.
	        conference.setIceServers(store.getState().login.iceServers);
	        // console.log(browser);
	
	        // if(browser.name != 'edge'){
	        //     conference.setIceServers([{
	        //           urls: "stun:203.196.151.150:3478"
	        //         }, {
	        //             urls: ["turn:turn.instavc.com:443?transport=udp", "turn:5.187.21.7:443?transport=tcp"],
	        //             username: "admin",
	        //             credential: "admin123"
	        //     }]);
	        // }
	
	        conference.trasportMode(transport); //all or relay
	
	        this.setStreamEvents();
	        return callback(conference);
	      } else {
	        return callback(conference);
	      }
	    }
	  }, {
	    key: 'endConference',
	    value: function endConference(rid) {
	      var restartConference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      if (conference) {
	        if (restartConference) {
	          location.reload();
	          return;
	          // restartFlag = true;
	        }
	        clearInterval(soundIntervalID);
	        if (store.getState().workDashboard.shareRequestId == store.getState().workDashboard.uid && _presenterID != '') {
	          var obj = {
	            command: 'UPDATE-SHARE-ENABLE',
	            content: { status: false, id: '' },
	            type: 'OBJECT'
	          };
	          this.sendMessage(obj, _presenterID);
	          var clearIdObj = {
	            command: 'CLEAR-SHARE-UID',
	            content: {},
	            type: 'OBJECT'
	          };
	          this.sendMessage(clearIdObj, 0);
	        }
	        if (store.getState().conference.imHost == true && store.getState().workDashboard.sync == true) {
	          var sethostobj = {
	            command: 'SET-HOST',
	            content: { data: { status: false, hostId: '' } },
	            type: 'OBJECT'
	          };
	          this.sendMessage(sethostobj, 0);
	
	          // when host is exiting revoking speaker access and unmuting muted streams
	          if (store.getState().conference.imHost) {
	            var self = this;
	            this.offSpeaker();
	            var mutedStreams = _.filter(allStreams, function (o) {
	              return o.mute;
	            });
	            _.each(mutedStreams, function (stream) {
	              self.sendMute(stream.from);
	            });
	          }
	          /*let presenterobj = {
	              command : 'PRESENTER-OFF',
	              content : { presenter: '' },
	              type : 'OBJECT'
	            };
	          this.sendMessage( presenterobj, 0);*/
	          var objEntity = {
	            current: store.getState().workDashboard.current, topicContent: store.getState().workDashboard.topicContent, topicList: store.getState().workDashboard.topicList, tid: store.getState().workDashboard.tid,
	            conductQuestion: store.getState().workDashboard.conductQuestion, questionnaireId: store.getState().workDashboard.questionnaireId, questionnaireName: store.getState().workDashboard.questionnaireName, pdfView: store.getState().workDashboard.pdfView, fileId: store.getState().workDashboard.fileId,
	            sync: false, ssPdfView: store.getState().workDashboard.ssPdfView, pdfFileName: store.getState().workDashboard.pdfFileName, whiteBoardData: store.getState().workDashboard.whiteBoardData, waitforview: store.getState().workDashboard.waitforview
	          };
	          if (objEntity.current == "handraise") {
	            objEntity['handraiseCount'] = 0;
	            objEntity['handraiseupdates'] = false;
	          } else if (objEntity.current == 'roomchat') objEntity['roomCount'] = 0;else if (objEntity.current == 'screenshare') {
	            objEntity['ssNotification'] = false;
	            objEntity['showButtons'] = store.getState().workDashboard.showButtons;
	          }
	          var _obj = {
	            command: 'SYNC-REQ',
	            content: { data: objEntity },
	            type: 'OBJECT'
	          };
	          // this.props.dispatch(setWorkDashboard({sync : !this.props.workDashboardData.sync}));
	          this.sendMessage(_obj, 0);
	          var shareObj = {
	            command: 'UPDATE-SHARE-ENABLE',
	            content: { status: false, id: '' },
	            type: 'OBJECT'
	          };
	          this.sendMessage(shareObj, 0);
	          _host = false;
	        } else if (store.getState().conference.imHost == true) {
	          var _sethostobj = {
	            command: 'SET-HOST',
	            content: { data: { status: false, hostId: '' } },
	            type: 'OBJECT'
	          };
	          this.sendMessage(_sethostobj, 0);
	          var _shareObj = {
	            command: 'UPDATE-SHARE-ENABLE',
	            content: { status: false, id: '' },
	            type: 'OBJECT'
	          };
	          this.sendMessage(_shareObj, 0);
	          /*let presenterobj = {
	              command : 'PRESENTER-OFF',
	              content : { presenter: '' },
	              type : 'OBJECT'
	            };
	          this.sendMessage( presenterobj, 0);*/
	          _host = false;
	        }
	        /*let logObj = {
	          logType : 'Conference',
	          actionType : 'End Call',
	          hostId : hostId,
	          scheduleId : scheduleId,
	        }
	        if(rid) {
	          roomkeyend = rid;
	          logObj['roomKey'] = roomkeyend
	        } else {
	          logObj['roomKey'] = roomKey
	        }*/
	
	        if (_presenterID != '') {
	          _presenterID = '';
	        }
	        if (rid) {
	          roomkeyend = rid;
	        }
	
	        // console.log("conf status", conference);
	        if (confConnected) {
	          conference.leave();
	        } else {
	          // console.log("inside else")
	          this.closeConference();
	        }
	        // store.dispatch(createLogRequest(logObj))
	      }
	    }
	  }, {
	    key: 'requestScreenShareAccess',
	    value: function requestScreenShareAccess(obj) {
	      if (_presenterID != '') {
	        this.sendMessage(obj, _presenterID);
	      } else {
	        alertify.alert("Host Unavailable", "Host not yet joined, please request again after host joined.");
	        store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ shareRequestId: "" }));
	      }
	    }
	  }, {
	    key: 'setStreamEvents',
	    value: function setStreamEvents() {
	      var that = this;
	
	      conference.on('server-disconnected', function (event) {
	        console.log("server-disconnected event");
	        that.closeConference();
	      });
	      //Add Stream
	      conference.on('stream-added', function (event) {
	        console.log("Stream Added", event);
	        var stream = event.stream;
	
	        var fromMe = false;
	        var iStreamCount = 0;
	
	        for (var i in conference.localStreams) {
	          if (conference.localStreams.hasOwnProperty(i)) {
	            console.log('localstreams', i, conference.localStreams[i].id());
	            if (conference.localStreams[i].id() === stream.id()) {
	              window.localRemote = stream;
	              fromMe = true;
	              if (iStreamCount == 0) {
	                localStream.sid = stream.id();
	                allStreams[0].sid = localStream.sid;
	                console.log('Local Stream test', localStream);
	              } else {
	                if (additionalStream.length > 0) {
	                  for (var j = 0; j < additionalStream.length; j++) {
	                    if (additionalStream[j].id() == stream.id()) {
	                      additionalStream[j].sid = stream.id();
	                      var defIndex = _.findIndex(allStreams, ['additionalIindex', j]);
	                      if (defIndex > 0) {
	                        allStreams[defIndex].sid = stream.id();
	                      }
	                      break;
	                    }
	                  }
	                  // var iaindex = iStreamCount-1;
	                  // additionalStream[iaindex].sid = stream.id();
	                  // var defIndex = _.findIndex(allStreams, ['additionalIindex', iaindex]);
	                  // if(defIndex > 0){
	                  //   allStreams[defIndex].sid = stream.id();
	                  // }
	                }
	                console.log('Additional Stream', additionalStream);
	              }
	              // break;
	            }
	          }
	          iStreamCount++;
	        }
	
	        if (fromMe) {
	          stream.on('AudioDisabled', function () {
	            console.log('Audio Disabled!');
	          });
	          L.Logger.info('stream', stream.id(), 'is from me; will not be subscribed.', iStreamCount);
	          if (iStreamCount == 0) {
	            // localStream.sid = stream.id();
	            // allStreams[0].sid = localStream.sid;
	          } else {
	              // if(additionalStream.length > 0){
	              //   var iaindex = iStreamCount-1;
	              //   additionalStream[iaindex].sid = stream.id();
	              //   var defIndex = _.findIndex(allStreams, ['additionalIindex', iaindex]);
	              //   if(defIndex > 0){
	              //     allStreams[defIndex].sid = stream.id();
	              //   }
	              // }
	            }
	          store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	          return;
	        }
	
	        var confUsers = store.getState().conference.confData.users;
	        //Find in users table
	        var uIndex = _.findIndex(attendees, ['id', stream.from]);
	        console.log('ATT', attendees, uIndex, confUsers, stream);
	        if (uIndex >= 0) {
	          var userIndex = _.findIndex(confUsers, ['_id', attendees[uIndex].name]);
	          console.log('ATT1', confUsers, userIndex);
	          if (userIndex >= 0) {
	            stream.role = confUsers[userIndex].role;
	            stream.fname = confUsers[userIndex].firstname + ' ' + confUsers[userIndex].lastname;
	          }
	        }
	
	        if (stream.from == _presenter) {
	          stream.presenter = true;
	          _presenterID = stream.from;
	        }
	
	        // if(_role != Roles.Admin){
	        //   store.dispatch(setConfFeedback({message: "Presenter is Not Available.", status: 0}));
	        // }
	
	        if (stream.isScreen()) {
	          screenStream = stream;
	          store.dispatch((0, _ConferenceActions.addScreen)(screenStream));
	          console.log('screen added');
	        } else {
	          // var defIndex = _.findIndex(allStreams, ['from', stream.from]);
	          var defIndex = _.findIndex(allStreams, ['sid', stream.sid]);
	
	          //While Early join, if any late request come to store, it needs to be ignored.
	          if (defIndex < 0) {
	            stream.sid = stream.id();
	            allStreams.push(stream);
	          } else if (stream.id() == allStreams[defIndex].sid) {
	            allStreams[defIndex] = stream;
	          } else {
	            //Mostly additional stream.
	            stream.sid = stream.id();
	            allStreams.push(stream);
	          }
	          store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	        }
	      }); //End Add Stream
	
	      //Remove Stream
	      conference.on('stream-removed', function (event) {
	        var stream = event.stream;
	        L.Logger.info('stream removed: ', stream);
	        var isRecording = store.getState().conference.isRecording;
	        console.log('isRecording', isRecording);
	        if (isRecording) stopRecord();
	
	        if (stream.isScreen()) {
	          screenStream = null;
	          store.dispatch((0, _ConferenceActions.addScreen)(screenStream));
	          store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ ssNotification: false, showButtons: true, selfShare: false, screenplay: true }));
	          subscribedScreen = null;
	          return;
	        }
	
	        if (setRemoveVideoCallback) {
	          setRemoveVideoCallback(stream);
	        }
	
	        var defIndex = _.findIndex(allStreams, ['sid', stream.id()]);
	
	        if (defIndex > -1) {
	          var removedStream = [];
	          if (defIndex != 0) {
	            removedStream = _.pullAt(allStreams, [defIndex]);
	          }
	          console.log("removedStream[0] ==== ", removedStream[0]);
	          if (removedStream[0].presenter) {
	            console.log("SET Dispalth");
	            _presenter = '';
	            _presenterID = '';
	
	            if (_role == _roles.Roles.Student) {
	              store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Host is yet to join. Please wait!", status: 0 }));
	            }
	            store.dispatch((0, _ConferenceActions.SetPresenter)(''));
	          }
	          if (removedStream[0].speaker) {
	            console.log("SET Dispalth");
	            _speaker = '';
	            store.dispatch((0, _ConferenceActions.SetSpeaker)(''));
	          }
	          // console.log("REmoved Stream", removedStream, removedStream.presenter, removedStream.speaker);
	          store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	        }
	
	        var defIndex1 = _.findIndex(subScribedStreams, ['from', stream.from]);
	        if (defIndex1 >= 0) {
	          var removedStream = _.pullAt(subScribedStreams, [defIndex1]);
	          store.dispatch((0, _ConferenceActions.setStreamStats)(subScribedStreams));
	        }
	
	        var iPresenter = _.findIndex(allStreams, ['presenter', true]);
	        var iSpeaker = _.findIndex(allStreams, ['speaker', true]);
	        var confStatus = store.getState().conference.confStatus;
	
	        /*if(iPresenter < 0 && iSpeaker < 0 && allStreams.length > 0 && allStreams[0] == null){
	          if(confStatus == 1 || allStreams.length == 1)
	            store.dispatch(setConfFeedback({message: "No one is Presenting...", status: 0}));
	        }*/
	
	        var id = stream.elementId !== undefined ? stream.elementId : 'subvid' + stream.id();
	
	        // if (id !== undefined) {
	        //   // totalStreams -= 1;
	
	        //   var element = document.getElementById(id);
	        //   if (element) {
	        //     let scroll_hook = 'scrlvid' + stream.id();
	        //     if(document.getElementById(scroll_hook)){
	        //       element.parentElement.remove()
	        //     }else{
	        //       element.remove();
	        //     }
	        //   }
	        // }
	      }); //End Remove Stream
	
	      conference.on('user-joined', function (event) {
	        L.Logger.info('user joined:', event.user);
	
	        if (_host) {
	          if (store.getState().conference.speaker != '') {
	            var speakerobj = {
	              command: 'SPEAKER-ON',
	              content: { speaker: store.getState().conference.speaker, streamId: store.getState().conference.speaker },
	              type: 'OBJECT'
	            };
	            that.sendMessage(speakerobj, event.user.id);
	          }
	
	          var hostSetObj = {
	            command: 'SET-HOST',
	            content: { data: { status: true, hostId: store.getState().login.data._id } },
	            type: 'OBJECT'
	          };
	          that.sendMessage(hostSetObj, event.user.id);
	
	          if (store.getState().conference.presenter != '') {
	            var presenterobj = {
	              command: 'PRESENTER',
	              content: { presenter: store.getState().conference.presenter },
	              type: 'OBJECT'
	            };
	            that.sendMessage(presenterobj, event.user.id);
	          }
	
	          if (store.getState().workDashboard.waitforview == true) {
	            var syncobj = {
	              command: 'CHANGE-WAIT-FLAG',
	              content: { status: true },
	              type: 'OBJECT'
	            };
	            // this.props.dispatch(setWorkDashboard({sync : !this.props.workDashboardData.sync}));
	            that.sendMessage(syncobj, event.user.id);
	          }
	
	          ///
	          if (store.getState().workDashboard.sync) {
	            var current = store.getState().workDashboard.current;
	            var objEntity = {
	              current: store.getState().workDashboard.current, topicList: store.getState().workDashboard.topicList, topicContent: store.getState().workDashboard.topicContent, tid: store.getState().workDashboard.tid,
	              conductQuestion: store.getState().workDashboard.conductQuestion, questionnaireId: store.getState().workDashboard.questionnaireId, questionnaireName: store.getState().workDashboard.questionnaireName,
	              pdfView: store.getState().workDashboard.pdfView, fileId: store.getState().workDashboard.fileId,
	              sync: store.getState().workDashboard.sync, ssPdfView: store.getState().workDashboard.ssPdfView, pdfFileName: store.getState().workDashboard.pdfFileName, whiteBoardData: store.getState().workDashboard.whiteBoardData,
	              waitforview: store.getState().workDashboard.waitforview
	            };
	            if (current == "handraise") {
	              objEntity['handraiseCount'] = 0;
	              objEntity['handraiseupdates'] = false;
	            } else if (current == 'roomchat') objEntity['roomCount'] = 0;else if (current == 'screenshare') {
	              objEntity['ssNotification'] = false;
	              objEntity['showButtons'] = store.getState().workDashboard.showButtons;
	            }
	
	            var _syncobj = {
	              command: 'SYNC-REQ',
	              content: { data: objEntity },
	              type: 'OBJECT'
	            };
	            // this.props.dispatch(setWorkDashboard({sync : !this.props.workDashboardData.sync}));
	            that.sendMessage(_syncobj, event.user.id);
	            var objConfStatus = {
	              command: 'SYNC-CONF-STATUS',
	              content: { data: { status: store.getState().conference.confStatus }, from: "Layout" },
	              type: 'OBJECT'
	            };
	            that.sendMessage(objConfStatus, event.user.id);
	          }
	          if (store.getState().workDashboard.ssPdfView == true) {
	            var ssObjEntity = { ssPdfView: store.getState().workDashboard.ssPdfView, pdfFileName: store.getState().workDashboard.pdfFileName };
	            var ssObj = {
	              command: 'SYNC-SS-PDF-REQ',
	              content: { data: ssObjEntity },
	              type: 'OBJECT'
	            };
	            that.sendMessage(ssObj, event.user.id);
	          }
	        }
	
	        if (localStream) {
	          if (_uid) {
	            if (event.user.name == _uid) {
	              localStream.from = event.user.id;
	            }
	          }
	        }
	        attendees.push(event.user);
	        store.dispatch((0, _ConferenceActions.addUser)(attendees));
	        store.dispatch((0, _ConferenceActions.getAttendees)(roomKey));
	      });
	
	      conference.on('user-left', function (event) {
	        L.Logger.info('user left:', event.user);
	        var defIndex = _.findIndex(attendees, ['name', event.user.name]);
	        var removedAttendee = _.pullAt(attendees, [defIndex]);
	        if (event.user.name == store.getState().conference.hostId && store.getState().workDashboard.shareRequestId == store.getState().workDashboard.uid) {
	          if (store.getState().workDashboard.sync == true) {
	            store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ sync: false }));
	          }
	          store.dispatch((0, _ConferenceActions.setImHost)({ status: false, hostId: '' }));
	          store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ waitforview: false, shareRequestId: '' }));
	        } else if (event.user.name == store.getState().conference.hostId) {
	          if (store.getState().workDashboard.sync == true) {
	            store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ sync: false }));
	          }
	          store.dispatch((0, _ConferenceActions.setImHost)({ status: false, hostId: '' }));
	          store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ waitforview: false }));
	        }
	        if (event.user.name == store.getState().workDashboard.shareRequestId) {
	          store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ shareRequestId: '', waitforview: false }));
	        }
	        store.dispatch((0, _ConferenceActions.addUser)(attendees));
	        store.dispatch((0, _ConferenceActions.getAttendees)(roomKey));
	      });
	
	      conference.on('message-received', function (event) {
	        L.Logger.info("CONF: Message Received", event);
	        var eventData = JSON.parse(event.msg.data);
	        var command = eventData.command;
	        var sender = event.msg.from;
	        switch (command) {
	          case "SPEAKER-REQ":
	            if (SetSpeakerListenerCallback != null) SetSpeakerListenerCallback(eventData.content.streamId, sender);
	            break;
	          case "HAND-RAISE":
	            if (HandraiseListenerCallback != null) HandraiseListenerCallback(eventData.content.data);
	            if (HandraiseNotificationCallback != null) HandraiseNotificationCallback(eventData.content.data);
	            break;
	          case "HAND-RAISE-ANSWER":
	            {
	              var callback = HandraiseAnsListenerCallback[eventData.content.id];
	              if (callback) callback(eventData.content.data);
	              if (HandraiseAnsNotificationCallback != null) HandraiseAnsNotificationCallback(eventData.content.data);
	            }
	            break;
	          case "HAND-RAISE-REPLY":
	            {
	              var _callback = HandraiseReplyListenerCallback[eventData.content.id];
	              if (_callback) _callback(eventData.content.data);
	              if (HandraiseAnsNotificationCallback != null) HandraiseAnsNotificationCallback(eventData.content.data);
	            }
	            break;
	          case "HAND-RAISE-EDIT":
	            {
	              var _callback2 = EditHandraiseCallback[eventData.content.id];
	              if (_callback2) _callback2(eventData.content.data);
	            }
	            break;
	          case "SYNC-REQ":
	            if (SyncListenerCallback != null) {
	              SyncListenerCallback(eventData.content.data);
	              if (store.getState().workDashboard.sync == true && store.getState().conference.imHost == true) {
	                var obj = {
	                  command: 'SYNC-CONF-STATUS',
	                  content: { data: { status: store.getState().conference.confStatus }, from: "Layout" },
	                  type: 'OBJECT'
	                };
	                that.sendMessage(obj, 0);
	              }
	            }
	            break;
	          case "SET-HOST":
	            if (eventData.content.data.status) {
	              if (eventData.content.data.hostId == store.getState().login.data._id) {
	                store.dispatch((0, _ConferenceActions.setImHost)(eventData.content.data));
	              } else {
	                eventData.content.data['status'] = false;
	                store.dispatch((0, _ConferenceActions.setImHost)(eventData.content.data));
	              }
	            } else {
	              store.dispatch((0, _ConferenceActions.setImHost)({ status: false, hostId: '' }));
	            }
	            break;
	          /*case "TOPIC-LIST-SYNC" :
	              if(TopicListListenerCallback != null)
	                TopicListListenerCallback(eventData.content.data);
	            break;
	          case "TOPIC-SYNC-REQ" :{
	              if(FullTopicListenerCallback != null)
	                FullTopicListenerCallback(eventData.content.data);
	            }
	            break;
	          case "TOPIC-QUESTION-SYNC" :
	              if(TopicQuestionListenerCallback != null)
	                TopicQuestionListenerCallback(eventData.content.data);
	            break;*/
	          case "TOPIC-SYNC-REQ":
	            {
	              if (TopicListenerCallback != null) TopicListenerCallback(eventData.content.data);
	              break;
	            }
	          case "TOPIC-CONT-SEL-SYNC":
	            if (TopicContentSelectListenerCallback != null) TopicContentSelectListenerCallback(eventData.content.data);
	            break;
	          case "ASSIGNMENT-SYNC-REQ":
	            {
	              if (AssignmentListenerCallback != null) AssignmentListenerCallback(eventData.content.data);
	              break;
	            }
	          case "ASSIGNMENT-CONT-SEL-SYNC":
	            if (AssignmentContentSelectListenerCallback != null) AssignmentContentSelectListenerCallback(eventData.content.data);
	            break;
	          case "POLL-SYNC-REQ":
	            {
	              if (PollListenerCallback != null) PollListenerCallback(eventData.content.data);
	              break;
	            }
	          case "POLL-CONT-SEL-SYNC":
	            if (PollContentSelectListenerCallback != null) PollContentSelectListenerCallback(eventData.content.data);
	            break;
	          case "SCROLL-SYNC-REQ":
	            if (SyncScrollListenerCallback != null) SyncScrollListenerCallback(eventData.content.data);
	            break;
	          case "SYNC-SS-PDF-REQ":
	            if (SyncSSPdfListenerCallback != null) SyncSSPdfListenerCallback(eventData.content.data);
	            break;
	          case "SYNC-PDF-PAGE":
	            if (SyncPdfPageListenerCallback != null) SyncPdfPageListenerCallback(eventData.content.data);
	            break;
	          case "SYNC-PDF-CLOSE":
	            if (SyncPdfCloseListenerCallback != null) SyncPdfCloseListenerCallback(eventData.content.data);
	            break;
	          case "WB-SYNC":
	            var currentURL = window.location.pathname.split('/');
	            if (store.getState().conference.confStatus != 1 || currentURL[1] != 'conf') {
	              store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ whiteBoardData: eventData.content.wbContent }));
	            } else {
	              if (WhiteBoardListenerCallBack != null) WhiteBoardListenerCallBack(eventData.content.wbContent);
	            }
	            break;
	          case "SYNC-CONF-STATUS":
	            if (eventData.content.data.from == "Dashboard" && SyncDashConfStatusListenerCallback != null) {
	              SyncDashConfStatusListenerCallback(eventData.content.data);
	            } else if (SyncConfStatusListenerCallback != null) {
	              SyncConfStatusListenerCallback(eventData.content.data);
	            }
	            break;
	          case "CHAT-CHANGE-REQ":
	            if (handleRoomChatListenerCallback != null) {
	              handleRoomChatListenerCallback(eventData.content);
	            }
	            break;
	          case "ROOM-CHAT":
	            if (RoomChatListenerCallBack != null) RoomChatListenerCallBack(eventData.content.chatData);
	            if (RoomNotificationCallback != null) RoomNotificationCallback(eventData.content.chatData);
	            break;
	          case "SS-NOTIFICATION":
	            if (ScreenShareNotificationCallBack != null) ScreenShareNotificationCallBack(eventData.content);
	            break;
	          case "UN-REQ-VIDEO":
	            that.publishCamera();
	            isFeedBackDsipacth = false;
	            alertify.alert('Video Removed!', 'Video has been removed by Host.', function () {});
	            break;
	          case "REQ-VIDEO":
	            alertify.confirm('Video Request', 'Host is requesting for Video, do you want to publish?', function (result) {
	              if (result) {
	                //TODO - Activate video
	                that.publishCamera();
	              }
	            }, function () {
	              //Req rejected
	              var obj = {
	                command: 'RES-VIDEO-REQ',
	                content: { attendeesData: {} },
	                type: 'OBJECT'
	              };
	              that.sendMessage(obj, event.msg.from);
	            }).set('labels', { ok: 'Allow', cancel: 'Deny' });
	            break;
	          case "RES-VIDEO-REQ":
	            alertify.alert('Request Rejected', 'Attendee rejected the video request.', function () {});
	
	            //Refresh by dispatch stream.
	            store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	            break;
	          case "REQ-SHARE":
	            if (store.getState().workDashboard.shareRequestId != '') {
	              var _obj2 = {
	                command: 'HAVE-SHARE-REQ',
	                content: {},
	                type: 'OBJECT'
	              };
	              that.sendMessage(_obj2, event.msg.from);
	            } else {
	              store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ shareRequestId: eventData.content.id }));
	              var message = '<b>' + eventData.content.firstname + '</b> is requesting for document (or) screen share';
	              alertify.confirm('Share Request', message, function (result) {
	                if (result) {
	                  var _obj3 = {
	                    command: 'ALLOW-SHARE-REQ',
	                    content: { id: eventData.content.id },
	                    type: 'OBJECT'
	                  };
	                  store.dispatch((0, _ConferenceActions.setScreenEnable)({ id: event.msg.from, status: true }));
	                  that.sendMessage(_obj3, event.msg.from);
	                }
	              }, function () {
	                //Req rejected
	                var obj = {
	                  command: 'REJECT-SHARE-REQ',
	                  content: {},
	                  type: 'OBJECT'
	                };
	                store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ shareRequestId: '' }));
	                that.sendMessage(obj, event.msg.from);
	              }).set('labels', { ok: 'Allow', cancel: 'Deny' });
	            }
	            break;
	          case "ALLOW-SHARE-REQ":
	            store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ shareRequestId: eventData.content.id }));
	            break;
	          case "REJECT-SHARE-REQ":
	            alertify.alert('Request Rejected', 'Rejected the document (or) screen share request.', function () {});
	
	            //Refresh by dispatch share request.
	            store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ shareRequestId: "" }));
	            break;
	          case "HAVE-SHARE-REQ":
	            alertify.alert('Warning', 'Some other already requested for sharing, Please try again later.', function () {});
	            store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ ssNotification: false, shareRequestId: "" }));
	            break;
	          case "REMOVE-SS-REQ":
	            store.dispatch((0, _WorkDashboardActions.setWorkDashboard)(eventData.content.data));
	            break;
	          case "CHANGE-WAIT-FLAG":
	            store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ waitforview: eventData.content.status }));
	            break;
	          case "UN-REQ-SHARE":
	            if (store.getState().workDashboard.shareRequestId != "") {
	              if (screenStream) {
	                screenStream.close();
	              }
	              alertify.alert('Access denied', 'Screen share access denied.', function () {});
	              store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ ssNotification: false, shareRequestId: "", filestatus: false, fileData: null }));
	              var _obj4 = {
	                command: 'UPDATE-SHARE-ENABLE',
	                content: { status: false, id: '' },
	                type: 'OBJECT'
	              };
	              that.sendMessage(_obj4, event.msg.from);
	
	              if (store.getState().workDashboard.ssPdfView && store.getState().workDashboard.ssUploadedby == store.getState().workDashboard.uid) {
	                (0, _WorkDashboardActions.closeSharedDocument)(store.getState().workDashboard.fileName);
	                var _obj5 = {
	                  command: 'SYNC-PDF-CLOSE',
	                  content: { data: { waitforview: false, showButtons: true, ssNotification: false, ssPdfView: false, pdfFileName: '', fileName: '', ssUploadedby: '' } },
	                  type: 'OBJECT'
	                };
	                that.sendMessage(_obj5, 0);
	              } else if (store.getState().workDashboard.waitforview == true) {
	                var _obj6 = {
	                  command: 'CHANGE-WAIT-FLAG',
	                  content: { status: false },
	                  type: 'OBJECT'
	                };
	                that.sendMessage(_obj6, 0);
	              }
	            } else if (!store.getState().workDashboard.shareRequestId || store.getState().workDashboard.shareRequestId == "") {
	              alertify.alert('Screen Share Access', 'Now you can share the screen.', function () {});
	              store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ shareRequestId: eventData.content.id }));
	              var _obj7 = {
	                command: 'UPDATE-SHARE-ENABLE',
	                content: { status: true, id: eventData.content.id },
	                type: 'OBJECT'
	              };
	              that.sendMessage(_obj7, event.msg.from);
	            }
	            break;
	          case "GET-UPDATE-SHARE":
	            store.dispatch((0, _ConferenceActions.setScreenEnable)({ id: event.msg.from, status: eventData.content.status }));
	            break;
	          case "UPDATE-SHARE-ENABLE":
	            store.dispatch((0, _ConferenceActions.setScreenEnable)({ id: event.msg.from, status: eventData.content.status }));
	            store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ shareRequestId: eventData.content.id }));
	            break;
	          case "CLEAR-SHARE-UID":
	            store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ ssUploadedby: '' }));
	            break;
	          case "SPEAKER-ON":
	            // var defIndex = _.findIndex(allStreams, ['from', eventData.content.speaker]);
	            var defIndex = _.findIndex(allStreams, ['sid', eventData.content.streamId]);
	            if (defIndex >= 0) {
	              _.forEach(allStreams, function (stream) {
	                if (stream) {
	                  stream.speaker = false;
	                }
	              });
	              allStreams[defIndex].speaker = true;
	            }
	            _speaker = eventData.content.streamId;
	            store.dispatch((0, _ConferenceActions.SetSpeaker)(eventData.content.streamId));
	
	            // _speaker = eventData.content.speaker;
	            // store.dispatch(SetSpeaker(eventData.content.speaker));
	            console.log("Status Received SPK", event.msg.from, event.msg);
	            break;
	          case "SPEAKER-OFF":
	            _.forEach(allStreams, function (stream) {
	              if (stream) {
	                stream.speaker = false;
	              }
	            });
	
	            var iPresenter = _.findIndex(allStreams, ['presenter', true]);
	
	            var userRole = store.getState().login.data.role;
	            var hostID = store.getState().conference.hostId;
	            var confStatus = store.getState().conference.confStatus;
	
	            /*if(iPresenter < 0 && hostID != store.getState().login.data._id && userRole != Roles.Admin && confStatus == 1 && allStreams.length > 0 && allStreams[0]== null){
	              store.dispatch(setConfFeedback({message: "Presenter is Not Available.", status: 0}));
	            }*/
	
	            _speaker = '';
	            store.dispatch((0, _ConferenceActions.SetSpeaker)(''));
	            break;
	          case "SOUND_METER":
	            if (_enableVad) {
	              var sid = eventData.content.sid;
	              var uid = '';
	              var soundValue = eventData.content.slowValue;
	              console.log("Sound Val", sid, soundValue);
	              if (soundValue >= 0.07) {
	                that.setSpeakerOn(uid, sid);
	              }
	            }
	            break;
	          case "SELF_MUTE":
	            // that._MuteOrUnMute(localStream);
	            if (!localStream.hostedByMute) localStream.hostedByMute = true;else localStream.hostedByMute = false;
	
	            store.dispatch((0, _ConferenceActions.RemoteMute)(that._MuteOrUnMute(localStream, localStream.hostedByMute)));
	            // if(localStreams.disableAudio()){
	            //   localStreams.enableAudio();
	            // }
	            break;
	          case "PRESENTER":
	
	            var defIndex = _.findIndex(allStreams, ['sid', eventData.content.presenter]);
	            console.log("DEF INDEX PRESENTER", defIndex);
	            if (defIndex >= 0) {
	              _.forEach(allStreams, function (stream) {
	                if (stream) {
	                  stream.presenter = false;
	                }
	              });
	
	              _presenterID = event.msg.from;
	
	              allStreams[defIndex].presenter = true;
	
	              if (allStreams[defIndex].speaker) allStreams[defIndex].speaker = false;
	            }
	            _presenter = eventData.content.presenter;
	            store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "", status: -1 }));
	            store.dispatch((0, _ConferenceActions.SetPresenter)(eventData.content.presenter));
	            // store.dispatch(addStream(allStreams));
	            console.log("Status Received", event.msg.from, event.msg);
	            break;
	          case "PRESENTER-OFF":
	            _.forEach(allStreams, function (stream) {
	              if (stream) {
	                stream.presenter = false;
	              }
	            });
	
	            var iSpeaker = _.findIndex(allStreams, ['speaker', true]);
	            var confStatus = store.getState().conference.confStatus;
	
	            _presenter = '';
	            _presenterID = '';
	
	            var userRole = store.getState().login.data.role;
	            var hostID = store.getState().conference.hostId;
	
	            if (userRole == _roles.Roles.Student) {
	              store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Host is yet to join. Please wait!", status: 0 }));
	            }
	
	            /*else if(iSpeaker < 0 && hostID != store.getState().login.data._id && userRole != Roles.Admin && confStatus == 1 && allStreams.length > 0 && allStreams[0]== null){
	              store.dispatch(setConfFeedback({message: "Presenter is Not Available.", status: 0}));
	            }*/
	
	            // // muted by host and host is revoked
	            // if(allStreams[0].mute){
	            //   that._MuteOrUnMute (allStreams[0], false);
	            // }
	
	            store.dispatch((0, _ConferenceActions.SetPresenter)(''));
	            break;
	          case "YES-IM":
	            var defIndex = _.findIndex(allStreams, ['from', event.msg.from]);
	            if (defIndex >= 0) {
	              allStreams[defIndex].role = eventData.content.role;
	            }
	            break;
	
	          // FOR RELOAD
	          case "RELOAD_TOPICS":
	            if (eventData.content.tid != '') {
	              if (eventData.content.tid == store.getState().workDashboard.tid) {
	                if (store.getState().workDashboard.topicContent == true) {
	                  store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ topicList: true, topicContent: false, tid: '', topicContentDataDetails: null, topicFileData: null }));
	                } else if (store.getState().workDashboard.pdfView == true) {
	                  store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ topicList: true, tid: '', topicContentDataDetails: null, pdfView: false, topicPdfFileData: null, topicFileData: null, fileId: '' }));
	                } else if (store.getState().workDashboard.conductQuestion == true) {
	                  store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ topicList: true, tid: '', topicContentData: null, topicFileData: null, conductQuestion: false, questionnaireId: '', questionnaireName: '' }));
	                }
	              }
	              store.dispatch((0, _WorkDashboardReloadActions.reloadTopicList)());
	            }
	            break;
	          case "RELOAD_TOPICS_CONTENT":
	            if (eventData.content.tid != '') {
	              if (eventData.content.tid == store.getState().workDashboard.tid) {
	                if (store.getState().workDashboard.topicContent == true) {
	                  store.dispatch((0, _WorkDashboardReloadActions.reloadTopicContent)());
	                }
	              }
	            }
	            break;
	          case "RELOAD_UPLOAD_FILES":
	            if (eventData.content.tid != '') {
	              if (eventData.content.tid == store.getState().workDashboard.tid) {
	                if (store.getState().workDashboard.topicContent == true) {
	                  store.dispatch((0, _WorkDashboardReloadActions.reloadUplodFiles)());
	                }
	              }
	            }
	            break;
	          case "RELOAD_TOPIC_QUESTIONNAIRES":
	            if (eventData.content.tid != '') {
	              if (eventData.content.tid == store.getState().workDashboard.tid) {
	                if (store.getState().workDashboard.topicContent == true) {
	                  store.dispatch((0, _WorkDashboardReloadActions.reloadTopicQuestionnaires)());
	                }
	              }
	            }
	            break;
	          case "RELOAD_TOPIC_PDFVIEW":
	            if (eventData.content.tid != '' && eventData.content.fileId && eventData.content.fileId != '') {
	              if (eventData.content.tid == store.getState().workDashboard.tid && eventData.content.fileId == store.getState().workDashboard.fileId) {
	                if (store.getState().workDashboard.pdfView == true) {
	                  store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ pdfView: false, topicContent: true, fileId: '', topicPdfFileData: null }));
	                }
	              }
	              store.dispatch((0, _WorkDashboardReloadActions.reloadTopicPdfView)());
	            } else if (eventData.content.tid != '' && eventData.content.fileIds && eventData.content.fileIds != '') {
	              if (eventData.content.tid == store.getState().workDashboard.tid && eventData.content.fileIds.includes(store.getState().workDashboard.fileId)) {
	                if (store.getState().workDashboard.pdfView == true) {
	                  store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ pdfView: false, topicContent: true, fileId: '', topicPdfFileData: null }));
	                }
	              }
	              store.dispatch((0, _WorkDashboardReloadActions.reloadTopicPdfView)());
	            }
	            break;
	          case "RELOAD_REMOVED_QUESTIONNAIRES":
	            if (eventData.content.tid != '' && eventData.content.questionnaireId != '') {
	              if (eventData.content.tid == store.getState().workDashboard.tid && eventData.content.questionnaireId == store.getState().workDashboard.questionnaireId) {
	                if (store.getState().workDashboard.conductQuestion == true) {
	                  store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ conductQuestion: false, topicContent: true, questionnaireId: '', questionnaireName: '', questionsData: null, submittedData: null, answerData: null }));
	                }
	              }
	              store.dispatch((0, _WorkDashboardReloadActions.reloadQuestionnaire)());
	              // store.dispatch(reloadTopicQuestionnaires());
	            }
	            break;
	          case "RELOAD_CONDUCT_QUESTION":
	            if (eventData.content.questionnaireId != '') {
	              if (eventData.content.questionnaireId == store.getState().workDashboard.questionnaireId) {
	                if (store.getState().workDashboard.conductQuestion == true) {
	                  store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ conductQuestion: false, topicContent: true, questionnaireId: '', questionnaireName: '', questionsData: null, submittedData: null, answerData: null }));
	                }
	              }
	              store.dispatch((0, _WorkDashboardReloadActions.reloadConductQuestion)());
	            }
	            break;
	          case "RELOAD_POLLS_LIST":
	            store.dispatch((0, _WorkDashboardReloadActions.reloadPollsList)());
	            break;
	          default:
	        }
	      });
	    }
	  }, {
	    key: 'getConnectionStatus',
	    value: function getConnectionStatus() {
	      return confConnected;
	    }
	  }, {
	    key: 'getStreamReport',
	    value: function getStreamReport(stream, callback) {
	      conference.getConnectionStats(stream, this.successStats, this.failedStats);
	    }
	  }, {
	    key: 'hideLocalStream',
	    value: function hideLocalStream() {
	      if (localStream) {
	        localStream.hide();
	      }
	
	      this.hideRemoteStream();
	    }
	  }, {
	    key: 'hideRemoteStream',
	    value: function hideRemoteStream() {
	      if (allStreams) {
	        allStreams.map(function (stream) {
	          if (stream && stream.showing) {
	            stream.hide();
	          }
	        });
	      }
	    }
	  }, {
	    key: 'screenShare',
	    value: function screenShare(successCallback, failureCallback) {
	      screenStream = null;
	      if (conference) {
	        var self = this;
	        // Woogeen.LocalStream.create({
	        //           video: {device: 'screen', extensionId: screenShareKey},
	        //           audio: true
	        //         }, function(err, stream) {
	        //         if (err) {
	        //           /*return*/ L.Logger.error(
	        //             'create Screen failed:', err);
	        //             //callback(null);
	        //             failureCallback(false);
	        //         } else {
	        //             screenStream = stream;
	        //             successCallback(true);
	        //             conference.publish(stream, function(st) {
	        //               console.log("Republished screen the stream");
	        //               let obj = {
	        //                   command : 'SS-NOTIFICATION',
	        //                   content : { },
	        //                   type : 'OBJECT'
	        //               };
	        //               self.sendMessage( obj, 0);
	        //               // conference.mix(screenStream, [], function(){
	        //               //   console.log('Mix Stream on Screenshare');
	        //               // }, function(err){
	        //               //   console.log('mix screen error',err);
	        //               // })
	        //             });
	        //         }
	        //       }
	        // );
	        conference.shareScreen({ resolution: 'hd720p', extensionId: screenShareKey }, function (st) {
	          L.Logger.info('screen shared:', st.id());
	          screenStream = st;
	          successCallback(true);
	          var obj = {
	            command: 'SS-NOTIFICATION',
	            content: {},
	            type: 'OBJECT'
	          };
	          self.sendMessage(obj, 0);
	        }, function (err) {
	          failureCallback(false);
	          L.Logger.error('sharing failed:', err);
	        });
	      }
	    }
	  }, {
	    key: 'pauseScreenShare',
	    value: function pauseScreenShare() {
	      // console.log("screenStream === ", screenStream);
	      if (screenStream) {
	        screenStream.disableVideo();
	      }
	    }
	  }, {
	    key: 'playScreenShare',
	    value: function playScreenShare() {
	      // console.log("screenStream === ", screenStream);
	      if (screenStream) {
	        screenStream.enableVideo();
	      }
	    }
	  }, {
	    key: 'stopScreenShare',
	    value: function stopScreenShare() {
	      // console.log("screenStream === ", screenStream);
	      if (screenStream) {
	        screenStream.close();
	      }
	      screenStream = null;
	      store.dispatch((0, _ConferenceActions.addScreen)(screenStream));
	      store.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ ssNotification: false, showButtons: true, selfShare: false, screenplay: true }));
	      subscribedScreen = null;
	    }
	  }, {
	    key: 'recordConference',
	    value: function recordConference() {
	      conference.startRecorder({}, function (file) {
	        RecorderId = file.recorderId;
	        L.Logger.info('Stream recording with recorder ID: ', file.recorderId);
	        store.dispatch((0, _ConferenceActions.setRecordStream)(true));
	      }, function (err) {
	        L.Logger.error('Media recorder failed:', err);
	      });
	    }
	  }, {
	    key: 'stopRecord',
	    value: function stopRecord() {
	      conference.stopRecorder({ recorderId: RecorderId }, function (file) {
	        L.Logger.info('Stream recorded with recorder ID: ', file.recorderId);
	        store.dispatch((0, _ConferenceActions.setRecordStream)(false));
	      }, function (err) {
	        L.Logger.error('Media recorder cannot stop with failure: ', err);
	      });
	    }
	  }, {
	    key: 'setSpeakerOn',
	    value: function setSpeakerOn(uid, sid) {
	      _speaker = uid;
	      var obj = {
	        command: 'SPEAKER-ON',
	        content: { speaker: uid, streamId: sid },
	        type: 'OBJECT'
	      };
	      this.sendMessage(obj, 0);
	    }
	    //V1.1
	
	  }, {
	    key: 'setPresenter',
	    value: function setPresenter(uid) {
	      _presenter = uid;
	      // store.dispatch(SetPresenter(uid));
	      var obj = {
	        command: 'PRESENTER',
	        content: { presenter: uid },
	        type: 'OBJECT'
	      };
	      this.sendMessage(obj, 0);
	    }
	
	    //V1.1
	
	  }, {
	    key: 'offPresenter',
	    value: function offPresenter() {
	      _presenter = '';
	      var obj = {
	        command: 'PRESENTER-OFF',
	        content: { presenter: '' },
	        type: 'OBJECT'
	      };
	
	      var self = this;
	      this.offSpeaker();
	
	      var mutedStreams = _.filter(allStreams, function (o) {
	        return o.mute;
	      });
	      _.each(mutedStreams, function (stream) {
	        self.sendMute(stream.from);
	        self._MuteOrUnMute(stream);
	      });
	
	      this.sendMessage(obj, 0);
	    }
	  }, {
	    key: 'offSpeaker',
	    value: function offSpeaker() {
	      _speaker = '';
	      var obj = {
	        command: 'SPEAKER-OFF',
	        content: { presenter: '' },
	        type: 'OBJECT'
	      };
	      this.sendMessage(obj, 0);
	    }
	
	    //V1.1
	
	  }, {
	    key: 'getDevices',
	    value: function getDevices(callback) {
	      var _this = this;
	
	      navigator.mediaDevices.enumerateDevices().then(function (res) {
	        _this.gotDevices(res, callback);
	      }).catch(this.handleError);
	    }
	
	    //V1.1
	
	  }, {
	    key: 'gotDevices',
	    value: function gotDevices(deviceInfos, callback) {
	      // console.log(deviceInfos);
	      callback(deviceInfos);
	    }
	
	    //V1.1
	
	  }, {
	    key: 'handleError',
	    value: function handleError() {}
	
	    //V1.1
	
	  }, {
	    key: 'createCamera',
	    value: function createCamera(callback) {
	
	      // if(localStream){
	      //   localStream.mediaStream.getTracks().forEach(function (track) {
	      //     track.stop();
	      //   });
	      // }
	      var _videoDevice = {
	        device: 'camera',
	        resolution: 'hd720p',
	        frameRate: _frameRate
	      };
	
	      if (localStream) {
	        conference.unpublish(localStream, function () {
	          localStream.close();
	          Woogeen.LocalStream.create({
	            video: _videoDevice,
	            audio: true
	          }, function (err, stream) {
	            if (err) {
	              /*return*/L.Logger.error('create LocalStream failed:', err);
	              callback(null);
	            } else {
	              localStream = stream;
	              window.localStream = localStream;
	
	              callback(stream);
	
	              conference.publish(localStream, { videoCodec: _codec, maxVideoBW: _maxVideoBW, maxAudioBW: _maxAudioBW }, function (st) {
	                console.log("Republished the stream");
	              });
	            }
	          });
	        });
	      }
	    }
	  }, {
	    key: 'rePublishCamera',
	    value: function rePublishCamera() {
	      console.log("REPUBLISH");
	      store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Applying Settings", status: 0 }));
	      if (localStream) {
	        localStream.mediaStream.getTracks().forEach(function (track) {
	          track.stop();
	        });
	
	        // console.log("consoles--- ", _speaker, _selfID, localStream.sid)
	        if (_speaker != '' && _speaker == localStream.sid) {
	          console.log("Speaker set after re publish");
	          _speaker = '';
	          store.dispatch((0, _ConferenceActions.SetSpeaker)(''));
	        }
	
	        // if(_presenter != '' && _presenterID == localStream.sid){
	        //   console.log("Presenter set after re publish");
	        //   that.setPresenter(localStream.sid);
	        // }
	
	        var that = this;
	        conference.unpublish(localStream, function (st) {
	          localStream.close();
	          allStreams[0] = null;
	          localStream = null;
	          that.publishCamera();
	        }, function (err) {});
	        // localStream.close();
	        // allStreams[0] = null;
	        // localStream = null;
	        // this.publishCamera();
	      }
	    }
	  }, {
	    key: 'publishCamera',
	    value: function publishCamera() {
	      console.log("PUBLISH VIDEO");
	      var _videoDevice = {
	        device: 'camera',
	        deviceId: _cameraSource,
	        audioId: _audioSource,
	        resolution: resolution
	      };
	
	      var that = this;
	      if (localStream) {
	        localStream.close();
	        var element = document.getElementById(localStream.elementId);
	
	        if (element) {
	          element.remove();
	        }
	
	        //delete allStreams[0];
	        allStreams[0] = null;
	
	        localStream = null;
	
	        if (setSelfVideoCallback) setSelfVideoCallback(null);
	
	        this.onlyPresenter(false);
	        store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	      } else {
	        // console.log("Here we check", _audioDevice);
	        Woogeen.LocalStream.create({
	          video: _videoDevice,
	          audio: true
	        }, function (err, stream) {
	          if (err) {
	            store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Failed to apply settings", status: 0 }));
	            /*return*/L.Logger.error('create LocalStream failed:', err);
	          } else {
	            console.log("re publish camera");
	            localStream = stream;
	
	            localStream.from = _selfID;
	            // that.handleSoundMeter(localStream.mediaStream);
	
	            allStreams[0] = localStream;
	
	            if (setSelfVideoCallback) {
	              setSelfVideoCallback(localStream);
	            }
	
	            conference.publish(localStream, { videoCodec: _codec, maxVideoBW: _maxVideoBW, maxAudioBW: _maxAudioBW }, function (st) {
	              // console.log("Call Back", setSelfVideoCallback);
	              console.log("Published Manually", st);
	              store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "", status: -1 }));
	              // localStream.sid  = st.id();
	              localStream.sid = st.id();
	              allStreams[0].sid = st.id();
	
	              store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	
	              if (_presenter != '' && _presenterID == _selfID) {
	                // _presenter = st.id();
	                console.log("Presenter set after re publish");
	                that.setPresenter(st.id());
	              }
	
	              if (setSelfSpeakerCallback) {
	                setSelfSpeakerCallback();
	              }
	            }, function (err) {
	              store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Sorry! Not able to communicate to our servers, please contact administrator", status: 0 }));
	              L.Logger.error('publish failed:', err);
	            });
	          }
	        });
	      }
	    }
	  }, {
	    key: 'removeAdditionalCamera',
	    value: function removeAdditionalCamera(sid) {
	      // if(camIndex >= 0){
	      // additionalStream[camIndex].stop();
	      var defIndex = _.findIndex(allStreams, ['sid', sid]);
	      if (defIndex > 0) {
	        var removedStream = _.pullAt(allStreams, [defIndex]);
	
	        var defAIndex = _.findIndex(additionalStream, ['sid', sid]);
	        if (defAIndex >= 0) {
	          additionalStream[defAIndex].close();
	          var removedAdditional = _.pullAt(additionalStream, [defAIndex]);
	        }
	
	        store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	      }
	      /* var defIndex = _.findIndex(allStreams, ['from', stream.from]);
	      if(defIndex > -1){
	      if(defIndex != 0){
	      var removedStream  = _.pullAt(allStreams, [defIndex]);*/
	      // }
	    }
	  }, {
	    key: 'createAdditionalCamera',
	    value: function createAdditionalCamera(_lcameraSource, _laudioSource) {
	      //additionalStream
	      var _videoDevice = {
	        device: 'camera',
	        deviceId: _lcameraSource,
	        audioId: _laudioSource,
	        resolution: resolution
	      };
	
	      Woogeen.LocalStream.create({
	        video: _videoDevice,
	        audio: false
	      }, function (err, stream) {
	        if (err) {
	          L.Logger.error('Additional Camera create failed:', err);
	        } else {
	          var iaLength = additionalStream.length;
	          additionalStream[iaLength] = stream;
	          additionalStream[iaLength].additional = true;
	          additionalStream[iaLength].additionalIindex = iaLength;
	          // stream.fname = allStreams[0].fname + '-' + (iaLength + 1)
	          stream.fname = store.getState().login.data.firstname + store.getState().login.data.lastname + '-' + (iaLength + 1);
	          allStreams.push(stream);
	
	          conference.publish(additionalStream[iaLength], { videoCodec: _codec, maxVideoBW: _maxVideoBW, maxAudioBW: _maxAudioBW }, function (st) {
	            console.log("Published Additional Camera", st, st.id());
	            store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	          });
	        }
	      });
	    }
	  }, {
	    key: 'joinConference',
	    value: function joinConference(token, settings, callback) {
	      store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Trying to connect...", status: 0 }));
	
	      var _publish = settings.publish;
	      var _videoDevice = false;
	      var _audio = settings.audio;
	      _codec = settings.codec;
	      _uid = settings.uid;
	      resolution = settings.videoResolution;
	      _role = settings.role;
	      _users = settings.users;
	      roomKey = settings.roomKey;
	      hostId = settings.hostId;
	      scheduleId = settings.scheduleId;
	      var that = this;
	      console.log("Resolution", resolution, isJoining);
	
	      // switch(resolution){
	      //   case 'sif':
	      //     _maxVideoBW = 256;
	      //     break;
	      //   case 'vga':
	      //     _maxVideoBW = 400;
	      //     break;
	      //   case 'hd720p':
	      //     _maxVideoBW = 700;
	      //     break;
	      //   case 'hd1080p':
	      //     _maxVideoBW = 1500;
	      //     break;
	      //   default:
	      //     _maxVideoBW = 300;
	      // }
	      //deviceId: "502122a2e2f831e9a9d935109f04fd59a81d548efd13a395069f4bec30136222" ? {exact: "502122a2e2f831e9a9d935109f04fd59a81d548efd13a395069f4bec30136222"} : undefined/*_cameraSource*/
	      //Need to check line no 557, 793 for device id implementation
	      //701 has been traced at final stage. best place to adopt the api changes there.
	
	      /*let logObj = {
	        logType : 'Conference',
	        actionType : 'Join Call',
	        uid : _uid,
	        codec : _codec,
	        token : token,
	        roomKey : roomKey,
	        hostId : hostId,
	        scheduleId : scheduleId,
	      }
	      store.dispatch(createLogRequest(logObj))*/
	
	      if (settings.video) {
	        _videoDevice = {
	          device: 'camera',
	          resolution: resolution,
	          frameRate: _frameRate
	        };
	      }
	
	      if (!confConnected && !isJoining) {
	        conference.join(token, function (resp) {
	          isJoining = true;
	          store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Trying to access your camera/microphone", status: 0 }));
	          Woogeen.LocalStream.create({
	            video: _videoDevice,
	            audio: _audio
	          }, function (err, stream) {
	            if (settings.audio && settings.video) {
	              if (err) {
	                /*return*/L.Logger.error('create LocalStream failed:', err);
	                // localStream = null;
	                switch (err.code) {
	                  case 1100:
	                    // Need whole screen block
	                    store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Access media denied.", status: 2 }));
	                    break;
	                  case 1101:
	                    store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Access media denied!", status: 2 }));
	                    break;
	                  case 1102:
	                    // Need whole screen block
	                    //https://www.facebook.com/help/232232800134371
	                    store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "No Camera or Microphone available", status: 2 }));
	                    break;
	                  case 1103:
	                    store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "error in accessing screen share plugin", status: 3 }));
	                    break;
	                  case 1104:
	                    store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Microphone/Camera not detected", status: 2 }));
	                    break;
	                  case 1105:
	                    store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Media option not supported by the browser", status: 0 }));
	                    break;
	                  case 1106:
	                    store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Mendatory constraints not satisfied", status: 0 }));
	                    break;
	                  case 1107:
	                    store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "User input media is invalid!", status: 0 }));
	                    break;
	                  default:
	                    store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Unknown error, please contact support.", status: 0 }));
	                }
	              } else {
	                store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Camera/Microphone seems to be working...", status: 0 }));
	                localStream = stream;
	
	                var mediaStreamTrack = localStream.mediaStream.getVideoTracks()[0];
	                if (typeof mediaStreamTrack != "undefined") {
	                  mediaStreamTrack.onended = function () {
	                    //for Chrome.
	                    // Need whole screen block
	                    setTimeout(function () {
	                      if (isFeedBackDsipacth) store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Your camera is busy!", status: 4 }));
	                    }, 10);
	                  };
	                }
	
	                window.localStream = localStream;
	              }
	            } else {
	              store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Host is yet to join. Please wait!", status: 0 }));
	            }
	
	            confConnected = true;
	
	            var users = resp.users;
	            _selfID = resp.self.id;
	            if (localStream) {
	              localStream.from = _selfID;
	              // that.handleSoundMeter(localStream.mediaStream);
	            }
	
	            if (users instanceof Array) {
	              users.map(function (u) {
	                L.Logger.info('user in conference:', u);
	
	                attendees.push(u);
	              });
	              store.dispatch((0, _ConferenceActions.addUser)(attendees));
	            }
	
	            var streams = resp.streams;
	            window.allStream = streams;
	            console.log(resp.streams);
	
	            if (streams instanceof Array) {
	              streams.map(function (stream) {
	                var streamid = stream.from == "" && localStream ? localStream.from : stream.from;
	                stream.sid = stream.id();
	                console.log('ATT-S', stream, streamid, stream.id());
	                var uIndex = _.findIndex(attendees, ['id', streamid]);
	                if (uIndex >= 0) {
	                  var userIndex = _.findIndex(_users, ['_id', attendees[uIndex].name]);
	                  if (userIndex >= 0) {
	                    stream.role = _users[userIndex].role;
	                    stream.fname = _users[userIndex].firstname + ' ' + _users[userIndex].lastname;
	                  }
	
	                  if (stream.sid == _presenter) {
	                    stream.presenter = true;
	                    _presenterID = stream.from;
	                  }
	                  if (stream.sid == _speaker) {
	                    stream.speaker = true;
	                  }
	                }
	
	                if (stream.isScreen()) {
	                  screenStream = stream;
	                  store.dispatch((0, _ConferenceActions.addScreen)(screenStream));
	                } else {
	                  allStreams.push(stream);
	                }
	
	                if (stream instanceof Woogeen.RemoteMixedStream) {
	                  //console.log('Its a mix stream!!!');
	                  _mixStream = stream;
	                }
	              });
	            }
	
	            // console.log("All Resp ", resp);
	            // if(localStream){
	            // localStream.from = _uid;
	            // }
	            if (localStream) {
	              allStreams[0].from = localStream.from;
	            }
	            // }else{
	            // allStreams[0] = {};
	            // }
	
	            store.dispatch((0, _ConferenceActions.addStream)(allStreams));
	
	            if (_publish && localStream) {
	              console.log('Current Codec', _codec);
	              localStream.attr('role', 'raja');
	              store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Trying to publish your camera/microphone", status: -1 }));
	              conference.publish(localStream, { videoCodec: _codec, maxVideoBW: _maxVideoBW, maxAudioBW: _maxAudioBW }, function (st) {
	                L.Logger.info('stream published:', st, st.id());
	                localStream.sid = st.id();
	                store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "", status: 0 }));
	                callback(true, resp.streams, localStream);
	              }, function (err) {
	                store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Sorry! Not able to communicate to our servers, please contact administrator", status: 0 }));
	                L.Logger.error('publish failed:', err);
	              });
	            }
	          });
	        });
	      } else {
	        // isJoining = false;
	
	        var iSpeaker = _.findIndex(allStreams, ['speaker', true]);
	        var userRole = store.getState().login.data.role;
	        var hostID = store.getState().conference.hostId;
	
	        var confStatus = store.getState().conference.confStatus;
	
	        console.log("Exisit Conf", localStream);
	        if (!store.getState().conference.presenter && _role == _roles.Roles.Student) {
	          store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "Host is yet to join. Please wait!", status: 0 }));
	        }
	        /*else if(!store.getState().conference.presenter && iSpeaker < 0 && hostID != store.getState().login.data._id && userRole != Roles.Admin && confStatus == 1 && allStreams.length > 0 && allStreams[0]== null){
	          store.dispatch(setConfFeedback({message: "Presenter is Not Available.", status: 0}));
	        }*/
	        else store.dispatch((0, _ConferenceActions.setConfFeedback)({ message: "", status: -1 }));
	        // store.dispatch(setConfFeedback({message: "You are not connected to the coneference!", status: 0}));
	        callback(true, allStreams, localStream);
	      }
	    }
	  }, {
	    key: 'setHostPassword',
	    value: function setHostPassword(status) {
	      _host = status;
	      var obj = {
	        command: 'SET-HOST',
	        content: { data: { status: status, hostId: store.getState().login.data._id } },
	        type: 'OBJECT'
	      };
	      this.sendMessage(obj, 0);
	      var current = store.getState().workDashboard.current;
	      if (status == true || status == false && store.getState().workDashboard.sync == true) {
	        var objEntity = {
	          current: store.getState().workDashboard.current, topicList: store.getState().workDashboard.topicList, topicContent: store.getState().workDashboard.topicContent, tid: store.getState().workDashboard.tid,
	          conductQuestion: store.getState().workDashboard.conductQuestion, questionnaireId: store.getState().workDashboard.questionnaireId, questionnaireName: store.getState().workDashboard.questionnaireName,
	          pdfView: store.getState().workDashboard.pdfView, fileId: store.getState().workDashboard.fileId,
	          sync: status, ssPdfView: store.getState().workDashboard.ssPdfView, pdfFileName: store.getState().workDashboard.pdfFileName, waitforview: store.getState().workDashboard.waitforview
	        };
	        if (status == false && store.getState().workDashboard.sync == true) {
	          objEntity['ssPdfView'] = false;
	          objEntity['pdfFileName'] = '';
	          objEntity['waitforview'] = false;
	        }
	        if (current == "handraise") {
	          objEntity['handraiseCount'] = 0;
	          objEntity['handraiseupdates'] = false;
	        } else if (current == 'roomchat') {
	          objEntity['roomCount'] = 0;
	        } else if (current == 'screenshare') {
	          objEntity['ssNotification'] = false;
	          objEntity['showButtons'] = status == false && store.getState().workDashboard.sync == true ? true : store.getState().workDashboard.showButtons;
	        }
	        var _obj8 = {
	          command: 'SYNC-REQ',
	          content: { data: objEntity },
	          type: 'OBJECT'
	        };
	        this.sendMessage(_obj8, 0);
	
	        var _attendees = store.getState().conference.attendees;
	        var index = _.findIndex(_attendees, function (o) {
	          return o.screenEnable == true;
	        });
	        if (index > -1) {
	          var id = _attendees[index].id;
	          var shareEntity = {
	            shareRequestId: '', showButtons: true, selfShare: false
	          };
	          store.dispatch((0, _ConferenceActions.setScreenEnable)({ id: id, status: false }));
	          store.dispatch((0, _WorkDashboardActions.setWorkDashboard)(shareEntity));
	          var _obj9 = {
	            command: 'REMOVE-SS-REQ',
	            content: { data: shareEntity },
	            type: 'OBJECT'
	          };
	          this.sendMessage(_obj9, id);
	        }
	      } else if (status == false) {
	        var _objEntity = {
	          current: store.getState().workDashboard.current, topicList: store.getState().workDashboard.topicList, topicContent: store.getState().workDashboard.topicContent, tid: store.getState().workDashboard.tid,
	          conductQuestion: store.getState().workDashboard.conductQuestion, questionnaireId: store.getState().workDashboard.questionnaireId, questionnaireName: store.getState().workDashboard.questionnaireName,
	          pdfView: store.getState().workDashboard.pdfView, fileId: store.getState().workDashboard.fileId,
	          sync: status, ssPdfView: false, pdfFileName: "", waitforview: store.getState().workDashboard.waitforview, showButtons: true
	        };
	        var _obj10 = {
	          command: 'SYNC-REQ',
	          content: { data: _objEntity },
	          type: 'OBJECT'
	        };
	        this.sendMessage(_obj10, 0);
	
	        var _attendees2 = store.getState().conference.attendees;
	        var _index = _.findIndex(_attendees2, function (o) {
	          return o.screenEnable == true;
	        });
	        if (_index > -1) {
	          var _id = _attendees2[_index].id;
	          var _objEntity2 = {
	            shareRequestId: '', showButtons: true, selfShare: false
	          };
	          store.dispatch((0, _ConferenceActions.setScreenEnable)({ id: _id, status: false }));
	          store.dispatch((0, _WorkDashboardActions.setWorkDashboard)(_objEntity2));
	          var _obj11 = {
	            command: 'REMOVE-SS-REQ',
	            content: { data: _objEntity2 },
	            type: 'OBJECT'
	          };
	          this.sendMessage(_obj11, _id);
	        }
	      }
	    }
	  }, {
	    key: 'setHostFlag',
	    value: function setHostFlag(hostIndex) {
	      //First Reset flag if any
	      allStreams.map(function (stream, index) {
	        if (stream) {
	          if (index == hostIndex) {
	            allStreams[index].isHost = true;
	          } else {
	            allStreams[index].isHost = false;
	          }
	        }
	      });
	      // store.dispatch(addStream(allStreams));
	    }
	  }], [{
	    key: 'setVideoBitrate',
	    value: function setVideoBitrate(value) {
	      _maxVideoBW = value;
	      console.log('BitRate Video', value);
	    }
	  }, {
	    key: 'setAudioBitrate',
	    value: function setAudioBitrate(value) {
	      _maxAudioBW = value;
	      console.log('BitRate Audio', value);
	    }
	  }, {
	    key: 'getAudioBitrate',
	    value: function getAudioBitrate() {
	      return _maxAudioBW;
	    }
	  }, {
	    key: 'getVideoBitrate',
	    value: function getVideoBitrate() {
	      return _maxVideoBW;
	    }
	  }, {
	    key: 'videoQuality',
	    value: function videoQuality(value) {
	      _videoQuality = value;
	    }
	  }, {
	    key: 'getVideoQuality',
	    value: function getVideoQuality() {
	      return _videoQuality;
	    }
	  }]);
	
	  return WoogeenManager;
	}();
	
	exports.default = WoogeenManager;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.CLEAR_CHAT = exports.CLEAR_CHAT_NOTIFICATION = exports.CHAT_NOTIFICATION = exports.MY_CHATS = exports.MY_GROUPS = undefined;
	exports.createGroup = createGroup;
	exports.getMyGroups = getMyGroups;
	exports.membersToGroup = membersToGroup;
	exports.deleteGroup = deleteGroup;
	exports.setGroupList = setGroupList;
	exports.sendMessage = sendMessage;
	exports.setChatMessages = setChatMessages;
	exports.clearChatNotification = clearChatNotification;
	exports.clearChatData = clearChatData;
	exports.getChatData = getChatData;
	exports.getChatNotification = getChatNotification;
	exports.chatNotification = chatNotification;
	exports.chatNotifications = chatNotifications;
	exports.setChatNotification = setChatNotification;
	exports.getRoomChatData = getRoomChatData;
	exports.sendRoomMessage = sendRoomMessage;
	exports.clearRoomChat = clearRoomChat;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var MY_GROUPS = exports.MY_GROUPS = 'MY_GROUPS';
	var MY_CHATS = exports.MY_CHATS = 'MY_CHATS';
	var CHAT_NOTIFICATION = exports.CHAT_NOTIFICATION = 'CHAT_NOTIFICATION';
	var CLEAR_CHAT_NOTIFICATION = exports.CLEAR_CHAT_NOTIFICATION = 'CLEAR_CHAT_NOTIFICATION';
	var CLEAR_CHAT = exports.CLEAR_CHAT = 'CLEAR_CHAT';
	
	function createGroup(obj) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('creategroup', 'post', {
				groupObj: obj
			}).then(function (res) {
				return dispatch(setGroupList(res));
			});
		};
	}
	
	function getMyGroups(uid) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('getmygroups', 'post', {
				uid: uid
			}).then(function (res) {
				return dispatch(setGroupList(res));
			});
		};
	}
	
	function membersToGroup(obj) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('memberstogroup', 'post', {
				reqObj: obj
			}).then(function (res) {
				return dispatch(setGroupList(res));
			});
		};
	}
	
	function deleteGroup(obj) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('deletegroup', 'post', {
				reqObj: obj
			}).then(function (res) {
				return dispatch(setGroupList(res));
			});
		};
	}
	
	function setGroupList(response) {
		console.log("response === ", response);
		if (response.status) {
			return {
				type: MY_GROUPS,
				status: response.status,
				data: response.data,
				message: response.message
			};
		} else {
			return {
				type: MY_GROUPS,
				status: response.status,
				error: response.error
			};
		}
	}
	
	function sendMessage(obj) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('send-message', 'post', {
				chatObj: obj
			}).then(function (res) {
				return dispatch(setChatMessages(res));
			});
		};
	}
	
	function setChatMessages(response) {
		console.log("response === ", response);
		if (response.status) {
			return {
				type: MY_CHATS,
				status: response.status,
				data: response.data
			};
		} else {
			return {
				type: MY_CHATS,
				status: response.status,
				error: response.error
			};
		}
	}
	
	/*export function setChatNotification(response){
		return {
	        type: CHAT_NOTIFICATION,
	        status: response.status,
	        data: response.data
	    };
	}*/
	
	function clearChatNotification(response) {
		return {
			type: CLEAR_CHAT_NOTIFICATION,
			status: true,
			id: response.id,
			activeData: response.activeData,
			chatType: response.chatType
		};
	}
	
	function clearChatData() {
		return {
			type: CLEAR_CHAT,
			status: true
		};
	}
	
	function getChatData(obj) {
		var query = '?type=' + obj.chatType + '&sentTo=' + obj.sentTo;
		return function (dispatch) {
			return (0, _apiCaller2.default)('chat-data' + query).then(function (res) {
				return dispatch(setChatMessages(res));
			});
		};
	}
	
	function getChatNotification(obj) {
		/*// console.dir(obj)
	 return (dispatch) => {
	     return callApi('getchatnotification', 'post', {
	       chatObj: obj
	     }).then(res => dispatch(setChatNotification(res)));
	  	};*/
	}
	
	function chatNotification(obj) {
		return (0, _apiCaller2.default)('chatnotification', 'post', {
			chatObj: obj
		});
	}
	
	function chatNotifications(obj) {
		if (obj.chatType == 'Indi') {
			return function (dispatch) {
				return (0, _apiCaller2.default)('ind-chat-notifications', 'get').then(function (res) {
					return dispatch(setChatNotification(res));
				});
			};
		} else if (obj.chatType == 'Group') {}
	}
	
	function setChatNotification(response) {
		return {
			type: CHAT_NOTIFICATION,
			status: response.status,
			notifications: response.notifications,
			total: response.total
		};
	}
	
	function getRoomChatData(obj) {
		var query = '?type=' + obj.chatType + '&sentTo=' + obj.sentTo;
		return (0, _apiCaller2.default)('chat-data' + query, 'get');
	}
	
	function sendRoomMessage(obj) {
		return (0, _apiCaller2.default)('send-message', 'post', {
			chatObj: obj
		});
	}
	
	function clearRoomChat(roomKey) {
		return (0, _apiCaller2.default)('clear-roomchat', 'post', {
			roomKey: roomKey
		});
	}

/***/ },
/* 31 */
/***/ function(module, exports) {

	module.exports = require("md5");

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _ConferenceActions = __webpack_require__(38);
	
	var _ChatActions = __webpack_require__(30);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SocketHandler = function () {
		function SocketHandler() {
			_classCallCheck(this, SocketHandler);
	
			this.p2p = null;
			this.activeChat = null;
		}
	
		_createClass(SocketHandler, null, [{
			key: 'subscribeStatus',
			value: function subscribeStatus(uid) {
				this.p2p.subscribe(uid);
			}
		}, {
			key: 'sendInstaMessage',
			value: function sendInstaMessage(objMessage, uid) {
				// console.log("sendMsgSocket---- ", objMessage, uid);
				this.p2p.sendInstaMessage(objMessage, uid);
			}
		}, {
			key: 'disconnectServer',
			value: function disconnectServer() {
				if (this.p2p) {
					this.p2p.disconnect();
				}
			}
		}, {
			key: 'setActiveChat',
			value: function setActiveChat(activeId) {
				this.activeChat = activeId;
				// console.log(this.activeChat);
			}
		}, {
			key: 'clearActiveChat',
			value: function clearActiveChat() {
				this.activeChat = null;
				// console.log(this.activeChat);
			}
		}, {
			key: 'connectServer',
			value: function connectServer(uid, socketServer, iceServers, callback) {
				var online = [];
				var that = this;
				this.p2p = new Woogeen.PeerClient({
					iceServers: iceServers
				});
	
				this.p2p.on('server-disconnected', function (e) {
					// server-disconnected.
					console.log("Disconnected...");
				});
	
				this.p2p.on('chat-invited', function (e) {
					// chat-invited.
					console.log("Chat Invited...");
				});
	
				this.p2p.on('chat-denied', function (e) {
					// chat-denied.
					console.log("Chat Denied...");
				});
	
				this.p2p.on('chat-started', function (e) {
					// chat-started.
					console.log("Chat Started...");
				});
	
				this.p2p.on('chat-stopped', function (e) {
					// chat-stopped.
					console.log("Chat Stoped...");
				});
	
				this.p2p.on('stream-added', function (e) {
					// stream-added.
					console.log("stream-added...");
				});
	
				this.p2p.on('insta-message', function (data) {
					console.log("Insta Message Received", data);
					if (data.data && data.data.data && data.data.data.command) {
						if (data.data.data.command == 'IND-CHAT') {
							// console.log(that.activeChat, data.data.from);
							var chatData = data.data.data.chatData;
							var obj = { /*sentBy : chatData.sentBy,*/
								sentTo: chatData.sentBy,
								chatType: chatData.chatType
								// from : true
							};
							if (that.activeChat && that.activeChat == data.data.from) {
								store.dispatch((0, _ChatActions.getChatData)(obj));
							} else {
								//Notification
								store.dispatch((0, _ChatActions.chatNotifications)(obj));
								console.log("Notification block");
							}
						} else if (data.data.data.command == 'ADD-CONT' || data.data.data.command == 'CONT-RES') {
							if (data.data.data && data.data.data.obj) {
								var contactData = data.data.data.obj;
								store.dispatch((0, _UserDashboardActions.getMyContacts)(contactData.userId));
							}
						}
					}
				});
	
				this.p2p.on('data-received', function (e) {
					// data-received.
					console.log("data-received...", e);
					//Parser Values 
					//{type: 'IMG | TXT | VID', content: '', command: 'INDCHAT | GRPCHAT | ETC'}
				});
	
				this.p2p.on('status-changed', function (e) {
					console.log("Status Received", e.data);
					if (e.data && e.data.data && e.data.data != 'online') {
						var findUser = _.indexOf(online, e.data.from);
						var removeUser = _.pullAt(online, [findUser]);
						store.dispatch((0, _ConferenceActions.OnlineStatus)(online));
					} else {
						online.push(e.data.from);
						store.dispatch((0, _ConferenceActions.OnlineStatus)(online));
					}
				});
	
				// Initialize a Peer object
				this.p2p.connect({ host: socketServer, token: uid }, function (res) {
					callback(true);
				}, function (err) {
					// console.log("Raja ", err);
					callback(false);
				});
			}
	
			// console.log("this.online2---", this..online);
	
		}, {
			key: 'SendMessage',
			value: function SendMessage(message, toUID) {
				//Message Format {type: 'IMG | TXT | VID', content: '', command: 'INDCHAT | GRPCHAT | ETC'}
				this.p2p.send(message, toUID);
			}
	
			//This function denies a remote client's invitation.
	
		}, {
			key: 'DenyCall',
			value: function DenyCall(uid, successCallback, failureCallback) {
				this.p2p.deny(uid, successCallback, failureCallback);
			}
	
			//This function accepts a remote client to establish a connection for chatting/call.
	
		}, {
			key: 'AcceptCall',
			value: function AcceptCall(peerid, successCallback, failureCallback) {
				this.p2p.accept(peerid, successCallback, failureCallback);
			}
		}]);
	
		return SocketHandler;
	}();
	
	exports.default = SocketHandler;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var studentSchema = new _mongoose2.default.Schema({
		roomId: {
			type: _mongoose2.default.Schema.Types.ObjectId,
			required: [true, 'Please enter Room ID'],
			trim: true,
			ref: 'Room'
		},
		instId: {
			type: _mongoose2.default.Schema.Types.ObjectId,
			required: [true, 'Please enter Instructor ID'],
			trim: true,
			ref: 'Users'
		},
		students: [{
			type: _mongoose2.default.Schema.Types.ObjectId,
			required: false,
			ref: 'Users'
		}],
		certificateEligible: [{
			type: _mongoose2.default.Schema.Types.ObjectId,
			required: false,
			ref: 'Users'
		}],
		createdBy: {
			type: String,
			required: true
		},
		createdOn: {
			type: Date,
			required: true,
			default: (0, _moment2.default)().utc().toDate()
		},
		modifiedBy: {
			type: String,
			required: true
		},
		modifiedOn: {
			type: Date,
			required: true,
			default: (0, _moment2.default)().utc().toDate()
		}
	});
	
	exports.default = _mongoose2.default.model('Student', studentSchema);

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Schema = _mongoose2.default.Schema;
	var moment = __webpack_require__(1);
	
	
	var topicSchema = new Schema({
	  roomId: {
	    type: String
	  },
	  topicName: {
	    type: String,
	    required: [true, "Please enter Topic Name"],
	    maxlength: [60, 'Topic Name length should be maximum of 60 characters'],
	    trim: true,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash,
	    index: true
	  },
	  description: {
	    type: String,
	    required: [true, "Please enter Description"],
	    maxlength: [250, 'Description length should be maximum of 250 characters'],
	    trim: true,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  content: {
	    ops: [Object]
	  },
	  questionnaire: [{
	    questionnaireId: {
	      type: String,
	      ref: 'Questionnaire'
	    },
	    openFrom: {
	      type: Date
	    },
	    closeFrom: {
	      type: Date
	    },
	    showResult: {
	      type: Boolean
	    }
	  }],
	  topicEnable: {
	    type: Boolean,
	    default: false
	  },
	  createdBy: {
	    type: _mongoose2.default.Schema.Types.ObjectId,
	    ref: 'Users'
	  },
	  modifiedBy: {
	    type: _mongoose2.default.Schema.Types.ObjectId
	  },
	  modifiedAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  },
	  createdAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  }
	}, {
	  toObject: { getters: true },
	  toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('Topics', topicSchema);

/***/ },
/* 35 */
/***/ function(module, exports) {

	"use strict";
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createRandomString = createRandomString;
	function createRandomString(callback) {
	  var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
	  var string_length = 8;
	  var randomstring = '';
	
	  //Loop for creating random string
	  for (var i = 0; i < string_length; i++) {
	    var rnum = Math.floor(Math.random() * chars.length);
	    randomstring += chars.substring(rnum, rnum + 1);
	  }
	  callback(randomstring);
	}

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.loginUser = loginUser;
	exports.isLoggedIn = isLoggedIn;
	exports.authCheck = authCheck;
	exports.validateForgotPassword = validateForgotPassword;
	exports.isResetTopkenExpired = isResetTopkenExpired;
	exports.activateUserThroughMail = activateUserThroughMail;
	exports.isSignUp = isSignUp;
	exports.getFooter = getFooter;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _datalog = __webpack_require__(48);
	
	var _datalog2 = _interopRequireDefault(_datalog);
	
	var _cuid = __webpack_require__(26);
	
	var _cuid2 = _interopRequireDefault(_cuid);
	
	var _limax = __webpack_require__(27);
	
	var _limax2 = _interopRequireDefault(_limax);
	
	var _sanitizeHtml = __webpack_require__(28);
	
	var _sanitizeHtml2 = _interopRequireDefault(_sanitizeHtml);
	
	var _md = __webpack_require__(31);
	
	var _md2 = _interopRequireDefault(_md);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForUserCreation = _interopRequireWildcard(_emailFunctions);
	
	var _server = __webpack_require__(109);
	
	var _randomstring = __webpack_require__(35);
	
	var _authorization = __webpack_require__(10);
	
	var _login = __webpack_require__(36);
	
	var LoginController = _interopRequireWildcard(_login);
	
	var _datalog3 = __webpack_require__(55);
	
	var _adminUser = __webpack_require__(13);
	
	var _slashesActions = __webpack_require__(4);
	
	var _datalog4 = __webpack_require__(55);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// export function isLogggedIn(headerInfo) {
	//   console.log(headerInfo);
	// }
	var moment = __webpack_require__(1);
	//import redisutils from '../util/redisUtils'
	function loginUser(req, res) {
	  try {
	
	    var sess = req.session;
	    // console.log(req.body.userdata.username
	
	    if (!req.body.userdata.username || req.body.userdata.username == "") {
	      res.json({ status: false, error: "Please enter the Email Address." });
	    } else if (!req.body.userdata.password || req.body.userdata.password == "") {
	      res.json({ status: false, error: "Please enter the password." });
	    } else if (!req.body.userdata.deviceType || req.body.userdata.deviceType == "") {
	      res.json({ status: false, error: "Unable to Identify the device." });
	    } else {
	      // console.log(req.body);
	
	      // var userDetails = await redisutils.getFromRedis(req.body.userdata.username)
	      // console.log(userDetails)
	      // if(userDetails.success){
	      //   res.json({status:false, error:"Please Logout with other clients and try again!"})
	      // } else {
	      var slashsPassword = (0, _slashesActions.addSlash)(req.body.userdata.password);
	      var slashsEmail = (0, _slashesActions.addSlash)(req.body.userdata.username);
	      var query = _users2.default.findOne({ $or: [{ 'email': slashsEmail }, { 'gmail': slashsEmail }, { 'facebookMail': slashsEmail }] });
	      /*.populate('profile.companyid', 'businessType _id');*/
	      //console.log(query.password);
	      query.exec(function (err, person) {
	        if (err) res.json({ status: false, error: err });
	        if (person) {
	          if (person.userStatus == 'Active') {
	            if (slashsEmail == person.email && (0, _md2.default)(slashsPassword) == person.password || slashsEmail == person.email && slashsPassword == person.googleId || slashsEmail == person.gmail && slashsPassword == person.googleId || slashsEmail == person.email && slashsPassword == person.facebookId || slashsEmail == person.facebookMail && slashsPassword == person.facebookId) {
	              //TO DO - Generate New Token and Update, send the new token
	              var randomstring = '';
	
	              //Function call for creating randomstring
	              (0, _randomstring.createRandomString)(function (data) {
	                randomstring = data;
	              });
	              person.token = (0, _md2.default)(randomstring);
	              person.deviceType = req.body.userdata.deviceType;
	              if (person.deviceType == 'IOS' || person.deviceType == 'ANDROID') {
	                if (req.body.userdata.deviceId) {
	                  _users2.default.update({ _id: { $ne: person._id }, deviceId: req.body.userdata.deviceId }, { $unset: { deviceId: '' } }, { multi: true }, function (error, response) {});
	                  person['deviceId'] = req.body.userdata.deviceId;
	                } else {
	                  // create login failed log
	                  res.json({ status: false, error: "Unable to fatch Device ID." });
	                  return;
	                }
	              }
	
	              // updating token when user logging in....
	              person.save(function (error, result) {
	                if (error) {
	                  //console.log("error at save token");
	                  console.log(error);
	                  res.json({ status: false, error: "Internal server error, Please try again." });
	                } else {
	                  /*Users.find({ deviceId : req.body.userdata.deviceId }, function(e, data) {
	                    console.log("data === ", data);
	                  });*/
	                  var query = _users2.default.findOne({ 'token': result.token }).populate('profile.companyid', 'businessType _id');
	                  query.exec(function (err, data) {
	                    if (err) {
	                      res.json({ status: false, error: err });
	                    } else {
	                      _datalog2.default.update({ uid: person._id, category: 'User', action: 'Log_In_Failed', 'value.logged': false }, { $set: { 'value.logged': true } }, { multi: true }, function (logerr, logres) {});
	                      var _resp = { status: true, token: result.token, data: data, ga_ui: _config2.default.ga_id, socketServer: _config2.default.socketServer, iceServers: _config2.default.iceServers };
	                      // redisutils.setToRedis(req.body.userdata.username, person.token)
	
	                      // LogLoginStatus(1, data._id);
	                      // res.json({status:true,token:result.token, data: person, socketServer: serverConfig.socketServer, iceServers: serverConfig.iceServers});
	
	
	                      res.json(_resp);
	                    }
	                  });
	                }
	              });
	            } else {
	              if (person.role == _adminUser.Roles.Superadmin) {
	                res.json({ status: false, error: "Invalid Credentials. Please try again" });
	              } else {
	
	                // create login failed log
	                checkBlockUser(person._id, req.body.userdata.username, person.token, function (message) {
	                  if (message != null) {
	                    res.json({ status: false, error: message });
	                  } else {
	                    res.json({ status: false, error: "Invalid Credentials. Please try again" });
	                  }
	                });
	              }
	            }
	          } else {
	            res.json({ status: false, error: "In-active account. Please contact admin" });
	          }
	        } else {
	          res.json({ status: false, error: "Invalid Credentials. Please try again" });
	        }
	      });
	      //}      
	    }
	  } catch (e) {
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	function checkBlockUser(uid, email, token, callback) {
	  try {
	    var now = moment().subtract(1, 'hour').utc().toDate();
	    var checkquery = _datalog2.default.count({ uid: uid, category: 'User', action: 'Log_In_Failed', "value.logged": false, dateAdded: { $gte: now } });
	    checkquery.exec(function (err, count) {
	      var failed_obj = {
	        uid: uid,
	        category: 'User',
	        action: 'Log_In_Failed',
	        value: { logged: false },
	        label: 'User Logged In Failed'
	      };
	      if (count && count >= _config2.default.failLimit - 1) {
	        var randomstring = '';
	        (0, _randomstring.createRandomString)(function (data) {
	          randomstring = data;
	        });
	        var userToken = token ? token : (0, _md2.default)(randomstring);
	        _users2.default.update({ _id: uid }, { $set: { userStatus: "Blocked", token: userToken } }, function (usererr, userres) {
	          if (userres) {
	            var link = 'http://' + _config2.default.domin + '/activate-user/' + userToken;
	            var body = 'Dear User,<br /><br />click the below link to activate your account., <br /><br /><a href="' + link + '">' + link + '</a><br /><br />Thanks,<br /><br />' + _config2.default.mail_signature;
	            var exchangeData = {
	              to: email,
	              subject: 'Account Activate Link',
	              body: body
	            };
	            EmailForUserCreation.createUserMail(exchangeData, function (status) {});
	            callback("Your account is blocked, Please contact your administrator");
	          } else {
	            callback(null);
	          }
	        });
	      } else if (count && count == Math.round(_config2.default.failLimit / 2) - 1) {
	        (0, _datalog4.saveToLogger)(failed_obj);
	        callback("Your account will be blocked after " + Math.floor(_config2.default.failLimit / 2) + " unsuccessful attempts");
	      } else {
	        (0, _datalog4.saveToLogger)(failed_obj);
	        callback(null);
	      }
	    });
	  } catch (e) {
	    console.log('error in checkBlockUser', e);
	    callback(null);
	  }
	}
	
	/**
	* @Function Name: "isLoggedIn",
	* @Purpose: "To get user logged in or not.",
	* @Request Object: {},
	* @Response Object: Success- {status : true,token,  data, socketServer, iceServers, language }, Failure- {status : false, error, language},
	* @Author: "Prudhvi"
	*/
	function isLoggedIn(req, res) {
	  try {
	    // console.log("Login Token", req);
	    var _token = (0, _slashesActions.addSlash)(req.body.userdata.session);
	    if (!_token) {
	      res.json({ status: false, language: _config2.default.language });
	    } else {
	      var query = _users2.default.findOne({ 'token': _token, 'userStatus': 'Active' }).populate('profile.companyid', 'businessType _id').select('-password');
	
	      query.exec(function (err, person) {
	        // console.log(err);
	        //console.log(person)
	        if (err) {
	          res.json({ status: false, error: err, language: _config2.default.language });
	        } else if (person && person.token) {
	          if (_token == person.token) {
	            // console.log(person)
	            // LogLoginStatus(2, person._id); //Disabled due to cross check available on each request and for redundancy data, better to handle from local;
	            res.json({ status: true, token: person.token, data: person, ga_ui: _config2.default.ga_id, socketServer: _config2.default.socketServer, iceServers: _config2.default.iceServers, language: _config2.default.language });
	          } else {
	            res.json({ status: false, error: "Not authorised.", language: _config2.default.language });
	          }
	        } else {
	          res.json({ status: false, error: "Session expired.", language: _config2.default.language });
	        }
	      });
	    }
	  } catch (e) {
	    console.log('error in isLoggedIn', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	function authCheck(req, res, next) {
	  console.log(req.headers);
	  // if (req.session.auth || req.path==='/auth') {
	  //      next();
	  //  } else {
	  //     res.redirect("/");
	  //  }
	}
	
	function validateForgotPassword(req, res) {
	  //console.log(req.body);
	  //console.log(req.headers.host)
	  try {
	    if (!req.body.username || req.body.username == "") {
	      res.json({ status: false, error: "Please enter the Email Address." });
	    } else {
	
	      var slashsEmail = (0, _slashesActions.addSlash)(req.body.username);
	      var query = _users2.default.findOne({ email: slashsEmail });
	      query.exec(function (err, validUser) {
	        //console.log(validUser)
	        if (err) {
	          res.json({ status: false, error: err });
	        } else {
	          if (validUser == null) {
	            //console.log('null')
	            res.json({ status: false, error: "Enter Valid Email Address" });
	          } else if (validUser.userStatus != 'Active') {
	            res.json({
	              status: false,
	              error: "In-active account. Please contact admin"
	            });
	          } else {
	            //console.log('else',validUser)
	            if (validUser && validUser.email) {
	              /*console.log('validUser',validUser);
	              console.log('validUser.email',validUser.email);*/
	              if (validUser.guest) {
	                res.json({ status: false, error: "Invalid user" });
	              } else {
	                var randomstring = '';
	
	                //Function call for creating randomstring
	                (0, _randomstring.createRandomString)(function (data) {
	                  randomstring = data;
	                });
	                var resetPasswordExpires = Date.now() + 86400000; //24 hour 
	                console.log('domain', _config2.default.domin);
	
	                var exchangeData = {
	                  to: validUser.email,
	                  subject: 'Reset Password',
	                  body: '<span style="margin-top: 30px; font-size: 14px;">' + 'Hello ' + validUser.firstname + '</span>,' + '<br><br>' + 'We received a request to reset the password associated with this e-mail address. If you made this request, please follow the instructions below.' + '<br><br>' + 'Please click on the link below to reset your password using our secure server' + '<br><br>' + 'http://' + _config2.default.domin + '/resetPassword/' + (0, _md2.default)(randomstring)
	                };
	
	                EmailForUserCreation.resetRequestMail(exchangeData, function (emailerror, emailsuccess) {
	                  //console.log(emailerror.status)
	                  if (emailerror.status == false) {
	                    res.json({ status: false, error: 'Reset can not done at the moment. Try after some time' });
	                    //console.log("Email not sent");
	                  } else {
	                    _users2.default.update({ email: validUser.email }, { $set: { passwordToken: (0, _md2.default)(randomstring), resetPasswordExpires: resetPasswordExpires } }, function (err, numberAffected) {
	                      if (err) {
	                        res.json({ status: false, error: err });
	                      } else {
	                        res.json({ status: true, message: "Reset password link has been sent to your registered email" });
	                        //console.log('inserted token for password')
	                      }
	                    });
	                  }
	                });
	              }
	            } else {
	              res.json({ status: false, error: " User not found while sending mail" });
	            }
	          }
	        }
	      });
	    }
	  } catch (e) {
	    console.log('error in validateForgotPassword', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	function isResetTopkenExpired(req, res) {
	  try {
	    console.log(req.body);
	    if (!req.body.userdata.token) {
	      res.json({ 'status': false, error: 'Token not found' });
	    } else {
	      _users2.default.findOne({ passwordToken: (0, _slashesActions.addSlash)(req.body.userdata.token), resetPasswordExpires: { $gt: Date.now() } }, function (err, user) {
	        if (!user) {
	          res.json({ 'status': false, error: 'Password reset token invalid or expired' });
	        } else {
	          res.json({ 'status': true });
	        }
	      });
	    }
	  } catch (e) {
	    console.log('error in isResetTopkenExpired', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	function activateUserThroughMail(req, res) {
	  try {
	    if (req.params.token) {
	      _users2.default.findOne({ token: req.params.token }, function (error, user) {
	        if (user) {
	          if (user.userStatus == 'Active') {
	            var msg = "Your account (" + user.email + ") already activated, Please Sign In";
	            res.json({
	              status: false,
	              error: msg
	            });
	          } else if (user.userStatus == 'Deleted') {
	            res.json({
	              status: false,
	              error: "Oops! Invalid user"
	            });
	          } else {
	            var randomstring = '';
	
	            //Function call for creating randomstring
	            (0, _randomstring.createRandomString)(function (data) {
	              randomstring = data;
	            });
	            var userQuery = _users2.default.update({ _id: user._id }, { $set: { userStatus: 'Active', token: (0, _md2.default)(randomstring) } });
	            userQuery.exec(function (err, data) {
	              if (err) {
	                //console.log("query err", err);
	                var _error = "Oops! " + err.message;
	                res.json({
	                  status: false,
	                  error: _error
	                });
	              } else if (data) {
	                //console.log("Success", data);
	                _datalog2.default.update({ uid: user._id, category: 'User', action: 'Log_In_Failed', 'value.logged': false }, { $set: { 'value.logged': true } }, { multi: true }, function (logerr, logres) {});
	                var _msg = "Your account (" + user.email + ") activated successfully, Please Sign In";
	                res.json({
	                  status: true,
	                  message: _msg
	                });
	              }
	            });
	          }
	        } else {
	          res.json({
	            status: false,
	            error: "Oops! Invalid request."
	          });
	        }
	      });
	    } else {
	      res.json({
	        status: false,
	        error: "Oops! Invalid request."
	      });
	    }
	  } catch (e) {
	    console.log('error in activateUserThroughMail', e);
	    res.json({
	      status: false,
	      error: "Oops! Internal server error."
	    });
	  }
	}
	
	function isSignUp(req, res) {
	  res.json({ signUp: _config2.default.isSignUp, signIn: _config2.default.isGoogleSignIn, google: _config2.default.googleEnable, facebook: _config2.default.facebookEnable });
	}
	
	function getFooter(req, res) {
	  res.json({ message: _config2.default.footer });
	}
	
	// export function logoutUser(req, res) {
	//   checkValidRequest(req.headers, function(person) {
	//     try{
	//       if (person == null) {
	//         res.json({ status: false, error : "Invalid request" });
	//       }
	//       else{
	//         redisutils.removeFromRedis(person.email, function(resp){
	//           res.json({status: true});
	//         });
	//       }
	//     }catch(e){  
	//       console.log(e)
	//       res.json({ status : false, error : "Internal server error." });
	//     }
	//   }) 
	// }

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.NO_CHANGE = exports.SWITCH_LANGUAGE = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports.switchLanguage = switchLanguage;
	exports.loginLanguage = loginLanguage;
	
	var _setup = __webpack_require__(95);
	
	// Export Constants
	var SWITCH_LANGUAGE = exports.SWITCH_LANGUAGE = 'SWITCH_LANGUAGE';
	var NO_CHANGE = exports.NO_CHANGE = 'NO_CHANGE';
	
	/*Use lang to pass current language value to loginLangauge function 
	as it is calling every time islogged in called. */
	var lang = 'en';
	var logintype = 'Conference';
	
	function switchLanguage(newLang, newLoginType, setlocale) {
		console.log("newLang", newLang);
		console.log("newLoginType", newLoginType);
		console.log("setlocale", setlocale);
		lang = newLang;
		logintype = newLoginType;
		(0, _setup.loginLanguageType)(lang, logintype);
		return _extends({
			type: SWITCH_LANGUAGE,
			setlocale: setlocale
		}, _setup.localizationData[lang]);
	}
	
	function loginLanguage(res, setlocale) {
		if (setlocale == null) {
			var loginType = res && res.profile && res.profile.companyid && res.profile.companyid.businessType ? res.profile.companyid.businessType : 'Conference';
			var language = res && res.locale && res.locale.preferedlanguage ? res.locale.preferedlanguage : 'en';
			(0, _setup.loginLanguageType)(language, loginType);
			return _extends({
				type: SWITCH_LANGUAGE,
				setlocale: setlocale
			}, _setup.localizationData[language]);
		} else {
			return {
				type: NO_CHANGE
			};
		}
	}

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.STREAM_RECORD = exports.REMOTE_MUTE = exports.CONF_FEEDBACK_HIDE = exports.CONF_FEEDBACK = exports.UPDATE_ATTENDEES = exports.SET_SCREEN_ENABLE = exports.MIX_STREAM = exports.VIDEO_BWE = exports.VIDEO_RECV = exports.VIDEO_SEND = exports.AUDIO_RECV = exports.AUDIO_SEND = exports.SET_SPEAKER = exports.SET_PRESENTER = exports.TRANSPORT = exports.CLOSE_CONF = exports.SET_ICE = exports.ADD_SCREEN = exports.STREAM_STATS = exports.CREATE_LOG = exports.IM_HOST = exports.ONLY_PR = exports.CODEC = exports.VIDEO_RESOLUTION = exports.NEW_STREAM = exports.CONF_STATUS = exports.ONLINE_USER = exports.ADD_STREAM = exports.ADD_USER = undefined;
	exports.LogIce = LogIce;
	exports.setMixStream = setMixStream;
	exports.StatsAudioSend = StatsAudioSend;
	exports.StatsAudioRecv = StatsAudioRecv;
	exports.StatsVideoSend = StatsVideoSend;
	exports.StatsVideoRecv = StatsVideoRecv;
	exports.StatsVideoBWE = StatsVideoBWE;
	exports.SetPresenter = SetPresenter;
	exports.SetSpeaker = SetSpeaker;
	exports.CloseConf = CloseConf;
	exports.requestIceServer = requestIceServer;
	exports.addScreen = addScreen;
	exports.setStreamStats = setStreamStats;
	exports.setTransport = setTransport;
	exports.setCodec = setCodec;
	exports.addUser = addUser;
	exports.getAttendees = getAttendees;
	exports.updateAttendees = updateAttendees;
	exports.addStream = addStream;
	exports.OnlineStatus = OnlineStatus;
	exports.SetConfStatus = SetConfStatus;
	exports.setVideoResolution = setVideoResolution;
	exports.onlyPresenter = onlyPresenter;
	exports.setImHost = setImHost;
	exports.createLogRequest = createLogRequest;
	exports.LogStatus = LogStatus;
	exports.setScreenEnable = setScreenEnable;
	exports.createGuestAccount = createGuestAccount;
	exports.clearGuestAccount = clearGuestAccount;
	exports.setConfFeedback = setConfFeedback;
	exports.showOrHideConfFeedback = showOrHideConfFeedback;
	exports.RemoteMute = RemoteMute;
	exports.setRecordStream = setRecordStream;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ADD_USER = exports.ADD_USER = 'ADD_USER';
	var ADD_STREAM = exports.ADD_STREAM = 'ADD_STREAM';
	var ONLINE_USER = exports.ONLINE_USER = 'ONLINE_USER';
	var CONF_STATUS = exports.CONF_STATUS = 'CONF_STATUS';
	var NEW_STREAM = exports.NEW_STREAM = 'NEW_STREAM';
	var VIDEO_RESOLUTION = exports.VIDEO_RESOLUTION = 'VIDEO_RESOLUTION';
	var CODEC = exports.CODEC = 'CODEC';
	var ONLY_PR = exports.ONLY_PR = 'ONLY_PR';
	var IM_HOST = exports.IM_HOST = 'IM_HOST';
	var CREATE_LOG = exports.CREATE_LOG = 'CREATE_LOG';
	var STREAM_STATS = exports.STREAM_STATS = 'STREAM_STATS';
	var ADD_SCREEN = exports.ADD_SCREEN = 'ADD_SCREEN';
	var SET_ICE = exports.SET_ICE = 'SET_ICE';
	var CLOSE_CONF = exports.CLOSE_CONF = 'CLOSE_CONF';
	var TRANSPORT = exports.TRANSPORT = 'TRANSPORT';
	var SET_PRESENTER = exports.SET_PRESENTER = 'SET_PRESENTER';
	var SET_SPEAKER = exports.SET_SPEAKER = 'SET_SPEAKER';
	
	var AUDIO_SEND = exports.AUDIO_SEND = 'AUDIO_SEND';
	var AUDIO_RECV = exports.AUDIO_RECV = 'AUDIO_RECV';
	var VIDEO_SEND = exports.VIDEO_SEND = 'VIDEO_SEND';
	var VIDEO_RECV = exports.VIDEO_RECV = 'VIDEO_RECV';
	var VIDEO_BWE = exports.VIDEO_BWE = 'VIDEO_BWE';
	var MIX_STREAM = exports.MIX_STREAM = 'MIX_STREAM';
	var SET_SCREEN_ENABLE = exports.SET_SCREEN_ENABLE = 'SET_SCREEN_ENABLE';
	var UPDATE_ATTENDEES = exports.UPDATE_ATTENDEES = 'UPDATE_ATTENDEES';
	var CONF_FEEDBACK = exports.CONF_FEEDBACK = 'CONF_FEEDBACK';
	var CONF_FEEDBACK_HIDE = exports.CONF_FEEDBACK_HIDE = 'CONF_FEEDBACK_HIDE';
	var REMOTE_MUTE = exports.REMOTE_MUTE = 'REMOTE_MUTE';
	var STREAM_RECORD = exports.STREAM_RECORD = 'STREAM_RECORD';
	/*Conf Data*/
	// var attendees = {};
	
	/* ------------- */
	function LogIce(response) {
		console.log("Ice from xirsys", response);
		return {
			type: SET_ICE,
			ice: response.data
		};
	}
	
	function setMixStream(stream) {
		return {
			type: MIX_STREAM,
			mixstream: stream
		};
	}
	
	function StatsAudioSend(stats) {
		return {
			type: AUDIO_SEND,
			ssrc_audio_send: stats
		};
	}
	
	function StatsAudioRecv(stats) {
		return {
			type: AUDIO_RECV,
			ssrc_audio_recv: stats
		};
	}
	
	function StatsVideoSend(stats) {
		return {
			type: VIDEO_SEND,
			ssrc_video_send: stats
		};
	}
	
	function StatsVideoRecv(stats) {
		return {
			type: VIDEO_RECV,
			ssrc_video_recv: stats
		};
	}
	
	function StatsVideoBWE(stats) {
		return {
			type: VIDEO_BWE,
			VideoBWE: stats
		};
	}
	
	function SetPresenter(uid) {
		return {
			type: SET_PRESENTER,
			uid: uid
		};
	}
	
	function SetSpeaker(uid) {
		return {
			type: SET_SPEAKER,
			uid: uid
		};
	}
	
	function CloseConf() {
		return {
			type: CLOSE_CONF
		};
	}
	
	function requestIceServer() {
		return function (dispatch) {
			return (0, _apiCaller2.default)('getice').then(function (res) {
				return dispatch(LogIce(res));
			});
		};
	}
	
	function addScreen(screenStream) {
		return {
			type: ADD_SCREEN,
			screenStream: screenStream
		};
	}
	
	function setStreamStats(subStreams) {
		return {
			type: STREAM_STATS,
			subStreams: subStreams
		};
	}
	
	function setTransport(transport) {
		return {
			type: TRANSPORT,
			transport: transport
		};
	}
	
	function setCodec(codec) {
		return {
			type: CODEC,
			codec: codec
		};
	}
	
	function addUser(user) {
		// _.assign(attendees, user);
		return {
			type: ADD_USER,
			attendees: user
		};
	}
	
	function getAttendees(roomKey) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('fetch-attendees/' + roomKey, 'get').then(function (res) {
				return dispatch(updateAttendees(res));
			});
		};
	}
	
	function updateAttendees(res) {
		// console.log("attendees------ ", res);
		if (res.status) {
			return {
				type: UPDATE_ATTENDEES,
				status: res.status,
				attendees: res.attendees
			};
		} else {
			return {
				type: UPDATE_ATTENDEES,
				status: res.status
			};
		}
	}
	
	function addStream(stream) {
		return {
			type: ADD_STREAM,
			streams: stream
		};
	}
	
	function OnlineStatus(user) {
		// console.log("OnlineStatus--", user);
		return {
			type: ONLINE_USER,
			onlineStatus: user
		};
	}
	
	function SetConfStatus(status) {
		return {
			type: CONF_STATUS,
			confStatus: status
		};
	}
	
	function setVideoResolution(videoResolution) {
		return {
			type: VIDEO_RESOLUTION,
			videoResolution: videoResolution
		};
	}
	
	function onlyPresenter(status) {
		return {
			type: ONLY_PR,
			onlyPresenter: status
		};
	}
	
	function setImHost(objEntity) {
		// console.log("setImHost", status);
		return {
			type: IM_HOST,
			imHost: objEntity.status,
			hostId: objEntity.hostId
		};
	}
	function createLogRequest(data) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('create-log', 'post', {
				data: data
			}).then(function (res) {
				return dispatch(LogStatus(res));
			});
		};
	}
	
	function LogStatus(response) {
		if (response.status) {
			return {
				type: CREATE_LOG,
				status: response.status
			};
		} else if (response.error) {
			return {
				type: CREATE_LOG,
				status: response.status
			};
		} else {
			return {
				type: CREATE_LOG,
				status: response.status
			};
		}
	}
	
	function setScreenEnable(obj) {
		return {
			type: SET_SCREEN_ENABLE,
			id: obj.id,
			status: obj.status
		};
	}
	
	function createGuestAccount(guestObject) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('create-guest', 'post', {
				guestObject: guestObject
			});
		};
	}
	
	function clearGuestAccount(roomKey) {
		// console.log("roomKey ------------------- ", roomKey);
		return function (dispatch) {
			return (0, _apiCaller2.default)('delete-guest/' + roomKey, 'delete');
		};
	}
	
	function setConfFeedback(objFeedback) {
		console.log("Feedback Status", objFeedback);
		return {
			type: CONF_FEEDBACK,
			confFeedback: objFeedback.message,
			feedbackBlock: objFeedback['status']
		};
	}
	
	function showOrHideConfFeedback(status) {
		return {
			type: CONF_FEEDBACK_HIDE,
			feedbackBlock: status
		};
	}
	
	function RemoteMute(status) {
		return {
			type: REMOTE_MUTE,
			mute_status: status
		};
	}
	
	function setRecordStream(status) {
		return {
			type: STREAM_RECORD,
			record_status: status
		};
	}

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.chatData = undefined;
	
	var _ChatActions = __webpack_require__(30);
	
	var initialState = {
	  edit: false, mygroups: [], individualCount: {}, total: 0, chatType: '', activeData: null, chatData: null
	};
	
	var ChatReducer = function ChatReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	
	    case _ChatActions.MY_GROUPS:
	      {
	        var newstate = {};
	        if (action.data) newstate['mygroups'] = action.data;
	        if (action.edit) newstate['edit'] = action.status;
	        return Object.assign({}, state, newstate);
	      }
	    case _ChatActions.MY_CHATS:
	      {
	        if (action.status) {
	          return Object.assign({}, state, { status: action.status, chatData: action.data });
	        } else {
	          return state;
	        }
	      }
	    case _ChatActions.ROOM_CHATS:
	      {
	        return Object.assign({}, state, { status: action.status, roomData: action.data });
	      }
	    case _ChatActions.CHAT_NOTIFICATION:
	      {
	        /*let prev = state.notifications;
	        if(!prev){
	          prev = {};
	        }
	        prev[action.data.id] = action.data.count;
	        return Object.assign({}, state, { notifications : prev});*/
	        return Object.assign({}, state, { individualCount: action.notifications, total: action.total });
	      }
	    case _ChatActions.CLEAR_CHAT_NOTIFICATION:
	      {
	        var prev = state.individualCount;
	        if (prev) {
	          delete prev[action.id];
	          return Object.assign({}, state, { individualCount: prev, total: 0, activeData: action.activeData, chatType: action.chatType });
	        } else return state;
	      }
	    case _ChatActions.CLEAR_CHAT:
	      {
	        return Object.assign({}, state, { status: action.status, activeData: null, chatType: '' });
	      }
	    default:
	      return state;
	  }
	};
	
	var chatData = exports.chatData = function chatData(state) {
	  return state.chat;
	};
	
	// Export Reducer
	exports.default = ChatReducer;

/***/ },
/* 40 */
/***/ function(module, exports) {

	module.exports = require("bluebird");

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	        value: true
	});
	
	var _slashesActions = __webpack_require__(4);
	
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	
	
	var schema = new mongoose.Schema({
	        businessId: {
	                type: String,
	                required: [true, 'Please enter Business Id'],
	                trim: true,
	                match: [/^[a-zA-Z0-9]+$/, "Please enter valid Business Id"],
	                maxlength: [15, 'Business Id length should be maximum of 15 characters'],
	                set: _slashesActions.addSlash,
	                get: _slashesActions.stripSlash,
	                index: true
	
	        },
	        businessName: {
	                type: String,
	                required: [true, 'Please enter Business Name'],
	                trim: true,
	                match: [/^[a-zA-Z0-9\-\s]+$/, "Please enter valid Business Name"],
	                maxlength: [50, 'Business Name length should be maximum of 50 characters'],
	                set: _slashesActions.addSlash,
	                get: _slashesActions.stripSlash,
	                index: true
	        },
	        businessType: {
	                type: String,
	                enum: ['Conference', 'LMS', 'CRM', 'Presenter'],
	                required: [true, ' Please enter Business Type']
	        },
	        address: {
	                street: {
	                        type: String,
	                        required: [true, 'Please enter Street'],
	                        maxlength: [50, 'Street length should be maximum of 50 characters'],
	                        set: _slashesActions.addSlash,
	                        get: _slashesActions.stripSlash
	
	                },
	                district: {
	                        type: String,
	                        required: [true, 'Please enter District'],
	                        match: [/^[a-zA-Z\-\s]+$/, "Please enter valid District"],
	                        maxlength: [20, 'District length should be maximum of 20 characters'],
	                        set: _slashesActions.addSlash,
	                        get: _slashesActions.stripSlash
	                },
	                state: {
	                        type: String,
	                        required: [true, 'Please enter State'],
	                        match: [/^[a-zA-Z\-\s]+$/, "Please enter valid State"],
	                        maxlength: [20, 'State length should be maximum of 20 characters'],
	                        set: _slashesActions.addSlash,
	                        get: _slashesActions.stripSlash
	                },
	                country: {
	                        type: String,
	                        required: [true, 'Please enter Country'],
	                        match: [/^[a-zA-Z\-\s]+$/, "Please enter valid Country"],
	                        maxlength: [20, 'Country length should be maximum of 20 characters'],
	                        set: _slashesActions.addSlash,
	                        get: _slashesActions.stripSlash
	                },
	                pincode: {
	                        type: String,
	                        required: [true, 'Please enter Pincode'],
	                        match: [/^\d+$/, "Please enter valid Pincode"],
	                        maxlength: [10, 'Pincode length should be maximum of 10 characters'],
	                        set: _slashesActions.addSlash,
	                        get: _slashesActions.stripSlash
	                }
	        },
	        phoneNo: [{
	                type: String,
	                trim: true,
	                required: [true, "Please enter Phone Number"],
	                set: _slashesActions.addSlash,
	                get: _slashesActions.stripSlash,
	                maxlength: [20, 'Phone Number length should be maximum of 20 of characters']
	        }],
	        websiteAddr: {
	                type: String,
	                trim: true,
	                match: [/^(http|https|ftp):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/, "Please enter valid Web Site"],
	                maxlength: [50, 'Web Site length should be maximum of 50 characters '],
	                set: _slashesActions.addSlash,
	                get: _slashesActions.stripSlash
	        },
	        companyStatus: {
	                type: String,
	                enum: ['Active', 'Inactive'],
	                required: [true, 'Please select Company Status']
	
	        },
	        scheduleType: {
	                type: String,
	                enum: ['Calendar', 'Timeslot'],
	                required: [true, 'Please select Schedule Type']
	        },
	        contactDetails: {
	                name: {
	                        type: String,
	                        required: [true, 'Please enter Contact Person Name'],
	                        trim: true,
	                        match: [/^[a-zA-Z\-\s]+$/, "Please enter valid Contact Person Name"],
	                        maxlength: [30, 'Contact Person Name length should be maximum of 30 characters'],
	                        set: _slashesActions.addSlash,
	                        get: _slashesActions.stripSlash
	                },
	                phoneNo: {
	                        type: [String],
	                        required: [true, 'Please enter Contact Phone Number ']
	                        // set : addSlash,
	                        // get : stripSlash
	                        // maxlength: [15, 'Contact Phone Number length should be maximum of 15'] 
	                },
	                email: {
	                        type: String,
	                        required: [true, 'Please enter Contact E-mail'],
	                        trim: true,
	                        lowercase: true,
	                        match: [/^((([a-zA-Z]|[0-9])|([-]|[_]|[.])){2,})+[@](([a-zA-Z0-9])|([-])){2,63}[.](([a-zA-Z0-9]){2,5})$/, "Please enter valid Contact E-mail"],
	                        maxlength: [50, 'Contact E-mail length should be maximum of 30 characters'],
	                        set: _slashesActions.addSlash,
	                        get: _slashesActions.stripSlash
	                }
	        },
	        // licenses : {
	        //         publishLimit : { 
	        //                 type : Number, 
	        //                 default : -1 
	        //         },
	        //         roomLimit : { 
	        //                 type : Number, 
	        //                 default : -1 
	        //         },
	        //         noOfP2P : {
	        //                 type : Number,
	        //                 default : -1
	        //         },
	        //         subscriberLimit : {
	        //                 type : Number,
	        //                 default : -1
	        //         },
	        //         usersLimit : {
	        //                 type : Number,
	        //                 default : -1
	        //         }
	        // },
	        legalDocuments: {
	                panNumber: {
	                        type: String,
	                        trim: true,
	                        match: [/^[a-zA-Z0-9]+$/, "Please enter valid Pan Number"],
	                        maxlength: [10, 'Pan Number length should be maximum of 10 characters'],
	                        set: _slashesActions.addSlash,
	                        get: _slashesActions.stripSlash
	                },
	                tanID: {
	                        type: String,
	                        trim: true,
	                        match: [/^[a-zA-Z0-9]+$/, "Please enter valid Tan Id"],
	                        max: [20, 'Tan Id length should be maximum of 20 characters'],
	                        set: _slashesActions.addSlash,
	                        get: _slashesActions.stripSlash
	                }
	        },
	        createdBy: {
	                type: mongoose.Schema.Types.ObjectId
	                /*required : [true, "Unauthorized user access"]*/
	        },
	        modifiedBy: {
	                type: mongoose.Schema.Types.ObjectId
	                /*required : [true, "Unauthorized user access"]*/
	        },
	        createdAt: {
	                type: Date,
	                /*required : true,*/
	                default: moment().utc().toDate()
	        },
	        modifiedAt: {
	                type: Date,
	                /*required : true,*/
	                default: moment().utc().toDate()
	        }
	
	}, {
	        toObject: { getters: true },
	        toJSON: { getters: true }
	});
	
	var Corporate = mongoose.model('corporate', schema);
	exports.default = Corporate;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Schema = _mongoose2.default.Schema;
	var moment = __webpack_require__(1);
	
	
	var userSchema = new Schema({
	  corporateId: {
	    type: String
	  },
	  questionnaireName: {
	    type: String,
	    required: [true, "Please enter Questionnaire Name"],
	    maxlength: [50, 'Questionnaire Name length should be maximum of 50 characters'],
	    trim: true,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash,
	    index: true
	  },
	  description: {
	    type: String,
	    required: [true, "Please enter Description"],
	    maxlength: [150, 'Description length should be maximum of 150 characters'],
	    trim: true,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  //Commented the set and get for bug#3023(By: Prateek)
	  questions: [{
	    question: {
	      type: Array,
	      maxlength: [1000, 'Question length should be maximum of 300 characters'],
	      trim: true
	      // set : addSlash,
	      //get : stripSlash
	    },
	    questionType: {
	      type: String,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    answers: {
	      type: Array
	    },
	    options: {
	      type: Array
	    },
	    swots: {
	      type: Array
	    },
	    marks: {
	      type: Number
	    }
	  }],
	  createdBy: {
	    type: _mongoose2.default.Schema.Types.ObjectId
	  },
	  modifiedBy: {
	    type: _mongoose2.default.Schema.Types.ObjectId
	  },
	  createdAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  },
	  modifiedAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  }
	}, {
	  toObject: { getters: true },
	  toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('Questionnaire', userSchema);

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _slashesActions = __webpack_require__(4);
	
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	
	
	var schema = new mongoose.Schema({
	    meetingName: {
	        type: String,
	        required: [true, 'Please select Meeting name'],
	        trim: true,
	        match: [/^[a-zA-Z0-9\-\s]+$/, "Please enter valid Meeting Name"],
	        maxlength: [30, 'Meeting Name length should be maximum of 30 characters'],
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash,
	        index: true
	    },
	    roomId: {
	        type: mongoose.Schema.Types.ObjectId,
	        required: [true, 'Please Select Room Name'],
	        ref: 'Room'
	    },
	    topicId: {
	        type: String,
	        ref: 'Topic'
	    },
	    dates: [{
	        _id: {
	            type: mongoose.Schema.Types.ObjectId,
	            auto: true
	        },
	        startTime: {
	            type: Number
	        },
	        endTime: {
	            type: Number
	        }
	    }],
	    pattern: {
	        type: String,
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash
	    },
	    startDate: {
	        type: Number,
	        required: [true, 'Please Select Start Date']
	    },
	    endDate: {
	        type: Number,
	        required: [true, 'Please Select End Date']
	    },
	    duration: {
	        type: Number,
	        required: [true, 'Please Select duration']
	    },
	    password: {
	        type: String,
	        trim: true,
	        set: _slashesActions.addSlash,
	        get: _slashesActions.stripSlash
	    },
	    createdBy: {
	        type: mongoose.Schema.Types.ObjectId,
	        ref: 'Users'
	        /*required : [true, "Unauthorized user access"]*/
	    },
	    modifiedBy: {
	        type: mongoose.Schema.Types.ObjectId,
	        ref: 'Users'
	        /*required : [true, "Unauthorized user access"]*/
	    },
	    createdAt: {
	        type: Date,
	        /*required : true,*/
	        default: Number(moment().utc().format('x'))
	    },
	    modifiedAt: {
	        type: Date,
	        /*required : true,*/
	        default: Number(moment().utc().format('x'))
	    }
	
	}, {
	    toObject: { getters: true },
	    toJSON: { getters: true }
	});
	
	var Schedule = mongoose.model('schedule', schema);
	exports.default = Schedule;

/***/ },
/* 44 */
/***/ function(module, exports) {

	module.exports = require("async");

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ToastMessage = exports.ToastContainer = undefined;
	
	var _ToastContainer = __webpack_require__(183);
	
	var _ToastContainer2 = _interopRequireDefault(_ToastContainer);
	
	var _ToastMessage = __webpack_require__(96);
	
	var _ToastMessage2 = _interopRequireDefault(_ToastMessage);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.ToastContainer = _ToastContainer2.default;
	exports.ToastMessage = _ToastMessage2.default;

/***/ },
/* 46 */
/***/ function(module, exports) {

	"use strict";
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var Roles = exports.Roles = {
		Superadmin: 1,
		Admin: 2,
		Moderator: 3,
		// Presenter : 4,
		User: 4,
		Guest: 5,
		Lmsadmin: 12,
		Instructor: 13,
		Student: 14,
		Parent: 15,
		CRMadmin: 22,
		CRMuser: 23,
		Presenteradmin: 31,
		Presenter: 32,
		Attendee: 33
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.codecDetails = exports.conferenceDetails = undefined;
	
	var _ConferenceActions = __webpack_require__(38);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var initialState = {
	  attendees: [], streams: [], confData: {}, onlineStatus: [], confStatus: 0,
	  videoResolution: 'vga', codec: 'vp8', roomSuccess: false,
	  onlyPresenter: false, imHost: false, subStreams: [], screenStream: null, iceServers: null,
	  transport: 'all', hostId: '',
	  presenter: '', speaker: '', mixStream: {}, confStatusMessage: '', feedbackBlock: 0, remoteMute: false
	};
	/*
	  confStatus: 1 - Presenter, 2 - Conference, 3 - Telepresence
	*/
	
	var ConferenceReducer = function ConferenceReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _ConferenceActions.ADD_USER:
	      return Object.assign({}, state, { attendees: action.attendees });
	    case _ConferenceActions.ADD_STREAM:
	      return Object.assign({}, state, { streams: action.streams });
	    case _UserDashboardActions.CONF_DATA:
	      return Object.assign({}, state, { confData: action.data,
	        roomSuccess: action.roomSuccess,
	        confStatus: action.data && action.data.businessType == 'LMS' ? 1 : action.data && action.data.businessType == 'Conference' ? 2 : 1,
	        codec: action.data && action.data.codec ? action.data.codec : 'vp8' });
	    case _ConferenceActions.ONLINE_USER:
	      return Object.assign({}, state, { onlineStatus: action.onlineStatus });
	    case _ConferenceActions.CONF_STATUS:
	      return Object.assign({}, state, { confStatus: action.confStatus });
	    case _ConferenceActions.VIDEO_RESOLUTION:
	      return Object.assign({}, state, { videoResolution: action.videoResolution });
	    case _ConferenceActions.CODEC:
	      return Object.assign({}, state, { codec: action.codec });
	    case _ConferenceActions.TRANSPORT:
	      return Object.assign({}, state, { transport: action.transport });
	    case _ConferenceActions.ONLY_PR:
	      return Object.assign({}, state, { onlyPresenter: action.onlyPresenter });
	    case _ConferenceActions.IM_HOST:
	      return Object.assign({}, state, { imHost: action.imHost, hostId: action.hostId });
	    case _ConferenceActions.STREAM_STATS:
	      return Object.assign({}, state, { subStreams: action.subStreams });
	    case _ConferenceActions.ADD_SCREEN:
	      return Object.assign({}, state, { screenStream: action.screenStream });
	    case _ConferenceActions.SET_PRESENTER:
	      return Object.assign({}, state, { presenter: action.uid });
	    case _ConferenceActions.SET_SPEAKER:
	      return Object.assign({}, state, { speaker: action.uid });
	    case _ConferenceActions.SET_ICE:
	      return Object.assign({}, state, { iceServers: action.ice.d.iceServers });
	    case _ConferenceActions.MIX_STREAM:
	      return Object.assign({}, state, { mixStream: action.mixstream });
	    case _ConferenceActions.CLOSE_CONF:
	      return Object.assign({}, state, { attendees: [], streams: [], confData: {}, onlineStatus: [], confStatus: 0,
	        roomSuccess: false, onlyPresenter: false, imHost: false, subStreams: [],
	        screenStream: null, iceServers: null, presenter: '', speaker: '', hostId: '' });
	    case _ConferenceActions.SET_SCREEN_ENABLE:
	      var attendees = state.attendees;
	      var index = _.findIndex(attendees, { 'id': action.id });
	      attendees[index]['screenEnable'] = action.status;
	      return Object.assign({}, state, { attendees: attendees });
	    case _ConferenceActions.UPDATE_ATTENDEES:
	      if (action.status) {
	        var newConfData = state.confData;
	        newConfData["users"] = action.attendees;
	        return Object.assign({}, state, { confData: newConfData });
	      } else {
	        return state;
	      }
	    case _ConferenceActions.CONF_FEEDBACK:
	      console.log("Feedback Block - 1", action);
	      return Object.assign({}, state, { confStatusMessage: action.confFeedback, feedbackBlock: action.feedbackBlock });
	    case _ConferenceActions.CONF_FEEDBACK_HIDE:
	      return Object.assign({}, state, { feedbackBlock: action.feedbackBlock });
	    case _ConferenceActions.REMOTE_MUTE:
	      return Object.assign({}, state, { remoteMute: action.mute_status });
	    case _ConferenceActions.STREAM_RECORD:
	      return Object.assign({}, state, { isRecording: action.record_status });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	
	var conferenceDetails = exports.conferenceDetails = function conferenceDetails(state) {
	  return state.conference;
	};
	var codecDetails = exports.codecDetails = function codecDetails(state) {
	  return state.conference.codec;
	};
	// Export Reducer
	exports.default = ConferenceReducer;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Schema = _mongoose2.default.Schema;
	var moment = __webpack_require__(1);
	
	var dataLog = new Schema({
	  uid: {
	    type: _mongoose2.default.Schema.Types.ObjectId,
	    ref: 'Users',
	    required: true
	  },
	  category: {
	    type: String,
	    required: true
	  },
	  action: {
	    type: String,
	    required: true
	  },
	  label: {
	    type: String,
	    required: false
	  },
	  value: {
	    type: Object,
	    required: false
	  },
	  dateAdded: {
	    type: Date,
	    default: moment().utc().toDate(),
	    required: true
	  }
	});
	
	exports.default = _mongoose2.default.model('dataLog', dataLog);

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Schema = _mongoose2.default.Schema;
	var moment = __webpack_require__(1);
	
	var logSchema = new Schema({
	  uid: {
	    type: _mongoose2.default.Schema.Types.ObjectId,
	    ref: 'Users',
	    required: true
	  },
	  logType: {
	    type: String,
	    required: true
	  },
	  actionType: {
	    type: String,
	    required: true
	  },
	  actionTime: {
	    type: Date,
	    required: true
	  },
	  details: {
	    type: Object,
	    required: true
	  }
	});
	
	exports.default = _mongoose2.default.model('Logger', logSchema);

/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = require("multer");

/***/ },
/* 51 */
/***/ function(module, exports) {

	module.exports = require("request");

/***/ },
/* 52 */
/***/ function(module, exports) {

	module.exports = require("react-bootstrap/lib/Modal");

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.workDashboardData = undefined;
	
	var _initialState;
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var initialState = (_initialState = {
	  syncCurrent: '', current: '', topicContent: false, conductQuestion: false,
	  pdfView: false, handraiseCount: 0, roomCount: 0, handraiseupdates: false,
	  uid: '', roomKey: '', sync: false, ssPdfView: false, ssUploadedby: '', pdfFileName: '', ssNotification: false,
	  submissionList: false, pollReports: false, ScreenExtInstalled: false, shareRequestId: '',
	  showButtons: true, selfShare: false, roomId: '', roomName: '', whiteBoardData: null,
	  topicList: false, topiclistData: {}, tid: '', topicContentDataDetails: {}, topicFileData: {}, topicPdfFileData: {},
	  questionnaireId: '', questionnaireName: '', questionsData: {}, submittedData: {}, answerData: {}, fileId: '',
	  pollContent: false, pollList: true, createPoll: false, pollListData: {}, pollContentData: {}, pollContentIndex: null,
	  assignmentContent: false, assignmentData: {}, assignmentList: true, assignmentContentData: {}, assignmentContentIndex: null
	}, _defineProperty(_initialState, 'showButtons', true), _defineProperty(_initialState, 'selfShare', false), _defineProperty(_initialState, 'roomId', ''), _defineProperty(_initialState, 'roomName', ''), _defineProperty(_initialState, 'whiteBoardData', null), _defineProperty(_initialState, 'filestatus', false), _defineProperty(_initialState, 'fileData', null), _defineProperty(_initialState, 'waitforview', false), _defineProperty(_initialState, 'screenplay', true), _initialState);
	
	var WorkDashboardReducer = function WorkDashboardReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _WorkDashboardActions.UPDATE_WORKDASHBOARD:
	      return Object.assign({}, state, action.data);
	    case _WorkDashboardActions.CLEAR_WORKDASHBOARD:
	      return Object.assign({}, state, initialState);
	    case _WorkDashboardActions.FETCHED_CONFERENCE_TOPIC_QUESTIONS:
	      if (action.questionsData || submittedData) {
	        return Object.assign({}, state, { questionsData: action.questionsData, submittedData: action.submittedData });
	      } else {
	        return state;
	      }
	    case _WorkDashboardActions.ANSWERS_SUBMITTED:
	      if (action.data) {
	        return Object.assign({}, state, { answerData: action.data });
	      } else {
	        return state;
	      }
	    case _WorkDashboardActions.FETCHED_CONFERENCE_POLL:
	      if (action.data) {
	        return Object.assign({}, state, { pollListData: action.data });
	      } else {
	        return state;
	      }
	    case _WorkDashboardActions.POLL_PUBLISH:
	      if (action.data) {
	        return Object.assign({}, state, { pollListData: action.data });
	      } else {
	        return state;
	      }
	    case _WorkDashboardActions.POLL_CREATED:
	      if (action.data) {
	        return Object.assign({}, state, { pollListData: action.data });
	      } else {
	        return state;
	      }
	    case _WorkDashboardActions.POLL_ANSWER_SUBMITTED:
	      if (action.data) {
	        return Object.assign({}, state, { pollListData: action.data });
	      } else {
	        return state;
	      }
	    case _WorkDashboardActions.DELETE_POLL:
	      if (action.data) {
	        return Object.assign({}, state, { pollListData: action.data });
	      } else {
	        return state;
	      }
	    case _WorkDashboardActions.FETCHED_CONFERENCE_ASSIGNMENT:
	      if (action.data) {
	        return Object.assign({}, state, { assignmentData: action.data });
	      } else {
	        return state;
	      }
	    case _WorkDashboardActions.UPDATE_ASSIGNMENT_DATA:
	      return Object.assign({}, state, { assignmentData: action.data });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var workDashboardData = exports.workDashboardData = function workDashboardData(state) {
	  return state.workDashboard;
	};
	
	// Export Reducer
	exports.default = WorkDashboardReducer;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.saveUser = saveUser;
	exports.createUserCallback = createUserCallback;
	exports.updateUser = updateUser;
	exports.packageSelector = packageSelector;
	exports.checkUsersCount = checkUsersCount;
	exports.checkhaveAdmin = checkhaveAdmin;
	exports.checkforUniqueStudentId = checkforUniqueStudentId;
	exports.newUser = newUser;
	exports.updateProfile = updateProfile;
	exports.viewUser = viewUser;
	exports.viewUserProfile = viewUserProfile;
	exports.getUserLocaleData = getUserLocaleData;
	exports.fetchUser = fetchUser;
	exports.getProfileImage = getProfileImage;
	exports.getRoles = getRoles;
	exports.getRolesUpdate = getRolesUpdate;
	exports.paymentData = paymentData;
	exports.saveUserAddress = saveUserAddress;
	exports.createWorkPlace = createWorkPlace;
	exports.getWorkEduData = getWorkEduData;
	exports.deleteWorkPlace = deleteWorkPlace;
	exports.saveUserWebsite = saveUserWebsite;
	exports.saveUserSocialLink = saveUserSocialLink;
	exports.saveUserBasicInfo = saveUserBasicInfo;
	exports.createCollege = createCollege;
	exports.deleteCollege = deleteCollege;
	exports.createSchool = createSchool;
	exports.deleteSchool = deleteSchool;
	exports.createSkills = createSkills;
	exports.deleteAddress = deleteAddress;
	exports.deleteWebsite = deleteWebsite;
	exports.deleteProfessionalSkills = deleteProfessionalSkills;
	exports.deleteSocialLink = deleteSocialLink;
	exports.deleteBirthDay = deleteBirthDay;
	exports.deleteGender = deleteGender;
	exports.updateLocaleSettings = updateLocaleSettings;
	exports.changePassword = changePassword;
	exports.resetPassword = resetPassword;
	exports.getLogs = getLogs;
	exports.removeProfileImage = removeProfileImage;
	exports.getUserData = getUserData;
	exports.setAndroidId = setAndroidId;
	exports.getRooms = getRooms;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _corporate = __webpack_require__(41);
	
	var _corporate2 = _interopRequireDefault(_corporate);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _package = __webpack_require__(25);
	
	var _package2 = _interopRequireDefault(_package);
	
	var _logger = __webpack_require__(49);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _cuid = __webpack_require__(26);
	
	var _cuid2 = _interopRequireDefault(_cuid);
	
	var _limax = __webpack_require__(27);
	
	var _limax2 = _interopRequireDefault(_limax);
	
	var _sanitizeHtml = __webpack_require__(28);
	
	var _sanitizeHtml2 = _interopRequireDefault(_sanitizeHtml);
	
	var _md = __webpack_require__(31);
	
	var _md2 = _interopRequireDefault(_md);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	var _login = __webpack_require__(36);
	
	var LoginController = _interopRequireWildcard(_login);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForUserCreation = _interopRequireWildcard(_emailFunctions);
	
	var _datalog = __webpack_require__(55);
	
	var _slashesActions = __webpack_require__(4);
	
	var _randomstring = __webpack_require__(35);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7);
	var fs = __webpack_require__(23);
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	var validator = __webpack_require__(12);
	
	// export function saveLog(req, res){
	// 	// console.log(req.headers);
	// 	// console.log(req.body.data);
	// 	var objLog = req.body.data;
	// 	objLog.uid = mongoose.Types.ObjectId(objLog.uid);
	// 	//Creates new log
	//   	var objEntity = new dataLog(objLog);
	// 	objEntity.save(function (err, doc) {
	// 	  if (err) {
	// 	    console.log(err)
	// 	    // callback(false);
	// 	  } else {
	// 	    // callback(true);
	// 	  }
	// 	});
	// }
	
	/**
	* @Function Name: "saveUser",
	* @Purpose: "To save and user data into user document.",
	* @Request Object: userdata : { uid : "userID" },
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function saveUser(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				//console.log("person data", person);
				//Verifying if request is valid or not
				if (person == null || !req.body.userdata) {
					res.json({ status: false, error: "Invalid request" });
				} else {
	
					//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
					var bussinessID = null;
					if (person.profile.companyid && person.profile.companyid._id) {
						bussinessID = person.profile.companyid._id;
					}
					var userObject = req.body.userdata;
					// let mail = userObject.email;
					userObject["email"] = userObject.email ? userObject.email.toLowerCase() : userObject.email;
					if (userObject.from && userObject.from == "PORTAL") {
	
						//user creating from portal
						if (userObject.password != '') {
							var slashsPassword = (0, _slashesActions.addSlash)(userObject.password);
							userObject["password"] = (0, _md2.default)(slashsPassword);
						} else {
							delete userObject["password"];
						}
						userObject["dateAdded"] = moment().utc().toDate();
						userObject["createdby"] = "self";
						userObject["modifiedby"] = "self";
						userObject["role"] = 2;
						delete userObject['from'];
	
						//Create new user.
						newUser(userObject, function (newErr, newUser) {
							if (newErr != null) {
								res.json({ status: false, error: newErr });
							} else {
	
								//Check whether the user is present or not.
								_users2.default.findOne({ _id: newUser._id }, function (saveError, doc) {
									if (saveError) {
										//console.log(error);
										res.json({ status: false, error: saveError });
									} else {
										doc.modifiedby = mongoose.Types.ObjectId(doc._id);
										doc.createdby = mongoose.Types.ObjectId(doc._id);
										doc.save();
										res.json({ status: true, data: doc, message: "Created successfully." });
									}
								});
							}
						});
					} else {
	
						//Verifying if user has a valid role
						if ((person.role == _adminUser.Roles.Superadmin || bussinessID == userObject["profile.companyid"] && (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.CRMadmin)) && person.role < userObject.role) {
							createUserCallback(userObject, person.role, function (usererr, userData) {
								if (userData) {
									res.json({ status: true, data: userData.data, message: userData.message });
								} else if (usererr) {
									res.json({ status: false, error: usererr });
								} else {
									res.json({ status: false, error: "Internal server error, Please try again" });
								}
							});
						} else {
							res.json({ status: false, error: "Access denied." });
						}
					}
				}
			} catch (e) {
				console.log("Error in save user", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	function createUserCallback(userObject, role, cb) {
	
		try {
			if (userObject.password != '') {
				var slashsPassword = (0, _slashesActions.addSlash)(userObject.password);
				userObject["password"] = (0, _md2.default)(slashsPassword);
			} else {
				delete userObject["password"];
			}
			userObject["dateAdded"] = moment().utc().toDate();
			userObject["createdby"] = userObject.uid;
			userObject["modifiedby"] = userObject.uid;
			delete userObject["uid"];
			var cid = userObject["profile.companyid"];
			checkUsersCount(userObject.createdby, role, userObject.role, cid, null, function (status, count) {
				if (status == true) {
					checkhaveAdmin(cid, userObject.role, null, function (checkerr, checkres) {
						if (checkerr != null) {
							// console.log("checkerr === ", checkerr);
							cb(checkerr, null);
							// res.json({ status: false, error : checkerr });
						} else if (checkres != false) {
							var msg = "Multiple admin not allowed, " + checkres + " is already assigned to this corporate";
							cb(msg, null);
							// res.json({ status: false, error : msg });
						} else if (checkres == false) {
	
							checkforUniqueStudentId(cid, userObject.role, userObject.studentId, null, function (err, uniqueStatus) {
								if (err) {
									// console.log("err === ", err);
									var errmsg = err.message ? err.message : err;
									cb(errmsg, null);
									/*res.json({
	        	status : false,
	        	error : errmsg
	        });*/
								} else if (uniqueStatus == true) {
	
									//Creating user based role permission
									newUser(userObject, function (newErr, newUser) {
										if (newErr != null) {
											// console.log("newErr === ", newErr);
											cb(newErr, null);
											// res.json({ status: false, error: newErr });
										} else {
											var resData = {
												data: newUser,
												message: "Created successfully."
											};
											cb(null, resData);
											// res.json({ status: true, data: newUser, message : "Created successfully." });
	
											//Verifying the user details based created roles
											_users2.default.findOne({ _id: mongoose.Types.ObjectId(userObject.createdby) }, function (err, name) {
												if (name && name.email) {
													var fname = name.firstname ? name.firstname : '';
													var lname = name.lastname ? name.lastname : '';
	
													var randomstring = '';
	
													//Function call for creating randomstring
													(0, _randomstring.createRandomString)(function (data) {
														randomstring = data;
													});
	
													var resetPasswordExpires = Date.now() + 86400000; //24 hour 
	
													var exchangeData = {
														to: newUser.email,
														whoCreated: name.email,
														subject: 'User Created',
														body: '<span style="margin-top: 30px; font-size: 14px;">' + 'Hello ' + newUser.firstname + '</span>,' + '<br><br>' + 'Username : ' + newUser.email + '<br><br>' + ' Please sign in using registered password. To sign in,' + '<a href="http://' + _config2.default.domin + '/" > click here </a> ' + '<br><br> To reset the password,' + '<a href="http://' + _config2.default.domin + '/resetPassword/' + (0, _md2.default)(randomstring) + '"> click here.</a>'
	
														//Email will be sent to user after creating user successfully
													};EmailForUserCreation.createuserAndResetpassword(exchangeData, function (emailerror, emailsuccess) {
														if (emailerror.status == false) {
															cb("Reset can not done at the moment. Try after some time", null);
															// res.json({ status: false, error : 'Reset can not done at the moment. Try after some time' });
														} else {
															_users2.default.update({ email: newUser.email }, { $set: { passwordToken: (0, _md2.default)(randomstring), resetPasswordExpires: resetPasswordExpires } }, function (err, numberAffected) {
																if (err) {
																	// res.json({ status: false, error : err });
																	console.log('error in Reset password link ');
																} else {
																	console.log('Reset password link has been sent to user email ');
	
																	// res.json({ status: true, message : "Reset password link has been sent to user email" });
																	//console.log('inserted token for password')
																}
															});
														}
													});
	
													// //Log obj which need to be inserted in logger collection
													// let logObj = {
													// 	logType : 'User',
													// 	actionType : 'Created',
													// 	actionTime : moment().utc().toDate(),
													// 	uid : userObject.createdby,
													// 	details : {
													// 		name : userObject.firstname,
													// 		companyId : cid,
													// 		remoteAddress : req.connection.remoteAddress,
													// 		userAgent : req.headers['user-agent']
													// 	}
													// } 
	
													// //Function for creating log on successful creation of user
													// createLog(logObj, function(status) {
													// if (status) {
													// // console.log(status);
													// 	}
													// });
												} else {
													cb("user not found while sending mail", null);
													// res.json({ status: false, error: " user not found while sending mail"});
												}
											});
										}
									});
								}
							});
						}
					});
				} else {
					// console.log("status ==== ", status);
					// res.json({ status : false, error : status});
					cb(status, null);
				}
			});
		} catch (e) {
			console.log('error in createUserCallback', e);
			cb("Internal server error, Please try again", null);
		}
	}
	
	/**
	*  @Function name : updateUser
	*  @Purpose : For updating user
	*  @Request Object : userdata :  { uid : "user id" } 
	*  @Response Object : Success - Success message, user data, Failure - Error message
	*  @Author : "Jyothi"
	*/
	
	function updateUser(req, res) {
	
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
	
				//Verifying if request is valid or not
				if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id) || !req.body || !req.body.userdata) {
					res.json({ status: false, error: "Invalid request" });
				} else {
					var userObject = req.body.userdata;
					var bussinessID = person.profile && person.profile.companyid && person.profile.companyid._id ? person.profile.companyid._id : '';
	
					//Verifying whether the user has permission or not
					if ((person.role == _adminUser.Roles.Superadmin || bussinessID == userObject["profile.companyid"] && (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.CRMadmin)) && person.role < userObject.role) {
						var recordId = mongoose.Types.ObjectId(req.params.id);
	
						//Fetching the details of user.
						_users2.default.findOne({ _id: recordId }).exec(function (err, data) {
							if (err) {
								res.json({
									status: false,
									error: err.message
								});
							} else if (data) {
								_users2.default.findOne({ _id: { $ne: mongoose.Types.ObjectId(req.params.id) }, email: userObject.email }, function (err, doc) {
									if (err) {
										res.json({ status: false, error: err.message });
									} else if (doc) {
										res.json({ status: false, error: "Email already existed." });
									} else {
	
										userObject["modifiedby"] = person._id;
										userObject["modifiedAt"] = moment().utc().toDate();
										delete userObject["uid"];
										delete userObject["_id"];
	
										var cid = userObject["profile.companyid"];
										checkhaveAdmin(cid, userObject.role, recordId, function (checkerr, checkres) {
											if (checkerr != null) {
												res.json({ status: false, error: checkerr });
											} else if (checkres != false) {
												var msg = "Multiple admin not allowed, " + checkres + " is already assigned to this corporate";
												res.json({ status: false, error: msg });
											} else if (checkres == false) {
	
												checkforUniqueStudentId(cid, userObject.role, userObject.studentId, req.params.id, function (err, uniqueStatus) {
													if (err) {
														var message = err.message ? err.message : err;
														res.json({
															status: false,
															error: message
														});
													} else if (uniqueStatus == true) {
	
														//If data is present then Update user details
														_users2.default.update({ _id: recordId }, { $set: userObject }, { runValidators: true }, function (e, result) {
															if (e) {
																res.json({ status: false, error: e.message });
															} else {
																var query = _users2.default.findOne({ _id: recordId });
																query.exec(function (error, data) {
																	if (error) {
																		res.json({ status: false, error: error.message });
																	} else {
																		//console.log('data', data);
																		(0, _datalog.LogUserModule)(userObject.modifiedby, recordId, 'update');
																		res.json({ status: true, data: data, message: "Updated successfully." });
																	}
																});
															}
														});
													}
												});
											}
										});
									}
								});
							} else res.json({ status: false, error: "Invalid user." });
						});
					} else res.json({ status: false, error: "Access denied." });
				}
			} catch (e) {
				console.log('error in update user...', e);
				res.json({ status: false, error: "Internal server error" });
			}
		});
	}
	
	/**
	*  @Function name : packageSelector
	*  @Purpose : For fetch packages selector based on role
	*  @Request Object : uid : userId, role : role, cid : corporateId, cb : callback 
	*  @Response Object : Success - selector Failure - null
	*  @Author : "Prudhvi"
	*/
	function packageSelector(uid, role, cid, cb) {
		try {
			if (role == _adminUser.Roles.Superadmin) {
				var query = _users2.default.findOne({ "profile.companyid": cid, $or: [{ role: _adminUser.Roles.Admin }, { role: _adminUser.Roles.Lmsadmin }, { role: _adminUser.Roles.CRMadmin }, { role: _adminUser.Roles.Presenteradmin }] }).select('_id');
				query.exec(function (error, user) {
					if (user) cb({ assignedTo: user._id });else cb(null);
				});
			} else if (role == _adminUser.Roles.Admin || role == _adminUser.Roles.Lmsadmin || role == _adminUser.Roles.CRMadmin || role == _adminUser.Roles.Presenteradmin) {
				cb({ assignedTo: uid });
			} else {
				cb(null);
			}
		} catch (e) {
			console.log("error in packageSelector", e.message);
			cb(null);
		}
	}
	
	/**
	*  @Function name : checkUsersCount
	*  @Purpose : To check users count while create or update the user
	*  @Request Object : uid : userId, role : curent User role, newRole : new user role, cid : corporateId, cb : callback 
	*  @Response Object : Success - true, count Failure - Error message, count : 0
	*  @Author : "Prudhvi"
	*/
	function checkUsersCount(uid, role, newRole, cid, status, cb) {
		try {
			if (newRole == _adminUser.Roles.Admin || newRole == _adminUser.Roles.Lmsadmin || newRole == _adminUser.Roles.CRMadmin || newRole == _adminUser.Roles.Presenteradmin) {
				cb(true, -1);
			} else {
				packageSelector(uid, role, cid, function (selector) {
					if (selector != null) {
						var query = _package2.default.find(selector);
						query.exec(function (err, result) {
							if (result && result.length > 0) {
								var c = 0;
								for (var i = 0; i < result.length; i++) {
									if (result[i].userCount == -1 || c == -1) {
										c = -1;
										break;
									} else {
										c += result[i].userCount;
									}
								}
								if (c == -1) cb(true, -1);else {
									var checkStatus = ['Active'];
									if (status != null && (status == "Deleted" || status == "Registered")) {
										checkStatus.push('Blocked');
									}
									_users2.default.count({ "profile.companyid": cid, guest: false, userStatus: { $in: checkStatus } }, function (error, count) {
										if (error) cb("Internal server error, Please try again", 0);else if (count < c || count == 0) cb(true, c - count);else if (count >= c) cb("You can't create new user, limit has been exceeded", c - count);
									});
								}
							} else if (result && result.length == 0) {
								cb("You are not subscribed to any package, Please contact administrator", 0);
							} else {
								cb("Internal server error, Please try again", 0);
							}
						});
					} else cb("Please create admin account first", 0);
				});
			}
		} catch (e) {
			console.log("e in checkUsersCount === ", e.message);
			cb("Internal server error, Please try again");
		}
	}
	
	/**
	*  @Function name : checkhaveAdmin
	*  @Purpose : To check admin is there for that corporate while create or update the user
	*  @Request Object : uid : userId, role : curent User role, newRole : new user role, cid : corporateId, cb : callback 
	*  @Response Object : Success - null, with admin first name Failure - Error message, false
	*  @Author : "Prudhvi"
	*/
	function checkhaveAdmin(cid, role, uid, cb) {
		try {
			var selector = null;
			if (role == _adminUser.Roles.Admin) selector = { role: _adminUser.Roles.Admin };else if (role == _adminUser.Roles.Lmsadmin) selector = { role: _adminUser.Roles.Lmsadmin };else if (role == _adminUser.Roles.Presenteradmin) selector = { role: _adminUser.Roles.Presenteradmin };else if (role == _adminUser.Roles.CRMadmin) selector = { role: _adminUser.Roles.CRMadmin };else cb(null, false);
			if (selector != null) {
				selector["profile.companyid"] = cid;
				selector["userStatus"] = "Active";
				selector["_id"] = { $ne: uid };
				var query = _users2.default.findOne(selector);
				query.exec(function (err, result) {
					if (err) {
						cb(err, null);
					} else if (result) {
						// console.log("result === ",result);
						cb(null, result.firstname);
					} else {
						cb(null, false);
					}
				});
			}
		} catch (e) {
			console.log("e in checkhaveAdmin === ", e.message);
			cb("Internal server error, Please try again", null);
		}
	}
	
	/**
	*  @Function name : checkforUniqueStudentId
	*  @Purpose : To check studentId is unique for that corporate while create or update the user
	*  @Request Object : cid : corporateId, role : role, sid : studentId, cb : callback 
	*  @Response Object : Success - true, Failure - Error message, false
	*  @Author : "Prateek"
	*/
	function checkforUniqueStudentId(cid, role, sid, uid, cb) {
	
		try {
			if (role == _adminUser.Roles.Student && sid != '') {
				var selector = {};
				selector["profile.companyid"] = cid;
				selector["studentId"] = sid;
				if (uid != null) {
					selector['_id'] = { $ne: mongoose.Types.ObjectId(uid) };
				}
				var query = _users2.default.find(selector);
				query.exec(function (err, result) {
					if (err) {
						cb(err, null);
					} else if (result) {
						// console.log("result === ",result);
						if (result.length < 1) {
							cb(null, true);
						} else {
							cb("Student Id already exists,Please try again", null);
						}
					}
				});
			} else {
				cb(null, true);
			}
		} catch (e) {
			console.log('error in checkforUniqueStudentId ', e);
			cb("Internal server error, Please try again", null);
		}
	}
	
	/**
	*  @Function name : newUser
	*  @Purpose : For creating new user
	*  @userObject : userObject: {'user data'}
	*  @cb : Success - User data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function newUser(userObject, cb) {
	
		try {
	
			//Query for checking if user is present with same email in database
			// console.log('User Create');
			_users2.default.findOne({
				email: userObject.email
			}, function (err, doc) {
				if (err) {
					cb(err, null);
				} else if (doc) {
	
					//If present send the error
					cb("Email already exists.", null);
				} else {
					var objUser = new _users2.default(userObject);
	
					//Query for creating new user
					_users2.default.create([objUser], function (error, data) {
						if (!error) {
							console.log('Trying to log user');
							if (userObject["createdby"] != "self") {
								(0, _datalog.LogUserModule)(mongoose.Types.ObjectId(userObject.createdby), data[0]._id, 'create');
							}
							cb(null, data[0]);
						} else {
							cb(error, null);
						}
					});
				}
			});
		} catch (e) {
			console.log('error in newUser', e);
			cb("Internal server error, Please try again", null);
		}
	}
	
	/**
	*  @Function name : updateProfile
	*  @Purpose : For updating user profile data
	*  @Request Object : profiledata: { data: { _id : "user id" }}
	*  @Response Object : Success - User data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function updateProfile(req, res) {
		//console.log("inside update profile", req.body.profiledata.data);
	
		//Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			//console.log("person details", person);
			try {
				if (person != null && req.body.profiledata.data) {
					var userObject = req.body.profiledata.data;
	
					//Query for checking if user is present with same email in database
					var uid = mongoose.Types.ObjectId(userObject._id);
					_users2.default.findOne({
						_id: {
							$ne: person._id
						},
						email: userObject.email
					}, function (e, data) {
						if (e) {
							res.json({
								status: false,
								error: e.message
							});
						} else if (data) {
							//console.log("data === ",data);
							res.json({
								status: false,
								error: "Email already existed."
							});
						} else {
	
							//Query for updating user profile data based on user id
							_users2.default.update({
								_id: person._id
							}, {
								$set: {
									firstname: userObject.firstname,
									lastname: userObject.lastname,
									email: userObject.email,
									"profile.aboutme": userObject['profile.aboutme'],
									"profile.phone": userObject['profile.phone'],
									"profile.gender": userObject['profile.gender'],
									"profile.position": userObject['profile.position'],
									"profile.dept": userObject['profile.dept'],
									modifiedAt: moment().utc().toDate()
								}
							}, function (error, updateddoc) {
								if (error) {
									//console.log(error);
									res.json({
										status: false,
										error: error.message
									});
								} else {
									var query = _users2.default.findOne({
										_id: person._id
									}).populate('profile.companyid', 'businessType _id');
									//Query for finding and sending updated user profile data to client
									query.exec(function (docerr, newdoc) {
										if (newdoc) {
											res.json({
												status: true,
												message: "Updated successfully.",
												data: newdoc
											});
										} else {
											res.json({
												status: false,
												error: "Updated successfully."
											});
										}
									});
								}
							});
						}
					});
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				console.log("error in updateProfile ", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	/**
	*  @Function name : viewUser
	*  @Purpose : For fetching complete user data
	*  @Request Object : userdata: { uid : "user id" }
	*  @Response Object : Success - User data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function viewUser(req, res) {
		// console.log(req.body.userdata);
	
		try {
			//Verifying if request is valid or not
			if (req.body.userdata) {
				var obj = req.body.userdata;
	
				//Validating if user id is valid or not
				if (!obj.uid || validator.isEmpty(obj.uid) || !mongoose.Types.ObjectId.isValid(obj.uid)) {
					res.json({
						status: false,
						error: "Invalid userId."
					});
				} else {
	
					//Query for finding complete user data
					var query = _users2.default.findOne({
						_id: mongoose.Types.ObjectId(obj.uid)
					}, {
						"password": 0
					}).populate('profile.companyid', 'businessId _id');
					query.exec(function (error, result) {
						if (error) {
							console.log("error === ", error);
							res.json({
								status: false,
								error: error.message
							});
						} else {
							// console.log("result === ",result);
							res.json({
								status: true,
								data: result
							});
						}
					});
				}
			} else {
				res.json({
					status: false,
					error: "Invalid request"
				});
			}
		} catch (e) {
			console.log('error in viewUser', e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	/**
	*  @Function name : viewUserProfile
	*  @Purpose : For fetching user profile data
	*  @Request Object : userdata: { uid : "user id" }
	*  @Response Object : Success - User data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function viewUserProfile(req, res) {
	
		try {
			//Verifying if request is valid or not
			if (req.body.userdata) {
				var obj = req.body.userdata;
	
				//Validating is user id is valid or not
				if (!obj.uid || validator.isEmpty(obj.uid) || !mongoose.Types.ObjectId.isValid(obj.uid)) {
					res.json({
						status: false,
						error: "Invalid request"
					});
				} else {
	
					//Query for finding user profile data
					var query = _users2.default.findOne({
						_id: mongoose.Types.ObjectId(obj.uid)
					}).select('firstname profile').populate('profile.companyid', 'businessId _id');
					query.exec(function (error, result) {
						if (error) {
							console.log("error === ", error);
							res.json({
								status: false,
								error: error.message
							});
						} else {
							res.json({
								status: true,
								data: result
							});
						}
					});
				}
			} else {
				res.json({
					status: false,
					error: "Invalid request"
				});
			}
		} catch (e) {
			console.log('error in viewUserProfile', e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	/**
	*  @Function name : getUserLocaleData
	*  @Purpose : For fetching locale data
	*  @Request Object : userdata: { uid : "user id" }
	*  @Response Object : Success - User data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function getUserLocaleData(req, res) {
	
		try {
			//Verifying is request is valid or not
			if (req.body.userdata) {
				var obj = req.body.userdata;
	
				//Validating if user id is valid or not
				if (!obj.uid || validator.isEmpty(obj.uid) || !mongoose.Types.ObjectId.isValid(obj.uid)) {
					res.json({
						status: false,
						error: "Invalid request"
					});
				} else {
	
					//Query for findin locale data
					var query = _users2.default.findOne({
						_id: mongoose.Types.ObjectId(obj.uid)
					}).select('firstname locale');
					query.exec(function (error, result) {
						if (error) {
							console.log("error === ", error);
							res.json({
								status: false,
								error: error.message
							});
						} else {
							res.json({
								status: true,
								data: result
							});
						}
					});
				}
			} else {
				res.json({
					status: false,
					error: "Invalid request"
				});
			}
		} catch (e) {
			console.log('error in getUserLocaleData', e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	/**
	*  @Function name : fetchUser
	*  @Purpose : For fetching particular user data
	*  @Request Object : userdata: { uid : "user id", id: 'corporate id }
	*  @Response Object : Success - User data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchUser(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
	
				//Verifying if request is valid or not
				if (person == null || !req.query.id) {
					res.json({ status: false, error: "Invalid request." });
				} else {
					var recordId = mongoose.Types.ObjectId(req.query.id);
	
					//Query for finding user data based on user id
					var query = _users2.default.findOne({
						_id: recordId
					}, {
						"password": 0
					}).populate('profile.companyid', 'businessId _id');
					query.exec(function (err, doc) {
						//console.log("doc === ", doc);
						if (err) {
							res.json({ status: false, error: err.message });
						} else {
							res.json({ status: true, data: doc });
						}
					});
				}
			} catch (e) {
				console.log("Error in fetch location", e);
				res.json({ status: false, error: "Internal server error."
				});
			}
		});
	}
	
	/**
	*  @Function name : getProfileImage
	*  @Purpose : For fetching profile image of user
	*  @Request Object : uid: { uid : "user id" }
	*  @Response Object : Success - Profile image, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function getProfileImage(req, res) {
	
		try {
			//Verifying if request is valid or not
			if (req.body.uid) {
				var obj = req.body.uid;
	
				//Validating if user is valid or not
				if (!obj.uid || validator.isEmpty(obj.uid) || !mongoose.Types.ObjectId.isValid(obj.uid)) {
					res.json({
						status: false,
						error: "InValid user."
					});
				} else {
	
					//Query for fetching profile image of user
					_users2.default.findOne({
						"_id": mongoose.Types.ObjectId(req.body.uid.uid)
					}).exec(function (error, result) {
						if (error) {
							res.json({
								status: false,
								error: error.message
							});
						} else {
							res.json({
								status: true,
								data: result.profile.profileImage
							});
						}
					});
				}
			} else {
				res.json({
					status: true,
					error: "Invalid request."
				});
			}
		} catch (e) {
			console.log("Error in  getProfileImage", e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	/**
	*  @Function name : getRoles
	*  @Purpose : To get roles according to corporate bussiness type
	*  @Request params : cid : corporateId
	*  @Response Object : Success - data : options Failure - data : []
	*  @Author : "Prudhvi"
	*/
	function getRoles(req, res) {
		var options = [['', 'Select Role']];
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.params.cid) {
					var query = _corporate2.default.findOne({ _id: req.params.cid });
					query.exec(function (error, response) {
						//console.log("response === ",response);
	
						// set options based on bussiness type and current user role based
						if (response && response.businessType == 'Conference') {
							if (person.role == _adminUser.Roles.Superadmin) options = [['', 'Select Role'], [_adminUser.Roles.Admin, "Admin"], [_adminUser.Roles.Moderator, "Moderator"], [_adminUser.Roles.User, "User"]];else if (person.role == _adminUser.Roles.Admin) options = [['', 'Select Role'], [_adminUser.Roles.Moderator, "Moderator"], [_adminUser.Roles.User, "User"]];
						} else if (response && response.businessType == 'LMS') {
							if (person.role == _adminUser.Roles.Superadmin) options = [['', 'Select Role'], [_adminUser.Roles.Lmsadmin, "Admin"], [_adminUser.Roles.Instructor, "Instructor"], [_adminUser.Roles.Student, "Student"] /*, [Roles.Parent, "Parent"]*/];else if (person.role == _adminUser.Roles.Lmsadmin) options = [['', 'Select Role'], [_adminUser.Roles.Instructor, "Instructor"], [_adminUser.Roles.Student, "Student"] /*, [Roles.Parent, "Parent"]*/];
						} else if (response && response.businessType == 'CRM') {
							if (person.role == _adminUser.Roles.Superadmin) options = [['', 'Select Role'], [_adminUser.Roles.CRMadmin, "Admin"], [_adminUser.Roles.CRMuser, "User"]];else if (person.role == _adminUser.Roles.CRMadmin) options = [['', 'Select Role'], [_adminUser.Roles.CRMuser, "User"]];
						} else if (response && response.businessType == 'Presenter') {
							if (person.role == _adminUser.Roles.Superadmin) options = [['', 'Select Role'], [_adminUser.Roles.Presenteradmin, "Admin"], [_adminUser.Roles.Presenter, "Presenter"], [_adminUser.Roles.Attendee, "Attendee"]];else if (person.role == _adminUser.Roles.Presenteradmin) options = [['', 'Select Role'], [_adminUser.Roles.Presenter, "Presenter"], [_adminUser.Roles.Attendee, "Attendee"]];
						}
						res.json({ data: options });
					});
				} else res.json({ data: options });
			} catch (e) {
				console.log("e in getRoles", e);
				res.json({ data: options });
			}
		});
	}
	
	/**
	*  @Function name : getRolesUpdate
	*  @Purpose : To get roles according to corporate bussiness type
	*  @Request params : userId : userId
	*  @Response Object : Success - data : options Failure - data : []
	*  @Author : "Prudhvi"
	*/
	function getRolesUpdate(req, res) {
		var options = [['', 'Select Role']];
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.params.userId && mongoose.Types.ObjectId.isValid(req.params.userId)) {
					var query = _users2.default.findOne({ _id: req.params.userId }).populate('profile.companyid', 'businessType _id');
					query.exec(function (error, doc) {
						if (doc && doc.profile) {
							if (doc.profile.companyid && doc.profile.companyid.businessType && doc.profile.companyid.businessType == 'Conference') {
								if (person.role == _adminUser.Roles.Superadmin) options = [['', 'Select Role'], [_adminUser.Roles.Admin, "Admin"], [_adminUser.Roles.Moderator, "Moderator"], [_adminUser.Roles.User, "User"]];else if (person.role == _adminUser.Roles.Admin) options = [['', 'Select Role'], [_adminUser.Roles.Moderator, "Moderator"], [_adminUser.Roles.User, "User"]];
							} else if (doc.profile.companyid && doc.profile.companyid.businessType && doc.profile.companyid.businessType == 'LMS') {
								if (person.role == _adminUser.Roles.Superadmin) options = [['', 'Select Role'], [_adminUser.Roles.Lmsadmin, "Admin"], [_adminUser.Roles.Instructor, "Instructor"], [_adminUser.Roles.Student, "Student"] /*, [Roles.Parent, "Parent"]*/];else if (person.role == _adminUser.Roles.Lmsadmin) options = [['', 'Select Role'], [_adminUser.Roles.Instructor, "Instructor"], [_adminUser.Roles.Student, "Student"] /*, [Roles.Parent, "Parent"]*/];
							} else if (doc.profile.companyid && doc.profile.companyid.businessType && doc.profile.companyid.businessType == 'CRM') {
								if (person.role == _adminUser.Roles.Superadmin) options = [['', 'Select Role'], [_adminUser.Roles.CRMadmin, "Admin"], [_adminUser.Roles.CRMuser, "User"]];else if (person.role == _adminUser.Roles.CRMadmin) options = [['', 'Select Role'], [_adminUser.Roles.CRMuser, "User"]];
							} else if (doc.profile.companyid && doc.profile.companyid.businessType && doc.profile.companyid.businessType == 'Presenter') {
								if (person.role == _adminUser.Roles.Superadmin) options = [['', 'Select Role'], [_adminUser.Roles.Presenteradmin, "Admin"], [_adminUser.Roles.Presenter, "Presenter"], [_adminUser.Roles.Attendee, "Attendee"]];else if (person.role == _adminUser.Roles.Presenteradmin) options = [['', 'Select Role'], [_adminUser.Roles.Presenter, "Presenter"], [_adminUser.Roles.Attendee, "Attendee"]];
							}
							res.json({ data: options });
						} else {
							res.json({
								data: options
							});
						}
					});
				} else res.json({ data: options });
			} catch (e) {
				console.log("e in getRolesUpdate ", e);
				res.json({ data: options });
			}
		});
	}
	
	//Currently Unused
	function paymentData(req, res) {
		//console.log("request");
		//console.log(response);
		res.json({
			status: true,
			message: "payment done"
		});
	}
	
	/**
	*  @Function name : saveUserAddress
	*  @Purpose : For creating and updating contact data into profile
	*  @Request Object : userAddressData: { _id : "user id", profile: { contact: 'contact data' } }
	*  @Response Object : Success - Success message, UserId, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveUserAddress(req, res) {
		try {
	
			//console.log("Inside Save User Address Controller", req.body.userAddressData);
			var userAddressObject = req.body.userAddressData;
			var requestedUserId = req.body.userAddressData._id;
	
			//Verifying if userAddressObject is there or not
			if (!userAddressObject && !userAddressObject._id && !userAddressObject.profile) {
				res.json({
					status: false,
					error: "Invalid Request"
				});
			} else {
	
				//Query for checking if the user is present in database
				_users2.default.findOne({
					_id: mongoose.Types.ObjectId(requestedUserId)
				}, function (error, userExists) {
					if (error) {
						//console.log("User Does not exits");
						res.json({
							status: false,
							error: "Not Authorized"
						});
					} else if (userExists) {
	
						var resMessage = '';
						if (userExists.profile && userExists.profile.contact && userExists.profile.contact.address) {
							resMessage = "Address updated successfully";
						} else {
							resMessage = "Address Added Successfully";
						}
						//Query for updating user profile with contact data based on user id
						_users2.default.update({
							_id: mongoose.Types.ObjectId(requestedUserId)
						}, {
							$set: {
								"profile.contact": userAddressObject.profile.contact
							}
						}, function (error, result) {
							if (error) {
								console.log("Error while saving data", error.message);
								res.json({
									status: false,
									error: "Address not updated"
								});
							} else if (result) {
								//console.log("Data saved successfully");
								res.json({
									status: true,
									data: requestedUserId,
									message: resMessage
								});
							}
						});
					}
				});
			}
		} catch (e) {
			console.log("Error in  saveUserAddress", e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	/**
	*  @Function name : fetchUserAddress
	*  @Purpose : For fetching contact data
	*  @Request Object : { _id : "user id" }
	*  @Response Object : Success - Contact data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	//Currently Unused
	// export function fetchUserAddress (req, res) {
	// 	// console.log("Inside Fetch user");
	// 	var requestedUserId = req.body._id;
	
	// 	//Verifying if requestedUserId is there or not
	// 	if(!requestedUserId) {
	// 		res.json({
	// 			status: false, 
	// 			error:"Invalid User ID"
	// 		});
	// 	}
	
	// 	//Query for finding contact data
	// 	Users.findOne({
	// 		_id: mongoose.Types.ObjectId(requestedUserId)
	// 	}, function(error, result) {
	// 		if(error) {
	// 			//console.log("error in user ID");
	// 			res.json({
	// 				status: false, 
	// 				error:"Invalid User ID"
	// 			});
	// 		} else if (result) {
	// 			//console.log("Data in fetch user", result.profile.contact);
	// 			res.json({
	// 				status: true, 
	// 				data: result.profile.contact
	// 			});
	// 		}
	// 	});
	// }
	
	/**
	*  @Function name : createWorkPlace
	*  @Purpose : For creating and updating work place into profile
	*  @Request Object : { userID : "user id", companyID : "company id", workplaceObj: {"work place data object"} }
	*  @Response Object : Success - Success message, Workplace data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function createWorkPlace(req, res) {
	
		try {
			// console.log("Request received for create work place", req.body.data);
			// //Intialising all the variables receieved from request
			var requestedWorkPlaceObj = req.body.data.workplaceObj;
			var requestedUid = req.body.data.userID;
			var companyId = req.body.data.companyID;
	
			//Query for checking if the user is present in database
			var query = _users2.default.findOne({
				_id: mongoose.Types.ObjectId(requestedUid)
			});
			query.exec(function (err, userData) {
				if (err) {
					res.json({
						status: false,
						error: err.message
					});
				} else {
	
					//If user is present in database
					if (userData) {
	
						//Verifying if workplace array length is not equal to zero or not
						if (userData.profile && userData.profile.experience && userData.profile.experience.workplace && userData.profile.experience.workplace.length != 0) {
							var flag = 0;
	
							//Looping through the workplace array
							for (var i = 0; i < userData.profile.experience.workplace.length; i++) {
	
								var companyName = userData.profile.experience.workplace[i].company;
	
								//Verifying if workplace is already present or not
								if (companyId != '' && requestedWorkPlaceObj.company == companyName && companyId != userData.profile.experience.workplace[i]._id) {
									res.json({
										status: false,
										error: "Already workplace is present with same name."
									});
									flag = 0;
									break;
	
									//Verifying if workplace is present with same name
								} else if (companyId == '' && requestedWorkPlaceObj.company == companyName) {
									res.json({
										status: false,
										error: "Already workplace is present with same name."
									});
									flag = 0;
									break;
								} else {
									flag = 1;
								}
							}
	
							//If flag == 1 means no conflicts with already present workplace
							if (flag == 1) {
	
								//Verifying if company id is there or not
								if (companyId != '') {
									var obj = requestedWorkPlaceObj;
									obj["_id"] = mongoose.Types.ObjectId(companyId);
	
									//Query for updating user profile with workplace object based on company and user id
									_users2.default.update({
										_id: mongoose.Types.ObjectId(requestedUid),
										"profile.experience.workplace._id": companyId
									}, {
										$set: {
											"profile.experience.workplace.$": obj
										}
									}, {
										upsert: true
									}, function (err, result) {
										if (err) {
											console.log(err);
											res.json({
												status: false,
												error: 'Work place not updated'
											});
										} else {
											// console.log("result", result) 
											res.json({
												status: true,
												data: req.body.data,
												success: 'Work place updated'
											});
										}
									});
								} else {
	
									//Query for updating user profile with workplace object without checking company id
									_users2.default.update({
										_id: mongoose.Types.ObjectId(requestedUid)
									}, {
										$push: {
											"profile.experience.workplace": requestedWorkPlaceObj
										}
									}, {
										upsert: true
									}, function (err, result) {
										if (err) {
											console.log(err);
											res.json({
												status: false,
												error: 'Work place not added'
											});
										} else {
											// console.log("result", result)
											res.json({
												status: true,
												data: req.body.data,
												success: 'Work place added'
											});
										}
									});
								}
							}
						} else {
	
							//Query for updating user profile with workplace object when it is not present
							_users2.default.update({
								_id: mongoose.Types.ObjectId(requestedUid)
							}, {
								$push: {
									"profile.experience.workplace": requestedWorkPlaceObj
								}
							}, {
								upsert: true
							}, function (err, result) {
								if (err) {
									console.log(err);
									res.json({
										status: false,
										error: 'Work place not added'
									});
								} else {
									// console.log("result", result)
									res.json({
										status: true,
										data: req.body.data,
										success: 'Work place added'
									});
								}
							});
						}
					} else {
						res.json({
							status: false,
							error: "Work place not created ."
						});
					}
				}
			});
		} catch (e) {
			console.log('error in createWorkPlace', e);
			res.json({
				status: false,
				error: e.message
			});
		}
	};
	
	/**
	*  @Function name : getWorkEduData
	*  @Purpose : For fetching complete work place data
	*  @Request Object : null
	*  @Response Object : Success - Workplace data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function getWorkEduData(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
					var projection = {};
					projection['profile.experience'] = 1;
					projection['profile.education'] = 1;
	
					//Query for finding workplace data
					_users2.default.find({
						_id: mongoose.Types.ObjectId(person._id)
					}, projection).exec(function (err, doc) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else if (doc && doc.length != 0) {
							// console.log(doc[0].profile)
							res.json({
								status: true,
								data: doc[0].profile
							});
						} else {
							res.json({
								status: true
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request"
					});
				}
			} catch (e) {
				console.log('error in getWorkEduData', e);
				res.json({
					status: false,
					error: e.message
				});
			}
		});
	};
	
	/**
	*  @Function name : deleteWorkPlace
	*  @Purpose : For deleting particular work place data
	*  @Request Object : params : { id: "workplace id" }
	*  @Response Object : Success - Success message, Workplace data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteWorkPlace(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
					//Query for finding workplace data based on requestedWorkId
					_users2.default.find({
						"_id": mongoose.Types.ObjectId(person._id),
						"profile.experience.workplace._id": req.params.id
					}, {
						"profile.experience.workplace.$": 1
					}).exec(function (err, doc) {
						if (err) {
							console.log(err);
							res.json({
								status: false,
								error: err.message
							});
						}
	
						//Verifying if data is there or not
						if (doc) {
	
							//Query for removing workplace data in user profile
							_users2.default.update({
								_id: mongoose.Types.ObjectId(person._id),
								"profile.experience.workplace._id": req.params.id
							}, {
								$pull: {
									"profile.experience.workplace": {
										_id: req.params.id
									}
								}
							}, {
								upsert: true
							}, function (err, result) {
								if (err) {
									console.log(err);
									res.json({
										status: false,
										error: 'Work place not deleted'
									});
								} else {
									// console.log("result", result)
									res.json({
										status: true,
										success: 'Work place deleted successfully'
									});
								}
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request"
					});
				}
			} catch (e) {
				console.log('error in deleteWorkPlace', e);
				res.json({
					status: false,
					error: e.message
				});
			}
		});
	}
	
	/**
	*  @Function name : saveUserWebsite
	*  @Purpose : For creating and updating website into profile
	*  @Request Object : userWebsiteData: { _id : "user id", profile: { website: 'website' } }
	*  @Response Object : Success - Success message, UserId, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveUserWebsite(req, res) {
		try {
			//console.log("Inside Save User Address Controller", req.body.userWebsiteData);
			var userWebsiteObject = req.body.userWebsiteData;
			var requestedUserId = req.body.userWebsiteData._id;
	
			//Verifying if userWebsiteData is there or not
			if (!req.body.userWebsiteData) {
				res.json({
					status: false,
					message: "User data not available"
				});
			} else {
	
				//Query for checking if the user is present in database
				_users2.default.findOne({
					_id: mongoose.Types.ObjectId(requestedUserId)
				}, function (error, userExists) {
					if (error) {
						//console.log("User Does not exits");
						res.json({
							status: false,
							error: "Not Authorized"
						});
					} else if (userExists) {
						var resMessage = '';
						if (userExists.profile && userExists.profile.website) {
							resMessage = "Website updated successfully";
						} else {
							resMessage = "Website added successfully";
						}
						//Query for updating user profile with website based on user id
						_users2.default.update({
							_id: mongoose.Types.ObjectId(requestedUserId)
						}, {
							$set: {
								"profile.website": userWebsiteObject.profile.website
							}
						}, function (error, result) {
							if (error) {
								//console.log("Error while saving data", error.message);
								res.json({
									status: false,
									error: "Website not updated"
								});
							} else if (result) {
								//console.log("Data saved successfully");
								res.json({
									status: true,
									data: requestedUserId,
									message: resMessage
								});
							}
						});
					}
				});
			}
		} catch (e) {
			console.log("Error in  saveUserWebsite", e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	/**
	*  @Function name : saveUserSocialLink
	*  @Purpose : For creating and updating social link into profile
	*  @Request Object : userSocialLinkData: { _id : "user id", profile: { socialLink: 'social link' } }
	*  @Response Object : Success - Success message, UserId, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveUserSocialLink(req, res) {
		try {
			// console.log("Inside Save User SocialLink Controller", req.body.userSocialLinkData);
			var userWebsiteObject = req.body.userSocialLinkData;
			var requestedUserId = req.body.userSocialLinkData._id;
	
			//Verifying if userSocialLinkData is there or not
			if (!req.body.userSocialLinkData) {
				res.json({
					status: false,
					message: "User data not available"
				});
			} else {
	
				//Query for checking if the user is present in database
				_users2.default.findOne({
					_id: mongoose.Types.ObjectId(requestedUserId)
				}, function (error, userExists) {
					if (error) {
						//console.log("User Does not exits");
						res.json({
							status: false,
							error: "Not Authorized"
						});
					} else if (userExists) {
	
						var resMessage = '';
						if (userExists.profile && userExists.profile.socialLink) {
							resMessage = "Social link updated successfully";
						} else {
							resMessage = "Social link added successfully";
						}
						//Query for updating user profile with social link based on user id
						_users2.default.update({
							_id: mongoose.Types.ObjectId(requestedUserId)
						}, {
							$set: {
								"profile.socialLink": userWebsiteObject.profile.socialLink
							}
						}, function (error, result) {
							if (error) {
								//console.log("Error while saving data", error.message);
								res.json({
									status: false,
									error: "Social link not updated"
								});
							} else if (result) {
								//console.log("Data saved successfully");
								res.json({
									status: true,
									data: requestedUserId,
									message: resMessage
								});
							}
						});
					}
				});
			}
		} catch (e) {
			console.log("Error in  saveUserSocialLink", e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	/**
	*  @Function name : saveUserBasicInfo
	*  @Purpose : For creating and updating basic information of user into profile
	*  @Request Object : userBasicInfoData: { _id : "user id", profile: {"basic info data"} }
	*  @Response Object : Success - Success message, College data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveUserBasicInfo(req, res) {
		try {
			// console.log("Inside Save User basic Info Controller", req.body);
			var userBasicInfoObject = req.body.userBasicInfoData;
			var requestedUserId = req.body.userBasicInfoData._id;
			var requestedUserDateOfBirthData = req.body.userBasicInfoData.profile.dateofbirth;
			var requestedUserDateOfBirthObject = req.body.userBasicInfoData.profile.dateofbirth;
			var requestedUserGenderData = req.body.userBasicInfoData.profile.gender;
	
			//Verifying if requestedUserDateOfBirthData is there or not
			if (requestedUserDateOfBirthData) {
				var requestedUserDateOfBirth = moment(requestedUserDateOfBirthData, "DD/MM/YYYY");
			} else {
				requestedUserDateOfBirth = '';
			}
	
			//Verifying if requestedUserGenderData is there or not
			if (requestedUserGenderData) {
				var requestedUserGender = req.body.userBasicInfoData.profile.gender;
			} else {
				var requestedUserGender = '';
			}
	
			//Verifying if userBasicInfoData is there or not
			if (!req.body.userBasicInfoData) {
				res.json({
					status: false,
					message: "User Data not available"
				});
			} else {
	
				//Query for checking if user is present in database
				_users2.default.findOne({
					_id: mongoose.Types.ObjectId(requestedUserId)
				}, function (error, userExists) {
					if (error) {
						//console.log("User Does not exits");
						res.json({
							status: false,
							error: "Not Authorized"
						});
					} else if (userExists) {
						var resMessage = '';
						if (userExists.profile && (userExists.profile.dateofbirth || userExists.profile.gender)) {
							resMessage = "Basic info updated successfully";
						} else {
							resMessage = "Basic info added successfully";
						}
	
						//Query for updating user profile with basic information based on user id
						_users2.default.update({
							_id: mongoose.Types.ObjectId(requestedUserId)
						}, {
							$set: {
								"profile.dateofbirth": requestedUserDateOfBirth,
								"profile.gender": requestedUserGender
							}
						}, function (error, result) {
							if (error) {
								//console.log("Error while saving data", error.message);
								res.json({
									status: false,
									error: error.message
								});
							} else if (result) {
								//console.log("Data saved successfully");
								res.json({
									status: true,
									data: requestedUserId,
									message: resMessage
								});
							}
						});
					}
				});
			}
		} catch (e) {
			console.log("Error in  saveUserBasicInfo", e);
			res.json({
				status: false,
				error: "Internal server error."
			});
		}
	}
	
	/**
	*  @Function name : createCollege
	*  @Purpose : For creating and updating college into profile
	*  @Request Object : data: { userID : "user id", universityID: 'college id', collegeObj: {"college data object"} }
	*  @Response Object : Success - Success message, College data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function createCollege(req, res) {
	
		try {
			// console.log("Request received for create college", req.body.data);
			// //Intialising all the variables receieved from request
			var requestedCollegeObj = req.body.data.collegeObj;
			var requestedUid = req.body.data.userID;
			var universityId = req.body.data.universityID;
	
			//Query for checking if the user is present in database
			var query = _users2.default.findOne({
				_id: mongoose.Types.ObjectId(requestedUid)
			});
			query.exec(function (err, userData) {
				if (err) {
					res.json({
						status: false,
						error: err.message
					});
				} else {
	
					//If user is present in database
					if (userData) {
	
						//Verifying if college array length is not equal to zero or not
						if (userData.profile && userData.profile.education && userData.profile.education.college && userData.profile.education.college.length != 0) {
							var flag = 0;
	
							//Looping through the college array
							for (var i = 0; i < userData.profile.education.college.length; i++) {
	
								var universityName = userData.profile.education.college[i].university;
	
								//Verifying if college is already present or not
								if (universityId != '' && requestedCollegeObj.university == universityName && universityId != userData.profile.education.college[i]._id) {
									res.json({
										status: false,
										error: "Already college is present with same name."
									});
									flag = 0;
									break;
	
									//Verifying if college is present with same name
								} else if (universityId == '' && requestedCollegeObj.university == universityName) {
									res.json({
										status: false,
										error: "Already college is present with same name."
									});
									flag = 0;
									break;
								} else {
									flag = 1;
								}
							}
	
							//If flag == 1 means no conflicts with already present college
							if (flag == 1) {
	
								//Verifying if college id is there or not
								if (universityId != '') {
									var obj = requestedCollegeObj;
									obj["_id"] = mongoose.Types.ObjectId(universityId);
	
									//Query for updating user profile with college object based on college and user id
									_users2.default.update({
										_id: mongoose.Types.ObjectId(requestedUid),
										"profile.education.college._id": universityId
									}, {
										$set: {
											"profile.education.college.$": obj
										}
									}, {
										upsert: true
									}, function (err, result) {
										if (err) {
											console.log(err);
											res.json({
												status: false,
												error: 'College not updated'
											});
										} else {
											// console.log("result", result)
											res.json({
												status: true,
												data: req.body.data,
												success: 'College updated'
											});
										}
									});
								} else {
	
									//Query for updating user profile with college object without checking college id
									_users2.default.update({
										_id: mongoose.Types.ObjectId(requestedUid)
									}, {
										$push: {
											"profile.education.college": requestedCollegeObj
										}
									}, { upsert: true }, function (err, result) {
										if (err) {
											console.log(err);
											res.json({
												status: false,
												error: 'College not added'
											});
										} else {
											// console.log("result", result)
											res.json({
												status: true,
												data: req.body.data,
												success: 'College added'
											});
										}
									});
								}
							}
						} else {
	
							//Query for updating user profile with college object when it is not present
							_users2.default.update({
								_id: mongoose.Types.ObjectId(requestedUid)
							}, {
								$push: {
									"profile.education.college": requestedCollegeObj
								}
							}, {
								upsert: true
							}, function (err, result) {
								if (err) {
									console.log(err);
									res.json({
										status: false,
										error: 'College not added'
									});
								} else {
									// console.log("result", result)
									res.json({
										status: true,
										data: req.body.data,
										success: 'College added'
									});
								}
							});
						}
					} else {
						res.json({
							status: false,
							error: "College not created ."
						});
					}
				}
			});
		} catch (e) {
			console.log('error in createCollege', e);
			res.json({
				status: false,
				error: e.message
			});
		}
	};
	
	/**
	*  @Function name : deleteCollege
	*  @Purpose : For deleting particular college data
	*  @Request Object : params : { id: "college id" }
	*  @Response Object : Success - Success message, College data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteCollege(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
	
				//Query for finding college data based on requestedCollegeId and requestedUserId
				_users2.default.find({
					"_id": mongoose.Types.ObjectId(person._id),
					"profile.education.college._id": req.params.id
				}, {
					"profile.education.college.$": 1
				}).exec(function (err, doc) {
					if (err) {
						console.log(err);
						res.json({
							status: false,
							error: err.message
						});
					}
	
					//Verifying if data is there or not
					if (doc) {
	
						//Query for removing college data in user profile
						_users2.default.update({
							_id: mongoose.Types.ObjectId(person._id),
							"profile.education.college._id": req.params.id
						}, {
							$pull: {
								"profile.education.college": {
									_id: req.params.id
								}
							}
						}, {
							upsert: true
						}, function (err, result) {
							if (err) {
								console.log(err);
								res.json({
									status: false,
									error: 'College not deleted'
								});
							} else {
								// console.log("result", result)
								res.json({
									status: true,
									success: 'College deleted successfully'
								});
							}
						});
					}
				});
			} catch (e) {
				console.log('error in deleteCollege', e);
				res.json({
					status: false,
					error: e.message
				});
			}
		});
	};
	
	/*
	@Function Name : createSchool
	@Purpose : "To search groups as per input from client side from participantgroup collection"
	@Request Object : {schoolObj}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function createSchool(req, res) {
	
		// Verifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null || req.body.schoolObj) {
					var queryData = req.body;
	
					//Updating the user document with the requested school object
					var findId = {
						_id: mongoose.Types.ObjectId(person._id)
					};
					var setSchoolObj = {
						$set: {
							"profile.education.highSchool": queryData.schoolObj
						}
					};
					var resMessage = '';
					if (person.profile && person.profile.education && person.profile.education.highSchool && person.profile.education.highSchool.school) {
						resMessage = "High School Updated Successfully";
					} else {
						resMessage = "High School Added Successfully";
					}
					var updateQuery = _users2.default.update(findId, setSchoolObj);
	
					updateQuery.exec(function (err, updatedData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							res.json({
								status: true,
								success: resMessage
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in createSchool', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	/*
	@Function Name : deleteSchool
	@Purpose : "To search groups as per input from client side from participantgroup collection"
	@Request Object : null
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function deleteSchool(req, res) {
	
		// Verifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
	
					//Writing query to delete school from user collection document
					var findId = {
						_id: mongoose.Types.ObjectId(person._id)
					};
					var setSchoolObj = {
						$set: {
							"profile.education.highSchool": ''
						}
					};
					var query = _users2.default.update(findId, setSchoolObj);
	
					query.exec(function (err, deletedData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							res.json({
								status: true,
								success: "Deleted successfully"
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in deleteSchool', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	/*
	@Function Name : createSkills
	@Purpose : "To save skills in a particular user document in user collection"
	@Request Object : {requestedSkills}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function createSkills(req, res) {
	
		// Verifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.body.skills) {
					var obj = req.body;
					var findId = {
						_id: mongoose.Types.ObjectId(person._id)
					};
	
					_users2.default.findOne(findId).select('profile.experience.professionalSkills').exec(function (err, userData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							var updater = {
								$set: {
									"profile.experience.professionalSkills": obj.skills
								}
							};
							//Upadting users document with requested skills
							var updateQuery = _users2.default.update(findId, updater);
							updateQuery.exec(function (err, updatedData) {
								if (err) {
									res.json({
										status: false,
										error: err.message
									});
								} else {
									if (userData.profile.experience.professionalSkills && userData.profile.experience.professionalSkills.length <= 0) {
										res.json({
											status: true,
											success: "Professional Skills Added Successfully"
										});
									} else {
										res.json({
											status: true,
											success: "Professional Skills Updated Successfully"
										});
									}
								}
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in createSkills', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	/**
	*  @Function name : deleteAddress
	*  @Purpose : For deleting contact data in user profile
	*  @Request Object : null
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteAddress(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
	
				if (person != null) {
					//Query for removing contact data in user profile
					_users2.default.update({
						_id: mongoose.Types.ObjectId(person._id)
					}, {
						$set: {
							"profile.contact": ''
						}
					}, function (err, deletedData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							res.json({
								status: true,
								success: "Deleted successfully"
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request"
					});
				}
			} catch (e) {
				console.log('error in deleteAddress', e);
				res.json({
					status: false,
					error: e.message
				});
			}
		});
	}
	
	/**
	*  @Function name : deleteWebsite
	*  @Purpose : For deleting website data in user profile
	*  @Request Object : null
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteWebsite(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
	
					//Query for removing website data in user profile
					_users2.default.update({
						_id: mongoose.Types.ObjectId(person._id)
					}, {
						$set: {
							"profile.website": ''
						}
					}, function (err, deletedData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							res.json({
								status: true,
								success: "Deleted successfully"
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request"
					});
				}
			} catch (e) {
				console.log('error in deleteWebsite', e);
				res.json({
					status: false,
					error: e.message
				});
			}
		});
	}
	
	/*
	@Function Name : deleteProfessionalSkills
	@Purpose : "To delete all skills present in a particular user document"
	@Request Object : null
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function deleteProfessionalSkills(req, res) {
	
		// Verifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
					var findId = {
						_id: mongoose.Types.ObjectId(person._id)
					};
					var modifier = {
						$set: {
							"profile.experience.professionalSkills": []
						}
					};
	
					//deleting all skills in users document 
					var query = _users2.default.update(findId, modifier);
					query.exec(function (err, deletedData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							res.json({
								status: true,
								success: "Deleted successfully"
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in deleteProfessionalSkills', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	/*  @Function name : deleteSocialLink
	*  @Purpose : For deleting social link data in user profile
	*  @Request Object : null
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteSocialLink(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
	
					//Query for removing social link data in user profile
					_users2.default.update({
						_id: mongoose.Types.ObjectId(person._id)
					}, {
						$set: {
							"profile.socialLink": ''
						}
					}, function (err, deletedData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							res.json({
								status: true,
								success: "Deleted successfully"
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in deleteSocialLink', e);
				res.json({
					status: false,
					error: e.message
				});
			}
		});
	}
	
	/**
	*  @Function name : deleteBirthDay
	*  @Purpose : For deleting date of birth in user profile
	*  @Request Object : null
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteBirthDay(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
	
					//Query for removing date of birth in user profile
					_users2.default.update({
						_id: mongoose.Types.ObjectId(person._id)
					}, {
						$set: {
							"profile.dateofbirth": ''
						}
					}, function (err, deletedData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							res.json({
								status: true,
								success: "Deleted successfully"
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in deleteBirthDay', e);
				res.json({
					status: false,
					error: e.message
				});
			}
		});
	}
	
	/**
	*  @Function name : deleteGender
	*  @Purpose : For deleting gender in user profile
	*  @Request Object : null
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteGender(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
					//Query for removing gender in user profile
					_users2.default.update({
						_id: mongoose.Types.ObjectId(person._id)
					}, {
						$set: {
							"profile.gender": ''
						}
					}, function (err, deletedData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
							res.json({
								status: true,
								success: "Deleted successfully"
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in deleteGender', e);
				res.json({
					status: false,
					error: e.message
				});
			}
		});
	}
	
	/**
	* @Function Name: "updateLocaleSettings",
	* @Purpose: "To save locale settings into users collections.",
	* @Request Object: profileData : { uid : "userID", localeobj : “this.form” },
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function updateLocaleSettings(req, res) {
		try {
			(0, _authorization.checkValidRequest)(req.headers, function (person) {
				try {
	
					//Verifying if request is valid or not
					if (person == null || !req.body.profileData) {
						res.json({ status: false, error: "InValid request." });
					} else {
						var obj = req.body.profileData;
						var recordId = mongoose.Types.ObjectId(person._id);
						obj['modifiedAt'] = moment().utc().toDate();
	
						//If locale settings id is there then update data
						var data = _users2.default.findOne({ _id: recordId });
	
						//Verifying the data is present or not
						if (data) {
	
							//If data is present then update the locale settings
							_users2.default.update({ _id: recordId }, {
								$set: { locale: obj }
							}, function (err, doc) {
								if (err) {
									res.json({ status: false, error: err.message });
								} else {
	
									//Query for sending the updated record to the client
									var query = _users2.default.findOne({ _id: recordId });
									query.exec(function (err, user) {
										if (err) {
											res.json({ status: false });
										} else if (user) {
											res.json({ status: true, data: user, message: "Updated successfully." });
	
											//Log obj which need to be inserted in logger collection
											// let logObj = {
											// 	logType : 'Locale Settings',
											// 	actionType : 'Updated',
											// 	actionTime : moment().utc().toDate(),
											// 	uid : person._id,
											// 	details : {
											// 		remoteAddress : req.connection.remoteAddress,
											// 		userAgent : req.headers['user-agent']
											// 	}
											// }  
	
											// //Function for creating log on successful creation of locale settings
											// createLog(logObj, function(status) {
											// if(status) {
											// 	// console.log(status);
											// 	}
											// });
										} else {
											res.json({ status: false, error: "Internal server error." });
										}
									});
								}
							});
						} else {
							res.json({ status: false, error: "Invalid Locale settings" });
						}
					}
				} catch (e) {
					console.log("Error in update Loacle Settings inner  :: ", e);
					res.json({ status: false, error: "Internal server error." });
				}
			});
		} catch (e) {
			console.log("Error in update Loacle Settings  ::  ", e);
			res.json({ status: false, error: "Internal server error."
			});
		}
	}
	
	/*Users.findOne({ email: userObject.email }, function(err, doc) {
		if(err){
			res.json({ status: false, error: err });
		} else if(doc){
			res.json({ status: false, error: "Email already existed." });
		}else{
			userObject["password"] = md5(userObject.password);
			userObject["createdby"] = mongoose.Types.ObjectId(userObject.uid);
			userObject["modifiedby"] = mongoose.Types.ObjectId(userObject.uid);
			userObject["dateAdded"] = moment().utc().toDate();
			userObject["modifiedAt"] = moment().utc().toDate();
			delete userObject["uid"];
			// console.log(userObject)
			const objUser = new Users(userObject);
	
			Users.create([objUser], (error) => {
				if (!error) {
					res.json({ status: true, data: objUser, message : "Created successfully." });
					Users.findOne({_id:  mongoose.Types.ObjectId(objUser.createdby)},function(err,name){
						if(name && name.email){
							var exchangeData = {
								to : objUser.email,
								whoCreated :name.email,
								subject : 'User Created',
								body : 'New Account with name '+objUser.firstname+' has been created by '+name.firstname +' '+name.lastname+'.'
							}
							EmailForUserCreation.createUserMail(exchangeData);
						}else{
							res.json({ status: false, error: " Email not sent"});
						}
					});
				} else {
					res.json({ status: false, error: error, data: userObject });
				}
			});
		}
	});*/
	
	/**
	* @Function Name: "changePassword",
	* @Purpose: "To change user password into user document.",
	* @Request Object: userdata : { uid : "userID"},
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function changePassword(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				//Verifying if request is valid or not
				if (person == null || !req.body || !req.body.userdata) {
					res.json({ status: false, error: "Invalid request" });
				} else {
					var userObject = req.body.userdata;
					if (!userObject.passwordtoken || validator.isEmpty(userObject.passwordtoken)) {
						// console.log('save')
						if (!userObject.uid || validator.isEmpty(userObject.uid) || !mongoose.Types.ObjectId.isValid(userObject.uid) || !userObject.token || validator.isEmpty(userObject.token)) {
							res.json({ status: false, error: "InValid user." });
						} else if (!userObject.oldPassword && userObject.oldPassword == '' && !userObject.newPassword && userObject.newPassword == '' && !userObject.reNewPassword && userObject.reNewPassword == '') {
							res.json({ status: false, error: "Please fill all fields" });
						} else if (!userObject.oldPassword || userObject.oldPassword == '') {
							res.json({ status: false, error: "Current Password field is required" });
						} else if (!userObject.newPassword || userObject.newPassword == '') {
							res.json({ status: false, error: "New Password field is required" });
						} else if (!userObject.reNewPassword || userObject.reNewPassword == '') {
							res.json({ status: false, error: " Retype New Password field is required" });
						} else {
	
							var old_password = (0, _slashesActions.addSlash)(userObject.oldPassword);
							//Fetching the details of user password token
							var pwdQuery = _users2.default.findOne({ _id: person._id, token: person.token, password: (0, _md2.default)(old_password) });
							pwdQuery.exec(function (pwderror, pwdsuccess) {
								if (pwderror || pwdsuccess == null) {
									res.json({ status: false, error: "Current password you entered is incorrect." });
								}
								if (pwdsuccess) {
									if (userObject.newPassword !== userObject.reNewPassword) {
										res.json({ status: false, error: "Re typed password does not match" });
									} else if (userObject.oldPassword == userObject.reNewPassword) {
										res.json({ status: false, error: "New password should be different from old password" });
									} else {
										var slashsPassword = (0, _slashesActions.addSlash)(userObject.reNewPassword);
	
										//Query for update 0r change password. 
										_users2.default.update({ _id: userObject.uid }, { $set: { password: (0, _md2.default)(slashsPassword) } }, { runValidators: true }, function (updateerror, doc) {
											if (updateerror) {
												res.json({ status: false, error: 'Can not change password' });
											} else {
												var query = _users2.default.findOne({ _id: person._id });
												query.exec(function (e, document) {
													if (e) {
														res.json({ status: false, error: e });
													} else {
														res.json({ status: true, data: document, message: "Updated successfully." });
														// let logObj = {
														// 	logType : 'Password',
														// 	actionType : 'Changed',
														// 	actionTime : moment().utc().toDate(),
														// 	uid : userObject.uid,
														// 	details : {
														// 		remoteAddress : req.connection.remoteAddress,
														// 		userAgent : req.headers['user-agent']
														// 	}
														// }
														// createLog(logObj, function(status) {
														// if(status) {
														// 	// console.log(status);
														// 	}
														// });
													}
												});
												//res.json({ status: true, data: doc, message : "Updated successfully." });
											}
										});
									}
								}
							});
						}
					}
				}
			} catch (e) {
				console.log("error in changePassword", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	/**
	* @Function Name: "resetPassword",
	* @Purpose: "To reset user password user document.",
	* @Request Object: userdata : { uid : "userID"},
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function resetPassword(req, res) {
		try {
			//Verifying if request is valid or not
			if (!req.body || !req.body.userdata) {
				res.json({ status: false, error: "Invalid request" });
			} else {
				var userObject = req.body.userdata;
	
				//user creating from portal
				if (userObject.password != '') {
					var slashsPassword = (0, _slashesActions.addSlash)(userObject.password);
					//Fetching details of user password token
					var query = _users2.default.findOne({ passwordToken: userObject.passwordtoken });
					query.exec(function (err, user) {
						if (err) {
							//console.log('invalid')
							res.json({ status: false, error: err });
						} else {
							// console.log(user)
							if (user != null) {
								user.passwordToken = undefined;
								user.resetPasswordExpires = undefined;
	
								user.password = (0, _md2.default)(slashsPassword);
								user.flagTosetPassword = true;
	
								//Craete or reset password
								user.save(function (updateerror, result) {
									if (updateerror) {
										res.json({ status: false, error: 'Can not change password' });
									} else {
										res.json({ status: true, message: "Reset successfully." });
										var now = moment().utc().toDate();
										// let logObj = {
										// 	logType : 'Password',
										// 	actionType : 'Reset',
										// 	actionTime : now,
										// 	uid : userObject.uid,
										// 	details : {
										// 		remoteAddress : req.connection.remoteAddress,
										// 		userAgent : req.headers['user-agent']
										// 	}
										// }
										// createLog(logObj, function(status) {
										// 	if (status) {
										// 		// console.log(status);
										// 	}
										// });
									}
								});
							} else {
								res.json({ status: false, error: 'Invalid Request' });
							}
						}
					});
				} else {
					res.json({ status: false, error: "Please enter the Password" });
				}
			}
		} catch (e) {
			console.log("error in resetPassword", e);
			res.json({ status: false, error: "Internal server error." });
		}
	}
	
	/**
	*  @Function name : getLogs
	*  @Purpose : For fetching log data
	*  @Request Object : null
	*  @Response Object : Success - Log data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function getLogs(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
	
				//Verifying if request is valid or not
				if (person == null) {
					res.json({
						status: false,
						error: "Invalid Request"
					});
				} else {
	
					//Query for finding top three latest log data
					var query = _logger2.default.find({
						uid: mongoose.Types.ObjectId(person._id)
					}).sort({
						actionTime: -1
					}).limit(3);
	
					query.exec(function (error, result) {
						if (error) {
							res.json({
								status: false
							});
						} else if (result) {
							res.json({
								status: true,
								data: result
							});
						}
					});
				}
			} catch (e) {
				console.log("Error in get logs", e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	/**
	* @Function Name: "removeProfileImage",
	* @Purpose: "To remove Profile image from the users collections.",
	* @Request Object:  null
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function removeProfileImage(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
	
					// var fileName = person.profile.profileImage;
					var dest = process.env.PWD + "/uploads/" + person.profile.profileImage;
	
					//Delete profile image from the users collection
					_users2.default.update({
						_id: mongoose.Types.ObjectId(person._id)
					}, {
						$set: {
							"profile.profileImage": ''
						}
					}, function (err, deletedData) {
						if (err) {
							res.json({
								status: false,
								error: err.message
							});
						} else {
	
							//Remove Profile image from the uploads
							fs.unlink(dest, function (err, result) {
								if (err) {
									res.json({ status: false, error: err.message });
								} else {
									res.json({
										status: true,
										message: "Deleted successfully"
									});
									// console.log("res", result)
								}
							});
						}
					});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in removeProfileImage', e);
				res.json({
					status: false,
					error: e.message
				});
			}
		});
	}
	
	function getUserData(req, res) {
	
		// Verifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.params.uid) {
					var obj = req.params;
	
					if (!obj.uid || validator.isEmpty(obj.uid) || !mongoose.Types.ObjectId.isValid(obj.uid)) {
						res.json({
							status: false,
							error: "Invalid userId."
						});
					} else {
	
						//Query for finding complete user data
						_users2.default.findOne({
							_id: mongoose.Types.ObjectId(obj.uid)
						}, {
							"password": 0
						}).populate('profile.companyid', 'businessId _id').populate('contacts._id', 'firstname lastname profile.profileImage profile.experience.workplace profile.position').exec(function (error, result) {
							if (error) {
								res.json({
									status: false,
									error: error.message
								});
							} else {
								res.json({
									status: true,
									data: result
								});
							}
						});
					}
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in getUserData', e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	/*Pradeep + Android push notification*/
	function setAndroidId(req, res) {
		// console.log("device token---",req.body);
		// Verifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.body.deviceData && req.body.deviceData.deviceId) {
					_users2.default.update({
						_id: mongoose.Types.ObjectId(person._id)
					}, {
						$set: {
							deviceId: req.body.deviceData.deviceId,
							deviceType: 'ANDROID'
						}
					}, function (err, res) {});
				} else {
					res.json({
						status: false,
						error: "Invalid request."
					});
				}
			} catch (e) {
				console.log('error in setAndroidId', e);
				res.json({ error: "Enable to set DeviceId & Type." });
			}
		});
	}
	/*Pradeep - Android push notification*/
	
	/**
	*  @Function name : getRooms
	*  @Purpose : To get rooms according to corporate bussiness type
	*  @Request params : cid : corporateId
	*  @Response Object : Success - data : options Failure - data : []
	*  @Author : "Prateek"
	*/
	function getRooms(req, res) {
		var options = [['', 'select_room']];
		var roomUsers = {};
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.params.cid) {
					var query = _room2.default.find({ corporateId: req.params.cid });
					query.populate('users', 'firstname lastname role').exec(function (error, response) {
						// console.log("response === ",response);
	
						// set options based on rooms present under corporate Id.
						if (response) {
							_.forIn(response, function (value, key) {
								options.push([value._id, value.roomName]);
								roomUsers[value._id] = value.users;
							});
							res.json({ data: options, usersData: roomUsers });
						}
					});
				} else res.json({ data: options, usersData: roomUsers });
			} catch (e) {
				console.log("error in getRooms", e);
				res.json({ data: options });
			}
		});
	}

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.saveToLogger = saveToLogger;
	exports.saveLog = saveLog;
	exports.LogLoginStatus = LogLoginStatus;
	exports.LogUserModule = LogUserModule;
	exports.updateAttendance = updateAttendance;
	exports.saveVisiteTopic = saveVisiteTopic;
	exports.markAsCompleteTopic = markAsCompleteTopic;
	exports.getTopicStatus = getTopicStatus;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _corporate = __webpack_require__(41);
	
	var _corporate2 = _interopRequireDefault(_corporate);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _package = __webpack_require__(25);
	
	var _package2 = _interopRequireDefault(_package);
	
	var _logger = __webpack_require__(49);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _datalog = __webpack_require__(48);
	
	var _datalog2 = _interopRequireDefault(_datalog);
	
	var _authorization = __webpack_require__(10);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7);
	var fs = __webpack_require__(23);
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	var validator = __webpack_require__(12);
	
	var Actions = {
	    LogIn: 'Log_In',
	    NewUser: 'New_User',
	    UpdateUser: 'Update_User',
	    TopicStatus: 'Topic_Status'
	};
	
	var LogModules = {
	    User: 'User'
	};
	
	function saveToLogger(objLog) {
	    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	    // console.log("Try to save");
	    // console.log("objLog === ", objLog);
	    objLog['dateAdded'] = moment().utc().toDate();
	    var objEntity = new _datalog2.default(objLog);
	    objEntity.save(function (err, doc) {
	        if (err) {
	            console.log(err);
	        } else {
	            if (callback != null) {
	                callback(doc);
	            }
	            // callback(true);
	        }
	    });
	}
	
	function saveLog(req, res) {
	    // console.log("Request Recieved")
	    var objLog = req.body.data;
	    objLog.uid = mongoose.Types.ObjectId(objLog.uid);
	    //Creates new log
	    saveToLogger(objLog, function (doc) {
	        // console.log('Hello', doc);
	        res.json({ log: doc });
	    });
	}
	
	function LogLoginStatus(status, _uid) {
	    var objData = null;
	    if (status == 1) {
	        objData = {
	            uid: _uid,
	            category: LogModules.User,
	            action: Actions.LogIn,
	            value: { logged: true, mode: 0 },
	            label: 'User Logged In'
	        };
	    } else if (status == 2) {
	        objData = {
	            uid: _uid,
	            category: LogModules.User,
	            action: Actions.LogIn,
	            value: { logged: true, mode: 1 },
	            label: 'User Logged In'
	        };
	    }
	
	    saveToLogger(objData);
	}
	
	function LogUserModule(_selfId, _uid, action) {
	    if (action == 'create') {
	        var objData = {
	            uid: _selfId,
	            category: 'User',
	            action: Actions.NewUser,
	            value: { userId: _uid },
	            label: 'New User Created'
	        };
	
	        saveToLogger(objData);
	    }
	
	    if (action == 'update') {
	        var objData = {
	            uid: _selfId,
	            category: 'User',
	            action: Actions.UpdateUser,
	            value: { userId: _uid },
	            label: 'User Updated'
	        };
	
	        saveToLogger(objData);
	    }
	}
	
	function updateAttendance(req, res) {
	
	    try {
	        // console.log("Update Recieved", req.body.data)
	        var _logId = req.body.data._id;
	        var _checkOutTime = moment().utc().toDate();
	        var _topicsViewed = req.body.data.topicsViewed;
	
	        _datalog2.default.findOne({ _id: mongoose.Types.ObjectId(_logId) }).exec(function (err, doc) {
	            // console.log(doc);
	            if (err) {
	                res.json({
	                    status: false,
	                    error: 'Invalid Update'
	                });
	            } else if (doc) {
	                // console.log(doc);
	                _datalog2.default.update({ _id: mongoose.Types.ObjectId(_logId) }, { $set: {
	                        'value.schedule': doc.value.schedule,
	                        'value.courseId': doc.value.courseId,
	                        'value.scheduleId': doc.value.scheduleId,
	                        'value.slotId': doc.value.slotId,
	                        'value.checkOutTime': _checkOutTime } }).exec(function (err, result) {
	                    if (err) {
	                        res.json({
	                            status: false,
	                            error: 'Invalid Update'
	                        });
	                    } else {
	                        res.json({
	                            status: true,
	                            error: 'Update Successfull'
	                        });
	                    }
	                });
	            } else {
	                res.json({
	                    status: false,
	                    error: 'Invalid Update'
	                });
	            }
	        });
	    } catch (e) {
	        console.log('error in updateAttendance', e);
	        res.json({
	            status: false,
	            error: 'Internal server error'
	        });
	    }
	}
	
	function saveVisiteTopic(req, res) {
	    (0, _authorization.checkValidRequest)(req.headers, function (person) {
	        try {
	            if (person != null && req.body.data && req.body.data.TopicId && req.body.data.roomId) {
	                var CheckInTime = moment(req.body.data.checkInTime, "x").utc().toDate();
	
	                var objLog = {
	                    uid: person._id,
	                    category: Actions.TopicStatus,
	                    action: Actions.TopicStatus,
	                    value: {
	                        topicId: req.body.data.TopicId,
	                        checkInTime: CheckInTime,
	                        roomId: req.body.data.roomId,
	                        status: 1
	                    },
	                    label: 'Topic Visited'
	                };
	
	                _datalog2.default.findOne({ uid: person._id, "value.topicId": objLog.value.topicId, "value.roomId": objLog.value.roomId }, function (error, doc) {
	                    if (error) {
	                        res.json({
	                            status: false,
	                            error: 'Error In Find Log'
	                        });
	                    } else if (doc) {
	                        _datalog2.default.update({ uid: person._id, "value.topicId": objLog.value.topicId, "value.roomId": objLog.value.roomId }, {
	                            $set: {
	                                "value.checkInTime": objLog.value.checkInTime
	                            }
	                        }).exec(function (err, result) {
	                            if (err) {
	                                res.json({
	                                    status: false,
	                                    error: 'Invalid Update'
	                                });
	                            } else {
	                                res.json({
	                                    status: true,
	                                    message: 'Update Successfull'
	                                });
	                            }
	                        });
	                    } else {
	                        saveToLogger(objLog, function (doc) {
	                            res.json({ log: doc });
	                        });
	                    }
	                });
	            } else {
	                res.json({
	                    status: false,
	                    error: "Invalid user."
	                });
	            }
	        } catch (e) {
	            console.log("Error in fetch student submission assignments ", e);
	            res.json({
	                status: false,
	                error: "Internal server error."
	            });
	        }
	    });
	}
	
	function markAsCompleteTopic(req, res) {
	    (0, _authorization.checkValidRequest)(req.headers, function (person) {
	        try {
	            if (person != null && req.body.data && req.body.data.TopicId && req.body.data.checkInTime && req.body.data.roomId) {
	                var TopicId = req.body.data.TopicId;
	                var CheckInTime = moment(req.body.data.checkInTime, "x").utc().toDate();
	                _datalog2.default.findOne({ uid: person._id, "value.topicId": TopicId, "value.roomId": req.body.data.roomId }).exec(function (err, doc) {
	                    if (err) {
	                        res.json({
	                            status: false,
	                            error: 'Invalid Update'
	                        });
	                    } else if (doc) {
	                        var CheckOutTime = moment(req.body.data.CheckOutTime, "x").utc().toDate();
	                        var setQuery = null;
	                        // console.log('marked',req.body.data.marked)
	                        if (req.body.data.marked == true) {
	                            setQuery = {
	                                $set: {
	                                    "value.CheckOutTime": CheckOutTime,
	                                    "value.status": 2,
	                                    "value.CompletedTime": CheckOutTime
	                                }
	
	                            };
	                        } else if (req.body.data.marked == false && req.body.data.unmount == false) {
	                            setQuery = {
	                                $unset: {
	                                    "value.CompletedTime": ""
	                                },
	                                $set: {
	                                    "value.status": 1
	
	                                }
	                            };
	                        } else {
	                            setQuery = {
	                                $set: {
	                                    "value.CheckOutTime": CheckOutTime
	                                }
	
	                            };
	                        }
	                        _datalog2.default.update({ uid: person._id, "value.topicId": TopicId, "value.roomId": req.body.data.roomId }, setQuery).exec(function (err, result) {
	                            if (err) {
	                                res.json({
	                                    status: false,
	                                    error: 'Invalid Update'
	                                });
	                            } else {
	                                _datalog2.default.findOne({ uid: person._id, "value.topicId": TopicId, "value.roomId": req.body.data.roomId }, function (error, doc) {
	                                    if (error) {
	                                        res.json({
	                                            status: false,
	                                            error: 'Error'
	                                        });
	                                    } else {
	                                        res.json({ status: true, data: doc });
	                                    }
	                                });
	                            }
	                        });
	                    } else {
	                        res.json({
	                            status: false,
	                            error: 'Invalid Update'
	                        });
	                    }
	                });
	            } else {
	                res.json({
	                    status: false,
	                    error: "Invalid request"
	                });
	            }
	        } catch (e) {
	            console.log("Error in fetch student submission assignments ", e);
	            res.json({
	                status: false,
	                error: "Internal server error."
	            });
	        }
	    });
	}
	
	function getTopicStatus(req, res) {
	    (0, _authorization.checkValidRequest)(req.headers, function (person) {
	        try {
	            if (person != null && req.params.topicId && req.params.roomId) {
	                _datalog2.default.findOne({ uid: person._id, "value.topicId": req.params.topicId, "value.roomId": req.params.roomId }, { "value.status": 1 }).exec(function (err, doc) {
	                    if (err) {
	                        res.json({
	                            status: false,
	                            error: 'Invalid data'
	                        });
	                    } else if (doc) {
	                        res.json({
	                            status: true,
	                            data: doc
	                        });
	                    } else {
	                        res.json({
	                            status: false,
	                            error: 'Invalid data'
	                        });
	                    }
	                });
	            } else {
	                res.json({
	                    status: false,
	                    error: "Invalid request"
	                });
	            }
	        } catch (e) {
	            console.log("Error in getTopicStatus  ", e);
	            res.json({
	                status: false,
	                error: "Internal server error."
	            });
	        }
	    });
	}

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.sendPushNotificationIos = sendPushNotificationIos;
	exports.sendPushNotificationAndroid = sendPushNotificationAndroid;
	exports.showHideRoomsIOS = showHideRoomsIOS;
	exports.setDeviceIdIOS = setDeviceIdIOS;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _authorization = __webpack_require__(10);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var apn = __webpack_require__(236);
	var gcm = __webpack_require__(251);
	var https = __webpack_require__(243);
	
	var mongoose = __webpack_require__(2);
	
	
	/*DSS + Android push notification*/
	var sendOneSignalNotification = function sendOneSignalNotification(data) {
		var headers = {
			"Content-Type": "application/json; charset=utf-8",
			"Authorization": "Basic NjcxNTEwODQtZGY2OC00M2ZkLWExODUtMGNiZGZmYjBiODA3"
		};
	
		var options = {
			host: "onesignal.com",
			port: 443,
			path: "/api/v1/notifications",
			method: "POST",
			headers: headers
		};
	
		var req = https.request(options, function (res) {
			res.on('data', function (data) {
				console.log("Response:");
				console.log(JSON.parse(data));
			});
		});
	
		req.on('error', function (e) {
			console.log("ERROR:");
			console.log(e);
		});
	
		req.write(JSON.stringify(data));
		req.end();
	};
	/*DSS - Android push notification*/
	
	function sendPushNotificationIos(notificationType, alertMessage, sendToDevice, sentBy, sentTo, businessType) {
		try {
			/*Added sender name in iOS push notifications + DSS*/
			_users2.default.findOne({ _id: mongoose.Types.ObjectId(sentBy) }).exec(function (err, sender) {
				/*Added sender name in iOS push notifications - DSS*/
				var options = null;
				if (businessType == 'LMS' || businessType == 'Presenter') {
					options = {
						token: {
							key: process.env.PWD + '/server/util/APNsAuthKey_L7X3K649G8.p8',
							keyId: "L7X3K649G8",
							teamId: "NN4FAH5SZT"
						},
						production: _config2.default.iosProduction
					};
				} else if (businessType == 'Conference') {
					options = {
						token: {
							key: process.env.PWD + '/server/util/AuthKey_QN4ALJUQS6.p8',
							keyId: "QN4ALJUQS6",
							teamId: "NN4FAH5SZT"
						},
						production: _config2.default.iosProduction
					};
				} else {
					options = {
						token: {
							key: process.env.PWD + '/server/util/APNsAuthKey_L7X3K649G8.p8',
							keyId: "L7X3K649G8",
							teamId: "NN4FAH5SZT"
						},
						production: _config2.default.iosProduction
					};
				}
				var apnProvider = new apn.Provider(options);
				var notification_body = {
					alert: alertMessage,
					payload: { 'notificationType': notificationType, 'sentBy': sentBy, 'sentTo': sentTo },
					title: sender.firstname
				};
				notification_body['topic'] = businessType == "LMS" || businessType == "Presenter" ? "com.pvc.InstaVC.InstaVCiOS" : "com.InstaVCiOS.conferenceapp";
				var note = new apn.Notification(notification_body);
				apnProvider.send(note, sendToDevice).then(function (result) {
					console.dir(result);
					if (result && result.failed !== []) console.dir(result.failed);
				});
			});
		} catch (e) {
			console.log('error in sendPushNotificationIos', e);
			res.json({
				status: false,
				error: 'Internal server error'
			});
		}
	}
	
	/*{
	  // expiry = Math.floor(Date.now() / 1000) + 3600, // Expires 1 hour from now. 
	  // badge : 3,
	  // sound : "ping.aiff",
	alert : alertMessage,
	payload : { 'notificationType' : notificationType, 'sentBy' : sentBy, 'sentTo' : sentTo },
	topic : "com.pvc.InstaVC.InstaVCiOS",
	//Added sender name in iOS push notifications - DSS
	title: sender.firstname
	}*/
	
	function sendPushNotificationAndroid(notificationType, alertMessage, sendToDevice, sentBy, sentTo) {
		console.log(notificationType, alertMessage, sendToDevice, sentBy, sentTo);
	
		try {
			// Set up the sender with your GCM/FCM API key (declare this once for multiple messages) 
			// var sender = new gcm.Sender('com.instavc.conference');
	
			// Prepare a message to be sent 
			// var message = new gcm.Message({
			//     data: {
			//     				"message"	: alertMessage,
			//     				'sentBy' : sentBy,
			//     				'sentTo' : sentTo
			//     			}
			// });
	
			/*DSS + Android push notification*/
			_users2.default.findOne({ _id: mongoose.Types.ObjectId(sentBy) }).exec(function (err, sender) {
				var androidMessage = {
					app_id: _config2.default.android_api_key,
					headings: { "en": sender.firstname },
					contents: { "en": alertMessage },
					include_player_ids: [sendToDevice]
				};
				sendOneSignalNotification(androidMessage);
			});
			/*DSS - Android push notification*/
	
			// Specify which registration IDs to deliver the message to 
			// var regTokens = [sendToDevice];
	
			// Actually send the message 
			// sender.send(message, { registrationTokens: regTokens }, function (err, response) {
			//    if (err) console.error("err--- ", err);
			//    else console.log("response---- ", response);
			// });
		} catch (e) {
			console.log('error in sendPushNotificationAndroid', e);
			res.json({
				status: false,
				error: 'Internal server error'
	
			});
		}
	}
	
	function showHideRoomsIOS(req, res) {
		res.json({ show: _config2.default.iosShowRoom });
	}
	
	function setDeviceIdIOS(req, res) {
		// console.log("deviceId - ", req.body);
		try {
			// Varifying request is valid or not
			(0, _authorization.checkValidRequest)(req.headers, function (person) {
				if (person != null && req.body.deviceData) {
					if (req.body.deviceData && req.body.deviceData.deviceId) {
						_users2.default.update({
							_id: mongoose.Types.ObjectId(person._id)
						}, {
							$set: {
								deviceId: req.body.deviceData.deviceId,
								deviceType: req.body.deviceData.deviceType
							}
						}, function (err, res) {});
						res.json({ status: true, message: "Sucessfully updated deviceId." });
					}
				} else {
					res.json({ status: false, error: "Error while updating deviceId." });
				}
			});
		} catch (e) {
			console.log('error in setDeviceIdIOS', e);
			res.json({
				status: false,
				error: 'Internal server error'
	
			});
		}
	}

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fetchMyRoomsSchedule = fetchMyRoomsSchedule;
	exports.createSchedule = createSchedule;
	exports.updateSchedule = updateSchedule;
	exports.updateSlotScheule = updateSlotScheule;
	exports.getScheduleDates = getScheduleDates;
	exports.getCurrentDateSchedules = getCurrentDateSchedules;
	exports.getPastSchedules = getPastSchedules;
	exports.deleteMyRecurringSchedule = deleteMyRecurringSchedule;
	exports.deleteMySchedule = deleteMySchedule;
	exports.getSchedule = getSchedule;
	exports.executeRoomQuery = executeRoomQuery;
	exports.getTopics = getTopics;
	exports.checkRoomSchedule = checkRoomSchedule;
	exports.sendInstructorSchEmail = sendInstructorSchEmail;
	exports.sendScheduleEmail = sendScheduleEmail;
	exports.saveScheduleCallback = saveScheduleCallback;
	exports.checkRoomValidity = checkRoomValidity;
	exports.getDateSchedules = getDateSchedules;
	exports.fetchRoomSelector = fetchRoomSelector;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _schedule = __webpack_require__(43);
	
	var _schedule2 = _interopRequireDefault(_schedule);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _adminUser = __webpack_require__(13);
	
	var _students = __webpack_require__(33);
	
	var _students2 = _interopRequireDefault(_students);
	
	var _topic = __webpack_require__(34);
	
	var _topic2 = _interopRequireDefault(_topic);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _authorization = __webpack_require__(10);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForUserCreation = _interopRequireWildcard(_emailFunctions);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** 
	* @Author: "Prudhvi",
	* @Purpose: "CRUD oprations on schedule."
	*/
	
	var _ = __webpack_require__(7);
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	var validator = __webpack_require__(12);
	
	function fetchMyRoomsSchedule(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	
	      //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	      if (person != null && person.profile.companyid && person.profile.companyid._id) {
	        var objEntity = {
	          uid: person._id,
	          role: person.role,
	          cid: person.profile.companyid._id
	          // get selector for fetch rooms according to role
	        };fetchRoomSelector(objEntity, function (selector, instructorIds) {
	          if (selector != null) {
	            var query = _room2.default.find(selector).select('roomName selPackage').populate('selPackage', 'features');
	            executeRoomQuery(query, function (err, doc, ids) {
	              if (doc != null) {
	                getTopics(ids, doc, function (response) {
	                  if (response == null) res.json({ status: true, data: doc, topics: {} });else res.json({ status: true, data: doc, topics: response });
	                });
	              } else res.json({ status: false });
	            });
	          } else res.json({ status: false });
	        });
	      } else res.json({ status: false /*, error : "Invalid request."*/ });
	    } catch (e) {
	      console.log("error in fetchMyRoomsSchedule", e);
	      res.json({ status: false /*, error : "Internal server error."*/ });
	    }
	  });
	}
	
	/**
	* @Function Name: "createSchedule",
	* @Purpose: "To create new schedule.",
	* @Request Object: obj : {uid, startDate, endDate, todayStart, todayEnd, password, roomId, meetingName, topicId, recurring, type, repeatDuration, repeatOn, no_of_ocurence, endDateType },
	* @Response Object: Success- {status : true, data : data_schedules, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function createSchedule(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null && req.body && req.body.data && req.body.data.roomId && mongoose.Types.ObjectId.isValid(req.body.data.roomId) && req.body.data.duration && req.body.data.startDate) {
	        var obj = req.body.data;
	        var entity = {
	          roomId: obj.roomId,
	          meetingName: obj.meetingName,
	          createdBy: mongoose.Types.ObjectId(person._id),
	          modifiedBy: mongoose.Types.ObjectId(person._id),
	          createdAt: Number(moment().utc().format('x')),
	          modifiedAt: Number(moment().utc().format('x')),
	          duration: Number(obj.duration)
	        };
	        if (obj.topicId) {
	          entity['topicId'] = obj.topicId;
	        }
	        if (obj.password) {
	          entity['password'] = obj.password;
	        }
	
	        setEntity(obj, function (newError, newEntity) {
	          if (newEntity != null) {
	            entity = Object.assign({}, entity, newEntity);
	
	            var checkValidityData = {
	              roomid: entity.roomId,
	              date: entity.endDate
	
	              // check the current room expire date validity with schdule date 
	            };checkRoomValidity(checkValidityData, function (validity, roomName) {
	
	              /* if response true
	                  schedule date before the expire date of the room package 
	                else
	                  schedule date After the expire date of the room package */
	              if (validity == true) {
	
	                var schedule_selector = {
	                  roomId: obj.roomId,
	                  startDate: { $lte: entity.endDate },
	                  endDate: { $gte: entity.startDate }
	                };
	
	                var fullname = person.firstname + ' ';
	                fullname += person.lastname != undefined ? person.lastname : '';
	
	                //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"  
	                var saveEntity = {
	                  entity: entity,
	                  role: person.role,
	                  cid: person.profile.companyid && person.profile.companyid._id ? person.profile.companyid._id : '',
	                  fullname: fullname,
	                  email: person.email,
	                  roomid: entity.roomId,
	                  uid: person._id,
	                  start: obj.todayStart,
	                  end: obj.todayEnd
	                };
	
	                var roomSchQuery = _schedule2.default.find(schedule_selector);
	                roomSchQuery.exec(function (roomerror, roomSchedules) {
	                  if (roomerror) {
	                    res.json({ status: false, error: roomerror });
	                  } else if (roomSchedules && roomSchedules.length > 0) {
	                    var objEntity = {
	                      data: roomSchedules,
	                      newdata: entity.dates,
	                      roomName: roomName
	
	                      // check and get the conflicted schedule data 
	                    };checkRoomSchedule(objEntity, function (checkresponse) {
	
	                      /* if response is null 
	                              new schedule is not conflicted with other schedules and it will update the schedule
	                          else
	                            response as conflicted schedule data */
	                      if (checkresponse != null) {
	                        if (checkresponse.msg) res.json({ status: false, error: checkresponse.msg });else res.json({ status: false, error: 801, object: checkresponse });
	                      } else {
	
	                        // not conflict with exiting schedules, create new schedule
	                        saveScheduleCallback(saveEntity, function (scherr, schData) {
	                          if (scherr) res.json({ status: false, error: scherr });else if (schData) res.json({ status: true, data: schData, message: "Schedule created successfully." });else res.json({ status: false, error: "Internal server error" });
	                        });
	                      }
	                    });
	                  } else {
	
	                    saveScheduleCallback(saveEntity, function (scherr, schData) {
	                      if (scherr) res.json({ status: false, error: scherr });else if (schData) res.json({ status: true, data: schData, message: "Schedule created successfully." });else res.json({ status: false, error: "Internal server error" });
	                    });
	                  }
	                });
	              } else if (validity == false) {
	
	                //code changed by - Najib, Desc- Relevent message in response based on businessType
	                var roomType = null;
	                if (person.profile.companyid && person.profile.companyid.businessType && person.profile.companyid.businessType == 'LMS') {
	                  roomType = "Course";
	                } else {
	                  roomType = "Room";
	                }
	                res.json({ status: false, error: "Your" + ' ' + roomType + ' ' + "will be expired before this schedule" });;
	              } else {
	                res.json({ status: false, error: validity });
	              }
	            });
	          } else {
	            res.json({ status: false, error: newError });
	          }
	        });
	      } else {
	        res.json({ status: false, error: "Invalid request." });
	      }
	    } catch (e) {
	      console.log("error in createSchedule ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "updateSchedule",
	* @Purpose: "To update schedule.",
	* @Request Object: obj : {uid, startTime, endTime, date, password, roomId, meetingName, topicId, _id},
	* @Response Object: Success- {status : true, data : data_schedules, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function updateSchedule(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	
	      if (person != null && req.body.data && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
	        var obj = req.body.data;
	        var validschedule = _schedule2.default.findOne({ _id: req.params.id });
	        validschedule.exec(function (validerr, schedule) {
	          if (validerr) {
	            res.json({ status: false, error: "Internal server error, Please try again." });
	          } else if (schedule) {
	            var entity = {
	              roomId: obj.roomId,
	              meetingName: obj.meetingName,
	              createdBy: mongoose.Types.ObjectId(person._id),
	              modifiedBy: mongoose.Types.ObjectId(person._id),
	              createdAt: Number(moment().utc().format('x')),
	              modifiedAt: Number(moment().utc().format('x')),
	              duration: Number(obj.duration)
	              // startDate : obj.startDate
	            };
	            if (obj.topicId) {
	              entity['topicId'] = obj.topicId;
	            }
	            if (obj.password) {
	              entity['password'] = obj.password;
	            }
	            var temp_startDate = obj.startDate;
	            if (obj.recurring == true) {
	              obj['startDate'] = obj.edit_start_date;
	            }
	
	            // console.log("obj === ", obj);
	            setEntity(obj, function (newError, newEntity) {
	              if (newEntity != null) {
	                entity = Object.assign({}, entity, newEntity);
	
	                var checkValidityData = {
	                  roomid: entity.roomId,
	                  date: entity.endDate
	
	                  // check the current room expire date validity with schdule date 
	                };checkRoomValidity(checkValidityData, function (validity, roomName) {
	
	                  /* if response true
	                      schedule date before the expire date of the room package 
	                    else
	                      schedule date After the expire date of the room package */
	                  if (validity == true) {
	                    var checkdates = function checkdates(dates) {
	                      return dates.startTime < obj.edit_start_date || dates.startTime < now;
	                    };
	
	                    var schedule_selector = {
	                      _id: { $ne: req.params.id },
	                      roomId: obj.roomId,
	                      startDate: { $lte: entity.endDate },
	                      endDate: { $gte: entity.startDate }
	                    };
	
	                    // console.log("entity 1 ==== ", entity);
	
	                    var fullname = person.firstname + ' ';
	                    fullname += person.lastname != undefined ? person.lastname : '';
	                    entity['startDate'] = temp_startDate;
	                    var now = Number(moment().seconds(0).utc().format('x'));
	
	                    var pastdates = entity.pattern && entity.pattern != '' && entity.pattern != 'undefined' && entity.pattern != undefined ? schedule.dates.filter(checkdates) : [];
	                    // let pastdates = schedule.pattern && schedule.pattern != '' && schedule.pattern != 'undefined' && schedule.pattern != undefined ? schedule.dates.filter(checkdates) : [];
	                    var temp_dates = entity.dates;
	                    entity['dates'] = temp_dates.concat(pastdates);
	                    // console.log("error ========= ", asasasas);
	
	                    // console.log("entity ==== ", entity);
	                    //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	                    var saveEntity = {
	                      entity: entity,
	                      role: person.role,
	                      cid: person.profile.companyid && person.profile.companyid._id ? person.profile.companyid._id : '',
	                      fullname: fullname,
	                      email: person.email,
	                      roomid: entity.roomId,
	                      uid: person._id,
	                      start: obj.todayStart,
	                      end: obj.todayEnd
	                    };
	                    var roomSchQuery = _schedule2.default.find(schedule_selector);
	                    roomSchQuery.exec(function (roomerror, roomSchedules) {
	                      if (roomerror) {
	                        res.json({ status: false, error: roomerror });
	                      } else if (roomSchedules && roomSchedules.length > 0) {
	                        var objEntity = {
	                          data: roomSchedules,
	                          newdata: entity.dates,
	                          roomName: roomName
	
	                          // check and get the conflicted schedule data 
	                        };checkRoomSchedule(objEntity, function (checkresponse) {
	
	                          /* if response is null 
	                                  new schedule is not conflicted with other schedules and it will update the schedule
	                              else
	                                response as conflicted schedule data */
	                          if (checkresponse != null) {
	                            if (checkresponse.msg) res.json({ status: false, error: checkresponse.msg });else res.json({ status: false, error: 801, object: checkresponse });
	                          } else {
	
	                            // not conflict with exiting schedules, create new schedule
	                            updateScheduleCallback(saveEntity, schedule, function (scherr, schData) {
	                              if (scherr) res.json({ status: false, error: scherr });else if (schData) res.json({ status: true, data: schData, message: "Schedule updated successfully." });else res.json({ status: false, error: "Internal server error" });
	                            });
	                          }
	                        });
	                      } else {
	
	                        updateScheduleCallback(saveEntity, schedule, function (scherr, schData) {
	                          if (scherr) res.json({ status: false, error: scherr });else if (schData) res.json({ status: true, data: schData, message: "Schedule updated successfully." });else res.json({ status: false, error: "Internal server error" });
	                        });
	                      }
	                    });
	                  } else if (validity == false) {
	
	                    //code changed by - Najib, Desc- Relevent message in response based on businessType
	                    var roomType = null;
	                    if (person.profile.companyid && person.profile.companyid.businessType && person.profile.companyid.businessType == 'LMS') {
	                      roomType = "Course";
	                    } else {
	                      roomType = "Room";
	                    }
	                    res.json({ status: false, error: "Your" + ' ' + roomType + ' ' + "will be expired before this schedule" });
	                  } else {
	                    res.json({ status: false, error: validity });
	                  }
	                });
	              } else {
	                res.json({ status: false, error: newError });
	              }
	            });
	          } else {
	            res.json({ status: false, error: "Invalid schedule." });
	          }
	        });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("e in updateSchedule === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	function updateSlotScheule(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null && req.body.data && req.body.data._id && mongoose.Types.ObjectId.isValid(req.body.data._id) && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
	        var obj = req.body.data;
	        var checkschedule = _schedule2.default.findOne({ _id: req.params.id, "dates._id": obj._id }, { "dates.$._id": 1, meetingName: 1, createdBy: 1, roomId: 1, startDate: 1, endDate: 1 }).populate('roomId', 'roomName');
	        checkschedule.exec(function (scherr, schedule) {
	          if (schedule) {
	            if (schedule.createdBy._str == person._id._str) {
	              var updateEntity = {
	                id: req.params.id,
	                uid: person._id,
	                email: person.email,
	                role: person.role,
	                roomId: schedule.roomId._id,
	                firstname: person.firstname,
	                starttime: schedule.dates[0].startTime,
	                endtime: schedule.dates[0].endTime,
	                startTime: obj.startTime,
	                endTime: obj.endTime,
	                slotId: obj._id,
	                meetingName: schedule.meetingName
	              };
	              updateEntity['lastname'] = person.lastname ? person.lastname : null;
	              if (obj.endTime > schedule.endDate) {
	                var checkValidityData = {
	                  roomid: schedule.roomId,
	                  date: obj.endTime
	                };
	
	                // check the current room expire date validity with schdule date 
	                checkRoomValidity(checkValidityData, function (validity, roomName) {
	
	                  /* if response true
	                      schedule date before the expire date of the room package 
	                    else
	                      schedule date After the expire date of the room package */
	                  if (validity == true) {
	                    var schedule_selector = {
	                      _id: { $ne: req.params.id },
	                      roomId: schedule.roomId,
	                      startDate: { $lte: obj.endTime },
	                      endDate: { $gte: obj.startTime }
	                    };
	                    updateEntity['endDate'] = obj.endTime;
	
	                    var checkroomsch = _schedule2.default.find(schedule_selector);
	                    checkroomsch.exec(function (roomerror, roomSchedules) {
	                      if (roomerror) {
	                        res.json({ status: false, error: roomerror });
	                      } else if (roomSchedules && roomSchedules.length > 0) {
	                        var objEntity = {
	                          data: roomSchedules,
	                          newdata: [obj],
	                          roomName: schedule.roomId.roomName
	
	                          // check and get the conflicted schedule data 
	                        };checkRoomSchedule(objEntity, function (checkresponse) {
	
	                          /* if response is null 
	                                  new schedule is not conflicted with other schedules and it will update the schedule
	                              else
	                                response as conflicted schedule data */
	                          if (checkresponse != null) {
	                            if (checkresponse.msg) res.json({ status: false, error: checkresponse.msg });else res.json({ status: false, error: 801, object: checkresponse });
	                          } else {
	
	                            // not conflict with exiting schedules, create new schedule
	                            updateSlotScheduleCallback(updateEntity, function (scherr, schres) {
	                              if (scherr != null) res.json({ status: false, error: scherr });else res.json({ status: true, message: "Schedule updated successfully." });
	                            });
	                          }
	                        });
	                      } else {
	
	                        // not conflict with exiting schedules, create new schedule
	                        updateSlotScheduleCallback(updateEntity, function (scherr, schres) {
	                          if (scherr != null) res.json({ status: false, error: scherr });else res.json({ status: true, message: "Schedule updated successfully." });
	                        });
	                      }
	                    });
	                  } else if (validity == false) {
	                    res.json({ status: false, error: "Your room will be expired before this schedule" });
	                  } else {
	                    res.json({ status: false, error: validity });
	                  }
	                });
	              } else {
	                var schedule_selector = {
	                  _id: { $ne: req.params.id },
	                  roomId: schedule.roomId,
	                  startDate: { $lte: schedule.endDate },
	                  endDate: { $gte: obj.startTime }
	                };
	
	                var checkroomsch = _schedule2.default.find(schedule_selector);
	                checkroomsch.exec(function (roomerror, roomSchedules) {
	                  if (roomerror) {
	                    res.json({ status: false, error: roomerror });
	                  } else if (roomSchedules && roomSchedules.length > 0) {
	                    var objEntity = {
	                      data: roomSchedules,
	                      newdata: [obj],
	                      roomName: schedule.roomId.roomName
	
	                      // check and get the conflicted schedule data 
	                    };checkRoomSchedule(objEntity, function (checkresponse) {
	
	                      /* if response is null 
	                              new schedule is not conflicted with other schedules and it will update the schedule
	                          else
	                            response as conflicted schedule data */
	                      if (checkresponse != null) {
	                        if (checkresponse.msg) res.json({ status: false, error: checkresponse.msg });else res.json({ status: false, error: 801, object: checkresponse });
	                      } else {
	
	                        // not conflict with exiting schedules, create new schedule
	                        updateSlotScheduleCallback(updateEntity, function (scherr, schres) {
	                          if (scherr != null) res.json({ status: false, error: scherr });else res.json({ status: true, message: "Schedule updated successfully." });
	                        });
	                      }
	                    });
	                  } else {
	                    // not conflict with exiting schedules, create new schedule
	                    updateSlotScheduleCallback(updateEntity, function (scherr, schres) {
	                      if (scherr != null) res.json({ status: false, error: scherr });else res.json({ status: true, message: "Schedule updated successfully." });
	                    });
	                  }
	                });
	              }
	            } else {
	              res.json({ status: false, error: "Access denied." });
	            }
	          } else {
	            res.json({ status: false, error: "Invalid schedule." });
	          }
	        });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("e in updateSlotScheule === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "getScheduleDates",
	* @Purpose: "To fetch scheduled dates.",
	* @Request Object: {},
	* @Response Object: Success- {dates : [Date]}, Failure- {dates : null},
	* @Author: "Prudhvi"
	* done with recurring
	*/
	function getScheduleDates(req, res) {
	
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	
	      //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	      if (person != null) {
	
	        var objEntity = {
	          role: person.role,
	          cid: person.profile.companyid && person.profile.companyid._id ? person.profile.companyid._id : '',
	          uid: person._id
	
	          // get selector for fetch room based on role 
	        };fetchRoomSelector(objEntity, function (selector, instructorIds) {
	          if (selector != null) {
	            var roomQuery = _room2.default.find(selector);
	            roomQuery.lean().exec(function (roomerr, roomdoc) {
	              if (roomerr) res.json({ dates: null });else if (roomdoc && roomdoc.length > 0) {
	                var roomIds = [];
	                _.forIn(roomdoc, function (value, key) {
	                  roomIds.push(mongoose.Types.ObjectId(value._id));
	                });
	                var query = _schedule2.default.aggregate([{ $project: { "dates": 1,
	                    "roomId": 1,
	                    "createdBy": 1
	                  } }, { $match: { "roomId": { $in: roomIds } } }, { $unwind: '$dates' }]);
	                query.exec(function (err, doc) {
	                  if (err) res.json({ dates: null });
	                  if (doc && doc.length > 0) {
	                    if (person.role == _adminUser.Roles.Student) {
	                      var processDates = function processDates() {
	                        var item = doc[count - 1];
	                        if (item && item.createdBy && _.findIndex(instructorIds, function (o) {
	                          return o.instructor = item.createdBy;
	                        }) > -1 && item && item.dates) {
	                          student_dates.push(item.dates.startTime);
	                        }
	                        count = count - 1;
	                        if (count > 0) {
	                          processDates();
	                        } else {
	                          // done
	                          res.json({ dates: student_dates });
	                        }
	                      };
	
	                      var student_dates = [];
	                      var count = doc.length;
	
	                      processDates();
	                    } else {
	                      var _processDates = function _processDates() {
	                        var item = doc[_count - 1];
	                        if (item && item.dates) {
	                          user_dates.push(item.dates.startTime);
	                        }
	                        _count = _count - 1;
	                        if (_count > 0) {
	                          _processDates();
	                        } else {
	                          // done
	                          res.json({ dates: user_dates });
	                        }
	                      };
	
	                      // pass all schedule dates in an array format
	                      var user_dates = [];
	                      var _count = doc.length;
	
	                      _processDates();
	                    }
	                  } else {
	                    res.json({ dates: null });
	                  }
	                });
	              } else res.json({ dates: null });
	            });
	          } else res.json({ dates: null });
	        });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("e in getScheduleDates === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "getCurrentDateSchedules",
	* @Purpose: "To fetch selected date schedule.",
	* @Request Object: params : { startDate , endDate},
	* @Response Object: Success- {status : true, data : "date_schedules"}, Failure- {status : false, error},
	* @Author: "Prudhvi"
	* done with recurring
	*/
	function getCurrentDateSchedules(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null && req.params.startDate && req.params.endDate) {
	        var obj = req.params;
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var objEntity = {
	          uid: person._id,
	          start: Number(obj.startDate),
	          end: Number(obj.endDate),
	          role: person.role,
	          cid: person.profile.companyid && person.profile.companyid._id ? person.profile.companyid._id : ''
	        };
	
	        // get current date schedules 
	        getDateSchedules(objEntity, function (error, schData) {
	          if (error) {
	            console.log("error ==== ", error);
	            res.json({ status: false, error: error });
	          } else if (schData) res.json({ status: true, data: schData });else res.json({ status: false, error: "Internal server error." });
	        });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("e in getCurrentDateSchedules === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/*export function getScheduleEvents(req, res) {
	  let header = req.headers;
	
	  // Varifying request is valid or not
	  checkValidRequest(header, function(person){
	    try{
	      if (person != null && req.params.startDate && req.params.endDate ) {
	        let obj = req.params;
	        let objEntity = {
	          uid : person._id,
	          start : Number(obj.startDate),
	          end : Number(obj.endDate),
	          role : person.role,
	          cid : person.profile.companyid
	        };
	
	        // get current date schedules 
	        getDateSchedules(objEntity, function(error, schData){
	          if (error) {
	            console.log("error ==== ",error);
	            res.json({ status : false, error : error });
	          } else if (schData) res.json({ status : true, data : schData });
	          else res.json({ status : false, error : "Internal server error." }); 
	        });
	
	      } else res.json({ status : false, error : "Invalid request." });
	    } catch(e) {
	      console.log("e in getScheduleEvents === ", e);
	      res.json({ status : false, error : "Internal server error." });
	    }
	  });
	};
	*/
	/**
	* @Function Name: "getPastSchedules",
	* @Purpose: "To fetch selected date schedule.",
	* @Request Object: params : { currentDate : "Date"},
	* @Response Object: Success- {status : true, data : "date_schedules"}, Failure- {status : false, error},
	* @Author: "Prudhvi"
	* done with recurring
	*/
	function getPastSchedules(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null && req.params.currentDate) {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        // let obj = req.query;
	        var objEntity = {
	          uid: person._id,
	          role: person.role,
	          cid: person.profile.companyid && person.profile.companyid._id ? person.profile.companyid._id : ''
	        };
	        fetchRoomSelector(objEntity, function (selector, instructorIds) {
	          if (selector) {
	            var roomQuery = _room2.default.find(selector);
	            roomQuery.exec(function (roomerr, roomdoc) {
	              if (roomerr) res.json({ status: false, error: roomerr });
	              if (roomdoc) {
	                var roomIds = [];
	                var start = moment(req.params.currentDate, 'x').utc().toDate();
	                _.forIn(roomdoc, function (value, key) {
	                  roomIds.push(mongoose.Types.ObjectId(value._id));
	                });
	
	                _schedule2.default.aggregate([{ $unwind: "$dates" }, { $match: {
	                    'dates.startTime': {
	                      $lt: Number(req.params.currentDate)
	                    }, roomId: { $in: roomIds }
	                  } }, { $limit: 30 }, { $sort: { 'dates.startTime': 1 } }], function (err, doc) {
	                  if (err) {
	                    console.log("err in past schedule === ", err);
	                    res.json({ status: false, error: err });
	                  } else if (doc && doc.length > 0) {
	                    var processPast = function processPast() {
	                      var item = doc[count - 1];
	                      _users2.default.findOne({ _id: item.createdBy }, { firstname: 1, profile: 1 }, function (usererr, user) {
	                        if (user) {
	                          item['createdBy'] = user;
	                          _room2.default.findOne({ _id: item.roomId }, { roomKey: 1, roomName: 1 }, function (roomerr, room) {
	                            if (room) {
	                              item['roomId'] = room;
	                              if (person.role == _adminUser.Roles.Student) {
	                                if (item.createdBy && _.findIndex(instructorIds, function (o) {
	                                  return o.instructor = item.createdBy._id;
	                                }) > -1) {
	                                  mySchedule.push(item);
	                                }
	                              } else {
	                                mySchedule.push(item);
	                              }
	                              count = count - 1;
	                              if (count > 0) {
	                                processPast();
	                              } else {
	                                // done
	                                // console.log("mySchedule in past === ", mySchedule);
	                                res.json({ status: true, data: mySchedule });
	                              }
	                            } else {
	                              if (count > 0) {
	                                processPast();
	                              } else {
	                                res.json({ status: true, data: mySchedule });
	                              }
	                            }
	                          });
	                        } else {
	                          if (count > 0) {
	                            processPast();
	                          } else {
	                            res.json({ status: true, data: mySchedule });
	                          }
	                        }
	                      });
	                    };
	
	                    var mySchedule = [];
	                    var count = doc.length;
	
	                    processPast();
	                  } else {
	                    res.json({ status: true, data: [] });
	                  }
	                });
	              }
	            });
	          } else res.json({ status: false, error: "Internal server error" });
	        });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("e in getPastSchedules === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "deleteMyRecurringSchedule",
	* @Purpose: "To dalete schedule.",
	* @Request Object: obj : { uid : "userId", id : "schedule_id", scheduleid : "individual slot id", selectedDate : "Date"},
	* @Response Object: Success- {status : true, data : "date_schedules", message}, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function deleteMyRecurringSchedule(req, res) {
	  try {
	
	    // Varifying request is valid or not
	    (0, _authorization.checkValidRequest)(req.headers, function (person) {
	      try {
	        if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id) && req.params.date) {
	          var schQuery = _schedule2.default.findOne({ _id: req.params.id });
	          schQuery.exec(function (scherr, schedule) {
	            if (schedule) {
	              if (person._id.str == schedule.createdBy.str) {
	
	                var lastname = person.lastname ? person.lastname : '';
	                var d = Number(req.params.date);
	
	                // check valid user or not to delete the schedule 
	                var removeQuery = _schedule2.default.update({ _id: req.params.id }, { $pull: { "dates": { startTime: { $gte: d } } } }, { multi: true });
	                removeQuery.exec(function (remerr, response) {
	                  if (remerr) {
	                    res.json({ status: false, error: "Internal server error." });
	                  } else if (response) {
	                    // console.log("response === ",response);
	                    res.json({ status: true, message: "Deleted successfully." });
	
	                    var createdBy = person.firstname + ' ' + person.lastname;
	                    if (person.role == _adminUser.Roles.Instructor) {
	                      var instructorObj = {
	                        instId: schedule.createdBy,
	                        roomId: schedule.roomId,
	                        subject: 'The Schedule Deleted',
	                        userBody: 'The pre-scheduled class on ' + '<b>' + schedule.meetingName + '</b> ' + ' has been successfully deleted by ' + '<b>' + createdBy + '</b>' + '.',
	                        operatorBody: 'The pre-scheduled class on ' + '<b>' + schedule.meetingName + '</b> ' + ' has been successfully deleted by you.',
	                        email: person.email
	                      };
	
	                      sendInstructorSchEmail(instructorObj);
	                    } else {
	                      var schObj = {
	                        roomId: schedule.roomId,
	                        subject: 'The Schedule Deleted',
	                        body: 'The pre-scheduled conference on ' + '<b>' + schedule.meetingName + '</b> ' + ' has been successfully deleted by ' + '<b>' + createdBy + '</b>' + '.',
	                        createdBy: schedule.createdBy,
	                        createdBody: 'The pre-scheduled conference on ' + '<b>' + schedule.meetingName + '</b> ' + ' has been successfully deleted by ' + '<b>' + 'you' + '</b>' + '.'
	                      };
	                      sendScheduleEmail(schObj);
	                    }
	                  }
	                });
	              } else {
	                res.json({ status: false, error: "Access denied." });
	              }
	            } else {
	              res.json({ status: false, error: "Invalid schedule." });
	            }
	          });
	        } else res.json({ status: false, error: "Invalid request." });
	      } catch (e) {
	        console.log("e in deleteMyRecurringSchedule inner === ", e);
	        res.json({ status: false, error: "Internal server error." });
	      }
	    });
	  } catch (e) {
	    console.log("e in deleteMyRecurringSchedule === ", e);
	    res.json({ status: false, error: "Internal server error." });
	  }
	}
	
	/**
	* @Function Name: "deleteMySchedule",
	* @Purpose: "To dalete schedule.",
	* @Request Object: obj : { uid : "userId", id : "schedule_id", scheduleid : "individual slot id", selectedDate : "Date"},
	* @Response Object: Success- {status : true, data : "date_schedules", message}, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function deleteMySchedule(req, res) {
	  try {
	
	    // Varifying request is valid or not
	    (0, _authorization.checkValidRequest)(req.headers, function (person) {
	      try {
	        if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id) && req.params.scheduleid && mongoose.Types.ObjectId.isValid(req.params.scheduleid)) {
	          var schQuery = _schedule2.default.findOne({ _id: req.params.id, "dates._id": req.params.scheduleid }, { "dates.$._id": 1, meetingName: 1, createdBy: 1, roomId: 1 });
	          schQuery.exec(function (scherr, schedule) {
	            if (schedule) {
	              if (person._id.str == schedule.createdBy.str) {
	
	                var lastname = person.lastname ? person.lastname : '';
	                // check valid user or not to delete the schedule 
	                var removeQuery = _schedule2.default.update({ _id: req.params.id }, { $pull: { "dates": { _id: req.params.scheduleid } } }, { multi: true });
	                removeQuery.exec(function (remerr, response) {
	                  if (remerr) {
	                    res.json({ status: false, error: "Internal server error." });
	                  } else if (response) {
	                    // console.log("response === ",response);
	                    res.json({ status: true, message: "Deleted successfully." });
	
	                    var createdBy = person.firstname + ' ' + person.lastname;
	                    if (person.role == _adminUser.Roles.Instructor) {
	                      var instructorObj = {
	                        instId: schedule.createdBy,
	                        roomId: schedule.roomId,
	                        subject: 'The Schedule Deleted',
	                        userBody: 'The pre-scheduled class on ' + '<b>' + schedule.meetingName + '</b> ' + ' has been successfully deleted by ' + '<b>' + createdBy + '</b>' + '.',
	                        operatorBody: 'The pre-scheduled class on ' + '<b>' + schedule.meetingName + '</b> ' + ' has been successfully deleted by you.',
	                        email: person.email
	                      };
	
	                      sendInstructorSchEmail(instructorObj);
	                    } else {
	                      var schObj = {
	                        roomId: schedule.roomId,
	                        subject: 'The Schedule Deleted',
	                        body: 'The pre-scheduled conference on ' + '<b>' + schedule.meetingName + '</b> ' + ' has been successfully deleted by ' + '<b>' + createdBy + '</b>' + '.',
	                        createdBy: schedule.createdBy,
	                        createdBody: 'The pre-scheduled conference on ' + '<b>' + schedule.meetingName + '</b> ' + ' has been successfully deleted by ' + '<b>' + 'you' + '</b>' + '.'
	                      };
	                      sendScheduleEmail(schObj);
	                    }
	                  }
	                });
	              } else {
	                res.json({ status: false, error: "Access denied." });
	              }
	            } else {
	              res.json({ status: false, error: "Invalid schedule." });
	            }
	          });
	        } else res.json({ status: false, error: "Invalid request." });
	      } catch (e) {
	        console.log("e in deleteMySchedule inner === ", e);
	        res.json({ status: false, error: "Internal server error." });
	      }
	    });
	  } catch (e) {
	    console.log("e in deleteMySchedule === ", e);
	    res.json({ status: false, error: "Internal server error." });
	  }
	}
	
	/**
	* @Function Name: "getSchedule",
	* @Purpose: "To fetch requested schedule.",
	* @Request Object: obj : { uid : "userId", id : "schedule_id"},
	* @Response Object: Success- {status : true, data : "schedule_record"}, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function getSchedule(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
	        var schQuery = _schedule2.default.findOne({ _id: req.params.id });
	        schQuery.exec(function (scherr, schedule) {
	          if (scherr) {
	            res.json({ status: false, error: "Invalid schedule." });
	          } else if (schedule) {
	            res.json({ status: true, data: schedule });
	          } else res.json({ status: true, error: "Invalid schedule" });
	        });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("e in getSchedule === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/* ---------------  callback functions -------------------- */
	
	/**
	* @Function Name: "executeRoomQuery",
	* @Purpose: "execute the query, update roomkey.",
	* @Request Object: query, cb
	* @Response Object: Success- {null, docs, ids }, Failure- {error, null, null},
	* @Author: "Prudhvi"
	*/
	function executeRoomQuery(query, cb) {
	  try {
	    query.lean().exec(function (err, doc) {
	      if (err) cb(err, null, null);else if (doc) {
	        var ids = [];
	        _.each(doc, function (data) {
	          ids.push(data._id);
	        });
	        cb(null, doc, ids);
	      }
	    });
	  } catch (e) {
	    console.log("e in executeRoomQuery === ", e);
	    cb("Internal server error", null, null);
	  }
	}
	
	/**
	* @Function Name: "getTopics",
	* @Purpose: "fetch topics data.",
	* @Request Object: roomids, cb,
	* @Response Object: Success- {topics }, Failure- {null},
	* @Author: "Prudhvi"
	*/
	function getTopics(roomids, roomdata, cb) {
	  try {
	    var query = _topic2.default.find({ roomId: { $in: roomids }, topicEnable: true }).select('roomId topicName');
	    query.exec(function (error, doc) {
	      if (doc) {
	        var topics = {};
	        for (var i in roomdata) {
	          var features = roomdata[i] && roomdata[i].selPackage && roomdata[i].selPackage.features ? roomdata[i].selPackage.features : [];
	          if (features.indexOf("Topics") == -1) {
	            var id = roomdata[i]._id;
	            topics[id] = false;
	          }
	        }
	        for (var _i in doc) {
	          var data = doc[_i];
	          if (topics[data.roomId] != false || topics[data.roomId] == undefined) {
	            if (topics[data.roomId]) topics[data.roomId].push(data);else topics[data.roomId] = [data];
	          }
	        }
	        cb(topics);
	      } else cb(null);
	    });
	  } catch (e) {
	    console.log("e in getTopics === ", e);
	    cb(null);
	  }
	}
	/**
	* @Function Name: "checkRoomSchedule",
	* @Purpose: "To check new schedule is conflict with previous schedules.",
	* @Request Object: obj : { data : "roomSchedules", startTime : "new_startTime", endTime : "new_endTime", roomId : "roomId"},
	* @Response Object: Success- null, Failure- Confilcted schedule Data {roomName, startTime, endTime},
	* @Author: "Prudhvi"
	*/
	function checkRoomSchedule(obj, cb) {
	  try {
	    var resObject = null;
	
	    // check the new schedule time with db schedule time 
	    cond1: for (var i in obj.data) {
	      var record = obj.data[i];
	
	      var _loop = function _loop(j) {
	        var current = record.dates[j];
	        var index = _.findIndex(obj.newdata, function (o) {
	          return o.startTime >= current.startTime && o.startTime <= current.endTime || o.endTime >= current.startTime && o.endTime <= current.endTime;
	        });
	
	        if (index > -1) {
	          resObject = {
	            meetingName: record.meetingName,
	            roomName: obj.roomName,
	            startTime: current.startTime,
	            endTime: current.endTime
	          };
	          return 'break|cond1';
	        }
	      };
	
	      cond2: for (var j in record.dates) {
	        var _ret = _loop(j);
	
	        if (_ret === 'break|cond1') break cond1;
	      }
	    }
	    cb(resObject);
	  } catch (e) {
	    console.log("e in checkRoomSchedule === ", e);
	    cb({ msg: "Internal server error" });
	  }
	}
	
	function setEntity(obj, cb) {
	  try {
	    if (obj.recurring == true) {
	      if (obj.type && obj.repeatDuration && (obj.endDate || obj.endDateType && obj.no_of_occurence)) {
	        if (obj.type == 'W' && (!obj.repeatOn || obj.repeatOn && obj.repeatOn.length < 0)) {
	          cb("Invalid Request", null);
	        } else {
	          var pattern = getPattern(obj);
	          var datesentity = getPossibleDates(obj, pattern);
	          if (datesentity.dates && datesentity.dates.length > 0) {
	            cb(null, datesentity);
	          } else {
	            cb("No possible dates for this schedule", null);
	          }
	        }
	      } else {
	        cb("Invalid Request", null);
	      }
	    } else {
	      var dates = {
	        startTime: obj.startDate,
	        endTime: obj.endDate
	      };
	      var entity = {
	        startDate: obj.startDate,
	        endDate: obj.endDate,
	        dates: [dates]
	      };
	      cb(null, entity);
	    }
	  } catch (e) {
	    console.log('error in setEntity');
	    cb('Internal server error', null);
	  }
	}
	
	/**
	* @Function Name: "updateSchedule",
	* @Purpose: "To update existed schedule.",
	* @Request Object: obj : "Client_Object, role, cid ="corporateId",
	* @Response Object: Success- {null, data : "Selected date schedules"}, Failure- {error, null},
	* @Author: "Prudhvi"
	*/
	
	function updateScheduleCallback(obj, schedule, cb) {
	  try {
	    // update schedule 
	    var updatequery = _schedule2.default.update({ _id: schedule._id }, { $set: obj.entity });
	    updatequery.exec(function (err, doc) {
	      if (err) {
	        console.log("err === ", err);
	        cb(err, null);
	      } else {
	        var objEntity = {
	          uid: obj.uid,
	          start: obj.start,
	          end: obj.end,
	          role: obj.role,
	          cid: obj.cid
	
	          // console.log("objEntity in save callback === ", objEntity);
	
	          // get all schedules of selected date 
	        };getDateSchedules(objEntity, function (error, data) {
	          if (error) {
	            console.log("error ==== ", error);
	            cb(error, null);
	          } else {
	            cb(null, data);
	            if (objEntity.role == _adminUser.Roles.Instructor) {
	              var instructorObj = {
	                instId: schedule.createdBy,
	                roomId: schedule.roomId,
	                subject: 'The Schedule Updated',
	                userBody: 'The class on ' + '<b>' + schedule.meetingName + '</b>' + ' has been updated from ' + '<b>' + moment(schedule.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(schedule.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC) to <b>' + moment(obj.entity.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(obj.entity.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC) by <b>' + obj.fullname + '</b>.',
	                operatorBody: 'The class on ' + '<b>' + schedule.meetingName + '</b>' + ' has been updated from ' + '<b>' + moment(schedule.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(schedule.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC) to <b>' + moment(obj.entity.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(obj.entity.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> by you.',
	                email: obj.email
	              };
	              sendInstructorSchEmail(instructorObj);
	            } else {
	              var schObj = {
	                roomId: schedule.roomId,
	                subject: 'The Schedule Updated',
	                body: 'The conference on ' + '<b>' + schedule.meetingName + '</b>' + ' has been updated at ' + '<b>' + moment(schedule.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(schedule.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC) to <b>' + moment(obj.entity.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(obj.entity.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC) <b> by <b>' + obj.fullname + '</b>.',
	                createdBy: schedule.createdBy,
	                createdBody: 'The conference on ' + '<b>' + schedule.meetingName + '</b>' + ' has been updated at ' + '<b>' + moment(schedule.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(schedule.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC) to <b>' + moment(obj.entity.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(obj.entity.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC) <b> by <b>' + 'you' + '</b>.'
	              };
	              sendScheduleEmail(schObj);
	            }
	          }
	        });
	      }
	    });
	  } catch (e) {
	    console.log("e in updateScheduleCallback === ", e);
	    cb("Internal server error", null);
	  }
	}
	
	function updateSlotScheduleCallback(objEntity, cb) {
	  try {
	    var now = Number(moment().utc().format('x'));
	    var setobj = {
	      "modifiedBy": objEntity.uid,
	      "modifiedAt": now,
	      "dates.$.startTime": objEntity.startTime,
	      "dates.$.endTime": objEntity.endTime
	    };
	    if (objEntity.endDate) {
	      setobj['endDate'] = objEntity.endDate;
	    }
	    var removequery = _schedule2.default.update({ _id: objEntity.id, "dates._id": objEntity.slotId }, { $set: setobj });
	    removequery.exec(function (removeerr, response) {
	      if (removeerr) {
	        console.log("updateerr === ", removeerr);
	        cb(removeerr, null);
	      } else if (response) {
	        cb(null, response);
	        /*Schedule.update({ _id : objEntity.id }, {$set : setobj}, 
	          function(error, result2) {
	            if (error)
	              console.log("error in slot update === ",error);
	          }
	        );*/
	        var createdBy = objEntity.firstname;
	        createdBy += objEntity.lastname ? objEntity.lastname : '';
	        if (objEntity.role == _adminUser.Roles.Instructor) {
	          var instructorObj = {
	            instId: objEntity.uid,
	            roomId: objEntity.roomId,
	            subject: 'Schedule Updated',
	            userBody: 'The class on ' + '<b>' + objEntity.meetingName + '</b>' + ' scheduling has been updated at ' + '<b>' + moment(objEntity.starttime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(objEntity.endtime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' to ' + '<b>' + moment(objEntity.startTime).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(objEntity.endTime).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' by ' + '<b>' + createdBy + '</b>' + '.',
	            operatorBody: 'The class on ' + '<b>' + objEntity.meetingName + '</b>' + ' scheduling has been successfully updated at ' + '<b>' + moment(objEntity.starttime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(objEntity.endtime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' to ' + '<b>' + moment(objEntity.startTime).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(objEntity.endTime).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' by you.',
	            email: objEntity.email
	          };
	          sendInstructorSchEmail(instructorObj);
	        } else {
	          var schObj = {
	            roomId: objEntity.roomId,
	            subject: 'The Schedule Updated',
	            body: 'The conference on ' + '<b>' + objEntity.meetingName + '</b>' + ' scheduling has been updated at ' + '<b>' + moment(objEntity.starttime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(objEntity.endtime).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b>' + ' to ' + '<b>' + moment(objEntity.startTime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(objEntity.endTime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' by ' + '<b>' + createdBy + '</b>' + '.',
	            createdBy: objEntity.createdBy,
	            createdBody: 'The conference on ' + '<b>' + objEntity.meetingName + '</b>' + ' scheduling has been updated at ' + '<b>' + moment(objEntity.starttime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(objEntity.endtime).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b>' + ' to ' + '<b>' + moment(objEntity.startTime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(objEntity.endTime, 'x').utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' by ' + '<b>' + 'you' + '</b>' + '.'
	          };
	          sendScheduleEmail(schObj);
	        }
	      }
	    });
	  } catch (e) {
	    console.log("e in updateSlotScheduleCallback === ", e);
	    cb("Internal server error, Please try again", null);
	  }
	}
	
	function sendInstructorSchEmail(obj) {
	  _students2.default.findOne({
	    "instId": obj.instId,
	    "roomId": mongoose.Types.ObjectId(obj.roomId)
	  }).select('students').populate('students', 'email').exec(function (err, doc) {
	
	    if (err) {
	      res.json({
	        status: false,
	        error: err.message,
	        message: "Error while retriving students data."
	      });
	    } else if (doc && doc.students && doc.students.length > 0) {
	      var emailData = [];
	      for (var i = 0; i < doc.students.length; i++) {
	        emailData.push(doc.students[i].email);
	      }
	
	      var exchangeData = {
	        to: emailData,
	        subject: obj.subject,
	        body: obj.userBody,
	        descreption: 'Ignore mail if not relevant.'
	      };
	
	      // Note : Commented for temporary bases for sending email notification to students under instructor 
	      // when Create Schedule, Update Schedule and Delete Schedule
	
	      // EmailForUserCreation.defaultUserMail(exchangeData, function(emailerror, emailsuccess) {
	      //   //console.log(emailerror.status)
	      //   if (emailerror.status == false) {
	      //     console.log("Email not sent");
	      //     } else {
	      //     //console.log('email sent')
	      //   }
	      // });
	
	      var myMailData = {
	        to: obj.email,
	        subject: obj.subject,
	        body: obj.operatorBody,
	        descreption: 'Ignore mail if not relevant.'
	      };
	
	      // Note : Commented for temporary bases for sending email notification to instructor 
	      // when Create Schedule, Update Schedule, Delete Schedule, Create Assignment, 
	      // Update Assignment, Delete Assignment, Craete Questionarie, Update Questionarie, 
	      // Delete Questionarie
	
	      // EmailForUserCreation.defaultUserMail(myMailData, function(emailerror, emailsuccess) {
	      //   //console.log(emailerror.status)
	      //   if (emailerror.status == false) {
	      //     console.log("Email not sent");
	      //   } else {
	      //     //console.log('email sent')
	      //   }
	      // });
	    }
	  });
	}
	
	function sendScheduleEmail(obj) {
	  try {
	    var query = _room2.default.findOne({
	      _id: mongoose.Types.ObjectId(obj.roomId)
	    });
	    query.populate('users', 'email role').exec(function (err, doc) {
	      if (err) {
	        res.json({
	          status: false,
	          error: err.message,
	          message: "Error while retriving room data."
	        });
	      } else if (doc) {
	        var emailData = [];
	        var exchangeData = {
	          subject: obj.subject,
	          body: obj.body,
	          descreption: 'Ignore mail if not relevant.'
	        };
	
	        var _loop2 = function _loop2(i) {
	          docId = doc.users[i]._id;
	
	          if (obj.createdBy && obj.createdBy._str == docId._str) {
	            var createdByUserData = {
	              to: doc.users[i].email,
	              subject: obj.subject,
	              body: obj.createdBody,
	              descreption: 'Ignore mail if not relevant.'
	            };
	
	            // EmailForUserCreation.defaultUserMail(createdByUserData, function(emailerror, emailsuccess) {
	            //   if (emailerror.status == false) {
	            //     console.log("Email not sent");
	            //     } else {
	            //     //console.log('email sent')
	            //   }
	            // });
	          } else {
	            exchangeData['body'] = obj.body;
	            emailData.push(doc.users[i].email);
	          }
	          var studentMails = [];
	          if (doc.users[i].role == _adminUser.Roles.Instructor) {
	            var studentquery = _students2.default.findOne({ instId: doc.users[i]._id, roomId: obj.roomId }).populate('students', 'email');
	            studentquery.lean().exec(function (studenterr, studentData) {
	              if (studentData) {
	                _.each(studentData.students, function (student) {
	                  studentMails.push(student.email);
	                });
	              }
	              //console.log('studentMails', studentMails)
	              var studentObjData = {
	                to: studentMails,
	                subject: obj.subject,
	                body: obj.body,
	                descreption: 'Ignore mail if not relevant.'
	                // Note : Commented for temporary bases for sending email notification to all students under the instructor
	                // when Create Schedule, Update Schedule, Delete Schedule, Create Assignment, 
	                // Update Assignment, Delete Assignment, Craete Questionarie, Update Questionarie, 
	                // Delete Questionarie
	
	                // EmailForUserCreation.defaultUserMail(studentObjData, function(emailerror, emailsuccess) {
	                //   //console.log(emailerror.status)
	                //   if (emailerror.status == false) {
	                //     console.log("Email not sent");
	                //     } else {
	                //      studentMails = [];
	                //     //console.log('email sent')
	                //   }
	                // });
	              };
	            });
	          }
	        };
	
	        for (var i = 0; i < doc.users.length; i++) {
	          var docId;
	
	          _loop2(i);
	        }
	        exchangeData['to'] = emailData;
	
	        // Note : Commented for temporary bases for sending email notification to all room users
	        // when Create Schedule, Update Schedule, Delete Schedule, Create Assignment, 
	        // Update Assignment, Delete Assignment, Craete Questionarie, Update Questionarie, 
	        // Delete Questionarie
	
	        // EmailForUserCreation.defaultUserMail(exchangeData, function(emailerror, emailsuccess) {
	        //   //console.log(emailerror.status)
	        //   if (emailerror.status == false) {
	        //     console.log("Email not sent");
	        //     } else {
	        //     //console.log('email sent')
	        //   }
	        // });
	      } else {
	        res.json({
	          status: false,
	          error: "Internal server error",
	          message: "Error while retriving room data."
	        });
	      }
	    });
	  } catch (e) {
	    console.log("e in sendScheduleEmail === ", e);
	    res.json({
	      status: false,
	      message: "Internal server error, Please try again."
	    });
	  }
	}
	
	/**
	* @Function Name: "saveSchedule",
	* @Purpose: "To create new schedule.",
	* @Request Object: obj : "Client_Object, role, cid ="corporateId",
	* @Response Object: Success- {null, data : "Selected date schedules"}, Failure- {error, null},
	* @Author: "Prudhvi"
	*/
	function saveScheduleCallback(obj, cb) {
	  try {
	    // create new schedule 
	    var objEntity = new _schedule2.default(obj.entity);
	    objEntity.save(function (err, doc) {
	      if (err) {
	        console.log("err === ", err);
	        cb(err, null);
	      } else {
	
	        var _objEntity = {
	          uid: obj.uid,
	          start: obj.start,
	          end: obj.end,
	          role: obj.role,
	          cid: obj.cid
	
	          // console.log("objEntity in save callback === ", objEntity);
	
	          // get all schedules of selected date 
	        };getDateSchedules(_objEntity, function (error, data) {
	          if (error) {
	            console.log("error ==== ", error);
	            cb(error, null);
	          } else {
	            cb(null, data);
	            if (_objEntity.role == _adminUser.Roles.Instructor) {
	              var instructorObj = {
	                instId: doc.createdBy,
	                roomId: doc.roomId,
	                subject: 'The Schedule Created',
	                userBody: 'The class on ' + '<b>' + doc.meetingName + '</b>' + ' has been scheduled at ' + '<b>' + moment(doc.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(doc.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' by ' + '<b>' + obj.fullname + '</b>' + '.',
	                operatorBody: 'The class on ' + '<b>' + doc.meetingName + '</b>' + ' has been successfully scheduled at ' + '<b>' + moment(doc.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(doc.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' by you.',
	                email: obj.email
	              };
	              sendInstructorSchEmail(instructorObj);
	            } else {
	              var schObj = {
	                roomId: obj.roomid,
	                subject: 'The Schedule Created',
	                body: 'The conference on ' + '<b>' + doc.meetingName + '</b>' + ' has been scheduled at ' + '<b>' + moment(doc.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(doc.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' by ' + '<b>' + obj.fullname + '</b>' + '.',
	                createdBy: doc.createdBy,
	                createdBody: 'The conference on ' + '<b>' + doc.meetingName + '</b>' + ' has been scheduled at ' + '<b>' + moment(doc.startDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)<b> - ' + moment(doc.endDate).utc().format('DD-MM-YYYY hh:mm A') + '</b>(UTC)' + ' by ' + '<b>' + 'you' + '</b>' + '.'
	              };
	              sendScheduleEmail(schObj);
	            }
	          }
	        });
	      }
	    });
	  } catch (e) {
	    console.log("e in saveScheduleCallback === ", e);
	    cb("Internal server error", null);
	  }
	}
	
	/**
	* @Function Name: "checkRoomValidity",
	* @Purpose: "To check room package expired date with schdule date.",
	* @Request Object: obj = { roomid : "roomId", date : "schedule_endTime"},
	* @Response Object: Success- true, Failure- false,
	* @Author: "Prudhvi"
	*/
	function checkRoomValidity(obj, cb) {
	  try {
	    //console.log("obj === ",obj);
	    // check room package expired date with shedule date 
	    if (obj.roomid && obj.date) {
	      var query = _room2.default.findOne({ _id: obj.roomid }).populate('selPackage', 'packageValidity');
	      query.exec(function (err, response) {
	        if (err) cb(false, null);else if (response) {
	          var expDate = response.expiryDate && response.expiryDate != '' ? moment(response.expiryDate).utc().format('x') : response.selPackage && response.selPackage.packageValidity ? moment(response.selPackage.packageValidity).utc().format('x') : null;
	          if (expDate != null) {
	            if (Number(expDate) < obj.date) cb(false);else cb(true, response.roomName);
	          } else {
	            console.log("error");
	            cb("Internal server error", null);
	          }
	        } else {
	          cb('Invalid room', null);
	        }
	      });
	    } else cb("Invalid request", null);
	  } catch (e) {
	    console.log("e in checkRoomValidity === ", e);
	    cb("Internal server error", null);
	  }
	}
	
	function scheduleEvents(obj, cb) {
	  try {
	    fetchRoomSelector(obj, function (selector, instructorIds) {
	      if (selector) {
	        var roomQuery = _room2.default.find(selector);
	        roomQuery.exec(function (roomerr, roomdoc) {
	          if (roomerr) cb(roomerr, null);
	          if (roomdoc && roomdoc.length > 0) {
	            var roomIds = [];
	            _.forIn(roomdoc, function (value, key) {
	              roomIds.push(mongoose.Types.ObjectId(value._id));
	            });
	
	            // query for selected date schedule 
	            // let query = Schedule.find({$or : [{startDate: {$gte: obj.start, $lte: obj.end }}, {endDate : {$gte: obj.end, $lte: obj.start }} ] , roomId : { $in : roomIds }});
	
	            _schedule2.default.aggregate([{ $unwind: "$dates" }, { $match: {
	                'dates.startTime': {
	                  $gte: obj.start, $lte: obj.end
	                }, roomId: { $in: roomIds }
	              } }, { $sort: { 'dates.startTime': -1 } }], function (err, doc) {
	              // query.lean().exec(function(err, doc){
	              if (err) {
	                console.log("err === ", err);
	                cb(err, null);
	              } else if (doc && doc.length > 0) {
	                if (obj.role == _adminUser.Roles.Student) {
	                  var mySchedule = [];
	                  _.each(doc, function (data) {
	
	                    if (data.dates) {
	                      // update room key value with confetence link 
	                      if (data.createdBy && _.findIndex(instructorIds, function (o) {
	                        return o.instructor = data.createdBy._id;
	                      }) > -1) {
	                        mySchedule.push(data);
	                      }
	                    }
	                  });
	                  cb(null, mySchedule);
	                } else {
	                  cb(null, doc);
	                }
	              } else {
	                cb(null, []);
	              }
	            });
	          } else cb(null, null);
	        });
	      } else cb(null, null);
	    });
	  } catch (e) {
	    console.log("e in scheduleEvents === ", e);
	    cb(null, null);
	  }
	}
	
	/**
	* @Function Name: "getDateSchedules",
	* @Purpose: "To fetch selected date schedules.",
	* @Request Object: obj = { uid : "userId", flag : "CURRENT/PAST", role, cid : "CorporateId"},
	* @Response Object: Success- {null, doc:"Selected_date_schedules"}, Failure- {error, null},
	* @Author: "Prudhvi"
	*/
	
	function getDateSchedules(obj, cb) {
	  try {
	    fetchRoomSelector(obj, function (selector, instructorIds) {
	      if (selector) {
	        var roomQuery = _room2.default.find(selector);
	        roomQuery.exec(function (roomerr, roomdoc) {
	          if (roomerr) cb(roomerr, null);
	          if (roomdoc && roomdoc.length > 0) {
	            var roomIds = [];
	            _.forIn(roomdoc, function (value, key) {
	              roomIds.push(mongoose.Types.ObjectId(value._id));
	            });
	
	            _schedule2.default.aggregate([{ $unwind: "$dates" }, { $match: {
	                'dates.startTime': {
	                  $gte: obj.start, $lte: obj.end
	                }, roomId: { $in: roomIds }
	              } }, { $sort: { 'dates.startTime': -1 } }], function (err, doc) {
	              if (err) {
	                console.log("err === ", err);
	                cb(err, null);
	              } else if (doc && doc.length > 0) {
	                var processItem = function processItem() {
	                  var item = doc[count - 1];
	                  _users2.default.findOne({ _id: item.createdBy }, { firstname: 1, profile: 1 }, function (usererr, user) {
	                    if (user) {
	                      _room2.default.findOne({ _id: item.roomId }, { roomKey: 1, roomName: 1 }, function (roomerr, room) {
	                        if (room) {
	                          var key = 'conf/' + room.roomKey;
	                          room['roomKey'] = _config2.default.confLink.concat(key);
	                          item['createdBy'] = user;
	                          item['roomId'] = room;
	                          if (obj.role == _adminUser.Roles.Student) {
	                            if (item && item.createdBy && _.findIndex(instructorIds, function (o) {
	                              return o.instructor = item.createdBy._id;
	                            }) > -1) {
	                              mySchedule.push(item);
	                            }
	                          } else {
	                            mySchedule.push(item);
	                          }
	                          count = count - 1;
	                          if (count > 0) {
	                            processItem();
	                          } else {
	                            // done
	                            // console.log("mySchedule === ", mySchedule);
	                            cb(null, mySchedule);
	                          }
	                        } else {
	                          if (count > 0) {
	                            processItem();
	                          } else {
	                            // done
	                            // console.log("mySchedule === ", mySchedule);
	                            cb(null, mySchedule);
	                          }
	                        }
	                      });
	                    } else {
	                      if (count > 0) {
	                        processItem();
	                      } else {
	                        // done
	                        // console.log("mySchedule === ", mySchedule);
	                        cb(null, mySchedule);
	                      }
	                    }
	                  });
	                };
	
	                var mySchedule = [];
	                var count = doc.length;
	
	                processItem();
	              } else {
	                cb(null, []);
	              }
	            });
	          } else cb(null, null);
	        });
	      } else cb(null, null);
	    });
	  } catch (e) {
	    console.log("e in getDateSchedules === ", e);
	    cb(null, null);
	  }
	}
	
	/**
	* @Function Name: "fetchRoomSelector",
	* @Purpose: "To get selector for fetch room schedules based on their role.",
	* @Request Object: obj = { uid : "userId", role, cid : "CorporateId"},
	* @Response Object: Success- selector, Failure- null,
	* @Author: "Prudhvi"
	*/
	function fetchRoomSelector(obj, cb) {
	  try {
	    if (obj.role == _adminUser.Roles.Student || obj.role == _adminUser.Roles.Attendee) {
	
	      // if student fetch his student record ids 
	      var studentquery = _students2.default.find({ students: { $in: [obj.uid] } }).select('roomId instId');
	      studentquery.lean().exec(function (studenterr, student) {
	        if (student && student.length > 0) {
	          var roomIds = [];
	          var instructorIds = [];
	          _.each(student, function (stu) {
	            roomIds.push(stu.roomId);
	            instructorIds.push({ instructor: stu.instId });
	          });
	          var selector = { _id: { $in: roomIds } };
	          cb(selector, instructorIds);
	        } else cb(null, null);
	      });
	    } else if (obj.role == _adminUser.Roles.Admin || obj.role == _adminUser.Roles.Lmsadmin || obj.role == _adminUser.Roles.Presenteradmin || obj.role == _adminUser.Roles.CRMadmin) {
	
	      // if admins check with corporate ids 
	      var selector = { corporateId: obj.cid };
	      cb(selector, null);
	
	      // if superadmin all rooms
	    } else if (obj.role == _adminUser.Roles.Superadmin) {
	      cb({});
	    } else {
	
	      // for others created by and if they are participants in that room 
	      var _selector = { $or: [{ createdBy: obj.uid }, { users: { $in: [obj.uid] } }] };
	      cb(_selector, null);
	    }
	  } catch (e) {
	    console.log("e in fetchRoomSelector === ", e);
	    cb(null, null);
	  }
	}
	
	/*----------------------------- Recuring Schedule ----------------------------------*/
	
	/*var repeatEvent = {
	  type : 'D',
	  repeatDuration : 2,
	  // endDateType : 'C',
	  startDate : Number(moment().add(10, 'minutes').utc().format('x')),
	  endDate : Number(moment().add(10, 'days').utc().format('x')),
	  duration : 10,
	  // no_of_occurence : 12
	}*/
	
	// return pattern === D-2-_-_-_-5#0
	
	/*var repeatEvent = {
	  type : 'W',
	  repeatDuration : 2,
	  repeatOn : [1, 3, 5],
	  startDate : Number(moment().add(10, 'minutes').utc().format('x')),
	  // endDate : Number(moment().add(30, 'days').utc().format('x')),
	  duration : 10,
	  endDateType : 'C',
	  no_of_occurence : 5
	}*/
	
	// return pattern ===== W-2-_-_-1,3,5-_#0
	
	/*var repeatEvent = {
	  type : 'M',
	  repeatDuration : 2,
	  repeatBy : 0,         // or  1,  "0" for day of the month and "1" for day of the week
	  repeatByDay : 1,              // if 0 we need to add "repeatByDay" day of the week and "repeatByCount" for week of the month
	  repeatByCount : 3
	}*/
	
	// return pattern ==== M-2-_-3-1-_#0
	
	/*var repeatEvent = {
	  type : 'Y',
	  repeatDuration : 2,
	  startDate : Number(moment().add(10, 'minutes').utc().format('x')),
	  // endDate : Number(moment().add(5, 'years').utc().format('x')),
	  duration : 10,
	  endDateType : 'C',
	  no_of_occurence : 4
	}
	*/
	// return pattern ==== Y-2-S-_-_-_#0
	
	
	// getPattern(repeatEvent);
	
	
	function getPattern(repeatEvent) {
	  var pattern = '_-_-_-_-_-_#0';
	  try {
	
	    pattern = pattern.substring(0, 0) + repeatEvent.type + pattern.substring(1);
	    pattern = pattern.substring(0, 2) + repeatEvent.repeatDuration + pattern.substring(3);
	    if (repeatEvent.endDateType == 'C') {
	      pattern = pattern.substring(0, 10) + repeatEvent.no_of_occurence + pattern.substring(11);
	    }
	
	    if (repeatEvent.type == 'W') {
	      pattern = pattern.substring(0, 8) + repeatEvent.repeatOn + pattern.substring(9);
	    } else if (repeatEvent.type == 'M' && repeatEvent.repeatBy == 1) {
	      pattern = pattern.substring(0, 8) + repeatEvent.repeatByDay + pattern.substring(9);
	      pattern = pattern.substring(0, 6) + repeatEvent.repeatByCount + pattern.substring(7);
	    } else if (repeatEvent.type == 'M' && repeatEvent.repeatBy == 0) {
	      pattern = pattern.substring(0, 4) + 'S' + pattern.substring(5);
	    } else if (repeatEvent.type == 'Y') {
	      pattern = pattern.substring(0, 4) + 'S' + pattern.substring(5);
	    }
	    // console.log("pattern === ", pattern);
	    return pattern;
	  } catch (e) {
	    console.log("e in getPattern === ", e);
	    return pattern;
	  }
	};
	
	function getPossibleDates(objEntity, pattern) {
	  // console.log("objEntity === ",objEntity);
	
	  // let st = moment(objEntity.startDate, 'x');
	  var now = moment().seconds(0).utc().format('x');
	  var scheduleDates = [];
	  var recurring = pattern.split('#')[0].split('-')[5];
	
	  var new_obj = {
	    pattern: pattern,
	    startDate: objEntity.startDate
	
	    //daily recursive    
	  };if (pattern[0] == 'D') {
	    var c = 1;
	    if (objEntity.startDate < Number(now)) {
	      var st = moment(objEntity.startDate, 'x').add(pattern[2], 'days').utc().format('x');
	      objEntity['startDate'] = Number(st);
	      c++;
	    }
	    if (recurring !== '_') {
	      for (var i = c; i <= Number(recurring); i++) {
	        var ed = moment(objEntity.startDate, 'x').add(objEntity.duration, 'minutes').utc().format('x');
	        var obj = {
	          startTime: objEntity.startDate,
	          endTime: Number(ed)
	        };
	        scheduleDates.push(obj);
	        var nextDate = moment(objEntity.startDate, 'x').add(pattern[2], 'days').utc().format('x');
	        objEntity['startDate'] = Number(nextDate);
	        new_obj['endDate'] = obj.endTime;
	      }
	    } else {
	      var d = objEntity.startDate;
	      while (d <= objEntity.endDate) {
	        var _ed = moment(objEntity.startDate, 'x').add(objEntity.duration, 'minutes').utc().format('x');
	        var _obj = {
	          startTime: objEntity.startDate,
	          endTime: Number(_ed)
	        };
	        scheduleDates.push(_obj);
	        var _nextDate = moment(objEntity.startDate, 'x').add(pattern[2], 'days').utc().format('x');
	        objEntity['startDate'] = d = Number(_nextDate);
	      }
	      new_obj['endDate'] = objEntity.endDate;
	    }
	    new_obj['dates'] = scheduleDates;
	    return new_obj;
	  } else if (pattern[0] == 'W') {
	    //weekly recursive
	
	    var _res = pattern.substring(8).split("-")[0];
	    var _d2 = [];
	    for (var j = 0; j < _res.length; j++) {
	      if (_res[j] != ",") {
	        _d2.push(parseInt(_res[j]));
	      }
	    }
	
	    if (_d2.length > 0) {
	      var wd = [];
	      var start_day = objEntity.startDate;
	      var _c = 1;
	      var patternLength = pattern.length;
	      if (recurring !== '_') {
	        var len = _d2.length;
	        var _nextDate2 = Number(moment(start_day, 'x').day(_d2[len - 1]).utc().format('x'));
	        var endDate = moment(_nextDate2, 'x').add(pattern[2] * 7 * (Number(recurring) - 1), 'days');
	        objEntity['endDate'] = Number(endDate.add(objEntity.duration, 'minutes').utc().format('x'));
	      }
	
	      for (var _i2 = 0; _i2 < _d2.length; _i2++) {
	        var st_day = moment(start_day, 'x').day(_d2[_i2]).utc().format('x');
	        start_day = Number(st_day);
	        wd.push(start_day);
	        if (start_day >= objEntity.startDate && start_day <= objEntity.endDate && start_day > Number(now)) {
	          var _obj2 = {
	            startTime: start_day,
	            endTime: Number(moment(start_day, 'x').add(objEntity.duration, 'minutes').utc().format('x'))
	          };
	          scheduleDates.push(_obj2);
	        }
	      }
	      cond1: while (1) {
	        cond2: for (var _i3 = 0; _i3 < wd.length; _i3++) {
	          wd[_i3] = Number(moment(wd[_i3], 'x').add(pattern[2] * 7, 'days').utc().format('x'));
	          if (wd[_i3] > objEntity.endDate) {
	            break cond1;
	          }
	          if (wd[_i3] > Number(now)) {
	            var _obj3 = {
	              startTime: wd[_i3],
	              endTime: Number(moment(wd[_i3], 'x').add(objEntity.duration, 'minutes').utc().format('x'))
	            };
	            scheduleDates.push(_obj3);
	          }
	        }
	      }
	      new_obj['endDate'] = objEntity.endDate;
	      new_obj['dates'] = scheduleDates;
	      return new_obj;
	    } else {
	      console.log("weekly days are not selected");
	    }
	  } else if (pattern[0] == 'M' && pattern[6] != '_' && pattern[8] != '_') {
	    var _d3 = moment(objEntity.startDate, 'x');
	    var day = parseInt(pattern[8]);
	    var week = parseInt(pattern[6]);
	    var _st = moment().date(1).month(_d3.month()).year(_d3.year()).hours(_d3.hours()).minutes(_d3.minutes()).seconds(0);
	    var _c2 = 1;
	    var flag = true;
	    var _endDate = null;
	    var _n = objEntity.endDate == undefined ? moment().utc().format('x') : objEntity.endDate;
	    while (flag) {
	      var _w = 1;
	      var _d = _st.day();
	      var month = _st.month();
	      if (_d > day) {
	        var diff = 7 + day - _d;
	        _st.add(diff, 'days');
	      } else if (_d < day) {
	        var _diff = day - _d;
	        _st.add(_diff, 'days');
	      }
	
	      while (week > _w) {
	        _st.add(7, 'days');
	        _w++;
	      }
	
	      var _ed2 = null;
	
	      if (month == _st.month()) {
	        var startTime = _st.clone();
	        var endTime = _st.clone();
	        endTime.add(objEntity.duration, 'minutes');
	        var _obj4 = {
	          startTime: startTime.utc().format('x'),
	          endTime: endTime.utc().format('x')
	        };
	        _ed2 = _obj4.startTime;
	        if (objEntity.endDate == undefined || objEntity.endDate > _obj4.startTime) {
	          if (now <= _obj4.startTime) {
	            _endDate = _obj4.endTime;
	            scheduleDates.push(_obj4);
	          }
	        } else {
	          new_obj['dates'] = scheduleDates;
	          flag = false;
	        }
	      } else if (month < _st.month()) {
	        _st.subtract(1, 'months');
	      }
	
	      if (recurring != '_') {
	        if (recurring == _c2) {
	          new_obj['dates'] = scheduleDates;
	          new_obj['endDate'] = _endDate;
	          flag = false;
	        } else {
	          _st.add(objEntity.repeatDuration, 'months');
	          _st.date(1);
	          _c2++;
	        }
	      } else if (objEntity.endDate <= _ed2) {
	        new_obj['dates'] = scheduleDates;
	        new_obj['endDate'] = objEntity.endDate;
	        flag = false;
	      } else {
	        _st.add(objEntity.repeatDuration, 'months');
	        _st.date(1);
	      }
	    }
	
	    // console.log("new_obj === ", new_obj.dates);
	    return new_obj;
	  } else if (pattern[0] == 'M') {
	    // var dayInMonth = st.date();
	    var _st2 = moment(objEntity.startDate, 'x');
	    var _d4 = _st2.date();
	    var _j = Number(_st2.utc().format('x'));
	    if (recurring != '_') {
	      var _c3 = 1;
	      while (_c3 <= recurring) {
	        var monthdates = _st2.daysInMonth();
	        if (monthdates >= _d4) {
	          if (_j >= now) {
	            _st2.date(_d4);
	            var starttime = _st2.clone();
	            var endtime = _st2.clone();
	            endtime.add(objEntity.duration, 'minutes');
	            var dates = {
	              startTime: Number(starttime.utc().format('x')),
	              endTime: Number(endtime.utc().format('x'))
	            };
	            new_obj['endDate'] = dates.endTime;
	            scheduleDates.push(dates);
	          }
	        }
	        _st2.add(pattern[2] * 1, 'months');
	        _j = Number(_st2.utc().format('x'));
	        _c3++;
	      }
	    } else {
	      while (_j <= objEntity.endDate) {
	        var _monthdates = _st2.daysInMonth();
	        if (_monthdates >= _d4) {
	          if (_j >= now) {
	            _st2.date(_d4);
	            var _starttime = _st2.clone();
	            var _endtime = _st2.clone();
	            _endtime.add(objEntity.duration, 'minutes');
	            var _dates = {
	              startTime: Number(_starttime.utc().format('x')),
	              endTime: Number(_endtime.utc().format('x'))
	            };
	            scheduleDates.push(_dates);
	          }
	        }
	        _st2.add(pattern[2] * 1, 'months');
	        _j = Number(_st2.utc().format('x'));
	      }
	      new_obj['endDate'] = objEntity.endDate;
	    }
	    new_obj['dates'] = scheduleDates;
	    return new_obj;
	  } else if (pattern[0] == 'Y') {
	    var loopYear = function loopYear(duration) {
	      var nextDate = objEntity.startDate;
	      if (recurring !== '_') {
	        while (_c4 <= recurring) {
	          if (nextDate >= Number(now)) {
	            var _obj5 = {
	              startTime: nextDate,
	              endTime: Number(moment(nextDate, 'x').add(objEntity.duration, 'minutes').utc().format('x'))
	            };
	            scheduleDates.push(_obj5);
	            new_obj['endDate'] = _obj5.endTime;
	          }
	          nextDate = Number(moment(nextDate, 'x').add(duration, 'year').utc().format('x'));
	          _c4++;
	        }
	      } else {
	        while (nextDate <= objEntity.endDate) {
	          if (nextDate >= Number(now)) {
	            var _obj6 = {
	              startTime: nextDate,
	              endTime: Number(moment(nextDate, 'x').add(objEntity.duration, 'minutes').utc().format('x'))
	            };
	            scheduleDates.push(_obj6);
	            new_obj['endDate'] = _obj6.endTime;
	          }
	          nextDate = Number(moment(nextDate, 'x').add(duration, 'year').utc().format('x'));
	        }
	        new_obj['endDate'] = objEntity.endDate;
	      }
	    };
	    // console.log("scheduleDates === ",scheduleDates);
	
	
	    var _c4 = 1;
	    var _st3 = moment(objEntity.startDate, 'x');
	    if ((_st3.get('year') % 4 == 0 || _st3.get('year') % 400 == 0) && _st3.get('month') == 1 && _st3.get('date') == 29) {
	      //Need to test condition
	      if (pattern[2] > 4) {
	        loopYear(4 * Math.ceil(pattern[2] / 4));
	      }
	    } else {
	      loopYear(1 * pattern[2]);
	    }
	
	    new_obj['dates'] = scheduleDates;
	    return new_obj;
	  }
	}

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Schema = _mongoose2.default.Schema;
	var moment = __webpack_require__(1);
	
	
	var assignmentSchema = new Schema({
	  roomId: {
	    type: String
	  },
	  assignmentName: {
	    type: String,
	    required: [true, "Please enter Assignment Name"],
	    maxlength: [60, 'Assignment Name length should be maximum of 60 characters'],
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash,
	    index: true
	  },
	  assignedTo: {
	    type: String,
	    ref: 'Topics'
	  },
	  submissions: [{
	    studentId: {
	      type: String,
	      ref: 'Users'
	    },
	    fileName: {
	      type: String,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    fileType: {
	      type: String
	    },
	    plagiarismId: {
	      type: String
	    },
	    plagiarismResult: {
	      type: Array
	    },
	    submittedAt: {
	      type: Date,
	      default: moment().utc().toDate()
	    },
	    result: [{
	      title: {
	        type: String
	      },
	      maximumMarks: {
	        type: Number
	      },
	      score: {
	        type: Number
	      }
	    }],
	    comment: {
	      type: String
	    },
	    evaluatedBy: {
	      type: String,
	      ref: 'Users'
	    }
	  }],
	  uploadData: {
	    fileName: {
	      type: String,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    fileType: {
	      type: String
	    }
	  },
	  content: {
	    type: Array
	    // set : addSlash,
	    // get : stripSlash
	  },
	  configuration: [{
	    title: {
	      type: String
	    },
	    maximumMarks: {
	      type: Number
	    }
	  }],
	  createdBy: {
	    type: _mongoose2.default.Schema.Types.ObjectId,
	    ref: 'Users'
	  },
	  modifiedBy: {
	    type: _mongoose2.default.Schema.Types.ObjectId
	  },
	  modifiedAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  },
	  createdAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  }
	
	}, {
	  toObject: { getters: true },
	  toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('Assignments', assignmentSchema);

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
			value: true
	});
	
	var _slashesActions = __webpack_require__(4);
	
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	
	
	var categorySchema = new mongoose.Schema({
			corporateId: {
					type: String,
					trim: true,
					ref: 'corporate',
					required: true
			},
			categoryName: {
					type: String,
					required: [true, 'Please enter Category Name'],
					maxlength: [50, 'Category Name length should be maximum of 50 characters'],
					set: _slashesActions.addSlash,
					get: _slashesActions.stripSlash,
					index: true
			},
			categoryDesc: {
					type: String,
					required: [true, 'Please enter Category Description'],
					maxlength: [150, 'Category Description length should be maximum of 150 characters'],
					set: _slashesActions.addSlash,
					get: _slashesActions.stripSlash
			},
			createdBy: {
					type: mongoose.Schema.Types.ObjectId
			},
			modifiedBy: {
					type: mongoose.Schema.Types.ObjectId
			},
			createdAt: {
					type: Date,
					default: moment().utc().toDate()
			},
			modifiedAt: {
					type: Date,
					default: moment().utc().toDate()
			}
	}, {
			toObject: { getters: true },
			toJSON: { getters: true }
	});
	
	exports.default = mongoose.model('category', categorySchema);

/***/ },
/* 60 */
/***/ function(module, exports) {

	module.exports = require("async/parallel");

/***/ },
/* 61 */
/***/ function(module, exports) {

	module.exports = require("async/reflect");

/***/ },
/* 62 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TOGGLE_CERTIFICATE_DOWNLOAD = exports.SET_CERTIFICATE_DATA_FAILED = exports.SET_CERTIFICATE_DATA = exports.CLEAR_INDIVIDUAL_ASSIGNMENT_DATA = exports.INDIVIDUAL_ASSIGNMENT_DATA_FAILED = exports.INDIVIDUAL_ASSIGNMENT_DATA = exports.LIST_TOPIC_VIEWED_USERS = exports.SAVED_VIEWED_TOPICS = exports.SAVED_COURSE_TOPICS = exports.CLEAR_TOTAL_SCHEDULES_LIST = exports.LIST_TOTAL_SCHEDULES = exports.CLEAR_INDIVIDUAL_ATTENDANCE_LIST = exports.LIST_INDIVIDUAL_ATTENDANCE = exports.SAVED_INDIVIDUAL_ATTENDANCE = exports.CLEAR_ATTENDANCE_LIST = exports.LIST_COURSE_ATTENDANCE = exports.CLEAR_PLAGIARISM_DATA = exports.SAVED_COURSE_ATTENDANCE = exports.GET_PLAGIARISM_DATA_FAILED = exports.GET_PLAGIARISM_DATA = exports.ROOM_TOPIC_ENABLE = exports.UPLOAD_FILE_ENABLE = exports.DELETE_ASSIGNMENT = exports.DELETE_UPLOADED_FILES = exports.LIST_ASSIGNMENT_SUBMISSION = exports.SAVED_TOPIC_DATA = exports.SAVED_ROOM_ASSIGNMENT = exports.SAVED_ASSIGNMENT = exports.LIST_ROOM_ASSIGNMENT = exports.SAVED_GROUP_STUDENT = exports.UPDATED_FILE_DESC = exports.SAVED_ENABLE_LIVE = exports.SAVED_CODECTYPE = exports.GET_FEEDBACK_TYPE = exports.SAVED_FEEDBACKTYPE = exports.LIST_ROOM_QUESTIONNAIRE = exports.DELETE_ROOM_LOCATIONPARTICIPANT = exports.DELETE_ROOM_LOCATION = exports.LIST_ROOM_LOCATION = exports.SAVE_LOCATION = exports.LIST_LOCATION = exports.SAVED_ROOM_FEEDBACK = exports.LIST_ROOM_FEEDBACK = exports.FETCH_RESULT_FAILED = exports.FETCHED_RESULT = exports.LIST_RESULT_TOPIC = exports.QUESTIONNAIRE_UNASSIGN_FAILED = exports.QUESTIONNAIRE_SUCCESSFULLY_UNASSIGNED = exports.ASSIGN_QUESTIONNAIRE_FAILED = exports.ASSIGNED_QUESTIONNAIRE = exports.FETCH_TOPIC_QUESTIONNAIRE_FAILED = exports.FETCHED_TOPIC_QUESTIONNAIRE = exports.EDIT_MODAL = exports.SHOW_MODAL = exports.CANCEL_TOPIC = exports.SAVED_ROOM_STUDENT = exports.CANCEL_FILE = exports.SAVED_TOPIC_FILE = exports.LIST_TOPIC_FILES = exports.LIST_ROOM_TOPIC = exports.SAVED_ROOM_TOPIC = exports.SAVED_TOPIC = exports.SAVED_ROOM_USER = exports.CLEAR_ROOM = exports.UPDATE_SCHEMA = exports.LIST_ROOM = exports.SAVED_ROOM = exports.CANCEL_ROOM = exports.GET_ROOM = exports.SAVE_ROOM = exports.EDIT_ROOM = undefined;
	exports.EditRoom = EditRoom;
	exports.SaveRoom = SaveRoom;
	exports.UpdateRoom = UpdateRoom;
	exports.RoomStatus = RoomStatus;
	exports.getRoomData = getRoomData;
	exports.setRoom = setRoom;
	exports.RoomList = RoomList;
	exports.RoomListStatus = RoomListStatus;
	exports.RoomStore = RoomStore;
	exports.ClearRoom = ClearRoom;
	exports.CancelRoom = CancelRoom;
	exports.UpdateRoomSchema = UpdateRoomSchema;
	exports.DeleteRoom = DeleteRoom;
	exports.RoomLoadList = RoomLoadList;
	exports.SaveRoomUser = SaveRoomUser;
	exports.addRoomUser = addRoomUser;
	exports.setRoomUsers = setRoomUsers;
	exports.addRoomStudent = addRoomStudent;
	exports.setRoomStudents = setRoomStudents;
	exports.getStudentData = getStudentData;
	exports.removeRoomStud = removeRoomStud;
	exports.removeRoomUser = removeRoomUser;
	exports.SaveRoomTopic = SaveRoomTopic;
	exports.RoomTopicStatus = RoomTopicStatus;
	exports.RoomTopicList = RoomTopicList;
	exports.RoomTopicListStatus = RoomTopicListStatus;
	exports.getRoomTopicData = getRoomTopicData;
	exports.setRoomTopic = setRoomTopic;
	exports.SaveEditorContent = SaveEditorContent;
	exports.SetEditorContent = SetEditorContent;
	exports.RoomTopicFileList = RoomTopicFileList;
	exports.TopicUploadListStatus = TopicUploadListStatus;
	exports.NewFileUpload = NewFileUpload;
	exports.DeleteFile = DeleteFile;
	exports.DeleteMultipleFile = DeleteMultipleFile;
	exports.TopicFileLoadList = TopicFileLoadList;
	exports.RoomTopicStore = RoomTopicStore;
	exports.DeleteTopic = DeleteTopic;
	exports.TopicLoadList = TopicLoadList;
	exports.showModal = showModal;
	exports.editModal = editModal;
	exports.getTopicQuestionnaireData = getTopicQuestionnaireData;
	exports.setTopicQuestionnaire = setTopicQuestionnaire;
	exports.AssignQuestionnaireRequest = AssignQuestionnaireRequest;
	exports.QuestionnaireStatus = QuestionnaireStatus;
	exports.unassignQuestionnaireRequest = unassignQuestionnaireRequest;
	exports.confirmedUnassignQuestionnaireRequest = confirmedUnassignQuestionnaireRequest;
	exports.unassignQuestionnaireResponse = unassignQuestionnaireResponse;
	exports.RoomFeedbackList = RoomFeedbackList;
	exports.RoomFeedbackListStatus = RoomFeedbackListStatus;
	exports.TopicResultList = TopicResultList;
	exports.TopicResultListStatus = TopicResultListStatus;
	exports.getResultData = getResultData;
	exports.setResult = setResult;
	exports.getRoomFeedbackData = getRoomFeedbackData;
	exports.setRoomFeedback = setRoomFeedback;
	exports.getLocationList = getLocationList;
	exports.LocationListStatus = LocationListStatus;
	exports.getinstructorStudents = getinstructorStudents;
	exports.saveRoomLocation = saveRoomLocation;
	exports.LocationSavedStatus = LocationSavedStatus;
	exports.getRoomLocations = getRoomLocations;
	exports.RoomLocationListStatus = RoomLocationListStatus;
	exports.deleteRoomLocation = deleteRoomLocation;
	exports.deletedRoomLocationStatus = deletedRoomLocationStatus;
	exports.deleteRoomLocationParticipant = deleteRoomLocationParticipant;
	exports.DeletedRoomLocationParticipantStatus = DeletedRoomLocationParticipantStatus;
	exports.getQuestionnaire = getQuestionnaire;
	exports.GetQuestionnaireListStatus = GetQuestionnaireListStatus;
	exports.saveFeedbackTypeRequest = saveFeedbackTypeRequest;
	exports.SaveFeedbackTypeRequest = SaveFeedbackTypeRequest;
	exports.getFeedbackTypeValue = getFeedbackTypeValue;
	exports.getFeedbackTypeValueStatus = getFeedbackTypeValueStatus;
	exports.saveCodecTypeRequest = saveCodecTypeRequest;
	exports.SaveCodecTypeRequest = SaveCodecTypeRequest;
	exports.saveEnableLiveRequest = saveEnableLiveRequest;
	exports.SaveEnableLiveRequest = SaveEnableLiveRequest;
	exports.setUploadFileDescRequest = setUploadFileDescRequest;
	exports.UploadFileDescStatus = UploadFileDescStatus;
	exports.addGroupStudentRequest = addGroupStudentRequest;
	exports.addGroupStudentRequestStatus = addGroupStudentRequestStatus;
	exports.RoomAssignmentList = RoomAssignmentList;
	exports.RoomAssignmentListStatus = RoomAssignmentListStatus;
	exports.RoomAssignmentStore = RoomAssignmentStore;
	exports.SaveRoomAssignment = SaveRoomAssignment;
	exports.RoomAssignmentStatus = RoomAssignmentStatus;
	exports.getTopicDataRequest = getTopicDataRequest;
	exports.setTopicData = setTopicData;
	exports.assignmentSubmissionList = assignmentSubmissionList;
	exports.assignmentSubmissionListStatus = assignmentSubmissionListStatus;
	exports.getAssignmentDataRequest = getAssignmentDataRequest;
	exports.setAssignmentData = setAssignmentData;
	exports.deleteAssignmentUploadedFile = deleteAssignmentUploadedFile;
	exports.deleteAssignmentUplaodedFileResponse = deleteAssignmentUplaodedFileResponse;
	exports.deleteAssignmentRequest = deleteAssignmentRequest;
	exports.deleteAssignmentResponse = deleteAssignmentResponse;
	exports.handleFileEnable = handleFileEnable;
	exports.handleFileLoadList = handleFileLoadList;
	exports.handleTopicLoadList = handleTopicLoadList;
	exports.handleTopicEnable = handleTopicEnable;
	exports.getPlagiarismData = getPlagiarismData;
	exports.getPlagiarismDataResponse = getPlagiarismDataResponse;
	exports.ClearPlagiarism = ClearPlagiarism;
	exports.getPlagiarismCredits = getPlagiarismCredits;
	exports.setCourseAttendance = setCourseAttendance;
	exports.getCourseAttendanceRequest = getCourseAttendanceRequest;
	exports.getAttendanceList = getAttendanceList;
	exports.SetAttendanceList = SetAttendanceList;
	exports.clearAttendanceList = clearAttendanceList;
	exports.setIndividualAttendance = setIndividualAttendance;
	exports.getIndividualAttendance = getIndividualAttendance;
	exports.SetIndividualAttendanceList = SetIndividualAttendanceList;
	exports.getIndividualAttendanceList = getIndividualAttendanceList;
	exports.clearIndividualAttendanceList = clearIndividualAttendanceList;
	exports.setTotalSchedulesRequest = setTotalSchedulesRequest;
	exports.getTotalSchedulesList = getTotalSchedulesList;
	exports.clearTotalSchedulesList = clearTotalSchedulesList;
	exports.setTopicViewedUsers = setTopicViewedUsers;
	exports.getTopicViewedUsersRequest = getTopicViewedUsersRequest;
	exports.setTopicViewedUsersList = setTopicViewedUsersList;
	exports.getTopicViewedUsersList = getTopicViewedUsersList;
	exports.setCourseTopics = setCourseTopics;
	exports.getCourseTopicsData = getCourseTopicsData;
	exports.getTopicUsersData = getTopicUsersData;
	exports.getUserViewedTopics = getUserViewedTopics;
	exports.getCourseTopicsList = getCourseTopicsList;
	exports.getViewedTopicsList = getViewedTopicsList;
	exports.getuserViewedALLTopicsList = getuserViewedALLTopicsList;
	exports.getAssignmentData = getAssignmentData;
	exports.AssignmentDataStatus = AssignmentDataStatus;
	exports.saveEvaluatedAssignment = saveEvaluatedAssignment;
	exports.saveAssignmentGradeConfiguration = saveAssignmentGradeConfiguration;
	exports.ClearIndidvidualAssignmentData = ClearIndidvidualAssignmentData;
	exports.getCertificateData = getCertificateData;
	exports.setCertificateData = setCertificateData;
	exports.toggleCertificateDownload = toggleCertificateDownload;
	exports.handleToggleCertificateDownload = handleToggleCertificateDownload;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EDIT_ROOM = exports.EDIT_ROOM = 'EDIT_ROOM';
	var SAVE_ROOM = exports.SAVE_ROOM = 'SAVE_ROOM';
	var GET_ROOM = exports.GET_ROOM = 'GET_ROOM';
	var CANCEL_ROOM = exports.CANCEL_ROOM = 'CANCEL_ROOM';
	var SAVED_ROOM = exports.SAVED_ROOM = 'SAVED_ROOM';
	var LIST_ROOM = exports.LIST_ROOM = 'LIST_ROOM';
	var UPDATE_SCHEMA = exports.UPDATE_SCHEMA = 'UPDATE_SCHEMA';
	var CLEAR_ROOM = exports.CLEAR_ROOM = 'CLEAR_ROOM';
	var SAVED_ROOM_USER = exports.SAVED_ROOM_USER = 'SAVED_ROOM_USER';
	var SAVED_TOPIC = exports.SAVED_TOPIC = 'SAVED_TOPIC';
	var SAVED_ROOM_TOPIC = exports.SAVED_ROOM_TOPIC = 'SAVED_ROOM_TOPIC';
	var LIST_ROOM_TOPIC = exports.LIST_ROOM_TOPIC = 'LIST_ROOM_TOPIC';
	var LIST_TOPIC_FILES = exports.LIST_TOPIC_FILES = 'LIST_TOPIC_FILES';
	var SAVED_TOPIC_FILE = exports.SAVED_TOPIC_FILE = 'SAVED_TOPIC_FILE';
	var CANCEL_FILE = exports.CANCEL_FILE = 'CANCEL_FILE';
	var SAVED_ROOM_STUDENT = exports.SAVED_ROOM_STUDENT = 'SAVED_ROOM_STUDENT';
	var CANCEL_TOPIC = exports.CANCEL_TOPIC = 'CANCEL_TOPIC';
	var SHOW_MODAL = exports.SHOW_MODAL = 'SHOW_MODAL';
	var EDIT_MODAL = exports.EDIT_MODAL = 'EDIT_MODAL';
	var FETCHED_TOPIC_QUESTIONNAIRE = exports.FETCHED_TOPIC_QUESTIONNAIRE = 'FETCHED_TOPIC_QUESTIONNAIRE';
	var FETCH_TOPIC_QUESTIONNAIRE_FAILED = exports.FETCH_TOPIC_QUESTIONNAIRE_FAILED = 'FETCH_TOPIC_QUESTIONNAIRE_FAILED';
	var ASSIGNED_QUESTIONNAIRE = exports.ASSIGNED_QUESTIONNAIRE = 'ASSIGNED_QUESTIONNAIRE';
	var ASSIGN_QUESTIONNAIRE_FAILED = exports.ASSIGN_QUESTIONNAIRE_FAILED = 'ASSIGN_QUESTIONNAIRE_FAILED';
	var QUESTIONNAIRE_SUCCESSFULLY_UNASSIGNED = exports.QUESTIONNAIRE_SUCCESSFULLY_UNASSIGNED = 'QUESTIONNAIRE_SUCCESSFULLY_UNASSIGNED';
	var QUESTIONNAIRE_UNASSIGN_FAILED = exports.QUESTIONNAIRE_UNASSIGN_FAILED = 'QUESTIONNAIRE_UNASSIGN_FAILED';
	var LIST_RESULT_TOPIC = exports.LIST_RESULT_TOPIC = 'LIST_RESULT_TOPIC';
	var FETCHED_RESULT = exports.FETCHED_RESULT = 'FETCHED_RESULT';
	var FETCH_RESULT_FAILED = exports.FETCH_RESULT_FAILED = 'FETCH_RESULT_FAILED';
	var LIST_ROOM_FEEDBACK = exports.LIST_ROOM_FEEDBACK = 'LIST_ROOM_FEEDBACK';
	var SAVED_ROOM_FEEDBACK = exports.SAVED_ROOM_FEEDBACK = 'SAVED_ROOM_FEEDBACK';
	var LIST_LOCATION = exports.LIST_LOCATION = 'LIST_LOCATION';
	var SAVE_LOCATION = exports.SAVE_LOCATION = 'SAVE_LOCATION';
	var LIST_ROOM_LOCATION = exports.LIST_ROOM_LOCATION = 'LIST_ROOM_LOCATION';
	var DELETE_ROOM_LOCATION = exports.DELETE_ROOM_LOCATION = 'DELETE_ROOM_LOCATION';
	var DELETE_ROOM_LOCATIONPARTICIPANT = exports.DELETE_ROOM_LOCATIONPARTICIPANT = 'DELETE_ROOM_LOCATIONPARTICIPANT';
	var LIST_ROOM_QUESTIONNAIRE = exports.LIST_ROOM_QUESTIONNAIRE = 'LIST_ROOM_QUESTIONNAIRE';
	var SAVED_FEEDBACKTYPE = exports.SAVED_FEEDBACKTYPE = 'SAVED_FEEDBACKTYPE';
	var GET_FEEDBACK_TYPE = exports.GET_FEEDBACK_TYPE = 'GET_FEEDBACK_TYPE';
	var SAVED_CODECTYPE = exports.SAVED_CODECTYPE = 'SAVED_CODECTYPE';
	var SAVED_ENABLE_LIVE = exports.SAVED_ENABLE_LIVE = 'SAVED_ENABLE_LIVE';
	var UPDATED_FILE_DESC = exports.UPDATED_FILE_DESC = 'UPDATED_FILE_DESC';
	var SAVED_GROUP_STUDENT = exports.SAVED_GROUP_STUDENT = 'SAVED_GROUP_STUDENT';
	var LIST_ROOM_ASSIGNMENT = exports.LIST_ROOM_ASSIGNMENT = 'LIST_ROOM_ASSIGNMENT';
	var SAVED_ASSIGNMENT = exports.SAVED_ASSIGNMENT = 'SAVED_ASSIGNMENT';
	var SAVED_ROOM_ASSIGNMENT = exports.SAVED_ROOM_ASSIGNMENT = 'SAVED_ROOM_ASSIGNMENT';
	var SAVED_TOPIC_DATA = exports.SAVED_TOPIC_DATA = 'SAVED_TOPIC_DATA';
	var LIST_ASSIGNMENT_SUBMISSION = exports.LIST_ASSIGNMENT_SUBMISSION = 'LIST_ASSIGNMENT_SUBMISSION';
	var DELETE_UPLOADED_FILES = exports.DELETE_UPLOADED_FILES = 'DELETE_UPLOADED_FILES';
	var DELETE_ASSIGNMENT = exports.DELETE_ASSIGNMENT = 'DELETE_ASSIGNMENT';
	var UPLOAD_FILE_ENABLE = exports.UPLOAD_FILE_ENABLE = 'UPLOAD_FILE_ENABLE';
	var ROOM_TOPIC_ENABLE = exports.ROOM_TOPIC_ENABLE = 'ROOM_TOPIC_ENABLE';
	var GET_PLAGIARISM_DATA = exports.GET_PLAGIARISM_DATA = 'GET_PLAGIARISM_DATA';
	var GET_PLAGIARISM_DATA_FAILED = exports.GET_PLAGIARISM_DATA_FAILED = 'GET_PLAGIARISM_DATA_FAILED';
	var SAVED_COURSE_ATTENDANCE = exports.SAVED_COURSE_ATTENDANCE = 'SAVED_COURSE_ATTENDANCE';
	var CLEAR_PLAGIARISM_DATA = exports.CLEAR_PLAGIARISM_DATA = 'CLEAR_PLAGIARISM_DATA';
	// export const SAVED_STUDENTS_ASSIGNMENT = 'SAVED_STUDENTS_ASSIGNMENT';
	var LIST_COURSE_ATTENDANCE = exports.LIST_COURSE_ATTENDANCE = 'LIST_COURSE_ATTENDANCE';
	var CLEAR_ATTENDANCE_LIST = exports.CLEAR_ATTENDANCE_LIST = 'CLEAR_ATTENDANCE_LIST';
	var SAVED_INDIVIDUAL_ATTENDANCE = exports.SAVED_INDIVIDUAL_ATTENDANCE = 'SAVED_INDIVIDUAL_ATTENDANCE';
	var LIST_INDIVIDUAL_ATTENDANCE = exports.LIST_INDIVIDUAL_ATTENDANCE = 'LIST_INDIVIDUAL_ATTENDANCE';
	var CLEAR_INDIVIDUAL_ATTENDANCE_LIST = exports.CLEAR_INDIVIDUAL_ATTENDANCE_LIST = 'CLEAR_INDIVIDUAL_ATTENDANCE_LIST';
	var LIST_TOTAL_SCHEDULES = exports.LIST_TOTAL_SCHEDULES = 'LIST_TOTAL_SCHEDULES';
	var CLEAR_TOTAL_SCHEDULES_LIST = exports.CLEAR_TOTAL_SCHEDULES_LIST = 'CLEAR_TOTAL_SCHEDULES_LIST';
	var SAVED_COURSE_TOPICS = exports.SAVED_COURSE_TOPICS = 'SAVED_COURSE_TOPICS';
	var SAVED_VIEWED_TOPICS = exports.SAVED_VIEWED_TOPICS = 'SAVED_VIEWED_TOPICS';
	var LIST_TOPIC_VIEWED_USERS = exports.LIST_TOPIC_VIEWED_USERS = 'LIST_TOPIC_VIEWED_USERS';
	var INDIVIDUAL_ASSIGNMENT_DATA = exports.INDIVIDUAL_ASSIGNMENT_DATA = 'INDIVIDUAL_ASSIGNMENT_DATA';
	var INDIVIDUAL_ASSIGNMENT_DATA_FAILED = exports.INDIVIDUAL_ASSIGNMENT_DATA_FAILED = 'INDIVIDUAL_ASSIGNMENT_DATA_FAILED';
	var CLEAR_INDIVIDUAL_ASSIGNMENT_DATA = exports.CLEAR_INDIVIDUAL_ASSIGNMENT_DATA = 'CLEAR_INDIVIDUAL_ASSIGNMENT_DATA';
	var SET_CERTIFICATE_DATA = exports.SET_CERTIFICATE_DATA = 'SET_CERTIFICATE_DATA';
	var SET_CERTIFICATE_DATA_FAILED = exports.SET_CERTIFICATE_DATA_FAILED = 'SET_CERTIFICATE_DATA_FAILED';
	var TOGGLE_CERTIFICATE_DOWNLOAD = exports.TOGGLE_CERTIFICATE_DOWNLOAD = 'TOGGLE_CERTIFICATE_DOWNLOAD';
	
	function EditRoom() {
	  return {
	    type: EDIT_ROOM,
	    status: true
	  };
	}
	
	function SaveRoom(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-room', 'post', {
	      roomdata: data
	    }).then(function (res) {
	      return dispatch(RoomStatus(res));
	    });
	  };
	}
	
	function UpdateRoom(data, id) {
	  delete data["_id"];
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('update-room/' + id, 'put', {
	      roomdata: data
	    }).then(function (res) {
	      return dispatch(RoomStatus(res));
	    });
	  };
	}
	
	function RoomStatus(response) {
	  // console.log("response === ",response);
	  if (response.status) {
	    // browserHistory.push('/admin/room/adduser/'+response.data._id);
	    return {
	      type: SAVED_ROOM,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVED_ROOM,
	        status: response.status,
	        // data: {},
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVED_ROOM,
	        status: response.status,
	        // data: {},
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVED_ROOM,
	      status: response.status,
	      // data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getRoomData(objEntity, pageName) {
	  //console.log('objEntity',objEntity)
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-room/' + objEntity.roomId, 'get').then(function (res) {
	      return dispatch(setRoom(res, pageName));
	    });
	  };
	}
	
	function setRoom(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  // console.log("response in room === ", response);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: SAVED_ROOM,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_ROOM,
	      status: response.status,
	      data: {},
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: SAVED_ROOM,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function RoomList(data, currentPage) {
	  var sortStr = JSON.stringify(data.sortObj);
	  var query = 'items=' + data.itemsPerPage + '&page=' + data.currentPage + '&sort=' + sortStr;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-room?' + query, 'get').then(function (res) {
	      return dispatch(RoomListStatus(res, currentPage));
	    });
	  };
	}
	
	function RoomListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_ROOM,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_ROOM,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_ROOM,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function RoomStore(data) {
	  return {
	    type: GET_ROOM,
	    data: data
	  };
	}
	
	function ClearRoom() {
	  return {
	    type: CLEAR_ROOM
	  };
	}
	
	function CancelRoom() {
	  return {
	    type: CANCEL_ROOM,
	    status: false,
	    error: [],
	    message: ''
	  };
	}
	
	function UpdateRoomSchema(schema) {
	  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	  return {
	    type: UPDATE_SCHEMA,
	    schema: schema,
	    data: data
	  };
	}
	
	function DeleteRoom(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-room/' + objEntity.roomId, 'delete').then(function (res) {
	      return dispatch(RoomLoadList(res));
	    });
	  };
	}
	
	function RoomLoadList(response) {
	  //console.log("response === ",response);
	  if (response.status) {
	    // browserHistory.push('/admin/room/list');
	    return {
	      type: CANCEL_ROOM,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: CANCEL_ROOM,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: CANCEL_ROOM,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function SaveRoomUser() {
	  //console.log("SaveRoomUser function-action");
	  return {
	    type: CANCEL_ROOM,
	    status: false
	  };
	}
	
	function addRoomUser(objEntity) {
	  //console.log("AddRoomUser function-action");
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('add-room-user', 'post', {
	      roomdata: {
	        // uid: objEntity.uid,
	        userId: objEntity.userId,
	        roomId: objEntity.roomId
	      }
	    }).then(function (res) {
	      return dispatch(setRoomUsers(res));
	    });
	  };
	}
	
	function setRoomUsers(response) {
	  if (response.status) {
	    return {
	      type: SAVED_ROOM_USER,
	      data: response.data,
	      status: response.status,
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_ROOM_USER,
	      status: response.status,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: SAVED_ROOM_USER,
	      status: response.status,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function addRoomStudent(objEntity) {
	
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('addroomstudent', 'post', {
	      studentdata: objEntity
	    }).then(function (res) {
	      return dispatch(setRoomStudents(res));
	    });
	  };
	}
	
	function setRoomStudents(response) {
	  // console.log(response);
	  if (response.status) {
	    return {
	      type: SAVED_ROOM_STUDENT,
	      data: response.data,
	      status: response.status,
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_ROOM_STUDENT,
	      data: {},
	      status: response.status,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: SAVED_ROOM_STUDENT,
	      data: {},
	      status: response.status,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getStudentData(objEntity) {
	  //console.log('objEntity',objEntity)
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetchstudent/' + objEntity.roomId + '/' + objEntity.instId, 'get').then(function (res) {
	      return dispatch(setRoomStudents(res));
	    });
	  };
	}
	
	function removeRoomStud(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('removeroomstud/' + objEntity.roomId + '/' + objEntity.instId + '/' + objEntity.studId, 'delete').then(function (res) {
	      return dispatch(setRoomStudents(res));
	    });
	  };
	}
	
	function removeRoomUser(objEntity) {
	  //console.log("RemoveRoomUser function-action");
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('remove-room-user/' + objEntity.roomId + '/' + objEntity.userId, 'delete').then(function (res) {
	      return dispatch(setRoomUsers(res));
	    });
	  };
	}
	
	function SaveRoomTopic(data) {
	  if (data._id) {
	    var id = data._id;
	    delete data["_id"];
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('update-room-topic/' + id, 'put', {
	        roomtopicdata: data
	      }).then(function (res) {
	        return dispatch(RoomTopicStatus(res));
	      });
	    };
	  } else {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('save-room-topic', 'post', {
	        roomtopicdata: data
	      }).then(function (res) {
	        return dispatch(RoomTopicStatus(res));
	      });
	    };
	  }
	}
	
	function RoomTopicStatus(response) {
	  //console.log("response === ",response);
	  //console.log("data",response.data.roomId)
	  if (response.status) {
	    _reactRouter.browserHistory.push('/admin/room/listtopic/' + response.data.roomId);
	    return {
	      type: SAVED_TOPIC,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVED_TOPIC,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVED_TOPIC,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVED_TOPIC,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function RoomTopicList(data, currentPage) {
	  var sortStr = JSON.stringify(data.sortObj);
	  var query = 'roomId=' + data.roomId + '&items=' + data.itemsPerPage + '&page=' + data.currentPage + '&sort=' + sortStr;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-room-topic?' + query, 'get').then(function (res) {
	      return dispatch(RoomTopicListStatus(res, currentPage));
	    });
	  };
	}
	
	function RoomTopicListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_ROOM_TOPIC,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_ROOM_TOPIC,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_ROOM_TOPIC,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getRoomTopicData(objEntity, pageName) {
	  //console.log('objEntity',objEntity)
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-room-topic/' + objEntity.roomId + '/' + objEntity.topicId, 'get').then(function (res) {
	      return dispatch(setRoomTopic(res, pageName));
	    });
	  };
	}
	
	function setRoomTopic(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  //console.log('getRoomTopicData',response);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: SAVED_ROOM_TOPIC,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_ROOM_TOPIC,
	      status: response.status,
	      data: {},
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: SAVED_ROOM_TOPIC,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function SaveEditorContent(data) {
	  if (data._id) {
	    var id = data._id;
	    delete data["_id"];
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('update-room-topic/' + id, 'put', {
	        roomtopicdata: data
	      }).then(function (res) {
	        return dispatch(SetEditorContent(res));
	      });
	    };
	  } else {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('save-room-topic', 'post', {
	        roomtopicdata: data
	      }).then(function (res) {
	        return dispatch(SetEditorContent(res));
	      });
	    };
	  }
	}
	
	function SetEditorContent(response) {
	  //console.log("response === ",response);
	  //console.log("data",response.data.roomId)
	  if (response.status) {
	    _reactRouter.browserHistory.push('/admin/room/listtopic/' + response.data.roomId);
	    return {
	      type: SAVED_TOPIC,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVED_TOPIC,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVED_TOPIC,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVED_TOPIC,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function RoomTopicFileList(data, currentPage) {
	  var query = 'roomId=' + data.roomId + '&topicId=' + data.topicId + '&items=' + data.itemsPerPage + '&page=' + data.currentPage;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  if (data && data.filterValue) {
	    query += '&filter=' + data.filterValue;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-topic-files?' + query, 'get').then(function (res) {
	      return dispatch(TopicUploadListStatus(res, currentPage));
	    });
	  };
	}
	
	function TopicUploadListStatus(response, currentPage) {
	  //console.log('response',response)
	  if (response.status) {
	    return {
	      type: LIST_TOPIC_FILES,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_TOPIC_FILES,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_TOPIC_FILES,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function NewFileUpload(response) {
	
	  //console.log('res',response)
	  if (response.status) {
	    _reactRouter.browserHistory.push("/admin/room/uploadtotopic/" + response.data.topicId + '/' + response.data.roomId);
	    return {
	      type: SAVED_TOPIC_FILE,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVED_TOPIC_FILE,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVED_TOPIC_FILE,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVED_TOPIC_FILE,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function DeleteFile(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-file/' + objEntity.roomId + '/' + objEntity.topicId + '/' + objEntity._id, 'delete').then(function (res) {
	      return dispatch(TopicFileLoadList(res));
	    });
	  };
	}
	
	function DeleteMultipleFile(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-multiple-files/' + objEntity.roomId + '/' + objEntity.topicId + '/' + objEntity.idsDelete, 'delete').then(function (res) {
	      return dispatch(TopicFileLoadList(res));
	    });
	  };
	}
	
	function TopicFileLoadList(response) {
	  //console.log("TopicFileLoadList === ",response);
	  //console.log(response)
	  if (response.status) {
	    return {
	      type: CANCEL_FILE,
	      status: false,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: CANCEL_FILE,
	      status: false,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: CANCEL_FILE,
	      status: false,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function RoomTopicStore(data) {
	  return {
	    type: SAVED_ROOM_TOPIC,
	    data: data
	  };
	}
	
	function DeleteTopic(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-room-topic/' + objEntity.roomId + '/' + objEntity._id, 'delete').then(function (res) {
	      return dispatch(TopicLoadList(res));
	    });
	  };
	}
	
	function TopicLoadList(response) {
	  //console.log("TopicFileLoadList === ",response);
	  //console.log(response)
	  if (response.status) {
	    return {
	      type: CANCEL_TOPIC,
	      status: false,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: CANCEL_TOPIC,
	      status: false,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: CANCEL_TOPIC,
	      status: false,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function showModal(data) {
	  return {
	    type: SHOW_MODAL,
	    data: data
	  };
	}
	
	function editModal(data) {
	  return {
	    type: EDIT_MODAL,
	    data: data
	  };
	}
	
	function getTopicQuestionnaireData(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-topic-questionnaire/' + objEntity.roomId + '/' + objEntity.topicId, 'get').then(function (res) {
	      return dispatch(setTopicQuestionnaire(res));
	    });
	  };
	}
	
	function setTopicQuestionnaire(response) {
	  if (response.status) {
	    return {
	      type: FETCHED_TOPIC_QUESTIONNAIRE,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: FETCH_TOPIC_QUESTIONNAIRE_FAILED,
	      status: response.status,
	      data: {},
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: FETCH_TOPIC_QUESTIONNAIRE_FAILED,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function AssignQuestionnaireRequest(data) {
	  if (data.questionnaire.editId == '') {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('assign-questionnaire', 'post', {
	        questionnaireData: {
	          data: data
	        }
	      }).then(function (res) {
	        return dispatch(QuestionnaireStatus(res));
	      });
	    };
	  } else if (data.questionnaire.editId != '') {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('update-assigned-questionnaire', 'put', {
	        questionnaireData: {
	          data: data
	        }
	      }).then(function (res) {
	        return dispatch(QuestionnaireStatus(res));
	      });
	    };
	  }
	}
	
	function QuestionnaireStatus(response) {
	  // console.log("response === ",response);
	  if (response.status) {
	    return {
	      type: ASSIGNED_QUESTIONNAIRE,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        err.push(obj.message);
	      });
	      return {
	        type: ASSIGN_QUESTIONNAIRE_FAILED,
	        status: response.status,
	        error: err,
	        message: ''
	      };
	    } else {
	      return {
	        type: ASSIGN_QUESTIONNAIRE_FAILED,
	        status: response.status,
	        error: [response.error],
	        openFrom: response.openFrom,
	        closeFrom: response.closeFrom,
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: ASSIGN_QUESTIONNAIRE_FAILED,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function unassignQuestionnaireRequest(objEntity) {
	  // console.log('objEntity', objEntity);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('unassign-questionnaire/' + objEntity.questionnaireId + '/' + objEntity.topicId, 'delete').then(function (res) {
	      return dispatch(unassignQuestionnaireResponse(res));
	    });
	  };
	}
	
	function confirmedUnassignQuestionnaireRequest(objEntity) {
	  // console.log('objEntity', objEntity);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('confirmed-unassign-questionnaire/' + objEntity.questionnaireId + '/' + objEntity.topicId, 'delete').then(function (res) {
	      return dispatch(unassignQuestionnaireResponse(res));
	    });
	  };
	}
	
	function unassignQuestionnaireResponse(response) {
	  // console.log("response === ",response);
	  if (response.status) {
	    return {
	      type: QUESTIONNAIRE_SUCCESSFULLY_UNASSIGNED,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: QUESTIONNAIRE_UNASSIGN_FAILED,
	      status: false,
	      error: response.error,
	      httpStatusCode: response.httpStatusCode,
	      questionnaireId: response.questionnaireId,
	      message: ''
	    };
	  } else {
	    return {
	      type: QUESTIONNAIRE_UNASSIGN_FAILED,
	      status: false,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function RoomFeedbackList(data, currentPage) {
	  //console.log(data);
	  var query = 'itemsPerPage=' + data.itemsPerPage + '&currentPage=' + data.currentPage + '&roomId=' + data.roomId;
	
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('room-feedback-list?' + query, 'get').then(function (res) {
	      return dispatch(RoomFeedbackListStatus(res, currentPage));
	    });
	  };
	}
	
	function RoomFeedbackListStatus(response, currentPage) {
	  // console.log("response at action", response);
	
	  if (response.status) {
	    return {
	      type: LIST_ROOM_FEEDBACK,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      roomId: response.roomId,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_ROOM_FEEDBACK,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_ROOM_FEEDBACK,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function TopicResultList(data, currentPage) {
	  var query = 'roomId=' + data.roomId + '&topicId=' + data.topicId + '&questionnaireId=' + data.questionnaireId + '&items=' + data.itemsPerPage + '&page=' + data.currentPage;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-result-topic?' + query, 'get').then(function (res) {
	      return dispatch(TopicResultListStatus(res, currentPage));
	    });
	  };
	}
	
	function TopicResultListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_RESULT_TOPIC,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_RESULT_TOPIC,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_RESULT_TOPIC,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getResultData(objEntity) {
	  // console.log('objEntity',objEntity)
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-result/' + objEntity, 'get').then(function (res) {
	      return dispatch(setResult(res));
	    });
	  };
	}
	
	function setResult(response) {
	  // console.log("response in room === ", response);
	  if (response.status) {
	    return {
	      type: FETCHED_RESULT,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: FETCH_RESULT_FAILED,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: FETCH_RESULT_FAILED,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getRoomFeedbackData(feedbackId, pageName) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-room-feedback/' + feedbackId, 'get').then(function (res) {
	      return dispatch(setRoomFeedback(res, pageName));
	    });
	  };
	}
	
	function setRoomFeedback(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  //console.log("setRoomFeedback------", response);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: SAVED_ROOM_FEEDBACK,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_ROOM_FEEDBACK,
	      status: response.status,
	      data: {},
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: SAVED_ROOM_FEEDBACK,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	function getLocationList() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('getLocationList', 'get').then(function (res) {
	      return dispatch(LocationListStatus(res));
	    });
	  };
	}
	
	function LocationListStatus(response) {
	  if (response.status) {
	    return {
	      status: response.status,
	      type: LIST_LOCATION,
	      listData: response.data,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      status: response.status,
	      type: LIST_LOCATION,
	      listData: {},
	      error: [response.error]
	    };
	  } else {
	    return {
	      status: response.status,
	      type: LIST_LOCATION,
	      listData: {},
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getinstructorStudents(data) {
	  // console.log("getinstructorStudents Actions:", data);
	  var query = "roomId=" + data.roomId + "&instructorId=" + data.instructorId;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('getRoomInstructorStudentsList?' + query, 'get');
	  };
	}
	
	function saveRoomLocation(data) {
	  // console.log("saveRoomLocation Actions:", data);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('saveRoomLocation', 'post', {
	      data: data
	    }).then(function (res) {
	      return dispatch(LocationSavedStatus(res));
	    });
	  };
	}
	
	function LocationSavedStatus(response) {
	  // console.log("response === ",response);
	  if (response.status) {
	    _reactRouter.browserHistory.push('/admin/room/listlocation/' + response.roomId);
	    return {
	      type: SAVE_LOCATION,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVE_LOCATION,
	        status: response.status,
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVE_LOCATION,
	        status: response.status,
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVE_LOCATION,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getRoomLocations(data) {
	  // console.log("getLocationList Actions:", data);
	  var query = "roomId=" + data;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('getRoomLocations?' + query, 'get').then(function (res) {
	      return dispatch(RoomLocationListStatus(res));
	    });
	  };
	}
	
	function RoomLocationListStatus(response) {
	  // console.log("response in action",response )
	  if (response.status) {
	    return {
	      status: response.status,
	      type: LIST_ROOM_LOCATION,
	      listData: response.data,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      status: response.status,
	      type: LIST_ROOM_LOCATION,
	      listData: {},
	      error: [response.error]
	    };
	  } else {
	    return {
	      status: response.status,
	      type: LIST_ROOM_LOCATION,
	      listData: {},
	      error: ['Internal server error']
	    };
	  }
	}
	
	function deleteRoomLocation(data) {
	  return function (dispatch) {
	    var query = "roomLocationId=" + data.roomLocationId + "&roomId=" + data.roomId;
	    return (0, _apiCaller2.default)('delete-room-location?' + query, 'delete').then(function (res) {
	      return dispatch(deletedRoomLocationStatus(res));
	    });
	  };
	}
	
	function deletedRoomLocationStatus(response) {
	  if (response.status) {
	    return {
	      type: DELETE_ROOM_LOCATION,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: DELETE_ROOM_LOCATION,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: DELETE_ROOM_LOCATION,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function deleteRoomLocationParticipant(data) {
	  // console.log("deleteRoomLocationParticipant1:",data);
	  return function (dispatch) {
	    var query = "roomId=" + data.roomId + "&roomLocationId=" + data.roomLocationId + "&roomParticipantId=" + data.roomParticipantId;
	    return (0, _apiCaller2.default)('delete-room-location-participant?' + query, 'delete').then(function (res) {
	      return dispatch(DeletedRoomLocationParticipantStatus(res));
	    });
	  };
	}
	
	function DeletedRoomLocationParticipantStatus(response) {
	  // console.log("response:",response);
	  if (response.status) {
	    return {
	      type: DELETE_ROOM_LOCATIONPARTICIPANT,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: DELETE_ROOM_LOCATIONPARTICIPANT,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: DELETE_ROOM_LOCATIONPARTICIPANT,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getQuestionnaire() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('getQuestionnaireData', 'get').then(function (res) {
	      return dispatch(GetQuestionnaireListStatus(res));
	    });
	  };
	}
	
	function GetQuestionnaireListStatus(response) {
	  // console.log("response in action",response )
	  if (response.status) {
	    return {
	      status: response.status,
	      type: LIST_ROOM_QUESTIONNAIRE,
	      listData: response.data,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      status: response.status,
	      type: LIST_ROOM_QUESTIONNAIRE,
	      listData: {},
	      error: [response.error]
	    };
	  } else {
	    return {
	      status: response.status,
	      type: LIST_ROOM_QUESTIONNAIRE,
	      listData: {},
	      error: ['Internal server error']
	    };
	  }
	}
	
	function saveFeedbackTypeRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('saveRoomFeedbackType/' + data.roomId, 'put', {
	      data: data
	    }).then(function (res) {
	      return dispatch(SaveFeedbackTypeRequest(res));
	    });
	  };
	}
	
	function SaveFeedbackTypeRequest(response) {
	  //console.log("response === ",response);
	  if (response.status) {
	    // browserHistory.push('/admin/room/adduser/'+response.data._id);
	    return {
	      type: SAVED_FEEDBACKTYPE,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVED_FEEDBACKTYPE,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVED_FEEDBACKTYPE,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVED_FEEDBACKTYPE,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getFeedbackTypeValue(data) {
	  // console.log("getLocationList Actions:", data);
	  return function (dispatch) {
	    var query = "roomId=" + data;
	    return (0, _apiCaller2.default)('getRoomFeedbackType?' + query, 'get').then(function (res) {
	      return dispatch(getFeedbackTypeValueStatus(res));
	    });
	  };
	}
	
	function getFeedbackTypeValueStatus(response) {
	  if (response.status) {
	    return {
	      status: response.status,
	      type: GET_FEEDBACK_TYPE,
	      listData: response.data,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      status: response.status,
	      type: GET_FEEDBACK_TYPE,
	      listData: {},
	      error: [response.error]
	    };
	  } else {
	    return {
	      status: response.status,
	      type: GET_FEEDBACK_TYPE,
	      listData: {},
	      error: ['Internal server error']
	    };
	  }
	}
	
	function saveCodecTypeRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('saveRoomCodecType/' + data.roomId, 'put', {
	      data: data
	    }).then(function (res) {
	      return dispatch(SaveCodecTypeRequest(res));
	    });
	  };
	}
	
	function SaveCodecTypeRequest(response) {
	  //console.log("response === ",response);
	  if (response.status) {
	    // browserHistory.push('/admin/room/adduser/'+response.data._id);
	    return {
	      type: SAVED_CODECTYPE,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else {
	    return {
	      type: SAVED_CODECTYPE,
	      status: response.status,
	      data: {},
	      error: [response.error],
	      message: ''
	    };
	  }
	}
	
	function saveEnableLiveRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('saveRoomEnableLive/' + data.roomId, 'put', {
	      data: data
	    }).then(function (res) {
	      return dispatch(SaveEnableLiveRequest(res));
	    });
	  };
	}
	
	function SaveEnableLiveRequest(response) {
	  if (response.status) {
	    return {
	      type: SAVED_ENABLE_LIVE,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else {
	    return {
	      type: SAVED_ENABLE_LIVE,
	      status: response.status,
	      data: {},
	      error: [response.error],
	      message: ''
	    };
	  }
	}
	
	function setUploadFileDescRequest(data, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('set-upload-file-desc', 'post', {
	      data: data
	    }).then(function (res) {
	      return dispatch(UploadFileDescStatus(res, currentPage));
	    });
	  };
	}
	
	function UploadFileDescStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      status: response.status,
	      type: UPDATED_FILE_DESC,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      message: response.message,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      status: response.status,
	      type: UPDATE_FILE_DESC_FAILED,
	      error: [response.error]
	    };
	  } else {
	    return {
	      status: response.status,
	      type: UPDATE_FILE_DESC_FAILED,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function addGroupStudentRequest(objEntity) {
	  //console.log("AddRoomUser function-action");
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('addGroupStudent', 'post', {
	      studentdata: objEntity
	    }).then(function (res) {
	      return dispatch(addGroupStudentRequestStatus(res));
	    });
	  };
	}
	
	function addGroupStudentRequestStatus(response) {
	  // console.log(response);
	  if (response.status) {
	    return {
	      type: SAVED_GROUP_STUDENT,
	      data: response.data,
	      status: response.status,
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_GROUP_STUDENT,
	      data: {},
	      status: response.status,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: SAVED_GROUP_STUDENT,
	      data: {},
	      status: response.status,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function RoomAssignmentList(data, currentPage) {
	  var query = 'roomId=' + data.roomId + '&items=' + data.itemsPerPage + '&page=' + data.currentPage;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-room-assignment?' + query, 'get').then(function (res) {
	      return dispatch(RoomAssignmentListStatus(res, currentPage));
	    });
	  };
	}
	
	function RoomAssignmentListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_ROOM_ASSIGNMENT,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_ROOM_ASSIGNMENT,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_ROOM_ASSIGNMENT,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function RoomAssignmentStore(data) {
	  return {
	    type: SAVED_ROOM_ASSIGNMENT,
	    data: data
	  };
	}
	
	function SaveRoomAssignment(data) {
	  if (data.assignmentId) {
	    var id = data.assignmentId;
	    delete data["assignmentId"];
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('update-room-assignment/' + id, 'put', {
	        roomAssignmentData: data
	      }).then(function (res) {
	        return dispatch(RoomAssignmentStatus(res));
	      });
	    };
	  } else {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('save-room-assignment', 'post', {
	        roomAssignmentData: data
	      }).then(function (res) {
	        return dispatch(RoomAssignmentStatus(res));
	      });
	    };
	  }
	}
	
	function RoomAssignmentStatus(response) {
	  if (response.status) {
	    _reactRouter.browserHistory.push('/admin/room/assignments/' + response.data.roomId);
	    return {
	      type: SAVED_ASSIGNMENT,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVED_ASSIGNMENT,
	        status: response.status,
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVED_ASSIGNMENT,
	        status: response.status,
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVED_ASSIGNMENT,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getTopicDataRequest(roomId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-topic-data/' + roomId, 'get').then(function (res) {
	      return dispatch(setTopicData(res));
	    });
	  };
	}
	
	function setTopicData(response) {
	  if (response.status) {
	    return {
	      type: SAVED_TOPIC_DATA,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_TOPIC_DATA,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: SAVED_TOPIC_DATA,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function assignmentSubmissionList(data, currentPage) {
	  var query = 'roomId=' + data.roomId + '&assignmentId=' + data.assignmentId + '&items=' + data.itemsPerPage + '&page=' + data.currentPage;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-assignment-submission?' + query, 'get').then(function (res) {
	      return dispatch(assignmentSubmissionListStatus(res, currentPage));
	    });
	  };
	}
	
	function assignmentSubmissionListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_ASSIGNMENT_SUBMISSION,
	      listData: response.data.submissions,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_ASSIGNMENT_SUBMISSION,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_ASSIGNMENT_SUBMISSION,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getAssignmentDataRequest(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-assignment-data/' + obj.roomId + '/' + obj.assignmentId, 'get').then(function (res) {
	      return dispatch(setAssignmentData(res));
	    });
	  };
	}
	
	function setAssignmentData(response) {
	  if (response.status) {
	    return {
	      type: SAVED_ROOM_ASSIGNMENT,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_ROOM_ASSIGNMENT,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: SAVED_ROOM_ASSIGNMENT,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function deleteAssignmentUploadedFile(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-assignment-uploaded-file/' + obj.roomId + '/' + obj.assignmentId, 'delete').then(function (res) {
	      return dispatch(deleteAssignmentUplaodedFileResponse(res));
	    });
	  };
	}
	
	function deleteAssignmentUplaodedFileResponse(response) {
	  if (response.status) {
	    return {
	      type: DELETE_UPLOADED_FILES,
	      status: response.status,
	      data: response.data,
	      message: response.message,
	      error: response.error
	    };
	  } else {
	    return {
	      type: DELETE_UPLOADED_FILES,
	      status: response.status,
	      error: response.error
	    };
	  }
	}
	
	function deleteAssignmentRequest(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-assignment/' + obj.roomId + '/' + obj.assignmentId, 'delete').then(function (res) {
	      return dispatch(deleteAssignmentResponse(res));
	    });
	  };
	}
	
	function deleteAssignmentResponse(response) {
	  if (response.status) {
	    return {
	      type: DELETE_ASSIGNMENT,
	      status: response.status,
	      message: response.message,
	      error: response.error
	    };
	  } else {
	    return {
	      type: DELETE_ASSIGNMENT,
	      status: response.status,
	      error: response.error
	    };
	  }
	}
	
	function handleFileEnable(status, id) {
	  console.log("actions", status, id);
	  console.log("actions1.....", id);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('upload-file-enable/' + id, 'put', {
	      fileEnable: { isEnable: status }
	    }).then(function (res) {
	      return dispatch(handleFileLoadList(res));
	    });
	  };
	}
	
	function handleFileLoadList(response) {
	  console.log("response", response);
	  if (response.status) {
	    return {
	      type: UPLOAD_FILE_ENABLE,
	      status: response.status,
	      id: response.id,
	      fileData: response.res,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: UPLOAD_FILE_ENABLE,
	        status: response.status,
	        id: null,
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: UPLOAD_FILE_ENABLE,
	        status: response.status,
	        id: null,
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: UPLOAD_FILE_ENABLE,
	      status: response.status,
	      id: null,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function handleTopicLoadList(response) {
	
	  if (response.status) {
	    return {
	      type: ROOM_TOPIC_ENABLE,
	      status: response.status,
	      id: response.id,
	      topicData: response.res,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: ROOM_TOPIC_ENABLE,
	        status: response.status,
	        id: null,
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: ROOM_TOPIC_ENABLE,
	        status: response.status,
	        id: null,
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: TOPIC_ENABLE,
	      status: response.status,
	      id: null,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function handleTopicEnable(status, id) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('enable-room-topic/' + id, 'put', {
	      topicEnable: { topicEnable: status }
	    }).then(function (res) {
	      return dispatch(handleTopicLoadList(res));
	    });
	  };
	}
	
	function getPlagiarismData(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-plagiarism-data/' + obj.roomId + '/' + obj.assignmentId + '/' + obj.studentId, 'get').then(function (res) {
	      return dispatch(getPlagiarismDataResponse(res));
	    });
	  };
	}
	
	function getPlagiarismDataResponse(response) {
	  if (response.status) {
	    return {
	      type: GET_PLAGIARISM_DATA,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: GET_PLAGIARISM_DATA_FAILED,
	      status: response.status,
	      data: {},
	      error: response.error,
	      message: ''
	    };
	  } else {
	    return {
	      type: GET_PLAGIARISM_DATA_FAILED,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function ClearPlagiarism() {
	  return {
	    type: CLEAR_PLAGIARISM_DATA
	  };
	}
	
	// export function setStudentsAssignment(response) {
	//   if (response.status) {
	//     return {
	//       type: SAVED_STUDENTS_ASSIGNMENT,
	//       status: response.status,
	//       data: response.data,
	//     };
	//   } else if (response.error) {
	//     return {
	//       type: SAVED_STUDENTS_ASSIGNMENT,
	//       status: response.status,
	//     };
	//   } else {
	//     return {
	//       type: SAVED_STUDENTS_ASSIGNMENT,
	//       status: response.status,
	//     };
	//   }
	// }
	
	// export function getStudentsAssignmentDataRequest (objEntity) {
	//   return (dispatch) => {
	//     return callApi('fetch-students-assignment/'+objEntity.roomId+'/'+objEntity.assignmentId,'get').then(res => dispatch(setStudentsAssignment(res)));
	//   }
	// }
	
	function getPlagiarismCredits() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-plagiarism-credits');
	  };
	}
	
	function setCourseAttendance(response) {
	  if (response.status) {
	    return {
	      type: SAVED_COURSE_ATTENDANCE,
	      status: response.status,
	      data: response.data
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_COURSE_ATTENDANCE,
	      status: response.status
	    };
	  } else {
	    return {
	      type: SAVED_COURSE_ATTENDANCE,
	      status: response.status
	    };
	  }
	}
	
	function getCourseAttendanceRequest(courseId, fromDate, toDate) {
	  var query = '?rId=' + courseId + '&fromDate=' + (0, _moment2.default)(fromDate).utc().format("x") + '&toDate=' + (0, _moment2.default)(toDate).utc().format("x");
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-course-attendance' + query, 'get').then(function (res) {
	      return dispatch(setCourseAttendance(res));
	    });
	  };
	}
	
	function getAttendanceList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-activeusers', 'post', {
	      usersData: objEntity
	    }).then(function (res) {
	      return dispatch(SetAttendanceList(res, currentPage));
	    });
	  };
	}
	
	function SetAttendanceList(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_COURSE_ATTENDANCE,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_COURSE_ATTENDANCE,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_COURSE_ATTENDANCE,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function clearAttendanceList() {
	  return {
	    type: CLEAR_ATTENDANCE_LIST
	  };
	}
	
	function setIndividualAttendance(response) {
	  if (response.status) {
	    return {
	      type: SAVED_INDIVIDUAL_ATTENDANCE,
	      status: response.status,
	      data: response.data
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_INDIVIDUAL_ATTENDANCE,
	      status: response.status
	    };
	  } else {
	    return {
	      type: SAVED_INDIVIDUAL_ATTENDANCE,
	      status: response.status
	    };
	  }
	}
	
	function getIndividualAttendance(objEntity) {
	  var query = '?rId=' + objEntity.courseId + '&uId=' + objEntity.userId + '&fromDate=' + (0, _moment2.default)(objEntity.fromDate).utc().format("x") + '&toDate=' + (0, _moment2.default)(objEntity.toDate).utc().format("x");
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-individual-attendance' + query, 'get').then(function (res) {
	      return dispatch(setIndividualAttendance(res));
	    });
	  };
	}
	
	function SetIndividualAttendanceList(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_INDIVIDUAL_ATTENDANCE,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_INDIVIDUAL_ATTENDANCE,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_INDIVIDUAL_ATTENDANCE,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getIndividualAttendanceList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-individual-attendance', 'post', {
	      attendanceData: objEntity
	    }).then(function (res) {
	      return dispatch(SetIndividualAttendanceList(res, currentPage));
	    });
	  };
	}
	
	function clearIndividualAttendanceList() {
	  return {
	    type: CLEAR_INDIVIDUAL_ATTENDANCE_LIST
	  };
	}
	
	function setTotalSchedulesRequest(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_TOTAL_SCHEDULES,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_TOTAL_SCHEDULES,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_TOTAL_SCHEDULES,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getTotalSchedulesList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-total-schedules', 'post', {
	      scheduleData: objEntity
	    }).then(function (res) {
	      return dispatch(setTotalSchedulesRequest(res, currentPage));
	    });
	  };
	}
	
	function clearTotalSchedulesList() {
	  return {
	    type: CLEAR_TOTAL_SCHEDULES_LIST
	  };
	}
	
	function setTopicViewedUsers(response, currentPage) {
	  if (response.status) {
	    return {
	      type: SAVED_VIEWED_TOPICS,
	      status: response.status,
	      data: response.data
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_VIEWED_TOPICS,
	      status: response.status
	    };
	  } else {
	    return {
	      type: SAVED_VIEWED_TOPICS,
	      status: response.status
	    };
	  }
	}
	
	function getTopicViewedUsersRequest(objEntity) {
	  var query = '?rId=' + objEntity.courseId + '&topicId=' + objEntity.topicId;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-topic-viewed-users' + query, 'get').then(function (res) {
	      return dispatch(setTopicViewedUsers(res));
	    });
	  };
	}
	
	function setTopicViewedUsersList(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_TOPIC_VIEWED_USERS,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_TOPIC_VIEWED_USERS,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_TOPIC_VIEWED_USERS,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getTopicViewedUsersList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-topic-viewed-users', 'post', {
	      topicViewedUsersData: objEntity
	    }).then(function (res) {
	      return dispatch(setTopicViewedUsersList(res, currentPage));
	    });
	  };
	}
	
	function setCourseTopics(response) {
	  if (response.status) {
	    return {
	      type: SAVED_COURSE_TOPICS,
	      data: response.data,
	      roomData: response.roomData,
	      status: response.status,
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_COURSE_TOPICS,
	      data: {},
	      roomData: {},
	      status: response.status,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: SAVED_COURSE_TOPICS,
	      data: {},
	      status: response.status,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getCourseTopicsData(courseId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-course-topics/' + courseId, 'get', {}).then(function (res) {
	      return dispatch(setCourseTopics(res));
	    });
	  };
	}
	
	function getTopicUsersData(courseId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-course-users/' + courseId, 'get').then(function (res) {
	      return dispatch(setCourseTopics(res));
	    });
	  };
	}
	
	function getUserViewedTopics(objEntity) {
	  var query = '?rId=' + objEntity.courseId + '&uId=' + objEntity.userId;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-user-viewed-topics' + query, 'get').then(function (res) {
	      return dispatch(setTopicViewedUsers(res));
	    });
	  };
	}
	
	function getCourseTopicsList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-course-topics', 'post', {
	      topicsData: objEntity
	    }).then(function (res) {
	      return dispatch(setTopicViewedUsersList(res, currentPage));
	    });
	  };
	}
	
	function getViewedTopicsList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-course-topics', 'post', {
	      topicsData: objEntity
	    }).then(function (res) {
	      return dispatch(setTopicViewedUsersList(res, currentPage));
	    });
	  };
	}
	
	function getuserViewedALLTopicsList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-user-viewed-allTopics', 'post', {
	      topicsData: objEntity
	    }).then(function (res) {
	      return dispatch(setTopicViewedUsersList(res, currentPage));
	    });
	  };
	}
	
	function getAssignmentData(obj) {
	  // console.log('getAssignmentData', obj);
	  var query = '?assignmentId=' + obj.assignmentId + '&studentID=' + obj.studentID;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-individual-assignment-data' + query, 'get').then(function (res) {
	      return dispatch(AssignmentDataStatus(res));
	    });
	  };
	}
	
	function AssignmentDataStatus(response) {
	  // console.log('AssignmentDataStatus', response);
	  if (response.status) {
	    return {
	      type: INDIVIDUAL_ASSIGNMENT_DATA,
	      status: response.status,
	      data: response.data,
	      message: response.message != undefined ? response.message : ''
	    };
	  } else if (response.error) {
	    return {
	      type: INDIVIDUAL_ASSIGNMENT_DATA_FAILED,
	      status: response.status,
	      error: response.error
	    };
	  } else {
	    return {
	      type: INDIVIDUAL_ASSIGNMENT_DATA_FAILED,
	      status: response.status,
	      error: 'Internal Server error'
	    };
	  }
	}
	
	function saveEvaluatedAssignment(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-evaluated-assignment-result', 'post', obj).then(function (res) {
	      return dispatch(AssignmentDataStatus(res));
	    });
	  };
	}
	
	function saveAssignmentGradeConfiguration(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-assignment-grade-configuration', 'post', obj).then(function (res) {
	      return dispatch(AssignmentDataStatus(res));
	    });
	  };
	}
	
	function ClearIndidvidualAssignmentData() {
	  return {
	    type: CLEAR_INDIVIDUAL_ASSIGNMENT_DATA
	  };
	}
	
	function getCertificateData(data, currentPage) {
	  var sortStr = JSON.stringify(data.sortObj);
	  var query = 'roomId=' + data.roomId + '&items=' + data.itemsPerPage + '&page=' + data.currentPage + '&sort=' + sortStr;
	
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('get-certificate-data?' + query, 'get').then(function (res) {
	      return dispatch(setCertificateData(res, data.currentPage));
	    });
	  };
	}
	
	function setCertificateData(response, currentPage) {
	  if (response.status) {
	    return {
	      type: SET_CERTIFICATE_DATA,
	      certificateData: response.certificateData,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else {
	    return {
	      type: SET_CERTIFICATE_DATA_FAILED,
	      error: 'Internal Server Error',
	      currentPage: currentPage
	    };
	  }
	}
	
	function toggleCertificateDownload(roomId, studentId) {
	  var query = 'roomId=' + roomId;
	
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('toggle-certificate-download?' + query, 'put', {
	      studentId: studentId
	    }).then(function (res) {
	      return dispatch(handleToggleCertificateDownload(res));
	    });
	  };
	}
	
	function handleToggleCertificateDownload(response) {
	  if (response.status) {
	    return {
	      type: TOGGLE_CERTIFICATE_DOWNLOAD,
	      status: response.status,
	      message: response.message,
	      id: response.id,
	      error: []
	    };
	  } else {
	    return {
	      type: TOGGLE_CERTIFICATE_DOWNLOAD,
	      status: response.status,
	      message: response.message,
	      id: null,
	      error: [response.error]
	    };
	  }
	}

/***/ },
/* 64 */
/***/ function(module, exports) {

	module.exports = require("react-dom");

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UPDATE_ASSIGNMENT_DATA = exports.FETCHED_CONFERENCE_ASSIGNMENT = exports.DELETE_POLL = exports.POLL_ANSWER_SUBMITTED = exports.POLL_CREATED = exports.POLL_PUBLISH = exports.FETCHED_CONFERENCE_POLL = exports.ANSWERS_SUBMITTED = exports.FETCHED_CONFERENCE_TOPIC_QUESTIONS = exports.CLEAR_WORKDASHBOARD = exports.UPDATE_WORKQUESTION = exports.UPDATE_WORKDASHBOARD = undefined;
	exports.setWorkDashboard = setWorkDashboard;
	exports.roomChatNotifications = roomChatNotifications;
	exports.setRoomChatNotification = setRoomChatNotification;
	exports.updateWorkDashboard = updateWorkDashboard;
	exports.clearWorkDashboard = clearWorkDashboard;
	exports.setDefaultWorkDashboard = setDefaultWorkDashboard;
	exports.getPollSubmissionsRequest = getPollSubmissionsRequest;
	exports.setPollSubmissionResponse = setPollSubmissionResponse;
	exports.closeSharedDocument = closeSharedDocument;
	exports.getRoomDetails = getRoomDetails;
	exports.setRoomDetails = setRoomDetails;
	exports.getConferenceTopicsList = getConferenceTopicsList;
	exports.setConferenceTopicDetails = setConferenceTopicDetails;
	exports.getConferenceTopicContentData = getConferenceTopicContentData;
	exports.setTopicContentData = setTopicContentData;
	exports.getfiles = getfiles;
	exports.setConferenceTopicFiles = setConferenceTopicFiles;
	exports.getQuestions = getQuestions;
	exports.setConferenceTopicQuestions = setConferenceTopicQuestions;
	exports.SaveAnswersRequest = SaveAnswersRequest;
	exports.setConferenceQuestionsAnswers = setConferenceQuestionsAnswers;
	exports.getPdfFileData = getPdfFileData;
	exports.setConferenceTopicPdfFiles = setConferenceTopicPdfFiles;
	exports.getConferencePollData = getConferencePollData;
	exports.setConferencePollData = setConferencePollData;
	exports.publishPollRequest = publishPollRequest;
	exports.publishPollResponse = publishPollResponse;
	exports.createPollRequest = createPollRequest;
	exports.createPollResponse = createPollResponse;
	exports.savePollAnswerRequest = savePollAnswerRequest;
	exports.savePollAnswerResponse = savePollAnswerResponse;
	exports.deletePollRequest = deletePollRequest;
	exports.deletePollResponse = deletePollResponse;
	exports.getConferenceAssignmentData = getConferenceAssignmentData;
	exports.setConferenceAssignment = setConferenceAssignment;
	exports.updateAssignmentData = updateAssignmentData;
	exports.deleteAssignmentSubmittedFile = deleteAssignmentSubmittedFile;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var UPDATE_WORKDASHBOARD = exports.UPDATE_WORKDASHBOARD = 'UPDATE_WORKDASHBOARD';
	var UPDATE_WORKQUESTION = exports.UPDATE_WORKQUESTION = 'UPDATE_WORKQUESTION';
	var CLEAR_WORKDASHBOARD = exports.CLEAR_WORKDASHBOARD = 'CLEAR_WORKDASHBOARD';
	var FETCHED_CONFERENCE_TOPIC_QUESTIONS = exports.FETCHED_CONFERENCE_TOPIC_QUESTIONS = 'FETCHED_CONFERENCE_TOPIC_QUESTIONS';
	var ANSWERS_SUBMITTED = exports.ANSWERS_SUBMITTED = 'ANSWERS_SUBMITTED';
	var FETCHED_CONFERENCE_POLL = exports.FETCHED_CONFERENCE_POLL = 'FETCHED_CONFERENCE_POLL';
	var POLL_PUBLISH = exports.POLL_PUBLISH = 'POLL_PUBLISH';
	var POLL_CREATED = exports.POLL_CREATED = 'POLL_CREATED';
	var POLL_ANSWER_SUBMITTED = exports.POLL_ANSWER_SUBMITTED = 'POLL_ANSWER_SUBMITTED';
	var DELETE_POLL = exports.DELETE_POLL = 'DELETE_POLL';
	var FETCHED_CONFERENCE_ASSIGNMENT = exports.FETCHED_CONFERENCE_ASSIGNMENT = 'FETCHED_CONFERENCE_ASSIGNMENT';
	var UPDATE_ASSIGNMENT_DATA = exports.UPDATE_ASSIGNMENT_DATA = 'UPDATE_ASSIGNMENT_DATA';
	
	function setWorkDashboard(obj) {
	  return function (dispatch) {
	    dispatch(updateWorkDashboard(obj));
	  };
	}
	
	function roomChatNotifications(roomKey) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('room-chat-notifications/' + roomKey, 'get').then(function (res) {
	      return dispatch(setRoomChatNotification(res));
	    });
	  };
	}
	
	function setRoomChatNotification(response) {
	  if (response && response.notifications) {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { roomCount: response.notifications }
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { roomCount: 0 }
	    };
	  } else {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { roomCount: 0 }
	    };
	  }
	}
	
	function updateWorkDashboard(obj) {
	  return {
	    type: UPDATE_WORKDASHBOARD,
	    data: obj
	  };
	}
	
	function clearWorkDashboard() {
	  return function (dispatch) {
	    dispatch(setDefaultWorkDashboard());
	  };
	}
	
	function setDefaultWorkDashboard(obj) {
	  return {
	    type: CLEAR_WORKDASHBOARD,
	    data: obj
	  };
	}
	
	function getPollSubmissionsRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-poll-submissions/' + data.roomId + '/' + data.pollId, 'get').then(function (res) {
	      return dispatch(setPollSubmissionResponse(res));
	    });
	  };
	}
	
	function setPollSubmissionResponse(response) {
	  if (response.status) {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { pollContentData: response.data }
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { pollContentData: {} }
	    };
	  } else {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { pollContentData: {} }
	    };
	  }
	}
	
	function closeSharedDocument(fileName) {
	  return (0, _apiCaller2.default)('close-shared-document/' + fileName, 'delete');
	}
	
	function getRoomDetails(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-room-details/' + obj.roomKey, 'get').then(function (res) {
	      return dispatch(setRoomDetails(res));
	    });
	  };
	}
	
	function setRoomDetails(response) {
	  if (response.status) {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { roomId: response.data._id, roomName: response.data.roomName }
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  } else {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  }
	}
	
	function getConferenceTopicsList(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-conference-topic/' + data.roomKey, 'get').then(function (res) {
	      return dispatch(setConferenceTopicDetails(res));
	    });
	  };
	}
	
	function setConferenceTopicDetails(response) {
	  if (response.status) {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { topiclistData: response.data }
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  } else {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  }
	}
	
	function getConferenceTopicContentData(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-conference-topic-contentdata/' + data.roomId + '/' + data.topicId, 'get').then(function (res) {
	      return dispatch(setTopicContentData(res));
	    });
	  };
	}
	
	function setTopicContentData(response) {
	  if (response.status) {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { topicContentDataDetails: response.data }
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  } else {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  }
	}
	
	function getfiles(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-conference-topic-files/' + data.topicId, 'get').then(function (res) {
	      return dispatch(setConferenceTopicFiles(res));
	    });
	  };
	}
	
	function setConferenceTopicFiles(response) {
	  if (response.status) {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { topicFileData: response.data }
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  } else {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  }
	}
	
	function getQuestions(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-conference-topic-questions/' + data.topicId + '/' + data.questionnaireId, 'get').then(function (res) {
	      return dispatch(setConferenceTopicQuestions(res));
	    });
	  };
	}
	
	function setConferenceTopicQuestions(response) {
	  if (response.status) {
	    return {
	      type: FETCHED_CONFERENCE_TOPIC_QUESTIONS,
	      status: response.status,
	      questionsData: response.data,
	      submittedData: response.submittedData,
	      error: [],
	      message: ''
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: FETCHED_CONFERENCE_TOPIC_QUESTIONS,
	      status: response.status,
	      questionsData: {},
	      submittedData: {},
	      error: [response.error],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: FETCHED_CONFERENCE_TOPIC_QUESTIONS,
	      status: response.status,
	      questionsData: {},
	      submittedData: {},
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: FETCHED_CONFERENCE_TOPIC_QUESTIONS,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function SaveAnswersRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-answers', 'post', {
	      answerData: data
	    }).then(function (res) {
	      return dispatch(setConferenceQuestionsAnswers(res));
	    });
	  };
	}
	
	function setConferenceQuestionsAnswers(response) {
	  if (response.status) {
	    return {
	      type: ANSWERS_SUBMITTED,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: ANSWERS_SUBMITTED,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: ANSWERS_SUBMITTED,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: ANSWERS_SUBMITTED,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getPdfFileData(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-conference-topic-pdf-files/' + data.topicId + '/' + data.fileId, 'get').then(function (res) {
	      return dispatch(setConferenceTopicPdfFiles(res));
	    });
	  };
	}
	
	function setConferenceTopicPdfFiles(response) {
	  if (response.status) {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: { topicPdfFileData: response.data }
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  } else {
	    return {
	      type: UPDATE_WORKDASHBOARD,
	      data: {}
	    };
	  }
	}
	
	function getConferencePollData(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-conference-poll/' + data.roomKey, 'get').then(function (res) {
	      return dispatch(setConferencePollData(res));
	    });
	  };
	}
	
	function setConferencePollData(response) {
	  if (response.status) {
	    return {
	      type: FETCHED_CONFERENCE_POLL,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: FETCHED_CONFERENCE_POLL,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: FETCHED_CONFERENCE_POLL,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: FETCHED_CONFERENCE_POLL,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function publishPollRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('publish-poll', 'put', data).then(function (res) {
	      return dispatch(publishPollResponse(res));
	    });
	  };
	}
	
	function publishPollResponse(response) {
	  if (response.status) {
	    return {
	      type: POLL_PUBLISH,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: POLL_PUBLISH,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: POLL_PUBLISH,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: POLL_PUBLISH,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function createPollRequest(data) {
	  if (data.pollData.pollId) {
	    var id = data.pollData.pollId;
	    delete data['pollData']['pollId'];
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('update-poll/' + id, 'put', data).then(function (res) {
	        return dispatch(createPollResponse(res));
	      });
	    };
	  } else {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('create-poll', 'post', data).then(function (res) {
	        return dispatch(createPollResponse(res));
	      });
	    };
	  }
	}
	
	function createPollResponse(response) {
	  if (response.status) {
	    return {
	      type: POLL_CREATED,
	      status: response.status,
	      data: response.data,
	      error: '',
	      message: response.message
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: POLL_CREATED,
	      status: response.status,
	      error: response.error,
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: POLL_CREATED,
	      status: response.status,
	      error: response.error,
	      message: response.message
	    };
	  } else {
	    return {
	      type: POLL_CREATED,
	      status: response.status,
	      error: 'Internal server error',
	      message: ''
	    };
	  }
	}
	
	function savePollAnswerRequest(data) {
	  if (data.pollData.pollId) {
	    var id = data.pollData.pollId;
	    delete data['pollData']['pollId'];
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('submit-poll/' + id, 'put', data).then(function (res) {
	        return dispatch(savePollAnswerResponse(res));
	      });
	    };
	  }
	}
	
	function savePollAnswerResponse(response) {
	  if (response.status) {
	    return {
	      type: POLL_ANSWER_SUBMITTED,
	      status: response.status,
	      data: response.data,
	      error: '',
	      errorCode: response.errorCode,
	      message: response.message
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: POLL_ANSWER_SUBMITTED,
	      status: response.status,
	      error: response.error,
	      message: '',
	      errorCode: response.errorCode
	    };
	  } else if (response.error) {
	    return {
	      type: POLL_ANSWER_SUBMITTED,
	      status: response.status,
	      error: response.error,
	      message: '',
	      errorCode: response.errorCode
	    };
	  } else {
	    return {
	      type: POLL_ANSWER_SUBMITTED,
	      status: response.status,
	      error: 'Internal server error',
	      message: '',
	      errorCode: response.errorCode
	    };
	  }
	}
	
	function deletePollRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-poll/' + data.roomId + '/' + data.pollId, 'delete').then(function (res) {
	      return dispatch(deletePollResponse(res));
	    });
	  };
	}
	
	function deletePollResponse(response) {
	  if (response.status) {
	    return {
	      type: DELETE_POLL,
	      status: response.status,
	      data: response.data,
	      error: '',
	      message: response.message,
	      errorCode: ''
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: DELETE_POLL,
	      status: response.status,
	      error: response.error,
	      message: '',
	      errorCode: response.errorCode
	    };
	  } else if (response.error) {
	    return {
	      type: DELETE_POLL,
	      status: response.status,
	      error: response.error,
	      message: '',
	      errorCode: response.errorCode
	    };
	  } else {
	    return {
	      type: DELETE_POLL,
	      status: response.status,
	      error: 'Internal server error',
	      message: '',
	      errorCode: response.errorCode
	    };
	  }
	}
	
	function getConferenceAssignmentData(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-conference-assignment/' + data.roomKey, 'get').then(function (res) {
	      return dispatch(setConferenceAssignment(res));
	    });
	  };
	}
	
	function setConferenceAssignment(response) {
	
	  if (response.status) {
	    return {
	      type: FETCHED_CONFERENCE_ASSIGNMENT,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response && response.errorCode == 208) {
	    _reactRouter.browserHistory.push('/');
	    return {
	      type: FETCHED_CONFERENCE_ASSIGNMENT,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: FETCHED_CONFERENCE_ASSIGNMENT,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: FETCHED_CONFERENCE_ASSIGNMENT,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function updateAssignmentData(obj) {
	  return {
	    type: UPDATE_ASSIGNMENT_DATA,
	    data: obj
	  };
	}
	
	function deleteAssignmentSubmittedFile(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-assignment-submitted-file/' + obj.roomId + '/' + obj.assignmentId, 'delete');
	    // .then(res => dispatch(deleteAssignmentSubmittedFileResponse(res)));
	  };
	}
	
	// export function deleteAssignmentSubmittedFileResponse(response){
	//   if (response.status) {
	//     return {
	//       type: DELETE_SUBMITTED_FILES,
	//       status: response.status,
	//       data: response.data,
	//       message : response.message,
	//       error : response.error
	//     };
	//   } else {
	//     return {
	//       type: DELETE_SUBMITTED_FILES,
	//       status: response.status,
	//       error : response.error
	//     };
	//   }
	// }

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactGa = __webpack_require__(257);
	
	var _reactGa2 = _interopRequireDefault(_reactGa);
	
	var _AnalyticsAction = __webpack_require__(177);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var moment = __webpack_require__(1);
	
	var initalizedStatus = false;
	var thisObj = null;
	var currentAttendance = null;
	var topicsViewed = [];
	var checkInTime = null;
	
	var AnalyticsManager = function () {
		function AnalyticsManager() {
			var single = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
			_classCallCheck(this, AnalyticsManager);
	
			console.log("This Page", thisObj);
			if (thisObj) {
				return thisObj;
			} else if (!single) {
				thisObj = new AnalyticsManager(true);
				return thisObj;
			}
		}
	
		_createClass(AnalyticsManager, [{
			key: 'Initialize',
			value: function Initialize(GID, UID) {
				if (!initalizedStatus) {
					_reactGa2.default.initialize(GID);
					_reactGa2.default.set({ userId: UID });
	
					initalizedStatus = true;
	
					_reactGa2.default.event({
						category: 'User',
						action: 'Log_In',
						value: UID,
						label: 'User Logged In'
					});
	
					this.LogData('User', 'Log_In', UID, 'User Logged In');
				}
			}
		}, {
			key: 'LogData',
			value: function LogData(category, action, uid, label) {
				// logAnalytics
				var objData = {
					uid: uid,
					category: category,
					action: action,
					value: { logged: true, mode: 0 },
					label: label
				};
				console.log(objData);
				store.dispatch((0, _AnalyticsAction.createLogs)(objData, function (res) {
					// console.log('Results here', res);	
				}));
				console.log('Log Data');
			}
		}, {
			key: 'LogAttendance',
			value: function LogAttendance(mode, courseId, callback) {
				console.log("Log Attendance", courseId);
	
				var objData = null;
				if (mode) {
					objData = {
						uid: store.getState().login.data._id,
						category: 'Attendance',
						action: 'CheckIn',
						value: { checkOutTime: "", topicsViewed: [], courseId: courseId, schedule: mode, scheduleId: store.getState().conference.confData.scheduleData._id, slotId: store.getState().conference.confData.scheduleData.slotId },
						label: 'Checked into Course'
					};
				} else {
					objData = {
						uid: store.getState().login.data._id,
						category: 'Attendance',
						action: 'CheckIn',
						value: { checkOutTime: "", topicsViewed: [], courseId: courseId, schedule: mode, scheduleId: "", slotId: "" },
						label: 'Checked into Course'
					};
				}
				// console.log("objData === ", objData);
				store.dispatch((0, _AnalyticsAction.createLogs)(objData, function (res) {
					// console.log('currentAttendance ', res.log);
					currentAttendance = res.log._id;
					callback(res.log._id);
				}));
			}
		}, {
			key: 'UpdateAttendance',
			value: function UpdateAttendance(logId) {
				var topicsViewed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	
				console.log("Update Attendance", logId, topicsViewed);
				var objData = {
					_id: logId,
					topicsViewed: topicsViewed
				};
	
				store.dispatch((0, _AnalyticsAction.updateAttendance)(objData));
			}
		}, {
			key: 'initiateTopicView',
			value: function initiateTopicView() {
				topicsViewed = [];
			}
		}, {
			key: 'addToViewList',
			value: function addToViewList(topicId) {}
	
			/**
	      *  @Function name : UpdateLog
	      *  @Purpose : For UpdateLog when user visit topic
	      *  @Author : Rajesh Goriga
	      */
	
		}, {
			key: 'UpdateLog',
			value: function UpdateLog(logObj) {
	
				// let checkTime = moment().utc().toDate()
				checkInTime = moment().utc().format("x");
				var TopicObj = {
					TopicId: logObj.topicId,
					checkInTime: checkInTime,
					roomId: logObj.roomId
				};
				store.dispatch((0, _AnalyticsAction.saveVisiteTopic)(TopicObj, function (res) {
					// console.log('Results here', res);    
				}));
			}
	
			/**
	  *  @Function name : UpdateTopicComplete
	  *  @Purpose : For UpdateLog when user complete the  topic or exit the topic
	  *  @Author : Rajesh Goriga
	  */
	
		}, {
			key: 'UpdateTopicComplete',
			value: function UpdateTopicComplete(topicId, marked, roomId, unmount) {
				// let checkOut = moment().utc().toDate()
				var CheckOutTime = moment().utc().format("x");
				var TopicObj = {
					TopicId: topicId,
					marked: marked,
					checkInTime: checkInTime,
					CheckOutTime: CheckOutTime,
					roomId: roomId,
					unmount: unmount
				};
				(0, _AnalyticsAction.markAsCompleteTopic)(TopicObj);
			}
		}], [{
			key: 'destroyObj',
			value: function destroyObj() {
				thisObj = null;
				initalizedStatus = false;
			}
		}]);
	
		return AnalyticsManager;
	}();
	
	exports.default = AnalyticsManager;

/***/ },
/* 67 */
/***/ function(module, exports) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.setRightBar = setRightBar;
	exports.updateRightBar = updateRightBar;
	var UPDATE_RIGHTBAR = exports.UPDATE_RIGHTBAR = 'UPDATE_RIGHTBAR';
	
	function setRightBar(obj) {
		return function (dispatch) {
			dispatch(updateRightBar(obj));
		};
	}
	
	function updateRightBar(obj) {
		return {
			type: UPDATE_RIGHTBAR,
			data: obj
		};
	}

/***/ },
/* 68 */
/***/ function(module, exports) {

	module.exports = require("js-cookie");

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.rightBar = undefined;
	
	var _RightBarActions = __webpack_require__(67);
	
	var initialState = {
	  current: null, indChatCount: null, arrow: false, broadcastCount: 0, newsCount: null
	};
	
	var RightBarReducer = function RightBarReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _RightBarActions.UPDATE_RIGHTBAR:
	      return Object.assign({}, state, action.data);
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var rightBar = exports.rightBar = function rightBar(state) {
	  return state.rightBar;
	};
	
	// Export Reducer
	exports.default = RightBarReducer;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.LEFT_MENU_TOGGLE = undefined;
	exports.toggleLeftMenu = toggleLeftMenu;
	exports.getFooter = getFooter;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Export Constants
	var LEFT_MENU_TOGGLE = exports.LEFT_MENU_TOGGLE = 'LEFT_MENU_TOGGLE';
	
	// Export Actions
	function toggleLeftMenu() {
		return {
			type: LEFT_MENU_TOGGLE
		};
	}
	
	function getFooter() {
		return (0, _apiCaller2.default)('get-footer', 'get');
	}

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.upload = upload;
	exports.profileUpload = profileUpload;
	exports.uploadRoomTopicFile = uploadRoomTopicFile;
	exports.importUsersFile = importUsersFile;
	exports.listTopicFiles = listTopicFiles;
	exports.deleteFile = deleteFile;
	exports.deleteMultipleFiles = deleteMultipleFiles;
	exports.deleteFilesFromDest = deleteFilesFromDest;
	exports.uploadAssignmentSubmission = uploadAssignmentSubmission;
	exports.uploadSharingDocument = uploadSharingDocument;
	exports.convertPDF = convertPDF;
	exports.deleteSharingDocument = deleteSharingDocument;
	exports.uploadFileEnable = uploadFileEnable;
	
	var _expressFileupload = __webpack_require__(241);
	
	var _expressFileupload2 = _interopRequireDefault(_expressFileupload);
	
	var _path3 = __webpack_require__(62);
	
	var _path4 = _interopRequireDefault(_path3);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _topic = __webpack_require__(34);
	
	var _topic2 = _interopRequireDefault(_topic);
	
	var _upload = __webpack_require__(78);
	
	var _upload2 = _interopRequireDefault(_upload);
	
	var _assignment = __webpack_require__(58);
	
	var _assignment2 = _interopRequireDefault(_assignment);
	
	var _adminUser = __webpack_require__(13);
	
	var _md = __webpack_require__(31);
	
	var _md2 = _interopRequireDefault(_md);
	
	var _admin = __webpack_require__(54);
	
	var _randomstring = __webpack_require__(35);
	
	var _authorization = __webpack_require__(10);
	
	var _eachOf = __webpack_require__(79);
	
	var _eachOf2 = _interopRequireDefault(_eachOf);
	
	var _plagiarismcheck = __webpack_require__(72);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _mobile = __webpack_require__(56);
	
	var _room3 = __webpack_require__(73);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var multer = __webpack_require__(50);
	
	var fs = __webpack_require__(23);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	var moment = __webpack_require__(1);
	var request = __webpack_require__(51);
	var excel2Json = __webpack_require__(250);
	var shell = __webpack_require__(82);
	var _ = __webpack_require__(7);
	
	var async = __webpack_require__(44);
	
	// var unoconv = require('better-unoconv');
	
	
	// var listener = unoconv.listen({ port: 2002 });
	
	// listener.stderr.on('data', function (data) {
	//   console.log('stderr: ' + data.toString('utf8'));
	// });
	
	
	//Currently unused
	function upload(req, res) {
	  //console.log("uploads");
	  //console.log(req.body.userId);
	  try {
	    var files = void 0;
	    if (req.body.userId == 'undefined') {
	      res.json({
	        status: false,
	        error: "Not Authorized"
	      });
	    }
	    if (!req.files) {
	      res.send('No files were uploaded.');
	      return;
	    }
	    files = req.files.file;
	    //console.log("name----",files.name);
	    //console.log('files', files);
	
	    files.mv(_path4.default.resolve('uploads', files.name), function (err) {
	      if (err) {
	        //console.log(err);
	        res.status(500).send(err);
	      } else {
	
	        var uid = mongoose.Types.ObjectId(req.body.userId);
	
	        _users2.default.findOne({
	          _id: uid
	        }, function (findOneError, doc) {
	          if (findOneError) {
	            res.json({
	              status: false,
	              error: findOneError
	            });
	          } else if (doc) {
	            doc.profile.profileImage = files.name;
	            doc.save(function (updateFail, update) {
	              if (updateFail) {
	                res.json({
	                  status: false,
	                  error: updateFail
	                });
	              } else {
	                //console.log('file uploaded');
	                res.json({
	                  status: false,
	                  message: "file uploaded"
	                });
	              }
	            });
	          }
	        });
	      }
	    });
	  } catch (e) {
	    console.log('error in upload', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	/**
	*  @Function name : profileUpload
	*  @Purpose : For uploading profile image
	*  @Request Object : { uid: 'user id', img: 'image data', name: 'image name' }
	*  @Response Object : Success - Upload data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function profileUpload(req, res) {
	  try {
	    //Verifying if request is valid or not
	    if (!req.body.uid) {
	      // res.json({
	      // 	status:false,
	      // 	error:"Internal server error"
	      // });
	      console.log("Profile upload - 401");
	      res.status(401).end();
	    } else {
	      var tempFileName = req.body.name.replace(/[ )(]+/g, '');
	      var fileExt = tempFileName.substr(tempFileName.lastIndexOf(".") + 1);
	      if (req.body.type != 'image/png' && req.body.type != 'image/jpeg' && req.body.type != 'image/jpg') /* || (fileExt != 'png' && fileExt != 'jpeg' && fileExt != 'jpg' && fileExt != 'PNG' && fileExt != 'JPEG' && fileExt != 'JPG' ) */{
	          // res.json({
	          //   status:false,
	          //   error:"Invalid File Format:Only jpeg, jpg, png file formats supported"
	          // });
	          console.log("Profile upload - 415");
	          res.status(415).send("Invalid File Format:Only jpeg, jpg, png file formats supported");
	        } else if (!req.body.img) {
	        // res.json({
	        //   status:false,
	        //   error:"No image added ... try again!"
	        // });
	        console.log("Profile upload - 204");
	        res.status(204).end();
	      } else if (req.body.size > 5242880) {
	        console.log("Profile upload - 413");
	        res.status(413).send("File Size should be less than 5MB.");
	      } else {
	        // console.log("success....", typeof req.body.img);
	
	        //Creating buffer for upload file 
	        var imageBuffer = new Buffer(req.body.img, "base64");
	
	        var randomstring = '';
	
	        //Function call for creating randomstring
	        (0, _randomstring.createRandomString)(function (data) {
	          randomstring = data;
	        });
	
	        //Destination for upload file
	        var dest = process.env.PWD + "/uploads/" + randomstring + "_" + req.body.name;
	
	        //Creating new file at destination
	        fs.writeFile(dest, imageBuffer, 'base64', function (uploadFailed, uploaded) {
	          if (uploadFailed) {
	            // res.json({
	            //  status:true,
	            //  error:uploadFailed
	            // });
	            console.log("Profile upload - 500");
	            res.status(500).send({ error: uploadFailed });
	          } else {
	            var uid = mongoose.Types.ObjectId(req.body.uid);
	
	            //Query for finding user data
	            _users2.default.findOne({
	              _id: uid
	            }, function (findOneError, doc) {
	              if (findOneError) {
	                // res.json({
	                //   status:false,
	                //   error:findOneError
	                // });
	                console.log("Profile upload - 500");
	                res.status(500).send({ error: findOneError });
	              } else if (doc) {
	                doc.profile.profileImage = randomstring + "_" + req.body.name;
	
	                //Saving profile image
	                doc.save(function (updateFail, update) {
	                  if (updateFail) {
	                    // res.json({
	                    //   status: false,
	                    //   error: updateFail
	                    // });
	                    console.log("Profile upload - 500");
	                    res.status(500).send({ error: updateFail });
	                  } else {
	                    //console.log('file uploaded');
	                    // res.json({
	                    //   status: true,
	                    //   message: "File uploaded"
	                    // });
	                    res.status(200).send({ message: "File uploaded" });
	                  }
	                });
	              }
	            });
	          }
	        });
	      }
	    }
	  } catch (error) {
	    // res.json({
	    // 	status: false,
	    // 	error: error
	    // });
	    console.log("Profile upload - 500", error);
	    res.status(500).send({ error: error });
	  }
	}
	
	/**
	*  @Function name : uploadRoomTopicFile
	*  @Purpose : For uploading and converting files to pdf in topic
	*  @Request Object : { uid: 'user id', roomId: 'room id', topicId: 'topic id', file: 'file data', fileName: 'file name', fileType: 'file type' }
	*  @Response Object : Success - Upload data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function uploadRoomTopicFile(req, res) {
	  try {
	    // console.log("req.headers.cookie", req.headers.cookie);
	    // console.log("req body - ", req.body);
	    if (req.headers.cookie) {
	      var cookie = req.headers.cookie;
	      var token = cookie.substring(cookie.indexOf("token=") + 6, cookie.indexOf("token=") + 38);
	      var userQuery = _users2.default.findOne({ token: token });
	      userQuery.exec(function (errPerson, person) {
	        if (errPerson) {
	          res.json({ status: false, error: errPerson });
	        } else {
	          // console.log("req.body", req.body.uid);;
	          // console.log("person", person);
	          //Verifying if request is valid or not
	          if (req.body) {
	            var obj = req.body;
	            // console.log('obj',obj)
	
	            //Validating if user id and room id is valid or not
	            if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	              res.json({
	                status: false,
	                error: "Invalid Room."
	              });
	            } else if (person == null || !obj.uid || validator.isEmpty(obj.uid) || !mongoose.Types.ObjectId.isValid(obj.uid)) {
	              res.json({
	                status: false,
	                error: "Invalid UserId."
	              });
	            } else if (obj.fileType != 'zip' && obj.fileType != 'application' && obj.fileType != 'image' && obj.fileType != 'video' && obj.fileType != 'audio' && obj.fileType != 'link' && obj.fileType != 'text') {
	              console.log("Topic upload1 - Invalid File Extension");
	              res.json({
	                status: false,
	                error: "Invalid File Extension."
	              });
	            } else if (obj.fileSize > 20971520) {
	              console.log("Topic upload - File Size exceeded");
	              res.json({
	                status: false,
	                error: "File Size should be less than 20MB."
	              });
	            } else {
	              var tempFileName = obj.fileName.replace(/[ )(]+/g, '');
	              var fileExt = tempFileName.substr(tempFileName.lastIndexOf(".") + 1);
	              // console.log("fileExt----", fileExt);
	              if (fileExt == 'exe' || fileExt == 'js' || fileExt == 'jar' || fileExt == 'bat' || fileExt == 'cmd' || fileExt == 'pif' || fileExt == 'app' || fileExt == 'bin' || fileExt == 'rbf' || fileExt == 'sh' || fileExt == 'py' || fileExt == 'dll' || fileExt == 'reg' || fileExt == 'inf' || fileExt == 'scf' || fileExt == 'cmd' || fileExt == 'application' || fileExt == 'com' || fileExt == 'html') {
	                console.log("Topic upload2 - Invalid File Extension");
	                res.json({
	                  status: false,
	                  error: "Invalid File Format."
	                });
	              } else if (obj.fileType == 'text' && fileExt != 'txt') {
	                console.log("Topic upload3 - Invalid File Extension");
	                res.json({
	                  status: false,
	                  error: "Invalid File Format."
	                });
	              } else {
	
	                //Query for checking is room is present in database or not
	                var query = _room2.default.findOne({
	                  _id: mongoose.Types.ObjectId(obj.roomId)
	                });
	                query.exec(function (err, docs) {
	                  if (err) {
	                    // console.log("err--", err);
	                    res.json({
	                      status: false,
	                      error: "Room not found."
	                    });
	                  } else {
	
	                    //Validating if topic id is valid or not
	                    if (!obj.topicId || validator.isEmpty(obj.topicId) || !mongoose.Types.ObjectId.isValid(obj.topicId)) {
	                      res.json({
	                        status: false,
	                        error: "Invalid Topic"
	                      });
	                    } else {
	                      //Query for checking is topic is present in database or not
	                      var topicQuery = _topic2.default.findOne({
	                        _id: mongoose.Types.ObjectId(obj.topicId)
	                      });
	                      //delete obj['uid'];
	
	                      topicQuery.exec(function (error, data) {
	                        if (error) {
	                          res.json({
	                            status: false,
	                            error: "Topic not found"
	                          });
	                        } else {
	
	                          //Verifying if fileType is link or not
	                          if (obj.fileType !== 'link') {
	
	                            //Creating buffer for upload file 
	                            var imageBuffer = new Buffer(obj.file, "base64");
	                            //console.log(process.env.PWD+"/uploads/");
	
	                            var randomstring = '';
	
	                            //Function call for creating randomstring
	                            (0, _randomstring.createRandomString)(function (data) {
	                              randomstring = data;
	                            });
	
	                            // For removing spaces, parantheses in filename
	                            var fileName = obj.fileName.replace(/[ )(]+/g, ''); //obj.fileName.replace(/\s+/g, '');
	
	                            //Destination for upload file
	                            var dest = process.env.PWD + "/uploads/" + randomstring + "_" + fileName;
	
	                            //Creating new file at destination
	                            fs.writeFile(dest, imageBuffer, 'base64', function (uploadFailed, uploaded) {
	                              if (uploadFailed) {
	                                res.json({
	                                  status: false,
	                                  error: uploadFailed
	                                });
	                              } else {
	                                obj['createdAt'] = moment().utc().toDate();
	                                obj['createdBy'] = mongoose.Types.ObjectId(obj.uid);
	                                delete obj['uid'];
	                                delete obj['file'];
	                                obj['fileName'] = randomstring + "_" + fileName;
	
	                                //For finding extension of filename
	                                var ext = fileName.substr(fileName.lastIndexOf(".") + 1);
	                                //For converting files to pdf by unoconv command using shell package 
	                                if (ext == "doc" || ext == "docx" || ext == "odt" || ext == 'xls' || ext == 'xlsx' || ext == 'ods' || ext == 'ppt' || ext == 'pptx' || ext == "txt" || ext == "jpg" || ext == "png" || ext == "jpeg" || ext == "JPEG") {
	                                  if (shell.exec('unoconv -f pdf ' + dest).code !== 0) {
	                                    shell.echo('Error: Converting failed');
	                                  }
	                                }
	                                var objUser = new _upload2.default(obj);
	                                //Create new upload data in database
	                                _upload2.default.create([objUser], function (error, data) {
	                                  if (!error) {
	                                    res.json({
	                                      status: true,
	                                      data: data[0],
	                                      message: "Upload successfully."
	                                    });
	                                  } else {
	                                    //console.log(error)
	                                    res.json({
	                                      status: false,
	                                      error: "Upload not Done."
	                                    });
	                                  }
	                                });
	                              }
	                            });
	                          } else {
	
	                            //Options for calling youtube api
	                            var options = {
	                              url: 'https://www.googleapis.com/youtube/v3/videos?id=' + obj.fileName + '&key=AIzaSyD9fyjCqrqlYWvqSVCm-pzoAe6OjpBJYLU&part=snippet,contentDetails',
	                              headers: {
	                                'Content-Type': 'application/json'
	                              }
	                            };
	                            /*request.get(options, function(error, response, body){
	                              //console.log("error === ",error);
	                              // console.log("response === ",response.body);
	                              console.log("body === ",body);
	                            });*/
	                            obj['createdAt'] = moment().utc().toDate();
	                            obj['createdBy'] = mongoose.Types.ObjectId(obj.uid);
	                            delete obj['uid'];
	                            var objUser = new _upload2.default(obj);
	
	                            //Create new upload data in database
	                            _upload2.default.create([objUser], function (error, data) {
	                              if (!error) {
	
	                                //Call the youtube api
	                                request.get(options, function (error, response, body) {
	                                  if (!response.error) {
	
	                                    //Parse the body
	                                    var videodata = JSON.parse(body);
	                                    var items = videodata.items;
	                                    var _obj = {};
	
	                                    //If title is there in body set the title for youtube video
	                                    if (items[0].snippet && items[0].snippet.title) _obj['title'] = items[0].snippet.title;
	
	                                    //If duration is there in body set the duration for youtube video
	                                    if (items[0].contentDetails && items[0].contentDetails.duration) {
	                                      var str = items[0].contentDetails.duration;
	                                      _obj['duration'] = str;
	                                    }
	
	                                    //Update the upload data in database
	                                    _upload2.default.update({
	                                      _id: data[0]._id
	                                    }, {
	                                      $set: _obj
	                                    }).exec(function (updateerr, update) {});
	                                  }
	                                });
	                                res.json({
	                                  status: true,
	                                  data: data[0],
	                                  message: "Upload successfully."
	                                });
	                              } else {
	                                //console.log(error)
	                                res.json({
	                                  status: false,
	                                  error: "Upload not Done."
	                                });
	                              }
	                            });
	                          }
	                        }
	                      });
	                    }
	                  }
	                });
	              }
	            }
	          } else {
	            res.json({
	              status: false,
	              error: "Invalid Request"
	            });
	          }
	        }
	      });
	    } else {
	      res.json({ status: false, error: "Invalid Request." });
	    }
	  } catch (error) {
	    console.log("Error in uploadR", error);
	    res.json({
	      status: false,
	      error: "Internal server error."
	    });
	  }
	}
	
	/**
	*  @Function name : importUsersFile
	*  @Purpose : For importing users and converting from excel to json
	*  @Request Object : { uid: 'user id', companyId: 'company id', file: 'file data', fileName: 'file name', fileType: 'file type' }
	*  @Response Object : Success - Converted JSON data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function importUsersFile(req, res) {
	  try {
	    //Verifying if request is valid or not
	    if (req.body) {
	      var obj = req.body;
	
	      //Validating if user is valid or not
	      if (!obj.uid || validator.isEmpty(obj.uid) || !mongoose.Types.ObjectId.isValid(obj.uid)) {
	        res.json({
	          status: false,
	          error: "Invalid UserId."
	        });
	      } else if (obj.fileType != 'application') {
	        res.json({
	          status: false,
	          error: "Invalid File Format."
	        });
	      } else if (obj.fileSize > 20971520) {
	        console.log("importUsersFile upload - File Size exceeded");
	        res.json({
	          status: false,
	          error: "File Size should be less than 20MB."
	        });
	      } else {
	        var tempFileName = obj.fileName.replace(/[ )(]+/g, '');
	        var fileExt = tempFileName.substr(tempFileName.lastIndexOf(".") + 1);
	        // console.log("fileExt----", fileExt);
	        if (fileExt != 'xlsx' && fileExt != 'xlsm' && fileExt != 'xls' && fileExt != 'ods' && fileExt != 'ots' && fileExt != 'xlt') {
	          console.log("importUsersFile upload - Invalid File Extension");
	          res.json({
	            status: false,
	            error: "Invalid File Format."
	          });
	        } else {
	
	          //Creating buffer for upload file 	
	          var imageBuffer = new Buffer(obj.file, "base64");
	          //console.log(process.env.PWD+"/uploads/");
	
	          var randomstring = '';
	
	          //Function call for creating randomstring
	          (0, _randomstring.createRandomString)(function (data) {
	            randomstring = data;
	          });
	
	          // For removing spaces, parantheses in filename
	          var fileName = obj.fileName.replace(/[ )(]+/g, ''); //obj.fileName.replace(/\s+/g, '');
	
	          //Destination for upload file
	          var dest = process.env.PWD + "/uploads/" + randomstring + "_" + fileName;
	
	          //Creating new file at destination
	          fs.writeFile(dest, imageBuffer, 'base64', function (uploadFailed, uploaded) {
	            if (uploadFailed) {
	              res.json({
	                status: false,
	                error: uploadFailed
	              });
	            } else {
	
	              //Converting excel to json using excel-to-json package
	              excel2Json(dest, function (err, output) {
	                if (err) {
	                  console.log("err", err);
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                }
	                if (output && output.Sheet1) {
	
	                  //Total count of importing users
	                  var importCount = output.Sheet1.length;
	
	                  //Function call for getting available limit of users
	                  (0, _admin.checkUsersCount)(obj.uid, obj.role, null, obj.companyId, null, function (status, userCount) {
	
	                    //Checking if user can import more users than available limit or not 
	                    if (importCount <= userCount || userCount == -1) {
	
	                      //Remove the uploaded file and send converted json data
	                      fs.unlink(dest, function (err, result) {
	                        if (err) {
	                          //console.log("err1", err)
	                          res.json({
	                            status: false,
	                            error: err.message
	                          });
	                        } else {
	                          // console.log("res", result)
	                          res.json({
	                            status: true,
	                            data: output.Sheet1
	                          });
	                        }
	                      });
	                    } else {
	                      res.json({
	                        status: false,
	                        error: "Cannot import more than " + userCount + " " + "users"
	                      });
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } else {
	      res.json({
	        status: false,
	        error: "Invalid Request"
	      });
	    }
	  } catch (e) {
	    console.log('error in importUsersFile', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	/**
	*  @Function name : listTopicFiles
	*  @Purpose : For fetching complete uploads data
	*  @Request Object : query : { roomId, topicId, page, items, filter, search }
	*  @Response Object : Success - Upload data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listTopicFiles(req, res) {
	  //console.log("inside listTopicFiles", req.query);
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    //console.log("person", person);
	    try {
	      //console.log("inside try condition");
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page || !req.query.roomId || !req.query.topicId) {
	        //console.log("inside person condition");
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var listroom = req.query;
	        //console.log("inside else condition");
	        //If user has a valid role
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Moderator || person.role == _adminUser.Roles.Presenter || person.role == _adminUser.Roles.User || person.role == _adminUser.Roles.Presenteradmin) {
	          var uploadQuery;
	          var countQuery;
	          var selector = {
	            topicId: listroom.topicId,
	            roomId: listroom.roomId,
	            $or: [{ createdBy: person._id }, { isEnable: true }]
	          };
	
	          //Search selector based on user role
	          if (listroom.filter && listroom.filter != '') {
	            selector['fileType'] = listroom.filter;
	          }
	
	          //If search is not empty then create RegExp
	          if (listroom.search && listroom.search != '') {
	            var searchKey = RegExp(listroom.search, 'i');
	            selector['fileName'] = { $regex: searchKey };
	          }
	
	          //Query for fetching complete upload data based on selector and skip items based on itemsPerPage on previous page
	          uploadQuery = _upload2.default.find(selector).limit(Number(listroom.items)).select('fileName description roomId fileType title isEnable createdBy').skip(Number(listroom.items) * (Number(listroom.page) - 1)).sort({
	            createdAt: -1
	          });
	
	          //Query for counting complete upload data based on selector
	          countQuery = _upload2.default.count(selector);
	
	          uploadQuery.exec(function (err, result) {
	            if (err) {
	              //console.log("err", err.message);
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	              //console.log("file list", result);
	              countQuery.exec(function (error, count) {
	                //console.log("count", count);
	                res.json({
	                  status: true,
	                  data: result,
	                  count: count
	                });
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in list topic files", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteFile
	*  @Purpose : For deleting particular upload data
	*  @Request Object : params : { rid: "room id", tid: 'topic id', id: 'upload id' }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteFile(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null || req.params.rid || req.params.tid || req.params.id) {
	
	        //Validating if requested upload id is valid or not
	        if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid file."
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Query for checking if the upload id is present in database
	          var query = _upload2.default.findOne({
	            _id: recordId
	          });
	          query.populate('topicId', 'topicEnable').exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              //Function calling for deleting files from uploads folder
	              deleteFilesFromDest(doc, function (status) {
	                if (status == true) {
	
	                  //Query for removing the upload data
	                  var innerquery = _upload2.default.remove({
	                    _id: recordId
	                  });
	                  innerquery.exec(function (error, response) {
	                    if (error) {
	                      res.json({
	                        status: false,
	                        error: error.message
	                      });
	                    } else {
	                      res.json({
	                        status: true,
	                        message: "Deleted successfully."
	                      });
	
	                      //createdBy: pranathi, disc: push notifications for android students
	                      if (doc && doc.isEnable && doc.topicId && doc.topicId.topicEnable) {
	                        var message = "The File " + doc.fileName.substring(doc.fileName.indexOf("_") + 1) + " has been deleted from Topic.";
	                        (0, _room3.roomStudentData)(req.params.rid, function (err, studentIds) {
	                          if (studentIds != null) {
	                            _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                              if (result && result.length > 0) {
	                                for (var i = 0; i <= result.length - 1; i++) {
	                                  if (result[i].deviceType == 'ANDROID') {
	                                    (0, _mobile.sendPushNotificationAndroid)("DELETE-FILE", message, result[i].deviceId, person._id, result[i]._id);
	                                  }
	                                }
	                              }
	                            });
	                          }
	                        });
	                      }
	                    }
	                  });
	                } else {
	                  res.json({
	                    status: false,
	                    error: "Error in deleting file"
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("Error in delete file", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteMultipleFiles
	*  @Purpose : For deleting multiple upload data
	*  @Request Object : params : { rid: "room id", tid: 'topic id', ids: 'upload ids array' }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteMultipleFiles(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.params.rid && req.params.tid && req.params.ids) {
	
	        //Verifying if ids array is empty or not
	        if (req.params.ids.length <= 0) {
	          res.json({
	            status: false,
	            error: "No file selected to delete."
	          });
	        } else {
	          var idsArr = req.params.ids.split(',');
	
	          //Query for checking if the upload id is present in database
	          var query = _upload2.default.find({
	            _id: {
	              $in: idsArr
	            }
	          });
	          query.populate('topicId', 'topicEnable').exec(function (err, doc) {
	            console.log('doc', doc);
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              //Async.forEachOf iteratee to each item in doc, in parallely
	              async.forEachOf(doc, function (data, key, callback) {
	
	                //Function calling for deleting files from uploads folder
	                deleteFilesFromDest(data, function (status) {
	                  if (status == true) {
	                    callback();
	                  } else {
	                    return callback('Error in deleting file');
	                  }
	                });
	              }, function (err) {
	                if (err) {
	                  // console.log("Error in deleting file", err)
	                  res.json({
	                    status: false,
	                    error: err
	                  });
	                } else {
	
	                  //Query for removing the multiple upload data
	                  var innerquery = _upload2.default.remove({
	                    _id: {
	                      '$in': idsArr
	                    }
	                  });
	                  innerquery.exec(function (error, response) {
	                    if (error) {
	                      res.json({
	                        status: false,
	                        error: error.message
	                      });
	                    } else {
	                      res.json({
	                        status: true,
	                        message: "Deleted successfully."
	                      });
	
	                      //createdBy: pranathi, disc: push notifiactions for android students
	                      for (var i = 0; i < doc.length; i++) {
	                        if (doc && doc[i].isEnable && doc[i].topicId && doc[i].topicId.topicEnable) {
	                          (function () {
	                            var message = "The File " + doc[i].fileName.substring(doc[i].fileName.indexOf("_") + 1) + " has been deleted from Topic.";
	                            (0, _room3.roomStudentData)(req.params.rid, function (err, studentIds) {
	                              if (studentIds != null) {
	                                _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                                  if (result && result.length > 0) {
	                                    for (var i = 0; i <= result.length - 1; i++) {
	                                      if (result[i].deviceType == 'ANDROID') {
	                                        (0, _mobile.sendPushNotificationAndroid)("DELETE-MULTIFILES", message, result[i].deviceId, person._id, result[i]._id);
	                                      }
	                                    }
	                                  }
	                                });
	                              }
	                            });
	                          })();
	                        }
	                      }
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("Error in delete multiple files", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteFilesFromDest
	*  @Purpose : For deleting files from uploads folder
	*  @doc : { Data of uploaded files }
	*  @Callback : true, false
	*  @Author : Aniket Gupta
	*/
	
	function deleteFilesFromDest(doc, callback) {
	  var status;
	  try {
	    //Verifying if document has fileType link or not
	    if (doc.fileType != 'link') {
	      var _path = doc.from && doc.from == 'Shared' ? process.env.PWD + "/uploads/sharing_docs/" : process.env.PWD + "/uploads/";
	
	      //Path for original file
	      var dest = _path + doc.fileName;
	
	      var fileExist = fs.existsSync(dest);
	
	      if (fileExist == true) {
	
	        //Remove the original uploaded file
	        fs.unlink(dest, function (err, result) {
	          if (err) {
	            console.log("Error in original file deletion", err);
	            status = false;
	            callback(status);
	          } else {
	            status = true;
	
	            //For finding extension of filename
	            var ext = doc.fileName.substr(doc.fileName.lastIndexOf(".") + 1);
	
	            //Verifying if extension is pdf or not
	            if (ext != "pdf" && ext != "gif" && ext != "wav" && ext != 'mp3' && ext != 'wmv' && ext != 'mp4' && ext != 'mkv' && ext != 'zip') {
	
	              //Filename for file converted to pdf
	              var pdfFileName = doc.fileName.substring(0, doc.fileName.lastIndexOf(".")) + ".pdf";
	
	              //Path for converted file
	              var _dest = _path + pdfFileName;
	
	              var _fileExist = fs.existsSync(_dest);
	
	              if (_fileExist == true) {
	
	                //Remove the converted upload file
	                fs.unlink(_dest, function (err, result) {
	                  if (err) {
	                    console.log("Error in converted file deletion", err);
	                    status = false;
	                    callback(status);
	                  } else {
	                    status = true;
	                    callback(status);
	                  }
	                });
	              } else {
	                status = true;
	                callback(status);
	              }
	            } else {
	              callback(status);
	            }
	          }
	        });
	      } else {
	        status = true;
	        callback(status);
	      }
	    } else {
	      callback(true);
	    }
	  } catch (e) {
	    console.log('error in deleteFilesFromDest', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	/**
	*  @Function name : uploadAssignmentSubmission
	*  @Purpose : For uploading assignment submission
	*  @Request Object : { studentId: 'student id', roomId: 'room id', file: 'file data', fileName: 'file name', fileType: 'file type' }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function uploadAssignmentSubmission(req, res) {
	  try {
	    //Verifying if request is valid or not
	    if (req.body) {
	      var obj = req.body;
	      // console.log("body---- ", req.body);
	
	      var tempFileName = obj.fileName.replace(/[ )(]+/g, '');
	      var fileExt = tempFileName.substr(tempFileName.lastIndexOf(".") + 1);
	
	      //Validating if user id and room id is valid or not
	      if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	        res.json({
	          status: false,
	          error: "Invalid Room."
	        });
	      } else if (!obj.studentId || validator.isEmpty(obj.studentId) || !mongoose.Types.ObjectId.isValid(obj.studentId)) {
	        res.json({
	          status: false,
	          error: "Invalid Student."
	        });
	      } else if (!obj.assignmentId || validator.isEmpty(obj.assignmentId) || !mongoose.Types.ObjectId.isValid(obj.assignmentId)) {
	        res.json({
	          status: false,
	          error: "Invalid Assignment."
	        });
	      } else if (obj.fileType != 'application' && obj.fileType != 'text') {
	        console.log("Assignment upload - Invalid File Extension");
	        res.json({
	          status: false,
	          error: "Invalid File Format."
	        });
	      } else if (obj.fileSize > 20971520) {
	        console.log("Topic upload - File Size exceeded");
	        res.json({
	          status: false,
	          error: "File Size should be less than 20MB."
	        });
	      } else {
	        // console.log("fileExt----", fileExt);
	        if (fileExt == 'exe' || fileExt == 'js' || fileExt == 'jar' || fileExt == 'bat' || fileExt == 'cmd' || fileExt == 'pif' || fileExt == 'app' || fileExt == 'bin' || fileExt == 'rbf' || fileExt == 'sh' || fileExt == 'py' || fileExt == 'reg' || fileExt == 'inf' || fileExt == 'scf' || fileExt == 'cmd' || fileExt == 'application' || fileExt == 'com' || fileExt == 'html') {
	          console.log("Assignment upload - Invalid File Extension");
	          res.json({
	            status: false,
	            error: "Invalid File Format."
	          });
	        } else if (obj.fileType == 'text' && fileExt != 'txt') {
	          console.log("Assignment upload3 - Invalid File Extension");
	          res.json({
	            status: false,
	            error: "Invalid File Format."
	          });
	        } else if (obj.file == undefined) {
	          res.json({
	            status: false,
	            error: "File is Empty or unsupported."
	          });
	        } else {
	          //Query for checking is room is present in database or not
	          var query = _room2.default.findOne({
	            _id: mongoose.Types.ObjectId(obj.roomId)
	          });
	          query.exec(function (err, docs) {
	            if (err) {
	              // console.log("err--", err);
	              res.json({
	                status: false,
	                error: "Room not found."
	              });
	            } else {
	
	              //Query for checking is assignment is present in database or not
	              var assignmentQuery = _assignment2.default.findOne({
	                _id: mongoose.Types.ObjectId(obj.assignmentId),
	                roomId: mongoose.Types.ObjectId(obj.roomId)
	              });
	
	              assignmentQuery.exec(function (error, data) {
	                if (error) {
	                  res.json({
	                    status: false,
	                    error: "Assignment not found"
	                  });
	                } else {
	
	                  //Creating buffer for upload file 
	                  var imageBuffer = new Buffer(obj.file, "base64");
	                  // console.log(imageBuffer);
	                  //console.log(process.env.PWD+"/uploads/");
	
	                  var randomstring = '';
	
	                  //Function call for creating randomstring
	                  (0, _randomstring.createRandomString)(function (data) {
	                    randomstring = data;
	                  });
	
	                  // For removing spaces, parantheses in filename
	                  var fileName = obj.fileName.replace(/[ )(]+/g, '');
	                  //obj.fileName.replace(/\s+/g, '');
	
	                  //Destination for upload file
	                  var dest = process.env.PWD + "/uploads/" + randomstring + "_" + fileName;
	                  //var url = 'https://'+serverConfig.domin+"/uploads/"+randomstring+"_"+fileName;
	                  // var url = 'https://cloud.instavc.com/uploads/VopWn5Dc_HealthcareDomainKnowledge_SoftwareTesting.pdf';
	
	
	                  //Creating new file at destination
	                  fs.writeFile(dest, imageBuffer, 'base64', function (uploadFailed, uploaded) {
	                    if (uploadFailed) {
	                      res.json({
	                        status: false,
	                        error: uploadFailed
	                      });
	                    } else {
	
	                      delete obj['file'];
	                      obj['fileName'] = randomstring + "_" + fileName;
	                      var assignmentId = obj.assignmentId;
	                      delete obj['assignmentId'];
	                      obj['submittedAt'] = moment().utc().toDate();
	                      _assignment2.default.update({
	                        _id: mongoose.Types.ObjectId(assignmentId),
	                        roomId: mongoose.Types.ObjectId(obj.roomId)
	                      }, {
	                        $push: {
	                          "submissions": obj
	                        }
	                      }, { runValidators: true }, function (err, doc) {
	                        // console.log("update err == ",err);
	                        // console.log("update doc == ",doc);
	                        if (err) {
	                          res.json({
	                            status: false,
	                            error: err.message
	                          });
	                        } else {
	                          _assignment2.default.findOne({
	                            _id: mongoose.Types.ObjectId(assignmentId),
	                            roomId: mongoose.Types.ObjectId(obj.roomId)
	                          }).populate('createdBy', 'profile.profileImage firstname lastname -_id').exec(function (error, assDoc) {
	                            if (error) {
	                              res.json({
	                                status: false,
	                                error: "Assignment not found"
	                              });
	                            } else {
	                              res.json({
	                                status: true,
	                                data: assDoc,
	                                message: "Upload successfully."
	                              });
	
	                              //For finding extension of filename
	                              var ext = fileName.substr(fileName.lastIndexOf(".") + 1);
	
	                              //For converting files to pdf by unoconv command using shell package 
	                              if (ext != "pdf" && ext != "gif" && ext != "wav" && ext != 'mp3' && ext != 'wmv' && ext != 'mp4' && ext != 'mkv' && ext != 'zip') {
	                                if (shell.exec('unoconv -f pdf ' + dest).code !== 0) {
	                                  shell.echo('Error: Converting failed');
	                                } else {
	
	                                  // PlagiarismCheck
	
	                                  //   processForPlagiarismCheck(url, function(errPlagiarism, resPlagiarism) {
	                                  //     // console.log("Plagiarism cb1 --- ", resPlagiarism);
	                                  //     if(resPlagiarism) {
	                                  //       Assignment.update({ 
	                                  //         _id : mongoose.Types.ObjectId(assignmentId), 
	                                  //         roomId : mongoose.Types.ObjectId(obj.roomId),
	                                  //         "submissions.studentId" : obj.studentId
	                                  //       },
	                                  //       {
	                                  //         $set : {
	                                  //           "submissions.$.plagiarismId" : resPlagiarism
	                                  //         }
	                                  //       }).exec(function(err, result){
	                                  //         if (err) {
	                                  //           // console.log("err", err);
	                                  //         } else {
	                                  //           // console.log("result", result);
	                                  //         }
	                                  //       })
	                                  //     }
	                                  //   });
	                                }
	                              } else {
	                                  // PlagiarismCheck
	
	                                  // processForPlagiarismCheck(url, function(errPlagiarism, resPlagiarism) {
	                                  //   // console.log("Plagiarism cb2 --- ", resPlagiarism);
	                                  //   if(resPlagiarism) {
	                                  //     Assignment.update({ 
	                                  //       _id : mongoose.Types.ObjectId(assignmentId), 
	                                  //       roomId : mongoose.Types.ObjectId(obj.roomId),
	                                  //       "submissions.studentId" : obj.studentId
	                                  //     },
	                                  //     {
	                                  //       $set : {
	                                  //         "submissions.$.plagiarismId" : resPlagiarism
	                                  //       }
	                                  //     }).exec(function(err, result){
	                                  //       if (err) {
	                                  //         // console.log("err", err);
	                                  //       } else {
	                                  //         // console.log("result", result);
	                                  //       }
	                                  //     });
	                                  //   }
	                                  // });
	                                }
	                            }
	                          });
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } else {
	      res.json({
	        status: false,
	        error: "Invalid Request"
	      });
	    }
	  } catch (e) {
	    console.log('error in uploadAssignmentSubmission', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	/**
	*  @Function name : uploadSharingDocument
	*  @Purpose : For uploading sharing document
	*  @Request Object : { file: 'file data', fileName: 'file name', fileType: 'file type' }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function uploadSharingDocument(req, res) {
	  try {
	    //Verifying if request is valid or not
	    if (req.body) {
	      var obj = req.body;
	      // console.log("uploadSharingDocument req obj-  ", obj);
	
	      var tempFileName = obj.fileName.replace(/[ )(]+/g, '');
	      var fileExt = tempFileName.substr(tempFileName.lastIndexOf(".") + 1);
	      console.log("obj.fileType === ", obj.fileType);
	      if (obj.fileType != 'application' && obj.fileType != 'application/pdf') {
	        console.log("SharingDocument upload - Invalid File Extension");
	        res.json({
	          status: false,
	          error: "Invalid File Format."
	        });
	      } else if (obj.fileSize > 10485760) {
	        console.log("Topic upload - File Size exceeded");
	        res.json({
	          status: false,
	          error: "File Size should be less than 10MB."
	        });
	      } else {
	        // console.log("fileExt----", fileExt);
	        if (fileExt == 'exe' || fileExt == 'js' || fileExt == 'jar' || fileExt == 'bat' || fileExt == 'cmd' || fileExt == 'pif' || fileExt == 'app' || fileExt == 'bin' || fileExt == 'rbf' || fileExt == 'sh' || fileExt == 'py' || fileExt == 'reg' || fileExt == 'inf' || fileExt == 'scf' || fileExt == 'cmd' /*|| fileExt == 'application'*/ || fileExt == 'com' || fileExt == 'html') {
	          console.log("SharingDocument upload - Invalid File Extension");
	          res.json({
	            status: false,
	            error: "Invalid File Format."
	          });
	        } else if (obj.file == undefined) {
	          res.json({
	            status: false,
	            error: "File is Empty or unsupported."
	          });
	        } else {
	
	          //Creating buffer for upload file 
	          var imageBuffer = new Buffer(obj.file, "base64");
	          //console.log(process.env.PWD+"/uploads/");
	
	          var randomstring = '';
	
	          //Function call for creating randomstring
	          (0, _randomstring.createRandomString)(function (data) {
	            randomstring = data;
	          });
	
	          // For removing spaces, parantheses in filename
	          var fileName = obj.fileName.replace(/[ )(]+/g, ''); //obj.fileName.replace(/\s+/g, '');
	
	          //Destination for upload file
	          var dest = process.env.PWD + "/uploads/sharing_docs/" + randomstring + "_" + fileName;
	
	          //Creating new file at destination
	          fs.writeFile(dest, imageBuffer, 'base64', function (uploadFailed, uploaded) {
	            if (uploadFailed) {
	              res.json({
	                status: false,
	                error: uploadFailed
	              });
	            } else {
	              delete obj['file'];
	              obj['fileName'] = randomstring + "_" + fileName;
	              obj["fileExt"] = fileExt;
	
	              res.json({
	                status: true,
	                data: obj,
	                message: "Upload successfully."
	              });
	
	              //For finding extension of filename
	              var ext = fileName.substr(fileName.lastIndexOf(".") + 1);
	
	              // For converting files to pdf by unoconv command using shell package 
	              if (ext != "pdf" && ext != "gif" && ext != "wav" && ext != 'mp3' && ext != 'wmv' && ext != 'mp4' && ext != 'mkv' && ext != 'zip') {
	                if (shell.exec('unoconv -f pdf ' + dest).code !== 0) {
	                  shell.echo('Error: Converting failed');
	                }
	              }
	              /*res.json({ 
	                status: true, 
	                data: obj, 
	                message : "Upload successfully."  
	              });*/
	            }
	          });
	        }
	      }
	    } else {
	      res.json({
	        status: false,
	        error: "Invalid Request"
	      });
	    }
	  } catch (e) {
	    console.log("error in uploadSharingDocument === ", e);
	    res.json({
	      status: false,
	      error: "Internal server error"
	    });
	  }
	}
	
	/**
	*  @Function name : convertPDF
	*  @Purpose : convert files to pdf
	*  @Request Object : file object
	*  @Response Object : Success - convertfile 
	*  @Author : Rajesh Goriga */
	
	function convertPDF(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      var obj = req.body;
	      if (person != null && obj.data && obj.data.fileName) {
	        var dest = process.env.PWD + "/uploads/sharing_docs/" + obj["data"]["fileName"];
	        var fileExt = dest.substr(dest.lastIndexOf(".") + 1);
	        // var listener = unoconv.listen({ port: 2002 });
	
	        // listener.stderr.on('data', function (data) {
	        //   console.log('stderr: ' + data.toString('utf8'));
	        // });
	        if (fileExt != 'pdf') {
	          unoconv.convert(dest, 'pdf', function (err, result) {
	            if (err) {
	              console.log('err', err);
	              res.json({
	                status: false,
	                error: "Internal server error, Please try again"
	              });
	            } else {
	              var _path2 = dest.substring(-1, dest.lastIndexOf(".") + 0);
	              fs.writeFile(_path2 + '.pdf', result, function (error) {
	                /* handle error */
	                if (error) {
	                  console.log('error', error);
	                  res.json({
	                    status: false,
	                    error: error
	                  });
	                } else {
	                  console.log("converted successfully.");
	                  res.json({
	                    status: true,
	                    data: obj.data,
	                    message: "converted successfully."
	                  });
	                }
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: true,
	            data: obj.data,
	            message: "converted successfully."
	          });
	        }
	      } else {
	        res.json({ status: false, error: "Invalid request." });
	      }
	    } catch (e) {
	      console.log("Error in converting file", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	function deleteSharingDocument(req, res) {
	  try {
	    if (!req.params.name) {
	      res.json({
	        status: false,
	        error: "Invalid file."
	      });
	    } else {
	      var obj = {
	        from: 'Shared',
	        fileType: 'application',
	        fileName: req.params.name
	      };
	      deleteFilesFromDest(obj, function (status) {
	        if (status == true) {
	          res.json({
	            status: true,
	            error: "Closed successfully"
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Error in deleting file"
	          });
	        }
	      });
	    }
	  } catch (e) {
	    console.log("error in deleteSharingDocument", e);
	    res.json({
	      status: false,
	      error: "Internal server error"
	    });
	  }
	}
	
	/**
	*  @Function name : uploadFileEnable
	*  @Purpose : For enabling & disabling upload files
	*  @Request Object : fileEnable { id : uploadId, isEnable :isEnable }
	*  @Response Object : Success - fileEnable, Failure - Error message
	*  @Author : Jyothi & Pranathi */
	
	function uploadFileEnable(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id) || !req.body || !req.body.fileEnable) {
	        res.json({ status: false, error: "InValid request." });
	      } else {
	        var obj = req.body.fileEnable;
	
	        var uploadId = mongoose.Types.ObjectId(req.params.id);
	        obj['updatedBy'] = mongoose.Types.ObjectId(person._id);
	
	        //Fetching upload details from the upload collection
	        _upload2.default.findOne({ _id: uploadId }).populate('topicId', 'topicEnable').exec(function (err, data) {
	          if (data) {
	            if (data.createdBy._str == person._id._str) {
	
	              //Query for update status in the uploads collection
	              _upload2.default.findOneAndUpdate({ _id: uploadId }, { $set: obj
	              }, function (err, response) {
	                if (err) {
	                  res.json({ status: false, error: err.message });
	                } else {
	                  res.json({ status: true, id: uploadId, res: response });
	
	                  //createdBy: pranathi,disc: push notifications //
	                  var message = void 0;
	                  if (response.isEnable == false) {
	                    message = "The File " + data.fileName.substring(data.fileName.indexOf("_") + 1) + "  has been added to Topic.";
	                  } else {
	                    message = "The File " + data.fileName.substring(data.fileName.indexOf("_") + 1) + " has been removed from Topic.";
	                  }
	
	                  //createdBy: pranathi, disc: push notifications for android students
	                  if (data && data.topicId && data.topicId.topicEnable) {
	                    (0, _room3.roomStudentData)(response.roomId, function (err, studentIds) {
	                      if (studentIds != null) {
	                        _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                          if (result && result.length > 0) {
	                            for (var i = 0; i <= result.length - 1; i++) {
	                              if (result[i].deviceType == 'ANDROID') {
	                                (0, _mobile.sendPushNotificationAndroid)("FILE-ENABLE", message, result[i].deviceId, person._id, result[i]._id);
	                              }
	                            }
	                          }
	                        });
	                      }
	                    });
	                  }
	                }
	              });
	            } else {
	              res.json({ status: false, error: "Access denied." });
	            }
	          } else {
	            res.json({ status: false, error: "Invalid File." });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in update uploadFileEnable", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.processForPlagiarismCheck = processForPlagiarismCheck;
	exports.plagiarismProcessResult = plagiarismProcessResult;
	exports.plagiarismCreditsResult = plagiarismCreditsResult;
	exports.deletePlagiarismProcess = deletePlagiarismProcess;
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var CopyleaksCloud = __webpack_require__(253);
	var request = __webpack_require__(51);
	
	var clCloud = new CopyleaksCloud();
	var config = clCloud.getConfig();
	// console.log("Config--- ", config);
	
	// var email = "pradeepyadav@peoplelinkvc.com";
	// var apikey = "1E4DBC73-A734-4232-9026-EDEB5954C293";
	
	/*
	Initiate the process for Plagiarism Check
	Request - 'url' which need to check, eg('https://cloud.instavc.com/uploads/VopWn5Dc_HealthcareDomainKnowledge_SoftwareTesting.pdf')
	Response - ProcessId or Error
	*/
	function processForPlagiarismCheck(url, cb) {
	
	  /*Login in CopyLink Account*/
	  clCloud.login(_config2.default.plagiarism_email, _config2.default.plagiarism_apikey, config.E_PRODUCT.PUBLISHER, function (loginRes, loginErr) {
	
	    var _customHeaders = {};
	    // _customHeaders[config.SANDBOX_MODE_HEADER] = true;
	
	    // var url = 'http://www.refworld.org/cgi-bin/texis/vtx/rwmain/opendocpdf.pdf?reldoc=y&docid=4811c37c2';
	    // var url = 'https://cloud.instavc.com/uploads/VopWn5Dc_HealthcareDomainKnowledge_SoftwareTesting.pdf';
	    // var url = 'http://www.homefromhomecare.com/attachments/Hello5%20two%20page.pdf';
	    // var url = process.env.PWD+'/uploads/bill.pdf';
	
	    clCloud.createByURL(url, _customHeaders, function (urlRes, urlErr) {
	      if (urlRes && urlRes.ProcessId) {
	        // console.dir('API: create-by-url-- ', urlRes);
	        // console.dir('Process has been created: '+ urlRes.ProcessId);
	        cb(null, urlRes.ProcessId);
	      } else {
	        // console.dir("Error while Plagiarism - ", urlErr);
	        cb(urlErr, null);
	      }
	    });
	
	    // clCloud.getCreditBalance(function(resp,err){
	    //   //check if we have credits
	    //   if(resp && resp.Amount){
	    //     console.log('You have this amount of credits left: '+resp.Amount);
	    //   }
	    // });
	
	    /* Get process status exmaple */
	    // clCloud.getProcessStatus(urlRes.ProcessId, function(respStatus,errStatus){
	    //  console.log("respStatus---- ", respStatus);
	    // });
	
	    /* Fetch Result of a Process using package method */
	    // clCloud.getProcessResults(urlRes.ProcessId, function (resultRes, err) {
	    //  console.log("Process response -- ", resultRes);
	    //  console.log("Process error -- ", err);
	    // });
	
	    /* Fetch Result of a Process using request package */
	    // request.get( { url : 'https://api.copyleaks.com/v1/academic/' + urlRes.ProcessId + '/result' }, function(error, response, body) {
	    //   if (!error) {
	    //     console.dir("response processId -- ", response);
	    //     console.dir("body processId -- ", body);
	    //   } else{
	    //     console.dir("Error processId --- ", error);
	    //   };
	    // });
	
	    // clCloud.getProcessList(function(resp,err){
	    //   //check if we have credits
	    //   if(resp && resp.length > 0){
	    //     console.log('API: processes list');
	    //     console.log('There are '+resp.length+' processes running:');
	    //     _.forIn(resp,function(pval,pk){
	    //       console.log(pval);
	    //     });
	    //   }
	    // });
	  });
	}
	
	/*
	Fetch Results of Plagiarism Check based on processId
	Request - 'processId' which need to check
	Response - Result Object or Error
	*/
	function plagiarismProcessResult(ProcessId, cb) {
	
	  /*Login in CopyLink Account*/
	  clCloud.login(_config2.default.plagiarism_email, _config2.default.plagiarism_apikey, config.E_PRODUCT.PUBLISHER, function (loginRes, loginErr) {
	
	    /* Get process status exmaple */
	    clCloud.getProcessStatus(ProcessId, function (respStatus, errStatus) {
	
	      // console.log("respStatus---- ", respStatus.Status);
	      if (respStatus) {
	        if (respStatus.Status == 'Finished') {
	
	          /* Fetch Result of a Process using package method */
	          clCloud.getProcessResults(ProcessId, function (resultRes, resultErr) {
	            if (resultRes && resultRes != []) {
	              // console.log("Process response -- ", resultRes);
	              cb(null, resultRes);
	            } else {
	              // console.log("Process Result error -- ", resultErr);
	              cb(resultErr, null);
	            };
	          });
	        } else {
	          cb("Plagiarism check is in progress, please try after some time.", null);
	        };
	      } else {
	        // console.log("Process  Status error -- ", errStatus);
	        cb(errStatus, null);
	      };
	    });
	  });
	}
	
	function plagiarismCreditsResult(cb) {
	  /*Login in CopyLink Account*/
	  clCloud.login(_config2.default.plagiarism_email, _config2.default.plagiarism_apikey, config.E_PRODUCT.PUBLISHER, function (loginRes, loginErr) {
	    if (loginRes) {
	      clCloud.getCreditBalance(function (resp, err) {
	        //check if we have credits
	        if (resp && resp.Amount) {
	          // console.log('You have this amount of credits left: '+resp.Amount);
	          cb(null, resp.Amount);
	        } else {
	          cb(err, null);
	        }
	      });
	    }
	  });
	}
	
	/*
	Delete Process of Plagiarism Check based on processId
	Request - 'processId' which need to delete
	Response - null
	*/
	function deletePlagiarismProcess(ProcessId) {
	  /* Delete process */
	  clCloud.deleteProcess(ProcessId, function (resp, err) {
	    if (resp) {
	      // console.dir("Error while deleting plagiarism process - ", resp);
	    } else {};
	  });
	}
	
	/*Sample Response of Process Result*/
	/*
	[ { URL: 'http://earnqa.com/healthcare-domain-knowledge/',
	    Percents: 33,
	    NumberOfCopiedWords: 555,
	    ComparisonReport: 'https://api.copyleaks.com/v1/downloads/comparison?rid=2316984',
	    CachedVersion: 'https://api.copyleaks.com/v1/downloads/result-text?rid=2316984',
	    Title: 'No Title',
	    Introduction: 'insurance plans. 14.) Fully Insured Plan – A plan where the employer contracts with another organization to assume financial responsibility for the enrollees’ medical claims and for all incurredadministrative costs. Commercial Health Care Plans...',
	    EmbededComparison: 'https://copyleaks.com/compare-embed/756dfab8-7894-4fff-925c-4c89bc9fac7c/2316984' },
	  { URL: 'http://gcreddy.com/2015/06/healthcare-domain-knowledge.html',
	    Percents: 33,
	    NumberOfCopiedWords: 555,
	    ComparisonReport: 'https://api.copyleaks.com/v1/downloads/comparison?rid=2316988',
	    CachedVersion: 'https://api.copyleaks.com/v1/downloads/result-text?rid=2316988',
	    Title: 'Healthcare Domain Knowledge ~ Software Testing',
	    Introduction: 'Healthcare Domain Knowledge for Software Testers explains healthcare industry history, terminology and standards. How to test Software Healthcare Application?',
	    EmbededComparison: 'https://copyleaks.com/compare-embed/756dfab8-7894-4fff-925c-4c89bc9fac7c/2316988' },
	  { URL: 'https://studyblue.com/notes/note/n/healthcare-domain-knowledge-software-testing-pdf/file/17295079',
	    Percents: 20,
	    NumberOfCopiedWords: 329,
	    ComparisonReport: 'https://api.copyleaks.com/v1/downloads/comparison?rid=2316972',
	    CachedVersion: 'https://api.copyleaks.com/v1/downloads/result-text?rid=2316972',
	    Title: 'Healthcare Domain Knowledge _ Software Testing.pdf at Medical University of South Carolina - StudyBlue',
	    Introduction: 'Study online flashcards and notes for Healthcare Domain Knowledge _ Software Testing.pdf including 5/4/2016   Healthcare Domain Knowledge ~ Software Testing http://www.gcreddy.com/2015/06/healthcare­domain­knowledge.html   1/6 Software Testing A blog about',
	    EmbededComparison: 'https://copyleaks.com/compare-embed/756dfab8-7894-4fff-925c-4c89bc9fac7c/2316972' } ]
	*/

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.saveRoom = saveRoom;
	exports.updateRoom = updateRoom;
	exports.listRoom = listRoom;
	exports.fetchRoom = fetchRoom;
	exports.deleteRoom = deleteRoom;
	exports.getRoomUsersData = getRoomUsersData;
	exports.addRoomUser = addRoomUser;
	exports.removeRoomUser = removeRoomUser;
	exports.getPackageIds = getPackageIds;
	exports.getCategoryIds = getCategoryIds;
	exports.saveRoomTopic = saveRoomTopic;
	exports.updateRoomTopic = updateRoomTopic;
	exports.checkTopicCount = checkTopicCount;
	exports.listRoomTopic = listRoomTopic;
	exports.fetchRoomTopic = fetchRoomTopic;
	exports.addRoomStudent = addRoomStudent;
	exports.fetchstudent = fetchstudent;
	exports.removeRoomStud = removeRoomStud;
	exports.deleteTopic = deleteTopic;
	exports.roomStudentData = roomStudentData;
	exports.fetchTopicQuestionnaire = fetchTopicQuestionnaire;
	exports.assignQuestionnaire = assignQuestionnaire;
	exports.updateAssignedQuestionnaire = updateAssignedQuestionnaire;
	exports.unassignQuestionnaire = unassignQuestionnaire;
	exports.confirmedUnassignQuestionnaireFromTopic = confirmedUnassignQuestionnaireFromTopic;
	exports.listRoomFeedback = listRoomFeedback;
	exports.fetchRoomFeedback = fetchRoomFeedback;
	exports.saveFeedback = saveFeedback;
	exports.listResultTopic = listResultTopic;
	exports.fetchResult = fetchResult;
	exports.getLocationList = getLocationList;
	exports.getRoomInstructorStudentsList = getRoomInstructorStudentsList;
	exports.saveRoomLocation = saveRoomLocation;
	exports.getRoomLocations = getRoomLocations;
	exports.deleteRoomLocation = deleteRoomLocation;
	exports.deleteRoomLocationParticipant = deleteRoomLocationParticipant;
	exports.getQuestionnaireDataList = getQuestionnaireDataList;
	exports.saveRoomFeedbackType = saveRoomFeedbackType;
	exports.getRoomFeedbackType = getRoomFeedbackType;
	exports.saveRoomCodecType = saveRoomCodecType;
	exports.saveRoomEnableLive = saveRoomEnableLive;
	exports.setUploadFileDesc = setUploadFileDesc;
	exports.addGroupStudent = addGroupStudent;
	exports.listRoomAssignment = listRoomAssignment;
	exports.saveRoomAssignment = saveRoomAssignment;
	exports.updateRoomAssignment = updateRoomAssignment;
	exports.fetchTopicData = fetchTopicData;
	exports.listAssignmentSubmission = listAssignmentSubmission;
	exports.fetchAssignmentData = fetchAssignmentData;
	exports.deleteAssignmentUploadedFile = deleteAssignmentUploadedFile;
	exports.deleteAssignment = deleteAssignment;
	exports.roomTopicEnable = roomTopicEnable;
	exports.fetchPlagiarismData = fetchPlagiarismData;
	exports.fetchRoomAttendance = fetchRoomAttendance;
	exports.listStudent = listStudent;
	exports.fetchStudentAttendance = fetchStudentAttendance;
	exports.listClass = listClass;
	exports.fetchClassAttendance = fetchClassAttendance;
	exports.fetchClassDetailedAttendance = fetchClassDetailedAttendance;
	exports.fetchPlagiarismCredits = fetchPlagiarismCredits;
	exports.fetchIndividualAssignmentData = fetchIndividualAssignmentData;
	exports.saveEvaluatedAssignmentResult = saveEvaluatedAssignmentResult;
	exports.saveAssignmentGradeConfiguration = saveAssignmentGradeConfiguration;
	exports.listRoomCertificateData = listRoomCertificateData;
	exports.toggleCertificateDownload = toggleCertificateDownload;
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _topic = __webpack_require__(34);
	
	var _topic2 = _interopRequireDefault(_topic);
	
	var _package = __webpack_require__(25);
	
	var _package2 = _interopRequireDefault(_package);
	
	var _questionnaire = __webpack_require__(42);
	
	var _questionnaire2 = _interopRequireDefault(_questionnaire);
	
	var _students = __webpack_require__(33);
	
	var _students2 = _interopRequireDefault(_students);
	
	var _schedule = __webpack_require__(43);
	
	var _schedule2 = _interopRequireDefault(_schedule);
	
	var _category = __webpack_require__(59);
	
	var _category2 = _interopRequireDefault(_category);
	
	var _assignment = __webpack_require__(58);
	
	var _assignment2 = _interopRequireDefault(_assignment);
	
	var _logger = __webpack_require__(49);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _cuid = __webpack_require__(26);
	
	var _cuid2 = _interopRequireDefault(_cuid);
	
	var _limax = __webpack_require__(27);
	
	var _limax2 = _interopRequireDefault(_limax);
	
	var _sanitizeHtml = __webpack_require__(28);
	
	var _sanitizeHtml2 = _interopRequireDefault(_sanitizeHtml);
	
	var _adminUser = __webpack_require__(13);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForCorporateCreation = _interopRequireWildcard(_emailFunctions);
	
	var EmailForUserCreation = _interopRequireWildcard(_emailFunctions);
	
	var _conference = __webpack_require__(101);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _result = __webpack_require__(77);
	
	var _result2 = _interopRequireDefault(_result);
	
	var _feedback = __webpack_require__(104);
	
	var _feedback2 = _interopRequireDefault(_feedback);
	
	var _location = __webpack_require__(75);
	
	var _location2 = _interopRequireDefault(_location);
	
	var _upload = __webpack_require__(78);
	
	var _upload2 = _interopRequireDefault(_upload);
	
	var _participantsgroup = __webpack_require__(76);
	
	var _participantsgroup2 = _interopRequireDefault(_participantsgroup);
	
	var _authorization = __webpack_require__(10);
	
	var _randomstring = __webpack_require__(35);
	
	var _fileupload = __webpack_require__(71);
	
	var _plagiarismcheck = __webpack_require__(72);
	
	var _schedule3 = __webpack_require__(57);
	
	var _slashesActions = __webpack_require__(4);
	
	var _mobile = __webpack_require__(56);
	
	var _gradeconfiguration = __webpack_require__(74);
	
	var _gradeconfiguration2 = _interopRequireDefault(_gradeconfiguration);
	
	var _datalog = __webpack_require__(48);
	
	var _datalog2 = _interopRequireDefault(_datalog);
	
	var _reflect = __webpack_require__(61);
	
	var _reflect2 = _interopRequireDefault(_reflect);
	
	var _parallel = __webpack_require__(60);
	
	var _parallel2 = _interopRequireDefault(_parallel);
	
	var _eachOf = __webpack_require__(79);
	
	var _eachOf2 = _interopRequireDefault(_eachOf);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	var _ = __webpack_require__(7);
	var async = __webpack_require__(44);
	
	var multer = __webpack_require__(50);
	var fs = __webpack_require__(23);
	var shell = __webpack_require__(82);
	
	/**
	*  @Function name : saveRoom
	*  @Purpose : For creating room
	*  @Request Object : roomdata : { room data }
	*  @Response Object : Success - Success message, Room data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveRoom(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.body.roomdata || !req.body.roomdata.selPackage || !mongoose.Types.ObjectId.isValid(req.body.roomdata.selPackage)) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.roomdata;
	        // obj['roomLicense'] = '123456';
	        // obj['mcuServer'] = '123456';
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        _package2.default.findOne({ _id: obj.selPackage }, function (err, packageData) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else if (packageData) {
	            var packageExpiryDate = new Date(packageData.packageValidity);
	            var roomExpiryDate = new Date(obj.expiryDate);
	
	            if (roomExpiryDate <= packageExpiryDate || roomExpiryDate == 'Invalid Date') {
	
	              //If user is admin
	              if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.CRMadmin) {
	                //TODO - for SA also corporateId should be insert from backend.
	                obj['corporateId'] = bussinessID;
	                //changeBy: pranathi, disc: In room cheking roomName is exists or not
	                _room2.default.findOne({ corporateId: person.profile.companyid._id, roomName: req.body.roomdata.roomName }).exec(function (roomErr, roomData) {
	                  if (roomErr) {
	                    res.json({ status: false, error: roomErr.message });
	                  } else if (roomData) {
	                    res.json({ status: false, error: "Room name is already exists!." });
	                  } else {
	                    //Function calling for creating new room
	                    insertRoomData(obj, person, function (err2, res2) {
	                      if (err2) {
	                        var errorResponse = err2.message ? err2.message : err2;
	                        res.json({
	                          status: false,
	                          error: errorResponse
	                        });
	                      } else {
	                        res.json({
	                          status: true,
	                          data: res2,
	                          message: "Created successfully."
	                        });
	
	                        //Log obj which need to be inserted in logger collection
	                        // var logObj = {
	                        //   logType : 'Room',
	                        //   actionType : 'Created',
	                        //   actionTime : moment().utc().toDate(),
	                        //   uid : obj.createdBy,
	                        //   details : {
	                        //     name : obj.roomName,
	                        //     corporateId : obj.corporateId,
	                        //     packageId : obj.selPackage,
	                        //     remoteAddress : req.connection.remoteAddress,
	                        //     userAgent : req.headers['user-agent']
	                        //   }
	                        // } 
	
	                        // //Function for creating log on successful creation of room
	                        // createLog(logObj, function(status) {
	                        //   if(status) {
	                        //     // console.log(status);
	                        //   }
	                        // }); 
	                      }
	                    });
	                  }
	                });
	
	                // //Function calling for creating new room
	                // insertRoomData(obj, person, function(err2, res2) {
	                //   if (err2) {
	                //     let errorResponse = err2.message ? err2.message : err2;
	                //     res.json({ 
	                //       status: false, 
	                //       error : errorResponse 
	                //     });
	                //   } else {
	                //     res.json({ 
	                //       status: true, 
	                //       data : res2, 
	                //       message : "Created successfully." 
	                //     });
	
	                //     //Log obj which need to be inserted in logger collection
	                //     // var logObj = {
	                //     //   logType : 'Room',
	                //     //   actionType : 'Created',
	                //     //   actionTime : moment().utc().toDate(),
	                //     //   uid : obj.createdBy,
	                //     //   details : {
	                //     //     name : obj.roomName,
	                //     //     corporateId : obj.corporateId,
	                //     //     packageId : obj.selPackage,
	                //     //     remoteAddress : req.connection.remoteAddress,
	                //     //     userAgent : req.headers['user-agent']
	                //     //   }
	                //     // } 
	
	                //     // //Function for creating log on successful creation of room
	                //     // createLog(logObj, function(status) {
	                //     //   if(status) {
	                //     //     // console.log(status);
	                //     //   }
	                //     // }); 
	                //   }
	                // });                 
	              } else if (person.role == _adminUser.Roles.Superadmin) {
	                // If user is superadmin
	
	                //Function calling for fetching corporate id
	                corporateIdForSA(obj, function (err1, res1) {
	                  if (err1) {
	                    res.json({
	                      status: false,
	                      error: err1.message
	                    });
	                  } else {
	                    obj['corporateId'] = res1;
	
	                    //changeBy: pranathi, disc: In room cheking roomName is exists or not
	                    _room2.default.findOne({ corporateId: res1, roomName: req.body.roomdata.roomName }).exec(function (roomErr, roomData) {
	                      if (roomErr) {
	                        res.json({ status: false, error: roomErr.message });
	                      } else if (roomData) {
	                        res.json({ status: false, error: "Room name is already exists!." });
	                      } else {
	
	                        //Function calling for creating new room
	                        insertRoomData(obj, person, function (err2, res2) {
	                          /*console.log("err2 === ",err2);
	                          console.log("res2 === ",res2);*/
	                          if (err2) {
	                            var errorResponse = err2.message ? err2.message : err2;
	                            res.json({
	                              status: false,
	                              error: errorResponse
	                            });
	                          } else {
	                            res.json({
	                              status: true,
	                              data: res2,
	                              message: "Created successfully."
	                            });
	
	                            //Log obj which need to be inserted in logger collection
	                            // var logObj = {
	                            //   logType : 'Room',
	                            //   actionType : 'Created',
	                            //   actionTime : moment().utc().toDate(),
	                            //   uid : obj.createdBy,
	                            //   details : {
	                            //     name : obj.roomName,
	                            //     corporateId : obj.corporateId,
	                            //     packageId : obj.selPackage,
	                            //     remoteAddress : req.connection.remoteAddress,
	                            //     userAgent : req.headers['user-agent']
	                            //   }
	                            // }  
	
	                            // //Function for creating log on successful creation of room
	                            // createLog(logObj, function(status) {
	                            //   if(status) {
	                            //     // console.log(status);
	                            //   }
	                            // }); 
	                          }
	                        });
	                      }
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: "Access denied."
	                });
	              }
	            } else {
	
	              //code changed by - Najib, Desc- Relevent message in response based on businessType
	              var roomType = null;
	              if (person.profile.companyid && person.profile.companyid.businessType && person.profile.companyid.businessType == 'LMS') {
	                roomType = "Course";
	              } else {
	                roomType = "Room";
	              }
	              res.json({
	                status: false,
	                error: roomType + ' ' + "expiry date(" + moment(roomExpiryDate).format('DD/MM/YYYY') + ") can't be greater than package expiry date(" + moment(packageExpiryDate).format('DD/MM/YYYY') + ")"
	              });
	            }
	          } else {
	            res.json({
	              status: false,
	              error: "Invalid Package"
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in save room", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : updateRoom
	*  @Purpose : For updating room
	*  @Request Object : roomdata : { room data }
	*  @Response Object : Success - Success message, Room data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function updateRoom(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id) || !req.body.roomdata) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.roomdata;
	        // console.log('obj', obj);
	
	        //If user has a valid role
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.CRMadmin) {
	
	          if (person.role != _adminUser.Roles.Superadmin) {
	            obj['corporateId'] = person.profile.companyid._id;
	          }
	          //If room id is there then update data
	          if (req.params.id && (req.params.id != "" || req.params.id != undefined)) {
	            var recordId = mongoose.Types.ObjectId(req.params.id);
	            obj['modifiedBy'] = mongoose.Types.ObjectId(person._id);
	            delete obj["uid"];
	
	            //Fetching the details of room
	            var data = _room2.default.findOne({
	              _id: recordId
	            });
	            data.exec(function (error, roomData) {
	
	              //Verifying is data is present or not
	              if (roomData) {
	                _package2.default.findOne({ _id: obj.selPackage }).select('packageValidity packageName').exec(function (err, packageData) {
	                  if (packageData) {
	                    // console.log(packageData)
	                    var roomexpiryDate = new Date(obj.expiryDate);
	                    var packageExpiryDate = new Date(packageData.packageValidity);
	                    if (roomexpiryDate <= packageExpiryDate || roomexpiryDate == 'Invalid Date') {
	                      var set = {
	                        $set: obj
	                      };
	                      if (obj.categoryId == '') {
	                        delete obj["categoryId"];
	                        set = {
	                          $set: obj,
	                          $unset: {
	                            categoryId: ""
	                          }
	                        };
	                      }
	
	                      //changeBy: pranathi, disc: checking roomName is exists in other rooms or not
	                      _room2.default.findOne({ _id: { $ne: recordId }, roomName: obj.roomName, corporateId: obj.corporateId }).exec(function (roomErr, roomDataDetails) {
	                        if (roomErr) {
	                          res.json({ status: false, error: roomErr.message });
	                        } else if (roomDataDetails) {
	                          res.json({ status: false, error: 'Room name is already exists!.' });
	                        } else {
	                          //If data is present then update the room
	                          _room2.default.update({
	                            _id: recordId
	                          }, set, {
	                            runValidators: true
	                          }, function (err, doc) {
	                            if (err) {
	                              res.json({
	                                status: false,
	                                error: err.message
	                              });
	                            } else {
	
	                              //Query for sending the updated record to the client
	                              var query = _room2.default.findOne({
	                                _id: recordId
	                              }).populate('selPackage corporateId', 'packageName features -_id businessName -_id').populate('users', 'firstname lastname email profile.profileImage');
	                              query.exec(function (e, doc) {
	                                if (e) {
	                                  res.json({
	                                    status: false,
	                                    error: e.message
	                                  });
	                                } else if (doc) {
	                                  res.json({
	                                    status: true,
	                                    data: doc,
	                                    message: "Updated successfully."
	                                  });
	
	                                  if (roomData && roomData.users && roomData.users.length > 0) {
	                                    getRoomUsersData(roomData.users, roomData._id, function (error, roomUsers) {
	                                      if (roomUsers != null) {
	                                        //createdBy: pranathi, disc: push notifications to android users
	                                        if (roomUsers && roomUsers.length > 0) {
	                                          var message = 'The Room ' + doc.roomName + ' has been updated.';
	                                          _users2.default.find({ _id: { $in: roomUsers } }).select('deviceType deviceId').exec(function (err, userData) {
	                                            if (userData && userData.length > 0) {
	                                              for (var i = 0; i <= userData.length - 1; i++) {
	                                                if (userData[i].deviceType == 'ANDROID') {
	                                                  (0, _mobile.sendPushNotificationAndroid)("UPDATE-ROOM", message, userData[i].deviceId, person._id, userData[i]._id);
	                                                }
	                                              }
	                                            }
	                                          });
	                                        }
	                                      }
	                                    });
	                                  }
	                                } else {
	                                  res.json({
	                                    status: false,
	                                    error: "Internal server error"
	                                  });
	                                }
	                              });
	                            }
	                          });
	                        }
	                      });
	                    } else {
	
	                      //code changed by - Najib, Desc- Relevent message in response based on businessType
	                      var roomType = null;
	                      if (person.profile.companyid && person.profile.companyid.businessType && person.profile.companyid.businessType == 'LMS') {
	                        roomType = "Course";
	                      } else {
	                        roomType = "Room";
	                      }
	                      res.json({
	                        status: false,
	                        error: roomType + ' ' + "expiry date(" + moment(roomexpiryDate).format('DD/MM/YYYY') + ") can't be greater than package expiry date(" + moment(packageExpiryDate).format('DD/MM/YYYY') + ")"
	                      });
	                    }
	                  } else {
	                    res.json({
	                      status: false,
	                      error: 'Invalid Package'
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: "Invalid Room"
	                });
	              }
	            });
	          }
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in update room", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	function corporateIdForSA(reqObj, cb) {
	  try {
	    _package2.default.findOne({ _id: mongoose.Types.ObjectId(reqObj.selPackage) }).select('assignedTo -_id').exec(function (pkgErr, pkgRes) {
	      if (!pkgErr) {
	        _users2.default.findOne({ _id: mongoose.Types.ObjectId(pkgRes.assignedTo) }).select('profile.companyid -_id').exec(function (corpErr, corpRes) {
	          if (!corpErr) {
	            if (corpRes && corpRes.profile && corpRes.profile.companyid) {
	              var corpId = corpRes.profile.companyid;
	              cb(null, corpId);
	            } else {
	              cb("Error while fatching corporate detail.", null);
	            }
	          } else cb("Error while fatching corporate detail.", null);
	        });
	      } else {
	        cb("Error while fatching package detail.", null);
	      }
	    });
	  } catch (e) {
	    console.log('error in corporateIdForSA ', e);
	    cb("Internal server error.", null);
	  }
	}
	
	function insertRoomData(obj, person, cb) {
	  try {
	    obj['roomKey'] = Math.random().toString(36).slice(2);
	    obj['users'] = [mongoose.Types.ObjectId(obj.uid)];
	    obj['createdBy'] = mongoose.Types.ObjectId(obj.uid);
	    obj['createdOn'] = moment().utc().toDate();
	    obj['modifiedBy'] = mongoose.Types.ObjectId(obj.uid);
	    obj['modifiedOn'] = moment().utc().toDate();
	    if (obj.categoryId == '') delete obj["categoryId"];
	    // console.log("obj---", obj);
	    var paymentFlag = false;
	    var password = '';
	    var orderId = '';
	    if (obj.gatewayPayment) {
	      // console.log('from paymentportal')
	      paymentFlag = obj.gatewayPayment;
	      password = obj.password;
	      orderId = obj.orderId;
	      delete obj["gatewayPayment"];
	      delete obj["password"];
	      delete obj["orderId"];
	    }
	    delete obj['uid'];
	
	    checkRoomCount(obj.selPackage, function (error, response) {
	      /*console.log("error == ",error);
	      console.log("response === ",response);*/
	      if (error) cb(error, null);else if (response) {
	        (0, _conference.createRoomMcu)(obj.roomName, obj.selPackage, function (response, errMcu) {
	          // console.log("roomId--",roomId);
	          var roomId = response;
	          if (response != 'failed') {
	            roomId = JSON.parse(response);
	            roomId = roomId._id;
	
	            obj['roomid'] = roomId;
	            var roomObj = new _room2.default(obj);
	            roomObj.save(function (err, saved) {
	              if (err) {
	                cb(err, null);
	              } else {
	                if (paymentFlag) {
	                  if (person && person.email) {
	                    var exchangeData = {
	                      to: person.email,
	                      whoCreated: person.email,
	                      subject: 'Package Purchased !! Get details',
	                      firstname: person.firstname,
	                      order_id: orderId,
	                      password: password
	                    };
	                    EmailForCorporateCreation.createCorporateMail(exchangeData, function (emailerror, emailsuccess) {
	                      if (emailerror.status == false) {
	                        // res.json({ status: false, error: "Email not sent"});
	                        cb("Email not sent", null);
	                      } else {
	                        // res.json({status:true, message:"Mail sent"});
	                        cb(null, "Mail sent");
	                      }
	                    });
	                  } else {
	                    // res.json({ status: false, error: "Can not find user"});
	                    cb(null, "Can not find user");
	                  }
	                } else {
	                  var recordId = mongoose.Types.ObjectId(saved._id);
	                  var roomquery = _room2.default.findOne({ _id: recordId });
	                  roomquery.populate('selPackage corporateId', 'packageName features -_id businessName -_id').populate('users', 'firstname lastname email profile.profileImage').exec(function (roomerr, roomdoc) {
	                    if (roomdoc) {
	                      // console.log("roomdoc === ",roomdoc);
	                      // res.json({ status: true, data: roomdoc, message : "Created successfully."  });
	                      cb(null, roomdoc);
	                    } else {
	                      console.log("roomerr === ", roomerr);
	                      // res.json({ status: false, error : "Invalid Room." });
	                      cb("Invalid Room", null);
	                    }
	                  });
	                }
	              }
	            });
	          } else {
	            cb("Server down, Please try again", null);
	          }
	        });
	      }
	    });
	  } catch (e) {
	    console.log('error in insertRoomData', e);
	    cb('Internal server error', null);
	  }
	}
	
	function checkRoomCount(id, cb) {
	  try {
	    var query = _package2.default.findOne({ _id: id });
	    query.exec(function (err, result) {
	      if (result) {
	        if (!result.roomCount) cb("Please update your package details", null);else if (result.roomCount == -1) cb(null, true);else {
	          _room2.default.count({ selPackage: id }, function (error, count) {
	            if (error) {
	              console.log("error === ", error);
	              cb("Internal server error, Please try again", null);
	            } else if (count < result.roomCount) cb(null, true);else if (count >= result.roomCount) cb("You can't create new room, limit has been exceeded", null);
	          });
	        }
	      } else {
	        cb("Internal server error, Please try again", null);
	      }
	    });
	  } catch (e) {
	    console.log('error in checkRoomCount', e);
	    cb("Internal server error, Please try again", null);
	  }
	}
	
	/**
	*  @Function name : listRoom
	*  @Purpose : For fetching complete room data
	*  @Request Object : query : { page, items, search }
	*  @Response Object : Success - Room data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listRoom(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person != null) {
	        var selector = {};
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        //Search selector based on user role
	        if (person.role == _adminUser.Roles.Superadmin) {
	          selector = {};
	        } else if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.CRMadmin) {
	          selector = {
	            corporateId: bussinessID
	          };
	        } else {
	          selector = {
	            users: { $in: [person._id] }
	          };
	        }
	        if (person.deviceType == 'IOS' || person.deviceType == 'ANDROID') {
	          //Query for fetching complete room data based on selector and skip items based on itemsPerPage on previous page
	          var query = _room2.default.find(selector).select('roomName roomType corporateId selPackage').sort({
	            createdOn: -1
	          });
	          query.populate('selPackage corporateId', 'packageName -_id businessName -_id').exec(function (err, result) {
	            if (err) {
	              res.json({ status: false, error: err.message });
	            } else {
	              res.json({ status: true, data: result });
	            }
	          });
	        } else if (req.query.items && req.query.page) {
	          var listroom = req.query;
	
	          //If search is not empty then create RegExp
	          if (listroom.search && listroom.search != '') {
	            var slash_search = (0, _slashesActions.addSlash)(listroom.search);
	            var searchKey = RegExp(listroom.search, 'i');
	            selector['roomName'] = { $regex: searchKey };
	          }
	
	          //Query for fetching complete room data based on selector and skip items based on itemsPerPage on previous page
	          var _query = _room2.default.find(selector).limit(Number(listroom.items)).select('roomName roomType corporateId selPackage').skip(Number(listroom.items) * (Number(listroom.page) - 1));
	
	          if (req.query.sort == 'undefined' || req.query.sort == undefined) {
	            _query.sort({ modifiedAt: -1 });
	          } else {
	            //console.log("sort === ", req.query.sort);
	            _query.sort(JSON.parse(req.query.sort));
	          }
	
	          //Query for counting complete room data based on selector
	          var roomquery = _room2.default.count(selector);
	
	          _query.populate('selPackage corporateId', 'packageName -_id businessName -_id').exec(function (err, result) {
	            if (err) {
	              res.json({ status: false, error: err.message });
	            } else {
	              roomquery.exec(function (error, count) {
	                res.json({ status: true, data: result, count: count });
	              });
	            }
	          });
	        } else {
	          res.json({ status: false, error: "Invalid request data." });
	        }
	      } else {
	        res.json({ status: false, error: "Invalid request." });
	      }
	    } catch (e) {
	      console.log("Error in list room", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchRoom
	*  @Purpose : For fetching particular room data
	*  @Request Object : params : { id: "room id" }
	*  @Response Object : Success - Room data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchRoom(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room id is valid or not
	        if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Query for finding the room data based on room id
	          var query = _room2.default.findOne({
	            _id: recordId
	          });
	          query.populate('selPackage corporateId', 'packageValidity packageName features _id businessName _id').populate({
	            path: 'users',
	            select: 'firstname lastname email profile.profileImage role',
	            match: {
	              userStatus: 'Active',
	              guest: false
	            }
	          }).populate('categoryId', '_id categoryName').exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (doc) {
	              //console.log("DATA===", doc);
	              var key = 'conf/' + doc.roomKey;
	
	              //Concatinating confLink to roomKey 
	              doc['roomKey'] = _config2.default.confLink.concat(key);
	              res.json({
	                status: true,
	                data: doc
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid Room."
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in fetch room", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteRoom
	*  @Purpose : For deleting room
	*  @Request Object : params : { id: "room id" }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteRoom(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.params.id) {
	
	        //Validating if room id is valid or not
	        if (validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid room."
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Query for finding room data
	          var query = _room2.default.findOne({
	            _id: recordId
	          });
	          query.exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	              getRoomUsersData(doc.users, req.params.id, function (err, usersData) {
	                if (usersData != null) {
	                  //Used async parallel for running the tasks collection of functions in parallel, 
	                  //without waiting until the previous function has completed.
	                  //Used async refect to continue the execution of other tasks when a task fails.
	                  async.parallel([async.reflect(function (callback) {
	                    var studentQuery = _students2.default.remove({
	                      roomId: recordId
	                    });
	                    studentQuery.exec(function (error, response) {
	                      if (error) {
	                        callback(error.message);
	                      } else {
	                        callback(null);
	                      }
	                    });
	                  }), async.reflect(function (callback) {
	                    var topicQuery = _topic2.default.remove({
	                      roomId: recordId
	                    });
	                    topicQuery.exec(function (error, response) {
	                      if (error) {
	                        callback(error.message);
	                      } else {
	                        callback(null);
	                      }
	                    });
	                  })],
	                  // optional callback
	                  function (err, results) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	                    } else {
	
	                      //For finding error object in results
	                      var errorObject = _.find(results, 'error');
	
	                      //Verifying if error object is there or not
	                      if (errorObject == undefined) {
	
	                        //Query for removing room 
	                        var innerquery = _room2.default.remove({
	                          _id: recordId
	                        });
	                        innerquery.exec(function (error, response) {
	                          if (error) {
	                            res.json({
	                              status: false,
	                              error: error.message
	                            });
	                          } else {
	                            res.json({
	                              status: true,
	                              message: "Deleted successfully."
	                            });
	
	                            //createdBy: pranathi, disc: push notifications for android Users
	                            if (usersData && usersData.length > 0) {
	                              var message = 'The Room ' + doc.roomName + ' has been deleted.';
	                              _users2.default.find({ _id: { $in: usersData } }).select('deviceType deviceId').exec(function (err, userData) {
	                                if (userData && userData.length > 0) {
	                                  for (var i = 0; i <= userData.length - 1; i++) {
	                                    if (userData[i].deviceType == 'ANDROID') {
	                                      (0, _mobile.sendPushNotificationAndroid)("DELETE-ROOM", message, userData[i].deviceId, person._id, userData[i]._id);
	                                    }
	                                  }
	                                }
	                              });
	                            }
	
	                            //Log obj which need to be inserted in logger collection
	                            // var logObj = {
	                            //   logType : 'Room',
	                            //   actionType : 'Deleted',
	                            //   actionTime : moment().utc().toDate(),
	                            //   uid : doc.createdBy,
	                            //   details : {
	                            //     name : doc.roomName,
	                            //     corporateId : doc.corporateId,
	                            //     packageId : doc.selPackage,
	                            //     remoteAddress : req.connection.remoteAddress,
	                            //     userAgent : req.headers['user-agent']
	                            //   }
	                            // }
	
	                            // //Function for creating log on successful deletion of room
	                            // createLog(logObj, function(status) {
	                            //   if(status) {
	                            //     // console.log(status);
	                            //   }
	                            // }); 
	                          }
	                        });
	                      } else {
	                        res.json({
	                          status: false,
	                          error: "Error while deleteing room."
	                        });
	                      }
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("Error in delete room", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	function getRoomUsersData(roomUsers, rId, callback) {
	  var userIds = [];
	  _students2.default.find({ roomId: rId }, { '_id': 0, 'students': 1 }).exec(function (err, studentsData) {
	    if (err) {
	      callback(err.message, null);
	    } else if (studentsData && studentsData.length > 0) {
	      //pushing multiple array ids in to one array
	      var studentDupArrayIds = [];
	      studentsData.forEach(function (data) {
	        studentDupArrayIds = _.unionBy(data.students, studentDupArrayIds);
	      });
	
	      if (studentDupArrayIds.length > 0) {
	        //seperating unique studentIds from studentDupIds array
	        var stuIdObjData = new Set(studentDupArrayIds.toString().split(","));
	        var studentArrayData = Array.from(stuIdObjData);
	        var studentIds = [];
	        for (var i = 0; i < studentArrayData.length; i++) {
	          studentIds.push(mongoose.Types.ObjectId(studentArrayData[i]));
	        }
	        userIds = roomUsers.concat(studentIds);
	        callback(null, userIds);
	      } else {
	        callback(null, roomUsers);
	      }
	    } else {
	      callback(null, roomUsers);
	    }
	  });
	}
	
	/**
	*  @Function name : addRoomUser
	*  @Purpose : For adding user to room
	*  @Request Object : roomdata : { roomId: "room id", userId: 'user id' }
	*  @Response Object : Success - Success message, Room data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	//TODO - User Count validation
	function addRoomUser(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.body.roomdata) {
	        var obj = req.body.roomdata;
	
	        //Validating if room and user id is valid or not 
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room."
	          });
	        } else if (!obj.userId || validator.isEmpty(obj.userId) || !mongoose.Types.ObjectId.isValid(obj.userId)) {
	          res.json({
	            status: false,
	            error: "Invalid UserId."
	          });
	        } else {
	
	          //Query for finding room data
	          var roomquery = _room2.default.findOne({
	            _id: mongoose.Types.ObjectId(obj.roomId)
	          }).populate("selPackage", "continuousPresence");
	          roomquery.exec(function (roomerr, room) {
	            if (roomerr) {
	              res.json({
	                status: false,
	                error: "Room not found."
	              });
	            } else {
	              var userId = obj.userId;
	
	              //For adding user to room
	              _room2.default.update({
	                _id: mongoose.Types.ObjectId(obj.roomId),
	                users: {
	                  $nin: [userId]
	                }
	              }, {
	                $push: {
	                  users: userId
	                }
	              }, function (error, result) {
	                if (error) {
	                  //TODO - user present in any other room
	                  // console.log("update error == ",error);
	                  res.json({
	                    status: false,
	                    error: error.message,
	                    message: "User already present in current room."
	                  });
	                } else {
	
	                  //For finding updated room data
	                  var query = _room2.default.findOne({
	                    _id: mongoose.Types.ObjectId(obj.roomId)
	                  });
	                  query.populate('selPackage corporateId', 'packageName features -_id businessName -_id').populate('users', 'firstname lastname email profile.profileImage role', { userStatus: 'Active', guest: false }).exec(function (err, doc) {
	
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message,
	                        message: "Error while retriving room data."
	                      });
	                    } else {
	                      res.json({
	                        status: true,
	                        data: doc,
	                        message: "User added successfully."
	                      });
	
	                      var userquery = _users2.default.findOne({ _id: userId }).select('email firstname deviceType deviceId createdby');
	                      userquery.exec(function (usererr, user) {
	                        if (user) {
	                          var roomObj = {
	                            userEmail: user.email,
	                            subject: 'New User added to the Room.',
	                            userBody: 'You have been added to the Room ' + doc.roomName + ' by ' + person.firstname + '.',
	                            operatorBody: 'You have successfully added ' + user.firstname + ' to the Room ' + doc.roomName + '.',
	                            email: person.email
	                          };
	                          sendRoomEmail(roomObj);
	
	                          //createdBy: pranathi, disc: added push notifications for android users
	                          var message = 'Your account has been added to the Room ' + doc.roomName + '.';
	
	                          if (user && user.deviceType == 'ANDROID') {
	                            (0, _mobile.sendPushNotificationAndroid)("ADD-ROOM", message, user.deviceId, person._id, user._id);
	                          }
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("Error in add room user", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : removeRoomUser
	*  @Purpose : For removing user from room
	*  @Request Object : params : { rid: "room id", id: 'user id' }
	*  @Response Object : Success - Success message, Room data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function removeRoomUser(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.params.id && req.params.rid) {
	
	        //Validating if room and user id is valid or not 
	        if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid Room."
	          });
	        } else if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid UserId."
	          });
	        } else {
	
	          //Query for finding room data
	          var query = _room2.default.findOne({
	            _id: mongoose.Types.ObjectId(req.params.rid)
	          });
	          query.exec(function (err, docs) {
	            if (err) {
	              res.json({
	                status: false,
	                error: "Room not found."
	              });
	            } else {
	              var userId = req.params.id;
	
	              //Query for finding user data
	              var query = _users2.default.findOne({
	                _id: mongoose.Types.ObjectId(userId)
	              });
	              query.exec(function (err, user) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: "Unauthorized user."
	                  });
	                }
	
	                //If user is present in database
	                if (user) {
	
	                  //Verifying if user to be removed is instructor or not
	                  if (user.role == _adminUser.Roles.Instructor) {
	
	                    //Query for removing user from room
	                    _room2.default.update({
	                      _id: mongoose.Types.ObjectId(req.params.rid)
	                    }, {
	                      $pull: {
	                        users: userId
	                      }
	                    }, function (error, result) {
	                      if (error) {
	                        //TODO - user present in any other room
	                        res.json({
	                          status: false,
	                          error: error.message,
	                          message: "User not present in current room."
	                        });
	                      } else {
	                        var roomObj = {
	                          userEmail: user.email,
	                          subject: 'User Removed from the Course.',
	                          userBody: 'You have been removed from the Course ' + docs.roomName + ' by ' + person.firstname + '.',
	                          operatorBody: 'You have successfully removed ' + user.firstname + ' from the Course ' + docs.roomName + '.',
	                          email: person.email
	                        };
	                        sendRoomEmail(roomObj);
	
	                        //createdBy: pranathi, disc: push notifications  for android users
	                        var message = 'Your account has been removed from the Room ' + docs.roomName + '.';
	                        if (user && user.deviceType == 'ANDROID') {
	                          (0, _mobile.sendPushNotificationAndroid)("REMOVE-ROOM", message, user.deviceId, person._id, user._id);
	                        }
	
	                        _students2.default.findOne({ roomId: mongoose.Types.ObjectId(req.params.rid), instId: userId }).select('students').exec(function (error, stuData) {
	                          if (!error) {
	                            //Query for removing students assigned to instructor
	                            _students2.default.remove({
	                              roomId: mongoose.Types.ObjectId(req.params.rid),
	                              instId: userId
	                            }, function (error, sturesult) {
	                              if (error) {
	                                //TODO - user present in any other room
	                                console.log("errr", error);
	                                res.json({
	                                  status: false,
	                                  error: error,
	                                  message: error.message
	                                });
	                              } else {
	                                var stuQuery = _schedule2.default.remove({
	                                  roomId: req.params.rid,
	                                  createdBy: userId,
	                                  startTime: { $gte: moment.utc().toDate() }
	                                }, function (stuErr, stures) {
	                                  if (stuErr) {
	                                    res.json({
	                                      status: false,
	                                      error: error
	                                    });
	                                  }
	                                });
	                                //Query for finding updated room data
	                                var query = _room2.default.findOne({
	                                  _id: mongoose.Types.ObjectId(req.params.rid)
	                                });
	                                query.populate('selPackage', 'packageName features -_id').populate('corporateId', 'businessName -_id').populate('users', 'firstname lastname email profile.profileImage role', { userStatus: 'Active', guest: false }).exec(function (err, doc) {
	                                  if (err) {
	                                    res.json({
	                                      status: false,
	                                      error: err.message,
	                                      message: "Error while retriving room data."
	                                    });
	                                  } else {
	                                    // console.log("doc === ", doc);
	                                    res.json({
	                                      status: true,
	                                      data: doc,
	                                      message: "User removed successfully."
	                                    });
	
	                                    //createdBy: pranathi, disc: push notifications for android users
	                                    if (stuData && stuData.students && stuData.students.length > 0) {
	                                      var _message = 'Your account has been removed from the Room ' + docs.roomName + '.';
	                                      _users2.default.find({ _id: { $in: stuData.students } }).select('deviceType deviceId').exec(function (stuErr, stuData) {
	                                        for (var i = 0; i <= stuData.length - 1; i++) {
	                                          if (stuData[i].deviceType == 'ANDROID') {
	                                            (0, _mobile.sendPushNotificationAndroid)("REMOVE-ROOM", _message, stuData[i].deviceId, person._id, stuData[i]._id);
	                                          }
	                                        }
	                                      });
	                                    }
	                                  }
	                                });
	                              }
	                            });
	                          }
	                        });
	                      }
	                    });
	                  } else {
	                    //Query for removing user from room
	                    _room2.default.update({
	                      _id: mongoose.Types.ObjectId(req.params.rid)
	                    }, {
	                      $pull: {
	                        users: userId
	                      }
	                    }, function (error, result) {
	                      if (error) {
	                        //TODO - user present in any other room
	                        res.json({
	                          status: false,
	                          error: error.message,
	                          message: "User not present in current room."
	                        });
	                      } else {
	                        var roomObj = {
	                          userEmail: user.email,
	                          subject: 'User Removed from the Room.',
	                          userBody: 'You have been removed from the Room ' + docs.roomName + ' by ' + person.firstname + '.',
	                          operatorBody: 'You have successfully removed ' + user.firstname + ' from the Room ' + docs.roomName + '.',
	                          email: person.email
	                        };
	                        sendRoomEmail(roomObj);
	
	                        //createdBy: pranathi, disc: push notifications for android users
	                        var message = 'Your account has been removed from the Room ' + docs.roomName + '.';
	                        if (user && user.deviceType == 'ANDROID') {
	                          (0, _mobile.sendPushNotificationAndroid)("REMOVE-ROOM", message, user.deviceId, person._id, user._id);
	                        }
	
	                        var scheduleQuery = _schedule2.default.remove({
	                          roomId: req.params.rid,
	                          createdBy: userId,
	                          startTime: { $gte: moment().utc().toDate() }
	                        }, function (scherror, schres) {
	                          if (scherror) {
	                            res.json({
	                              status: false,
	                              error: error
	                            });
	                          }
	                        });
	                        //Query for finding updated room data
	                        var query = _room2.default.findOne({
	                          _id: mongoose.Types.ObjectId(req.params.rid)
	                        });
	                        query.populate('selPackage corporateId', 'packageName features -_id businessName -_id').populate('users', 'firstname lastname email profile.profileImage role', { userStatus: 'Active', guest: false }).exec(function (e, doc) {
	                          if (e) {
	                            res.json({
	                              status: false,
	                              error: e.message,
	                              message: "Error while retriving room data."
	                            });
	                          } else {
	                            res.json({
	                              status: true,
	                              data: doc,
	                              message: "User removed successfully."
	                            });
	                            //createdBy: pranathi, disc: push notifications for android devices
	                            var _message2 = 'Your account has been removed from the Room ' + docs.roomName + '.';
	                            if (user && user.deviceType == 'ANDROID') {
	                              (0, _mobile.sendPushNotificationAndroid)("REMOVE-ROOM", _message2, user.deviceId, person._id, user._id);
	                            }
	                          }
	                        });
	                      }
	                    });
	                  }
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("Error in remove room user", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	function sendRoomEmail(obj) {
	  var exchangeData = {
	    to: obj.userEmail,
	    subject: obj.subject,
	    body: obj.userBody,
	    descreption: 'Ignore mail if not relevant.'
	  };
	
	  //Note : Commented for temparary bases to sending email notification for users when 
	  //add room user, remove room user, add room student, remove room student and add group students.
	
	  // EmailForUserCreation.defaultUserMail(exchangeData, function(emailerror, emailsuccess) {
	  //   //console.log(emailerror.status)
	  //   if (emailerror.status == false) {
	  //     console.log("Email not sent");
	  //     } else {
	  //     //console.log('email sent')
	  //   }
	  // });
	
	  var myMailData = {
	    to: obj.email,
	    subject: obj.subject,
	    body: obj.operatorBody,
	    descreption: 'Ignore mail if not relevant.'
	  };
	
	  //Note : Commented for temparary bases to sending email notification for login user when 
	  //add room user, remove room user, add room student, remove room student and add group students.
	
	  // EmailForUserCreation.defaultUserMail(myMailData, function(emailerror, emailsuccess) {
	  //   //console.log(emailerror.status)
	  //   if (emailerror.status == false) {
	  //     console.log("Email not sent");
	  //   } else {
	  //     //console.log('email sent')
	  //   }
	  // });
	}
	
	// export function fetchRoomUser(req, res) {
	//   console.log("fetchRoomUser function req---", req.body.roomdata);
	//   if(req.body.roomdata){
	//     var obj = req.body.roomdata;
	//     if(!obj.id || validator.isEmpty(obj.id) || !mongoose.Types.ObjectId.isValid(obj.id)){
	//       res.json({status: false, error : "Invalid room."});
	//     }else{
	//       var recordId = mongoose.Types.ObjectId(req.body.roomdata.id);
	//       //console.log("recordId == ",recordId);
	//       var query = Room.findOne({ _id : recordId });
	//       query.populate('users', 'firstname lastname email profile.profileImage')
	//       .exec(function (err, doc) {
	//           if (err){ res.json({ status: false, error : err }); }
	//           else{
	//             // console.log("Room Users=====", doc.users);
	//             res.json({ status: true, data: doc });
	//           }
	//       });
	//     }
	//   }else{
	//     res.json({status: false, error : "Invalid request."});
	//   }
	// }
	
	function getPackageIds(req, res) {
	  var options = [['', 'Select Package']];
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	        var query = null;
	        if (person.role == _adminUser.Roles.Superadmin) {
	          query = _package2.default.find({});
	        } else if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	          query = _package2.default.find({ "assignedTo": mongoose.Types.ObjectId(person._id) });
	        }
	        if (query != null) {
	          query.exec(function (error, doc) {
	            if (doc && doc.length > 0) {
	              _.forIn(doc, function (value, key) {
	                options.push([value._id, value.packageName]);
	              });
	              res.json({ data: options });
	            } else res.json({ data: options });
	          });
	        } else res.json({ data: options });
	      } else res.json({ data: options });
	    } catch (e) {
	      console.log("error in getPackageIds", e);
	      res.json({ data: options });
	    }
	  });
	}
	
	function getCategoryIds(req, res) {
	
	  var options = [['', 'Select Category']];
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.CRMadmin) {
	          var query = _category2.default.find({ corporateId: mongoose.Types.ObjectId(bussinessID) });
	          query.exec(function (error, doc) {
	            if (doc) {
	              _.forIn(doc, function (value, key) {
	                options.push([value._id, value.categoryName]);
	              });
	              res.json({ data: options });
	            } else res.json({ data: options });
	          });
	        } else res.json({ data: options });
	      } else res.json({ data: options });
	    } catch (e) {
	      console.log("error in getCategoryIds ", e);
	      res.json({ data: options });
	    }
	  });
	}
	
	/**
	*  @Function name : saveRoomTopic
	*  @Purpose : For creating topic in room
	*  @Request Object : roomtopicdata : { room topic data }
	*  @Response Object : Success - Success message, Topic data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveRoomTopic(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.body.roomtopicdata) {
	        var obj = req.body.roomtopicdata;
	
	        //Validating if room id is valid or not
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room."
	          });
	        } else {
	
	          //Query for finding room data
	          var query = _room2.default.findOne({
	            _id: mongoose.Types.ObjectId(obj.roomId)
	          });
	          query.exec(function (err, docs) {
	            if (err) {
	              res.json({
	                status: false,
	                error: "Room not found."
	              });
	            } else {
	              if (!obj._id || validator.isEmpty(obj._id) || !mongoose.Types.ObjectId.isValid(obj._id)) {
	                obj['createdBy'] = mongoose.Types.ObjectId(person._id);
	                delete obj['uid'];
	
	                //Function calling for checking topic count
	                /*checkTopicCount(obj.roomId, function(topicerr, response) {
	                  if (response != null) {*/
	                var objUser = new _topic2.default(obj);
	
	                //Query for creating topic
	                _topic2.default.create([objUser], function (error, data) {
	                  if (!error) {
	                    res.json({
	                      status: true,
	                      data: data[0],
	                      message: "Created successfully."
	                    });
	                  } else {
	                    var errors = [];
	                    if (error.name == 'ValidationError') {
	                      for (var field in error.errors) {
	                        errors.push(error.errors[field].message);
	                      }
	                    }
	                    res.json({
	                      status: false,
	                      error: errors
	                    });
	                  }
	                });
	                /*} else {
	                  let errorResponse = topicerr.message ? topicerr.message : topicerr;
	                  res.json({ 
	                    status  : false, 
	                    error : errorResponse 
	                  });
	                }
	                });*/
	              }
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("error in save room topic", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : updateRoomTopic
	*  @Purpose : For updating topic in room
	*  @Request Object : roomtopicdata : { room topic data }
	*  @Response Object : Success - Success message, Topic data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function updateRoomTopic(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.params.id && req.body.roomtopicdata) {
	        var obj = req.body.roomtopicdata;
	
	        //Validating if room id is valid or not
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room."
	          });
	        } else {
	
	          //Query for fetching the details of room
	          var query = _room2.default.findOne({
	            _id: mongoose.Types.ObjectId(obj.roomId)
	          });
	          query.exec(function (err, docs) {
	            if (err) {
	              res.json({
	                status: false,
	                error: "Room not found."
	              });
	            } else {
	
	              //Query for fetching the details of topic
	              var topicQuery = _topic2.default.findOne({
	                _id: mongoose.Types.ObjectId(req.params.id)
	              });
	              delete obj['uid'];
	
	              topicQuery.exec(function (error, data) {
	                if (error) {
	                  res.json({
	                    status: false,
	                    error: error.message
	                  });
	                } else {
	                  var recordId = req.params.id;
	
	                  //If data is present then update the topic
	                  _topic2.default.update({
	                    _id: recordId
	                  }, {
	                    $set: obj
	                  }, {
	                    runValidators: true
	                  }, function (updateerror, doc) {
	                    if (updateerror) {
	                      res.json({
	                        status: false,
	                        error: updateerror.message
	                      });
	                    } else {
	
	                      //Query for sending the updated record to the client
	                      var query = _topic2.default.findOne({
	                        _id: recordId
	                      });
	                      query.exec(function (e, topicDoc) {
	                        if (e) {
	                          res.json({
	                            status: false,
	                            error: e
	                          });
	                        } else {
	                          res.json({
	                            status: true,
	                            data: topicDoc,
	                            message: "Updated successfully."
	                          });
	                          //createdBy: pranathi, disc: added push notifications
	                          if (topicDoc.topicEnable == true) {
	                            var message = "The topic " + topicDoc.topicName + " has been updated to the Room.";
	                            roomStudentData(topicDoc.roomId, function (error, studentIds) {
	                              if (studentIds != null) {
	                                _users2.default.find({ _id: { $in: studentIds } }).select("deviceType deviceId").exec(function (stuErr, stuData) {
	                                  if (stuData) {
	                                    if (stuData.length > 0) {
	                                      for (var i = 0; i <= stuData.length - 1; i++) {
	                                        if (stuData[i].deviceType == 'ANDROID') {
	                                          (0, _mobile.sendPushNotificationAndroid)("UPDATE-TOPIC", message, stuData[i].deviceId, person._id, stuData[i]._id);
	                                        }
	                                      }
	                                    }
	                                  }
	                                });
	                              }
	                            });
	                          }
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("error in update room topic", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	function checkTopicCount(rid, cb) {
	  try {
	    var query = _room2.default.findOne({ _id: rid }).populate('selPackage', 'topicCount').select('selPackage');
	    query.exec(function (error, data) {
	      // console.log("data === ",data);
	      if (data) {
	        var count = data.selPackage && data.selPackage.topicCount ? data.selPackage.topicCount : 0;
	        if (count == 0) {
	          cb('Please update your package, and try again', null);
	        } else if (count == -1) {
	          cb(null, true);
	        } else {
	          _topic2.default.count({ roomId: rid }, function (err, c) {
	            // console.log("err === ",err);
	            // console.log("c === ",c);
	            if (err) {
	              cb('Internal server error', null);
	            } else {
	              if (c < count) cb(null, true);else cb("You can't create new topic, limit has been exceeded", null);
	            }
	          });
	        }
	      } else {
	        cb(error, null);
	      }
	    });
	  } catch (e) {
	    console.log('error in checkTopicCount', e);
	    cb("Internal server error", null);
	  }
	}
	
	/**
	*  @Function name : listRoomTopic
	*  @Purpose : For fetching topic data based on room
	*  @Request Object : query : { roomId, page, items, search }
	*  @Response Object : Success - Topic data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listRoomTopic(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    //console.log('req.query.page', req.query.page);
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page || !req.query.roomId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var listroom = req.query;
	        var selector = {};
	
	        //Search selector based on user role
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Moderator || person.role == _adminUser.Roles.Presenter || person.role == _adminUser.Roles.User || person.role == _adminUser.Roles.Instructor) {
	          selector = {
	            roomId: listroom.roomId,
	            $or: [{ createdBy: person._id }, { topicEnable: true }]
	
	          };
	
	          //If search is not empty then create RegExp
	          if (listroom.search && listroom.search != '') {
	            var slash_search = (0, _slashesActions.addSlash)(listroom.search);
	            var searchKey = RegExp(slash_search, 'i');
	            selector['$or'] = [{ 'topicName': { $regex: searchKey } }, { 'description': { $regex: searchKey } }];
	          }
	
	          //Query for fetching complete topic data based on selector and skip items based on itemsPerPage on previous page
	          var query = _topic2.default.find(selector).limit(Number(listroom.items)).select('topicName description roomId topicEnable createdBy').skip(Number(listroom.items) * (Number(listroom.page) - 1));
	          // .sort({
	          //   createdAt: -1
	          // })
	          if (req.query.sort == 'undefined' || req.query.sort == undefined) {
	            query.sort({ modifiedAt: -1 });
	          } else {
	            //console.log("sort === ", req.query.sort);
	            query.sort(JSON.parse(req.query.sort));
	          }
	
	          query.exec(function (err, result) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              //Query for counting complete topic data based on selector
	              _topic2.default.count(selector).exec(function (error, count) {
	                res.json({
	                  status: true,
	                  data: result,
	                  count: count
	                });
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in list room topic", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchRoomTopic
	*  @Purpose : For fetching particular topic data
	*  @Request Object : params : { id: "topic id", rid: "room id" }
	*  @Response Object : Success - Topic data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchRoomTopic(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !req.params.rid) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room id and topic id is valid or not
	        if (validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else if (validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid topic"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Query for finding the topic data based on topic id
	          var query = _topic2.default.findOne({
	            _id: recordId
	          }).populate('questionnaire.questionnaireId', 'questionnaireName').exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Topic'
	              });
	            } else if (doc) {
	              res.json({
	                status: true,
	                data: doc
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in fetch room topic", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : addRoomStudent
	@Purpose : "To add selected student which is sent from client side in students collection"
	@Request Object : studentdata:{roomId,instId, userId}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function addRoomStudent(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.studentdata) {
	        var obj = req.body.studentdata;
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room."
	          });
	        } else if (!obj.userId || validator.isEmpty(obj.userId) || !mongoose.Types.ObjectId.isValid(obj.userId)) {
	          res.json({
	            status: false,
	            error: "Invalid Student."
	          });
	        } else {
	          var objSave = {};
	          //Query for finding room data
	          var roomquery = _room2.default.findOne({
	            _id: mongoose.Types.ObjectId(obj.roomId)
	          }).select('roomName');
	          roomquery.exec(function (roomerr, room) {
	            if (room) {
	
	              //Fectching student data
	              _students2.default.findOne({
	                "roomId": mongoose.Types.ObjectId(obj.roomId),
	                "instId": mongoose.Types.ObjectId(obj.instId)
	              }).exec(function (error, student) {
	                if (error) {
	                  res.json({
	                    status: false,
	                    error: "Error while fatching room data."
	                  });
	                }if (student) {
	
	                  //Verifying whether the student added to instructor or not
	                  _students2.default.update({
	                    "roomId": mongoose.Types.ObjectId(obj.roomId),
	                    "instId": mongoose.Types.ObjectId(obj.instId),
	                    students: {
	                      $nin: [mongoose.Types.ObjectId(obj.userId)]
	                    }
	                  }, {
	                    $push: {
	                      students: mongoose.Types.ObjectId(obj.userId)
	                    },
	                    modifiedBy: mongoose.Types.ObjectId(obj.uid),
	                    modifiedOn: moment().utc().toDate()
	                  }).exec(function (err, doc) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: error,
	                        message: "Student already added to current Instructor."
	                      });
	                    } else {
	                      _students2.default.findOne({
	                        "roomId": mongoose.Types.ObjectId(obj.roomId),
	                        "instId": mongoose.Types.ObjectId(obj.instId)
	                      }).select('roomId instId students').populate('instId students', 'firstname lastname email profile.profileImage role', _defineProperty({ userStatus: 'Active', guest: { $exists: false } }, 'guest', false)).populate('roomId', 'roomName').exec(function (err1, doc1) {
	                        if (err1) {
	                          res.json({
	                            status: false,
	                            error: err1.message
	                          });
	                        } else {
	                          res.json({
	                            status: true,
	                            data: doc1,
	                            message: "User added successfully."
	                          });
	                          var userquery = _users2.default.findOne({ _id: obj.userId }).select('email firstname deviceId deviceType');
	                          userquery.exec(function (usererr, user) {
	                            if (user) {
	                              var roomObj = void 0;
	                              if (person.role == _adminUser.Roles.Lmsadmin) {
	                                roomObj = {
	                                  userEmail: user.email,
	                                  subject: 'New Student added to the  Course.',
	                                  userBody: 'You have been added to the Course ' + room.roomName + ' by ' + person.firstname + '.',
	                                  operatorBody: 'You have successfully added ' + user.firstname + ' to the Course ' + room.roomName + '.',
	                                  email: person.email
	                                };
	
	                                var instructorMailData = {
	                                  to: doc1.instId.email,
	                                  subject: 'New Student added to the  Course.',
	                                  body: 'New Student has been added to the Course ' + room.roomName + ' by ' + person.firstname + '.',
	                                  descreption: 'Ignore mail if not relevant.'
	                                };
	
	                                //createdBy: pranathi, disc: push notification for android students 
	                                var message = 'Your account has been added to the Room ' + room.roomName + '.';
	                                if (user && user.deviceType == 'ANDROID') {
	                                  (0, _mobile.sendPushNotificationAndroid)("ADD-STUDENT", message, user.deviceId, person._id, user._id);
	                                }
	
	                                //push notification for instructor
	                                if (doc1) {
	                                  _users2.default.findOne({ _id: doc1.instId._id }).select('deviceId deviceType').exec(function (error, insData) {
	                                    var insMessage = 'Student ' + user.firstname + ' has been added to the Room ' + room.roomName + '.';
	                                    if (insData && insData.deviceType == 'ANDROID') {
	                                      (0, _mobile.sendPushNotificationAndroid)("ADD-INS", insMessage, insData.deviceId, person._id, insData._id);
	                                    }
	                                  });
	                                }
	
	                                // Commented for temporary bases 
	                                // Email will be sent to instructor when admin add student under the instructor
	
	                                // EmailForUserCreation.defaultUserMail(instructorMailData, function(emailerror, emailsuccess) {
	                                //   if (emailerror.status == false) {
	                                //     console.log("Email not sent");
	                                //   } else {
	                                //     //console.log('email sent')
	                                //   }
	                                // });
	                                sendRoomEmail(roomObj);
	                              } else {
	                                roomObj = {
	                                  userEmail: user.email,
	                                  subject: 'New Student added to the  Course.',
	                                  userBody: 'You have been added to the Course ' + room.roomName + ' by ' + person.firstname + '.',
	                                  operatorBody: 'You have successfully added ' + user.firstname + ' to the Course ' + room.roomName + '.',
	                                  email: person.email
	                                };
	                                sendRoomEmail(roomObj);
	                                //createdBy: pranathi, disc: added push notifications for android students
	                                var _message3 = 'Your account has been added to the Room ' + room.roomName + '.';
	                                if (user && user.deviceType == 'ANDROID') {
	                                  (0, _mobile.sendPushNotificationAndroid)("ADD-STUDENT", _message3, user.deviceId, person._id, user._id);
	                                }
	                              }
	                            }
	                          });
	                        }
	                      });
	                    }
	                  });
	                } else {
	
	                  //Create
	                  objSave['roomId'] = mongoose.Types.ObjectId(obj.roomId);
	                  objSave['instId'] = mongoose.Types.ObjectId(obj.instId);
	                  objSave['students'] = [mongoose.Types.ObjectId(obj.userId)];
	                  objSave['createdBy'] = mongoose.Types.ObjectId(obj.uid);
	                  objSave['modifiedBy'] = mongoose.Types.ObjectId(obj.uid);
	                  var studentObj = new _students2.default(objSave);
	                  studentObj.save(function (err, saved) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err
	                      });
	                    } else {
	
	                      _students2.default.findOne({ _id: saved._id }).select('roomId instId students').populate('instId students', 'firstname lastname email profile.profileImage role', _defineProperty({ userStatus: 'Active', guest: { $exists: false } }, 'guest', false)).populate('roomId', 'roomName').exec(function (err1, doc1) {
	                        if (err1) {
	                          res.json({
	                            status: false,
	                            error: err1
	                          });
	                        } else {
	                          res.json({
	                            status: true,
	                            data: doc1,
	                            message: "User added successfully."
	                          });
	                          var userquery = _users2.default.findOne({ _id: obj.userId }).select('email firstname deviceId deviceType');
	                          userquery.exec(function (usererr, user) {
	                            //console.log(user)
	                            if (user) {
	                              var roomObj = {
	                                userEmail: user.email,
	                                subject: 'New Student added to the Course.',
	                                userBody: 'You have been added to the Course ' + room.roomName + ' by ' + person.firstname + '.',
	                                operatorBody: 'You have successfully added ' + user.firstname + ' to the Course ' + room.roomName + '.',
	                                email: person.email
	                              };
	                              sendRoomEmail(roomObj);
	                              //createdBy: pranathi, disc: added push notifications for android student
	                              var message = 'Your account has been added to the Room ' + room.roomName + '.';
	                              if (user && user.deviceType == 'ANDROID') {
	                                (0, _mobile.sendPushNotificationAndroid)("ADD-STUDENT", message, user.deviceId, person._id, user._id);
	                              }
	                            }
	                          });
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : fetchstudent
	@Purpose : "To fetch all the user which are present in a particular room and instructor "
	@Request Object : params:{roomId, instId}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function fetchstudent(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params) {
	
	        var obj = req.params;
	
	        //Validation against roomId        
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else if (!obj.instId || validator.isEmpty(obj.instId) || !mongoose.Types.ObjectId.isValid(obj.instId)) {
	          res.json({
	            status: false,
	            error: "Invalid instructor"
	          });
	        } else {
	
	          //Firing a query to get documents matching roomId and instId
	          _students2.default.findOne({
	            "roomId": mongoose.Types.ObjectId(obj.roomId),
	            "instId": mongoose.Types.ObjectId(obj.instId)
	          }).select('roomId instId students').populate('instId students', 'firstname lastname email profile.profileImage role', _defineProperty({ userStatus: 'Active', guest: { $exists: false } }, 'guest', false)).populate('roomId', 'roomName').exec(function (err1, doc1) {
	            if (err1) {
	              res.json({
	                status: false,
	                error: err1.message
	              });
	            } else if (doc1) {
	              res.json({
	                status: true,
	                data: doc1
	              });
	            } else {
	              res.json({
	                status: true,
	                data: doc1
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in fetchstudent', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : removeRoomStud
	@Purpose : "To fetch all the user which are present in a particular room and instructor "
	@Request Object : params:{roomId, instId, studId}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function removeRoomStud(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params) {
	        var obj = req.params;
	
	        //Validating for roomId and studentId
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room."
	          });
	        } else if (!obj.studId || validator.isEmpty(obj.studId) || !mongoose.Types.ObjectId.isValid(obj.studId)) {
	          res.json({
	            status: false,
	            error: "Invalid Student Id."
	          });
	        } else if (!obj.instId || validator.isEmpty(obj.instId) || !mongoose.Types.ObjectId.isValid(obj.instId)) {
	          res.json({
	            status: false,
	            error: "Invalid instructor."
	          });
	        } else {
	          //Query for finding room data
	          var roomquery = _room2.default.findOne({
	            _id: mongoose.Types.ObjectId(obj.roomId)
	          }).select('roomName');
	          roomquery.exec(function (roomerr, room) {
	            if (room) {
	
	              //Firing a query to get document based on roomId and instId
	              _students2.default.findOne({
	                "roomId": mongoose.Types.ObjectId(obj.roomId),
	                "instId": mongoose.Types.ObjectId(obj.instId)
	              }).exec(function (err, docs) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: "Room with this instructor not found."
	                  });
	                } else {
	
	                  //Updating the student document by removing student 
	                  _students2.default.update({
	                    _id: mongoose.Types.ObjectId(docs._id)
	                  }, {
	                    $pull: {
	                      students: mongoose.Types.ObjectId(obj.studId)
	                    }
	                  }).exec(function (error, result) {
	                    if (error) {
	                      //TODO - user present in any other room
	                      res.json({
	                        status: false,
	                        error: error,
	                        message: "User not present in current room."
	                      });
	                    } else {
	
	                      //Firing the query to get document so as to send to client side
	                      _students2.default.findOne({
	                        "roomId": mongoose.Types.ObjectId(obj.roomId),
	                        "instId": mongoose.Types.ObjectId(obj.instId)
	                      }).select('roomId instId students').populate('instId students', 'firstname lastname email profile.profileImage role', _defineProperty({ userStatus: 'Active', guest: { $exists: false } }, 'guest', false)).populate('roomId', 'roomName').exec(function (err1, doc1) {
	                        if (err1) {
	                          res.json({
	                            status: false,
	                            error: err1,
	                            message: "Error while retriving room data."
	                          });
	                        } else {
	                          res.json({
	                            status: true,
	                            data: doc1,
	                            message: "User removed successfully."
	                          });
	                          var userquery = _users2.default.findOne({ _id: obj.studId }).select('email firstname deviceType deviceId');
	                          userquery.exec(function (usererr, user) {
	                            if (user) {
	                              var roomObj = void 0;
	                              if (person.role == _adminUser.Roles.Lmsadmin) {
	                                roomObj = {
	                                  userEmail: user.email,
	                                  subject: 'Student removed from the Course.',
	                                  userBody: 'You have been removed from the Course ' + room.roomName + ' by ' + person.firstname + '.',
	                                  operatorBody: 'You have successfully removed ' + user.firstname + ' from the Course ' + room.roomName + '.',
	                                  email: person.email
	                                };
	                                var instructorMailData = {
	                                  to: doc1.instId.email,
	                                  subject: 'Student removed from the Course..',
	                                  body: 'Student has been removed from the Course ' + room.roomName + ' by ' + person.firstname + '.',
	                                  descreption: 'Ignore mail if not relevant.'
	                                };
	
	                                //createdBy: pranathi, disc: push notification for android student 
	                                var message = 'Your account has been removed from the Room ' + room.roomName + '.';
	                                if (user && user.deviceType == 'ANDROID') {
	                                  (0, _mobile.sendPushNotificationAndroid)("REMOVE-STUDENT", message, user.deviceId, person._id, user._id);
	                                }
	
	                                //push notification for instructor
	                                if (doc1) {
	                                  _users2.default.findOne({ _id: doc1.instId._id }).select('deviceId deviceType').exec(function (error, insData) {
	                                    var insMessage = 'Student ' + user.firstname + ' has been removed from the Room ' + room.roomName + '.';
	                                    if (insData && insData.deviceType == 'ANDROID') {
	                                      (0, _mobile.sendPushNotificationAndroid)("REMOVE-INS", insMessage, insData.deviceId, person._id, insData._id);
	                                    }
	                                  });
	                                }
	                                // Commented for temporary bases
	                                // Email will be sent to instructor when admin remove student under the instructor
	
	                                // EmailForUserCreation.defaultUserMail(instructorMailData, function(emailerror, emailsuccess) {
	                                //   if (emailerror.status == false) {
	                                //     console.log("Email not sent");
	                                //   } else {
	                                //     //console.log('email sent')
	                                //   }
	                                // });
	                                sendRoomEmail(roomObj);
	                              } else {
	                                roomObj = {
	                                  userEmail: user.email,
	                                  subject: 'Student removed from the Course.',
	                                  userBody: 'You have been removed from the Course ' + room.roomName + ' by ' + person.firstname + '.',
	                                  operatorBody: 'You have successfully removed ' + user.firstname + ' from the Course ' + room.roomName + '.',
	                                  email: person.email
	                                };
	                                sendRoomEmail(roomObj);
	
	                                //createdBy: pranathi, disc:  push notifications for android user
	                                var _message4 = 'Your account has been removed from the Room ' + room.roomName + '.';
	                                if (user && user.deviceType == 'ANDROID') {
	                                  (0, _mobile.sendPushNotificationAndroid)("REMOVE-STUDENT", _message4, user.deviceId, person._id, user._id);
	                                }
	                              }
	                            }
	                          });
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in removeRoomStud', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteTopic
	*  @Purpose : For deleting topic
	*  @Request Object : params : { id: "topic id" }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteTopic(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person != null && req.params.id) {
	
	        //Validating if topic id is valid or not
	        if (validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid Topic."
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Query for finding topic data
	          var query = _topic2.default.findOne({
	            _id: recordId
	          });
	          query.exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	              roomStudentData(req.params.rid, function (err, studentIds) {
	                if (studentIds != null) {
	                  //Query for removing topic 
	                  var innerquery = _topic2.default.remove({
	                    _id: recordId
	                  });
	                  innerquery.exec(function (error, response) {
	                    if (error) {
	                      res.json({
	                        status: false,
	                        error: error.message
	                      });
	                    } else {
	                      res.json({
	                        status: true,
	                        message: "Deleted successfully."
	                      });
	                      //createdBy: pranathi, disc: push notification for android students
	                      if (doc && doc.topicEnable == true) {
	                        var message = "The topic " + doc.topicName + " has been deleted from the Room.";
	                        _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                          if (result && result.length > 0) {
	                            for (var i = 0; i <= result.length - 1; i++) {
	                              if (result[i].deviceType == 'ANDROID') {
	                                (0, _mobile.sendPushNotificationAndroid)("DELETE-TOPIC", message, result[i].deviceId, person._id, result[i]._id);
	                              }
	                            }
	                          }
	                        });
	                      }
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("error in delete topic", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	function roomStudentData(rId, callback) {
	  var studentIds = [];
	  _students2.default.find({ roomId: rId }, { '_id': 0, 'students': 1 }).exec(function (err, studentsData) {
	    if (err) {
	      callback(err.message, null);
	    } else if (studentsData && studentsData.length > 0) {
	      //pushing multiple array ids in to one array
	      var studentDupArrayIds = [];
	      studentsData.forEach(function (data) {
	        studentDupArrayIds = _.unionBy(data.students, studentDupArrayIds);
	      });
	
	      if (studentDupArrayIds.length > 0) {
	        //seperating unique studentIds from studentDupIds array
	        var stuIdObjData = new Set(studentDupArrayIds.toString().split(","));
	        var studentArrayData = Array.from(stuIdObjData);
	
	        for (var i = 0; i < studentArrayData.length; i++) {
	          studentIds.push(mongoose.Types.ObjectId(studentArrayData[i]));
	        }
	        callback(null, studentIds);
	      }
	    } else {
	      callback(null, studentIds);
	    }
	  });
	}
	
	/**
	*  @Function name : fetchTopicQuestionnaire
	*  @Purpose : For fetching questionnaire data while assigning questionnaire to topic
	*  @Request Object : params : { rid: "room id", id: 'topic id' }
	*  @Response Object : Success - Questionnaire data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchTopicQuestionnaire(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.rid || !req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room id and topic id is valid or not
	        if (validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else if (validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid topic"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Query for finding the topic data based on topic id
	          var query = _topic2.default.findOne({
	            _id: recordId
	          }).exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Topic'
	              });
	            }
	            if (doc) {
	
	              //Query for finding the room data based on room id
	              var query = _room2.default.findOne({
	                _id: doc.roomId
	              }).exec(function (err, doc) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: 'Invalid Room'
	                  });
	                }
	                if (doc) {
	
	                  //Query for finding the questionnaire data based on corporate id
	                  var query = _questionnaire2.default.find({
	                    corporateId: doc.corporateId
	                  }).exec(function (err, doc) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: 'Questionnaires not found'
	                      });
	                    }
	                    if (doc) {
	                      // console.log("DATA===", doc);
	                      res.json({
	                        status: true,
	                        data: doc
	                      });
	                    }
	                  });
	                } else {
	                  res.json({
	                    status: false,
	                    error: 'Internal server error'
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: 'Internal server error'
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in fetch topic questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : assignQuestionnaire
	*  @Purpose : For assigning questionnaire to topic
	*  @Request Object : questionnaireData : { data: { questionnaire : { uid : "user id", topicId: "topic id", editId: "edit id", questionnaireId: 'questionnaire id', openFrom: 'open time', closeFrom: 'close time'} } }
	*  @Response Object : Success - Success Message, Topic data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function assignQuestionnaire(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.body.questionnaireData || !req.body.questionnaireData.data) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.questionnaireData.data.questionnaire;
	
	        //If user has a valid role
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Presenter || person.role == _adminUser.Roles.Moderator) {
	
	          //Verifying if topic id is there or not
	          if (obj.topicId && (obj.topicId != "" || obj.topicId != undefined) && mongoose.Types.ObjectId.isValid(obj.topicId)) {
	            var recordId = mongoose.Types.ObjectId(obj.topicId);
	            obj['modifiedBy'] = mongoose.Types.ObjectId(person._id);
	            obj['modifiedAt'] = moment().utc().toDate();
	            delete obj["topicId"];
	            delete obj["uid"];
	
	            //Query for finding the topic data
	            var data = _topic2.default.findOne({
	              _id: recordId
	            }).exec(function (err, topicDoc) {
	
	              //Verifying if topic data is thereor not
	              if (topicDoc) {
	                var roomValidateQuery = _room2.default.findOne({ _id: topicDoc.roomId }).populate('selPackage', 'packageValidity').populate('corporateId', 'businessType');
	
	                roomValidateQuery.exec(function (error, rData) {
	                  if (error) {
	                    res.json({
	                      status: false
	                    });
	                  } else {
	                    //Query for finding the questionnaire id in topic data
	                    _topic2.default.findOne({
	                      _id: recordId,
	                      "questionnaire.questionnaireId": obj.questionnaireId
	                    }).exec(function (err, questionaryTopic) {
	                      if (err) {
	                        res.json({
	                          status: false,
	                          error: 'Invalid Questionnaire'
	                        });
	                      } else if (questionaryTopic) {
	
	                        //If same questionnaire id is present then send error
	                        res.json({
	                          status: false,
	                          error: 'Already this questionnaire is assigned to topic'
	                        });
	                      } else {
	
	                        //Verifying if open and close time is there in req object or not
	                        if (obj.openFrom && obj.closeFrom) {
	
	                          //Query for finding the questionnaire data inside topic based on room id and check for time conflicts
	                          _topic2.default.findOne({
	                            roomId: topicDoc.roomId,
	                            "questionnaire.openFrom": { $lte: obj.closeFrom },
	                            "questionnaire.closeFrom": { $gte: obj.openFrom }
	                          }, {
	                            "questionnaire.$": 1
	                          }).exec(function (err, timedoc) {
	                            if (err) {
	                              res.json({
	                                status: false,
	                                error: err.message
	                              });
	                            } else if (timedoc) {
	
	                              //If time conflict is there send the error
	                              res.json({
	                                status: false,
	                                error: 409,
	                                openFrom: timedoc.questionnaire[0].openFrom,
	                                closeFrom: timedoc.questionnaire[0].closeFrom
	                              });
	                            } else {
	                              var startDate = new Date(obj.openFrom);
	                              var closeDate = new Date(obj.closeFrom);
	                              var roomExpiry = new Date(rData.expiryDate);
	                              var currentTime = new Date();
	                              var packageExpiry = new Date(rData.selPackage.packageValidity);
	                              //checking whether start time and end time validation
	                              if (startDate < currentTime) {
	                                res.json({
	                                  status: false,
	                                  error: "Start time should be greater then current time"
	                                });
	                              } else if (startDate > closeDate) {
	
	                                res.json({
	                                  status: false,
	                                  error: "End time should be greater then start time"
	                                });
	                              } else if (closeDate > roomExpiry || closeDate > packageExpiry || !rData.expiryDate) {
	                                if (rData.corporateId.businessType == 'Conference') {
	                                  res.json({
	                                    status: false,
	                                    error: 'This questionnaire End time can not exceed room expiry date'
	                                  });
	                                } else {
	                                  res.json({
	                                    status: false,
	                                    error: 'This questionnaire End time can not exceed course expiry date'
	                                  });
	                                }
	                              } else {
	                                //Query for pushing questionnaire object in topic 
	                                _topic2.default.update({
	                                  _id: recordId
	                                }, {
	                                  $push: {
	                                    "questionnaire": obj
	                                  }
	                                }, {
	                                  runValidators: true
	                                }, function (err, doc) {
	                                  // console.log("update err == ",err);
	                                  // console.log("update doc == ",doc);
	                                  if (err) {
	                                    res.json({
	                                      status: false,
	                                      error: err.message
	                                    });
	                                  } else {
	
	                                    //Query for finding updated topic data 
	                                    var query = _topic2.default.findOne({
	                                      _id: recordId
	                                    });
	                                    query.populate('questionnaire.questionnaireId', 'questionnaireName');
	                                    query.exec(function (err, topic) {
	                                      if (err) {
	                                        res.json({
	                                          status: false
	                                        });
	                                      } else {
	                                        res.json({
	                                          status: true,
	                                          data: topic,
	                                          message: "Updated successfully."
	                                        });
	
	                                        //createdBy: pranathi, disc: push notifications  for android students
	                                        if (topic && topic.topicEnable) {
	                                          var message = 'A New Questionnaire ' + topic.questionnaire[0].questionnaireId.questionnaireName + ' has been added to Topic ' + topic.topicName + ' at ' + moment(startDate).utc().format('DD-MM-YYYY hh:mm A') + '(UTC) to ' + moment(closeDate).utc().format('DD-MM-YYYY hh:mm A') + '(UTC).';
	                                          if (_config2.default.mail_timezone && _config2.default.mail_timezone.zone) {
	                                            message = 'A New Questionnaire ' + topic.questionnaire[0].questionnaireId.questionnaireName + ' has been added to Topic ' + topic.topicName + ' at ' + moment(startDate).tz(_config2.default.mail_timezone.zone).format('DD-MM-YYYY hh:mm A') + '(' + _config2.default.mail_timezone.code + ') to ' + moment(closeDate).tz(_config2.default.mail_timezone.zone).format('DD-MM-YYYY hh:mm A') + '(' + _config2.default.mail_timezone.code + ').';
	                                          }
	                                          roomStudentData(rData._id, function (err, studentIds) {
	                                            if (studentIds != null) {
	                                              _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                                                if (result && result.length > 0) {
	                                                  for (var i = 0; i <= result.length - 1; i++) {
	                                                    if (result[i].deviceType == 'ANDROID') {
	                                                      (0, _mobile.sendPushNotificationAndroid)("ASSIGN-QUESTIONNAIRE", message, result[i].deviceId, person._id, result[i]._id);
	                                                    }
	                                                  }
	                                                }
	                                              });
	                                            }
	                                          });
	                                        }
	                                        var schObj = {
	                                          roomId: topic.roomId,
	                                          subject: 'New Questionnaire Created',
	                                          body: 'A New Questionnaire has been successfully added under ' + '<b>' + topic.topicName + '</b>' + ' at ' + '<b>' + moment(doc.closeFrom).utc().format('DD-MM-YYYY hh:mm A') + '(UTC)</b>' + ' to ' + '<b>' + moment(doc.openFrom).utc().format('DD-MM-YYYY hh:mm A') + '(UTC)</b>' + ' by ' + '<b>' + person.firstname + '</b>' + '.',
	                                          createdBy: topic.createdBy,
	                                          createdBody: 'A New Questionnaire has been successfully added under ' + '<b>' + topic.topicName + '</b>' + ' at ' + '<b>' + moment(doc.closeFrom).utc().format('DD-MM-YYYY hh:mm A') + '(UTC)</b>' + ' to ' + '<b>' + moment(doc.openFrom).utc().format('DD-MM-YYYY hh:mm A') + '(UTC)</b>' + ' by ' + '<b>' + 'you' + '</b>' + '.'
	                                        };
	                                        if (_config2.default.mail_timezone && _config2.default.mail_timezone.zone) {
	                                          schObj["body"] = 'A New Questionnaire has been successfully added under ' + '<b>' + topic.topicName + '</b>' + ' at ' + '<b>' + moment(doc.closeFrom).tz(_config2.default.mail_timezone.zone).format('DD-MM-YYYY hh:mm A') + '(' + _config2.default.mail_timezone.code + ')</b>' + ' to ' + '<b>' + moment(doc.openFrom).tz(_config2.default.mail_timezone.zone).format('DD-MM-YYYY hh:mm A') + '(' + _config2.default.mail_timezone.code + ')</b>' + ' by ' + '<b>' + person.firstname + '</b>' + '.';
	                                          schObj["createdBody"] = 'A New Questionnaire has been successfully added under ' + '<b>' + topic.topicName + '</b>' + ' at ' + '<b>' + moment(doc.closeFrom).tz(_config2.default.mail_timezone.zone).format('DD-MM-YYYY hh:mm A') + '(' + _config2.default.mail_timezone.code + ')</b>' + ' to ' + '<b>' + moment(doc.openFrom).tz(_config2.default.mail_timezone.zone).format('DD-MM-YYYY hh:mm A') + '(' + _config2.default.mail_timezone.code + ')</b>' + ' by ' + '<b>' + 'you' + '</b>' + '.';
	                                        }
	                                        (0, _schedule3.sendScheduleEmail)(schObj);
	                                      }
	                                    });
	                                  }
	                                });
	                              }
	                            }
	                          });
	                        } else {
	
	                          //Query for pushing questionnaire object in topic  
	                          _topic2.default.update({
	                            _id: recordId
	                          }, {
	                            $push: {
	                              "questionnaire": obj
	                            }
	                          }, {
	                            runValidators: true
	                          }, function (err, doc) {
	                            // console.log("update err == ",err);
	                            // console.log("update doc == ",doc);
	                            if (err) {
	                              res.json({
	                                status: false,
	                                error: err.message
	                              });
	                            } else {
	
	                              //Query for finding updated topic data 
	                              var query = _topic2.default.findOne({
	                                _id: recordId
	                              });
	                              query.populate('questionnaire.questionnaireId', 'questionnaireName');
	                              query.exec(function (err, doc) {
	                                if (err) {
	                                  res.json({
	                                    status: false
	                                  });
	                                } else {
	                                  res.json({
	                                    status: true,
	                                    data: doc,
	                                    message: "Updated successfully."
	                                  });
	
	                                  //createdBy: pranathi, disc: push notifications for android students
	                                  if (doc && doc.topicEnable) {
	                                    var message = 'A New Questionnaire ' + doc.questionnaire[0].questionnaireId.questionnaireName + ' has been added to Topic ' + doc.topicName + '.';
	                                    roomStudentData(rData._id, function (err, studentIds) {
	                                      if (studentIds != null) {
	                                        _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                                          if (result && result.length > 0) {
	                                            for (var i = 0; i <= result.length - 1; i++) {
	                                              if (result[i].deviceType == 'ANDROID') {
	                                                (0, _mobile.sendPushNotificationAndroid)("ASSIGN-QUESTIONNAIRE", message, result[i].deviceId, person._id, result[i]._id);
	                                              }
	                                            }
	                                          }
	                                        });
	                                      }
	                                    });
	                                  }
	                                  var schObj = {
	                                    roomId: doc.roomId,
	                                    subject: 'New Questionnaire Created',
	                                    body: 'A New Questionnaire has been successfully added under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + person.firstname + '</b>' + '.',
	                                    createdBy: doc.createdBy,
	                                    createdBody: 'A New Questionnaire has been successfully added under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + 'you' + '</b>' + '.'
	                                  };
	                                  (0, _schedule3.sendScheduleEmail)(schObj);
	                                }
	                              });
	                            }
	                          });
	                        }
	                      }
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: "Invalid Topic"
	                });
	              }
	            });
	          }
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in assign questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : updateAssignedQuestionnaire
	*  @Purpose : For updating assigned questionnaire to topic
	*  @Request Object : questionnaireData : { data: { questionnaire : { uid : "user id", topicId: "topic id", editId: "edit id", questionnaireId: 'questionnaire id', openFrom: 'open time', closeFrom: 'close time'} } }
	*  @Response Object : Success - Success Message, Topic data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function updateAssignedQuestionnaire(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.body.questionnaireData || !req.body.questionnaireData.data) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.questionnaireData.data.questionnaire;
	
	        //If user has a valid role
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Presenter || person.role == _adminUser.Roles.Moderator) {
	
	          //Verifying if topic id is there or not
	          if (obj.topicId && (obj.topicId != "" || obj.topicId != undefined) && mongoose.Types.ObjectId.isValid(obj.topicId)) {
	            var recordId = mongoose.Types.ObjectId(obj.topicId);
	            obj['modifiedBy'] = mongoose.Types.ObjectId(person._id);
	            obj['modifiedAt'] = moment().utc().toDate();
	            delete obj["topicId"];
	            delete obj["uid"];
	
	            //Query for finding the topic data
	            var data = _topic2.default.findOne({
	              _id: recordId
	            }).exec(function (err, topicDoc) {
	
	              //Verifying if topic data is thereor not
	              if (topicDoc) {
	                //verify room is there or not 
	                var roomValidateQuery = _room2.default.findOne({ _id: topicDoc.roomId }).populate('selPackage', 'packageValidity');
	
	                roomValidateQuery.exec(function (error, rData) {
	                  if (error) {
	                    res.json({
	                      status: false
	                    });
	                  } else {
	                    //Verifying if open and close time is there in req object or not
	                    if (obj.openFrom && obj.closeFrom) {
	
	                      //Query for finding the questionnaire data inside topic based on room id and check for time conflicts
	                      _topic2.default.findOne({
	                        roomId: topicDoc.roomId,
	                        "questionnaire._id": { $ne: req.body.questionnaireData.data.questionnaire.editId },
	                        "questionnaire.openFrom": { $lte: obj.closeFrom },
	                        "questionnaire.closeFrom": { $gte: obj.openFrom }
	                      }, {
	                        "questionnaire.$": 1
	                      }).exec(function (err, timedoc) {
	                        if (err) {
	                          res.json({
	                            status: false,
	                            error: err.message
	                          });
	                        } else if (timedoc) {
	
	                          //If time conflict is there send the error
	                          res.json({
	                            status: false,
	                            error: 409,
	                            openFrom: timedoc.questionnaire[0].openFrom,
	                            closeFrom: timedoc.questionnaire[0].closeFrom
	                          });
	                        } else {
	                          //check date conditions
	                          var startDate = new Date(obj.openFrom);
	                          var closeDate = new Date(obj.closeFrom);
	                          var roomExpiry = new Date(rData.expiryDate);
	                          var currentTime = new Date();
	                          var packageExpiry = new Date(rData.selPackage.packageValidity);
	                          //checking whether start time and end time validation
	                          if (startDate < currentTime) {
	                            res.json({
	                              status: false,
	                              error: "Start time should be greater then current time"
	                            });
	                          } else if (startDate > closeDate) {
	
	                            res.json({
	                              status: false,
	                              error: "End time should be greater then start time"
	                            });
	                          } else if (closeDate > roomExpiry || closeDate > packageExpiry || !rData.expiryDate) {
	                            res.json({
	                              status: false,
	                              error: 'This questionnaire End time can not exceed room expiry date'
	                            });
	                          } else {
	                            //Query for updating questionnaire object in topic 
	                            _topic2.default.update({
	                              _id: recordId,
	                              "questionnaire.questionnaireId": obj.questionnaireId
	                            }, {
	                              $set: {
	                                "questionnaire.$.openFrom": obj.openFrom,
	                                "questionnaire.$.closeFrom": obj.closeFrom,
	                                "questionnaire.$.showResult": obj.showResult
	                              },
	                              modifiedAt: moment().utc().toDate(),
	                              modifiedBy: mongoose.Types.ObjectId(obj.uid)
	                            }, {
	                              runValidators: true
	                            }, function (err, doc) {
	                              // console.log("update err == ",err);
	                              console.log("update doc == ", doc);
	                              if (err) {
	                                res.json({
	                                  status: false,
	                                  error: err.message
	                                });
	                              } else {
	
	                                //Query for finding updated topic data 
	                                var query = _topic2.default.findOne({
	                                  _id: recordId
	                                });
	                                query.populate('questionnaire.questionnaireId', 'questionnaireName');
	                                query.exec(function (err, doc) {
	                                  if (err) {
	                                    res.json({
	                                      status: false
	                                    });
	                                  } else {
	                                    res.json({
	                                      status: true,
	                                      data: doc,
	                                      message: "Updated successfully."
	                                    });
	
	                                    //createdBy: pranathi, disc: push notifications for android students
	                                    if (doc && doc.topicEnable) {
	                                      var message = 'The Questionnaire ' + doc.questionnaire[0].questionnaireId.questionnaireName + ' has been updated to Topic ' + doc.topicName + ' at ' + moment(startDate).format('DD-MM-YYYY hh:mm A') + ' to ' + moment(closeDate).format('DD-MM-YYYY hh:mm A') + '.';
	                                      roomStudentData(topicDoc.roomId, function (err, studentIds) {
	                                        if (studentIds != null) {
	                                          _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                                            if (result && result.length > 0) {
	                                              for (var i = 0; i <= result.length - 1; i++) {
	                                                if (result[i].deviceType == 'ANDROID') {
	                                                  (0, _mobile.sendPushNotificationAndroid)('UPDATE-QUESTIONNAIRE', message, result[i].deviceId, person._id, result[i]._id);
	                                                }
	                                              }
	                                            }
	                                          });
	                                        }
	                                      });
	                                    }
	                                    var schObj = {
	                                      roomId: doc.roomId,
	                                      subject: 'The Questionnaire Updated',
	                                      body: 'The Questionnaire has been successfully updated under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + person.firstname + '</b>' + ' at ' + '<b>' + moment(doc.closeFrom).format('DD-MM-YYYY hh:mm A') + '</b>' + ' to ' + '<b>' + moment(doc.openFrom).format('DD-MM-YYYY hh:mm A') + '</b>' + '.',
	                                      createdBy: doc.createdBy,
	                                      createdBody: 'The Questionnaire has been successfully updated under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + ' you ' + '</b>' + ' at ' + '<b>' + moment(doc.closeFrom).format('DD-MM-YYYY hh:mm A') + '</b>' + ' to ' + '<b>' + moment(doc.openFrom).format('DD-MM-YYYY hh:mm A') + '</b>' + '.'
	                                    };
	                                    (0, _schedule3.sendScheduleEmail)(schObj);
	                                  }
	                                });
	                              }
	                            });
	                          }
	                        }
	                      });
	                    } else {
	
	                      //Query for updating questionnaire object in topic 
	                      _topic2.default.update({
	                        _id: recordId,
	                        "questionnaire.questionnaireId": obj.questionnaireId
	                      }, {
	                        $set: {
	                          "questionnaire.$.openFrom": '',
	                          "questionnaire.$.closeFrom": '',
	                          "questionnaire.$.showResult": obj.showResult
	                        },
	                        modifiedAt: moment().utc().toDate(),
	                        modifiedBy: mongoose.Types.ObjectId(obj.uid)
	                      }, {
	                        runValidators: true
	                      }, function (err, doc) {
	                        // console.log("update err == ",err);
	                        // console.log("update doc == ",doc);
	                        if (err) {
	                          res.json({
	                            status: false,
	                            error: err.message
	                          });
	                        } else {
	
	                          //Query for finding updated topic data 
	                          var query = _topic2.default.findOne({
	                            _id: recordId
	                          });
	                          query.populate('questionnaire.questionnaireId', 'questionnaireName');
	                          query.exec(function (err, doc) {
	                            if (err) {
	                              res.json({
	                                status: false
	                              });
	                            } else {
	                              res.json({
	                                status: true,
	                                data: doc,
	                                message: "Updated successfully."
	                              });
	
	                              //createdBy: pranathi, disc: push notifications for android students
	                              if (doc && doc.topicEnable) {
	                                var message = 'The Questionnaire ' + doc.questionnaire[0].questionnaireId.questionnaireName + ' has been updated to Topic ' + doc.topicName + '.';
	                                roomStudentData(topicDoc.roomId, function (err, studentIds) {
	                                  if (studentIds != null) {
	                                    _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                                      if (result && result.length > 0) {
	                                        for (var i = 0; i <= result.length - 1; i++) {
	                                          if (result[i].deviceType == 'ANDROID') {
	                                            (0, _mobile.sendPushNotificationAndroid)("UPDATE-QUESTIONNAIRE", message, result[i].deviceId, person._id, result[i]._id);
	                                          }
	                                        }
	                                      }
	                                    });
	                                  }
	                                });
	                              }
	
	                              var schObj = {
	                                roomId: doc.roomId,
	                                subject: 'The Questionnaire Updated.',
	                                body: 'The Questionnaire has been successfully updated under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + person.firstname + '</b>' + '.',
	                                createdBy: doc.createdBy,
	                                createdBody: 'The Questionnaire has been successfully updated under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + 'you' + '</b>' + '.'
	                              };
	                              (0, _schedule3.sendScheduleEmail)(schObj);
	                            }
	                          });
	                        }
	                      });
	                    }
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: "Invalid Topic"
	                });
	              }
	            });
	          }
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in update assigned questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : unassignQuestionnaire
	*  @Purpose : For unassigning questionnaire from topic
	*  @Request Object : params : { qid: "questionnaire id", tid: 'topic id' }
	*  @Response Object : Success - Success Message, Topic data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function unassignQuestionnaire(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.params.qid && req.params.tid) {
	
	        //Validating if questionnaire and topic id is valid or not
	        if (!req.params.qid || validator.isEmpty(req.params.qid) || !mongoose.Types.ObjectId.isValid(req.params.qid)) {
	          // console.log("Invalid Question");
	          res.json({
	            status: false,
	            error: "Invalid Questionnaire."
	          });
	        } else if (!req.params.tid || validator.isEmpty(req.params.tid) || !mongoose.Types.ObjectId.isValid(req.params.tid)) {
	          // console.log("Invalid topicId");
	          res.json({
	            status: false,
	            error: "Invalid Topic id."
	          });
	        } else {
	          var questionnaireId = req.params.qid;
	
	          //Query for finding the topic data
	          var query = _topic2.default.findOne({
	            _id: mongoose.Types.ObjectId(req.params.tid),
	            'questionnaire.questionnaireId': questionnaireId
	          }, {
	            'questionnaire.$': 1
	          });
	          query.exec(function (err, docs) {
	            if (err) {
	              // console.log("Error", error.message);
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (docs) {
	
	              //Checking whether there is any dependency of results 
	
	              _result2.default.findOne({
	                topicId: mongoose.Types.ObjectId(req.params.tid),
	                questionnaireId: questionnaireId
	              }).exec(function (err, resultsData) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else if (resultsData) {
	                  res.json({
	                    status: false,
	                    error: 'Are you sure you want to unassign questionnaire as there are results based on this questionnaire?',
	                    httpStatusCode: 409,
	                    questionnaireId: questionnaireId
	                  });
	                } else {
	
	                  // Query for unassigning questionnaire from topic
	                  _topic2.default.update({
	                    _id: mongoose.Types.ObjectId(req.params.tid)
	                  }, {
	                    $pull: {
	                      "questionnaire": {
	                        "questionnaireId": questionnaireId
	                      }
	                    }
	                  }, function (error, result) {
	                    if (error) {
	                      // console.log("Error", error.message);
	                      res.json({
	                        status: false,
	                        error: error.message,
	                        message: "Questionnaire not present in current topic."
	                      });
	                    } else if (result) {
	
	                      //Query for finding the updated topic data
	                      var query = _topic2.default.findOne({ _id: mongoose.Types.ObjectId(req.params.tid) }).populate('questionnaire.questionnaireId', 'questionnaireName').exec(function (e, doc) {
	                        if (err) {
	                          // console.log("Error", err.message);
	                          res.json({
	                            status: false,
	                            error: e.message,
	                            message: "Error while retriving topic data."
	                          });
	                        } else if (doc) {
	                          res.json({
	                            status: true,
	                            data: doc,
	                            message: "Questionnaire unassigned successfully."
	                          });
	
	                          //createdBy: pranathi, disc: push notifications for android students
	                          if (doc && doc.topicEnable) {
	                            var message = 'The Questionnaire has been deleted from Topic ' + doc.topicName + '.';
	                            roomStudentData(doc.roomId, function (err, studentIds) {
	                              if (studentIds != null) {
	                                _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                                  if (result && result.length > 0) {
	                                    for (var i = 0; i <= result.length - 1; i++) {
	                                      if (result[i].deviceType == 'ANDROID') {
	                                        (0, _mobile.sendPushNotificationAndroid)("DELETE-QUESTIONNAIRE", message, result[i].deviceId, person._id, result[i]._id);
	                                      }
	                                    }
	                                  }
	                                });
	                              }
	                            });
	                          }
	
	                          var schObj = {
	                            roomId: doc.roomId,
	                            subject: 'The Questionnaire Deleted.',
	                            body: 'The Questionnaire has been successfully deleted under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + person.firstname + '</b>' + '.',
	                            createdBy: doc.createdBy,
	                            createdBody: 'The Questionnaire has been successfully deleted under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + 'you' + '</b>' + '.'
	                          };
	                          (0, _schedule3.sendScheduleEmail)(schObj);
	                        } else {
	                          res.json({
	                            status: false,
	                            error: 'Invalid Topic'
	                          });
	                        }
	                      });
	                    } else {
	                      res.json({
	                        status: false,
	                        error: 'Topic Not Updated'
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: 'Topic not found.'
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("error in unassign questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : confirmedUnassignQuestionnaireFromTopic
	*  @Purpose : Took a confirmation from user for unassigning questionnaire from topic
	*  @Request Object : params : { qid: "questionnaire id", tid: 'topic id' }
	*  @Response Object : Success - Success Message, Topic data, Failure - Error message
	*  @Author : Prateek
	*/
	
	function confirmedUnassignQuestionnaireFromTopic(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.params.qid && req.params.tid) {
	
	        //Validating if questionnaire and topic id is valid or not
	        if (!req.params.qid || validator.isEmpty(req.params.qid) || !mongoose.Types.ObjectId.isValid(req.params.qid)) {
	          // console.log("Invalid Question");
	          res.json({
	            status: false,
	            error: "Invalid Questionnaire."
	          });
	        } else if (!req.params.tid || validator.isEmpty(req.params.tid) || !mongoose.Types.ObjectId.isValid(req.params.tid)) {
	          // console.log("Invalid topicId");
	          res.json({
	            status: false,
	            error: "Invalid Topic id."
	          });
	        } else {
	          var questionnaireId = req.params.qid;
	
	          //Removing all the results dependent on questionnaire and topics
	          _result2.default.remove({
	            topicId: mongoose.Types.ObjectId(req.params.tid),
	            questionnaireId: questionnaireId
	          }).exec(function (err, removed) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (removed) {
	
	              // Query for unassigning questionnaire from topic
	              _topic2.default.update({
	                _id: mongoose.Types.ObjectId(req.params.tid)
	              }, {
	                $pull: {
	                  "questionnaire": {
	                    "questionnaireId": questionnaireId
	                  }
	                }
	              }, function (error, result) {
	                if (error) {
	                  // console.log("Error", error.message);
	                  res.json({
	                    status: false,
	                    error: error.message,
	                    message: "Questionnaire not present in current topic."
	                  });
	                } else if (result) {
	
	                  //Query for finding the updated topic data
	                  var query = _topic2.default.findOne({ _id: mongoose.Types.ObjectId(req.params.tid) }).populate('questionnaire.questionnaireId', 'questionnaireName').exec(function (e, doc) {
	                    if (err) {
	                      // console.log("Error", err.message);
	                      res.json({
	                        status: false,
	                        error: e.message,
	                        message: "Error while retriving topic data."
	                      });
	                    } else if (doc) {
	                      res.json({
	                        status: true,
	                        data: doc,
	                        message: "Questionnaire unassigned successfully."
	                      });
	
	                      //createdBy: pranathi, disc: push notifications for android students
	                      if (doc && doc.topicEnable) {
	                        var message = 'The Questionnaire ' + doc.questionnaire[0].questionnaireId.questionnaireName + ' has been deleted from Topic ' + doc.topicName + '.';
	                        roomStudentData(doc.roomId, function (err, studentIds) {
	                          if (studentIds != null) {
	                            _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                              if (result && result.length > 0) {
	                                for (var i = 0; i <= result.length - 1; i++) {
	                                  if (result[i].deviceType == 'ANDROID') {
	                                    (0, _mobile.sendPushNotificationAndroid)("DELETE-QUESTIONNAIRE", message, result[i].deviceId, person._id, result[i]._id);
	                                  }
	                                }
	                              }
	                            });
	                          }
	                        });
	                      }
	
	                      var schObj = {
	                        roomId: doc.roomId,
	                        subject: 'The Questionnaire Deleted.',
	                        body: 'The Questionnaire has been successfully deleted under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + person.firstname + '</b>' + '.',
	                        createdBy: doc.createdBy,
	                        createdBody: 'The Questionnaire has been successfully deleted under ' + '<b>' + doc.topicName + '</b>' + ' by ' + '<b>' + 'you' + '</b>' + '.'
	                      };
	                      (0, _schedule3.sendScheduleEmail)(schObj);
	                    } else {
	                      res.json({
	                        status: false,
	                        error: 'Invalid Topic'
	                      });
	                    }
	                  });
	                } else {
	                  res.json({
	                    status: false,
	                    error: 'Topic Not Updated'
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: 'Result not removed'
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("error in unassign questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	* @Function Name: "listRoomFeedback",
	* @Purpose: "Returns feedback list submitted by users room/course wise",
	* @Request Object: params : { uid, pagination data},
	* @Response Object: Success- list Data, Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function listRoomFeedback(req, res) {
	  //console.log("RoomfeedbackList Req --", req.query);
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.query.itemsPerPage && req.query.currentPage && req.query.currentPage && req.query.roomId && mongoose.Types.ObjectId.isValid(req.query.roomId)) {
	        var params = req.query;
	
	        //check the user role corresponding to allowed roles
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.CRMadmin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Moderator) {
	
	          //based on roomId find the list of submitted feedback
	          _feedback2.default.find({ 'roomId': params.roomId }).limit(Number(params.itemsPerPage)).select(' roomId userId feedbacks.videoQuality feedbacks.audioQuality feedbacks.contentSharing feedbacks.rating feedbacks.comment createdOn').populate('roomId', 'roomName -_id').populate('userId', 'firstname lastname -_id').skip(Number(params.itemsPerPage) * Number(params.currentPage - 1)).sort({
	            createdOn: -1
	          }).exec(function (error, result) {
	            //console.log("error----", error); 
	
	            //count the number of feedbacks under a room/course
	            _feedback2.default.count({ roomId: mongoose.Types.ObjectId(params.roomId) }, function (err, count) {
	              if (err) {
	                res.json({ status: false, error: err });
	              } else {
	                //console.log("Count---->", count);
	
	                //Successfull response with data
	                res.json({ status: true, data: result, count: count });
	              }
	            });
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      //console.log("e in listPackage === ",e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "fetchRoomFeedback",
	* @Purpose: "Returns feedbacks details based on feedback Id",
	* @Request Object: obj : { uid, feedback Id},
	* @Response Object: Success- Data, Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function fetchRoomFeedback(req, res) {
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
	
	        //check the user role corresponding to allowed roles
	        var recordId = mongoose.Types.ObjectId(req.params.id);
	        var query = _feedback2.default.findOne({ _id: recordId }).populate('roomId', 'roomName _id').populate('userId', 'firstname lastname -_id').sort({ createdOn: -1 })
	        //query.populate('feedbacks')          
	        .exec(function (err, doc) {
	          if (err) {
	            res.json({ status: false, error: err });
	          } else if (doc) {
	            // let key = 'conf/' + doc.roomKey;
	            // doc['roomKey'] = serverConfig.confLink.concat(key);
	            res.json({ status: true, data: doc });
	          } else {
	            res.json({ status: false, error: "Invalid Feedback Data." });
	          }
	        });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("error in fetchRoomFeedback ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "saveFeedback",
	* @Purpose: "Saves feedback submitted by user under a room/course",
	* @Request Object: feedbackObj : { userID, roomkey, feedbackData },
	* @Response Object: Success- Message, Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function saveFeedback(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.feedbackData && req.body.feedbackData.data) {
	        var feedbackObj = req.body.feedbackData.data;
	
	        //check for room key in room collection and retrieve room Id          
	        _room2.default.findOne({
	          roomKey: (0, _slashesActions.addSlash)(feedbackObj.roomKey)
	        }).exec(function (roomError, room) {
	          if (roomError) {
	            res.json({
	              status: false,
	              err: roomError.message
	            });
	          } else if (room) {
	            feedbackObj["roomId"] = mongoose.Types.ObjectId(room._id);
	            feedbackObj["createdBy"] = mongoose.Types.ObjectId(person._id);
	            feedbackObj["userId"] = mongoose.Types.ObjectId(person._id);
	
	            //changed by - Najib, to show current date added below line of code 
	            feedbackObj["createdOn"] = moment().utc().toDate();
	
	            var feedbackQuestions = feedbackObj['feedbacks'];
	
	            _.forIn(feedbackQuestions, function (value, key) {
	              var dotRegx = /[.]/g;
	              var dollarRegX = /^[$]/;
	              var dotIndex = key.search(dotRegx);
	              var dollarIndex = key.search(dollarRegX);
	              if (dotIndex != -1) {
	                var replacedQuestion = key.replace(dotRegx, 'Unicode46');
	                if (dollarIndex == 0) {
	                  replacedQuestion = replacedQuestion.replace('$', 'Unicode36');
	                }
	                delete feedbackObj['feedbacks'][key];
	                feedbackObj['feedbacks'][replacedQuestion] = value;
	              } else if (dollarIndex == 0) {
	                var replacedQuestion = key.replace('$', 'Unicode36');
	                delete feedbackObj['feedbacks'][key];
	                feedbackObj['feedbacks'][replacedQuestion] = value;
	              }
	            });
	
	            var objFeedback = new _feedback2.default(feedbackObj);
	            _feedback2.default.create([objFeedback], function (error, saved) {
	
	              if (!error) {
	
	                //Successful response 
	                res.json({
	                  status: true,
	                  message: "Feedback successfully submitted"
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: "Internal Server Error"
	                });
	              }
	            });
	          } else {
	
	            //error response if room key does not exists
	            res.json({ status: false, message: "Invalid Room Key" });
	          }
	        });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("error in saveFeedback", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	*  @Function name : listResultTopic
	*  @Purpose : For fetching complete result data
	*  @Request Object : query : { roomId, topicId, questionnaireId, page, items }
	*  @Response Object : Success - Result data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listResultTopic(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page || !req.query.roomId || !req.query.topicId || !req.query.questionnaireId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var listresult = req.query;
	
	        //Validating if room id, topic id and questionnaire id is valid or not
	        if (validator.isEmpty(listresult.roomId) || !mongoose.Types.ObjectId.isValid(listresult.roomId)) {
	          res.json({
	            status: false,
	            error: "InValid room."
	          });
	        } else if (validator.isEmpty(listresult.topicId) || !mongoose.Types.ObjectId.isValid(listresult.topicId)) {
	          res.json({
	            status: false,
	            error: "InValid topic."
	          });
	        } else if (validator.isEmpty(listresult.questionnaireId) || !mongoose.Types.ObjectId.isValid(listresult.questionnaireId)) {
	          res.json({
	            status: false,
	            error: "InValid questionnaire."
	          });
	        } else {
	
	          //If user has a valid role
	          if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	            //Query for fetching result data based on room, topic and questionnaire
	            //and skip the items according to itemsPerPage on previous page
	            var query = _result2.default.find({
	              roomId: listresult.roomId,
	              topicId: listresult.topicId,
	              questionnaireId: listresult.questionnaireId
	            }).limit(Number(listresult.items)).select('roomId topicId questionnaireId submittedBy questionnairePercentage grade').skip(Number(listresult.items) * (Number(listresult.page) - 1)).sort({ createdAt: -1 }).populate('questionnaireId submittedBy roomId', 'questionnaireName questions firstname lastname roomName ').exec(function (err, result) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else {
	
	                //Query for counting result data based on room, topic, questionnaire and submittedBy
	                _result2.default.count({
	                  roomId: listresult.roomId,
	                  topicId: listresult.topicId,
	                  questionnaireId: listresult.questionnaireId
	                }).exec(function (error, count) {
	                  //console.log('count',count)
	                  res.json({
	                    status: true,
	                    data: result,
	                    count: count
	                  });
	                });
	              }
	            });
	          } else if (person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Presenter) {
	
	            //Query for fetching student data based on room id and instructor id
	            _students2.default.findOne({
	              roomId: listresult.roomId,
	              instId: person._id
	            }).select('students -_id').exec(function (err, student) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: "Invalid student id."
	                });
	              } else {
	
	                //Verifying if student data is there or not
	                if (student == null || !student) {
	
	                  //Query for fetching result data based on room, topic, questionnaire and submittedBy
	                  //and skip the items according to itemsPerPage on previous page
	                  var query = _result2.default.find({
	                    roomId: listresult.roomId,
	                    topicId: listresult.topicId,
	                    questionnaireId: listresult.questionnaireId,
	                    submittedBy: person._id
	                  }).limit(Number(listresult.items)).select('roomId topicId questionnaireId submittedBy grade questionnairePercentage').skip(Number(listresult.items) * (Number(listresult.page) - 1)).sort({ createdAt: -1 }).populate('questionnaireId submittedBy roomId', 'questionnaireName questions firstname lastname roomName ').exec(function (err, result) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	                    } else {
	
	                      //Query for counting result data based on room, topic, questionnaire and submittedBy
	                      _result2.default.count({
	                        roomId: listresult.roomId,
	                        topicId: listresult.topicId,
	                        questionnaireId: listresult.questionnaireId,
	                        submittedBy: person._id
	                      }).exec(function (error, count) {
	                        //console.log('count',count)
	                        res.json({
	                          status: true,
	                          data: result,
	                          count: count
	                        });
	                      });
	                    }
	                  });
	                } else {
	
	                  //Query for fetching result data based on room, topic, questionnaire and submittedBy
	                  //and skip the items according to itemsPerPage on previous page
	                  var query = _result2.default.find({
	                    roomId: listresult.roomId,
	                    topicId: listresult.topicId,
	                    questionnaireId: listresult.questionnaireId,
	                    $or: [{
	                      submittedBy: person._id
	                    }, {
	                      submittedBy: {
	                        $in: student.students
	                      }
	                    }]
	                  }).limit(Number(listresult.items)).select('roomId topicId questionnaireId submittedBy grade questionnairePercentage').skip(Number(listresult.items) * (Number(listresult.page) - 1)).sort({ createdAt: -1 }).populate('questionnaireId submittedBy roomId', 'questionnaireName questions firstname lastname roomName ').exec(function (err, result) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	                    } else {
	
	                      //Query for counting result data based on room, topic, questionnaire and submittedBy
	                      _result2.default.count({
	                        roomId: listresult.roomId,
	                        topicId: listresult.topicId,
	                        questionnaireId: listresult.questionnaireId,
	                        $or: [{
	                          submittedBy: person._id
	                        }, {
	                          submittedBy: {
	                            $in: student.students
	                          }
	                        }]
	                      }).exec(function (error, count) {
	                        //console.log('count',count)
	                        res.json({
	                          status: true,
	                          data: result,
	                          count: count
	                        });
	                      });
	                    }
	                  });
	                }
	              }
	            });
	          } else {
	            res.json({
	              status: false,
	              error: "Access denied."
	            });
	          }
	        }
	      }
	    } catch (e) {
	      console.log("error in list result topic", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchResult
	*  @Purpose : For fetching particular result data
	*  @Request Object : params : { id: "result id" }
	*  @Response Object : Success - Result data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchResult(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.rid) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        // console.log('params', req.params);
	        //Validating if result id is valid or not
	        if (validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid result"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.rid);
	
	          //Query for fetching result data based on result id
	          var query = _result2.default.findOne({
	            _id: recordId
	          }).populate('questionnaireId submittedBy roomId', 'questionnaireName  questions firstname lastname profile.profileImage roomName ').select('questionnaireId submittedBy roomId totalMarks obtainedMarks grade result questionnairePercentage wrongAns correctAns').exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (doc) {
	              res.json({
	                status: true,
	                data: doc
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid Result."
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in fetch result", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : getLocationList
	@Purpose : "To fetch all the locations created by requested user"
	@Request Object : data:{uid}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function getLocationList(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	          var bussinessID = null;
	          if (person.profile.companyid && person.profile.companyid._id) {
	            bussinessID = person.profile.companyid._id;
	          }
	
	          //Firing a query to fetch all the location documents present in location collection created by the requested user.
	          var innerQuery = _location2.default.find({ corporateId: bussinessID });
	          innerQuery.select('_id locationName updatedAt').exec(function (err, locationData) {
	            if (err) {
	              res.json({
	                status: false,
	                err: err.message
	              });
	            } else {
	              res.json({
	                status: true,
	                data: locationData
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in getLocationList', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : getRoomInstructorStudentsList
	@Purpose : "To fetch all the students who are present under a particular room and instructor"
	@Request Object : data:{uid,roomId,instId}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function getRoomInstructorStudentsList(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.query.roomId && mongoose.Types.ObjectId.isValid(req.query.roomId) && req.query.instructorId && mongoose.Types.ObjectId.isValid(req.query.instructorId)) {
	        var obj = req.query;
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          //Firing a query on student collection to fetch all who are present under a particular instructor in a room
	          var innerQuery = _students2.default.findOne({ roomId: obj.roomId, instId: obj.instructorId });
	          innerQuery.populate('students ', '_id firstname lastname email role', { userStatus: 'Active' }).exec(function (err, studentsData) {
	            if (err) {
	              res.json({ status: false, err: err });
	            } else if (studentsData) {
	              res.json({ status: true, data: studentsData, instructorId: obj.instructorId });
	            } else {
	              res.json({ status: false, err: "Invalid request" });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in getRoomInstructorStudentsList', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : saveRoomLocation
	@Purpose : "To save or update a particular location in room's collection under a particular roomId"
	@Request Object : data:{uid,roomId,locationObj}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function saveRoomLocation(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.data && req.body.data.roomId && mongoose.Types.ObjectId.isValid(req.body.data.roomId)) {
	        var obj = req.body.data;
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          //Checking for room document presence in rooms collection
	          var roomQuery = _room2.default.findOne({ _id: obj.roomId });
	          roomQuery.exec(function (err, roomData) {
	            if (err) {
	              res.json({
	                status: false,
	                err: err.message
	              });
	            } else if (!roomData) {
	              res.json({
	                status: false,
	                err: err,
	                message: "Room Not Found"
	              });
	            } else if (roomData && roomData.locations && roomData.locations.length == 0) {
	
	              //Updating the room collection document with locationId
	              var innerQuery = _room2.default.update({ _id: obj.roomId }, { $push: { locations: obj.locationObj } });
	              innerQuery.exec(function (err, updatedData) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    err: err.message
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    message: 'Saved successfully',
	                    roomId: roomData._id
	                  });
	                }
	              });
	            } else if (roomData && roomData.locations && roomData.locations.length > 0) {
	
	              //Checking whether the location Id exists in room collection
	              var checkLocationQuery = _room2.default.findOne({ _id: obj.roomId, "locations.locationId": obj.locationObj.locationId });
	              checkLocationQuery.exec(function (err, result) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    err: err.message
	                  });
	                } else if (result) {
	                  var innerquery = _room2.default.update({ _id: obj.roomId, "locations.locationId": obj.locationObj.locationId }, { $push: { "locations.$.locationParticipants": { $each: obj.locationObj.locationParticipants } } });
	                  innerquery.exec(function (err, result) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        err: err.message
	                      });
	                    } else {
	                      res.json({
	                        status: true,
	                        message: 'Saved successfully',
	                        roomId: roomData._id
	                      });
	                    }
	                  });
	                } else if (result == null) {
	
	                  //If no document matches with location Id then push into room collecton document
	                  var innerQuery = _room2.default.update({ _id: obj.roomId }, { $push: { locations: obj.locationObj } });
	                  innerQuery.exec(function (err, updatedData) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        err: err.message
	                      });
	                    } else {
	                      res.json({
	                        status: true,
	                        message: 'Saved successfully',
	                        roomId: roomData._id
	                      });
	                    }
	                  });
	                }
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in saveRoomLocation', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : getRoomLocations
	@Purpose : "To fetch all the location which are present in room collection for a particular room document"
	@Request Object : data:{uid,roomId}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function getRoomLocations(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.query.roomId && mongoose.Types.ObjectId.isValid(req.query.roomId)) {
	        var roomId = req.query.roomId;
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          //Checking for room collection document so as to send as response
	          var roomQuery = _room2.default.findOne({ _id: roomId });
	          roomQuery.populate('locations.locationParticipants', '_id email firstname lastname role profile.profileImage').populate('locations.locationId', '_id createdBy createdOn description locationName updatedAt').populate('users', 'firstname lastname email profile.profileImage role', { userStatus: 'Active' }).select('locations users').exec(function (err, data) {
	            if (err) {
	              res.json({
	                status: false,
	                err: err.message
	              });
	            } else {
	              res.json({
	                status: true,
	                data: data
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in getRoomLocations', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : deleteRoomLocation
	@Purpose : "To delete a particular location from room collection  based on the  location Id"
	@Request Object : params : { rid: "room id", id: 'room location id' }
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function deleteRoomLocation(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.query.roomId && mongoose.Types.ObjectId.isValid(req.query.roomId) && req.query.roomLocationId && mongoose.Types.ObjectId.isValid(req.query.roomLocationId)) {
	        var roomId = req.query.roomId;
	        var roomLocationId = req.query.roomLocationId;
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          //Checking whether the document for the particular room Id exists in room collection
	          var roomQuery = _room2.default.findOne({
	            _id: roomId
	          }, function (err, roomDoc) {
	            if (err) {
	              res.json({
	                status: false,
	                err: err.message
	              });
	            } else if (roomDoc) {
	
	              //deleteing location from room document based on location Id.
	              var roomLocationQuery = _room2.default.update({
	                _id: roomId
	              }, {
	                $pull: {
	                  locations: {
	                    locationId: mongoose.Types.ObjectId(roomLocationId)
	                  }
	                }
	              });
	              roomLocationQuery.exec(function (err, deleted) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    err: err.message
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    message: 'Deleted successfully.'
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: true,
	                message: 'No Room Found'
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in deleteRoomLocation', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : deleteRoomLocationParticipant
	@Purpose : "To delete a particular participant from room location from room collection  based on the location Id and  participant Id"
	@Request Object : params : { rid: "room id", lid: 'room location id', id: 'room location participant id' }
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function deleteRoomLocationParticipant(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.query && req.query.roomId && mongoose.Types.ObjectId.isValid(req.query.roomId) && req.query.roomLocationId && mongoose.Types.ObjectId.isValid(req.query.roomLocationId)) {
	        if (req.query.roomParticipantId && mongoose.Types.ObjectId.isValid(req.query.roomParticipantId)) {
	          var obj = req.query;
	
	          //Checking for permissions
	          if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	            //Removing the paticipant from room location based on locationId and participant Id
	            _room2.default.update({
	              _id: obj.roomId,
	              "locations.locationId": obj.roomLocationId
	            }, {
	              $pull: {
	                "locations.$.locationParticipants": mongoose.Types.ObjectId(obj.roomParticipantId)
	              }
	            }).exec(function (err, deleted) {
	              if (err) {
	                res.json({
	                  status: false,
	                  err: err.message
	                });
	              } else {
	                res.json({
	                  status: true,
	                  message: 'Removed successfully.'
	                });
	              }
	            });
	          } else {
	            res.json({
	              status: false,
	              error: "Access denied."
	            });
	          }
	        } else {
	          res.json({
	            status: false,
	            error: "Invalid request."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in deleteRoomLocationParticipant', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : getQuestionnaireDataList
	@Purpose : "To fetch questionnaire data for assigning in room configuration"
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function getQuestionnaireDataList(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Moderator) {
	
	          //fetching questionnaire data based on coporate Id
	          var questionnaireQuery = _questionnaire2.default.find({ corporateId: bussinessID }).select('_id questionnaireName questions');
	          questionnaireQuery.exec(function (err, questionnaireDoc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err
	              });
	            } else {
	              res.json({
	                status: true,
	                data: questionnaireDoc
	              });
	            }
	          });
	        } else if (person.role == _adminUser.Roles.Superadmin) {
	
	          //fetching questionnaire data 
	          var questionnaireQuery = _questionnaire2.default.find().select('_id questionnaireName');
	          questionnaireQuery.exec(function (err, questionnaireDoc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err
	              });
	            } else {
	              res.json({
	                status: true,
	                data: questionnaireDoc
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in deleteRoomLocationParticipant', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : saveRoomFeedbackType
	@Purpose : "To save room configuration feedback type in room collections"
	@Request Object : data:{roomId, feedbackValue, customizeQuestionnaireId(for customize type feedback value)}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function saveRoomFeedbackType(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.data && req.params.roomId && mongoose.Types.ObjectId.isValid(req.params.roomId)) {
	        var obj = req.body.data;
	        var roomId = req.params.roomId;
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Moderator) {
	
	          //Checking whether the room is present or not 
	          var selector = {
	            _id: roomId
	          };
	          _room2.default.findOne(selector, function (err, roomDoc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (roomDoc) {
	              var roomConfiguration = {};
	              roomConfiguration["feedback"] = {};
	              roomConfiguration["feedback"]["feedbackType"] = obj.feedbackValue;
	              if (req.body.data.feedbackValue == "Customize") {
	                roomConfiguration["feedback"]["questionnaireId"] = obj.customizeQuestionnaireId;
	              }
	
	              //Updating room collection with selected feedback type
	              _room2.default.update(selector, { $set: {
	                  "roomConfiguration.feedback": roomConfiguration.feedback
	                }
	              }, function (err, update) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else {
	                  var roomQuery = _room2.default.findOne(selector).select('roomConfiguration selPackage corporateId').populate('selPackage corporateId', 'packageName features -_id businessName -_id').populate('roomConfiguration.feedback.questionnaireId', '_id questionnaireName').exec(function (err, roomDoc) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	                    } else {
	                      res.json({
	                        status: true,
	                        data: roomDoc,
	                        message: 'Saved successfully'
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid room"
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in saveRoomFeedbackType', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : getRoomFeedbackType
	@Purpose : "To fetch a particular room collection document for a particular roomId"
	@Request Object : {roomId}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function getRoomFeedbackType(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.query.roomId && mongoose.Types.ObjectId.isValid(req.query.roomId)) {
	        var obj = req.query;
	
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Moderator) {
	
	          //Firing a query to fetch room collection document for a particular roomId
	          var roomQuery = _room2.default.findOne({ _id: obj.roomId }).select('roomConfiguration selPackage corporateId').populate('selPackage corporateId', 'packageName features -_id businessName -_id').populate('roomConfiguration.feedback.questionnaireId', '_id questionnaireName').exec(function (err, roomDoc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (roomDoc) {
	              res.json({
	                status: true,
	                data: roomDoc
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid room"
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in getRoomFeedbackType', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : saveRoomCodecType
	@Purpose : "To save room configuration codec type in room collections"
	@Request Object : data:{roomId, codecValue)}
	@Response Object : Success-data, Failure-error 
	@Author : Pradeep Yadav
	*/
	
	function saveRoomCodecType(req, res) {
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.data && req.params.roomId && mongoose.Types.ObjectId.isValid(req.params.roomId)) {
	        var obj = req.body.data;
	        var roomId = req.params.roomId;
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Moderator) {
	
	          //Checking whether the room is present or not 
	          var selector = {
	            _id: roomId
	          };
	          _room2.default.findOne(selector, function (err, roomDoc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (roomDoc) {
	
	              //Updating room collection with selected codec type
	              _room2.default.update(selector, { $set: {
	                  "roomConfiguration.codecType": obj.codecType
	                }
	              }, function (err, update) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else {
	                  var roomQuery = _room2.default.findOne(selector).populate('selPackage corporateId', 'packageName features _id').populate('corporateId', 'businessName _id').exec(function (err, roomDoc) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	                    } else {
	                      res.json({
	                        status: true,
	                        data: roomDoc,
	                        message: 'Saved successfully'
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid room"
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in saveRoomCodecType', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : saveRoomEnableLive
	@Purpose : "To save room configuration Enable Live in room collections"
	@Request Object : data:{roomId, enableLive)}
	@Response Object : Success-data, Failure-error 
	@Author : Pradeep Yadav
	*/
	
	function saveRoomEnableLive(req, res) {
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.data && req.params.roomId && mongoose.Types.ObjectId.isValid(req.params.roomId)) {
	        var obj = req.body.data;
	        var roomId = req.params.roomId;
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor) {
	
	          //Checking whether the room is present or not 
	          var selector = {
	            _id: roomId
	          };
	          _room2.default.findOne(selector, function (err, roomDoc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (roomDoc) {
	
	              //Updating room collection with selected codec type
	              _room2.default.update(selector, { $set: {
	                  "roomConfiguration.enableLive": obj.enableLive
	                }
	              }, function (err, update) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else {
	                  var roomQuery = _room2.default.findOne(selector).populate('selPackage corporateId', 'packageName features _id').populate('corporateId', 'businessName _id').exec(function (err, roomDoc) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	                    } else {
	                      res.json({
	                        status: true,
	                        data: roomDoc,
	                        message: 'Saved successfully'
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid room"
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in saveRoomEnableLive', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	/**
	*  @Function name : setUploadFileDesc
	*  @Purpose : For setting description of uploaded topic files
	*  @Request Object : { uid : "user id", topicId: "topic id", roomId: "room id", uploadId: 'upload id', currentPage: 1, totalItems: 0, itemsPerPage: 5, searchKeyword: 'searchKeyword'}
	*  @Response Object : Success - Success Message, Upload data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function setUploadFileDesc(req, res) {
	  try {
	    //Verifying if request is valid or not
	    if (!req.body || !req.body.data) {
	      res.json({ status: false, error: "Invalid Request" });
	    } else {
	      var obj = req.body.data;
	
	      //Validating if user id, topic id, room id and upload id is valid or not
	      if (!obj.uid || validator.isEmpty(obj.uid) || !mongoose.Types.ObjectId.isValid(obj.uid)) {
	        res.json({
	          status: false,
	          error: "Invalid User"
	        });
	      } else if (!obj.topicId || validator.isEmpty(obj.topicId) || !mongoose.Types.ObjectId.isValid(obj.topicId)) {
	        res.json({
	          status: false,
	          error: "Invalid Topic"
	        });
	      } else if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	        res.json({
	          status: false,
	          error: "Invalid Room"
	        });
	      } else if (!obj.uploadId || validator.isEmpty(obj.uploadId) || !mongoose.Types.ObjectId.isValid(obj.uploadId)) {
	        res.json({
	          status: false,
	          error: "Invalid Upload"
	        });
	      } else {
	
	        //Query for checking if the user is present in database
	        var query = _users2.default.findOne({
	          _id: mongoose.Types.ObjectId(obj.uid)
	        });
	        query.exec(function (err, person) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message,
	              message: 'Unauthorized User'
	            });
	          } else if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Moderator) {
	
	            //Query for updating the topic data
	            var uploadQuery = _upload2.default.update({
	              _id: obj.uploadId,
	              topicId: obj.topicId,
	              roomId: obj.roomId
	            }, {
	              $set: {
	                description: obj.desc
	              }
	            }).exec(function (err, uploadDoc) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else {
	
	                //If user has a valid role
	                if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Moderator || person.role == _adminUser.Roles.Presenter || person.role == _adminUser.Roles.User || person.role == _adminUser.Roles.Presenteradmin) {
	                  var uploadQuery;
	                  var countQuery;
	                  var selector = {
	                    topicId: obj.topicId,
	                    roomId: obj.roomId,
	                    $or: [{ createdBy: person._id }, { isEnable: true }]
	                  };
	
	                  //Verifying if filterValue is empty or not
	                  if (obj.filterValue && obj.filterValue != '') {
	                    selector['fileType'] = obj.filterValue;
	                  }
	
	                  //If searchKeyword is not empty then create RegExp
	                  if (obj.searchKeyword && obj.searchKeyword != '') {
	                    var searchKey = RegExp(obj.searchKeyword, 'i');
	                    selector['fileName'] = { $regex: searchKey };
	                  }
	
	                  //Query for fetching complete upload data based on selector and skip items based on itemsPerPage on previous page
	                  uploadQuery = _upload2.default.find(selector).limit(obj.itemsPerPage).skip(obj.itemsPerPage * (obj.currentPage - 1)).sort({ createdAt: -1 });
	                  countQuery = _upload2.default.count(selector);
	
	                  uploadQuery.exec(function (err, result) {
	                    //console.log('result',result)
	                    if (err) {
	                      //console.log("ERROR===", err);
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	                    } else {
	                      // console.log("DATA===", result);
	
	                      //Query for counting complete upload data based on selector
	                      countQuery.exec(function (error, count) {
	
	                        //console.log('count',count)
	                        res.json({
	                          status: true,
	                          data: result,
	                          count: count,
	                          message: "Updated successfully"
	                        });
	
	                        // createdBy: pranathi, disc:  push notifications for android students
	
	                        _upload2.default.findOne({ _id: obj.uploadId }).select('isEnable').populate('topicId', 'topicEnable topicName').exec(function (err, fileData) {
	
	                          if (fileData && fileData.isEnable && fileData.topicId && fileData.topicId.topicEnable) {
	                            var message = "The File discription has been updated to Topic " + fileData.topicId.topicName + ".";
	                            roomStudentData(obj.roomId, function (err, studentIds) {
	                              if (studentIds != null) {
	                                _users2.default.find({ _id: { $in: studentIds } }).select('deviceType deviceId').exec(function (error, result) {
	                                  if (result && result.length > 0) {
	                                    for (var i = 0; i <= result.length - 1; i++) {
	                                      if (result[i].deviceType == 'ANDROID') {
	                                        (0, _mobile.sendPushNotificationAndroid)("FILE-DISCRIPTION", message, result[i].deviceId, person._id, result[i]._id);
	                                      }
	                                    }
	                                  }
	                                });
	                              }
	                            });
	                          }
	                        });
	                      });
	                    }
	                  });
	                }
	              }
	            });
	          } else {
	            res.json({
	              status: false,
	              error: "Access denied",
	              message: 'Unauthorized User'
	            });
	          }
	        });
	      }
	    }
	  } catch (e) {
	    console.log('error in setUploadFileDesc', e);
	    res.json({
	      status: false,
	      error: "Internal server error."
	    });
	  }
	}
	
	/*
	@Function Name : addGroupStudent
	@Purpose : "To add participants of participantgroup collection to students collection at room side"
	@Request Object : studentdata:{roomId,groupId,instId}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function addGroupStudent(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.studentdata && req.body.studentdata.groupId && mongoose.Types.ObjectId.isValid(req.body.studentdata.groupId)) {
	        var obj = req.body.studentdata;
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else if (!obj.instId || validator.isEmpty(obj.instId) || !mongoose.Types.ObjectId.isValid(obj.instId)) {
	          res.json({
	            status: false,
	            error: "Invalid instructor"
	          });
	        } else {
	          var query = _participantsgroup2.default.findOne({ _id: obj.groupId });
	          query.exec(function (error, groupData) {
	            if (error) {
	              res.json({
	                status: false,
	                error: error.message
	              });
	            } else if (groupData) {
	              var selectorForStudent = {
	                "roomId": mongoose.Types.ObjectId(obj.roomId),
	                "instId": mongoose.Types.ObjectId(obj.instId)
	              };
	
	              //Checking for Student collection exsistance for particular room and instructor
	              var query = _students2.default.findOne(selectorForStudent);
	              query.exec(function (error, studentsData) {
	                if (error) {
	                  res.json({
	                    status: false,
	                    error: "Error while fetching students data."
	                  });
	                }
	                if (studentsData) {
	                  var selectorForStudentsUpdate = {
	                    "roomId": mongoose.Types.ObjectId(obj.roomId),
	                    "instId": mongoose.Types.ObjectId(obj.instId)
	                  };
	                  var addToSet = {
	                    $addToSet: {
	                      students: {
	                        $each: groupData.participants
	                      }
	                    },
	                    modifiedBy: mongoose.Types.ObjectId(obj.uid),
	                    modifiedOn: moment().utc().toDate()
	                  };
	
	                  //Updating Students collection with participantsgroup students
	                  var query = _students2.default.update(selectorForStudentsUpdate, addToSet);
	                  query.exec(function (err, doc) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: error.message
	                      });
	                    } else {
	
	                      //Checking Student collection updation to send as response
	                      var query = _students2.default.findOne(selectorForStudentsUpdate);
	                      query.select('roomId instId students').populate('instId students', 'firstname lastname email profile.profileImage role', { userStatus: 'Active' }).populate('roomId', 'roomName').exec(function (err1, studentCollectionData) {
	                        if (err1) {
	                          res.json({
	                            status: false,
	                            error: err1.message
	                          });
	                        } else {
	                          res.json({
	                            status: true,
	                            data: studentCollectionData,
	                            message: "Group added successfully."
	                          });
	
	                          var emailData = [];
	                          var studentIds = [];
	                          for (var i = 0; i < studentCollectionData.students.length; i++) {
	                            emailData.push(studentCollectionData.students[i].email);
	                            studentIds.push(studentCollectionData.students[i]._id);
	                          }
	
	                          _users2.default.find({ _id: { $in: studentIds } }).select('deviceId deviceType').exec(function (err, stuData) {
	                            if (stuData) {
	                              var roomObj = void 0;
	                              if (person.role == _adminUser.Roles.Lmsadmin) {
	                                roomObj = {
	                                  userEmail: emailData,
	                                  subject: 'New Students added to the Course.',
	                                  userBody: 'You have been added to the Course ' + studentCollectionData.roomId.roomName + ' by ' + person.firstname + '.',
	                                  operatorBody: 'You have successfully added new students to the Course ' + studentCollectionData.roomId.roomName + '.',
	                                  email: person.email
	                                };
	
	                                var instructorMailData = {
	                                  to: studentCollectionData.instId.email,
	                                  subject: 'New Students added to the  Course.',
	                                  body: 'New students has been added to the Course ' + studentCollectionData.roomId.roomName + ' by ' + person.firstname + '.',
	                                  descreption: 'Ignore mail if not relevant.'
	                                };
	
	                                //createdBy: pranathi, disc: push notification for android students 
	                                var message = 'Your account has been added to the Room ' + studentCollectionData.roomId.roomName + '.';
	                                if (stuData && stuData.length > 0) {
	                                  for (var i = 0; i <= stuData.length - 1; i++) {
	                                    if (stuData && stuData[i].deviceType == 'ANDROID') {
	                                      (0, _mobile.sendPushNotificationAndroid)("ADDGROUP-STUDENTS", message, stuData[i].deviceId, person._id, stuData[i]._id);
	                                    }
	                                  }
	                                }
	                                //push notification for instructor
	                                if (studentCollectionData) {
	                                  _users2.default.findOne({ _id: studentCollectionData.instId._id }).select('deviceId deviceType').exec(function (error, insData) {
	                                    var insMessage = 'New students have been added to the Room ' + studentCollectionData.roomId.roomName + '.';
	                                    if (insData && insData.deviceType == 'ANDROID') {
	                                      (0, _mobile.sendPushNotificationAndroid)("ADDGROUP-STUDENTS", insMessage, insData.deviceId, person._id, insData._id);
	                                    }
	                                  });
	                                }
	                                //Commented for temporary bases 
	                                // Email will be sent to instructor when admin add students group under the instructor
	
	                                // EmailForUserCreation.defaultUserMail(instructorMailData, function(emailerror, emailsuccess) {
	                                //   if (emailerror.status == false) {
	                                //     console.log("Email not sent");
	                                //   } else {
	                                //     //console.log('email sent')
	                                //   }
	                                // });
	                                sendRoomEmail(roomObj);
	                              } else {
	                                roomObj = {
	                                  userEmail: emailData,
	                                  subject: 'New Students added to the Course.',
	                                  userBody: 'You have been added to the Course ' + studentCollectionData.roomId.roomName + ' by ' + person.firstname + '.',
	                                  operatorBody: 'You have successfully added new students to the Course ' + studentCollectionData.roomId.roomName + '.',
	                                  email: person.email
	                                };
	                                sendRoomEmail(roomObj);
	
	                                //createdBy: pranathi, disc: push notification for android students 
	                                var _message5 = 'Your account has been added to the Room ' + studentCollectionData.roomId.roomName + '.';
	                                if (stuData && stuData.length > 0) {
	                                  for (var i = 0; i <= stuData.length - 1; i++) {
	                                    if (stuData && stuData[i].deviceType == 'ANDROID') {
	                                      (0, _mobile.sendPushNotificationAndroid)("ADDGROUP-STUDENTS", _message5, stuData[i].deviceId, person._id, stuData[i]._id);
	                                    }
	                                  }
	                                }
	                              }
	                            }
	                          });
	                        }
	                      });
	                    }
	                  });
	                } else {
	
	                  //If Student Collection for particular room and instructor doen't exists then create
	                  var objSave = {};
	                  objSave['roomId'] = mongoose.Types.ObjectId(obj.roomId);
	                  objSave['instId'] = mongoose.Types.ObjectId(obj.instId);
	                  objSave['students'] = groupData.participants;
	                  objSave['createdBy'] = mongoose.Types.ObjectId(person._id);
	                  objSave['modifiedBy'] = mongoose.Types.ObjectId(person.id);
	
	                  //Creating instance for Student Collection
	                  var studentObj = new _students2.default(objSave);
	
	                  //Save created instance for Student Collection
	                  studentObj.save(function (err, saved) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err
	                      });
	                    } else {
	                      //Check for collection creation so as to send as response
	                      var query = _students2.default.findOne({ _id: saved._id });
	                      query.select('roomId instId students').populate('instId students', 'firstname lastname email profile.profileImage role', { userStatus: 'Active' }).populate('roomId', 'roomName').exec(function (err1, doc1) {
	                        if (err1) {
	                          res.json({
	                            status: false,
	                            error: err1.message
	                          });
	                        } else {
	                          res.json({
	                            status: true,
	                            data: doc1,
	                            message: "Group added successfully."
	                          });
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid group"
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log('error in addGroupStudent', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listRoomAssignment
	*  @Purpose : For fetching assignment data based on room
	*  @Request Object : query : { roomId, page, items, search }
	*  @Response Object : Success - Assignment data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listRoomAssignment(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page || !req.query.roomId || !mongoose.Types.ObjectId.isValid(req.query.roomId)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var listroom = req.query;
	        var selector = {};
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        //Search selector based on user role
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Moderator || person.role == _adminUser.Roles.Presenter || person.role == _adminUser.Roles.User || person.role == _adminUser.Roles.Instructor) {
	
	          //code added by Najib to show the list of assignments created by instructor and admin not created by other instructor
	          _users2.default.findOne({ 'profile.companyid': bussinessID, 'role': _adminUser.Roles.Lmsadmin }, function (adminError, admin) {
	            if (adminError) {
	              res.json({ status: false });
	            } else if (admin) {
	              if (person.role == _adminUser.Roles.Instructor) {
	                selector = {
	                  roomId: listroom.roomId,
	                  '$or': [{ 'createdBy': mongoose.Types.ObjectId(person._id) }, { 'createdBy': mongoose.Types.ObjectId(admin._id) }]
	                };
	              } else {
	                selector = {
	                  roomId: listroom.roomId
	                };
	              }
	            } else {
	              selector = {
	                roomId: listroom.roomId
	              };
	            }
	
	            //If search is not empty then create RegExp
	            if (listroom.search && listroom.search != '') {
	              var slash_search = (0, _slashesActions.addSlash)(listroom.search);
	              var searchKey = RegExp(slash_search, 'i');
	              selector['$or'] = [{ 'assignmentName': { $regex: searchKey } }, { 'description': { $regex: searchKey } }];
	            }
	
	            //Query for fetching complete assignment data based on selector and skip items based on itemsPerPage on previous page
	            var query = _assignment2.default.find(selector).limit(Number(listroom.items)).populate('assignedTo createdBy', 'topicName firstname lastname').select('assignmentName assignedTo createdBy').skip(Number(listroom.items) * (Number(listroom.page) - 1)).sort({
	              createdAt: -1
	            }).exec(function (err, result) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else {
	
	                //Query for counting complete assignment data based on selector
	                _assignment2.default.count(selector).exec(function (error, count) {
	                  res.json({
	                    status: true,
	                    data: result,
	                    count: count
	                  });
	                });
	              }
	            });
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in list room assignment", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	/**
	*  @Function name : saveRoomAssignment
	*  @Purpose : For creating assignment in room
	*  @Request Object : roomAssignmentData : { room assignment data }
	*  @Response Object : Success - Success message, Assignment data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveRoomAssignment(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    //console.log('person====',person)
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.body.roomAssignmentData) {
	        var obj = req.body.roomAssignmentData;
	
	        //Validating if room id is valid or not
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room."
	          });
	        } else {
	
	          //Query for finding room data
	          var query = _room2.default.findOne({
	            _id: mongoose.Types.ObjectId(obj.roomId)
	          });
	          query.exec(function (err, docs) {
	            if (err) {
	              res.json({
	                status: false,
	                error: "Room not found."
	              });
	            } else {
	              if (!obj._id || validator.isEmpty(obj._id) || !mongoose.Types.ObjectId.isValid(obj._id)) {
	                obj['createdBy'] = mongoose.Types.ObjectId(person._id);
	                delete obj['uid'];
	                if (obj.assignedTo == '') {
	                  obj['assignedTo'] = null;
	                }
	
	                if (_.isEmpty(obj.uploadData)) {
	                  var objUser = new _assignment2.default(obj);
	
	                  //Query for creating assignment
	                  _assignment2.default.create([objUser], function (error, data) {
	                    // console.log('data===', data)
	                    if (!error) {
	                      res.json({
	                        status: true,
	                        data: data[0],
	                        message: "Created successfully."
	                      });
	                      var schObj = {
	                        roomId: obj.roomId,
	                        subject: 'The Assignment Created.',
	                        body: 'The New assignment ' + '<b>' + obj.assignmentName + '</b>' + ' has been successfully created by ' + '<b>' + person.firstname + '</b>.',
	                        createdBy: data[0].createdBy,
	                        createdBody: 'The New assignment ' + '<b>' + obj.assignmentName + '</b>' + ' has been successfully created by ' + '<b>' + 'you' + '</b>.'
	                      };
	                      (0, _schedule3.sendScheduleEmail)(schObj);
	                    } else {
	                      var errors = [];
	                      if (error.name == 'ValidationError') {
	                        for (var field in error.errors) {
	                          errors.push(error.errors[field].message);
	                        }
	                      }
	                      res.json({
	                        status: false,
	                        error: errors
	                      });
	                    }
	                  });
	                } else {
	
	                  // For removing spaces, parantheses in filename
	                  var tempFileName = obj.uploadData.fileName.replace(/[ )(]+/g, '');
	                  var fileExt = tempFileName.substr(tempFileName.lastIndexOf(".") + 1);
	
	                  if (obj.uploadData.fileType != 'application' && obj.uploadData.fileType != 'text') {
	                    console.log("Assignment upload1 - Invalid File Extension");
	                    res.json({
	                      status: false,
	                      error: "Invalid File Format."
	                    });
	                  } else if (obj.uploadData.fileSize > 20971520) {
	                    console.log("Topic upload - File Size exceeded");
	                    res.json({
	                      status: false,
	                      error: "File Size should be less than 20MB."
	                    });
	                  } else {
	                    if (fileExt == 'exe' || fileExt == 'js' || fileExt == 'jar' || fileExt == 'bat' || fileExt == 'cmd' || fileExt == 'pif' || fileExt == 'app' || fileExt == 'bin' || fileExt == 'rbf' || fileExt == 'sh' || fileExt == 'py' || fileExt == 'reg' || fileExt == 'inf' || fileExt == 'scf' || fileExt == 'application' || fileExt == 'com' || fileExt == 'dll' || fileExt == 'html') {
	                      console.log("Assignment upload2 - Invalid File Extension");
	                      res.json({
	                        status: false,
	                        error: "Invalid File Format."
	                      });
	                    } else if (obj.uploadData.fileType == 'text' && fileExt != 'txt') {
	                      console.log("Assignment upload3 - Invalid File Extension");
	                      res.json({
	                        status: false,
	                        error: "Invalid File Format."
	                      });
	                    } else if (obj.uploadData.file == undefined) {
	                      res.json({
	                        status: false,
	                        error: "File is Empty or unsupported."
	                      });
	                    } else {
	                      multer({
	                        dest: process.env.PWD + "/uploads/",
	                        limits: { fieldSize: 20 * 1024 * 1024 }
	                      }).single('upl');
	
	                      //Creating buffer for upload file 
	                      var imageBuffer = new Buffer(obj.uploadData.file, "base64");
	                      //console.log(process.env.PWD+"/uploads/");
	
	                      var randomstring = '';
	
	                      //Function call for creating randomstring
	                      (0, _randomstring.createRandomString)(function (data) {
	                        randomstring = data;
	                      });
	
	                      // For removing spaces, parantheses in filename
	                      var fileName = obj.uploadData.fileName.replace(/[ )(]+/g, ''); //obj.fileName.replace(/\s+/g, '');
	
	                      //Destination for upload file
	                      var dest = process.env.PWD + "/uploads/" + randomstring + "_" + fileName;
	
	                      //Creating new file at destination
	                      fs.writeFile(dest, imageBuffer, 'base64', function (uploadFailed, uploaded) {
	                        if (uploadFailed) {
	                          res.json({
	                            status: false,
	                            error: uploadFailed
	                          });
	                        } else {
	                          delete obj['uploadData']['file'];
	                          obj['uploadData']['fileName'] = randomstring + "_" + fileName;
	                          var _objUser = new _assignment2.default(obj);
	
	                          //Used async parallel for running the tasks collection of functions in parallel, 
	                          //without waiting until the previous function has completed.
	                          //Used async refect to continue the execution of other tasks when a task fails.
	                          async.parallel([async.reflect(function (callback) {
	                            _assignment2.default.create([_objUser], function (error, data) {
	                              if (!error) {
	                                callback(null, data[0]);
	                              } else {
	                                callback("Assignment not created.");
	                              }
	                            });
	                          })],
	                          // optional callback
	                          function (err, results) {
	                            if (err) {
	                              res.json({
	                                status: false,
	                                error: err.message
	                              });
	                            } else {
	
	                              //For finding error object in results
	                              var errorObject = _.find(results, 'error');
	
	                              //Verifying if error object is there or not
	                              if (errorObject == undefined) {
	                                res.json({
	                                  status: true,
	                                  data: results[0].value,
	                                  message: "Created successfully."
	                                });
	
	                                /*//For finding extension of filename
	                                let ext = fileName.substr(fileName.lastIndexOf(".") + 1);
	                                 //For converting files to pdf by unoconv command using shell package 
	                                if( (ext != "pdf") && (ext != "gif") && (ext != "wav") && (ext != 'mp3') && (ext != 'wmv') && (ext != 'mp4') && (ext != 'mkv') && (ext != 'zip')) {
	                                  if (shell.exec('unoconv -f pdf '+dest).code !== 0) {
	                                    shell.echo('Error: Converting failed');
	                                  }
	                                }*/
	                              } else {
	                                res.json({
	                                  status: false,
	                                  error: "Error while creating assignment."
	                                });
	                              }
	                            }
	                          });
	                        }
	                      });
	                    }
	                  }
	                }
	              }
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("Error in save room assignment", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : updateRoomAssignment
	*  @Purpose : For updating assignment in room
	*  @Request Object : roomtopicdata : { room topic data }
	*  @Response Object : Success - Success message, Assignment data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function updateRoomAssignment(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.body.roomAssignmentData && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
	        var obj = req.body.roomAssignmentData;
	
	        //Validating if room id is valid or not
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room."
	          });
	        } else {
	
	          //Query for finding room data
	          var query = _room2.default.findOne({
	            _id: mongoose.Types.ObjectId(obj.roomId)
	          });
	          query.exec(function (err, docs) {
	            if (err) {
	              res.json({
	                status: false,
	                error: "Room not found."
	              });
	            } else if (docs) {
	              obj['modifiedBy'] = mongoose.Types.ObjectId(person._id);
	              delete obj['uid'];
	              if (obj.assignedTo == '') {
	                obj['assignedTo'] = null;
	              }
	
	              if (_.isEmpty(obj.uploadData)) {
	
	                //Query for updating assignment
	                _assignment2.default.update({
	                  _id: mongoose.Types.ObjectId(req.params.id),
	                  roomId: mongoose.Types.ObjectId(obj.roomId)
	                }, {
	                  $set: {
	                    assignmentName: obj.assignmentName,
	                    assignedTo: obj.assignedTo,
	                    content: obj.content
	                  }
	                }, function (error, result) {
	                  if (error) {
	                    res.json({
	                      status: false,
	                      error: "Assignment not updated."
	                    });
	                  } else if (result) {
	
	                    //Query for sending the updated record to the client
	                    var query = _assignment2.default.findOne({
	                      _id: mongoose.Types.ObjectId(req.params.id),
	                      roomId: mongoose.Types.ObjectId(obj.roomId)
	                    });
	                    query.exec(function (err, doc) {
	                      if (err) {
	                        res.json({
	                          status: false
	                        });
	                      } else if (doc) {
	                        res.json({
	                          status: true,
	                          data: doc,
	                          message: "Updated successfully."
	                        });
	                        var schObj = {
	                          roomId: doc.roomId,
	                          subject: 'The Assignment Updated.',
	                          body: 'The assignment ' + '<b>' + doc.assignmentName + '</b>' + ' has been successfully updated by ' + '<b>' + person.firstname + '</b>.',
	                          createdBody: 'The assignment ' + '<b>' + doc.assignmentName + '</b>' + ' has been successfully updated by ' + '<b>' + 'you' + '</b>.',
	                          createdBy: doc.createdBy
	                        };
	                        (0, _schedule3.sendScheduleEmail)(schObj);
	                      } else {
	                        res.json({
	                          status: false
	                        });
	                      }
	                    });
	                  }
	                });
	              } else {
	
	                // For removing spaces, parantheses in filename
	                var tempFileName = obj.uploadData.fileName.replace(/[ )(]+/g, '');
	                var fileExt = tempFileName.substr(tempFileName.lastIndexOf(".") + 1);
	
	                if (obj.uploadData.fileType != 'application' && obj.uploadData.fileType != 'text') {
	                  console.log("Assignment upload - Invalid File Extension");
	                  res.json({
	                    status: false,
	                    error: "Invalid File Format."
	                  });
	                } else if (obj.uploadData.fileSize > 20971520) {
	                  console.log("Topic upload - File Size exceeded");
	                  res.json({
	                    status: false,
	                    error: "File Size should be less than 20MB."
	                  });
	                } else {
	                  if (fileExt == 'exe' || fileExt == 'js' || fileExt == 'jar' || fileExt == 'bat' || fileExt == 'cmd' || fileExt == 'pif' || fileExt == 'app' || fileExt == 'bin' || fileExt == 'rbf' || fileExt == 'sh' || fileExt == 'py' || fileExt == 'reg' || fileExt == 'inf' || fileExt == 'scf' || fileExt == 'cmd' || fileExt == 'application' || fileExt == 'com' || fileExt == 'dll' || fileExt == 'html') {
	                    console.log("Assignment upload - Invalid File Extension");
	                    res.json({
	                      status: false,
	                      error: "Invalid File Format."
	                    });
	                  } else if (obj.uploadData.fileType == 'text' && fileExt != 'txt') {
	                    console.log("Assignment upload3 - Invalid File Extension");
	                    res.json({
	                      status: false,
	                      error: "Invalid File Format."
	                    });
	                  } else if (obj.uploadData.file == undefined) {
	                    res.json({
	                      status: false,
	                      error: "File is Empty or unsupported."
	                    });
	                  } else {
	                    multer({
	                      dest: process.env.PWD + "/uploads/",
	                      limits: { fieldSize: 20 * 1024 * 1024 }
	                    }).single('upl');
	
	                    //Creating buffer for upload file 
	                    var imageBuffer = new Buffer(obj.uploadData.file, "base64");
	                    //console.log(process.env.PWD+"/uploads/");
	
	                    var randomstring = '';
	
	                    //Function call for creating randomstring
	                    (0, _randomstring.createRandomString)(function (data) {
	                      randomstring = data;
	                    });
	
	                    // For removing spaces, parantheses in filename
	                    var fileName = obj.uploadData.fileName.replace(/[ )(]+/g, ''); //obj.fileName.replace(/\s+/g, '');
	
	                    //Destination for upload file
	                    var dest = process.env.PWD + "/uploads/" + randomstring + "_" + fileName;
	
	                    //Creating new file at destination
	                    fs.writeFile(dest, imageBuffer, 'base64', function (uploadFailed, uploaded) {
	                      if (uploadFailed) {
	                        res.json({
	                          status: false,
	                          error: uploadFailed
	                        });
	                      } else {
	                        delete obj['uploadData']['file'];
	                        obj['uploadData']['fileName'] = randomstring + "_" + fileName;
	
	                        //Query for updating assignment
	                        _assignment2.default.update({
	                          _id: mongoose.Types.ObjectId(req.params.id),
	                          roomId: mongoose.Types.ObjectId(obj.roomId)
	                        }, {
	                          $set: obj
	                        }, function (error, data) {
	                          if (!error) {
	
	                            //Query for sending the updated record to the client
	                            var query = _assignment2.default.findOne({
	                              _id: mongoose.Types.ObjectId(req.params.id),
	                              roomId: mongoose.Types.ObjectId(obj.roomId)
	                            });
	                            query.exec(function (err, doc) {
	                              if (err) {
	                                res.json({
	                                  status: false
	                                });
	                              } else {
	                                res.json({
	                                  status: true,
	                                  data: doc,
	                                  message: "Updated successfully."
	                                });
	                              }
	                            });
	
	                            /*//For finding extension of filename
	                            let ext = fileName.substr(fileName.lastIndexOf(".") + 1);
	                             //For converting files to pdf by unoconv command using shell package 
	                            if( (ext != "pdf") && (ext != "gif") && (ext != "wav") && (ext != 'mp3') && (ext != 'wmv') && (ext != 'mp4') && (ext != 'mkv') && (ext != 'zip')) {
	                              if (shell.exec('unoconv -f pdf '+dest).code !== 0) {
	                                shell.echo('Error: Converting failed');
	                              }
	                            }*/
	                          } else {
	                            res.json({
	                              status: false,
	                              error: "Assignment not updated."
	                            });
	                          }
	                        });
	                      }
	                    });
	                  }
	                }
	              }
	            } else {
	              res.json({
	                status: false,
	                error: "Room not found."
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("Error in update room assignment", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchTopicData
	*  @Purpose : For fetching complete topic data
	*  @Request Object : params : { id: "room id" }
	*  @Response Object : Success - Topic data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchTopicData(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room id is valid or not
	        if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Query for finding the topic data based on room id
	          var query = _topic2.default.find({
	            roomId: recordId,
	            topicEnable: true
	          }).select('_id topicName').exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Topic'
	              });
	            } else if (doc) {
	              res.json({
	                status: true,
	                data: doc
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in fetch topic data", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listAssignmentSubmission
	*  @Purpose : For fetching submission data based on assignment
	*  @Request Object : query : { roomId, assignmentId, page, items }
	*  @Response Object : Success - Assignment data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listAssignmentSubmission(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page || !req.query.roomId || !mongoose.Types.ObjectId.isValid(req.query.roomId) || !req.query.assignmentId || !mongoose.Types.ObjectId.isValid(req.query.assignmentId)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var listroom = req.query;
	        var selector = {};
	
	        //Search selector based on user role
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Moderator || person.role == _adminUser.Roles.Presenter || person.role == _adminUser.Roles.User || person.role == _adminUser.Roles.Instructor) {
	          selector = {
	            roomId: listroom.roomId,
	            _id: listroom.assignmentId
	          };
	
	          //Query for fetching complete assignment data based on selector and skip items based on itemsPerPage on previous page
	
	          //changes done by prateek for bug#3082 
	
	          var query = _assignment2.default.findOne(selector, {
	            submissions: {
	              $slice: [Number(listroom.items) * (Number(listroom.page) - 1), Number(listroom.items)]
	            }
	          }).exec(function (err, result) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (result) {
	              var len = result.submissions ? result.submissions.length : 0;
	
	              //function for populate roomName rommType from Room collection
	              if (len > 0) {
	                var populateData = function populateData() {
	                  var data = result.submissions[len - 1];
	
	                  _users2.default.findOne({ _id: data.studentId }, { firstname: 1, lastname: 1 }, function (err, userData) {
	                    if (err) {
	                      res.json({ status: false, error: err.message });
	                    } else if (userData) {
	                      data['studentId'] = userData;
	                      len = len - 1;
	                      if (len > 0) {
	                        populateData();
	                      } else {
	
	                        //Query for counting complete assignment data based on selector
	
	                        _assignment2.default.findOne(selector).exec(function (error, count) {
	                          if (error) {
	                            res.json({
	                              status: false,
	                              error: err.message
	                            });
	                          } else if (count) {
	                            res.json({
	                              status: true,
	                              data: result,
	                              count: count.submissions.length
	                            });
	                          }
	                        });
	                      }
	                    }
	                  });
	                };
	
	                populateData();
	              } else {
	                res.json({
	                  status: true,
	                  data: result,
	                  count: 0
	                });
	              }
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid assignment"
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in list assignment submission", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchAssignmentData
	*  @Purpose : For fetching particular assignment data
	*  @Request Object : params : { id: "assignment id", rid: "room id" }
	*  @Response Object : Success - Assignment data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchAssignmentData(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !req.params.rid) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room id and assignment id is valid or not
	        if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid assignment"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Query for finding the assignment data based on assignment id
	          var query = _assignment2.default.findOne({
	            _id: recordId,
	            roomId: req.params.rid
	          }).populate('assignedTo', 'topicName').exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Assignment'
	              });
	            } else if (doc) {
	              res.json({
	                status: true,
	                data: doc
	              });
	            } else {
	              res.json({
	                status: false,
	                error: 'Invalid Assignment'
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in fetch assignmend data", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteAssignmentUploadedFile
	*  @Purpose : For deleting assignment uploaded file
	*  @Request Object : params : { rid: "room id", aid: 'assignment id' }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteAssignmentUploadedFile(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.params.rid && req.params.aid) {
	
	        //Validating if room id is valid or not
	        if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room."
	          });
	        } else if (!req.params.aid || validator.isEmpty(req.params.aid) || !mongoose.Types.ObjectId.isValid(req.params.aid)) {
	          res.json({
	            status: false,
	            error: "Invalid assignment."
	          });
	        } else {
	
	          //Query for checking if the upload id is present in database
	          var query = _assignment2.default.findOne({
	            _id: mongoose.Types.ObjectId(req.params.aid),
	            roomId: mongoose.Types.ObjectId(req.params.rid)
	          });
	          query.exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (doc) {
	
	              //Function calling for deleting files from uploads folder
	              (0, _fileupload.deleteFilesFromDest)(doc.uploadData, function (status) {
	                if (status == true) {
	
	                  //Query for removing the upload data
	                  _assignment2.default.update({
	                    _id: mongoose.Types.ObjectId(req.params.aid),
	                    roomId: mongoose.Types.ObjectId(req.params.rid)
	                  }, {
	                    $unset: {
	                      "uploadData": null
	                    }
	                  }, function (error, result) {
	                    if (error) {
	                      // console.log("Error", error.message);
	                      res.json({
	                        status: false,
	                        error: "Upload not present in current assignment."
	                      });
	                    } else {
	                      _assignment2.default.findOne({
	                        _id: mongoose.Types.ObjectId(req.params.aid),
	                        roomId: mongoose.Types.ObjectId(req.params.rid)
	                      }).populate('assignedTo', 'topicName').exec(function (error, assDoc) {
	                        if (error) {
	                          res.json({
	                            status: false,
	                            error: "Assignment not found"
	                          });
	                        } else if (assDoc) {
	                          res.json({
	                            status: true,
	                            data: assDoc,
	                            message: "Deleted successfully."
	                          });
	                        } else {
	                          res.json({
	                            status: false,
	                            error: "Internal server error"
	                          });
	                        }
	                      });
	                    }
	                  });
	                } else {
	                  res.json({
	                    status: false,
	                    error: "Error in deleting file"
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid assignment"
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("error in delete assignment uploded file", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteAssignment
	*  @Purpose : For deleting assignment
	*  @Request Object : params : { rid: "room id", aid: 'assignment id' }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteAssignment(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.params.rid && req.params.aid) {
	
	        //Validating if room id is valid or not
	        if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room."
	          });
	        } else if (!req.params.aid || validator.isEmpty(req.params.aid) || !mongoose.Types.ObjectId.isValid(req.params.aid)) {
	          res.json({
	            status: false,
	            error: "Invalid assignment."
	          });
	        } else {
	
	          //Query for checking if the upload id is present in database
	          var query = _assignment2.default.findOne({
	            _id: mongoose.Types.ObjectId(req.params.aid),
	            roomId: mongoose.Types.ObjectId(req.params.rid)
	          });
	          query.exec(function (err, doc) {
	            //console.log('doc', doc)
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (doc) {
	              if (_.isEmpty(doc.submissions) && doc.uploadData.fileName == undefined) {
	
	                //Query for removing the assignment data
	                _assignment2.default.remove({
	                  _id: mongoose.Types.ObjectId(req.params.aid),
	                  roomId: mongoose.Types.ObjectId(req.params.rid)
	                }).exec(function (error, response) {
	                  if (error) {
	                    res.json({
	                      status: false,
	                      error: "Error in deleting assignment"
	                    });
	                  } else {
	                    res.json({
	                      status: true,
	                      message: "Assignment deleted successfully"
	                    });
	
	                    var schObj = {
	                      roomId: doc.roomId,
	                      subject: 'The Assignment Deleted',
	                      body: 'The assignment ' + '<b>' + doc.assignmentName + '</b>' + ' has been successfully deleted by ' + '<b>' + person.firstname + '</b>.',
	                      createdBy: doc.createdBy,
	                      createdBody: 'The assignment ' + '<b>' + doc.assignmentName + '</b>' + ' has been successfully deleted by ' + '<b>' + 'you' + '</b>.'
	                    };
	                    (0, _schedule3.sendScheduleEmail)(schObj);
	                  }
	                });
	              } else {
	                var deletingData = [];
	
	                //For verifying if upload and submission data is there or not
	                if (_.isEmpty(doc.submissions) && doc.uploadData.fileName != undefined) {
	                  deletingData.push(doc.uploadData);
	                } else if (doc.uploadData.fileName == undefined && doc.submissions && doc.submissions.length > 0) {
	                  doc.submissions.forEach(function (item) {
	                    deletingData.push(item);
	                  });
	                } else {
	                  deletingData.push(doc.uploadData);
	                  doc.submissions.forEach(function (item) {
	                    deletingData.push(item);
	                  });
	                }
	
	                //Async.forEachOf iteratee to each item in doc, in parallely
	                async.forEachOf(deletingData, function (data, key, callback) {
	
	                  //Function calling for deleting files from uploads folder
	                  (0, _fileupload.deleteFilesFromDest)(data, function (status) {
	                    if (status == true) {
	                      callback();
	                    } else {
	                      return callback('Error in deleting file');
	                    }
	                  });
	                }, function (err) {
	                  if (err) {
	                    console.log("Error in deleting file", err);
	                    res.json({
	                      status: false,
	                      error: err
	                    });
	                  } else {
	
	                    //Query for removing the assignment data
	                    _assignment2.default.remove({
	                      _id: mongoose.Types.ObjectId(req.params.aid),
	                      roomId: mongoose.Types.ObjectId(req.params.rid)
	                    }).exec(function (error, response) {
	                      if (error) {
	                        res.json({
	                          status: false,
	                          error: "Error in deleting assignment"
	                        });
	                      } else {
	                        res.json({
	                          status: true,
	                          message: "Assignment deleted successfully"
	                        });
	                      }
	                    });
	                  }
	                });
	              }
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid assignment"
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("error in delete assignment", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : roomTopicEnable
	*  @Purpose : For enabling & disabling topic files
	*  @Request Object : fileEnable { id : topicId, topicEnable :topicEnable }
	*  @Response Object : Success - fileEnable, Failure - Error message
	*  @Author : Pranathi */
	
	function roomTopicEnable(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id) || !req.body || !req.body.topicEnable) {
	        res.json({ status: false, error: "InValid request." });
	      } else {
	        var obj = req.body.topicEnable;
	
	        var topicId = mongoose.Types.ObjectId(req.params.id);
	
	        //Fetching topic details from the topics collection
	        _topic2.default.findOne({ _id: topicId }, function (err, data) {
	          // console.log("data",data);
	          if (data) {
	            if (data.createdBy._str === person._id._str) {
	
	              //Query for update status in the topics collection
	              _topic2.default.findOneAndUpdate({ _id: topicId }, { $set: obj
	              }, function (err, response) {
	                if (err) {
	                  res.json({ status: false, error: err.message });
	                } else {
	                  res.json({ status: true, id: topicId, res: response });
	
	                  // createdBy: pranathi, disc: push notifications //
	                  var message = void 0;
	                  if (response.topicEnable == false) {
	                    message = "The topic " + response.topicName + " has been added to the Room.";
	                  } else {
	                    message = "The topic " + response.topicName + " has been removed from the Room.";
	                  }
	
	                  //createdBy: pranathi, disc: sending topic enable info notification to android students 
	                  roomStudentData(response.roomId, function (error, studentIds) {
	                    if (studentIds != null) {
	                      _users2.default.find({ _id: { $in: studentIds } }).select("deviceType deviceId").exec(function (stuErr, stuData) {
	                        if (stuData) {
	                          if (stuData.length > 0) {
	                            for (var i = 0; i <= stuData.length - 1; i++) {
	                              if (stuData[i].deviceType == 'ANDROID') {
	                                (0, _mobile.sendPushNotificationAndroid)("TOPIC-ENABLE", message, stuData[i].deviceId, person._id, stuData[i]._id);
	                              }
	                            }
	                          }
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({ status: false, error: "Access denied." });
	            }
	          } else {
	            res.json({ status: false, error: "Invalid topic." });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("error in update roomTopicEnable", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchPlagiarismData
	*  @Purpose : For fetching the plagiarism data for showing in assignments submissions 
	*  @Request params : { id : assignmentId, rid : roomId }
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek */
	
	function fetchPlagiarismData(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params) {
	        res.json({ status: false, error: "InValid request." });
	      } else if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	        res.json({
	          status: false,
	          error: "Invalid assignmentId"
	        });
	      } else if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	        res.json({
	          status: false,
	          error: "Invalid roomId"
	        });
	      } else if (!req.params.sid || validator.isEmpty(req.params.sid) || !mongoose.Types.ObjectId.isValid(req.params.sid)) {
	        res.json({
	          status: false,
	          error: "Invalid request"
	        });
	      } else {
	        var obj = req.params;
	
	        //Fetching Data 
	        _assignment2.default.findOne({
	          _id: obj.id,
	          roomId: obj.rid,
	          "submissions._id": obj.sid
	        }, {
	          "submissions.$": 1
	        }).exec(function (err, assignmentData) {
	          if (err) {
	            res.json({ status: false, error: err.message });
	          } else if (assignmentData) {
	            var plagiarismData = assignmentData.submissions[0];
	            var url = 'https://' + _config2.default.domin + "/uploads/" + plagiarismData.fileName;
	
	            if (plagiarismData.plagiarismResult && plagiarismData.plagiarismResult.length <= 0 && plagiarismData.plagiarismResult != null) {
	              if (plagiarismData.plagiarismId == undefined) {
	                (0, _plagiarismcheck.processForPlagiarismCheck)(url, function (errPlagiarism, resPlagiarism) {
	                  // console.log("Plagiarism cb1 --- ", resPlagiarism);
	                  if (resPlagiarism) {
	                    _assignment2.default.update({
	                      _id: obj.id,
	                      roomId: obj.rid,
	                      "submissions._id": obj.sid
	                    }, {
	                      $set: {
	                        "submissions.$.plagiarismId": resPlagiarism
	                      }
	                    }).exec(function (err, updated) {
	                      if (err) {
	                        res.json({
	                          status: false,
	                          error: err.message
	                        });
	                      } else {
	                        (0, _plagiarismcheck.plagiarismProcessResult)(resPlagiarism, function (err, plagiarismRes) {
	                          if (err) {
	                            // console.log(err,err);
	                            res.json({ status: false, error: err });
	                          } else if (plagiarismRes) {
	                            if (plagiarismRes.length <= 0) {
	                              plagiarismRes = null;
	                            }
	                            _assignment2.default.update({
	                              _id: obj.id,
	                              roomId: obj.rid,
	                              "submissions._id": obj.sid
	                            }, {
	                              $set: {
	
	                                "submissions.$.plagiarismResult": plagiarismRes
	                              }
	                            }).exec(function (err, updated) {
	                              if (err) {
	                                res.json({
	                                  status: false,
	                                  error: err.message
	                                });
	                              } else {
	                                res.json({
	                                  status: true,
	                                  data: plagiarismRes
	                                });
	                              }
	                            });
	                          }
	                        });
	                      }
	                    });
	                  } else {
	                    res.json({
	                      status: false,
	                      error: errPlagiarism
	                    });
	                  }
	                });
	              } else {
	                (0, _plagiarismcheck.plagiarismProcessResult)(plagiarismData.plagiarismId, function (err, plagiarismRes) {
	                  if (err) {
	                    res.json({ status: false, error: err });
	                  } else if (plagiarismRes) {
	                    if (plagiarismRes.length <= 0) {
	                      plagiarismRes = null;
	                    }
	                    _assignment2.default.update({
	                      _id: obj.id,
	                      roomId: obj.rid,
	                      "submissions._id": obj.sid
	                    }, {
	                      $set: {
	
	                        "submissions.$.plagiarismResult": plagiarismRes
	                      }
	                    }).exec(function (err, updated) {
	                      if (err) {
	                        res.json({
	                          status: false,
	                          error: err.message
	                        });
	                      } else {
	                        res.json({
	                          status: true,
	                          data: plagiarismRes
	                        });
	                      }
	                    });
	                  }
	                });
	              }
	            } else {
	              if (plagiarismData.plagiarismResult == null) {
	                res.json({
	                  status: true,
	                  data: []
	                });
	              } else {
	                res.json({
	                  status: true,
	                  data: plagiarismData.plagiarismResult
	                });
	              }
	            }
	          } else {
	            res.json({ status: false, error: "Invalid assiginment" });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("error in update fetchPlagiarismData", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchRoomAttendance
	*  @Purpose : For fetching particular room attendance data
	*  @Request Object : params : { id: "room id" }
	*  @Response Object : Success - Room attendance data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchRoomAttendance(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room id is valid or not
	        if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //For finding student data based on room id and inst id
	          var query = _students2.default.findOne({
	            roomId: recordId,
	            instId: person._id
	          });
	          query.select('students').exec(function (stuErr, stuDoc) {
	            if (stuErr) {
	              res.json({
	                status: false,
	                error: stuErr.message,
	                message: "Error while retriving student data."
	              });
	            }
	            if (stuDoc) {
	
	              //For finding student data count based on room id and created by
	              var scheduleQuery = _schedule2.default.count({
	                roomId: recordId,
	                createdBy: person._id
	              }).exec(function (schErr, schCount) {
	                if (schErr) {
	                  res.json({
	                    status: false,
	                    error: schErr.message,
	                    message: "Error while retriving schedule count."
	                  });
	                } else {
	                  var totalSchedules = schCount;
	                  var totalStudents = 0;
	                  var totalStudentsAttended = 0;
	
	                  //Verifying if student array length is greater than zero or not
	                  if (stuDoc.students && stuDoc.students.length > 0) {
	                    totalStudents += stuDoc.students.length;
	
	                    //Query for finding unique log data for those students who have joined the call
	                    var logQuery = _logger2.default.aggregate([{
	                      $match: {
	                        uid: {
	                          $in: stuDoc.students
	                        },
	                        'details.roomId': recordId,
	                        'details.hostId': person._id,
	                        actionType: "Join Call"
	                      }
	                    }, {
	                      $group: {
	                        _id: {
	                          scheduleId: "$details.scheduleId",
	                          uid: "$uid"
	                        }
	                      }
	                    }]).exec(function (logErr, logData) {
	                      if (logErr) {
	                        res.json({
	                          status: false,
	                          error: logErr.message
	                        });
	                      }
	                      if (_.isEmpty(logData)) {
	                        res.json({
	                          status: false,
	                          error: 'No data'
	                        });
	                      } else {
	                        totalStudentsAttended += logData.length;
	                        var totalRecords = totalSchedules * totalStudents;
	                        var totalStudentsAbsent = totalRecords - totalStudentsAttended;
	                        var obj = {
	                          absentRecords: totalStudentsAbsent / totalRecords * 100,
	                          presentRecords: totalStudentsAttended / totalRecords * 100,
	                          totalRecords: totalRecords / totalRecords * 100
	                        };
	                        res.json({
	                          status: true,
	                          data: obj
	                        });
	                      }
	                    });
	                  }
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                data: 'No students'
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in fetch room attendance", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listStudent
	*  @Purpose : For fetching student list in attendance module under room
	*  @Request Object : query : { roomId, page, items }
	*  @Response Object : Success - Student data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listStudent(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page || !req.query.roomId || !mongoose.Types.ObjectId.isValid(req.query.roomId)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var liststudent = req.query;
	        var selector = {};
	
	        //Search selector based on user role
	        if (person.role == _adminUser.Roles.Presenter || person.role == _adminUser.Roles.Instructor) {
	          selector = {
	            roomId: liststudent.roomId,
	            instId: person._id
	          };
	
	          //Query for fetching student data based on selector and skip items based on itemsPerPage on previous page
	          var query = _students2.default.findOne(selector).limit(Number(liststudent.items)).populate('students', 'firstname lastname').select('students').skip(Number(liststudent.items) * (Number(liststudent.page) - 1)).sort({
	            createdAt: -1
	          }).exec(function (stuErr, stuDoc) {
	            if (stuErr) {
	              res.json({
	                status: false,
	                error: 'Error while retriving student data',
	                message: "Error while retriving student data."
	              });
	            }
	            if (stuDoc) {
	              if (stuDoc.students && stuDoc.students.length > 0) {
	                res.json({
	                  status: true,
	                  data: stuDoc.students
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: "No students"
	                });
	              }
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in list student", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchStudentAttendance
	*  @Purpose : For fetching particular student attendance data
	*  @Request Object : params : { rid: "room id", id: 'student id' }
	*  @Response Object : Success - Student attendance data, Failure - Error message
	*  @Author : Aniket Gupta,pranathi
	*/
	
	function fetchStudentAttendance(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room id is valid or not
	        if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.rid);
	          var studentId = mongoose.Types.ObjectId(req.params.id);
	
	          if (person.role == _adminUser.Roles.Instructor) {
	
	            //For finding student data count based on room id and created by
	            var scheduleQuery = _schedule2.default.count({
	              roomId: recordId,
	              createdBy: person._id
	            }).exec(function (schErr, schCount) {
	              if (schErr) {
	                res.json({
	                  status: false,
	                  error: schErr.message,
	                  message: "Error while retriving schedule count."
	                });
	              } else {
	                var totalSchedules = schCount;
	                var totalSchedulesAttended = 0;
	
	                //Query for finding unique log data for those students who have joined the call
	                var logQuery = _logger2.default.aggregate([{
	                  $match: {
	                    uid: studentId,
	                    'details.roomId': recordId,
	                    'details.hostId': person._id,
	                    actionType: "Join Call"
	                  }
	                }, {
	                  $group: {
	                    _id: {
	                      scheduleId: "$details.scheduleId",
	                      uid: "$uid"
	                    }
	                  }
	                }]).exec(function (logErr, logData) {
	                  if (logErr) {
	                    res.json({
	                      status: false,
	                      error: logErr.message
	                    });
	                  }
	                  if (_.isEmpty(logData)) {
	                    res.json({
	                      status: false,
	                      error: 'No data'
	                    });
	                  } else {
	                    totalSchedulesAttended += logData.length;
	                    var totalRecords = totalSchedules;
	                    var totalSchedulesAbsent = totalRecords - totalSchedulesAttended;
	                    var obj = {
	                      absentRecords: totalSchedulesAbsent / totalRecords * 100,
	                      presentRecords: totalSchedulesAttended / totalRecords * 100,
	                      totalRecords: totalRecords / totalRecords * 100
	                    };
	                    res.json({
	                      status: true,
	                      data: obj
	                    });
	                  }
	                });
	              }
	            });
	          }
	          if (person.role == _adminUser.Roles.Student) {
	
	            //For finding instructors data based on room id and student id
	            var query = _students2.default.find({
	              roomId: recordId,
	              students: { $in: [person._id] }
	            });
	
	            query.select('instId').exec(function (insErr, insDoc) {
	              if (insErr) {
	                res.json({
	                  status: false,
	                  error: insErr.message,
	                  message: "Error while retriving instructors data."
	                });
	              }
	              if (insDoc && insDoc.length > 0) {
	                var instId = insDoc.map(function (d) {
	                  return d.instId;
	                });
	
	                //For finding teachers data count based on room id and created by
	                var scheduleQuery = _schedule2.default.count({
	                  roomId: recordId,
	                  createdBy: { $in: instId }
	                }).exec(function (schErr, schCount) {
	                  if (schErr) {
	                    res.json({
	                      status: false,
	                      error: schErr.message,
	                      message: "Error while retriving schedule count."
	                    });
	                  } else {
	
	                    var totalSchedules = schCount;
	                    var totalInstructors = 0;
	                    var totalClassesAttended = 0;
	
	                    //Verifying if instructor array length is greater than zero or not
	                    if (insDoc && insDoc.length > 0) {
	                      totalInstructors += insDoc.length;
	
	                      // Query for finding unique log data for student who have joined the calls
	                      var logQuery = _logger2.default.aggregate([{
	                        $match: {
	                          uid: person._id,
	                          'details.hostId': {
	                            $in: instId
	                          },
	                          'details.roomId': recordId,
	                          actionType: "Join Call"
	                        }
	                      }, {
	                        $group: {
	                          _id: {
	                            scheduleId: "$details.scheduleId",
	                            uid: "$uid"
	                          }
	                        }
	                      }]).exec(function (logErr, logData) {
	                        if (logErr) {
	                          res.json({
	                            status: false,
	                            error: logErr.message
	                          });
	                        }
	                        if (_.isEmpty(logData)) {
	                          res.json({
	                            status: false,
	                            error: 'No data'
	                          });
	                        } else {
	
	                          totalClassesAttended += logData.length;
	                          var totalClasses = totalSchedules * totalInstructors;
	                          var totalClassesNotAttended = totalClasses - totalClassesAttended;
	                          var obj = {
	                            absentClasses: totalClassesNotAttended / totalClasses * 100,
	                            presentClasses: totalClassesAttended / totalClasses * 100,
	                            totalClasses: totalClasses / totalClasses * 100
	                          };
	                          res.json({
	                            status: true,
	                            data: obj
	                          });
	                        }
	                      });
	                    }
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  data: 'No students'
	                });
	              }
	            });
	          }
	        }
	      }
	    } catch (e) {
	      console.log("error in fetch student attendance", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listClass
	*  @Purpose : For fetching class/schedule list in attendance module under room
	*  @Request Object : query : { roomId, page, items }
	*  @Response Object : Success - Class data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listClass(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page || !req.query.roomId || !mongoose.Types.ObjectId.isValid(req.query.roomId)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var listclass = req.query;
	        var selector = {};
	
	        //Search selector based on user role
	        if (person.role == _adminUser.Roles.Presenter || person.role == _adminUser.Roles.Instructor) {
	          selector = {
	            roomId: listclass.roomId,
	            createdBy: person._id
	          };
	
	          //Query for fetching schedule data based on selector and skip items based on itemsPerPage on previous page
	          var query = _schedule2.default.find(selector).limit(Number(listclass.items)).skip(Number(listclass.items) * (Number(listclass.page) - 1)).sort({
	            createdAt: -1
	          }).exec(function (schErr, schDoc) {
	            if (schErr) {
	              res.json({
	                status: false,
	                error: 'Error while retriving class data',
	                message: "Error while retriving class data."
	              });
	            }
	            if (schDoc) {
	
	              //Query for counting complete scheudle data based on selector
	              _schedule2.default.count(selector).exec(function (error, count) {
	                if (error) {
	                  res.json({
	                    status: false,
	                    error: error.message
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    data: schDoc,
	                    count: count
	                  });
	                }
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in list class", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchClassAttendance
	*  @Purpose : For fetching particular class attendance data
	*  @Request Object : params : { rid: "room id", id: 'meeting id' }
	*  @Response Object : Success - Class attendance data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchClassAttendance(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room id is valid or not
	        if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.rid);
	          var meetingId = mongoose.Types.ObjectId(req.params.id);
	
	          //For finding student data based on room id and inst id
	          var query = _students2.default.findOne({
	            roomId: recordId,
	            instId: person._id
	          });
	          query.select('students').exec(function (stuErr, stuDoc) {
	            if (stuErr) {
	              res.json({
	                status: false,
	                error: stuErr.message,
	                message: "Error while retriving student data."
	              });
	            } else if (stuDoc) {
	              var totalStudents = 0;
	              var totalStudentsAttended = 0;
	
	              //Verifying if student array length is greater than zero or not
	              if (stuDoc.students && stuDoc.students.length > 0) {
	                totalStudents += stuDoc.students.length;
	
	                //Query for finding unique log data for those students who have joined the call
	                var logQuery = _logger2.default.aggregate([{
	                  $match: {
	                    uid: {
	                      $in: stuDoc.students
	                    },
	                    'details.roomId': recordId,
	                    'details.hostId': person._id,
	                    'details.scheduleId': meetingId,
	                    actionType: "Join Call"
	                  }
	                }, {
	                  $group: {
	                    _id: {
	                      scheduleId: "$details.scheduleId",
	                      uid: "$uid"
	                    }
	                  }
	                }]).exec(function (logErr, logData) {
	                  if (logErr) {
	                    res.json({
	                      status: false,
	                      error: logErr.message
	                    });
	                  }
	                  if (_.isEmpty(logData)) {
	                    res.json({
	                      status: false,
	                      error: 'No data'
	                    });
	                  } else {
	                    totalStudentsAttended += logData.length;
	                    var totalRecords = totalStudents;
	                    var totalStudentsAbsent = totalRecords - totalStudentsAttended;
	                    var obj = {
	                      absentRecords: totalStudentsAbsent / totalRecords * 100,
	                      presentRecords: totalStudentsAttended / totalRecords * 100,
	                      totalRecords: totalRecords / totalRecords * 100
	                    };
	                    res.json({
	                      status: true,
	                      data: obj
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  data: 'No students'
	                });
	              }
	            } else {
	              res.json({
	                status: false,
	                data: 'No students'
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in fetch class attendance", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchClassDetailedAttendance
	*  @Purpose : For fetching particular class detailed attendance data
	*  @Request Object : params : { rid: "room id", id: 'meeting id' }
	*  @Response Object : Success - Class attendance data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchClassDetailedAttendance(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room id is valid or not
	        if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.rid);
	          var meetingId = mongoose.Types.ObjectId(req.params.id);
	
	          //For finding student data based on room id and inst id
	          var query = _students2.default.findOne({
	            roomId: recordId,
	            instId: person._id
	          });
	          query.select('students').populate('students', 'firstname lastname').exec(function (stuErr, stuDoc) {
	            if (stuErr) {
	              res.json({
	                status: false,
	                error: stuErr.message,
	                message: "Error while retriving student data."
	              });
	            }
	            if (stuDoc) {
	              var totalStudentsId = [];
	
	              //Verifying if student array length is greater than zero or not
	              if (stuDoc.students && stuDoc.students.length > 0) {
	                stuDoc.students.forEach(function (item) {
	                  totalStudentsId.push(item._id);
	                });
	
	                //Query for finding unique log data for those students who have joined the call
	                var logQuery = _logger2.default.aggregate([{
	                  $match: {
	                    uid: {
	                      $in: totalStudentsId
	                    },
	                    'details.roomId': recordId,
	                    'details.hostId': person._id,
	                    'details.scheduleId': meetingId,
	                    actionType: "Join Call"
	                  }
	                }, {
	                  $group: {
	                    _id: {
	                      scheduleId: "$details.scheduleId",
	                      uid: "$uid"
	                    }
	                  }
	                }]).exec(function (logErr, logData) {
	                  if (logErr) {
	                    res.json({
	                      status: false,
	                      error: logErr.message
	                    });
	                  }
	                  if (_.isEmpty(logData)) {
	                    res.json({
	                      status: false,
	                      error: 'No data'
	                    });
	                  } else {
	                    var final = [];
	                    stuDoc.students.forEach(function (studentData) {
	                      var acceptedData = _.find(logData, { '_id': { 'uid': studentData._id } });
	                      var fname = studentData.firstname.charAt(0).toUpperCase() + studentData.firstname.slice(1);
	                      var lname = studentData.lastname.charAt(0).toUpperCase() + studentData.lastname.slice(1);
	                      var studentName = fname + " " + lname;
	                      if (acceptedData == undefined) {
	                        final.push({
	                          name: studentName,
	                          y: 1,
	                          status: 'Not Attended',
	                          color: "#c0392b"
	                        });
	                      } else {
	                        final.push({
	                          name: studentName,
	                          y: 1,
	                          status: 'Attended',
	                          color: "#26A65B"
	                        });
	                      }
	                    });
	                    res.json({
	                      status: true,
	                      data: final
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  data: 'No students'
	                });
	              }
	            } else {
	              res.json({
	                status: false,
	                data: 'No students'
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in fetch class detailed attendance", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchPlagiarismCredits
	*  @Purpose : For fetching plagiarism credita
	*  @Request Object : null
	*  @Response Object : Success - Class attendance data, Failure - Error message
	*  @Author : Prateek 
	*/
	
	function fetchPlagiarismCredits(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        (0, _plagiarismcheck.plagiarismCreditsResult)(function (err, credits) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err
	            });
	          } else {
	            res.json({
	              status: true,
	              creditData: credits
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("error in fetchPlagiarismCredits", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchIndividualAssignmentData
	*  @Purpose : For fetching assigment data
	*  @Request Object : assignmentId : assignmentId, studentId : studentId
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek 
	*/
	
	function fetchIndividualAssignmentData(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var reqObj = req.query;
	
	        var selector = {
	          _id: req.query.assignmentId,
	          "submissions._id": req.query.studentID
	        };
	        _assignment2.default.findOne(selector, { "submissions.$": 1, configuration: 1 }).exec(function (err, assignmentResult) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else {
	            res.json({
	              status: true,
	              data: assignmentResult
	            });
	          }
	        });
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : saveEvaluatedAssignmentResult
	*  @Purpose : For saving the evaluated assignment submission
	*  @Request Object : assignmentId, studentID
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek 
	*/
	
	function saveEvaluatedAssignmentResult(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else if (!req.body.assignmentId || validator.isEmpty(req.body.assignmentId) || !mongoose.Types.ObjectId.isValid(req.body.assignmentId)) {
	        res.json({
	          status: false,
	          error: "Invalid Assignment Id"
	        });
	      } else if (!req.body.studentID || validator.isEmpty(req.body.studentID) || !mongoose.Types.ObjectId.isValid(req.body.studentID)) {
	        res.json({
	          status: false,
	          error: "Invalid Student Id"
	        });
	      } else {
	        var obj = req.body;
	
	        _assignment2.default.findOne({
	          _id: obj.assignmentId
	        }).exec(function (err, assignmentResult) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else if (assignmentResult) {
	
	            _assignment2.default.update({
	              _id: obj.assignmentId,
	              "submissions._id": obj.studentID
	            }, {
	              $set: {
	                "submissions.$.result": obj.result,
	                "submissions.$.comment": obj.comment,
	                "submissions.$.evaluatedBy": person._id
	              }
	            }).exec(function (err, updated) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else if (updated) {
	
	                _assignment2.default.findOne({
	                  _id: obj.assignmentId,
	                  "submissions._id": obj.studentID
	                }, { "submissions.$": 1, configuration: 1 }).exec(function (err, assignmentData) {
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: err.message
	                    });
	                  } else if (assignmentData) {
	                    res.json({
	                      status: true,
	                      data: assignmentData,
	                      message: 'Evaluted assignment saved successfully'
	                    });
	                  } else {
	                    res.json({
	                      status: false,
	                      error: 'Assignment Not Found'
	                    });
	                  }
	                });
	              }
	            });
	          } else {
	            res.json({
	              status: false,
	              error: 'Assignment Not Found'
	            });
	          }
	        });
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : saveAssignmentGradeConfiguration
	*  @Purpose : For saving the evaluated assignment submission
	*  @Request Object : sid 
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek 
	*/
	
	function saveAssignmentGradeConfiguration(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else if (!req.body.assignmentId || validator.isEmpty(req.body.assignmentId) || !mongoose.Types.ObjectId.isValid(req.body.assignmentId)) {
	        res.json({
	          status: false,
	          error: "Invalid Assignment Id"
	        });
	      } else if (!req.body.studentID || validator.isEmpty(req.body.studentID) || !mongoose.Types.ObjectId.isValid(req.body.studentID)) {
	        res.json({
	          status: false,
	          error: "Invalid Student Id"
	        });
	      } else {
	
	        var obj = req.body;
	
	        _assignment2.default.findOne({
	          _id: obj.assignmentId
	        }).exec(function (err, assignmentResult) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else if (assignmentResult) {
	
	            _assignment2.default.update({
	              _id: obj.assignmentId
	            }, {
	              $set: {
	                configuration: obj.configuration
	              }
	            }).exec(function (err, updated) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else if (updated) {
	
	                _assignment2.default.findOne({
	                  _id: obj.assignmentId,
	                  "submissions._id": obj.studentID
	                }, { "submissions.$": 1, configuration: 1 }).exec(function (err, assignmentData) {
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: err.message
	                    });
	                  } else if (assignmentData) {
	                    res.json({
	                      status: true,
	                      data: assignmentData,
	                      message: ' Assignment grades configured successfully'
	                    });
	                  } else {
	                    res.json({
	                      status: false,
	                      error: 'Assignment Not Found'
	                    });
	                  }
	                });
	              }
	            });
	          } else {
	            res.json({
	              status: false,
	              error: 'Assignment Not Found'
	            });
	          }
	        });
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listRoomCertificateData
	*  @Purpose : For fetching list of students, topics, questionnaire completion data for Instructor/Admin to decide to enable certificate download.
	*  @Request Object : roomID
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Shantanu Paul 
	*/
	
	function listRoomCertificateData(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	
	    try {
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page || !req.query.roomId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        var totalTopicsCountQuery = _topic2.default.count({ roomId: req.query.roomId, topicEnable: true }); // Get total topics count for the course.
	
	        var questionnaireCountQuery = _topic2.default.find({ roomId: req.query.roomId, topicEnable: true }).select('questionnaire'); // Get all questionnaires for the course
	
	        var selector = {};
	
	        if ( /*person.role === Roles.Admin ||*/person.role === _adminUser.Roles.Lmsadmin /*|| person.role == Roles.Presenteradmin || person.role == Roles.CRMadmin*/) {
	            selector = { roomId: mongoose.Types.ObjectId(req.query.roomId) };
	          } else if (person.role === _adminUser.Roles.Instructor) {
	          selector = { roomId: mongoose.Types.ObjectId(req.query.roomId), instId: mongoose.Types.ObjectId(person.id) };
	        }
	
	        var skipValue = Number(req.query.items) * (Number(req.query.page) - 1);
	        var limitValue = Number(req.query.items);
	        var sortValue = JSON.parse(req.query.sort);
	        var searchValue = req.query.search;
	
	        var studentsQuery = _students2.default.aggregate([{ $match: selector }, { $project: { students: '$students' } }, // Get list of students in the course
	        { $unwind: '$students' }, // Unwind Students array
	        { $lookup: { // Get student name from User table
	            from: 'users',
	            localField: 'students',
	            foreignField: '_id',
	            as: 'student'
	          } }, { $project: { _id: 0, 'student._id': 1, 'student.firstname': 1, 'student.lastname': 1, 'student.guest': 1 } }, // Remove unnecessary fields
	        { $unwind: '$student' }, // Unwind students array
	        { $sort: sortValue }, { $skip: skipValue }, { $limit: limitValue }]);
	
	        if (searchValue && searchValue.trim() !== '' && searchValue !== undefined) {
	
	          var slash_search = (0, _slashesActions.addSlash)(searchValue);
	          var searchKey = RegExp(slash_search, 'i');
	
	          studentsQuery = _students2.default.aggregate([{ $match: selector }, { $project: { students: '$students' } }, // Get list of students in the course
	          { $unwind: '$students' }, // Unwind Students array
	          { $lookup: { // Get student name from User table
	              from: 'users',
	              localField: 'students',
	              foreignField: '_id',
	              as: 'student'
	            } }, { $project: { _id: 0, 'student._id': 1, 'student.firstname': 1, 'student.lastname': 1, 'student.guest': 1 } }, // Remove unnecessary fields
	          { $unwind: '$student' }, // Unwind students array
	          { $match: { $or: [{ 'student.firstname': { $regex: searchKey } }, { 'student.lastname': { $regex: searchKey } }] } }, { $sort: sortValue }, { $skip: skipValue }, { $limit: limitValue }]);
	        }
	
	        var studentsEligibleQuery = _students2.default.find(selector).select('certificateEligible');
	
	        var resultData = [];
	
	        studentsEligibleQuery.exec(function (err, eligibleStudents) {
	          if (err) throw err;
	
	          totalTopicsCountQuery.exec(function (err, totalTopicsCount) {
	            if (err) throw err;
	
	            questionnaireCountQuery.exec(function (err, totalQuestionnaireCount) {
	              if (err) throw err;
	
	              studentsQuery.exec(function (err, studentsData) {
	                if (err) throw err;
	
	                var studentsList = [];
	                var eligibleStudentsList = [];
	                studentsData.forEach(function (data) {
	                  if (data.student.guest == false) {
	                    studentsList.push(data.student);
	                  }
	                });
	
	                eligibleStudents.forEach(function (data) {
	                  eligibleStudentsList = _.unionBy(data.certificateEligible, eligibleStudentsList);
	                });
	
	                eligibleStudentsList = eligibleStudentsList.map(function (item) {
	                  return "'" + item + "'";
	                }).join(',');
	
	                async.eachSeries(studentsList, function (student, cb) {
	                  //loop through each student and get details - async.eachSeries is a sync version of Array.map
	                  var row = {};
	                  var acc = 0;
	                  var topicId = [];
	                  var topicIdForQuestionnaireResults = [];
	                  totalQuestionnaireCount.map(function (topicData) {
	                    topicIdForQuestionnaireResults.push(topicData._id);
	                    topicId.push(String(topicData._id));
	                    return acc += Number(topicData.questionnaire.length);
	                  });
	                  row.totalQuestionnaire = acc;
	                  var userTopicsCountQuery = _datalog2.default.find({
	                    action: 'Topic_Status',
	                    uid: student._id,
	                    'value.roomId': req.query.roomId,
	                    'value.status': 2,
	                    'value.topicId': {
	                      $in: topicId
	                    }
	                  });
	
	                  //let userTopicsCountQuery = DataLog.find({}).select('value.topicId');
	                  userTopicsCountQuery.exec(function (err, userTopicsCount) {
	                    if (err) throw err;
	
	                    _gradeconfiguration2.default.findOne({
	                      companyid: person.profile.companyid._id
	                    }).exec(function (err, gradeResult) {
	                      if (err) {
	                        res.json({
	                          status: false,
	                          error: err.message
	                        });
	                      } else {
	                        var grades = [{
	                          from: 70,
	                          to: 100,
	                          result: 'DISTINCTION',
	                          grade: 'A'
	                        }, {
	                          from: 35,
	                          to: 69,
	                          result: 'PASS',
	                          grade: 'B'
	                        }, {
	                          from: 0,
	                          to: 34,
	                          result: 'FAIL',
	                          grade: 'C'
	                        }];
	                        if (gradeResult != null) {
	                          grades = gradeResult.grades;
	                        }
	
	                        row._id = student._id;
	                        row.name = student.firstname + ' ' + student.lastname;
	                        row.topicsCompletedPercentage = totalTopicsCount !== 0 ? Math.round(userTopicsCount.length / totalTopicsCount * 100) : 0;
	
	                        var matchSelectorForQuestionnaire = {
	                          roomId: mongoose.Types.ObjectId(req.query.roomId),
	                          submittedBy: mongoose.Types.ObjectId(student._id),
	                          topicId: {
	                            $in: topicIdForQuestionnaireResults
	                          }
	                        };
	                        var questionnaireQuery = _result2.default.aggregate([{ $match: matchSelectorForQuestionnaire }, { $group: {
	                            _id: 0,
	                            percentage: { $push: "$questionnairePercentage" }
	                          } }]);
	                        questionnaireQuery.exec(function (err, questionnaireList) {
	                          if (err) throw err;
	
	                          var questionnaireGrade = '';
	                          //Math.round( *100)/100 is to truncate to 0 or 2 decimal positions.
	                          row.questionnaireCount = questionnaireList[0] && questionnaireList[0].percentage ? questionnaireList[0].percentage.length : 0;
	                          var avergaPercentage = 0;
	                          if (row.questionnaireCount !== 0) {
	                            questionnaireList[0].percentage.map(function (val) {
	                              avergaPercentage += Number(val);
	                            });
	                          } else {
	                            avergaPercentage = 0;
	                          }
	                          row.questionnairePercentage = questionnaireList.length > 0 ? Math.round(avergaPercentage / questionnaireList[0].percentage.length) : 0;
	
	                          row.isCertificateEligible = _.includes(eligibleStudentsList, student._id);
	                          grades.map(function (configuredGradeData) {
	                            if (row.questionnairePercentage >= configuredGradeData.from && row.questionnairePercentage <= configuredGradeData.to) {
	                              row.questionnaireGrade = configuredGradeData.grade;
	                            }
	                          });
	                          resultData.push(row);
	
	                          if (studentsList.length === resultData.length) {
	                            res.json({
	                              status: true,
	                              count: studentsList.length,
	                              certificateData: resultData
	                            });
	                          }
	                          cb(null);
	                        });
	                      }
	                    });
	                  });
	                });
	              });
	            });
	          });
	        });
	      }
	    } catch (e) {
	      console.log("error in list room certificate data", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : toggleCertificateDownload
	*  @Purpose : For enabling/disabling certificate download for students.
	*  @Request Object : roomID, studentId
	*  @Response Object : Success - StudentId, Failure - Error message
	*  @Author : Shantanu Paul 
	*/
	function toggleCertificateDownload(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	
	    try {
	      //Verifying if request is valid or not
	      if (person == null || !req.query.roomId || !req.body.studentId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        var query = _students2.default.findOne({ roomId: req.query.roomId, certificateEligible: req.body.studentId }).exec(function (err, student) {
	          if (err) throw err;
	
	          if (student) {
	            _students2.default.update({ roomId: req.query.roomId }, { $pull: { certificateEligible: req.body.studentId } }).exec(function (err) {
	              if (err) throw err;
	
	              res.json({
	                status: true,
	                id: req.body.studentId
	              });
	            });
	          } else {
	            _students2.default.update({ roomId: req.query.roomId }, { $push: { certificateEligible: req.body.studentId } }).exec(function (err) {
	              if (err) throw err;
	
	              res.json({
	                status: true,
	                id: req.body.studentId
	              });
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("error in toggle certificate eligibility", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var gradeConfigurationSchema = new _mongoose2.default.Schema({
		companyid: {
			type: String,
			required: false
		},
		grades: [{
			from: {
				type: Number
			},
			to: {
				type: Number
			},
			result: {
				type: String,
				set: _slashesActions.addSlash,
				get: _slashesActions.stripSlash
			},
			grade: {
				type: String,
				set: _slashesActions.addSlash,
				get: _slashesActions.stripSlash
			}
		}],
		createdBy: {
			type: String
		},
		createdOn: {
			type: Date,
			default: (0, _moment2.default)().utc().toDate()
		},
		modifiedOn: {
			type: Date,
			default: (0, _moment2.default)().utc().toDate()
		}
	}, {
		toObject: { getters: true },
		toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('GradeConfiguration', gradeConfigurationSchema);

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var locationSchema = new _mongoose2.default.Schema({
		corporateId: {
			type: String,
			trim: true,
			ref: 'corporate'
			// required : true
		},
		locationName: {
			type: String,
			required: [true, "Please enter Location Name"],
			match: [/^[a-zA-Z\-\s]+$/, "Please enter valid Location Name"],
			maxlength: [50, 'Location Name length should be maximum of 50 characters'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash,
			index: true
		},
		description: {
			type: String,
			required: [true, "Please enter Description"],
			maxlength: [150, 'Description length should be maximum of 30 characters'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		createdBy: {
			type: String,
			required: true
		},
		updatedBy: {
			type: String,
			required: false
		},
		createdAt: {
			type: Date,
			required: true,
			default: (0, _moment2.default)().utc().toDate()
		},
		updatedAt: {
			type: Date,
			required: true,
			default: (0, _moment2.default)().utc().toDate()
		}
	}, {
		toObject: { getters: true },
		toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('Location', locationSchema);

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ParticipantsGroupSchema = new _mongoose2.default.Schema({
		groupName: {
			type: String,
			required: false,
			maxlength: [50, 'Group Name length should be maximum of 50 characters'],
			trim: true,
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash,
			index: true
		},
		companyid: {
			type: String,
			required: false
		},
		participants: [{
			type: _mongoose2.default.Schema.Types.ObjectId,
			ref: 'Users'
		}],
		createdBy: {
			type: String,
			ref: 'Users'
		},
		createdOn: {
			type: Date,
			default: (0, _moment2.default)().utc().toDate()
		},
		modifiedOn: {
			type: Date,
			default: (0, _moment2.default)().utc().toDate()
		}
	}, {
		toObject: { getters: true },
		toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('ParticipantsGroup', ParticipantsGroupSchema);

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _slashesActions = __webpack_require__(4);
	
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	
	
	var resultSchema = new mongoose.Schema({
		roomId: {
			type: mongoose.Schema.Types.ObjectId,
			ref: 'Room'
		},
		topicId: {
			type: mongoose.Schema.Types.ObjectId
		},
		questionnaireId: {
			type: mongoose.Schema.Types.ObjectId,
			ref: 'Questionnaire'
		},
		totalMarks: {
			type: String,
			maxlength: [3, 'Total Marks length should be maximum of 3 characters'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		obtainedMarks: {
			type: String,
			maxlength: [3, 'Obtained Marks length should be maximum of 3 characters'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		grade: {
			type: String,
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		questionnairePercentage: {
			type: String,
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		result: {
			type: String,
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		correctAns: {
			type: Array
		},
		wrongAns: {
			type: Array
		},
		submittedBy: {
			type: mongoose.Schema.Types.ObjectId,
			ref: 'Users'
		}
	}, {
		toObject: { getters: true },
		toJSON: { getters: true }
	});
	
	exports.default = mongoose.model('Result', resultSchema);

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Schema = _mongoose2.default.Schema;
	var moment = __webpack_require__(1);
	
	
	var uploadSchema = new Schema({
	  roomId: {
	    type: String
	  },
	  fileName: {
	    type: String,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  topicId: {
	    type: String,
	    ref: 'Topics'
	  },
	  fileType: {
	    type: String
	  },
	  isEnable: {
	    type: Boolean,
	    default: false
	  },
	  title: {
	    type: String
	  },
	  duration: {
	    type: String
	  },
	  description: {
	    type: String,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  createdAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  },
	  createdBy: {
	    type: String,
	    required: false
	  },
	  updatedBy: {
	    type: String,
	    required: false
	  },
	  updatedAt: {
	    type: Date,
	    required: true,
	    default: moment().utc().toDate()
	  }
	
	}, {
	  toObject: { getters: true },
	  toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('Uploads', uploadSchema);

/***/ },
/* 79 */
/***/ function(module, exports) {

	module.exports = require("async/eachOf");

/***/ },
/* 80 */
/***/ function(module, exports) {

	module.exports = require("immutable");

/***/ },
/* 81 */
/***/ function(module, exports) {

	module.exports = require("redux");

/***/ },
/* 82 */
/***/ function(module, exports) {

	module.exports = require("shelljs");

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.configureStore = configureStore;
	
	var _redux = __webpack_require__(81);
	
	var _reduxThunk = __webpack_require__(264);
	
	var _reduxThunk2 = _interopRequireDefault(_reduxThunk);
	
	var _DevTools = __webpack_require__(98);
	
	var _DevTools2 = _interopRequireDefault(_DevTools);
	
	var _reducers = __webpack_require__(216);
	
	var _reducers2 = _interopRequireDefault(_reducers);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Main store function
	 */
	function configureStore() {
	  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	  // Middleware and store enhancers
	  var enhancers = [(0, _redux.applyMiddleware)(_reduxThunk2.default)];
	
	  if (process.env.CLIENT && process.env.NODE_ENV === 'development') {
	    // Enable DevTools only when rendering on client and during development.
	    enhancers.push(window.devToolsExtension ? window.devToolsExtension() : _DevTools2.default.instrument());
	  }
	
	  var store = (0, _redux.createStore)(_reducers2.default, initialState, _redux.compose.apply(undefined, enhancers));
	
	  // For hot reloading reducers
	  if (false) {
	    // Enable Webpack hot module replacement for reducers
	    module.hot.accept('./reducers', function () {
	      var nextReducer = require('./reducers').default; // eslint-disable-line global-require
	      store.replaceReducer(nextReducer);
	    });
	  }
	
	  return store;
	}

/***/ },
/* 84 */
/***/ function(module, exports) {

	module.exports = require("react-helmet");

/***/ },
/* 85 */
/***/ function(module, exports) {

	module.exports = require("webpack");

/***/ },
/* 86 */
/***/ function(module, exports) {

	module.exports = require("react-bootstrap-datetimepicker");

/***/ },
/* 87 */
/***/ function(module, exports) {

	module.exports = require("detect-node");

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.dashboardData = undefined;
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var initialState = {
	  edit: false, myrooms: null, upcoming: [], past: [], error: [], success: '', data: {},
	  mycontacts: [],
	  roomtoken: '',
	  roomSuccess: false,
	  topicData: {},
	  roomName: '',
	  uploadData: '',
	  questionData: '',
	  answerData: '',
	  submittedData: {},
	  questionnaireData: {},
	  assignmentData: {},
	  pollData: {},
	  roomId: '',
	  scheduledDates: [],
	  selectedDate: (0, _moment2.default)().endOf('day').utc().toDate()
	};
	
	var UserDashboardReducer = function UserDashboardReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _UserDashboardActions.SET_DASHBOARD:
	      return Object.assign({}, state, action.data);
	    case _UserDashboardActions.MY_ROOMS:
	      return Object.assign({}, state, { edit: action.status, myrooms: action.myrooms, error: action.error });
	    case _UserDashboardActions.UPCOMING_SCHEDULE:
	      {
	        var newobj = void 0;
	        if (action.schedules) newobj = { edit: action.status, upcoming: action.schedules, past: [] };else newobj = { edit: action.status, past: [] };
	        return Object.assign({}, state, newobj);
	      }
	    case _UserDashboardActions.PAST_SCHEDULE:
	      return Object.assign({}, state, { edit: action.status, upcoming: [], past: action.schedules });
	    case _UserDashboardActions.CURRENT_SCHEDULE:
	      return Object.assign({}, state, { edit: action.status, data: action.data });
	    case _UserDashboardActions.MY_CONTACTS:
	      return Object.assign({}, state, { edit: action.status, mycontacts: action.mycontacts });
	    case _UserDashboardActions.GET_TOKEN:
	      return Object.assign({}, state, { roomtoken: action.token, roomSuccess: action.roomSuccess });
	    case _UserDashboardActions.FETCHED_CONFERENCE_TOPIC:
	      return Object.assign({}, state, {
	        topicData: action.data,
	        roomName: action.roomName,
	        roomId: action.roomId
	      });
	
	    case _UserDashboardActions.FETCHED_CONFERENCE_TOPIC_FILES:
	      return Object.assign({}, state, {
	        uploadData: action.data
	      });
	
	    case _UserDashboardActions.FETCH_CONFERENCE_TOPIC_QUESTIONS_FAILED:
	      return Object.assign({}, state, {
	        questionData: action.data,
	        submittedData: action.submittedData
	      });
	
	    case _UserDashboardActions.CLEAR_ROOMS:
	      return Object.assign({}, state, { edit: false, myrooms: null, upcoming: [], past: [], error: [], data: {},
	        roomtoken: '',
	        roomSuccess: false,
	        topicData: {},
	        /*roomName : '',*/
	        uploadData: '',
	        questionData: '',
	        answerData: '',
	        submittedData: '',
	        assignmentData: '',
	        pollData: '' /*,
	                     roomId: ''*/ });
	    case _UserDashboardActions.FETCHED_FEEDBACK_TYPE:
	      return Object.assign({}, state, { edit: action.status, data: action.data, questionnaireData: action.questionnaireData });
	    case _UserDashboardActions.FETCHED_FEEDBACK_TYPE_FAILED:
	      return Object.assign({}, state, { edit: action.status });
	    case _UserDashboardActions.FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS:
	      return Object.assign({}, state, { edit: action.status, questionnaireData: action.data });
	    case _UserDashboardActions.FETCHED_CUSTOMIZE_QUESTIONNAIRE_QUESTIONS_FAILED:
	      return Object.assign({}, state, { edit: action.status, questionnaireData: action.data });
	    case _UserDashboardActions.SAVE_FEEDBACK_TYPE:
	      return Object.assign({}, state, {
	        success: action.message
	      });
	    case _UserDashboardActions.CLEAR_FEEDBACK:
	      return Object.assign({}, state, { success: '', error: [], questionnaireData: {} });
	    case _UserDashboardActions.SCHEDULE_DATES:
	      return Object.assign({}, state, { scheduledDates: action.dates });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	
	var dashboardData = exports.dashboardData = function dashboardData(state) {
	  return state.dashboard;
	};
	// export const conferenceData  = state => state.dashboard;
	
	// Export Reducer
	exports.default = UserDashboardReducer;

/***/ },
/* 89 */
/***/ function(module, exports) {

	module.exports = require("fileapi");

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CLEAR_BROADCAST_NOTIFICATION = exports.BROADCAST_NOTIFICATION = undefined;
	exports.saveBroadcastRequest = saveBroadcastRequest;
	exports.getBroadcastData = getBroadcastData;
	exports.getHandraiseQues = getHandraiseQues;
	exports.sendComment = sendComment;
	exports.getComments = getComments;
	exports.deleteBroadcast = deleteBroadcast;
	exports.saveReply = saveReply;
	exports.getReplies = getReplies;
	exports.updateLikeRequest = updateLikeRequest;
	exports.broadcastNotifications = broadcastNotifications;
	exports.setBroadcastNotification = setBroadcastNotification;
	exports.updateUserId = updateUserId;
	exports.updateBroadcastController = updateBroadcastController;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var BROADCAST_NOTIFICATION = exports.BROADCAST_NOTIFICATION = 'BROADCAST_NOTIFICATION';
	var CLEAR_BROADCAST_NOTIFICATION = exports.CLEAR_BROADCAST_NOTIFICATION = 'CLEAR_BROADCAST_NOTIFICATION';
	
	function saveBroadcastRequest(data) {
	  if (data._id) {
	    var id = data._id;
	    delete data['_id'];
	    return (0, _apiCaller2.default)('broadcast/' + id, 'put', {
	      data: data
	    });
	  } else {
	    return (0, _apiCaller2.default)('broadcast', 'post', {
	      data: data
	    });
	  }
	}
	
	function getBroadcastData(data) {
	  return (0, _apiCaller2.default)('broadcast-data/' + data.limit, 'get');
	}
	
	function getHandraiseQues(recordId) {
	  //return callApi('handraise-question/' + recordId, 'get');
	}
	
	function sendComment(id, comment) {
	  return (0, _apiCaller2.default)('save-broadcast-comment/' + id, 'put', {
	    data: { comment: comment }
	  });
	}
	
	function getComments(data) {
	  return (0, _apiCaller2.default)('get-broadcast-comments/' + data._id + '/' + data.limit, 'get');
	}
	
	function deleteBroadcast(recordId) {
	  return (0, _apiCaller2.default)('delete-broadcast/' + recordId, 'delete');
	}
	
	function saveReply(data, bid) {
	  return (0, _apiCaller2.default)('broadcast-comment-reply/' + bid, 'put', {
	    data: data
	  });
	}
	
	function getReplies(data) {
	  return (0, _apiCaller2.default)('comment-replies/' + data._id + '/' + data.replyOn, 'get');
	}
	
	function updateLikeRequest(data) {
	  return (0, _apiCaller2.default)('update-likes', 'put', {
	    data: data
	  });
	}
	
	//Code added by - Najib, Desc - to show broadcst notofication after posting news
	function broadcastNotifications(obj) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('broadcast-notifications', 'get').then(function (res) {
	      return dispatch(setBroadcastNotification(res));
	    });
	  };
	}
	
	function setBroadcastNotification(response) {
	  return {
	    type: BROADCAST_NOTIFICATION,
	    status: response.status,
	    notifications: response.notifications,
	    total: response.total
	  };
	}
	
	function updateUserId() {
	  console.log("At action");
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('update-user-status', 'get').then(function (res) {
	      return dispatch(updateBroadcastController(res));
	    });
	  };
	}
	
	//code chaged by - Najib, Clear notification data 
	function updateBroadcastController(response) {
	  console.log("At response");
	  return {
	    type: CLEAR_BROADCAST_NOTIFICATION,
	    status: true,
	    count: 0
	  };
	}

/***/ },
/* 91 */
/***/ function(module, exports) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.reloadTopicList = reloadTopicList;
	exports.reloadTopicContent = reloadTopicContent;
	exports.reloadUplodFiles = reloadUplodFiles;
	exports.reloadTopicQuestionnaires = reloadTopicQuestionnaires;
	exports.reloadTopicPdfView = reloadTopicPdfView;
	exports.reloadConductQuestion = reloadConductQuestion;
	exports.reloadQuestionnaire = reloadQuestionnaire;
	exports.reloadPollsList = reloadPollsList;
	var RELOAD_TOPIC_LIST = exports.RELOAD_TOPIC_LIST = 'RELOAD_TOPIC_LIST';
	var RELOAD_TOPIC_CONTENT = exports.RELOAD_TOPIC_CONTENT = 'RELOAD_TOPIC_CONTENT';
	var RELOAD_POLLS = exports.RELOAD_POLLS = 'RELOAD_POLLS';
	var RELOAD_UPLOAD_FILES = exports.RELOAD_UPLOAD_FILES = 'RELOAD_UPLOAD_FILES';
	var RELOAD_TOPIC_QUESTIONNAIRES = exports.RELOAD_TOPIC_QUESTIONNAIRES = 'RELOAD_TOPIC_QUESTIONNAIRES';
	var RELOAD_TOPIC_PDFVIEW = exports.RELOAD_TOPIC_PDFVIEW = 'RELOAD_TOPIC_PDFVIEW';
	var RELOAD_REMOVED_QUESTIONNAIRES = exports.RELOAD_REMOVED_QUESTIONNAIRES = 'RELOAD_REMOVED_QUESTIONNAIRES';
	var RELOAD_CONDUCT_QUESTION = exports.RELOAD_CONDUCT_QUESTION = 'RELOAD_CONDUCT_QUESTION';
	var RELOAD_POLLS_LIST = exports.RELOAD_POLLS_LIST = 'RELOAD_POLLS_LIST';
	
	function reloadTopicList() {
		return {
			type: RELOAD_TOPIC_LIST
		};
	}
	
	function reloadTopicContent() {
		return {
			type: RELOAD_TOPIC_CONTENT
		};
	}
	
	function reloadUplodFiles() {
		return {
			type: RELOAD_UPLOAD_FILES
		};
	}
	
	function reloadTopicQuestionnaires() {
		return {
			type: RELOAD_TOPIC_QUESTIONNAIRES
		};
	}
	
	function reloadTopicPdfView() {
		return {
			type: RELOAD_TOPIC_PDFVIEW
		};
	}
	
	function reloadConductQuestion(obj) {
		return {
			type: RELOAD_CONDUCT_QUESTION
		};
	}
	
	function reloadQuestionnaire() {
		return {
			type: RELOAD_REMOVED_QUESTIONNAIRES
		};
	}
	
	function reloadPollsList(obj) {
		return {
			type: RELOAD_POLLS_LIST
		};
	}

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.broadcastData = undefined;
	
	var _BroadcastActions = __webpack_require__(90);
	
	var initialState = {
	  individualCount: {}, total: 0
	};
	
	//Code added by - Najib, Reducer to keep the count and data of broadcast posted news
	var BroadcastReducer = function BroadcastReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	
	    case _BroadcastActions.BROADCAST_NOTIFICATION:
	      {
	        return Object.assign({}, state, { individualCount: action.notifications, total: action.total });
	      }
	    case _BroadcastActions.CLEAR_BROADCAST_NOTIFICATION:
	      {
	        return Object.assign({}, state, { total: 0 });
	      }
	    default:
	      return state;
	  }
	};
	
	var broadcastData = exports.broadcastData = function broadcastData(state) {
	  return state.broadcast;
	};
	
	// Export Reducer
	exports.default = BroadcastReducer;

/***/ },
/* 93 */,
/* 94 */
/***/ function(module, exports) {

	module.exports = require("react-addons-update");

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.localizationData = exports.enabledLanguages = undefined;
	exports.loginLanguageType = loginLanguageType;
	
	var _reactIntl = __webpack_require__(11);
	
	var _intl = __webpack_require__(245);
	
	var _intl2 = _interopRequireDefault(_intl);
	
	__webpack_require__(246);
	
	var _en = __webpack_require__(258);
	
	var _en2 = _interopRequireDefault(_en);
	
	var _en3 = __webpack_require__(179);
	
	var _en4 = _interopRequireDefault(_en3);
	
	__webpack_require__(247);
	
	var _hi = __webpack_require__(259);
	
	var _hi2 = _interopRequireDefault(_hi);
	
	var _hi3 = __webpack_require__(180);
	
	var _hi4 = _interopRequireDefault(_hi3);
	
	var _lmsen = __webpack_require__(181);
	
	var _lmsen2 = _interopRequireDefault(_lmsen);
	
	var _lmshi = __webpack_require__(182);
	
	var _lmshi2 = _interopRequireDefault(_lmshi);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// list of available languages
	var enabledLanguages = exports.enabledLanguages = [['English', 'en'], ['Hindi', 'hi']];
	
	// this object will have language-specific data added to it which will be placed in the state when that language is active
	// if localization data get to big, stop importing in all languages and switch to using API requests to load upon switching languages
	var localizationData = exports.localizationData = {};
	
	// here you bring in 'intl' browser polyfill and language-specific polyfills
	// (needed as safari doesn't have native intl: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl)
	// as well as react-intl's language-specific data
	// be sure to use static imports for language or else every language will be included in your build (adds ~800 kb)
	
	
	// need Intl polyfill, Intl not supported in Safari
	
	global.Intl = _intl2.default;
	
	// use this to allow nested messages, taken from docs:
	// https://github.com/yahoo/react-intl/wiki/Upgrade-Guide#flatten-messages-object
	function flattenMessages() {
	  var nestedMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  return Object.keys(nestedMessages).reduce(function (messages, key) {
	    var value = nestedMessages[key];
	    var prefixedKey = prefix ? prefix + '.' + key : key;
	
	    if (typeof value === 'string') {
	      messages[prefixedKey] = value; // eslint-disable-line no-param-reassign
	    } else {
	      Object.assign(messages, flattenMessages(value, prefixedKey));
	    }
	
	    return messages;
	  }, {});
	}
	
	// bring in intl polyfill, react-intl, and app-specific language data
	
	(0, _reactIntl.addLocaleData)(_en2.default);
	localizationData.en = _en4.default;
	localizationData.en.messages = flattenMessages(localizationData.en.messages);
	
	(0, _reactIntl.addLocaleData)(_hi2.default);
	localizationData.hi = _hi4.default;
	localizationData.hi.messages = flattenMessages(localizationData.hi.messages);
	
	function loginLanguageType(lang, type) {
	
	  if (type == 'LMS') {
	    if (lang == 'en') {
	      (0, _reactIntl.addLocaleData)(_en2.default);
	      localizationData.en = _lmsen2.default;
	      localizationData.en.messages = flattenMessages(_lmsen2.default.messages);
	      return localizationData;
	    } else if (lang == 'hi') {
	      (0, _reactIntl.addLocaleData)(_hi2.default);
	      localizationData.hi = _lmshi2.default;
	      localizationData.hi.messages = flattenMessages(_lmshi2.default.messages);
	      return localizationData;
	    }
	  } else {
	    if (lang == 'en') {
	      (0, _reactIntl.addLocaleData)(_en2.default);
	      localizationData.en = _en4.default;
	      localizationData.en.messages = flattenMessages(_en4.default.messages);
	      return localizationData;
	    } else if (lang == 'hi') {
	      (0, _reactIntl.addLocaleData)(_hi2.default);
	      localizationData.hi = _hi4.default;
	      localizationData.hi.messages = flattenMessages(_hi4.default.messages);
	      return localizationData;
	    }
	  }
	}

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.jQuery = exports.animation = undefined;
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsUpdate = __webpack_require__(94);
	
	var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);
	
	var _classnames = __webpack_require__(237);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _animationMixin = __webpack_require__(184);
	
	var _animationMixin2 = _interopRequireDefault(_animationMixin);
	
	var _jQueryMixin = __webpack_require__(185);
	
	var _jQueryMixin2 = _interopRequireDefault(_jQueryMixin);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function noop() {}
	
	var ToastMessageSpec = {
	  displayName: "ToastMessage",
	
	  getDefaultProps: function getDefaultProps() {
	    var iconClassNames = {
	      error: "toast-error",
	      info: "toast-info",
	      success: "toast-success",
	      warning: "toast-warning"
	    };
	
	    return {
	      className: "toast",
	      iconClassNames: iconClassNames,
	      titleClassName: "toast-title",
	      messageClassName: "toast-message",
	      tapToDismiss: true,
	      closeButton: false
	    };
	  },
	  handleOnClick: function handleOnClick(event) {
	    this.props.handleOnClick(event);
	    if (this.props.tapToDismiss) {
	      this.hideToast(true);
	    }
	  },
	  _handle_close_button_click: function _handle_close_button_click(event) {
	    event.stopPropagation();
	    this.hideToast(true);
	  },
	  _handle_remove: function _handle_remove() {
	    this.props.handleRemove(this.props.toastId);
	  },
	  _render_close_button: function _render_close_button() {
	    return this.props.closeButton ? _react2.default.createElement("button", {
	      className: "toast-close-button", role: "button",
	      onClick: this._handle_close_button_click,
	      dangerouslySetInnerHTML: { __html: "&times;" }
	    }) : false;
	  },
	  _render_title_element: function _render_title_element() {
	    return this.props.title ? _react2.default.createElement("div", { className: this.props.titleClassName }, this.props.title) : false;
	  },
	  _render_message_element: function _render_message_element() {
	    return this.props.message ? _react2.default.createElement("div", { className: this.props.messageClassName }, this.props.message) : false;
	  },
	  render: function render() {
	    var iconClassName = this.props.iconClassName || this.props.iconClassNames[this.props.type];
	
	    return _react2.default.createElement("div", {
	      className: (0, _classnames2.default)(this.props.className, iconClassName),
	      style: this.props.style,
	      onClick: this.handleOnClick,
	      onMouseEnter: this.handleMouseEnter,
	      onMouseLeave: this.handleMouseLeave
	    }, this._render_close_button(), this._render_title_element(), this._render_message_element());
	  }
	};
	
	var animation = exports.animation = _react2.default.createClass((0, _reactAddonsUpdate2.default)(ToastMessageSpec, {
	  displayName: { $set: "ToastMessage.animation" },
	  mixins: { $set: [_animationMixin2.default] }
	}));
	
	var jQuery = exports.jQuery = _react2.default.createClass((0, _reactAddonsUpdate2.default)(ToastMessageSpec, {
	  displayName: { $set: "ToastMessage.jQuery" },
	  mixins: { $set: [_jQueryMixin2.default] }
	}));
	
	/*
	 * assign default noop functions
	 */
	ToastMessageSpec.handleMouseEnter = noop;
	ToastMessageSpec.handleMouseLeave = noop;
	ToastMessageSpec.hideToast = noop;
	
	var ToastMessage = _react2.default.createClass(ToastMessageSpec);
	
	ToastMessage.animation = animation;
	ToastMessage.jQuery = jQuery;
	
	exports.default = ToastMessage;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.leftMenuToggle = undefined;
	
	var _AppActions = __webpack_require__(70);
	
	// Initial State
	var initialState = {
	  showAddPost: false,
	  leftMenu: false
	}; // Import Actions
	
	
	var AppReducer = function AppReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _AppActions.LEFT_MENU_TOGGLE:
	      return {
	        leftMenu: !state.leftMenu
	      };
	      break;
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	
	// Get showAddPost
	var leftMenuToggle = exports.leftMenuToggle = function leftMenuToggle(state) {
	  return state.app.leftMenu;
	};
	
	// Export Reducer
	exports.default = AppReducer;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reduxDevtools = __webpack_require__(261);
	
	var _reduxDevtoolsLogMonitor = __webpack_require__(263);
	
	var _reduxDevtoolsLogMonitor2 = _interopRequireDefault(_reduxDevtoolsLogMonitor);
	
	var _reduxDevtoolsDockMonitor = __webpack_require__(262);
	
	var _reduxDevtoolsDockMonitor2 = _interopRequireDefault(_reduxDevtoolsDockMonitor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = (0, _reduxDevtools.createDevTools)(_jsx(_reduxDevtoolsDockMonitor2.default, {
	  toggleVisibilityKey: 'ctrl-h',
	  changePositionKey: 'ctrl-w'
	}, void 0, _jsx(_reduxDevtoolsLogMonitor2.default, {})));

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
			value: true
	});
	exports.createBroadcast = createBroadcast;
	exports.updateBroadcast = updateBroadcast;
	exports.updateLikes = updateLikes;
	exports.fetchBroadcastData = fetchBroadcastData;
	exports.deleteBroadcast = deleteBroadcast;
	exports.saveBroadcastComment = saveBroadcastComment;
	exports.getComments = getComments;
	exports.saveReply = saveReply;
	exports.getReplies = getReplies;
	exports.broadcastNotifications = broadcastNotifications;
	exports.updateUserStatus = updateUserStatus;
	exports.fetchBroadcastNews = fetchBroadcastNews;
	exports.fetchComments = fetchComments;
	exports.fetchReplies = fetchReplies;
	
	var _broadcast = __webpack_require__(232);
	
	var _broadcast2 = _interopRequireDefault(_broadcast);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _students = __webpack_require__(33);
	
	var _students2 = _interopRequireDefault(_students);
	
	var _adminUser = __webpack_require__(13);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _authorization = __webpack_require__(10);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var _ = __webpack_require__(7);
	
	/**
	* @Function Name: "createHandraise",
	* @Purpose: "To create new package.",
	* @Request Object: data : { question, roomKey },
	* @Response Object: Success- {status : true, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function createBroadcast(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.body.data) {
											var obj = req.body.data;
	
											//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
											var bussinessID = null;
											if (person.profile.companyid && person.profile.companyid._id) {
													bussinessID = person.profile.companyid._id;
											}
											obj['companyid'] = bussinessID;
											obj["author"] = person._id;
	
											//code changed by - Najib, Added extra field to to keep ids of users who posts news
											obj["status"] = [person._id];
											obj["createdAt"] = moment().utc().toDate();
											obj["modifiedAt"] = moment().utc().toDate();
	
											//console.log("broad Obj", obj);
	
											// create new Broadcast 
											var objEntity = new _broadcast2.default(obj);
											objEntity.save(function (err, doc) {
													if (err) {
															console.log("err === ", err);
															res.json({ status: false, error: err });
													} else if (doc) res.json({ status: true, message: "Broadcasted successfully" });else res.json({ status: false, error: "Internal server error." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("error in createBroadcast inner", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in createBroadcast", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	* @Function Name: "updateHandraise",
	* @Purpose: "To create new package.",
	* @Request Object: params : id, data : { question, roomKey },
	* @Response Object: Success- {status : true, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function updateBroadcast(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.body.data && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
											var obj = req.body.data;
											var recordId = mongoose.Types.ObjectId(req.params.id);
	
											// check valid Broadcast or not
											var handQuery = _broadcast2.default.findOne({ _id: recordId });
											handQuery.exec(function (broadcasterr, broadcast) {
													if (broadcasterr) {
															console.log("handerr ==== ", broadcasterr);
															res.json({ status: false, error: broadcasterr });
													} else if (broadcast) {
	
															// check created by current user or not
															if (person._id.str == broadcast.author.str) {
																	obj['modifiedAt'] = moment().utc().toDate();
	
																	_broadcast2.default.update({ _id: recordId }, { $set: obj }, { runValidators: true }, function (err, doc) {
																			if (err) res.json({ status: false, error: err });else if (doc) res.json({ status: true, message: "Updated successfully" });else res.json({ status: false, error: "Internal server error." });
																	});
															} else res.json({ status: false, error: "Access denied." });
													} else res.json({ status: false, error: "Invalid Broadcast." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("error in updateHandraise ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in updateHandraise", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	* @Function Name: "updateLikes",
	* @Purpose: "To create new package.",
	* @Request Object: params : id, data : { question, roomKey },
	* @Response Object: Success- {status : true, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function updateLikes(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.body.data) {
											var obj = req.body.data;
											var recordId = mongoose.Types.ObjectId(obj._id);
	
											_broadcast2.default.find({
													"_id": recordId,
													"likes.likedBy": mongoose.Types.ObjectId(person._id)
											}).exec(function (err, doc) {
													if (err) {
															console.log(err);
															res.json({
																	status: false,
																	error: err.message
															});
													}
	
													//Verifying if data is there or not
													if (doc) {
															//console.log("doc---", doc);
															//Query for removing workplace data in user profile
															_broadcast2.default.update({
																	"_id": recordId,
																	"likes.likedBy": mongoose.Types.ObjectId(person._id)
															}, {
																	$pull: {
																			likes: {
																					_id: 'doc.likes._id'
																			}
																	}
															}, {
																	upsert: true
															}, function (err, result) {
																	if (err) {
																			console.log(err);
																			res.json({
																					status: false,
																					error: 'Unlike failed'
																			});
																	} else {
																			// console.log("result", result)
																			res.json({
																					status: true,
																					success: 'liked successfully'
																			});
																	}
															});
													} else {
															var newObj = '';
															newObj['likedBy'] = person._id;
															newObj['likedAt'] = moment().utc().toDate();
	
															//if array has data then add in existing array 
															if (broadcast && broadcast.likes && broadcast.likes.length > 0) {
																	updateQuery = _broadcast2.default.update({ _id: recordId }, { $push: { likes: newObj } }, { runValidators: true });
															} else {
																	updateQuery = _broadcast2.default.update({ _id: recordId }, { $set: { likes: [newObj] } }, { runValidators: true });
															}
															if (updateQuery != null) {
																	updateQuery.exec(function (err, doc) {
																			if (err) res.json({ status: false, error: err });else if (doc) {
	
																					// updated succesfully
																					res.json({ status: true });
																			} else res({ status: false, error: "Internal server error, Please try again." });
																	});
															} else res.json({ status: false, error: "Internal server error." });
													}
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("error in updateLikes", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in updateLikes", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : fetchHandraiseData
	*  @Purpose : Fetch the list of questions with auther name
	*  @Request Object : params : { key: 'room key', limit: 'count'}
	*  @Response Object : Success - Success message, List data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function fetchBroadcastData(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.limit) {
	
											//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
											var bussinessID = null;
											if (person.profile.companyid && person.profile.companyid._id) {
													bussinessID = person.profile.companyid._id;
											}
	
											//handraise list object
											var objEntity = {
													companyid: bussinessID,
													role: person.role,
													limit: Number(req.params.limit),
													id: person._id
	
													//function with object and call back as its parameter to get question list
											};fetchBroadcastNews(objEntity, function (getError, getData, count) {
													// console.log("error", getError);
													// console.log("getData", getData);
													if (getError == null) {
	
															//successfull response if error is null
															res.json({ status: true, data: getData, count: count });
													} else {
	
															//failed response if call back returns any query error
															res.json({ status: false, error: getError });
													}
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in fetchHandraiseData inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("eror in fetchHandraiseData", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : deleteBroadcast
	*  @Purpose : Function deletes question based on rocordId
	*  @Request Object : param : { id: 'Broadcast Id' }
	*  @Response Object : Success - Message, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function deleteBroadcast(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
											var recordId = mongoose.Types.ObjectId(req.params.id);
	
											//check for user Id in collection
											var handQuery = _broadcast2.default.findOne({ _id: recordId });
											handQuery.exec(function (broadcasterr, broadcast) {
													if (broadcasterr) res.json({ status: false, error: "Invalid Question." });else if (broadcast) {
															if (broadcast.author.str == person._id.str) {
	
																	//remove question from colletion based on recordId
																	var removeQuery = _broadcast2.default.remove({ _id: recordId });
																	removeQuery.exec(function (err, doc) {
																			if (err) res.json({ status: false, error: err });else {
	
																					//successfull resposne
																					res.json({ status: true });
																			}
																	});
															} else res.json({ status: false, error: "Access denied." });
													} else res.json({ status: false, error: "Invalid Broadcast." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in deleteBroadcast inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in deleteBroadcast", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : saveBroadcastComment
	*  @Purpose : Function saves the answer against a question
	*  @Request Object : params : {id}, data : { }
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function saveBroadcastComment(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
											var recordId = mongoose.Types.ObjectId(req.params.id);
	
											//query to validate Id
											var handQuery = _broadcast2.default.findOne({ _id: recordId });
											handQuery.exec(function (handerr, broadcast) {
													if (handerr) res.json({ status: false, error: "Invalid Question." });else if (broadcast) {
															var _updateQuery = null;
															var obj = req.body.data;
															obj['author'] = person._id;
															obj['commentAt'] = moment().utc().toDate();
	
															//if array has data then add in existing array 
															if (broadcast.comments && broadcast.comments.length > 0) {
																	_updateQuery = _broadcast2.default.update({ _id: recordId }, { $push: { comments: obj } }, { runValidators: true });
															} else {
																	_updateQuery = _broadcast2.default.update({ _id: recordId }, { $set: { comments: [obj] } }, { runValidators: true });
															}
															if (_updateQuery != null) {
																	_updateQuery.exec(function (err, doc) {
																			if (err) res.json({ status: false, error: err });else if (doc) {
	
																					// updated succesfully
																					res.json({ status: true });
																			} else res({ status: false, error: "Internal server error, Please try again." });
																	});
															} else res.json({ status: false, error: "Internal server error." });
													} else res.json({ status: false, error: "Invalid Broadcast." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in saveBroadcastAnswer inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in saveBroadcastAnswer", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : getComments
	*  @Purpose : Fetch the answers based on Broadcast Id and count of answers
	*  @Request Object : data : { _Id: 'Broadcast Id', limit: no of answers}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function getComments(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id) && req.params.limit) {
											var obj = {
													_id: req.params.id,
													limit: Number(req.params.limit)
											};
	
											// a function send an obj and callback as its parameters to get answers data
											fetchComments(obj, function (geterr, getdata, count) {
													if (getdata) {
	
															// response data
															res.json({ status: true, data: getdata, count: count });
													} else res.json({ status: false, error: "Invalid request." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in getAnswers inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in getAnswers", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : saveReply
	*  @Purpose : Function saves reply on answers as per "replyOn" Id
	*  @Request Object : params : id, data : { comment:'comment on answer', replyOn : 'answer Id'}
	*  @Response Object : Success - Message, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function saveReply(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
											var recordId = mongoose.Types.ObjectId(req.params.id);
											var obj = req.body.data;
											obj['author'] = person._id;
											obj['replyAt'] = moment().utc().toDate();
											//query to validate Id
											var handQuery = _broadcast2.default.findOne({ _id: recordId });
											handQuery.exec(function (broaderr, broadcast) {
													if (broaderr) res.json({ status: false, error: "Invalid broadcast." });else if (broadcast) {
															var _updateQuery2 = null;
	
															//if array has value then add in the array
															if (broadcast.replies && broadcast.replies.length > 0) {
																	_updateQuery2 = _broadcast2.default.update({ _id: recordId }, { $push: { replies: obj } }, { runValidators: true });
															} else {
																	_updateQuery2 = _broadcast2.default.update({ _id: recordId }, { $set: { replies: [obj] } }, { runValidators: true });
															}
															_updateQuery2.exec(function (err, doc) {
																	if (err) {
																			res.json({ status: false, error: err });
																	} else {
	
																			//successfull response
																			res.json({ status: true });
																	}
															});
													} else res.json({ status: false, error: "Invalid Broadcast." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in saveReply inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in saveReply", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : getReplies
	*  @Purpose : Fetch replies on particular answer
	*  @Request Object : data : { _Id: 'Broadcast Id', comment:'comment on answer' author : 'user Id', replyOn : 'answer Id'}
	*  @Response Object : Success - Message, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function getReplies(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id) && req.params.replyOn && mongoose.Types.ObjectId.isValid(req.params.replyOn)) {
											var obj = {
													_id: req.params.id,
													replyOn: req.params.replyOn
											};
	
											//inner function to get replies and count as callback params 
											fetchReplies(obj, function (geterr, getdata, count) {
													if (getdata) {
	
															//response data
															res.json({ status: true, data: getdata, count: count });
													} else res.json({ status: false, error: "Invalid request." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in getReplies inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in getReplies", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	* @Function Name: "broadcastNotifications",
	* @Purpose: "To get the broadcast notitfication post posting news.",
	* @Request Object: {},
	* @Response Object: Success- {status : true, total, notifications }, Failure- {status : false, error},
	* @Author: "Najib Hasnain"
	*/
	function broadcastNotifications(req, res) {
	
			// Varifying request is valid or not
			(0, _authorization.checkValidRequest)(req.headers, function (person) {
					try {
							if (person != null) {
									if (person.contacts) {
	
											//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
											var bussinessID = null;
											if (person.profile.companyid && person.profile.companyid._id) {
													bussinessID = person.profile.companyid._id;
											}
	
											// fetch unread message records
											var query = _broadcast2.default.find({ companyid: mongoose.Types.ObjectId(bussinessID), status: { $nin: [person._id] } });
											query.exec(function (error, result) {
													// console.log("result === ",result);
													if (error) {
															console.log("error in broadcastNotifications === ", error);
															res.json({ status: true, total: 0, notifications: {} });
													} else if (result && result.length > 0) {
	
															var total = 0;
	
															// individual count and total calcutations
															var response = _.countBy(result, function (broadcast) {
																	return broadcast.author;
															});
															_.each(response, function (count) {
																	total += count;
															});
															res.json({ status: true, total: total, notifications: response });
													} else res.json({ status: true, total: 0, notifications: {} });
											});
									} else res.json({ status: true, total: 0, notifications: {} });
							} else res.json({ status: true, total: 0, notifications: {} });
					} catch (e) {
							console.log("error in broadcastNotifications", e);
							res.json({ status: true, total: 0, notifications: {} });
					}
			});
	}
	
	/**
	* @Function Name: "updateUserStatus",
	* @Purpose: "Check if broadcast is viewed by user",
	* @Request Object: {},
	* @Response Object: Success- {status : true, total, notifications }, Failure- {status : false, error},
	* @Author: "Najib Hasnain"
	*/
	
	function updateUserStatus(req, res) {
			try {
					// Varifying request is valid or not
					console.log("in user status");
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null) {
											// update the status as read
											_broadcast2.default.update({ status: { $nin: [person._id] } }, { $push: { status: person._id } }, { multi: true }).exec(function (updateerr, updated) {
													if (updateerr) {
															/*console.log("updateerr === ", updateerr);
	              			console.log("updated === ",updateerr);*/
	
															console.log("updated === ", updateerr.message);
													} else {
															console.log("pushed into array");
															res.json({ status: true, data: [] });
													}
											});
									} else {
											console.log("not pushed into array");
											res.json({ status: true, data: [] });
									}
							} catch (e) {
									console.log("e in getReplies inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in getReplies", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/*-------------------------- callback functions -------------------------*/
	
	/**
	*  @Function name : fetchBroadcastNews
	*  @Purpose : Fetch the question based on Id
	*  @Request Object : data : { companyid: 'company Id', limit: 'no of questions'}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function fetchBroadcastNews(obj, cb) {
			try {
					var _c = 0;
	
					if (obj.role == _adminUser.Roles.Superadmin) {
							//based on room Id author info gets populated
							var selector = {};
							var query = _broadcast2.default.find(selector).populate('author', '_id firstname lastname profile.profileImage').sort({ 'createdAt': -1 }).limit(obj.limit);
							query.lean().exec(function (err, doc) {
									if (err) {
											console.log("err ======= ", err);
											cb(err, null, _c);
									} else {
											//console.log("full fetch data",  doc);
											//loop for submitted answers under questions 
											_.each(doc, function (data) {
													data['broadcount'] = data && data.comments ? data.comments.length : 0;
											});
	
											//count of questions
											_broadcast2.default.count(selector).exec(function (err, count) {
													delete doc['broadcast'];
													//callback returning parameters
													cb(null, doc, count);
											});
									}
							});
					} else if (obj.role == _adminUser.Roles.Lmsadmin) {
							//based on room Id author info gets populated
							var _selector = {
									companyid: obj.companyid
							};
							var _query = _broadcast2.default.find(_selector).populate('author', '_id firstname lastname profile.profileImage').sort({ 'createdAt': -1 }).limit(obj.limit);
							_query.lean().exec(function (err, doc) {
									if (err) {
											console.log("err ======= ", err);
											cb(err, null, _c);
									} else {
											//console.log("full fetch data",  doc);
											//loop for submitted answers under questions 
											_.each(doc, function (data) {
													data['broadcount'] = data && data.comments ? data.comments.length : 0;
											});
	
											//count of questions
											_broadcast2.default.count(_selector).exec(function (err, count) {
													delete doc['broadcast'];
													//callback returning parameters
													cb(null, doc, count);
											});
									}
							});
					} else if (obj.role == _adminUser.Roles.Instructor) {
							//based on room Id author info gets populated
							var adminquery = _users2.default.findOne({ "profile.companyid": obj.companyid, role: _adminUser.Roles.Lmsadmin }).select('_id');
							adminquery.exec(function (error, admin) {
									if (admin) {
											var _selector2 = {
													author: {
															$in: [obj.id, admin._id]
													}
											};
											var _query2 = _broadcast2.default.find(_selector2).populate('author', '_id firstname lastname profile.profileImage').sort({ 'createdAt': -1 });
											_query2.lean().exec(function (err, doc) {
													if (err) {
															console.log("err ======= ", err);
															cb(err, null, _c);
													} else {
															//console.log("full fetch data",  doc);
															//loop for submitted answers under questions 
															_.each(doc, function (data) {
																	data['broadcount'] = data && data.comments ? data.comments.length : 0;
															});
	
															//count of questions
															_broadcast2.default.count(_selector2).exec(function (err, count) {
																	delete doc['broadcast'];
	
																	//callback returning parameters
																	cb(null, doc, count);
															});
													}
											});
									}
							});
					} else if (obj.role == _adminUser.Roles.Student) {
	
							//let stuQuery = Student.findOne({ _id : {$in : } })
							var stuQuery = _students2.default.find({ students: { $in: [obj.id] } }).select('instId');
							stuQuery.exec(function (stuErr, students) {
									if (stuErr) {
											cb(stuErr, null, _c);
									} else if (students) {
	
											var _adminquery = _users2.default.findOne({ "profile.companyid": obj.companyid, role: _adminUser.Roles.Lmsadmin }).select('_id');
											_adminquery.exec(function (error, admin) {
													if (admin) {
															var ids = [admin._id];
															_.each(students, function (student) {
																	ids.push(student.instId);
															});
															var _selector3 = {
																	author: {
																			$in: ids
																	}
															};
															var _query3 = _broadcast2.default.find(_selector3).populate('author', '_id firstname lastname profile.profileImage').sort({ 'createdAt': -1 });
															_query3.lean().exec(function (err, doc) {
																	if (err) {
																			console.log("err ======= ", err);
																			cb(err, null, _c);
																	} else {
																			//console.log("full fetch data",  doc);
																			//loop for submitted answers under questions 
																			_.each(doc, function (data) {
																					data['broadcount'] = data && data.comments ? data.comments.length : 0;
																			});
	
																			//count of questions
																			_broadcast2.default.count(_selector3).exec(function (err, count) {
																					delete doc['broadcast'];
	
																					//callback returning parameters
																					cb(null, doc, count);
																			});
																	}
															});
													}
											});
									}
							});
					} else if (obj.role == _adminUser.Roles.Admin || obj.role == _adminUser.Roles.Moderator || obj.role == _adminUser.Roles.User) {
							//based on room Id author info gets populated
							var _selector4 = {
									companyid: obj.companyid
							};
							var _query4 = _broadcast2.default.find(_selector4).populate('author', '_id firstname lastname profile.profileImage').sort({ 'createdAt': -1 }).limit(obj.limit);
							_query4.lean().exec(function (err, doc) {
									if (err) {
											console.log("err ======= ", err);
											cb(err, null, _c);
									} else {
											//console.log("full fetch data",  doc);
											//loop for submitted answers under questions 
											_.each(doc, function (data) {
													data['broadcount'] = data && data.comments ? data.comments.length : 0;
											});
	
											//count of questions
											_broadcast2.default.count(_selector4).exec(function (err, count) {
													delete doc['broadcast'];
													//callback returning parameters
													cb(null, doc, count);
											});
									}
							});
					}
			} catch (e) {
					console.log("erorr in fetchBroadcastNews", e);
					cb(null, null, c);
			}
	}
	
	/**
	*  @Function name : fetchAnswers
	*  @Purpose : Fetch the answers based on Id as parameters of callback function
	*  @Request Object : obj : { _id: 'question id', limit: no of answers}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function fetchComments(obj, cb) {
			var c = 0;
	
			try {
					//based on Id get the details of answers author
					var query = _broadcast2.default.findOne({ _id: obj._id }).populate('comments.author', '_id firstname profile.profileImage');
					query.lean().exec(function (err, doc) {
							if (err) {
									console.log("err ======= ", err);
									cb(err, null, c);
							} else if (doc) {
									var count = doc.comments ? doc.comments.length : 0;
									//var data = doc.toObject();
	
									//set the start value from where answers should be shown  
									var start = count <= obj.limit ? 0 : count - obj.limit;
	
									//sorting of answers based on submitted time
									doc.comments.sort(function (m1, m2) {
											return m1.commentAt - m2.commentAt;
									});
	
									//_.slice returns an array of answers upto index that count value holds   
									var newData = _.slice(doc.comments, start, count);
	
									cb(null, newData, count);
							} else {
									cb("Invalid broadcast", null, c);
							}
					});
			} catch (e) {
					console.log("error in fetchAnswers ", e);
					cb(null, null, c);
			}
	}
	
	/**
	*  @Function name : fetchReplies
	*  @Purpose : Fetch replies on particular answer
	*  @Request Object : obj : { _Id: 'Broadcast Id', limit'}, callback : cb
	*  @Response Object : Success - Message, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function fetchReplies(obj, cb) {
			var c = 0;
			try {
					if (obj._id && obj._id != '') {
	
							var query = _broadcast2.default.findOne({ _id: obj._id }).populate('replies.author', '_id firstname profile.profileImage');
							query.lean().exec(function (err, doc) {
									if (err) {
											console.log("err ======= ", err);
											cb(err, null, c);
									} else if (doc) {
	
											//returns array of reply that matches replyOn(answer) Id
											var replies = _.remove(doc.replies, function (n) {
													return n.replyOn == obj.replyOn;
											});
	
											//total number of count 
											var count = replies && replies.length > 0 ? replies.length : 0;
	
											//sorting of replies based on submission time(date)
											replies.sort(function (m1, m2) {
													return m1.replyAt - m2.replyAt;
											});
	
											cb(null, replies, count);
									} else {
											cb("Invalid broadcast", null, c);
									}
							});
					} else {
							cb(null, null, c);
					}
			} catch (e) {
					console.log("error in fetchReplies", e);
					cb(null, null, c);
			}
	}

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.saveCategory = saveCategory;
	exports.updateCategory = updateCategory;
	exports.checkCategoryNameExistance = checkCategoryNameExistance;
	exports.fetchCategory = fetchCategory;
	exports.deleteCategory = deleteCategory;
	exports.listCategory = listCategory;
	
	var _category = __webpack_require__(59);
	
	var _category2 = _interopRequireDefault(_category);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _cuid = __webpack_require__(26);
	
	var _cuid2 = _interopRequireDefault(_cuid);
	
	var _limax = __webpack_require__(27);
	
	var _limax2 = _interopRequireDefault(_limax);
	
	var _sanitizeHtml = __webpack_require__(28);
	
	var _sanitizeHtml2 = _interopRequireDefault(_sanitizeHtml);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForCorporateCreation = _interopRequireWildcard(_emailFunctions);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7);
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	
	
	/**
	*  @Function name : saveCategory
	*  @Purpose : For creating category
	*  @Request Object : categorydata : { data : { uid : "user id", corporateId : "corporateId", categoryName: "categoryName", categoryDesc: "categoryDesc", _id: "category id" } }
	*  @Response Object : Success - Success message, Category data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveCategory(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.body.categorydata || !req.body.categorydata.data) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.categorydata.data;
	
	        //If user have a valid role
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.CRMadmin || person.role == _adminUser.Roles.Presenteradmin) {
	          var corpID = '';
	          if (person.role == _adminUser.Roles.Superadmin) {
	            corpID = obj.corporateId;
	          } else {
	
	            //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	            corpID = person.profile.companyid && person.profile.companyid._id ? person.profile.companyid._id : '';
	          }
	
	          checkCategoryNameExistance(corpID, obj.categoryName, undefined, function (err, categoryStatus) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err
	              });
	            } else if (categoryStatus == true) {
	              obj['corporateId'] = corpID;
	              obj['createdBy'] = mongoose.Types.ObjectId(person._id);
	              obj['modifiedBy'] = mongoose.Types.ObjectId(person._id);
	              obj['createdAt'] = moment().utc().toDate();
	              obj['modifiedAt'] = moment().utc().toDate();
	
	              delete obj["uid"];
	
	              //Create new category
	              var objEntity = new _category2.default(obj);
	              objEntity.save(function (err, doc) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    data: doc,
	                    message: "Created successfully."
	                  });
	                  var now = moment().utc().toDate();
	
	                  //Log obj which need to be inserted in logger collection
	                  // let logObj = {
	                  //   logType : 'Category',
	                  //   actionType : 'Created',
	                  //   actionTime : now,
	                  //   uid : obj.createdBy,
	                  //   details : {
	                  //     name : obj.categoryName,
	                  //     corporateId : obj.corporateId,
	                  //     remoteAddress : req.connection.remoteAddress,
	                  //     userAgent : req.headers['user-agent']
	                  //   }
	                  // } 
	
	                  //Function for creating log on successful creation of category
	                  // createLog(logObj, function(status) {
	                  //   if(status) {
	                  //     // console.log(status);
	                  //   }
	                  // });
	                }
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in save category", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : updateCategory
	*  @Purpose : For updating category
	*  @Request Object : categorydata : { data : { uid : "user id", corporateId : "corporateId", categoryName: "categoryName", categoryDesc: "categoryDesc", _id: "category id" } }
	*  @Response Object : Success - Success message, Category data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function updateCategory(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id) || !req.body.categorydata || !req.body.categorydata.data) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.categorydata.data;
	
	        //If user has a valid role
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.CRMadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          //If category id is there then update data
	          if (req.params.id && (req.params.id != "" || req.params.id != undefined)) {
	            var corpID = '';
	            if (person.role == _adminUser.Roles.Superadmin) {
	              corpID = obj.corporateId;
	            } else {
	
	              //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	              corpID = person.profile.companyid && person.profile.companyid._id ? person.profile.companyid._id : '';
	            }
	            var recordId = mongoose.Types.ObjectId(req.params.id);
	            obj['modifiedBy'] = mongoose.Types.ObjectId(person._id);
	            obj['modifiedAt'] = moment().utc().toDate();
	            delete obj["uid"];
	
	            var data = _category2.default.findOne({
	              _id: recordId
	            });
	            data.exec(function (err, categoryData) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else if (categoryData) {
	
	                checkCategoryNameExistance(corpID, obj.categoryName, categoryData.createdAt, function (err, categoryStatus) {
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: err
	                    });
	                  } else if (categoryStatus == true) {
	
	                    //If data is present then update the category
	                    _category2.default.update({
	                      _id: recordId
	                    }, {
	                      $set: obj
	                    }, {
	                      runValidators: true
	                    }, function (err, doc) {
	                      if (err) {
	                        res.json({
	                          status: false,
	                          error: err.message
	                        });
	                      } else {
	
	                        //Query for sending the updated record to the client
	                        var query = _category2.default.findOne({
	                          _id: recordId
	                        });
	                        query.exec(function (err, doc) {
	                          if (err) {
	                            res.json({
	                              status: false
	                            });
	                          } else {
	                            res.json({
	                              status: true,
	                              data: doc,
	                              message: "Updated successfully."
	                            });
	                          }
	                        });
	                      }
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: "Invalid Category"
	                });
	              }
	            });
	          } else {
	            res.json({
	              status: false,
	              error: "Invalid Cateogory Id"
	            });
	          }
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in update category", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : checkCategoryNameExistance
	*  @Purpose : For checking whether the category already exists in db.
	*  @Request Object : cid : corporateId, categoryName : categoryName, cb
	*  @Response Object : Success - true, Failure - Error message
	*  @Author : Prateek
	*/
	
	function checkCategoryNameExistance(cid, categoryName, categoryDate1, cb) {
	  try {
	    // console.log(cid, categoryName, categoryDate1);
	    var slash_search = (0, _slashesActions.addSlash)(categoryName);
	    var searchKey = new RegExp(["^", slash_search, "$"].join(""), 'i');
	    var selector = {};
	    selector['corporateId'] = cid;
	    selector['categoryName'] = searchKey;
	    _category2.default.find(selector, function (err, categoryData) {
	      if (err) {
	        cb(err.message, null);
	      } else {
	        if (categoryData && categoryData.length < 1) {
	          cb(null, true);
	        } else if (categoryData && categoryData.length == 1 && categoryDate1 != undefined) {
	          var toBeUpdatedFielddate1 = categoryDate1.toString();
	          var categoryDate2 = categoryData[0].createdAt.toString();
	          if (toBeUpdatedFielddate1 == categoryDate2) {
	            cb(null, true);
	          } else {
	            cb('Category already exists with same name, Please try again', null);
	          }
	        } else {
	          cb('Category already exists with same name, Please try again', null);
	        }
	      }
	    });
	  } catch (e) {
	    cb("Internal server error.", null);
	  }
	}
	
	/**
	*  @Function name : fetchCategory
	*  @Purpose : For fetching particular category data
	*  @Request Object : params : { id: "category id" }
	*  @Response Object : Success - Category data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchCategory(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if category id is valid or not
	        if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid category"
	          });
	        } else {
	
	          //Query for finding the category data based on category id
	          var query = _category2.default.findOne({
	            _id: mongoose.Types.ObjectId(req.params.id)
	          });
	          query.populate('corporateId', 'businessName -_id').exec(function (error, doc) {
	            if (error) {
	              res.json({
	                status: false,
	                error: error.message
	              });
	            } else {
	              res.json({
	                status: true,
	                data: doc
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in fetch category", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteCategory
	*  @Purpose : For deleting particular category data
	*  @Request Object : params : { id: "category id" }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteCategory(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var recordId = mongoose.Types.ObjectId(req.params.id);
	
	        //Query for checking if the category id is present in database
	        var query = _category2.default.findOne({
	          _id: recordId
	        });
	        query.exec(function (err, doc) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else {
	
	            //Remove the category based on category id from database
	            var innerquery = _category2.default.remove({
	              _id: recordId
	            });
	            innerquery.exec(function (error, response) {
	              if (error) {
	                res.json({
	                  status: false,
	                  error: error.message
	                });
	              } else {
	                res.json({
	                  status: true,
	                  message: "Deleted successfully"
	                });
	                var now = moment().utc().toDate();
	
	                //Log obj which need to be inserted in logger collection
	                // let logObj = {
	                //   logType : 'Category',
	                //   actionType : 'Deleted',
	                //   actionTime : now,
	                //   uid : doc.createdBy,
	                //   details : {
	                //     name : doc.categoryName,
	                //     corporateId : doc.corporateId,
	                //     remoteAddress : req.connection.remoteAddress,
	                //     userAgent : req.headers['user-agent']
	                //   }
	                // } 
	
	                //Function for creating log on successful deletion of category
	                // createLog(logObj, function(status) {
	                //   if(status) {
	                //     // console.log(status);
	                //   }
	                // });
	              }
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in delete category", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listCategory
	*  @Purpose : For fetching complete category data
	*  @Request Object :  query : { page, items, search }
	*  @Response Object : Success - Category data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listCategory(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page) {
	        res.json({
	          status: false,
	          error: "Invalid request"
	        });
	      } else {
	        var queryData = req.query;
	        var selector = {};
	
	        //Search selector based on user role
	        if (person.role == _adminUser.Roles.Superadmin) {
	          selector = {};
	        } else if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.CRMadmin || person.role == _adminUser.Roles.Presenteradmin) {
	          selector = {
	
	            //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	            corporateId: person.profile.companyid && person.profile.companyid._id ? person.profile.companyid._id : ''
	          };
	        }
	
	        //If searchKeyword is not empty then create RegExp
	        if (queryData.search && queryData.search != '') {
	          var slash_search = (0, _slashesActions.addSlash)(queryData.search);
	          var searchKey = RegExp(slash_search, 'i');
	          selector['$or'] = [{ 'categoryName': { $regex: searchKey } }, { 'categoryDesc': { $regex: searchKey } }];
	        }
	
	        //Query for fetching complete category data based on selector and skip items based on itemsPerPage on previous page
	        var query = _category2.default.find(selector).limit(Number(queryData.items)).select('corporateId categoryName categoryDesc').skip(Number(queryData.items) * (Number(queryData.page) - 1));
	
	        if (req.query.sort == 'undefined' || req.query.sort == undefined) {
	          query.sort({ modifiedAt: -1 });
	        } else {
	          // console.log("sort === ", req.query.sort);
	          query.sort(JSON.parse(req.query.sort));
	        }
	        if (query) {
	          query.populate('corporateId', 'businessName -_id').exec(function (err, result) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              //Query for counting complete category data based on selector
	              _category2.default.count(selector).exec(function (error, count) {
	                // console.log("category data", result);
	                res.json({
	                  status: true,
	                  data: result,
	                  count: count
	                });
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in list category", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getIceServers = getIceServers;
	exports.createRoomMcu = createRoomMcu;
	exports.getToken = getToken;
	exports.fetchConferenceTopic = fetchConferenceTopic;
	exports.fetchConferenceTopicFiles = fetchConferenceTopicFiles;
	exports.fetchConferenceTopicPdfFiles = fetchConferenceTopicPdfFiles;
	exports.fetchConferenceTopicContentData = fetchConferenceTopicContentData;
	exports.fetchConferenceTopicQuestions = fetchConferenceTopicQuestions;
	exports.saveAnswers = saveAnswers;
	exports.saveLog = saveLog;
	exports.fetchConferenceAssignment = fetchConferenceAssignment;
	exports.deleteAssignmentSubmittedFile = deleteAssignmentSubmittedFile;
	exports.fetchConferencePoll = fetchConferencePoll;
	exports.fetchConferencePollcontentdata = fetchConferencePollcontentdata;
	exports.createPoll = createPoll;
	exports.submitConferencePoll = submitConferencePoll;
	exports.updateConferencePoll = updateConferencePoll;
	exports.publishConferencePoll = publishConferencePoll;
	exports.deleteConferencePoll = deleteConferencePoll;
	exports.fetchPollSubmissions = fetchPollSubmissions;
	exports.getAttendees = getAttendees;
	exports.validateSchedulePassword = validateSchedulePassword;
	exports.RemoveGuestFromRoom = RemoveGuestFromRoom;
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _package = __webpack_require__(25);
	
	var _package2 = _interopRequireDefault(_package);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _topic = __webpack_require__(34);
	
	var _topic2 = _interopRequireDefault(_topic);
	
	var _upload = __webpack_require__(78);
	
	var _upload2 = _interopRequireDefault(_upload);
	
	var _handraise = __webpack_require__(106);
	
	var _handraise2 = _interopRequireDefault(_handraise);
	
	var _adminUser = __webpack_require__(13);
	
	var _schedule = __webpack_require__(43);
	
	var _schedule2 = _interopRequireDefault(_schedule);
	
	var _students = __webpack_require__(33);
	
	var _students2 = _interopRequireDefault(_students);
	
	var _questionnaire = __webpack_require__(42);
	
	var _questionnaire2 = _interopRequireDefault(_questionnaire);
	
	var _result = __webpack_require__(77);
	
	var _result2 = _interopRequireDefault(_result);
	
	var _logger = __webpack_require__(49);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _gradeconfiguration = __webpack_require__(74);
	
	var _gradeconfiguration2 = _interopRequireDefault(_gradeconfiguration);
	
	var _authorization = __webpack_require__(10);
	
	var _assignment = __webpack_require__(58);
	
	var _assignment2 = _interopRequireDefault(_assignment);
	
	var _fileupload = __webpack_require__(71);
	
	var _plagiarismcheck = __webpack_require__(72);
	
	var _poll = __webpack_require__(234);
	
	var _poll2 = _interopRequireDefault(_poll);
	
	var _slashesActions = __webpack_require__(4);
	
	var _category = __webpack_require__(100);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var _ = __webpack_require__(7);
	var request = __webpack_require__(51);
	var validator = __webpack_require__(12);
	
	// import { cache } from '../../../../../../Library/Caches/typescript/2.6/node_modules/@types/ejs';
	// import { persistState } from '../../../../../../Library/Caches/typescript/2.6/node_modules/@types/redux-devtools';
	
	function getIceServers(req, res) {
	  try {
	    var options = {
	      url: 'https://service.xirsys.com/ice',
	      headers: {
	        'Content-Type': 'application/json'
	      },
	      form: {
	        ident: 'peoplelink',
	        secret: '15e65aaa-74cf-11e6-b581-d08a6ea232df',
	        domain: 'rp.instavc.com',
	        application: 'instavc',
	        room: 'lmsinv',
	        secure: 1
	      }
	    };
	    request.get(options, function (error, response, body) {
	      if (!error) {
	        // console.log(body)
	        res.json({ status: true, data: JSON.parse(body) });
	      } else {
	        res.json({ status: false, error: error });
	      }
	      // return;
	    });
	  } catch (e) {
	    console.log('error in getIceServers', e);
	    res.json({
	      staus: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	function createRoomMcu(roomName, selPackage, callback) {
	  try {
	    // console.log(roomName, "--createRoom--", selPackage);
	    _package2.default.findOne({ _id: mongoose.Types.ObjectId(selPackage) }).select('serverLocation -_id').exec(function (pkgErr, pkgRes) {
	      if (!pkgErr) {
	        var options = {
	          url: pkgRes.serverLocation + '/createRoom/',
	          headers: {
	            'Content-Type': 'application/json'
	          },
	          form: {
	            name: roomName
	          }
	        };
	        request.post(options, function (error, response, body) {
	          if (!error) {
	            if (response.errno) {
	              console.log("Error1--", response.errno);
	              callback('failed', response.errno);
	            } else {
	              // console.log("Sucess--",response.body);
	              callback(response.body, null);
	            }
	          } else {
	            console.log("Error--", error);
	            callback('failed', error);
	          }
	          return;
	        });
	      } else {
	        console.log("Error while fatching serverLocation.");
	      }
	    });
	  } catch (e) {
	    console.log('error in createRoomMcu', e);
	    callback('failed', 'Internal server error.');
	  }
	}
	
	function createToken(room, userName, role, selPackage, callback) {
	  var validPackage = false;
	  var packageData = {};
	  // console.log("intial - ", moment().format('x'));
	  _package2.default.findOne({ _id: mongoose.Types.ObjectId(selPackage) }).exec(function (pkgErr, pkgRes) {
	    // console.log("Package response - ", moment());
	    if (pkgRes) {
	      var now = moment().utc().toDate();
	      var currentDate = moment();
	      var pkgValidity = moment(pkgRes.packageValidity);
	      if (+pkgValidity >= +currentDate) {
	        validPackage = true;
	        packageData = {
	          packageName: pkgRes.packageName,
	          packagePrice: pkgRes.packagePrice,
	          userCount: pkgRes.userCount,
	          userPresence: pkgRes.userPresence,
	          serverLocation: pkgRes.serverLocation,
	          features: pkgRes.features
	        };
	        var options = {
	          url: pkgRes.serverLocation + '/createToken/',
	          headers: {
	            'Content-Type': 'application/json'
	          },
	          form: {
	            room: room,
	            username: userName,
	            role: 'admin'
	          }
	        };
	
	        var getUsersOptions = {
	          url: pkgRes.serverLocation + '/getUsers/' + room,
	          headers: {
	            'Content-Type': 'application/json'
	          }
	        };
	
	        if (pkgRes.continuousPresence == -1) {
	          request.post(options, function (error, response, body) {
	            // console.log("token response - ", moment());
	            if (!error) {
	              if (response.errno) {
	                var obj = {
	                  validPackage: validPackage,
	                  packageData: packageData,
	                  response: response.errno
	                };
	                callback(false, obj);
	              } else {
	                var _obj = {
	                  validPackage: validPackage,
	                  packageData: packageData,
	                  response: response.body
	                };
	                callback(true, _obj);
	              }
	            } else {
	              var _obj2 = {
	                validPackage: validPackage,
	                packageData: packageData,
	                response: error
	              };
	              callback(false, _obj2);
	            }
	            return;
	          });
	        } else {
	          var numberOfusers = '';
	          request.get(getUsersOptions, function (error, response, body) {
	            // console.log("error === ", error);
	            if (response && response.body) {
	              numberOfusers = JSON.parse(response.body);
	              if (numberOfusers.length > pkgRes.continuousPresence - 1) {
	                var obj = {
	                  validPackage: validPackage,
	                  packageData: packageData,
	                  response: "Limit exceeded"
	                };
	                callback(false, obj);
	                //callback(false, "User limit excceded, please contact admin");
	              } else {
	                // console.log("options--",options);
	                // console.log("token options done - ", moment());
	                request.post(options, function (error, response, body) {
	                  // console.log("token response - ", moment());
	                  if (!error) {
	                    if (response.errno) {
	                      var _obj3 = {
	                        validPackage: validPackage,
	                        packageData: packageData,
	                        response: response.errno
	                      };
	                      callback(false, _obj3);
	                    } else {
	                      var _obj4 = {
	                        validPackage: validPackage,
	                        packageData: packageData,
	                        response: response.body
	                      };
	                      callback(true, _obj4);
	                    }
	                  } else {
	                    var _obj5 = {
	                      validPackage: validPackage,
	                      packageData: packageData,
	                      response: error
	                    };
	                    callback(false, _obj5);
	                  }
	                  return;
	                });
	              }
	            } else {
	              var _obj6 = {
	                validPackage: validPackage,
	                packageData: packageData,
	                response: "Error while fatching serverLocation."
	              };
	              callback(false, _obj6);
	            }
	          });
	        }
	        //console.log("numberOfusers", numberOfusers);
	      } else {
	        // resConfObj['error'] = "Package is expired.";
	        var obj = {
	          validPackage: validPackage,
	          packageData: packageData,
	          response: "Package is expired."
	        };
	        callback(false, obj);
	        //callback(false, "Package is expired.");
	      }
	    } else {
	      // resConfObj['error'] = "Error while fatching serverLocation.";
	      var _obj7 = {
	        validPackage: validPackage,
	        packageData: packageData,
	        response: "Error while fatching serverLocation."
	      };
	      callback(false, _obj7);
	      //callback(false, "Error while fatching serverLocation.");
	    }
	  });
	}
	
	// export function confRequest(req, res){
	// 	console.log("Conf Request", req.body);
	// 	//res.json({status: true});
	// }
	
	function getToken(req, res) {
	  try {
	    // console.log("1- ", moment().format('x'));
	    // console.log("REQ", req.body.data);
	    var resConfObj = {
	      validUser: false,
	      haveSchedule: false,
	      validRoom: false,
	      roomType: null,
	      autharized: false,
	      validPackage: false,
	      isExpiredRoom: true,
	      validCPLimit: false,
	      token: null,
	      error: null,
	      host: null,
	      codec: null,
	      enableLive: null,
	      businessType: 'LMS',
	      roomName: ''
	    };
	
	    var roleObj = _.invert(_adminUser.Roles);
	
	    var obj = req.body.data;
	    var uname = obj.username;
	    if (!uname || validator.isEmpty(uname) || !mongoose.Types.ObjectId.isValid(uname)) {
	      resConfObj['error'] = "InValid user.";
	      res.json({ status: false, data: resConfObj });
	    } else {
	      // console.log("2- ", moment().format('x'));
	      var userRole = null;
	      var hostRole = null;
	      _users2.default.findOne({ _id: mongoose.Types.ObjectId(uname) }).exec(function (userErr, userData) {
	        // console.log("userData === ", userData);
	        if (userData) {
	          // console.log("3 - user - ", moment());
	          resConfObj['validUser'] = true;
	          userRole = userData.role;
	          _room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(obj.key) }).populate('users', 'firstname lastname email profile.profileImage role guest', { userStatus: 'Active' }).populate('corporateId', 'businessType -_id').exec(function (err, room) {
	            if (err) {
	              resConfObj['error'] = "Error fetching Room Data.";
	              res.json({ status: false, data: resConfObj });
	            } else if (room && room.roomid) {
	              // console.log("4 - room - ",moment());
	              resConfObj['roomDBId'] = room._id;
	              resConfObj['validRoom'] = true;
	              resConfObj['roomName'] = room.roomName;
	              resConfObj['roomType'] = room.roomType;
	              resConfObj['roomPassword'] = room.roomPassword;
	              resConfObj['hostPassword'] = room.hostPassword;
	              resConfObj['codec'] = room.roomConfiguration.codecType;
	              resConfObj['enableLive'] = room.roomConfiguration.enableLive;
	              var currentDate = moment();
	              var roomValidity = moment(room.expiryDate);
	              if (+roomValidity >= +currentDate) {
	                resConfObj['isExpiredRoom'] = false;
	              }
	              if (room.corporateId && room.corporateId.businessType) {
	                // console.log("businessType--", room.corporateId);
	                resConfObj['businessType'] = room.corporateId.businessType;
	              }
	              var now = moment().utc().toDate();
	              var today = Number(moment().utc().format('x'));
	              // console.log("now--",now);
	              // console.log("roomId === ",room._id);
	              _schedule2.default.findOne({ roomId: room._id, dates: { $elemMatch: { startTime: { $lte: today }, endTime: { $gte: today } } } }, { "dates.$.startTime": 1, meetingName: 1, password: 1, createdBy: 1 }).populate('createdBy', 'role').exec(function (schErr, schRes) {
	                // console.log("schedules === ", schErr, schRes);
	                if (!schErr && schRes && schRes.dates && schRes.dates.length > 0) {
	                  // console.log("5 - sch - ", moment());
	                  // console.log("sch present");
	                  // console.log("schRes--", schRes.startTime, schRes.endTime);
	                  hostRole = schRes.createdBy.role;
	                  resConfObj['haveSchedule'] = true;
	                  resConfObj['hostId'] = schRes.createdBy._id;
	                  resConfObj['scheduleData'] = { "meetingName": schRes.meetingName,
	                    "startTime": schRes.dates[0].startTime,
	                    "endTime": schRes.dates[0].endTime,
	                    "slotId": schRes.dates[0]._id,
	                    "_id": schRes._id
	                  };
	                  if (schRes.password) {
	                    resConfObj['scheduleData']['password'] = true;
	                  } else {
	                    resConfObj['scheduleData']['password'] = false;
	                  }
	
	                  if (hostRole == _adminUser.Roles.Instructor || hostRole == _adminUser.Roles.Presenter) {
	                    // console.log("sch present, inst");
	                    if (userData.role == _adminUser.Roles.Student) {
	                      _students2.default.findOne({ roomId: room._id, instId: schRes.createdBy._id, students: { $in: [uname] } }).exec(function (studErr, studRes) {
	                        // console.log("student === ", studErr, studRes);
	                        if (studErr || !studRes /*|| (studRes && studRes.length < 0)*/) {
	                            resConfObj['haveSchedule'] = false;
	                            resConfObj['scheduleData'] = null;
	                          }
	                      });
	                    }
	                    _students2.default.findOne({ roomId: room._id, instId: schRes.createdBy._id /*, students : {$in : [uname] }*/ }).populate('students', 'firstname lastname email profile.profileImage role guest', { userStatus: 'Active' }).populate('instId', 'firstname lastname email profile.profileImage role').exec(function (studErr, studRes) {
	                      if (!studErr) {
	                        // console.log("6 - stud - ", moment());
	                        // console.log("Student data--", studRes);
	                        resConfObj['autharized'] = true;
	                        if (studRes && studRes.students) resConfObj['users'] = studRes.students;
	                        if (studRes && studRes.instId) resConfObj['users'].push(studRes.instId);
	                      } else {
	                        resConfObj['error'] = "Error fetching student id";
	                        // res.json({status: false, data : resConfObj});
	                      }
	                    });
	                  } else /*if(hostRole == Roles.Superadmin || hostRole == Roles.Admin || hostRole == Roles.Lmsadmin)*/{
	                      // console.log("sch present, A & SA");
	                      _students2.default.find({ roomId: room._id /*, students : {$in : [uname] }*/ }).populate('students', 'firstname lastname email profile.profileImage role guest', { userStatus: 'Active' }).populate('instId', 'firstname lastname email profile.profileImage role').exec(function (studErr, studRes) {
	                        if (!studErr) {
	                          // console.log("6 - stud - ", moment());
	                          // console.log("Student data--", studRes);
	                          // resConfObj['users'] = studRes.students;
	
	                          resConfObj['users'] = room.users;
	
	                          // Merges both arrays and gets unique items
	                          studRes.forEach(function (item) {
	                            resConfObj['users'] = [].concat(_toConsumableArray(resConfObj.users), _toConsumableArray(item.students));
	                          });
	
	                          // console.log("users--", resConfObj.users);
	                          resConfObj['autharized'] = true;
	                        } else {
	                          resConfObj['error'] = "Error fetching student id";
	                          // res.json({status: false, data : resConfObj});
	                        }
	                      });
	                    }
	                  createToken(room.roomid, uname, /*RoleName.userRole*/roleObj[userRole], room.selPackage, function (status, token) {
	                    if (status) {
	                      // console.log("7 - token - ", moment());
	                      resConfObj['token'] = token.response;
	                      resConfObj['validPackage'] = token.validPackage;
	                      resConfObj['packageData'] = token.packageData;
	                      resConfObj['validCPLimit'] = true;
	                      // console.log("OBJECT1----  ", resConfObj);
	                      res.json({ status: true, data: resConfObj });
	                      // let logObj = {
	                      //   logType : 'Room',
	                      //   actionType : 'Join',
	                      //   actionTime : now,
	                      //   uid : userData._id,
	                      //   details : {
	                      //     roomId : room._id,
	                      //     scheduleId : schRes._id,
	                      //     remoteAddress : req.connection.remoteAddress,
	                      //     userAgent : req.headers['user-agent'],
	                      //     name : room.roomName
	                      //   }
	                      // } 
	                      // createLog(logObj, function(status) {
	                      //   if(status) {
	                      //     // console.log(status);
	                      //   }
	                      // });
	                    } else {
	                      resConfObj['error'] = token.response;
	                      resConfObj['validPackage'] = token.validPackage;
	                      resConfObj['packageData'] = token.packageData;
	                      resConfObj['validCPLimit'] = false;
	                      res.json({ status: false, data: resConfObj });
	                      // let logObj = {
	                      //   logType : 'Conference',
	                      //   actionType : 'Connection Error',
	                      //   actionTime : now,
	                      //   uid : userData._id,
	                      //   details : {
	                      //     roomId : room._id,
	                      //     scheduleId : schRes._id,
	                      //     remoteAddress : req.connection.remoteAddress,
	                      //     userAgent : req.headers['user-agent'],
	                      //     Reason : "Token not found"
	                      //   }
	                      // } 
	                      // createLog(logObj, function(status) {
	                      //   if(status) {
	                      //     // console.log(status);
	                      //   }
	                      // });
	                    }
	                  });
	                } else {
	                  // console.log("sch not presentt");
	                  resConfObj['autharized'] = true;
	                  resConfObj['users'] = room.users;
	                  createToken(room.roomid, uname, /*RoleName.userRole*/roleObj[userRole], room.selPackage, function (status, token) {
	                    if (status) {
	                      // console.log("8 - token - ", moment());
	                      resConfObj['token'] = token.response;
	                      resConfObj['validPackage'] = token.validPackage;
	                      resConfObj['packageData'] = token.packageData;
	                      resConfObj['validCPLimit'] = true;
	                      // console.log("OBJECT2----  ", resConfObj);
	                      res.json({ status: true, data: resConfObj });
	
	                      // let logObj = {
	                      //   logType : 'Room',
	                      //   actionType : 'Join',
	                      //   actionTime : now,
	                      //   uid : userData._id,
	                      //   details : {
	                      //     roomId : room._id,
	                      //     remoteAddress : req.connection.remoteAddress,
	                      //     userAgent : req.headers['user-agent'],
	                      //     name : room.roomName
	                      //   }
	                      // } 
	                      // createLog(logObj, function(status) {
	                      //   if(status) {
	                      //     // console.log("9 - log - ", moment());
	                      //     // console.log(status);
	                      //   }
	                      // });	
	                    } else {
	                      resConfObj['error'] = token.response;
	                      resConfObj['validPackage'] = token.validPackage;
	                      resConfObj['packageData'] = token.packageData;
	                      resConfObj['validCPLimit'] = false;
	                      res.json({ status: false, data: resConfObj });
	
	                      // let logObj = {
	                      //   logType : 'Conference',
	                      //   actionType : 'Connection Error',
	                      //   actionTime : now,
	                      //   uid : userData._id,
	                      //   details : {
	                      //     roomId : room._id,
	                      //     remoteAddress : req.connection.remoteAddress,
	                      //     userAgent : req.headers['user-agent'],
	                      //     Reason : "Token not found"
	                      //   }
	                      // } 
	                      // createLog(logObj, function(status) {
	                      //   if(status) {
	                      //     // console.log(status);
	                      //   }
	                      // });
	                    }
	                  });
	                  // resConfObj['error'] = "Error in fetching Schedule or No Schedule present.";
	                  // res.json({status: false, error : resConfObj});
	                }
	              });
	            } else {
	              resConfObj['error'] = "Missing Room or Key.";
	              res.json({ status: false, data: resConfObj });
	            }
	          });
	        } else {
	          resConfObj['error'] = "User Not found.";
	          res.json({ status: false, data: resConfObj });
	        }
	      });
	    }
	  } catch (e) {
	    console.log('error in getToken', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	/**
	*  @Global function name : createLog
	*  @Purpose : For creating logs
	*  @logObject : { logType : "log type", actionType : "action type", actionTime : current date, uid : "user id", details : { log details} }
	*  @callback : True or False
	*  @Author : Aniket Gupta
	*/
	
	// global.createLog = function(logObj, callback) {
	
	//   //Creates new log
	//   var objEntity = new Logger(logObj);
	//   objEntity.save(function (err, doc) {
	//     if (err) {
	//       console.log(err.message, logObj)
	//       callback(false);
	//     } else {
	//       callback(true);
	//     }
	//   });
	// }
	
	/**
	*  @Function name : fetchConferenceTopic
	*  @Purpose : For fetching topic data conference side
	*  @Request Object : params : { roomKey: 'roomKey' }
	*  @Response Object : Success - Topic data, Room name, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchConferenceTopic(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.roomKey) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else {
	
	        //Validating if room key is valid or not
	        if (validator.isEmpty(req.params.roomKey)) {
	          res.json({
	            status: false,
	            error: "Invalid room key"
	          });
	        } else {
	
	          //Query for finding the room data based on room key
	          var query = _room2.default.findOne({
	            roomKey: (0, _slashesActions.addSlash)(req.params.roomKey)
	          }).exec(function (err, room) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Room'
	              });
	            }
	            if (room) {
	              var roomName = room.roomName;
	              var roomId = room._id;
	
	              //Query for finding the topic data based on room id
	              var _query = _topic2.default.find({
	                roomId: room._id,
	                topicEnable: true
	              });
	              _query.select('topicName topicEnable description');
	              _query.populate('createdBy', 'firstname lastname profile.profileImage');
	              // query.populate('questionnaire.questionnaireId',  'questionnaireName')      
	              _query.sort({
	                'createdAt': -1
	              }).exec(function (err, doc) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: 'Invalid Topic'
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    data: doc,
	                    roomName: roomName,
	                    roomId: roomId
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in fetch conference topic", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchConferenceTopicFiles
	*  @Purpose : For fetching topic upload data conference side
	*  @Request Object : params : { id: 'topic id' }
	*  @Response Object : Success - Upload data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchConferenceTopicFiles(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if topic id is valid or not
	        if (validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid Topic Id"
	          });
	        } else {
	
	          //Query for finding the topic data based on topic id
	          var query = _topic2.default.findOne({
	            _id: req.params.id
	          }).exec(function (err, topicDoc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Topic'
	              });
	            } else {
	
	              //Query for finding the upload data based on topic id
	              var query = _upload2.default.find({
	                topicId: req.params.id,
	                isEnable: true
	              }).exec(function (err, uploadedDoc) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: 'No Files'
	                  });
	                } else {
	                  // console.log("upload data:", uploadedDoc);
	                  res.json({
	                    status: true,
	                    data: uploadedDoc
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in fetch conference topic files", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchConferenceTopicPdfFiles
	*  @Purpose : For fetching topic upload individual flie data in conference side
	*  @Request Object : params : { tid: 'topicid', fid: 'fileId' }
	*  @Response Object : Success - Upload data, Failure - Error message
	*  @Author : pranathi gaddam
	*/
	
	function fetchConferenceTopicPdfFiles(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.params.tid || !req.params.fid) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        //Query for finding the upload data based on topic id, fileId
	        _upload2.default.findOne({
	          _id: mongoose.Types.ObjectId(req.params.fid),
	          topicId: req.params.tid,
	          isEnable: true
	        }).exec(function (err, uploadedDoc) {
	          if (err) {
	            res.json({
	              status: false,
	              error: 'No Files'
	            });
	          } else {
	            res.json({
	              status: true,
	              data: uploadedDoc
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in fetch conference topic PDF files", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchConferenceTopicQuestionnaire
	*  @Purpose : For fetching topic questionnaire in conference side
	*  @Request Object : params : { roomId: 'rid', topicId:'tid' }
	*  @Response Object : Success - Topic data, Room name, Failure - Error message
	*  @Author : pranathi
	*/
	
	function fetchConferenceTopicContentData(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.params.rid || !req.params.tid) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room key is valid or not
	        if (validator.isEmpty(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room id"
	          });
	        } else {
	
	          //Query for finding the topic data based on room id
	          _topic2.default.findOne({
	            roomId: req.params.rid, _id: req.params.tid, topicEnable: true
	          }).select('topicName content questionnaire').populate('createdBy', 'firstname lastname profile.profileImage').populate('questionnaire.questionnaireId', 'questionnaireName').sort({ 'createdAt': -1 }).exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Topic'
	              });
	            } else {
	              res.json({
	                status: true,
	                data: doc
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in fetch conference topic", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchConferenceTopicQuestions
	*  @Purpose : For fetching topic questionnaire and result data conference side
	*  @Request Object : params : { tid: 'topic id', id: 'questionnaire id' }
	*  @Response Object : Success - Questionnaire data, Result data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchConferenceTopicQuestions(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.params.tid || !req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if questionnaire id and topic id is valid or not
	        if (validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid Questionnaire Id"
	          });
	        } else if (validator.isEmpty(req.params.tid) || !mongoose.Types.ObjectId.isValid(req.params.tid)) {
	          res.json({
	            status: false,
	            error: "Invalid Topic Id"
	          });
	        } else {
	          var now = moment().seconds(0).utc().toDate();
	
	          //Query for finding the topic data based on topic id and questionnaire id whose start time is lesser than or equal to current time
	          var query = _topic2.default.findOne({
	            _id: req.params.tid,
	            'questionnaire.questionnaireId': req.params.id
	          }, { 'questionnaire.$.questionnaireId': 1 })
	          // .select('questionnaire')
	          .exec(function (err, topicDoc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (topicDoc) {
	              if (_.isEmpty(topicDoc.questionnaire)) {
	                res.json({
	                  status: false,
	                  error: 'Questionnaire has not been added to topic'
	                });
	              } else {
	                var _now = moment().seconds(0).utc().toDate();
	
	                var openFrom = topicDoc.questionnaire[0].openFrom != undefined || topicDoc.questionnaire[0].openFrom != null ? moment(topicDoc.questionnaire[0].openFrom).seconds(0).utc().toDate() : undefined;
	
	                var closeFrom = topicDoc.questionnaire[0].closeFrom != undefined || topicDoc.questionnaire[0].closeFrom != null ? moment(topicDoc.questionnaire[0].closeFrom).seconds(0).utc().toDate() : undefined;
	
	                if (openFrom != undefined && _now < openFrom) {
	                  res.json({
	                    status: false,
	                    error: 'Questionnaire not yet started'
	                  });
	                } else {
	
	                  //Query for finding the questionnaire data based on questionnaire id
	                  var query = _questionnaire2.default.findOne({
	                    _id: req.params.id
	                  }).lean().exec(function (err, questionDoc) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	                    } else if (questionDoc) {
	                      questionDoc['openFrom'] = openFrom;
	                      questionDoc['closeFrom'] = closeFrom;
	
	                      //Query for finding the result against questionnaire id
	                      var query = _result2.default.findOne({
	                        questionnaireId: req.params.id,
	                        topicId: req.params.tid,
	                        submittedBy: mongoose.Types.ObjectId(person._id)
	                      }).exec(function (err, resultDoc) {
	                        if (err) {
	                          res.json({
	                            status: false,
	                            error: err.message
	                          });
	                        } else if (resultDoc) {
	                          //If result is there send questionnaire and result data else send questionnaire data  
	
	                          var hideResultObj = {};
	                          if (topicDoc.questionnaire[0].showResult == false) {
	                            hideResultObj['wrongAns'] = resultDoc['wrongAns'];
	                            hideResultObj['correctAns'] = resultDoc['correctAns'];
	                            hideResultObj['submittedBy'] = resultDoc['submittedBy'];
	                          }
	
	                          res.json({
	                            status: true,
	                            data: questionDoc,
	                            submittedData: topicDoc.questionnaire[0].showResult == false ? hideResultObj : resultDoc
	                          });
	                        } else if (closeFrom == undefined || closeFrom > _now) {
	                          //Changes made by prateek as the user shouldn't attend the questionnaire as off general scenario
	                          //Verifying if close time of questionnaire is undefined or not
	
	                          res.json({
	                            status: true,
	                            data: questionDoc
	                          });
	                        } else {
	                          res.json({
	                            status: false,
	                            error: "Result not found"
	                          });
	                        }
	                      });
	                    } else {
	                      res.json({
	                        status: false,
	                        error: 'Invalid Questionnaire'
	                      });
	                    }
	                  });
	                }
	              }
	            } else {
	              res.json({
	                status: false,
	                error: 'Invalid Topic'
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in fetch conference topic questions", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : saveAnswers
	*  @Purpose : For saving answers of questionnaire
	*  @Request Object : answerData : { uid: 'user id', topicId: 'topic id', questionnaireId: 'questionnaire id', answers: { questionId : [answers] } }
	*  @Response Object : Success - Success message, Result data, Failure - Error message
	*  @Author : Prateek Pathak
	*/
	
	function saveAnswers(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.body.answerData || !req.body.answerData.questionnaireId || !req.body.answerData.topicId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var obj = req.body.answerData;
	
	        obj['submittedBy'] = person._id;
	        //Validating if questionnaire id and topic id is valid or not
	        if (validator.isEmpty(obj.questionnaireId) || !mongoose.Types.ObjectId.isValid(obj.questionnaireId)) {
	          res.json({
	            status: false,
	            error: "Invalid Questionnaire Id"
	          });
	        } else if (validator.isEmpty(obj.topicId) || !mongoose.Types.ObjectId.isValid(obj.topicId)) {
	          res.json({
	            status: false,
	            error: "Invalid Topic Id"
	          });
	        } else {
	
	          var topicQuery = _topic2.default.findOne({ _id: obj.topicId, "questionnaire.questionnaireId": obj.questionnaireId }, { "questionnaire.$.questionnaireId": 1 });
	          topicQuery.exec(function (err, topicData) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (topicData && topicData.questionnaire && topicData.questionnaire.length >= 1) {
	              var currentTime = new Date();
	              var assignedEndTime = topicData.questionnaire[0].closeFrom != null ? new Date(topicData.questionnaire[0].closeFrom) : null;
	
	              var questionnaireQuery = _questionnaire2.default.findOne({ _id: obj.questionnaireId }, { questions: 1 });
	
	              questionnaireQuery.exec(function (err, questionnaireData) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else if (questionnaireData) {
	                  var questionnaireQuestions = questionnaireData.questions;
	                  var attemptedAnswers = obj.answers;
	                  var obtainedMarks = 0;
	                  var wrongAns = [];
	                  var correctAns = [];
	                  var questionnairePercentage = 0;
	                  var result = '';
	                  var grade = '';
	
	                  if (currentTime <= assignedEndTime || assignedEndTime == null) {
	                    _.mapKeys(attemptedAnswers, function (value, key) {
	                      var atemptedAnswersValue = _.map(value, _.trim);
	                      var index = _.findIndex(questionnaireQuestions, function (Obj) {
	                        return key == Obj._id;
	                      });
	                      var dbAnswersObj = questionnaireQuestions[index];
	
	                      if (!dbAnswersObj.swots || dbAnswersObj.swots.length <= 0) {
	                        var dbAnswers = _.compact(_.map(dbAnswersObj.answers, _.trim));
	                        // console.log('dbAnswers', dbAnswers);
	                        // console.log('atemptedAnswersValue', atemptedAnswersValue);
	                        // console.log(_.isEqual(dbAnswers, atemptedAnswersValue));
	                        // console.log(_.difference(dbAnswers, atemptedAnswersValue).length == 0);
	                        if (_.isEqual(dbAnswers, atemptedAnswersValue) || _.difference(dbAnswers, atemptedAnswersValue).length == 0 && dbAnswers.length == atemptedAnswersValue.length) {
	                          obtainedMarks += dbAnswersObj.marks;
	                          var correctAnsObj = {
	                            questionId: dbAnswersObj._id,
	                            answers: atemptedAnswersValue,
	                            swotWithoutAns: false
	                          };
	                          correctAns.push(correctAnsObj);
	                        } else {
	                          var wrongAnsObj = {
	                            questionId: dbAnswersObj._id,
	                            answers: atemptedAnswersValue,
	                            swotWithoutAns: false
	                          };
	                          wrongAns.push(wrongAnsObj);
	                        }
	                      } else {
	                        var _correctAnsObj = {
	                          questionId: dbAnswersObj._id,
	                          answers: atemptedAnswersValue,
	                          swotWithoutAns: false
	                        };
	                        correctAns.push(_correctAnsObj);
	                      }
	                    });
	                  }
	
	                  //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	                  var bussinessID = null;
	                  if (person.profile.companyid && person.profile.companyid._id) {
	                    bussinessID = person.profile.companyid._id;
	                  }
	                  _gradeconfiguration2.default.findOne({
	                    companyid: bussinessID
	                  }).exec(function (err, gradeResults) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	                    } else {
	                      var defaultGrades = [{
	                        from: 70,
	                        to: 100,
	                        result: 'DISTINCTION',
	                        grade: 'A'
	                      }, {
	                        from: 35,
	                        to: 69,
	                        result: 'PASS',
	                        grade: 'B'
	                      }, {
	                        from: 0,
	                        to: 34,
	                        result: 'FAIL',
	                        grade: 'C'
	                      }];
	                      var gradesArray = _.isEmpty(gradeResults) ? defaultGrades : gradeResults.grades;
	                      questionnairePercentage = Math.floor(obtainedMarks / obj.totalMarks * 100);
	
	                      gradesArray.forEach(function (data) {
	                        if (questionnairePercentage >= data.from && questionnairePercentage <= data.to) {
	                          grade = data.grade;
	                          result = data.result;
	                        }
	                      });
	                      obj['obtainedMarks'] = obtainedMarks;
	                      obj['grade'] = grade;
	                      obj['result'] = result;
	                      obj['questionnairePercentage'] = questionnairePercentage;
	                      obj['correctAns'] = correctAns;
	                      obj['wrongAns'] = wrongAns;
	
	                      delete obj['gradesInfo'];
	                      delete obj['answers'];
	
	                      //Save the answers
	                      var objEntity = new _result2.default(obj);
	                      objEntity.save(function (err, doc) {
	                        // console.log("err == ",err);
	                        // console.log("doc == ",doc);
	                        if (err) {
	                          res.json({
	                            status: false,
	                            error: "Submission Failed"
	                          });
	                        } else {
	                          var hideResultObj = {};
	                          if (topicData.questionnaire[0].showResult == false) {
	                            hideResultObj['wrongAns'] = doc['wrongAns'];
	                            hideResultObj['correctAns'] = doc['correctAns'];
	                            hideResultObj['submittedBy'] = doc['submittedBy'];
	                          }
	                          res.json({
	                            status: true,
	                            data: topicData.questionnaire[0].showResult == false ? hideResultObj : doc,
	                            message: assignedEndTime != null && currentTime > assignedEndTime ? 'Your answers will not be considered as questionnaire end time has been completed' : 'Submitted successfully'
	                          });
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: 'Questionnaire has not been assigned to topic'
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("e in saveAnswers == ", e);
	      res.json({
	        status: false,
	        error: "Internal server error, Please try again"
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : saveLog
	*  @Purpose : For saving logs of conference
	*  @Request Object : { logType : "log type", actionType : "action type", actionTime : current date, uid : "user id", details : { log details} }
	*  @Response Object : Success - True, Failure - False
	*  @Author : Aniket Gupta
	*/
	
	function saveLog(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.body.data) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var obj = req.body.data;
	        var now = moment().utc().toDate();
	        var roomId = void 0;
	        var hostId = null;
	        var scheduleId = null;
	        if (req.body.data.hostId == undefined || req.body.data.hostId == '') {} else {
	          hostId = mongoose.Types.ObjectId(req.body.data.hostId);
	        }
	        if (req.body.data.scheduleId == undefined || req.body.data.scheduleId == '') {} else {
	          scheduleId = mongoose.Types.ObjectId(req.body.data.scheduleId);
	        }
	
	        if (obj.roomKey) {
	
	          //Query for finding the room data based on room key
	          var query = _room2.default.findOne({
	            roomKey: (0, _slashesActions.addSlash)(obj.roomKey)
	          }).exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Room Key'
	              });
	            }
	            if (doc) {
	              roomId = doc._id;
	              res.json({
	                status: true
	              });
	              //Log obj which need to be inserted in logger collection
	              // let logObj = {
	              //   logType : req.body.data.logType,
	              //   actionType : req.body.data.actionType,
	              //   actionTime : now,
	              //   uid : person._id,
	              //   details : {
	              //     token : req.body.data.token,
	              //     codec : req.body.data.codec,
	              //     remoteAddress : req.connection.remoteAddress,
	              //     userAgent : req.headers['user-agent'],
	              //     Reason : req.body.data.reason,
	              //     roomId : roomId,
	              //     hostId : hostId,
	              //     scheduleId : scheduleId,
	              //   }
	              // } 
	
	              // //Function to create logs for conference
	              // createLog(logObj, function(status) {
	              //   if(status) {
	              //     res.json({ 
	              //       status : true
	              //     });
	              //   } else {
	              //     res.json({ 
	              //       status : false
	              //     });
	              //   }
	              // }); 
	            } else {
	              res.json({
	                status: false,
	                error: 'Invalid Room Key'
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in save log", e);
	      res.json({
	        status: false,
	        error: "Internal server error, Please try again"
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchConferenceAssignment
	*  @Purpose : For fetching assignment data conference side
	*  @Request Object : params : { roomKey: 'roomKey' }
	*  @Response Object : Success - Topic data, Room name, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchConferenceAssignment(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.params.roomKey) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room key is valid or not
	        if (validator.isEmpty(req.params.roomKey)) {
	          res.json({
	            status: false,
	            error: "Invalid room key"
	          });
	        } else {
	
	          //Query for finding the room data based on room key
	          var query = _room2.default.findOne({
	            roomKey: (0, _slashesActions.addSlash)(req.params.roomKey)
	          }).exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Room'
	              });
	            }
	            if (doc) {
	              var roomName = doc.roomName;
	
	              //Query for finding the topic data based on room id
	              var query = _assignment2.default.find({
	                roomId: doc._id
	              });
	              query.populate('createdBy', 'firstname lastname profile.profileImage');
	              query.populate('assignedTo', 'topicName');
	              query.sort({
	                'createdAt': -1
	              }).exec(function (err, doc) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: 'Invalid Assignment'
	                  });
	                }
	                if (doc) {
	                  res.json({
	                    status: true,
	                    data: doc
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in fetch conference assignment", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteAssignmentSubmittedFile
	*  @Purpose : For deleting assignment submitted file
	*  @Request Object : params : { rid: "room id", aid: 'assignment id' }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function deleteAssignmentSubmittedFile(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null || req.params.rid || req.params.aid) {
	
	        //Validating if room id is valid or not
	        if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid room."
	          });
	        } else if (!req.params.aid || validator.isEmpty(req.params.aid) || !mongoose.Types.ObjectId.isValid(req.params.aid)) {
	          res.json({
	            status: false,
	            error: "Invalid assignment."
	          });
	        } else {
	
	          //Query for checking if the upload id is present in database
	          var query = _assignment2.default.findOne({
	            _id: mongoose.Types.ObjectId(req.params.aid),
	            roomId: mongoose.Types.ObjectId(req.params.rid),
	            "submissions.studentId": mongoose.Types.ObjectId(person._id)
	          }, {
	            "submissions.$": 1
	          });
	          query.exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              // console.log(doc);
	
	              //Function calling for deleting files from uploads folder
	              (0, _fileupload.deleteFilesFromDest)(doc.submissions[0], function (status) {
	                if (status == true) {
	
	                  //Query for removing the upload data
	                  _assignment2.default.update({
	                    _id: mongoose.Types.ObjectId(req.params.aid),
	                    roomId: mongoose.Types.ObjectId(req.params.rid)
	                  }, {
	                    $pull: {
	                      "submissions": {
	                        "studentId": mongoose.Types.ObjectId(person._id)
	                      }
	                    }
	                  }, function (error, result) {
	                    if (error) {
	                      // console.log("Error", error.message);
	                      res.json({
	                        status: false,
	                        error: error.message,
	                        message: "Submission not present in current assignment."
	                      });
	                    } else {
	
	                      /*Deleting plagiarism process for this document*/
	                      // console.log("doc", doc);
	                      // deletePlagiarismProcess(doc.submissions[0].plagiarismId);
	
	                      _assignment2.default.findOne({
	                        _id: mongoose.Types.ObjectId(req.params.aid),
	                        roomId: mongoose.Types.ObjectId(req.params.rid)
	                      }).populate('createdBy', 'firstname lastname profile.profileImage').exec(function (error, assDoc) {
	                        if (error) {
	                          res.json({
	                            status: false,
	                            error: "Assignment not found"
	                          });
	                        } else {
	                          res.json({
	                            status: true,
	                            data: assDoc,
	                            message: "Deleted successfully."
	                          });
	                        }
	                      });
	                    }
	                  });
	                } else {
	                  res.json({
	                    status: false,
	                    error: "Error in deleting file"
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("Error in delete file", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchConferencePoll
	*  @Purpose : For fetching poll data conference side
	*  @Request Object : params : { roomKey: 'roomKey' }
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek Pathak
	*/
	
	function fetchConferencePoll(req, res) {
	
	  //valiating user 
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.params.roomKey) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Validating if room key is valid or not
	        if (validator.isEmpty(req.params.roomKey)) {
	          res.json({
	            status: false,
	            error: "Invalid room key"
	          });
	        } else {
	
	          //Query for finding the room data based on room key
	          var query = _room2.default.findOne({
	            roomKey: (0, _slashesActions.addSlash)(req.params.roomKey)
	          }).exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: 'Invalid Room'
	              });
	            }
	            if (doc) {
	              var roomName = doc.roomName;
	
	              //Query for finding the topic data based on room id
	              var query;
	              if (person.role == _adminUser.Roles.Student) {
	                query = _poll2.default.find({
	                  roomId: doc._id,
	                  publish: true
	                });
	              } else {
	                query = _poll2.default.find({
	                  roomId: doc._id,
	                  $or: [{
	                    createdBy: person._id
	                  }, {
	                    publish: true
	                  }]
	                });
	              }
	              query.populate('createdBy', 'firstname lastname profile.profileImage');
	              query.populate('submissions.submittedBy', 'firstname lastname profile.profileImage');
	              query.sort({
	                'createdAt': -1
	              }).exec(function (err, doc) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: 'Invalid Poll'
	                  });
	                }
	                if (doc) {
	                  res.json({
	                    status: true,
	                    data: doc
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in fetch conference poll", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchConferencePollcontentdata
	*  @Purpose : For fetching pollcontent data conference side
	*  @Request Object : params : { roomId: 'rid',pollId: 'pid'  }
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : pranathigaddam
	*/
	
	function fetchConferencePollcontentdata(req, res) {
	  //valiating user 
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.rid || !req.params.pid) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Query for finding the topic data based on room id
	        var query;
	        if (person.role == _adminUser.Roles.Student) {
	          query = _poll2.default.findOne({
	            roomId: req.params.rid,
	            _id: mongoose.Types.ObjectId(req.params.pid),
	            publish: true
	          });
	        } else {
	          query = _poll2.default.findOne({
	            roomId: req.params.rid,
	            _id: mongoose.Types.ObjectId(req.params.pid),
	            $or: [{
	              createdBy: person._id
	            }, {
	              publish: true
	            }]
	          });
	        }
	        query.populate('createdBy', 'firstname lastname profile.profileImage');
	        query.populate('submissions.submittedBy', 'firstname lastname profile.profileImage');
	        query.sort({
	          'createdAt': -1
	        }).exec(function (err, doc) {
	          if (err) {
	            res.json({
	              status: false,
	              error: 'Invalid Poll'
	            });
	          } else {
	            res.json({
	              status: true,
	              data: doc
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in fetch conference poll", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchConferencePoll
	*  @Purpose : For creating poll data conference side
	*  @Request Object : params : { roomKey: 'roomKey' }
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek Pathak
	*/
	
	function createPoll(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.body.pollData) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var obj = req.body.pollData;
	        obj['createdBy'] = person._id;
	
	        //Validating if room id is valid or not
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room Id"
	          });
	        } else {
	
	          //Save the poll
	          var objEntity = new _poll2.default(obj);
	          objEntity.save(function (err, doc) {
	            // console.log("err == ",err);
	            // console.log("doc == ",doc);
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              //Query for finding the topic data based on room id
	              var query = _poll2.default.find({
	                roomId: obj.roomId,
	                $or: [{
	                  createdBy: person._id
	                }, {
	                  publish: true
	                }]
	              });
	              query.populate('createdBy', 'firstname lastname profile.profileImage');
	              query.populate('submissions.submittedBy', 'firstname lastname profile.profileImage');
	              query.sort({
	                'createdAt': -1
	              }).exec(function (err, doc) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: 'Invalid Poll'
	                  });
	                } else if (doc) {
	                  if (obj.publish == false) {
	                    res.json({
	                      status: true,
	                      data: doc,
	                      message: "Created successfully."
	                    });
	                  } else {
	                    res.json({
	                      status: true,
	                      data: doc,
	                      message: "Created and Published successfully."
	                    });
	                  }
	                } else {
	                  res.json({
	                    status: false,
	                    error: 'Internal server error, Please try again'
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error, Please try again"
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : submitConferencePoll
	*  @Purpose : For submitting poll data conference side by student
	*  @Request Object : { pollData : { submittedBy : Id, answer : answer},roomKey: 'roomKey' }
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek Pathak
	*/
	
	function submitConferencePoll(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.body.pollData || !req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 400
	        });
	      } else {
	        var obj = req.body.pollData;
	
	        //Validating if room id is valid or not
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room Id",
	            errorCode: 400
	          });
	        } else if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid Poll",
	            errorCode: 400
	          });
	        } else {
	          //changedBy : pranathi, disc:checking the ploll is published or not, 
	          _poll2.default.findOne({ _id: req.params.id, roomId: obj.roomId }).select('publish').exec(function (publishDataErr, publishData) {
	            if (publishDataErr) {
	              res.json({
	                status: false,
	                error: publishDataErr.message,
	                errorCode: 400
	              });
	            } else {
	              if (publishData && publishData.publish == true) {
	                var submissionData = {
	                  submittedBy: person._id,
	                  answer: obj.answer
	                };
	                _poll2.default.update({
	                  _id: req.params.id,
	                  roomId: obj.roomId
	                }, {
	                  $push: {
	                    submissions: submissionData
	                  }
	                }).exec(function (err, result) {
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: 'Invalid Poll',
	                      errorCode: 400
	                    });
	                  } else if (result) {
	
	                    //Query for finding the poll data based on room id
	                    var query;
	                    if (person.role == _adminUser.Roles.Student) {
	                      query = _poll2.default.find({
	                        roomId: obj.roomId,
	                        publish: true
	                      });
	                    } else {
	                      query = _poll2.default.find({
	                        roomId: obj.roomId,
	                        $or: [{
	                          createdBy: person._id
	                        }, {
	                          publish: true
	                        }]
	                      });
	                    }
	                    query.populate('createdBy', 'firstname lastname profile.profileImage');
	                    query.populate('submissions.submittedBy', 'firstname lastname profile.profileImage');
	                    query.sort({
	                      'createdAt': -1
	                    }).exec(function (err, doc) {
	                      if (err) {
	                        res.json({
	                          status: false,
	                          error: "Invalid Poll",
	                          errorCode: 400
	                        });
	                      }
	                      if (doc) {
	                        res.json({
	                          status: true,
	                          data: doc,
	                          message: "Submitted successfully.",
	                          errorCode: 200
	                        });
	                      }
	                    });
	                  } else {
	                    res.json({
	                      status: false,
	                      error: "Submission failed",
	                      errorCode: 404
	
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: "Poll submission is aborted please try again",
	                  errorCode: 404
	                });
	              }
	            }
	          });
	        }
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error, Please try again",
	        errorCode: 400
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : updateConferencePoll
	*  @Purpose : For updating poll data conference side by instructor
	*  @Request Object : pollData : { roomId: 'roomId', question : question , options : options }
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek Pathak
	*/
	
	function updateConferencePoll(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.body.pollData || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var obj = req.body.pollData;
	
	        //Validating if room id is valid or not
	        if (!obj.roomId || validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room Id"
	          });
	        } else {
	          _poll2.default.findOne({ _id: req.params.id, roomId: obj.roomId }).select('submissions').exec(function (pollSubmitErr, pollSubmitData) {
	            if (pollSubmitErr) {
	              res.json({
	                status: false,
	                error: pollSubmitErr.message
	              });
	            } else {
	              // console.log('pollSubmitData.submissions',pollSubmitData.submissions);
	              if (pollSubmitData && pollSubmitData.submissions && pollSubmitData.submissions.length > 0) {
	                res.json({
	                  status: false,
	                  error: "Already Users Submitted can't Update "
	                });
	              } else {
	                _poll2.default.update({
	                  _id: req.params.id,
	                  roomId: obj.roomId
	                }, {
	                  $set: {
	                    question: obj.question,
	                    options: obj.options,
	                    modifiedBy: person._id,
	                    publish: obj.publish
	                  }
	                }).exec(function (err, result) {
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: 'Invalid Poll'
	                    });
	                  } else if (result) {
	
	                    //Query for finding the topic data based on room id
	                    var query = _poll2.default.find({
	                      roomId: obj.roomId,
	                      $or: [{
	                        createdBy: person._id
	                      }, {
	                        publish: true
	                      }]
	                    });
	                    query.populate('createdBy', 'firstname lastname profile.profileImage');
	                    query.populate('submissions.submittedBy', 'firstname lastname profile.profileImage');
	                    query.sort({
	                      'createdAt': -1
	                    }).exec(function (err, doc) {
	                      if (err) {
	                        res.json({
	                          status: false,
	                          error: 'Invalid Poll'
	                        });
	                      } else if (doc) {
	                        if (obj.publish == false) {
	                          res.json({
	                            status: true,
	                            data: doc,
	                            message: "Updated successfully."
	                          });
	                        } else {
	                          res.json({
	                            status: true,
	                            data: doc,
	                            message: "Updated and Published successfully."
	                          });
	                        }
	                      } else {
	                        res.jon({
	                          status: false,
	                          error: "Update failed."
	                        });
	                      }
	                    });
	                  } else {
	                    res.jon({
	                      status: false,
	                      error: "Internal server error, Please try again"
	                    });
	                  }
	                });
	              }
	            }
	          });
	        }
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error, Please try again"
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : publishConferencePoll
	*  @Purpose : For updating poll data conference side by instructor
	*  @Request body : { roomId: 'roomKey', pollId : 'pollId'}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek Pathak
	*/
	
	function publishConferencePoll(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.body || !req.body.roomId || !req.body.pollId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var obj = req.body;
	
	        //Validating if room id is valid or not
	        if (validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId)) {
	          res.json({
	            status: false,
	            error: "Invalid Room Id"
	          });
	        } else if (validator.isEmpty(obj.pollId) || !mongoose.Types.ObjectId.isValid(obj.pollId)) {
	          res.json({
	            status: false,
	            error: "Invalid Pool Id"
	          });
	        } else {
	
	          //update publish 
	          _poll2.default.update({
	            _id: obj.pollId,
	            roomId: obj.roomId
	          }, {
	            $set: {
	              publish: true
	            }
	          }).exec(function (err, updated) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              //Retrieve poll data of room and send back
	              _poll2.default.find({
	                roomId: obj.roomId,
	                $or: [{
	                  createdBy: person._id
	                }, {
	                  publish: true
	                }]
	              }).populate('createdBy', 'firstname lastname profile.profileImage').populate('submissions.submittedBy', 'firstname lastname profile.profileImage').sort({
	                'createdAt': -1
	              }).exec(function (err, pollData) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    data: pollData,
	                    message: 'Updated and published Successfully'
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error, Please try again"
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteConferencePoll
	*  @Purpose : For updating poll data conference side by instructor
	*  @Request body : { roomId: 'roomKey', pollId : 'pollId'}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek Pathak
	*/
	
	function deleteConferencePoll(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.params || !req.params.rid || !req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 400
	        });
	      } else {
	        var obj = req.params;
	
	        //Validating if room id is valid or not
	        if (validator.isEmpty(obj.rid) || !mongoose.Types.ObjectId.isValid(obj.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid Room Id",
	            errorCode: 400
	          });
	        } else if (validator.isEmpty(obj.id) || !mongoose.Types.ObjectId.isValid(obj.id)) {
	          res.json({
	            status: false,
	            error: "Invalid Poll Id",
	            errorCode: 400
	          });
	        } else {
	
	          //remove poll 
	          _poll2.default.remove({
	            _id: obj.id
	          }).exec(function (err, deleted) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message,
	                errorCode: 400
	              });
	            } else {
	
	              //Retrieve poll data of room and send back
	              _poll2.default.find({
	                roomId: obj.rid,
	                $or: [{
	                  createdBy: person._id
	                }, {
	                  publish: true
	                }]
	              }).populate('createdBy', 'firstname lastname profile.profileImage').populate('submissions.submittedBy', 'firstname lastname profile.profileImage').sort({
	                'createdAt': -1
	              }).exec(function (err, pollData) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message,
	                    errorCode: 400
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    data: pollData,
	                    message: 'Deleted Successfully',
	                    errorCode: 201
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error, Please try again",
	        errorCode: 400
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchPollSubmissions
	*  @Purpose : For fetching poll submissions data conference side by instructor
	*  @Request body : { roomId: 'roomId', pollId : 'pollId'}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Prateek Pathak
	*/
	
	function fetchPollSubmissions(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request.",
	          errorCode: 208
	        });
	      } else if (!req.params || !req.params.rid || !req.params.id) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var obj = req.params;
	
	        //Validating if room id is valid or not
	        if (validator.isEmpty(obj.rid) || !mongoose.Types.ObjectId.isValid(obj.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid Room Id"
	          });
	        } else if (validator.isEmpty(obj.id) || !mongoose.Types.ObjectId.isValid(obj.id)) {
	          res.json({
	            status: false,
	            error: "Invalid Poll Id"
	          });
	        } else {
	
	          //For fetching poll submission data 
	          _poll2.default.findOne({
	            _id: obj.id,
	            roomId: obj.rid
	          }).populate('createdBy', 'firstname lastname profile.profileImage').populate('submissions.submittedBy', 'firstname lastname profile.profileImage').sort({
	            'createdAt': -1
	          }).exec(function (err, pollData) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	              res.json({
	                status: true,
	                data: pollData
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error, Please try again"
	      });
	    }
	  });
	}
	
	function getAttendees(req, res) {
	  // console.log("getAttendees API call -- ", req.params);
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null || !req.params || !req.params.rid) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var obj = req.params;
	
	        //Validating if room id is valid or not
	        if (validator.isEmpty(obj.rid)) {
	          res.json({
	            status: false,
	            error: "Invalid Room Id"
	          });
	        } else {
	          var attendees = null;
	          var hostRole = null;
	          _room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(obj.rid) }).populate('users', 'firstname lastname email profile.profileImage role guest', { userStatus: 'Active' }).populate('corporateId', 'businessType -_id').exec(function (err, room) {
	            if (err) {
	              res.json({ status: false, error: "Error fetching Room Data." });
	            } else if (room && room.roomid) {
	              var now = moment().utc().toDate();
	              var today = Number(moment().utc().format('x'));
	              _schedule2.default.findOne({ roomId: room._id, dates: { $elemMatch: { startTime: { $lte: today }, endTime: { $gte: today } } } }, { "dates.$.startTime": 1, meetingName: 1, password: 1, createdBy: 1 }).populate('createdBy', 'role').exec(function (schErr, schRes) {
	                if (!schErr && schRes && schRes.dates && schRes.dates.length > 0) {
	                  hostRole = schRes.createdBy.role;
	
	                  if (hostRole == _adminUser.Roles.Instructor || hostRole == _adminUser.Roles.Presenter) {
	                    _students2.default.findOne({ roomId: room._id, instId: schRes.createdBy._id }).populate('students', 'firstname lastname email profile.profileImage role guest', { userStatus: 'Active' }).populate('instId', 'firstname lastname email profile.profileImage role').exec(function (studErr, studRes) {
	                      if (!studErr) {
	                        if (studRes && studRes.students) attendees = studRes.students;
	                        if (studRes && studRes.instId) attendees.push(studRes.instId);
	
	                        res.json({ status: true, attendees: attendees });
	                      }
	                    });
	                  } else /*if(hostRole == Roles.Superadmin || hostRole == Roles.Admin || hostRole == Roles.Lmsadmin)*/{
	                      _students2.default.find({ roomId: room._id /*, students : {$in : [uname] }*/ }).populate('students', 'firstname lastname email profile.profileImage role guest', { userStatus: 'Active' }).populate('instId', 'firstname lastname email profile.profileImage role').exec(function (studErr, studRes) {
	                        if (!studErr) {
	                          attendees = room.users;
	
	                          // Merges both arrays and gets unique items
	                          studRes.forEach(function (item) {
	                            attendees = [].concat(_toConsumableArray(attendees), _toConsumableArray(item.students));
	                          });
	                          res.json({ status: true, attendees: attendees });
	                        }
	                      });
	                    }
	                } else {
	                  attendees = room.users;
	                  res.json({ status: true, attendees: attendees });
	                }
	              });
	            } else {
	              res.json({ status: false, error: "Missing Room or Key." });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("e in getAttendees === ", e);
	      res.json({
	        status: false,
	        error: "Internal server error, Please try again"
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : validateSchedulePassword
	*  @Purpose : For Validate the schedule password
	*  @Request Object : data : obj
	*  @Response Object : Success - Boolean, Failure - Error message
	*  @Author : Rajesh Goriga
	*/
	
	function validateSchedulePassword(req, res) {
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person) {
	        if (!req.body.data.password || req.body.data.password == null || req.body.data.password == '') {
	          res.json({ status: false, error: "Please Enter schedule password" });
	        } else {
	          var query = _schedule2.default.findOne({ _id: req.body.data.scheduleId }, { password: 1 });
	          query.exec(function (error, result) {
	            if (error) {
	              res.json({ status: false, error: "Internal server error." });
	            } else if (result) {
	              if (result.password === req.body.data.password) {
	                res.json({ status: true });
	              } else {
	                res.json({ status: false, error: "Password you entered is incorrect " });
	              }
	            } else {
	              res.json({ status: false, error: "Internal server error." });
	            }
	          });
	        }
	      } else {
	        res.json({ status: false, error: "Invalid request." });
	      }
	    } catch (e) {
	      console.log("e in listPackage === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	function RemoveGuestFromRoom(req, res) {
	  // console.log("at Remove user");
	  // console.log("req.body.data", req.body.data);
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    console.log("person type", person.guest);
	    try {
	      if (!req.body.data && !req.body.data.roomKey || person == null) {
	        //console.log("person is null");
	        res.json({ status: false, error: "Invalid user" });
	      } else if (person && person.guest) {
	        // console.log("person", person);
	        // console.log("its a guest");
	        // console.log("req.body.data.roomKey", req.body.data.roomKey);
	        var roomQuery = _room2.default.findOne({ roomKey: req.body.data.roomKey });
	        roomQuery.exec(function (roomErr, roomData) {
	          if (roomErr) {
	            res.json({ status: false, error: "Invalid Room Key" });
	          } else {
	            // console.log("roomData._id", roomData._id);
	            // console.log("person._id", person._id);
	            // console.log("Valid room key in else", roomData);
	            var updateQuery = _room2.default.update({ _id: mongoose.Types.ObjectId(roomData._id) }, { $pull: { users: person._id } });
	            updateQuery.exec(function (updateErr, updateData) {
	              if (updateErr) {
	                res.json({ status: false, error: "Invalid RoomKey" });
	              } else {
	                // console.log("Users list", updateData);
	                // console.log("Successfully updated");
	                res.json({ status: true });
	              }
	            });
	          }
	        });
	      } else {
	        //console.log("its not a guest");
	        res.json({ status: true });
	      }
	    } catch (e) {
	      console.log("e in listPackage === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.listCorporate = listCorporate;
	exports.createCorporate = createCorporate;
	exports.createCorporateCallback = createCorporateCallback;
	exports.updateCorporate = updateCorporate;
	exports.fetchCorporate = fetchCorporate;
	exports.deleteCorporate = deleteCorporate;
	exports.getCorporateIds = getCorporateIds;
	
	var _corporate = __webpack_require__(41);
	
	var _corporate2 = _interopRequireDefault(_corporate);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _cuid = __webpack_require__(26);
	
	var _cuid2 = _interopRequireDefault(_cuid);
	
	var _limax = __webpack_require__(27);
	
	var _limax2 = _interopRequireDefault(_limax);
	
	var _sanitizeHtml = __webpack_require__(28);
	
	var _sanitizeHtml2 = _interopRequireDefault(_sanitizeHtml);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForCorporateCreation = _interopRequireWildcard(_emailFunctions);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//import * as CorporateController from './corporate.controller';
	var _ = __webpack_require__(7);
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	
	/**
	* @Function Name: "listCorporate",
	* @Purpose: "To get list of packages.",
	* @Request Object: query : {items, page, search},
	* @Response Object: Success- {status : true, data, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function listCorporate(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.query.items && req.query.page) {
	        var queryData = req.query;
	        var selector = {};
	
	        // check is there searcha value 
	        if (queryData.search && queryData.search != '') {
	          var slash_search = (0, _slashesActions.addSlash)(queryData.search);
	          var searchKey = RegExp(slash_search, 'i');
	          selector['$or'] = [{ 'businessId': { $regex: searchKey } }, { 'businessName': { $regex: searchKey } }, { 'contactDetails.name': { $regex: searchKey } }, { 'contactDetails.phoneNo': { $regex: searchKey } }, { 'address.state': { $regex: searchKey } }, { 'address.country': { $regex: searchKey } }];
	        }
	
	        // only superadmin can see the list of corporates
	        if (person.role == _adminUser.Roles.Superadmin) {
	          var query = _corporate2.default.find(selector).limit(Number(queryData.items)).select('businessId businessName businessType contactDetails address').skip(Number(queryData.items) * (Number(queryData.page) - 1));
	
	          if (req.query.sort == 'undefined' || req.query.sort == undefined) {
	            query.sort({ modifiedAt: -1 });
	          } else {
	            // console.log("sort === ", req.query.sort);
	            query.sort(JSON.parse(req.query.sort));
	          }
	          query.exec(function (err, result) {
	            if (err) res.json({ status: false, error: err });else {
	              _corporate2.default.count(selector).exec(function (error, count) {
	                res.json({ status: true, data: result, count: count });
	              });
	            }
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("error in listCorporate", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	};
	
	/**
	* @Function Name: "createCorporate",
	* @Purpose: "To create new package.",
	* @Request Object: packagedata : { businessId, businessName, businessType, address, phoneNo, websiteAddr, companyStatus, scheduleType, contactDetails, legalDocuments},
	* @Response Object: Success- {status : true, id, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function createCorporate(req, res) {
	  try {
	    if (req.body.corporatedata) {
	      var obj = req.body.corporatedata;
	
	      // request came from portal
	      if (obj.from && obj.from == 'PORTAL') {
	
	        // check businessId is unique or not
	        var query = _corporate2.default.findOne({ 'businessId': (0, _slashesActions.addSlash)(obj.businessId) });
	        query.exec(function (err, corporate) {
	          if (err) res.json({ status: false, error: err.message });else if (corporate) res.json({ status: false, error: 'Already corporate present with same business id' });else {
	
	            // create new corporate account
	            obj['createdBy'] = mongoose.Types.ObjectId(obj.uid);
	            obj['modifiedBy'] = mongoose.Types.ObjectId(obj.uid);
	            obj['createdAt'] = moment().utc().toDate();
	            delete obj['from'];
	            var objEntity = new _corporate2.default(obj);
	            objEntity.save(function (err, newCorporate) {
	              if (err) {
	                res.json({ status: false, error: err });
	              } else {
	                res.json({ status: true, data: newCorporate, message: "Created successfully." });
	              }
	            });
	          }
	        });
	      } else {
	
	        // Varifying request is valid or not
	        (0, _authorization.checkValidRequest)(req.headers, function (person) {
	          try {
	            if (person != null) {
	
	              // only superadmin can create the corporate account
	              if (person.role == _adminUser.Roles.Superadmin) {
	                obj["uid"] = person._id;
	                createCorporateCallback(obj, function (corporateerr, corporateData) {
	                  if (corporateData) {
	                    res.json({ status: true, id: corporateData.id, message: corporateData.message });
	                  } else if (corporateerr) {
	                    res.json({ status: false, error: corporateerr });
	                  } else {
	                    res.json({ status: false, error: "Internal Server Error, Please try again" });
	                  }
	                });
	              } else res.json({ status: false, error: "Access denied." });
	            } else res.json({ status: false, error: "Invalid request." });
	          } catch (ex) {
	            console.log("e in createCorporate inner === ", ex);
	            res.json({ status: false, error: "Internal server error." });
	          }
	        });
	      }
	    } else res.json({ status: false, error: "Invalid request." });
	  } catch (e) {
	    console.log("error in createCorporate", e);
	    res.json({ status: false, error: "Internal server error." });
	  }
	}
	
	function createCorporateCallback(corporateObj, cb) {
	
	  try {
	    // check businessId is unique or not
	    var query = _corporate2.default.findOne({ 'businessId': (0, _slashesActions.addSlash)(corporateObj.businessId) });
	    query.exec(function (err, corporate) {
	      if (err) cb(err.message, null);else if (corporate) cb('Already corporate present with same business id', null);else {
	
	        // create new corporate account
	        corporateObj['createdBy'] = mongoose.Types.ObjectId(corporateObj.uid);
	        corporateObj['modifiedBy'] = mongoose.Types.ObjectId(corporateObj.uid);
	        corporateObj['createdAt'] = moment().utc().toDate();
	        corporateObj['modifiedAt'] = moment().utc().toDate();
	        delete corporateObj["uid"];
	        var objEntity = new _corporate2.default(corporateObj);
	        objEntity.save(function (error, newCorporate) {
	          /*console.log("err == ",error);
	          console.log("newCorporate == ",newCorporate);*/
	          if (error) cb(error.message, null);else if (newCorporate) {
	            var resData = {
	              id: newCorporate._id,
	              message: "Created successfully."
	            };
	            cb(null, resData);
	
	            // create logs
	            // let logObj = {
	            //   logType : 'Corporate',
	            //   actionType : 'Created',
	            //   actionTime : moment().utc().toDate(),
	            //   uid : obj.createdBy,
	            //   details : {
	            //     name : obj.businessName,
	            //     businessId : obj.businessId,
	            //     remoteAddress : req.connection.remoteAddress,
	            //     userAgent : req.headers['user-agent']
	            //   }
	            // }  
	            // createLog(logObj, function(status) {
	            //   if(status) {
	            //     // console.log(status);
	            //   }
	            // });
	
	            // send email 
	
	            /*Users.findOne({_id:  mongoose.Types.ObjectId(doc.createdBy)},function(err,name){
	                if(name && name.email){
	                  var exchangeData = {
	                    to : doc.contactDetails.email,
	                    whoCreated :name.email,
	                    subject : 'Corporate Created',
	                    body : 'New Corporate Account with name '+doc.contactDetails.firstname+' has been created by '+name.firstname +' '+name.lastname+'.'
	                  }
	                  console.log("exchangeData === ",exchangeData);
	                  EmailForCorporateCreation.createUserMail(exchangeData, function(emailerror, emailsuccess){
	                    if(emailerror.status == false){
	                      console.log("Email not sent");
	                    }else{
	                      console.log("Email sent");
	                    }
	                  });
	                  
	                }else{
	                   res.json({status : false,error : "User not found ." });
	                }
	                
	              });*/
	
	            //console.log("doc === ",doc);
	          } else cb("Internal server error", null);
	        });
	      }
	    });
	  } catch (e) {
	    console.log('error in createCorporateCallback', e);
	    cb("Internal server error, Please try again", null);
	  }
	}
	
	/**
	* @Function Name: "updateCorporate",
	* @Purpose: "To create new package.",
	* @Request Object: params : id, packagedata : { businessId, businessName, businessType, address, phoneNo, websiteAddr, companyStatus, scheduleType, contactDetails, legalDocuments},
	* @Response Object: Success- {status : true, id, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function updateCorporate(req, res) {
	  try {
	
	    // Varifying request is valid or not
	    (0, _authorization.checkValidRequest)(req.headers, function (person) {
	      if (person != null && req.body.corporatedata && req.params.id) {
	        var obj = req.body.corporatedata;
	
	        // only superadmin can update any corporate account
	        if (person.role == _adminUser.Roles.Superadmin) {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	          obj['modifiedBy'] = mongoose.Types.ObjectId(person.uid);
	          obj['modifiedAt'] = moment().utc().toDate();
	          delete obj["uid"];
	
	          // check valid corporate or not
	          var query = _corporate2.default.findOne({ _id: recordId });
	          query.exec(function (err, corporate) {
	            if (corporate) {
	
	              // check businessId is unique or not
	              var checkQuery = _corporate2.default.findOne({ _id: { $ne: recordId }, 'businessId': (0, _slashesActions.addSlash)(obj.businessId) });
	              checkQuery.exec(function (error, existed) {
	                if (error) res.json({ status: false, error: err.message });else if (existed) res.json({ status: false, error: 'Already corporate present with same business id' });else {
	
	                  // update the corporate with new data
	                  _corporate2.default.update({ _id: recordId }, { $set: obj }, { runValidators: true }, function (err, doc) {
	                    /*console.log("update err == ",err);
	                    console.log("update doc == ",doc);*/
	                    if (err) res.json({ status: false, error: err });else if (doc) res.json({ status: true, id: recordId, message: "Updated successfully." });else res.json({ status: false, error: "Internal server error." });
	                  });
	                }
	              });
	            } else res.json({ status: false, error: "Invalid corporate" });
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid request." });
	    });
	  } catch (e) {
	    console.log("error in updateCorporate", e);
	    res.json({ status: false, error: "Internal server error." });
	  }
	}
	
	/**
	* @Function Name: "fetchCorporate",
	* @Purpose: "To create new package.",
	* @Request Object: params : { id },
	* @Response Object: Success- {status : true, data }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function fetchCorporate(req, res) {
	  try {
	
	    // Varifying request is valid or not
	    (0, _authorization.checkValidRequest)(req.headers, function (person) {
	      try {
	        if (person != null && req.params.id) {
	
	          // check and fetch corporate
	          var query = _corporate2.default.findOne({ _id: mongoose.Types.ObjectId(req.params.id) });
	          query.exec(function (error, corporate) {
	            if (error) {
	              console.log("error === ", error);
	              res.json({ status: false, error: "Failed to load data." });
	            } else if (corporate) res.json({ status: true, data: corporate });else res.json({ status: false, error: "Internal server error." });
	          });
	        } else res.json({ status: false, error: "Invalid request." });
	      } catch (e) {
	        console.log("e in fetchCorporate inner === ", e);
	        res.json({ status: false, error: "Internal server error." });
	      }
	    });
	  } catch (e) {
	    console.log("error in fetchCorporate", e);
	    res.json({ status: false, error: "Internal server error." });
	  }
	}
	
	/**
	* @Function Name: "deleteCorporate",
	* @Purpose: "To create new package.",
	* @Request Object: params : { id },
	* @Response Object: Success- {status : true, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function deleteCorporate(req, res) {
	  try {
	
	    // Varifying request is valid or not
	    (0, _authorization.checkValidRequest)(req.headers, function (person) {
	      try {
	        if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
	
	          // superadmin only can delete any corporate account
	          if (person.role == _adminUser.Roles.Superadmin) {
	            var recordId = mongoose.Types.ObjectId(req.params.id);
	
	            // check valid corporate or not
	            var query = _corporate2.default.findOne({ _id: recordId });
	            query.exec(function (err, doc) {
	              if (err) {
	                res.json({ status: false, error: err });
	              } else if (doc) {
	
	                // delete the corporare record
	                var remodeQuery = _corporate2.default.remove({ _id: recordId });
	                remodeQuery.exec(function (error, response) {
	                  if (error) {
	                    res.json({ status: false, error: error });
	                  } else {
	                    res.json({ status: true, message: "Deleted succesfully" });
	
	                    // create log for delete
	                    // let logObj = {
	                    //   logType : 'Corporate',
	                    //   actionType : 'Deleted',
	                    //   actionTime : moment().utc().toDate(),
	                    //   uid : doc.createdBy,
	                    //   details : {
	                    //     name : doc.businessName,
	                    //     businessId : doc.businessId,
	                    //     remoteAddress : req.connection.remoteAddress,
	                    //     userAgent : req.headers['user-agent']
	                    //   }
	                    // }  
	                    // createLog(logObj, function(status) {
	                    //   if(status) {
	                    //     // console.log(status);
	                    //   }
	                    // });
	                  }
	                });
	              } else res.json({ status: false, error: "Invalid corporate." });
	            });
	          } else res.json({ status: false, error: "Access denied." });
	        } else res.json({ status: false, error: "Invalid request." });
	      } catch (e) {
	        console.log("e in deleteCorporate inner === ", e);
	        res.json({ status: false, error: "Internal server error." });
	      }
	    });
	  } catch (e) {
	    console.log("error in deleteCorporate", e);
	    res.json({ status: false, error: "Internal server error." });
	  }
	}
	
	/**
	* @Function Name: "getCorporateIds",
	* @Purpose: "To create new package.",
	* @Request Object: {},
	* @Response Object: Success- {status : true, data }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function getCorporateIds(req, res) {
	  var options = [['', 'Select Corporate']];
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	
	        // for superadmin fetch all company ids
	        if (person.role == _adminUser.Roles.Superadmin) {
	          var query = _corporate2.default.find({});
	          query.exec(function (error, doc) {
	            if (doc) {
	              _.forIn(doc, function (value, key) {
	                var name = value.businessId + "(" + value.businessName + ")";
	                options.push([value._id, name]);
	              });
	              res.json({ data: options });
	            } else {
	              res.json({ data: options });
	            }
	          });
	        } else if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.CRMadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	          var bussinessID = null;
	          if (person.profile.companyid && person.profile.companyid._id) {
	            bussinessID = person.profile.companyid._id;
	          }
	          // for any admin fetch his company id
	          var _query = _corporate2.default.findOne({ _id: bussinessID });
	          _query.exec(function (error, doc) {
	            if (doc) {
	              var name = doc.businessId + "(" + doc.businessName + ")";
	              options.push([doc._id, name]);
	              res.json({ data: options });
	            } else res.json({ data: options });
	          });
	        } else res.json({ data: options });
	      } else res.json({ data: options });
	    } catch (e) {
	      console.log("error in getCorporateIds", e);
	      res.json({ data: options });
	    }
	  });
	}

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.listPackage = listPackage;
	exports.createPackage = createPackage;
	exports.createPackageCallback = createPackageCallback;
	exports.sendPackageEmail = sendPackageEmail;
	exports.updatePackage = updatePackage;
	exports.fetchPackage = fetchPackage;
	exports.deletePackage = deletePackage;
	exports.getserverlist = getserverlist;
	exports.checkUpdateValidations = checkUpdateValidations;
	
	var _package = __webpack_require__(25);
	
	var _package2 = _interopRequireDefault(_package);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _adminUser = __webpack_require__(13);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _authorization = __webpack_require__(10);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForUserCreation = _interopRequireWildcard(_emailFunctions);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// import * as EmailForCorporateCreation from '../emailFunctions';
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	
	/**
	* @Function Name: "listPackage",
	* @Purpose: "To get list of packages.",
	* @Request Object: query : {items, page, search},
	* @Response Object: Success- {status : true, data, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function listPackage(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.query.items && req.query.page) {
	        var queryData = req.query;
	
	        // beased on role and pagination wise we need to fetch the packages
	        if (person.role == _adminUser.Roles.Superadmin) {
	          var selector = {};
	
	          // if it is search request
	          if (queryData.search && queryData.search != '') {
	            var slash_search = (0, _slashesActions.addSlash)(queryData.search);
	            var searchKey = RegExp(slash_search, 'i');
	            selector['$or'] = [{ 'packageName': { $regex: searchKey } }, { 'serverLocation': { $regex: searchKey } }];
	          }
	          var query = _package2.default.find(selector).limit(Number(queryData.items)).select('packageName packageValidity packagePrice userCount continuousPresence serverLocation createdBy').populate('createdBy', 'firstname lastname -_id').skip(Number(queryData.items) * (Number(queryData.page) - 1));
	          // .sort({
	          //   modifiedAt: -1
	          // });
	          if (req.query.sort == 'undefined' || req.query.sort == undefined) {
	            query.sort({ modifiedAt: -1 });
	          } else {
	            // console.log("sort === ", req.query.sort);
	            query.sort(JSON.parse(req.query.sort));
	          }
	          query.lean().exec(function (err, result) {
	            if (err) {
	              res.json({ status: false, error: err });
	            } else if (result) {
	              _package2.default.count(selector).exec(function (error, count) {
	                //console.log("DATA--", result);
	                //console.log("count--", count);
	                // console.log("DATA--", result);
	                for (var i = 0; i < _config2.default.location.length; i++) {
	                  for (var j = 0; j < result.length; j++) {
	                    if (_config2.default.location[i][0] == result[j].serverLocation) {
	                      result[j].serverLocation = _config2.default.location[i][1];
	                    }
	                  }
	                }
	                res.json({ status: true, data: result, count: count });
	              });
	            } else res.json({ status: false, error: "Internal server error." });
	          });
	        } else if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	          var _selector = { assignedTo: mongoose.Types.ObjectId(person._id) };
	
	          // if it is search request
	          if (queryData.search && queryData.search != '') {
	            var _slash_search = (0, _slashesActions.addSlash)(queryData.search);
	            var _searchKey = RegExp(_slash_search, 'i');
	            _selector['$or'] = [{ 'packageName': { $regex: _searchKey } }, { 'serverLocation': { $regex: _searchKey } }];
	          }
	          var _query = _package2.default.find(_selector).limit(Number(queryData.items)).select('packageName packageValidity packagePrice userCount continuousPresence serverLocation').skip(Number(queryData.items) * (Number(queryData.page) - 1)).sort({
	            modifiedAt: -1
	          });
	          _query.exec(function (err, result) {
	            if (err) res.json({ status: false, error: err });else if (result) {
	              _package2.default.count(_selector).exec(function (error, count) {
	                // console.log("DATA--", result);
	                // console.log("count--", count);
	                for (var i = 0; i < _config2.default.location.length; i++) {
	                  for (var j = 0; j < result.length; j++) {
	                    if (_config2.default.location[i][0] == result[j].serverLocation) {
	                      result[j].serverLocation = _config2.default.location[i][1];
	                    }
	                  }
	                }
	                res.json({ status: true, data: result, count: count });
	              });
	            } else res.json({ status: true, data: [], count: 0 });
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("error in listPackage", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "createPackage",
	* @Purpose: "To create new package.",
	* @Request Object: packagedata : { packageName, packagePrice, userCount, roomCount, topicCount, continuousPresence, features, packageValidity, serverLocation, assignedTo},
	* @Response Object: Success- {status : true, data, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function createPackage(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.packagedata) {
	        var obj = req.body.packagedata;
	
	        // only superadmin can create the package and from portal
	        if (person.role == _adminUser.Roles.Superadmin || obj.checkPortal && obj.checkPortal == 'Portal') {
	          obj["email"] = person.email;
	          createPackageCallback(obj, function (packageerr, packageData) {
	            if (packageData) {
	              res.json({ status: true, id: packageData.id, message: packageData.message });
	            } else if (packageerr) {
	              res.json({ status: false, error: packageerr });
	            } else {
	              res.json({ status: false, error: "Internal Server Error, Please try again later" });
	            }
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("error in createPackage", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	function createPackageCallback(packageObj, cb) {
	
	  try {
	    packageObj['createdBy'] = packageObj.uid;
	    packageObj['modifiedBy'] = packageObj.uid;
	    packageObj['createdAt'] = moment().utc().toDate();
	    delete packageObj["uid"];
	    var email = packageObj.email;
	    delete packageObj["email"];
	    // create new package record in database
	    var objEntity = new _package2.default(packageObj);
	    objEntity.save(function (err, newpackage) {
	      if (err) cb(err.message, null);else if (newpackage) {
	        /*if(paymentFlag){
	            if(person && person.email){
	                var exchangeData = {
	                to : person.email,
	                whoCreated :person.email,
	                subject : 'Package Purchased !! Get details',
	                firstname : person.firstname,
	                order_id : doc.payment_details.order_id ,
	                password : password
	              }
	              EmailForCorporateCreation.createCorporateMail(exchangeData, function(emailerror, emailsuccess){
	              
	              if(emailerror){
	                    //console.log('error---',emailerror);
	                     res.json({ status: false, error: "Email not sent"});
	                  }else{
	                    console.log('sucess')
	                    res.json(status:true,data:doc,message:"Mail sent")
	                  }
	                 });
	              
	            }else{
	               res.json({ status: false, error: "Can not find user"});
	            }
	          }else{*/
	        // var query = Users.findOne({ 
	        //     _id: mongoose.Types.ObjectId(obj.assignedTo) 
	        //   });
	        // query.populate('email').exec(function(e, doc){
	        //   if (e) {
	        //     console.log('e===',e);
	        //   } else {
	        //     console.log('doc===',doc);
	        //   }
	        // })
	        var resData = {
	          id: newpackage._id,
	          message: "Created successfully."
	        };
	        cb(null, resData);
	        // res.json({ status : true, id : newpackage._id, message : "Created successfully." });
	        var packageObject = {
	          assignedTo: packageObj.assignedTo,
	          subject: 'The Package Created',
	          userBody: 'The Package  ' + '<b>' + packageObj.packageName + '</b>' + ' has been assigned to you.',
	          operatorBody: 'You have successfully created the package ' + '<b>' + packageObj.packageName + '</b>' + ' .',
	          email: email
	        };
	        sendPackageEmail(packageObject);
	        // for logs
	        // let logObj = {
	        //   logType : 'Package',
	        //   actionType : 'Created',
	        //   actionTime : moment().utc().toDate(),
	        //   uid : person._id,
	        //   details : {
	        //     name : obj.packageName,
	        //     assignedTo : obj.assignedTo,
	        //     remoteAddress : req.connection.remoteAddress,
	        //     userAgent : req.headers['user-agent']
	        //   }
	        // }  
	        // createLog(logObj, function(status) {
	        //   if (status) {
	        //     // console.log(status);
	        //   }
	        // });
	      } else cb("Internal server error", null);
	    });
	  } catch (e) {
	    console.log('error in createPackageCallback', e);
	    cb("Internal server error, Please try again", null);
	  }
	}
	
	function sendPackageEmail(obj) {
	  _users2.default.findOne({ _id: obj.assignedTo }, function (err, name) {
	    if (name && name.email) {
	      var exchangeData = {
	        to: name.email,
	        subject: obj.subject,
	        body: obj.userBody,
	        descreption: 'Please login for more details.'
	      };
	
	      // Commented for temporary bases
	      // Email will be sent to assigned package user when create, update and delete package.
	
	      // EmailForUserCreation.defaultUserMail(exchangeData, function(emailerror, emailsuccess) {
	      //   //console.log(emailerror.status)
	      //   if (emailerror.status == false) {
	      //     console.log("Email not sent");
	      //     } else {
	      //     //console.log('email sent')
	      //   }
	      // });
	
	      var myMailData = {
	        to: obj.email,
	        subject: obj.subject,
	        body: obj.operatorBody,
	        descreption: 'Please login for more details.'
	      };
	
	      // Commented for temporary bases
	      // Email will be sent to super admin when create, update and delete package.
	
	      // EmailForUserCreation.defaultUserMail(myMailData, function(emailerror, emailsuccess) {
	      //   //console.log(emailerror.status)
	      //   if (emailerror.status == false) {
	      //     console.log("Email not sent");
	      //   } else {
	      //     //console.log('email sent')
	      //   }
	      // });
	    }
	  });
	}
	
	/**
	* @Function Name: "updatePackage",
	* @Purpose: "To update existing package data.",
	* @Request Object: packagedata : {_id, packageName, packagePrice, userCount, roomCount, topicCount, continuousPresence, features, packageValidity, serverLocation, assignedTo},
	* @Response Object: Success- {status : true, data, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function updatePackage(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.packagedata && req.params.id) {
	
	        // only superadmin can update the package no one else
	        if (person.role == _adminUser.Roles.Superadmin) {
	          var obj = req.body.packagedata;
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	          obj['createdBy'] = person._id;
	          obj['modifiedBy'] = person._id;
	          obj['modifiedAt'] = moment().utc().toDate();
	          delete obj["uid"];
	
	          // cheack packageid is valid or not. 
	          _package2.default.findOne({ _id: recordId }, function (error, data) {
	            if (data) {
	
	              // check any validation changes(user count and room count)
	              checkUpdateValidations(data, obj, function (response) {
	                if (response != null) res.json({ status: false, error: response });else {
	                  _package2.default.update({ _id: recordId }, { $set: obj }, { runValidators: true }, function (err, doc) {
	                    // console.log("update err == ",err);
	                    // console.log("update doc == ",doc);
	                    if (err) res.json({ status: false, error: err });else res.json({ status: true, id: recordId, message: "Updated successfully." });
	
	                    var packageObj = {
	                      assignedTo: obj.assignedTo,
	
	                      subject: 'The Package Updated',
	                      userBody: 'The Package  ' + '<b>' + obj.packageName + '</b>' + ' has been assigned to you.',
	                      operatorBody: 'You have successfully updated the pre-created package ' + '<b>' + obj.packageName + '</b>' + '.',
	                      email: person.email
	                    };
	                    sendPackageEmail(packageObj);
	                  });
	                }
	              });
	            } else res.json({ status: false, error: "Invalid Package" });
	          });
	        } else res.json({ status: false, error: "Access denied" });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("error in updatePackage", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchPackage
	*  @Purpose : For fetch particular Package data
	*  @Request Object : params : { id: "packageId" }
	*  @Response Object : Success - Success message and data, Failure - Error message
	*  @Author : Prudhvi
	*/
	function fetchPackage(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
	
	        // only superadmin and all admin can see the packages
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	          var query = _package2.default.findOne({ _id: req.params.id });
	          query.populate('assignedTo', 'firstname lastname').lean().exec(function (err, doc) {
	            // console.log("doc ==== ",doc);
	            if (err) res.json({ status: false, error: err });else {
	              var location = null;
	              for (var i = 0; i < _config2.default.location.length; i++) {
	                if (_config2.default.location[i][0] == doc.serverLocation) location = _config2.default.location[i][1];
	              }
	              doc['location'] = location;
	              res.json({ status: true, data: doc });
	            }
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("error in fetchPackage", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	*  @Function name : deletePackage
	*  @Purpose : For deleting particular Package data
	*  @Request Object : params : { id: "packageId" }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Prudhvi
	*/
	function deletePackage(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      // if (person != null && req.params.id) {
	
	      if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
	
	        // only superadmin can delete the package
	        if (person.role == _adminUser.Roles.Superadmin) {
	          // let recordId = mongoose.Types.ObjectId(req.params.id);
	
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          // check valid package or not
	          var query = _package2.default.findOne({ _id: recordId });
	          query.exec(function (err, obj) {
	            // console.log('obj----', obj)
	            if (err) res.json({ status: false, error: err });else if (obj) {
	              var packageObj = {
	                assignedTo: obj.assignedTo,
	                subject: 'The Package Deleted',
	                userBody: 'The package ' + '<b>' + obj.packageName + '</b>' + ' has been deleted successfully.',
	                operatorBody: 'You have been successfully deleted the package ' + '<b>' + obj.packageName + '</b>' + '.',
	                email: person.email
	              };
	              sendPackageEmail(packageObj);
	              // check any rooms are existed with this package
	              var roomQuery = _room2.default.find({ "selPackage": recordId });
	              roomQuery.exec(function (error, roomDoc) {
	                if (error) res.json({ status: false, error: error });else {
	                  if (roomDoc && roomDoc.length > 0) res.json({ status: false, error: "Rooms existed :: delete all rooms for this package and try again." });else {
	                    // console.log("deleted");
	
	                    // delete the package record
	                    var innerquery = _package2.default.remove({ _id: recordId });
	                    innerquery.exec(function (error, response) {
	                      if (error) res.json({ status: false, error: error });else {
	                        res.json({ status: true, message: "Deleted succesfully" });
	
	                        // create log
	                        // let logObj = {
	                        //   logType : 'Package',
	                        //   actionType : 'Deleted',
	                        //   actionTime : moment().utc().toDate(),
	                        //   uid :  obj.createdBy,
	                        //   details : {
	                        //     name :  obj.packageName,
	                        //     assignedTo :  obj.assignedTo,
	                        //     remoteAddress : req.connection.remoteAddress,
	                        //     userAgent : req.headers['user-agent']
	                        //   }
	                        // }  
	                        // createLog(logObj, function(status) {
	                        //   if(status) {
	                        //     // console.log(status);
	                        //   }
	                        // });
	                      }
	                    });
	                  }
	                }
	              });
	            } else {
	              res.json({ status: false, error: "Invalid Package" });
	            }
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid request." });
	    } catch (e) {
	      console.log("error in deletePackage", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	function getserverlist(req, res) {
	  // console.log("server list server call--", config.location);
	  return res.json({ data: _config2.default.location });
	}
	
	/*-------------------------- callback functions ----------------------------*/
	
	/**
	*  @Function name : checkUpdateValidations
	*  @Purpose : For check package validations on update the package
	*  @Request Object : existData, newData, cb
	*  @Response Object : Success - null, Failure - Error message
	*  @Author : Prudhvi
	*/
	function checkUpdateValidations(existData, newData, cb) {
	  try {
	
	    // check new usercount value is less than existed usercount then check the users count
	    if (existData.userCount > newData.userCount && newData.userCount != -1 || !existData.userCount) {
	      var adminquery = _users2.default.findOne({ _id: existData.assignedTo }).select('profile.companyid');
	      adminquery.exec(function (error, admin) {
	        if (admin) {
	          _users2.default.count({ "profile.companyid": admin.profile.companyid, userStatus: "Active" }).exec(function (err, count) {
	            if (err) cb("Internal server error, Please try again");else if (count <= newData.userCount) cb(null);else {
	              var message = "User count exceded, Already you have " + count + " users.";
	              cb(message);
	            }
	          });
	        } else cb("Invalid package");
	      });
	    } else if (existData.roomCount > newData.roomCount && newData.roomCount != -1 || !existData.roomCount) {
	
	      // check new roomCount value is less than existed roomCount then check the rooms count
	      _room2.default.count({ selPackage: existData._id }).exec(function (err, count) {
	        if (err) cb("Internal server error, Please try again");else if (count <= newData.roomCount) cb(null);else {
	          var message = "Room count exceded, Already you have " + count + " rooms.";
	          cb(message);
	        }
	      });
	    } else if (existData.topicCount > newData.topicCount && newData.topicCount != -1) {
	
	      // need to remove the topic count field from package
	      cb(null);
	    } else if (existData.continuousPresence > newData.continuousPresence && newData.continuousPresence != -1) {
	      cb(null);
	    } else {
	      _room2.default.count({ selPackage: existData._id, expiryDate: { $gt: newData.packageValidity } }).exec(function (error, count) {
	        if (error) cb("Internal server error");else if (count && count > 0) {
	          var message = "Package validity should always be more (or) equals to room expiry date.";
	          cb(message);
	        } else cb(null);
	      });
	    }
	  } catch (e) {
	    console.log("error in checkUpdateValidations", e);
	    cb("Internal server error");
	  }
	}

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var feedbackSchema = new _mongoose2.default.Schema({
	
		userId: {
			type: String,
			required: true,
			ref: 'Users'
		},
		scheduleId: {
			type: String,
			required: false
		},
		roomId: {
			type: _mongoose2.default.Schema.Types.ObjectId,
			required: true,
			ref: 'Room'
		},
		feedbacks: {
			type: Object,
			required: true
		},
		createdBy: {
			type: String,
			required: true
		},
		createdOn: {
			type: Date,
			required: true,
			default: (0, _moment2.default)().utc().toDate()
		}
	
	});
	
	exports.default = _mongoose2.default.model('Feedback', feedbackSchema);

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var GroupSchema = new _mongoose2.default.Schema({
		groupName: {
			type: String,
			required: false,
			maxlength: [50, 'Group Name length should be maximum of 50 characters'],
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash,
			index: true
		},
		members: [{
			type: _mongoose2.default.Schema.Types.ObjectId,
			ref: 'Users'
		}],
		createdBy: {
			type: String
		},
		createdOn: {
			type: Date,
			default: (0, _moment2.default)().utc().toDate()
		}
	}, {
		toObject: { getters: true },
		toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('Group', GroupSchema);

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _slashesActions = __webpack_require__(4);
	
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	
	
	var schema = new mongoose.Schema({
	
	  question: {
	    type: String,
	    trim: true,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  author: {
	    type: mongoose.Schema.Types.ObjectId,
	    ref: 'Users'
	  },
	  roomId: {
	    type: mongoose.Schema.Types.ObjectId,
	    ref: 'Room'
	  },
	  scheduleId: {
	    type: mongoose.Schema.Types.ObjectId,
	    ref: 'schedule'
	  },
	  answers: [{
	    _id: {
	      type: mongoose.Schema.Types.ObjectId,
	      auto: true
	    },
	    author: {
	      type: mongoose.Schema.Types.ObjectId,
	      ref: 'Users'
	    },
	    answer: {
	      type: String,
	      trim: true,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    answerAt: {
	      type: Date,
	      default: moment().utc().toDate()
	    }
	  }],
	  replies: [{
	    _id: {
	      type: mongoose.Schema.Types.ObjectId,
	      auto: true
	    },
	    author: {
	      type: mongoose.Schema.Types.ObjectId,
	      ref: 'Users'
	    },
	    replyOn: {
	      type: mongoose.Schema.Types.ObjectId
	    },
	    comment: {
	      type: String,
	      trim: true,
	      maxlength: [150, 'Reply length should be maximum of 150 characters'],
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    replyAt: {
	      type: Date,
	      default: moment().utc().toDate()
	    }
	  }],
	  createdAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  },
	  modifiedAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  }
	}, {
	  toObject: { getters: true },
	  toJSON: { getters: true }
	});
	var Handraise = mongoose.model('handraise', schema);
	exports.default = Handraise;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var moment = __webpack_require__(1);
	var Schema = _mongoose2.default.Schema;
	
	var settingsSchema = new Schema({
	  smtpSettings: {
	    apiKey: {
	      type: String,
	      trim: true,
	      maxlength: [30, 'Api Key length should be maximum of 30 characters']
	    },
	    domain: {
	      type: String,
	      trim: true,
	      maxlength: [100, 'Domain length should be maximum of 100 characters']
	    },
	    username: {
	      type: String,
	      trim: true,
	      maxlength: [30, 'User Name length should be maximum of 30 characters']
	    },
	    password: {
	      type: String,
	      trim: true,
	      maxlength: [30, 'Password length should be maximum of 30 characters']
	    },
	    server: {
	      type: String,
	      trim: true,
	      maxlength: [50, 'Server length should be maximum of 50 characters']
	    },
	    modifiedAt: {
	      type: Date
	    },
	    deletedAt: {
	      type: Date
	    }
	  },
	  ldapSettings: {
	    domain: {
	      type: String,
	      trim: true,
	      maxlength: [60, 'Domain length should be maximum of 60 characters']
	    },
	    baseDn: {
	      type: String,
	      trim: true,
	      maxlength: [40, 'BaseDn length should be maximum of 40 characters']
	    },
	    url: {
	      type: String,
	      trim: true,
	      maxlength: [60, 'URL length should be maximum of 60 characters']
	    },
	    bindCn: {
	      type: String,
	      maxlength: [30, 'BindCn length should be maximum of 30 characters']
	    },
	    bindPassword: {
	      type: String,
	      trim: true,
	      maxlength: [30, 'Bind Password length should be maximum of 30 characters']
	    },
	    forceLogin: {
	      type: String,
	      trim: true
	    },
	    modifiedAt: {
	      type: Date
	    },
	    deletedAt: {
	      type: Date
	    }
	  },
	  createdBy: {
	    type: String,
	    trim: true
	  }
	});
	exports.default = _mongoose2.default.model('Settings', settingsSchema);
	;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	var crypto = __webpack_require__(238);
	exports.encrypt = function (plainText, workingKey) {
	    var m = crypto.createHash('md5');
	    m.update(workingKey);
	    var key = m.digest();
	    var iv = '\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f';
	    var cipher = crypto.createCipheriv('aes-128-cbc', key, iv);
	    var encoded = cipher.update(plainText, 'utf8', 'hex');
	    encoded += cipher.final('hex');
	    return encoded;
	};
	
	exports.decrypt = function (encText, workingKey) {
	    var m = crypto.createHash('md5');
	    m.update(workingKey);
	    var key = m.digest();
	    var iv = '\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f';
	    var decipher = crypto.createDecipheriv('aes-128-cbc', key, iv);
	    var decoded = decipher.update(encText, 'hex', 'utf8');
	    decoded += decipher.final('utf8');
	    return decoded;
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/* WEBPACK VAR INJECTION */(function(__dirname) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	// import { Session } from 'express-session';
	
	// var sanitizeMW = require('mongo-sanitize');
	
	// Webpack Requirements
	
	
	var _express = __webpack_require__(19);
	
	var _express2 = _interopRequireDefault(_express);
	
	var _compression = __webpack_require__(134);
	
	var _compression2 = _interopRequireDefault(_compression);
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _bodyParser = __webpack_require__(133);
	
	var _bodyParser2 = _interopRequireDefault(_bodyParser);
	
	var _path = __webpack_require__(62);
	
	var _path2 = _interopRequireDefault(_path);
	
	var _IntlWrapper = __webpack_require__(113);
	
	var _IntlWrapper2 = _interopRequireDefault(_IntlWrapper);
	
	var _morgan = __webpack_require__(137);
	
	var _morgan2 = _interopRequireDefault(_morgan);
	
	var _lodash = __webpack_require__(7);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _webpack = __webpack_require__(85);
	
	var _webpack2 = _interopRequireDefault(_webpack);
	
	var _webpackConfig = __webpack_require__(132);
	
	var _webpackConfig2 = _interopRequireDefault(_webpackConfig);
	
	var _webpackDevMiddleware = __webpack_require__(139);
	
	var _webpackDevMiddleware2 = _interopRequireDefault(_webpackDevMiddleware);
	
	var _webpackHotMiddleware = __webpack_require__(140);
	
	var _webpackHotMiddleware2 = _interopRequireDefault(_webpackHotMiddleware);
	
	var _ccavRequestHandler = __webpack_require__(116);
	
	var _ccavRequestHandler2 = _interopRequireDefault(_ccavRequestHandler);
	
	var _ccavResponseHandler = __webpack_require__(117);
	
	var _ccavResponseHandler2 = _interopRequireDefault(_ccavResponseHandler);
	
	var _store = __webpack_require__(83);
	
	var _reactRedux = __webpack_require__(16);
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _server = __webpack_require__(138);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactHelmet = __webpack_require__(84);
	
	var _reactHelmet2 = _interopRequireDefault(_reactHelmet);
	
	var _routes = __webpack_require__(114);
	
	var _routes2 = _interopRequireDefault(_routes);
	
	var _fetchData = __webpack_require__(131);
	
	var _login = __webpack_require__(125);
	
	var _login2 = _interopRequireDefault(_login);
	
	var _admin = __webpack_require__(118);
	
	var _admin2 = _interopRequireDefault(_admin);
	
	var _logger = __webpack_require__(124);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _api = __webpack_require__(119);
	
	var _api2 = _interopRequireDefault(_api);
	
	var _loginController = __webpack_require__(36);
	
	var _defaultUser = __webpack_require__(115);
	
	var _defaultUser2 = _interopRequireDefault(_defaultUser);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _fileupload = __webpack_require__(123);
	
	var _fileupload2 = _interopRequireDefault(_fileupload);
	
	var _payment = __webpack_require__(126);
	
	var _payment2 = _interopRequireDefault(_payment);
	
	var _userDashboard = __webpack_require__(130);
	
	var _userDashboard2 = _interopRequireDefault(_userDashboard);
	
	var _schedule = __webpack_require__(129);
	
	var _schedule2 = _interopRequireDefault(_schedule);
	
	var _contacts = __webpack_require__(122);
	
	var _contacts2 = _interopRequireDefault(_contacts);
	
	var _reports = __webpack_require__(128);
	
	var _reports2 = _interopRequireDefault(_reports);
	
	var _registration = __webpack_require__(127);
	
	var _registration2 = _interopRequireDefault(_registration);
	
	var _calendar = __webpack_require__(120);
	
	var _calendar2 = _interopRequireDefault(_calendar);
	
	var _conf = __webpack_require__(121);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Initialize the Express App
	var app = new _express2.default({ strict: true });
	/*app.set('views', __dirname + '/public');
	app.engine('html', require('ejs').renderFile);*/
	
	// Run Webpack dev server in development mode
	if (process.env.NODE_ENV === 'development') {
	  var compiler = (0, _webpack2.default)(_webpackConfig2.default);
	  app.use((0, _webpackDevMiddleware2.default)(compiler, { noInfo: true, publicPath: _webpackConfig2.default.output.publicPath }));
	  app.use((0, _webpackHotMiddleware2.default)(compiler));
	}
	
	// React And Redux Setup
	
	
	// Import required modules
	
	
	var tokens = __webpack_require__(136)();
	var cookieParser = __webpack_require__(135);
	
	// Set native promises as mongoose promise
	// mongoose.Promise = global.Promise;
	
	// Use bluebird
	_mongoose2.default.Promise = __webpack_require__(40);
	
	// MongoDB Connection
	_mongoose2.default.connect(_config2.default.mongoURL, function (error) {
	  if (error) {
	    console.error('Please make sure Mongodb is installed and running!'); // eslint-disable-line no-console
	    throw error;
	  }
	
	  // feed some dummy data in DB.
	  // dummyData();
	  (0, _defaultUser2.default)();
	});
	
	var secret = tokens.secretSync();
	
	// Apply body Parser and server public assets and routes
	app.use((0, _compression2.default)());
	// app.use(sanitizeMW);
	app.use(_express2.default.static(_path2.default.resolve(__dirname, '../dist')));
	app.use(_express2.default.static(_path2.default.resolve(__dirname, '../public')));
	app.use("/uploads", _express2.default.static(process.env.PWD + '/uploads'));
	
	// app.use(morgan('dev'));
	//Chnaged by Rajesh Goriga For setting the bodyParser limit 
	app.use(_bodyParser2.default.json({ limit: '200mb' }));
	app.use(_bodyParser2.default.urlencoded({ extended: false }));
	
	app.use(function (req, res, next) {
	  var token = req.headers['csrf'];
	  if (!token && _lodash2.default.isEmpty(req.body)) {
	    next();
	    return;
	  }
	
	  var isValid = tokens.verify(secret, token);
	  if (!isValid) {
	    res.status(403);
	    res.send('invalid token');
	    return;
	  }
	
	  next();
	});
	
	app.use('/', function (req, res, next) {
	  var token = tokens.create(secret);
	  // console.log("token", token)
	  res.cookie("csrf", token);
	  next();
	});
	
	// app.post('/logAnalytics', function(req, res){
	//   // post(AdminController.saveLog)
	// });
	app.post('/ccavRequestHandler', function (request, response) {
	  // console.log("in ccacvReqyestHandler");
	  _ccavRequestHandler2.default.postReq(request, response, function (error) {
	    if (error) {
	      console.log("errror in postReq");
	    }
	  });
	});
	
	app.post('/ccavResponseHandler', function (request, response) {
	  _ccavResponseHandler2.default.postRes(request, response);
	});
	app.post('/payment', _bodyParser2.default.json({}), _bodyParser2.default.urlencoded({ extended: true }), _payment2.default);
	app.post('/paymentEmailValidation', _bodyParser2.default.json({}), _bodyParser2.default.urlencoded({ extended: true }), _payment2.default);
	app.post('/saveuser', _bodyParser2.default.json({}), _bodyParser2.default.urlencoded({ extended: true }), _admin2.default);
	app.post('/savepackage', _bodyParser2.default.json({}), _bodyParser2.default.urlencoded({ extended: true }), _admin2.default);
	app.post('/saveroom', _bodyParser2.default.json({}), _bodyParser2.default.urlencoded({ extended: true }), _admin2.default);
	app.post('/savecorporate', _bodyParser2.default.json({}), _bodyParser2.default.urlencoded({ extended: true }), _admin2.default);
	app.post('/initialpurchase', _bodyParser2.default.json({}), _bodyParser2.default.urlencoded({ extended: true }), _api2.default);
	
	// app.get('/conf/:rid', bodyParser.json({}),bodyParser.urlencoded({extended: true}), confRoute);
	
	//app.post('/fetchToken', bodyParser.json({}), bodyParser.urlencoded({extended: true}), confRoute /*function(req, res) { console.log(req.body); }*/);
	app.use('/api', _bodyParser2.default.json({ limit: '200mb' }), [_login2.default, _admin2.default, _fileupload2.default, _userDashboard2.default, _conf.confRoute, _schedule2.default, _contacts2.default, _registration2.default, _logger2.default, _calendar2.default, _reports2.default]);
	
	// Render Initial HTML
	var renderFullPage = function renderFullPage(html, initialState) {
	  var head = _reactHelmet2.default.rewind();
	
	  // Import Manifests
	  var assetsManifest = process.env.webpackAssets && JSON.parse(process.env.webpackAssets);
	  var chunkManifest = process.env.webpackChunkAssets && JSON.parse(process.env.webpackChunkAssets);
	
	  return '\n    <!doctype html>\n    <html>\n      <head>\n        ' + head.base.toString() + '\n        ' + head.title.toString() + '\n        ' + head.meta.toString() + '\n        ' + head.link.toString() + '\n        ' + head.script.toString() + '\n\n        ' + (process.env.NODE_ENV === 'production' ? '<link rel=\'stylesheet\' href=\'' + assetsManifest['/app.css'] + '\' />' : '') + '\n        <link href=\'https://fonts.googleapis.com/css?family=Lato:400,300,700\' rel=\'stylesheet\' type=\'text/css\'/>\n        <link rel=\'stylesheet\' href=\'/css/font-awesome/css/font-awesome.min.css\'/>\n        <link rel=\'stylesheet\' href=\'/css/bootstrap.min.css\'>\n        <link rel="stylesheet" href="/css/animate.min.css">\n        <link rel="stylesheet" href="/css/toastr.min.css">\n        <link rel="stylesheet" href="/css/global.css">\n        <link rel="stylesheet" href="/css/image-slide.css">\n        <link rel="stylesheet" href="/css/react-calendar.css">\n        <link rel="stylesheet" href="/css/bootstrap-datetimepicker.css">\n\n        <script src="/js/alertify.min.js"></script>\n        \n        <script src="/js/adapter.js"></script>\n        <script src="/js/socket.io.js"></script>\n        <script src="/js/woogeen.sdk.js"></script>\n        <script src="/js/woogeen.sdk.ui.js"></script>\n        <script src="/js/sc.websocket.js"></script>\n        \n        <script src="/js/quill.js" type="text/javascript"></script>\n        <script src="/js/katex.min.js" type="text/javascript"></script>\n        <script src="/js/fabric.js" type="text/javascript"></script>\n        <script src="/js/offline.min.js" type="text/javascript"></script>\n        \n        <link rel="stylesheet" href="/css/alertify.min.css" />\n        <link rel="stylesheet" href="/css/default.min.css" />\n        <link href="/css/quill.snow.css" rel="stylesheet">\n        <link rel="stylesheet" href="/css/katex.min.css">\n        <link href="/css/quill.bubble.css" rel="stylesheet">\n\n        <link rel="chrome-webstore-item" href="https://chrome.google.com/webstore/detail/jckdbnkecmmpemaghimijhehobdeplmd" />\n\n        <link rel=\'stylesheet\' href=\'/fullcalendar-3.4.0/fullcalendar.css\' />\n        <script src=\'/fullcalendar-3.4.0/lib/jquery.min.js\'></script>\n        <script src=\'/fullcalendar-3.4.0/lib/moment.min.js\'></script>\n        <script src=\'/fullcalendar-3.4.0/fullcalendar.js\'></script>\n        <script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit" async defer></script> \n\n      </head>\n      <body>\n        <div id="root">' + html + '</div>\n        <script>\n          window.__INITIAL_STATE__ = ' + JSON.stringify(initialState) + ';\n          ' + (process.env.NODE_ENV === 'production' ? '//<![CDATA[\n          window.webpackManifest = ' + JSON.stringify(chunkManifest) + ';\n          //]]>' : '') + '\n        </script>\n        <script src=\'' + (process.env.NODE_ENV === 'production' ? assetsManifest['/vendor.js'] : '/vendor.js') + '\'></script>\n        <script src=\'' + (process.env.NODE_ENV === 'production' ? assetsManifest['/app.js'] : '/app.js') + '\'></script>\n      </body>\n    </html>\n  ';
	};
	
	var renderError = function renderError(err) {
	  var softTab = '&#32;&#32;&#32;&#32;';
	  var errTrace = process.env.NODE_ENV !== 'production' ? ':<br><br><pre style="color:red">' + softTab + err.stack.replace(/\n/g, '<br>' + softTab) + '</pre>' : '';
	  return renderFullPage('Server Error' + errTrace, {});
	};
	
	var renderNotFound = function renderNotFound(err) {
	  var head = _reactHelmet2.default.rewind();
	  var assetsManifest = process.env.webpackAssets && JSON.parse(process.env.webpackAssets);
	  var chunkManifest = process.env.webpackChunkAssets && JSON.parse(process.env.webpackChunkAssets);
	
	  return '\n    <!doctype html>\n    <html>\n      <head>\n        ' + head.base.toString() + '\n        ' + head.title.toString() + '\n        ' + head.meta.toString() + '\n        ' + head.link.toString() + '\n        ' + head.script.toString() + '\n\n        ' + (process.env.NODE_ENV === 'production' ? '<link rel=\'stylesheet\' href=\'' + assetsManifest['/app.css'] + '\' />' : '') + '\n        <link href=\'https://fonts.googleapis.com/css?family=Lato:400,300,700\' rel=\'stylesheet\' type=\'text/css\'/>\n        <link rel="shortcut icon" href="http://res.cloudinary.com/hashnode/image/upload/v1455629445/static_imgs/mern/mern-favicon-circle-fill.png" type="image/png" />\n        <link rel=\'stylesheet\' href=\'/css/font-awesome/css/font-awesome.min.css\'/>\n        <link rel=\'stylesheet\' href=\'/css/bootstrap.min.css\'>\n        <link rel="stylesheet" href="/css/animate.min.css">\n        <link rel="stylesheet" href="/css/toastr.min.css">\n        <link rel="stylesheet" href="/css/global.css">\n        <link rel="stylesheet" href="/css/react-calendar.css">\n        <link rel="stylesheet" href="/css/bootstrap-datetimepicker.css">\n        <script src="/js/alertify.min.js"></script>\n        <link rel="stylesheet" href="/css/alertify.min.css" />\n        <link rel="stylesheet" href="/css/default.min.css" />\n        \n        \n      </head>\n      <body>\n        \n        \n        <div>\n        <h1> 404.. Not found </h1>\n        </div>\n      </body>\n    </html>\n  ';
	};
	
	// Server Side Rendering based on routes matched by React-router.
	app.use(function (req, res, next) {
	  if (req.url == '/make-payment') {
	    return next();
	  }
	  (0, _reactRouter.match)({ routes: _routes2.default, location: req.url }, function (err, redirectLocation, renderProps) {
	    if (err) {
	      console.log("Errrrrr--------");
	      console.log(err);
	      return res.status(500).end(renderError(err));
	    } else if (redirectLocation) {
	      return res.redirect(302, redirectLocation.pathname + redirectLocation.search);
	    } else if (!renderProps) {
	      renderProps = "";
	      res.status(404).end(renderNotFound(err));
	    } else {
	      var store = (0, _store.configureStore)();
	      return (0, _fetchData.fetchComponentData)(store, renderProps.components, renderProps.params).then(function () {
	        var initialView = (0, _server.renderToString)(_jsx(_reactRedux.Provider, {
	          store: store
	        }, void 0, _jsx(_IntlWrapper2.default, {}, void 0, _react2.default.createElement(_reactRouter.RouterContext, renderProps))));
	        var finalState = store.getState();
	
	        res.set('Content-Type', 'text/html').status(200).end(renderFullPage(initialView, finalState));
	      }).catch(function (error) {
	        return next(error);
	      });
	    }
	  });
	});
	
	// start app
	app.listen(_config2.default.port, function (error) {
	  if (!error) {
	    console.log('MERN is running on port: ' + _config2.default.port + '! Build something amazing!'); // eslint-disable-line
	  }
	});
	
	exports.default = app;
	
	/*<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css'/>
	<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css'>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.3/toastr.min.css">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, minimum-scale=1">        
	*/
	/* WEBPACK VAR INJECTION */}.call(exports, "server"))

/***/ },
/* 110 */
/***/ function(module, exports) {

	module.exports = require("export-to-excel");

/***/ },
/* 111 */
/***/ function(module, exports) {

	module.exports = require("http");

/***/ },
/* 112 */
/***/ function(module, exports) {

	module.exports = require("querystring");

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.IntlWrapper = IntlWrapper;
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRedux = __webpack_require__(16);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function IntlWrapper(props) {
	  return _react2.default.createElement(
	    _reactIntl.IntlProvider,
	    props.intl,
	    props.children
	  );
	}
	
	// Retrieve data from store as props
	function mapStateToProps(store) {
	  return {
	    intl: store.intl
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(IntlWrapper);

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* eslint-disable global-require */
	
	// import { browserHistory } from 'react-router';
	
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _App = __webpack_require__(187);
	
	var _App2 = _interopRequireDefault(_App);
	
	var _AdminLayout = __webpack_require__(207);
	
	var _AdminLayout2 = _interopRequireDefault(_AdminLayout);
	
	var _DashLayout = __webpack_require__(208);
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _HomeLayout = __webpack_require__(210);
	
	var _HomeLayout2 = _interopRequireDefault(_HomeLayout);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _LoginActions = __webpack_require__(21);
	
	var _jsCookie = __webpack_require__(68);
	
	var _jsCookie2 = _interopRequireDefault(_jsCookie);
	
	var _roles = __webpack_require__(46);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// import Roles from './roles';
	// import _ from 'lodash';
	
	// require.ensure polyfill for node
	if (false) {
	  require.ensure = function requireModule(deps, callback) {
	    callback(require);
	  };
	}
	
	/* Workaround for async react routes to work with react-hot-reloader till
	  https://github.com/reactjs/react-router/issues/2182 and
	  https://github.com/gaearon/react-hot-loader/issues/288 is fixed.
	 */
	if (process.env.NODE_ENV !== 'production') {}
	// Require async routes only in development for react-hot-reloader to work.
	//require('./modules/Login/LoginPage');
	
	
	// react-router setup with code-splitting
	// More info: http://blog.mxstbr.com/2016/01/react-apps-with-pages/
	var userRole = '';
	var isGuest = '';
	var userIsLoggedIn = function userIsLoggedIn(nextState, replace, callback) {
	  // console.log("Cookie", AuthClient.getSession());
	  // if(AuthClient.getSession()){
	  //     callApi('isloggedin', 'post', {
	  //       userdata: {
	  //         session: AuthClient.getSession(),
	  //       },
	  //     }).then(res => {
	  //       // console.log(AuthClient.getSession(), res);
	  //       if(res.status === false){
	  //         // replace({pathname:'/'});
	  //         callback();
	  //       }else{
	  //         callback();
	  //       }
	  //     });
	  // }else{
	  //   callback();
	  // }
	
	  // callback();
	  //console.log("Router state....", nextState);
	
	  //console.log("AuthClient.getRole()----", AuthClient.getRole());
	
	  if (_AuthController2.default.getSession() != false && (typeof window === 'undefined' ? 'undefined' : _typeof(window))) {
	    if (_AuthController2.default.getSession() != '') {
	      (0, _apiCaller2.default)('is-loggedin', 'post', {
	        userdata: {
	          session: _AuthController2.default.getSession()
	        }
	      }).then(function (res) {
	        //console.log("response in router---", res);
	        if (res.status === false) {
	          replace({ pathname: '/' });
	          callback();
	          // }else if(res && res.status && res.data && res.data.guest){
	          //   callApi ('delete-guest/loginPage', 'delete');
	          //   AuthClient.deleteSession();
	          //   // replace({pathname:'/'});
	          //   callback();
	        } else {
	          if (res.data && res.data.role && (res.data.guest == true || res.data.guest == false)) {
	            userRole = res.data.role;
	            isGuest = res.data.guest;
	            callback();
	          }
	
	          //console.log("res role 00--->", userRole);
	        }
	      });
	    } else {
	      replace({ pathname: '/' });
	      callback();
	    }
	  } else {
	    callback();
	  }
	};
	
	var guestLoggedIn = function guestLoggedIn(nextState, replace, callback) {
	  // console.log("AuthClient.getSession()--", AuthClient.getSession(), typeof(window));
	  if (_AuthController2.default.getSession() != false && _AuthController2.default.getSession() != '' && _AuthController2.default.getSession() != undefined && (typeof window === 'undefined' ? 'undefined' : _typeof(window))) {
	    // if(AuthClient.getSession() != '' && AuthClient.getSession() != undefined){
	    // console.log("Inside api call");
	    (0, _apiCaller2.default)('is-loggedin', 'post', {
	      userdata: {
	        session: _AuthController2.default.getSession()
	      }
	    }).then(function (res) {
	      if (res.status === false) {
	        _AuthController2.default.deleteSession();
	        // replace({pathname:'/'});
	        callback();
	      } else if (res && res.status && res.data && res.data.guest) {
	        (0, _apiCaller2.default)('delete-guest/loginPage', 'delete');
	        _AuthController2.default.deleteSession();
	        // replace({pathname:'/'});
	        callback();
	      } else {
	        callback();
	      }
	    });
	    // }else {
	    //   replace({pathname:'/'});
	    //   callback();
	    // }
	  } else {
	    callback();
	  }
	};
	
	//Code added by - Najib, Desc - Checking user type for router level access
	
	// function userRole {
	//   let role = '';
	//   if(store.getState().login.data && store.getState().login.data.role) {
	//     role = store.getState().login.data.role;
	//   }
	//   return role;
	// }
	
	// function !isGuest {  
	//   if(store.getState().login.data && store.getState().login.data.guest) {
	//     return false;
	//   } else {
	//     return true;
	//   }
	// }
	
	//Function for checking only super Admin
	function isSuperAdmin() {
	  //console.log("role--", role);
	  if (userRole == _roles.Roles.Superadmin && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	//Function for checking super Admin, LMS and Conf admin and CRM and presenterAdmin
	function isAllAdmin() {
	  if ((userRole == _roles.Roles.Superadmin || userRole == _roles.Roles.Lmsadmin || userRole == _roles.Roles.Admin || userRole == _roles.Roles.CRMadmin || userRole == _roles.Roles.Presenteradmin) && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	//Function for checking super Admin, LMS and Conf admin and CRM and presenterAdmin
	function isAllAdminExceptModerator() {
	  if ((userRole == _roles.Roles.Superadmin || userRole == _roles.Roles.Lmsadmin || userRole == _roles.Roles.Admin || userRole == _roles.Roles.Instructor || userRole == _roles.Roles.CRMadmin || userRole == _roles.Roles.Presenteradmin || userRole == _roles.Roles.Presenteradmin || userRole == _roles.Roles.Presenter) && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	//Function for checking super Admin, Lmsadmin, admin, CRMAdmin, PresenterAdmin
	function isAdminOrModerator() {
	  //console.log("role--", role);
	  if ((userRole == _roles.Roles.Superadmin || userRole == _roles.Roles.Admin || userRole == _roles.Roles.Moderator || userRole == _roles.Roles.Lmsadmin || userRole == _roles.Roles.Instructor || userRole == _roles.Roles.CRMadmin || userRole == _roles.Roles.Presenteradmin || userRole == _roles.Roles.Presenter) && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	function isAdminModerInst() {
	  //console.log("role--", role);
	  if ((userRole == _roles.Roles.Admin || userRole == _roles.Roles.Moderator || userRole == _roles.Roles.Lmsadmin || userRole == _roles.Roles.Instructor || userRole == _roles.Roles.CRMadmin || userRole == _roles.Roles.Presenteradmin) && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	function isOnlyLMS() {
	  //console.log("role--", role);
	  if ((userRole == _roles.Roles.Lmsadmin || userRole == _roles.Roles.Instructor || userRole == _roles.Roles.Presenteradmin || userRole == _roles.Roles.Presenter) && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	function isAdminOrInstructor() {
	  //console.log("role--", role);
	  if ((userRole == _roles.Roles.Admin || userRole == _roles.Roles.Lmsadmin || userRole == _roles.Roles.Instructor || userRole == _roles.Roles.Presenteradmin || userRole == _roles.Roles.Presenter) && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	function isStudent() {
	  //console.log("role--", role);
	  if (userRole == _roles.Roles.Student && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	function isLmsSuperAdmin() {
	  //console.log("role--", role);
	  if ((userRole == _roles.Roles.Superadmin || userRole == _roles.Roles.Instructor || userRole == _roles.Roles.Lmsadmin) && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	function isLMSConfAdmin() {
	  //console.log("role--", role);
	  if ((userRole == _roles.Roles.Lmsadmin || userRole == _roles.Roles.Admin || userRole == _roles.Roles.Presenteradmin) && !isGuest) {
	    return true;
	  } else {
	    return false;
	  }
	}
	
	exports.default = _jsx(_reactRouter.Route, {
	  component: _App2.default
	}, void 0, _jsx(_reactRouter.Route, {
	  path: '/',
	  onEnter: guestLoggedIn,
	  component: _HomeLayout2.default
	}, void 0, _jsx(_reactRouter.IndexRoute, {
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(0).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(93).default);
	    }).bind(null, __webpack_require__));
	  }
	}), '/*DSS + Android push notification*/', _jsx(_reactRouter.Route, {
	  path: '/androidDeviceId/:devId',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(0/* duplicate */).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(93).default);
	    }).bind(null, __webpack_require__));
	  }
	}), '/*DSS - Android push notification*/', _jsx(_reactRouter.Route, {
	  path: '/android/:devId',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(0/* duplicate */).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(93).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/resetPassword/:token',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(82).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(352).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/forgotpassword',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(90).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(267).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/registration',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(41).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(353).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  name: 'guestConference',
	  path: '/conf/guest/:rid',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(2).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(178).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  name: 'guestScheduledConference',
	  path: '/conf/guestScheduled/:sid',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(2/* duplicate */).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(178).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/activate-user/:token',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(88).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(351).default);
	    }).bind(null, __webpack_require__));
	  }
	})), _jsx(_reactRouter.Route, {
	  path: '/dashboard',
	  onEnter: userIsLoggedIn,
	  component: _DashLayout2.default
	}, void 0, _jsx(_reactRouter.IndexRoute, {
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(67).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(349).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  name: 'conference',
	  path: '/conf/:rid',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(4).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(348).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  name: 'feedback',
	  path: '/conf/feedback/:rid',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(86).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(350).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  name: 'fullCalendar',
	  path: '/full-calendar',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(87).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(277).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  name: 'broadcast',
	  path: '/broadcast-news',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(85).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(347).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	})), _jsx(_reactRouter.Route, {
	  path: '/admin/profile',
	  onEnter: userIsLoggedIn,
	  component: _AdminLayout2.default
	}, void 0, _jsx(_reactRouter.IndexRoute, {
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(43).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(292).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/profile/edit',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(22).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(293).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/profile/workedu',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(68).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(295).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/profile/contacts',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(69).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(291).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/profile/locale',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(23).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(290).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/changepassword',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(83).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(266).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/locale/view',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(50).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(294).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/users/new',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(14).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(338).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/users/list',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(59).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(340).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/active/users',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(38).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(337).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/users/edit/:viewUserId',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(13).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(339).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/users/view/:rowId',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    // console.log("helllwordfls");
	    __webpack_require__.e/* nsure */(46).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(344).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/users/profile/:pid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(42).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(343).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/users/contacts/:pid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(76).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(341).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/users/workedu/:pid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(74).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(345).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/users/locale/:pid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(75).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(342).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/new',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(18).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(315).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/list',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(60).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(322).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/edit/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(17).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(317).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/addtopic/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(19).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(311).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/view/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(48).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(331).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/viewtopic/:tid/:rid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(47).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(334).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/edittopic/:tid/:rid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(16).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(318).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/uploadtotopic/:tid/:rid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(7).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(328).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/adduser/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(20).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(312).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/listtopic/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(8).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(325).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/questionnaire/:tid/:rid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(9).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(313).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/list-results/:rid/:tid/:qid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(61).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(321).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/view-results/:rid/:tid/:qid/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(35).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(330).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/room-feedback-list/:roomId',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(36).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(323).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/corporate/new',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(30).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isSuperAdmin()) {
	        cb(null, __webpack_require__(272).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/corporate/list',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(65).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isSuperAdmin()) {
	        cb(null, __webpack_require__(274).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/corporate/edit/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(29).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isSuperAdmin()) {
	        cb(null, __webpack_require__(273).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/corporate/view/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(54).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isSuperAdmin()) {
	        cb(null, __webpack_require__(275).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/settings/new',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(15).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isSuperAdmin()) {
	        cb(null, __webpack_require__(335).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/ldapsettings',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(28).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isSuperAdmin()) {
	        cb(null, __webpack_require__(278).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/package/new',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(25).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isSuperAdmin()) {
	        cb(null, __webpack_require__(283).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/package/list',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(63).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(285).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/package/edit/:pid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(24).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isSuperAdmin()) {
	        cb(null, __webpack_require__(284).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/package/view/:pid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(52).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(286).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/payment',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(33).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(346).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/category/list',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(66).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(270).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/category/new',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(32).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(268).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/category/view/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(55).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(271).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/category/edit/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(31).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(269).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/questionnaire/list',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(12).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdminExceptModerator()) {
	        cb(null, __webpack_require__(300).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/questionnaire/add',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(70).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrInstructor()) {
	        cb(null, __webpack_require__(296).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/questionnaire/view/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(49).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdminExceptModerator()) {
	        cb(null, __webpack_require__(301).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/questionnaire/questions/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(6).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdminExceptModerator()) {
	        cb(null, __webpack_require__(297).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/questionnaire/edit/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(21).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrInstructor()) {
	        cb(null, __webpack_require__(298).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/feedback/list',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(37).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(276).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/addstudent/:rid/:iid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(58).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(310).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/view-feedback/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(40).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(332).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/location/new',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(27).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(279).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/location/list',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(64).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(281).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/location/view/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(53).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(282).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/location/edit/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(26).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(280).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/listlocation/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(77).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(333).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/addlocation/new/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(79).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(309).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/configuration/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(78).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(326).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/assignments/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(11).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(319).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/assignment/add/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(57).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(308).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/assignment/edit/:cid/:aid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(56).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(316).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/assignment/submissions/:cid/:aid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(10).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(324).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/assignment/submission/view/:rid/:aid/:sid/:filename',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(1).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(174).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/assignment/submission/plagiarism/:rid/:aid/:sid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(44).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(329).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/attendance/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(34).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(314).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/participants-group/list',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(62).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isLmsSuperAdmin()) {
	        cb(null, __webpack_require__(287).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/participants-group/view/:gid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(51).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isLmsSuperAdmin()) {
	        cb(null, __webpack_require__(288).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/reports',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(89).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAllAdmin()) {
	        cb(null, __webpack_require__(302).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/course/reports',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(72).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isStudent()) {
	        cb(null, __webpack_require__(306).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/course/attendance/:rid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(39).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isStudent()) {
	        cb(null, __webpack_require__(305).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/course/assignment-report-list/:rid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(73).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isStudent()) {
	        cb(null, __webpack_require__(303).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/course/assignment-report-view/:rid/:aid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(80).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isStudent()) {
	        cb(null, __webpack_require__(304).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/course/topics/report/:rid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(45).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isStudent()) {
	        cb(null, __webpack_require__(307).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/viewpdf/:tid/:rid/:filename/:tpid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(1/* duplicate */).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isAdminOrModerator()) {
	        cb(null, __webpack_require__(174).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  name: 'userProfile',
	  path: '/profile/:uid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(84).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (!isGuest) {
	        cb(null, __webpack_require__(289).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), '//Code added by - Najib, Desc - Route for restricted users', _jsx(_reactRouter.Route, {
	  name: 'AccessDenied',
	  path: '/access-denied',
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(91).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      cb(null, __webpack_require__(336).default);
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/grade-configuration',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(81).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isLMSConfAdmin()) {
	        cb(null, __webpack_require__(299).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), _jsx(_reactRouter.Route, {
	  path: '/admin/room/reports/topic/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(5).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(327).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), '/>', _jsx(_reactRouter.Route, {
	  path: '/admin/room/certificates/:cid',
	  onEnter: userIsLoggedIn,
	  getComponent: function getComponent(nextState, cb) {
	    __webpack_require__.e/* nsure */(71).catch(function(err) { __webpack_require__.oe(err); }).then((function (require) {
	      if (isOnlyLMS()) {
	        cb(null, __webpack_require__(320).default);
	      } else {
	        cb(null, __webpack_require__(0).default);
	      }
	    }).bind(null, __webpack_require__));
	  }
	}), '/>'));

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function () {
	  _users2.default.count().exec(function (err, count) {
	    if (count > 0) {
	      return;
	    }
	    //const username = 'rp@peoplelinkvc.com'
	    var password = (0, _md2.default)('Ajarsun123');
	
	    var objUser = new _users2.default({
	      //username :username ,
	      password: password, firstname: 'Super',
	      lastname: 'Admin', email: 'rp@peoplelinkvc.com',
	      role: 1,
	      profile: {
	        position: 'Super Admin',
	        dept: 'Global'
	      },
	      deviceType: "BROWSER",
	      createdby: "1",
	      modifiedby: "1",
	      modifiedAt: Date.now(),
	      dateAdded: Date.now()
	    });
	
	    _users2.default.create([objUser], function (error) {
	      if (!error) {
	        console.log('ready to go....');
	      }
	    });
	  });
	};
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _md = __webpack_require__(31);
	
	var _md2 = _interopRequireDefault(_md);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	var http = __webpack_require__(111),
	    fs = __webpack_require__(23),
	    ccav = __webpack_require__(108),
	    qs = __webpack_require__(112);
	
	exports.postReq = function (request, response) {
				var body = '',
				    workingKey = '160BBD1E081A447AF4C2452C1CF1044B',
				    //Put in the 32-Bit key shared by CCAvenues.
				accessCode = 'AVJF00DL80AM00FJMA',
				    //Put in the Access Code shared by CCAvenues.
				encRequest = '',
				    formbody = '';
	
				request.on('data', function (data) {
							body += data;
							encRequest = ccav.encrypt(body, workingKey);
							formbody = '<form id="nonseamless" method="post" name="redirect" action="https://test.ccavenue.com/transaction/transaction.do?command=initiateTransaction"/> <input type="hidden" id="encRequest" name="encRequest" value="' + encRequest + '"><input type="hidden" name="access_code" id="access_code" value="' + accessCode + '"><script language="javascript">document.redirect.submit();</script></form>';
				});
	
				request.on('end', function () {
							response.writeHeader(200, { "Content-Type": "text/html" });
							response.write(formbody);
							response.end();
				});
				return;
	};

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	var http = __webpack_require__(111),
	    fs = __webpack_require__(23),
	    ccav = __webpack_require__(108),
	    qs = __webpack_require__(112);
	
	exports.postRes = function (request, response) {
								var ccavEncResponse = '',
								    ccavResponse = '',
								    workingKey = '160BBD1E081A447AF4C2452C1CF1044B',
								    //Put in the 32-Bit key shared by CCAvenues.
								ccavPOST = '';
	
								request.on('data', function (data) {
															ccavEncResponse += data;
															ccavPOST = qs.parse(ccavEncResponse);
															var encryption = ccavPOST.encResp;
															ccavResponse = ccav.decrypt(encryption, workingKey);
								});
	
								request.on('end', function () {
															var pData = '';
															pData = '<table border=1 cellspacing=2 cellpadding=2><tr><td>';
															pData = pData + ccavResponse.replace(/=/gi, '</td><td>');
															pData = pData.replace(/&/gi, '</td></tr><tr><td>');
															pData = pData + '</td></tr></table>';
															htmlcode = '<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Response Handler</title></head><body><center><font size="4" color="blue"><b>Response Page</b></font><br>' + pData + '</center><br></body></html>';
															response.writeHeader(200, { "Content-Type": "text/html" });
															response.write(htmlcode);
															response.end();
								});
	};

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
																		value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _admin = __webpack_require__(54);
	
	var AdminController = _interopRequireWildcard(_admin);
	
	var _adminUser = __webpack_require__(13);
	
	var UserController = _interopRequireWildcard(_adminUser);
	
	var _corporate = __webpack_require__(102);
	
	var CorporateController = _interopRequireWildcard(_corporate);
	
	var _settings = __webpack_require__(229);
	
	var SettingsController = _interopRequireWildcard(_settings);
	
	var _ldapsettings = __webpack_require__(222);
	
	var LDAPSettingsController = _interopRequireWildcard(_ldapsettings);
	
	var _loginController = __webpack_require__(36);
	
	var _loginController2 = _interopRequireDefault(_loginController);
	
	var _room = __webpack_require__(73);
	
	var RoomController = _interopRequireWildcard(_room);
	
	var _package = __webpack_require__(103);
	
	var PackageController = _interopRequireWildcard(_package);
	
	var _category = __webpack_require__(100);
	
	var CategoryController = _interopRequireWildcard(_category);
	
	var _questionnaire = __webpack_require__(225);
	
	var QuestionnaireController = _interopRequireWildcard(_questionnaire);
	
	var _location = __webpack_require__(223);
	
	var LocationController = _interopRequireWildcard(_location);
	
	var _studentgroup = __webpack_require__(230);
	
	var GroupController = _interopRequireWildcard(_studentgroup);
	
	var _broadcast = __webpack_require__(99);
	
	var BroadcastController = _interopRequireWildcard(_broadcast);
	
	var _mobile = __webpack_require__(56);
	
	var MobileController = _interopRequireWildcard(_mobile);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var adminRoute = new _express.Router();
	
	adminRoute.route('/updateprofile').put(AdminController.updateProfile);
	adminRoute.route('/getProfileImage').post(AdminController.getProfileImage);
	adminRoute.route('/remove-profile-image').delete(AdminController.removeProfileImage);
	adminRoute.route('/saveUserAddress').post(AdminController.saveUserAddress);
	
	//Currently unused route
	// adminRoute.route('/fetchUserAddress').post(AdminController.fetchUserAddress);
	
	
	adminRoute.route('/create-work-place').post(AdminController.createWorkPlace);
	adminRoute.route('/get-work-edu-data').get(AdminController.getWorkEduData);
	adminRoute.route('/delete-workplace/:id').delete(AdminController.deleteWorkPlace);
	adminRoute.route('/save-user-website').post(AdminController.saveUserWebsite);
	adminRoute.route('/save-user-sociallink').post(AdminController.saveUserSocialLink);
	adminRoute.route('/save-user-basic-info').post(AdminController.saveUserBasicInfo);
	adminRoute.route('/create-college').post(AdminController.createCollege);
	adminRoute.route('/delete-college/:id').delete(AdminController.deleteCollege);
	adminRoute.route('/delete-school').delete(AdminController.deleteSchool);
	adminRoute.route('/delete-address').delete(AdminController.deleteAddress);
	adminRoute.route('/delete-website').delete(AdminController.deleteWebsite);
	adminRoute.route('/delete-social-link').delete(AdminController.deleteSocialLink);
	adminRoute.route('/delete-birth-day').delete(AdminController.deleteBirthDay);
	adminRoute.route('/delete-gender').delete(AdminController.deleteGender);
	adminRoute.route('/create-professionalSkills').put(AdminController.createSkills);
	adminRoute.route('/create-school').put(AdminController.createSchool);
	adminRoute.route('/locale-settings').put(AdminController.updateLocaleSettings);
	adminRoute.route('/delete-professional-skills').delete(AdminController.deleteProfessionalSkills);
	adminRoute.route('/changepassword').post(AdminController.changePassword);
	adminRoute.route('/resetpassword').post(AdminController.resetPassword);
	adminRoute.route('/get-logs').get(AdminController.getLogs);
	
	adminRoute.route('/corporates-list').get(CorporateController.listCorporate);
	adminRoute.route('/corporates').post(CorporateController.createCorporate);
	adminRoute.route('/corporates/:id').put(CorporateController.updateCorporate).get(CorporateController.fetchCorporate).delete(CorporateController.deleteCorporate);
	adminRoute.route('/corporate-ids').get(CorporateController.getCorporateIds);
	
	adminRoute.route('/viewUser').post(AdminController.viewUser);
	adminRoute.route('/viewuserprofile').post(AdminController.viewUserProfile);
	adminRoute.route('/getuserlocaledata').post(AdminController.getUserLocaleData);
	adminRoute.route('/save-user').post(AdminController.saveUser);
	adminRoute.route('/update-user/:id').put(AdminController.updateUser);
	adminRoute.route('/fetch-user').get(AdminController.fetchUser);
	adminRoute.route('/list-users').get(UserController.listUser);
	adminRoute.route('/getroles/:cid').get(AdminController.getRoles);
	adminRoute.route('/getrolesupdate/:userId').get(AdminController.getRolesUpdate);
	adminRoute.route('/searchusers').post(UserController.myUsers);
	// adminRoute.route('/getcompanyids').post(UserController.getCompanyIds);
	adminRoute.route('/deleteuser').post(UserController.deleteUser);
	adminRoute.route('/activate-user').put(UserController.activateUser);
	
	// adminRoute.route('/getrooms/:cid').get(AdminController.getRooms);
	
	adminRoute.route('/create-guest').post(UserController.createGuest);
	adminRoute.route('/delete-guest/:roomkey').delete(UserController.deleteGuest);
	
	adminRoute.route('/studentsGroup').post(GroupController.saveStudentsGroup);
	adminRoute.route('/studentsGroup/:id').put(GroupController.updateStudentsGroup);
	adminRoute.route('/listGroupStudents').get(GroupController.listStudentsGroup);
	adminRoute.route('/fetchgroupstudents').get(GroupController.fetchGroupStudents);
	adminRoute.route('/deleteGroupStudents/:id').delete(GroupController.deleteStudentsGroup);
	adminRoute.route('/deleteStudent').delete(GroupController.deleteStudentInGroup);
	adminRoute.route('/updategroupname/:id').put(GroupController.updateGroupName);
	adminRoute.route('/searchgroupstudents').get(GroupController.searchGroupStudents);
	
	adminRoute.route('/export-users').get(UserController.exportUsers);
	adminRoute.route('/import-users').post(UserController.importUsers);
	
	adminRoute.route('/searchstudents').get(UserController.myStudents);
	adminRoute.route('/searchgroups').get(UserController.myGroups);
	
	adminRoute.route('/smtp-settings').post(SettingsController.saveSMTPSettings).get(SettingsController.getSettings).delete(SettingsController.deleteSMTPSettings);
	adminRoute.route('/ldap-Settings').post(LDAPSettingsController.saveLDAPSettings).get(LDAPSettingsController.getLDAPSettings).delete(LDAPSettingsController.deleteLdapSettings);
	
	adminRoute.route('/list-room').get(RoomController.listRoom);
	adminRoute.route('/fetch-room/:id').get(RoomController.fetchRoom);
	adminRoute.route('/delete-room/:id').delete(RoomController.deleteRoom);
	adminRoute.route('/save-room').post(RoomController.saveRoom);
	adminRoute.route('/update-room/:id').put(RoomController.updateRoom);
	
	adminRoute.route('/package-ids').get(RoomController.getPackageIds);
	
	adminRoute.route('/add-room-user').post(RoomController.addRoomUser);
	adminRoute.route('/remove-room-user/:rid/:id').delete(RoomController.removeRoomUser);
	
	adminRoute.route('/save-room-topic').post(RoomController.saveRoomTopic);
	adminRoute.route('/update-room-topic/:id').put(RoomController.updateRoomTopic);
	adminRoute.route('/list-room-topic').get(RoomController.listRoomTopic);
	adminRoute.route('/fetch-room-topic/:rid/:id').get(RoomController.fetchRoomTopic);
	adminRoute.route('/delete-room-topic/:rid/:id').delete(RoomController.deleteTopic);
	adminRoute.route('/enable-room-topic/:id').put(RoomController.roomTopicEnable);
	
	adminRoute.route('/addroomstudent').post(RoomController.addRoomStudent);
	adminRoute.route('/addGroupStudent').post(RoomController.addGroupStudent);
	adminRoute.route('/fetchstudent/:roomId/:instId').get(RoomController.fetchstudent);
	adminRoute.route('/removeroomstud/:roomId/:instId/:studId').delete(RoomController.removeRoomStud);
	
	adminRoute.route('/room-feedback-list').get(RoomController.listRoomFeedback);
	adminRoute.route('/fetch-room-feedback/:id').get(RoomController.fetchRoomFeedback);
	adminRoute.route('/save-feedback').post(RoomController.saveFeedback);
	
	//Room Side Locations
	adminRoute.route('/getLocationList').get(RoomController.getLocationList);
	adminRoute.route('/getRoomInstructorStudentsList').get(RoomController.getRoomInstructorStudentsList);
	adminRoute.route('/saveRoomLocation').post(RoomController.saveRoomLocation);
	adminRoute.route('/getRoomLocations').get(RoomController.getRoomLocations);
	adminRoute.route('/delete-room-location').delete(RoomController.deleteRoomLocation);
	adminRoute.route('/delete-room-location-participant').delete(RoomController.deleteRoomLocationParticipant);
	
	adminRoute.route('/list-room-assignment').get(RoomController.listRoomAssignment);
	adminRoute.route('/save-room-assignment').post(RoomController.saveRoomAssignment);
	adminRoute.route('/update-room-assignment/:id').put(RoomController.updateRoomAssignment);
	adminRoute.route('/fetch-topic-data/:id').get(RoomController.fetchTopicData);
	adminRoute.route('/list-assignment-submission').get(RoomController.listAssignmentSubmission);
	adminRoute.route('/fetch-assignment-data/:rid/:id').get(RoomController.fetchAssignmentData);
	adminRoute.route('/delete-assignment-uploaded-file/:rid/:aid').delete(RoomController.deleteAssignmentUploadedFile);
	adminRoute.route('/delete-assignment/:rid/:aid').delete(RoomController.deleteAssignment);
	
	adminRoute.route('/getQuestionnaireData').get(RoomController.getQuestionnaireDataList);
	adminRoute.route('/saveRoomFeedbackType/:roomId').put(RoomController.saveRoomFeedbackType);
	adminRoute.route('/getRoomFeedbackType').get(RoomController.getRoomFeedbackType);
	adminRoute.route('/saveRoomCodecType/:roomId').put(RoomController.saveRoomCodecType);
	adminRoute.route('/saveRoomEnableLive/:roomId').put(RoomController.saveRoomEnableLive);
	
	adminRoute.route('/fetch-topic-questionnaire/:rid/:id').get(RoomController.fetchTopicQuestionnaire);
	
	adminRoute.route('/assign-questionnaire').post(RoomController.assignQuestionnaire);
	adminRoute.route('/update-assigned-questionnaire').put(RoomController.updateAssignedQuestionnaire);
	adminRoute.route('/unassign-questionnaire/:qid/:tid').delete(RoomController.unassignQuestionnaire);
	adminRoute.route('/confirmed-unassign-questionnaire/:qid/:tid').delete(RoomController.confirmedUnassignQuestionnaireFromTopic);
	adminRoute.route('/categoryids').get(RoomController.getCategoryIds);
	
	adminRoute.route('/list-result-topic').get(RoomController.listResultTopic);
	adminRoute.route('/fetch-result/:rid').get(RoomController.fetchResult);
	
	adminRoute.route('/set-upload-file-desc').post(RoomController.setUploadFileDesc);
	
	adminRoute.route('/packages').post(PackageController.createPackage).get(PackageController.listPackage);
	
	adminRoute.route('/packages/:id').get(PackageController.fetchPackage).put(PackageController.updatePackage).delete(PackageController.deletePackage);
	
	adminRoute.route('/server-list').get(PackageController.getserverlist);
	
	adminRoute.route('/save-category').post(CategoryController.saveCategory);
	adminRoute.route('/update-category/:id').put(CategoryController.updateCategory);
	adminRoute.route('/fetch-category/:id').get(CategoryController.fetchCategory);
	adminRoute.route('/delete-category/:id').delete(CategoryController.deleteCategory);
	adminRoute.route('/list-category').get(CategoryController.listCategory);
	
	adminRoute.route('/save-questionnaire').post(QuestionnaireController.saveQuestionnaire);
	adminRoute.route('/update-questionnaire').put(QuestionnaireController.updateQuestionnaire);
	adminRoute.route('/save-question/:id').put(QuestionnaireController.saveQuestion);
	adminRoute.route('/list-questionnaire').get(QuestionnaireController.listQuestionnaire);
	adminRoute.route('/fetch-questionnaire/:id').get(QuestionnaireController.fetchQuestionnaire);
	adminRoute.route('/get-questionnaire-result/:id').get(QuestionnaireController.fetchQuestionnaireResult);
	adminRoute.route('/delete-questionnaire/:id').delete(QuestionnaireController.deleteQuestionnaire);
	adminRoute.route('/confirm-delete-questionnaire/:id/:dependency').delete(QuestionnaireController.confirmDeleteQuestionnaire);
	adminRoute.route('/fetch-clone-questionnaire/:id').get(QuestionnaireController.fetchCloneQuestionnaire);
	
	adminRoute.route('/delete-question/:qid/:id').delete(QuestionnaireController.deleteQuestion);
	adminRoute.route('/confirm-delete-question/:qid/:id').delete(QuestionnaireController.confirmedDeleteQuestion);
	
	adminRoute.route('/save-grades-questionnaire').post(QuestionnaireController.saveQuestionnaireGrades);
	adminRoute.route('/get-questionnaire-grades').get(QuestionnaireController.getQuestionnaireGrades);
	
	adminRoute.route('/questionnaire-list').get(QuestionnaireController.fetchQuestionnairesData);
	
	adminRoute.route('/locations').post(LocationController.saveLocation).get(LocationController.listLocation);
	adminRoute.route('/locations/:id').put(LocationController.updateLocation).get(LocationController.fetchLocation).delete(LocationController.deleteLocation);
	
	adminRoute.route('/getUserData/:uid').get(AdminController.getUserData);
	
	// adminRoute.route('/save-broadcast').post(BroadcastController.saveBroadcast);
	// adminRoute.route('/broadcast-data/:limit').get(BroadcastController.fetchBroadcastData);
	// adminRoute.route('/updateBroadcast/:id').put(BroadcastController.updateBroadcastData);
	// adminRoute.route('/delete-broadcastdata/:id').delete(BroadcastController.deleteBroadcast);
	
	//DSS - Android push notification
	adminRoute.route('/androidDeviceId').post(AdminController.setAndroidId);
	
	adminRoute.route('/fetch-plagiarism-data/:rid/:id/:sid').get(RoomController.fetchPlagiarismData);
	adminRoute.route('/fetch-plagiarism-credits').get(RoomController.fetchPlagiarismCredits);
	adminRoute.route('/fetch-individual-assignment-data/').get(RoomController.fetchIndividualAssignmentData);
	adminRoute.route('/save-evaluated-assignment-result').post(RoomController.saveEvaluatedAssignmentResult);
	adminRoute.route('/save-assignment-grade-configuration').post(RoomController.saveAssignmentGradeConfiguration);
	
	adminRoute.route('/show-hide-rooms-ios').get(MobileController.showHideRoomsIOS);
	
	adminRoute.route('/set-deviceid-ios').post(MobileController.setDeviceIdIOS);
	
	adminRoute.route('/get-certificate-data').get(RoomController.listRoomCertificateData);
	adminRoute.route('/toggle-certificate-download').put(RoomController.toggleCertificateDownload);
	
	function requirAuth(req, res, next) {
																		console.log("at requireAuth");
																		//  return next();
																		// IF A USER ISN'T LOGGED IN, THEN REDIRECT THEM SOMEWHERE
																		// adminRoute.route('/login');
																		res.send("Logged out");
	}
	exports.default = adminRoute;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _api = __webpack_require__(217);
	
	var ApiController = _interopRequireWildcard(_api);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var apiRoute = new _express.Router();
	apiRoute.route('/api/saveportaluser').post(ApiController.Saveportaluser);
	
	exports.default = apiRoute;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _calendar = __webpack_require__(218);
	
	var CalendarController = _interopRequireWildcard(_calendar);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var calendarRoute = new _express.Router();
	
	exports.default = calendarRoute;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
																						value: true
	});
	exports.confGeneral = exports.confRoute = undefined;
	
	var _express = __webpack_require__(19);
	
	var _conference = __webpack_require__(101);
	
	var ConferenceController = _interopRequireWildcard(_conference);
	
	var _handraise = __webpack_require__(221);
	
	var HandraiseController = _interopRequireWildcard(_handraise);
	
	var _screenShare = __webpack_require__(228);
	
	var ScreenShareController = _interopRequireWildcard(_screenShare);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var confRoute = new _express.Router();
	var confGeneral = new _express.Router();
	
	confRoute.route('/requesttoken').post(ConferenceController.getToken);
	confRoute.route('/fetch-conference-topic/:roomKey').get(ConferenceController.fetchConferenceTopic);
	confRoute.route('/fetch-conference-topic-contentdata/:rid/:tid').get(ConferenceController.fetchConferenceTopicContentData);
	confRoute.route('/fetch-conference-topic-files/:id').get(ConferenceController.fetchConferenceTopicFiles);
	confRoute.route('/fetch-conference-topic-pdf-files/:tid/:fid').get(ConferenceController.fetchConferenceTopicPdfFiles);
	confRoute.route('/fetch-conference-topic-questions/:tid/:id').get(ConferenceController.fetchConferenceTopicQuestions);
	confRoute.route('/save-answers').post(ConferenceController.saveAnswers);
	confRoute.route('/handraise').post(HandraiseController.createHandraise);
	confRoute.route('/handraise/:id').put(HandraiseController.updateHandraise);
	confRoute.route('/handraise-question/:key/:limit').get(HandraiseController.fetchHandraiseData);
	confRoute.route('/handraise-question/:id').get(HandraiseController.getHandraiseQues).delete(HandraiseController.deleteHandraise);
	confRoute.route('/handraise-question-answer/:id').put(HandraiseController.saveHandraiseAnswer);
	confRoute.route('/handraise-answers/:id/:limit').get(HandraiseController.getAnswers);
	confRoute.route('/handraise-answer-reply/:id').put(HandraiseController.saveReply);
	confRoute.route('/answer-replies/:id/:replyOn').get(HandraiseController.getReplies);
	//confGeneral.route('/conf/:rid');//.get(ConferenceController.confRequest);
	
	confRoute.route('/create-log').post(ConferenceController.saveLog);
	
	confRoute.route('/getice').get(ConferenceController.getIceServers);
	
	// confRoute.route('/conf/feedback/:rid'); //cg
	
	confRoute.route('/fetch-conference-assignment/:roomKey').get(ConferenceController.fetchConferenceAssignment);
	confRoute.route('/delete-assignment-submitted-file/:rid/:aid/').delete(ConferenceController.deleteAssignmentSubmittedFile);
	confRoute.route('/fetch-conference-poll/:roomKey').get(ConferenceController.fetchConferencePoll);
	confRoute.route('/fetch-conference-pollcontentdata/:rid/:pid').get(ConferenceController.fetchConferencePollcontentdata);
	confRoute.route('/create-poll').post(ConferenceController.createPoll);
	confRoute.route('/update-poll/:id').put(ConferenceController.updateConferencePoll);
	confRoute.route('/submit-poll/:id').put(ConferenceController.submitConferencePoll);
	confRoute.route('/publish-poll').put(ConferenceController.publishConferencePoll);
	confRoute.route('/delete-poll/:rid/:id').delete(ConferenceController.deleteConferencePoll);
	confRoute.route('/fetch-poll-submissions/:rid/:id').get(ConferenceController.fetchPollSubmissions);
	
	confRoute.route('/fetchToken').post(ScreenShareController.fetchToken);
	
	confRoute.route('/conf/guestScheduled/:sid'); //cg
	
	confRoute.route('/fetch-attendees/:rid').get(ConferenceController.getAttendees);
	
	confRoute.route('/validate-schedule-password').post(ConferenceController.validateSchedulePassword);
	
	confRoute.route('/remove-guest-room').put(ConferenceController.RemoveGuestFromRoom);
	
	exports.confRoute = confRoute;
	exports.confGeneral = confGeneral;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _contacts = __webpack_require__(220);
	
	var ContactsController = _interopRequireWildcard(_contacts);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var contactRoute = new _express.Router();
	
	contactRoute.route('/add-contact').post(ContactsController.addContact);
	contactRoute.route('/contact-response').put(ContactsController.contactResponse);
	contactRoute.route('/contacts').get(ContactsController.getMyContacts);
	contactRoute.route('/get-matched-user/:input').get(ContactsController.fetchMatchedUsers);
	exports.default = contactRoute;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _fileupload = __webpack_require__(71);
	
	var FileUploadController = _interopRequireWildcard(_fileupload);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var multer = __webpack_require__(50);
	var fileUploadRoute = new _express.Router();
	
	fileUploadRoute.route('/upload').post(FileUploadController.upload);
	fileUploadRoute.route('/profileupload').post(multer({ dest: process.env.PWD + "/uploads/", limits: { fieldSize: 6 * 1024 * 1024, fileSize: 6 * 1024 * 1024 } }).single('upl'), FileUploadController.profileUpload);
	fileUploadRoute.route('/uploadroomtopicfile').post(multer({ dest: process.env.PWD + "/uploads/", limits: { fieldSize: 50 * 1024 * 1024, fileSize: 20 * 1024 * 1024 } }).single('upl'), FileUploadController.uploadRoomTopicFile);
	fileUploadRoute.route('/import-users-file').post(multer({ dest: process.env.PWD + "/uploads/", limits: { fieldSize: 50 * 1024 * 1024, fileSize: 20 * 1024 * 1024 } }).single('upl'), FileUploadController.importUsersFile);
	fileUploadRoute.route('/list-topic-files').get(FileUploadController.listTopicFiles);
	fileUploadRoute.route('/delete-file/:rid/:tid/:id').delete(FileUploadController.deleteFile);
	fileUploadRoute.route('/delete-multiple-files/:rid/:tid/:ids').delete(FileUploadController.deleteMultipleFiles);
	fileUploadRoute.route('/upload-assignment-submission').post(multer({ dest: process.env.PWD + "/uploads/", limits: { fieldSize: 50 * 1024 * 1024, fileSize: 20 * 1024 * 1024 } }).single('upl'), FileUploadController.uploadAssignmentSubmission);
	fileUploadRoute.route('/upload-sharing-document').post(multer({ dest: process.env.PWD + "/uploads/", limits: { fieldSize: 50 * 1024 * 1024, fileSize: 20 * 1024 * 1024 } }).single('upl'), FileUploadController.uploadSharingDocument);
	fileUploadRoute.route('/close-shared-document/:name').delete(FileUploadController.deleteSharingDocument);
	fileUploadRoute.route('/upload-file-enable/:id').put(FileUploadController.uploadFileEnable);
	fileUploadRoute.route('/convert-to-pdf').post(FileUploadController.convertPDF);
	exports.default = fileUploadRoute;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _datalog = __webpack_require__(55);
	
	var LogController = _interopRequireWildcard(_datalog);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var logRoute = new _express.Router();
	
	logRoute.route('/logAnalytics').post(LogController.saveLog);
	logRoute.route('/updateAttendance').post(LogController.updateAttendance);
	logRoute.route('/saveVisiteTopic').put(LogController.saveVisiteTopic);
	logRoute.route('/markAsCompleteTopic').put(LogController.markAsCompleteTopic);
	logRoute.route('/get-topic-status/:roomId/:topicId').get(LogController.getTopicStatus);
	
	exports.default = logRoute;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _login = __webpack_require__(36);
	
	var LoginController = _interopRequireWildcard(_login);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var loginroute = new _express.Router();
	
	// Login user
	loginroute.route('/login').post(LoginController.loginUser);
	
	loginroute.route('/is-loggedin').post(LoginController.isLoggedIn);
	loginroute.route('/validateforgotpassword').post(LoginController.validateForgotPassword);
	loginroute.route('/isresettokenexpired').post(LoginController.isResetTopkenExpired);
	loginroute.route('/isSignUp').get(LoginController.isSignUp);
	loginroute.route('/get-footer').get(LoginController.getFooter);
	loginroute.route('/activate-user/:token').put(LoginController.activateUserThroughMail);
	//loginroute.route('/logout-user').get(LoginController.logoutUser);
	
	exports.default = loginroute;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _md = __webpack_require__(31);
	
	var _md2 = _interopRequireDefault(_md);
	
	var _payment = __webpack_require__(224);
	
	var PaymentController = _interopRequireWildcard(_payment);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var mongoose = __webpack_require__(2);
	
	
	var router = new _express.Router();
	
	router.route('/payment').post(PaymentController.websitePackageSelection);
	router.route('/paymentEmailValidation').post(PaymentController.websiteEmailValidation);
	exports.default = router;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _registration = __webpack_require__(226);
	
	var RegistrationController = _interopRequireWildcard(_registration);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var registroute = new _express.Router();
	
	registroute.route('/search-corporate/:input').get(RegistrationController.searchCorporate);
	registroute.route('/save-regist-data').post(RegistrationController.saveRegistData);
	
	exports.default = registroute;

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _reports = __webpack_require__(227);
	
	var ReportsController = _interopRequireWildcard(_reports);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var reports = new _express.Router();
	
	// reports.route('/fetch-students-assignment/:rid/:id').get(ReportsController.studentsSubmissionAssignment);
	
	// reports.route('/fetch-student-assignments/:rid').get(ReportsController.studentSubmissionAssignments);
	reports.route('/student-course-list').get(ReportsController.studentCourseList);
	
	reports.route('/getactiveusers').get(ReportsController.activeUsers);
	reports.route('/list-activeusers').post(ReportsController.listActiveUsers);
	
	reports.route('/fetch-course-attendance').get(ReportsController.courseAttendance);
	reports.route('/fetch-individual-attendance').get(ReportsController.individualAttendance);
	reports.route('/list-individual-attendance').post(ReportsController.listIndividualAttendance);
	reports.route('/list-total-schedules').post(ReportsController.listTotalSchedules);
	
	reports.route('/fetch-course-topics/:rId').get(ReportsController.courseTopics);
	reports.route('/fetch-topic-viewed-users').get(ReportsController.topicViewedUsers);
	reports.route('/list-topic-viewed-users').post(ReportsController.listTopicViewedUsers);
	
	reports.route('/fetch-course-users/:rId').get(ReportsController.courseUsers);
	reports.route('/fetch-user-viewed-topics').get(ReportsController.userViewedTopics);
	
	reports.route('/list-course-topics').post(ReportsController.listCourseTopics);
	reports.route('/list-user-viewed-allTopics').post(ReportsController.listUserViewedAllTopics);
	
	reports.route('/fetch-student-topics').get(ReportsController.studentTopics);
	reports.route('/student-assignment-list').get(ReportsController.studentAssignmentList);
	reports.route('/student-assignment-result-data').get(ReportsController.studentAssignmentResultData);
	
	reports.route('/check-certificate-eligibility').get(ReportsController.checkCertificteEligibility);
	reports.route('/fetch-certificate').get(ReportsController.generateCertificate);
	
	exports.default = reports;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
																	value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _schedule = __webpack_require__(57);
	
	var ScheduleController = _interopRequireWildcard(_schedule);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var scheduleRoute = new _express.Router();
	
	scheduleRoute.route('/schedule-dates').get(ScheduleController.getScheduleDates);
	scheduleRoute.route('/schedules').post(ScheduleController.createSchedule);
	// .put(ScheduleController.updateSchedule);
	scheduleRoute.route('/date-schedules/:startDate/:endDate').get(ScheduleController.getCurrentDateSchedules);
	scheduleRoute.route('/date-schedules/:currentDate').get(ScheduleController.getPastSchedules);
	scheduleRoute.route('/delete-slot/:id/:scheduleid').delete(ScheduleController.deleteMySchedule);
	scheduleRoute.route('/schedules/:id').get(ScheduleController.getSchedule).put(ScheduleController.updateSchedule);
	scheduleRoute.route('/delete-schedule/:id/:date').delete(ScheduleController.deleteMyRecurringSchedule);
	scheduleRoute.route('/schedule-slot/:id').put(ScheduleController.updateSlotScheule);
	// scheduleRoute.route('/get-full-calendar-events/:startDate/:endDate').get(ScheduleController.getScheduleEvents);
	scheduleRoute.route('/schedule-fetch-room').get(ScheduleController.fetchMyRoomsSchedule);
	
	exports.default = scheduleRoute;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _express = __webpack_require__(19);
	
	var _userDashboard = __webpack_require__(231);
	
	var UserDashboardController = _interopRequireWildcard(_userDashboard);
	
	var _chat = __webpack_require__(219);
	
	var ChatController = _interopRequireWildcard(_chat);
	
	var _broadcast = __webpack_require__(99);
	
	var BroadcastController = _interopRequireWildcard(_broadcast);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var userDashboardRoute = new _express.Router();
	
	// userDashboardRoute.route('/dashboard');
	userDashboardRoute.route('/fetch-my-rooms').get(UserDashboardController.fetchMyRooms);
	userDashboardRoute.route('/fetch-my-rooms/:input').get(UserDashboardController.searchMyRooms);
	userDashboardRoute.route('/regenerate-link').post(UserDashboardController.regenerateLink);
	userDashboardRoute.route('/share-link').post(UserDashboardController.shareLink);
	userDashboardRoute.route('/conform-regenarate').post(UserDashboardController.conformRegenarate);
	
	userDashboardRoute.route('/creategroup').post(UserDashboardController.createGroup);
	userDashboardRoute.route('/getmygroups').post(UserDashboardController.getMyGroups);
	userDashboardRoute.route('/getmachedcontacts').post(UserDashboardController.getMachedContacts);
	userDashboardRoute.route('/memberstogroup').post(UserDashboardController.memberstoGroup);
	userDashboardRoute.route('/deletegroup').post(UserDashboardController.deleteGroup);
	
	userDashboardRoute.route('/send-message').post(ChatController.sendMessage);
	userDashboardRoute.route('/chat-data').get(ChatController.getMsgData);
	userDashboardRoute.route('/export-room-chat/:roomkey').get(ChatController.exportRoomChat);
	userDashboardRoute.route('/getchatnotification').post(ChatController.getChatNotification);
	userDashboardRoute.route('/clear-roomchat').post(ChatController.clearRoomChat);
	
	userDashboardRoute.route('/ind-chat-notifications').get(ChatController.indChatNotifications);
	userDashboardRoute.route('/room-chat-notifications/:roomKey').get(ChatController.roomChatNotifications);
	
	userDashboardRoute.route('/chatnotification').post(ChatController.getChatNotification);
	userDashboardRoute.route('/fetchFeedbackType').get(UserDashboardController.fetchFeedbackType);
	userDashboardRoute.route('/userProfile');
	
	userDashboardRoute.route('/test-api').post(UserDashboardController.testApi);
	
	userDashboardRoute.route('/broadcast').post(BroadcastController.createBroadcast);
	userDashboardRoute.route('/broadcast/:id').put(BroadcastController.updateBroadcast);
	userDashboardRoute.route('/broadcast-data/:limit').get(BroadcastController.fetchBroadcastData);
	userDashboardRoute.route('/delete-broadcast/:id').delete(BroadcastController.deleteBroadcast);
	userDashboardRoute.route('/broadcast-notifications').get(BroadcastController.broadcastNotifications);
	userDashboardRoute.route('/update-user-status').get(BroadcastController.updateUserStatus);
	
	// userDashboardRoute.route('/handraise-question/:id').post(BroadcastController.getHandraiseQues).delete(BroadcastController.deleteHandraise);
	userDashboardRoute.route('/save-broadcast-comment/:id').put(BroadcastController.saveBroadcastComment);
	userDashboardRoute.route('/get-broadcast-comments/:id/:limit').get(BroadcastController.getComments);
	userDashboardRoute.route('/broadcast-comment-reply/:id').put(BroadcastController.saveReply);
	userDashboardRoute.route('/comment-replies/:id/:replyOn').get(BroadcastController.getReplies);
	userDashboardRoute.route('/update-likes').put(BroadcastController.updateLikes);
	userDashboardRoute.route('/put-google-id').put(UserDashboardController.saveGoogleID);
	userDashboardRoute.route('/disconnect-Social-media').put(UserDashboardController.removeSocailMedia);
	
	userDashboardRoute.route('/config-settings').get(UserDashboardController.configApi);
	
	userDashboardRoute.route('/fetch-room-details/:roomKey').get(UserDashboardController.fetchRoomDetails);
	
	exports.default = userDashboardRoute;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fetchComponentData = fetchComponentData;
	
	var _promiseUtils = __webpack_require__(235);
	
	function fetchComponentData(store, components, params) {
	  var needs = components.reduce(function (prev, current) {
	    return (current && current.need || []).concat((current.WrappedComponent && current.WrappedComponent.need !== current.need ? current.WrappedComponent.need : []) || []).concat(prev);
	  }, []);
	
	  return (0, _promiseUtils.sequence)(needs, function (need) {
	    return store.dispatch(need(params, store.getState()));
	  });
	} /*
	  Utility function to fetch required data for component to render in server side.
	  This was inspired from https://github.com/caljrimmer/isomorphic-redux-app/blob/73e6e7d43ccd41e2eb557a70be79cebc494ee54b/src/common/api/fetchComponentDataBeforeRender.js
	  */

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/* WEBPACK VAR INJECTION */(function(__dirname) {'use strict';
	
	var webpack = __webpack_require__(85);
	var cssnext = __webpack_require__(254);
	var postcssFocus = __webpack_require__(255);
	var postcssReporter = __webpack_require__(256);
	
	module.exports = {
	
	  // devtool: 'cheap-module-eval-source-map',
	  devtool: 'inline-source-map',
	
	  entry: {
	    app: [
	    // 'eventsource-polyfill',
	    // 'webpack-hot-middleware/client',
	    // 'webpack/hot/only-dev-server',
	    // 'react-hot-loader/patch',
	    './client/index.js'],
	    vendor: ['react', 'react-dom']
	  },
	
	  output: {
	    path: __dirname,
	    filename: 'app.js',
	    publicPath: '/'
	  },
	
	  resolve: {
	    extensions: ['', '.js', '.jsx'],
	    modules: ['client', 'node_modules']
	  },
	
	  module: {
	    loaders: [{
	      test: /\.css$/,
	      exclude: /node_modules/,
	      loader: 'style-loader!css-loader?localIdentName=[name]__[local]__[hash:base64:5]&modules&importLoaders=1&sourceMap!postcss-loader'
	    }, {
	      test: /\.css$/,
	      include: /node_modules/,
	      loaders: ['style-loader', 'css-loader']
	    }, {
	      test: /\.jsx*$/,
	      exclude: [/node_modules/, /.+\.config.js/],
	      loader: 'babel'
	    }, {
	      test: /\.(jpe?g|gif|png|svg)$/i,
	      loader: 'url-loader?limit=10000'
	    }, {
	      test: /\.json$/,
	      loader: 'json-loader'
	    }]
	  },
	
	  plugins: [new webpack.HotModuleReplacementPlugin(), new webpack.optimize.CommonsChunkPlugin({
	    name: 'vendor',
	    minChunks: Infinity,
	    filename: 'vendor.js'
	  }), new webpack.DefinePlugin({
	    'process.env': {
	      CLIENT: JSON.stringify(true),
	      'NODE_ENV': JSON.stringify('development')
	    }
	  })],
	
	  postcss: function postcss() {
	    return [postcssFocus(), cssnext({
	      browsers: ['last 2 versions', 'IE > 10']
	    }), postcssReporter({
	      clearMessages: true
	    })];
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, ""))

/***/ },
/* 133 */
/***/ function(module, exports) {

	module.exports = require("body-parser");

/***/ },
/* 134 */
/***/ function(module, exports) {

	module.exports = require("compression");

/***/ },
/* 135 */
/***/ function(module, exports) {

	module.exports = require("cookie-parser");

/***/ },
/* 136 */
/***/ function(module, exports) {

	module.exports = require("csrf-tokens");

/***/ },
/* 137 */
/***/ function(module, exports) {

	module.exports = require("morgan");

/***/ },
/* 138 */
/***/ function(module, exports) {

	module.exports = require("react-dom/server");

/***/ },
/* 139 */
/***/ function(module, exports) {

	module.exports = require("webpack-dev-middleware");

/***/ },
/* 140 */
/***/ function(module, exports) {

	module.exports = require("webpack-hot-middleware");

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.intlData = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _setup = __webpack_require__(95);
	
	var _IntlActions = __webpack_require__(37);
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	// const initLocale = global.navigator && global.navigator.language || 'en';
	var initLocale = 'en';
	
	var initialState = _extends({
	  locale: initLocale,
	  setlocale: null,
	  enabledLanguages: _setup.enabledLanguages
	}, _setup.localizationData[initLocale] || {});
	
	var IntlReducer = function IntlReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _IntlActions.SWITCH_LANGUAGE:
	      {
	        var type = action.type,
	            actionWithoutType = _objectWithoutProperties(action, ['type']); // eslint-disable-line
	
	
	        return _extends({}, state, actionWithoutType);
	      }
	    case _IntlActions.NO_CHANGE:
	      return state;
	    default:
	      return state;
	  }
	};
	
	var intlData = exports.intlData = function intlData(state) {
	  return state.intl;
	};
	
	exports.default = IntlReducer;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	exports.Loading = Loading;
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactIntl = __webpack_require__(11);
	
	var _App = {
	  "container": "_4uEyKcd5WHob5qPzotT7",
	  "goBackDash": "rVqW_eC3X5xdbAEEPWOTI",
	  "goTextDash": "_3fNxAADkK9yWDbFAr6IeYF",
	  "sectionMain": "COZIMIWpKavlm2062DfRs",
	  "aligner": "FLVQcC2-9gssOnXND5deg",
	  "centerAligner": "Es8zQdVtQLLTnTzA4bWD4",
	  "errorIcon": "gR17NZJlxFmunqSl_VnUj",
	  "paraVal": "_2v6sCMxw2Fiyrsc-9RaA4C"
	};
	
	var _App2 = _interopRequireDefault(_App);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
	  id: 'uploading_please_wait'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'loading_please_wait'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'registration_please_wait'
	});
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'adding_question_please_wait'
	});
	
	var _ref5 = _jsx(_reactFontawesome2.default, {
	  name: 'spinner',
	  spin: true,
	  size: '3x'
	});
	
	var _ref6 = _jsx(_reactFontawesome2.default, {
	  name: 'spinner',
	  spin: true,
	  size: '3x'
	});
	
	var _ref7 = _jsx(_reactFontawesome2.default, {
	  name: 'spinner',
	  spin: true,
	  size: '5x'
	});
	
	var _ref8 = _jsx(_reactFontawesome2.default, {
	  name: 'spinner',
	  spin: true,
	  size: '5x'
	});
	
	var _ref9 = _jsx(_reactFontawesome2.default, {
	  name: 'spinner',
	  spin: true,
	  size: '3x'
	});
	
	var _ref10 = _jsx(_reactFontawesome2.default, {
	  name: 'spinner',
	  spin: true,
	  size: '5x'
	});
	
	function Loading(props, context) {
	  var sectionLoading = {
	    position: 'fixed',
	    zIndex: '50',
	    width: '300px',
	    left: 'calc(50% - 150px)',
	    top: 'calc(50% - 56px)',
	    textAlign: 'center',
	    color: '#008abc'
	  };
	
	  var whiteLoading = {
	    position: 'fixed',
	    zIndex: '50',
	    width: '300px',
	    left: 'calc(50% - 150px)',
	    top: 'calc(50% - 56px)',
	    textAlign: 'center',
	    color: '#fff'
	  };
	
	  var paraWhiteVal = {
	    padding: '0',
	    marginTop: '16px',
	    color: '#fff'
	  };
	
	  var paraVal = {
	    padding: '0',
	    marginTop: '16px',
	    color: 'rgba(0,0,0,0.87)'
	  };
	
	  var listSpinner = {
	    position: 'relative',
	    zIndex: '50',
	    width: '100%',
	    textAlign: 'center',
	    color: '#008abc',
	    marginTop: '24px'
	  };
	  var _uploadMessage = _ref;
	  var _message = _ref2;
	  var _messageReg = _ref3;
	  var _messageQuesSave = _ref4;
	
	  if (props.message) {
	    _message = props.message;
	  }
	
	  if (props.loadType == 'list') {
	    return _jsx('div', {
	      style: listSpinner
	    }, void 0, _ref5, _jsx('p', {
	      style: paraVal
	    }, void 0, _message));
	  } else if (props.loadType == 'upload') {
	    return _jsx('div', {
	      style: listSpinner
	    }, void 0, _ref6, _jsx('p', {
	      style: paraVal
	    }, void 0, _uploadMessage));
	  } else if (props.loadType == 'white') {
	    return _jsx('div', {
	      style: whiteLoading
	    }, void 0, _ref7, _jsx('p', {
	      style: paraWhiteVal
	    }, void 0, _message));
	  } else if (props.loadType == 'register') {
	    return _jsx('div', {
	      style: whiteLoading
	    }, void 0, _ref8, _jsx('p', {
	      style: paraWhiteVal
	    }, void 0, _messageReg));
	  }if (props.loadType == 'save') {
	    return _jsx('div', {
	      style: listSpinner
	    }, void 0, _ref9, _jsx('p', {
	      style: paraVal
	    }, void 0, _messageQuesSave));
	  } else {
	    return _jsx('div', {
	      style: sectionLoading
	    }, void 0, _ref10, _jsx('p', {
	      style: paraVal
	    }, void 0, _message));
	  }
	}
	
	exports.default = (0, _reactIntl.injectIntl)(Loading);
	
	/*<div>
	        {props.loadType=='upload'?
	        <div style={listSpinner}>
	          <FontAwesome name="spinner" spin size='3x' />
	          <p style={paraVal}>
	            {_uploadMessage}
	          </p>
	        </div> :
	        <div style={sectionLoading}>
	          <FontAwesome name="spinner" spin size='5x' />
	          <p style={paraVal}>
	            {_message}
	          </p>
	        </div> }
	      </div>*/

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.roomData = undefined;
	
	var _initialState;
	
	var _RoomActions = __webpack_require__(63);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	//SAVED_STUDENTS_ASSIGNMENT
	
	var _ = __webpack_require__(7);
	
	var initialState = (_initialState = {
	  edit: false, data: {},
	  dataList: {}, currentPage: 1,
	  count: 0, itemsPerPage: 5,
	  schema: null, error: [], success: '',
	  topicdata: {},
	  topicList: {}, currentTopicPage: 1,
	  topiccount: 0,
	  topicFileList: {}, currentFilePage: 1,
	  topicfilecount: 0,
	  topicFileData: {},
	  show: '' }, _defineProperty(_initialState, 'edit', ''), _defineProperty(_initialState, 'questionnaireData', ''), _defineProperty(_initialState, 'resultList', {}), _defineProperty(_initialState, 'currentResultPage', 1), _defineProperty(_initialState, 'resultCount', 0), _defineProperty(_initialState, 'resultData', {}), _defineProperty(_initialState, 'locationList', ''), _defineProperty(_initialState, 'instructorStudentList', ''), _defineProperty(_initialState, 'roomLocationList', ''), _defineProperty(_initialState, 'deleteSuccess', ''), _defineProperty(_initialState, 'roomQuestionnaireList', ''), _defineProperty(_initialState, 'assignmentList', {}), _defineProperty(_initialState, 'assignmentCount', 0), _defineProperty(_initialState, 'currentAssignmentPage', 1), _defineProperty(_initialState, 'assignmentData', {}), _defineProperty(_initialState, 'assignmentTopicData', ''), _defineProperty(_initialState, 'submissionList', {}), _defineProperty(_initialState, 'submissionCount', 0), _defineProperty(_initialState, 'currentSubmissionPage', 1), _defineProperty(_initialState, 'plagiarismData', {}), _defineProperty(_initialState, 'attendanceData', {}), _defineProperty(_initialState, 'attendanceList', {}), _defineProperty(_initialState, 'usersCount', 0), _defineProperty(_initialState, 'currentusersPage', 1), _defineProperty(_initialState, 'individualAttendanceList', {}), _defineProperty(_initialState, 'visitCount', 0), _defineProperty(_initialState, 'currentvisitPage', 1), _defineProperty(_initialState, 'schedulesList', {}), _defineProperty(_initialState, 'schedulesCount', 0), _defineProperty(_initialState, 'currentSchedulePage', 1), _defineProperty(_initialState, 'roomDataInfo', {}), _defineProperty(_initialState, 'topicViewedList', {}), _defineProperty(_initialState, 'topicListCount', 0), _defineProperty(_initialState, 'currentListPage', 1), _defineProperty(_initialState, 'viewedTopicsList', {}), _defineProperty(_initialState, 'viewedTopicsCount', 0), _defineProperty(_initialState, 'currentTopicPage', 1), _defineProperty(_initialState, 'individualAssigmentData', {}), _defineProperty(_initialState, 'certificateData', {}), _initialState);
	
	var RoomReducer = function RoomReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _RoomActions.EDIT_ROOM:
	      return Object.assign({}, state, { edit: action.status });
	    case _RoomActions.SAVE_ROOM:
	      return Object.assign({}, state, { edit: action.status, data: action.data });
	    case _RoomActions.CANCEL_ROOM:
	      return Object.assign({}, state, { edit: action.status, deleteSuccess: action.message });
	    case _RoomActions.SAVED_ROOM:
	      //changedBy: pranathi, disc: no data then state updating to previous state
	      if (action.data) {
	        return Object.assign({}, state, { edit: action.status, data: action.data, roomDataInfo: action.data, success: action.message });
	      } else {
	        return state;
	      }
	    case _RoomActions.GET_ROOM:
	      return Object.assign({}, state, { data: action.data });
	    case _RoomActions.LIST_ROOM:
	      return Object.assign({}, state, {
	        dataList: action.listData, data: {}, count: action.count, currentPage: action.currentPage
	      });
	    case _RoomActions.UPDATE_SCHEMA:
	      if (action.data && action.data != null) {
	        return Object.assign({}, state, { schema: action.schema, data: action.data, topicdata: {}
	        });
	      } else {
	        return Object.assign({}, state, { schema: action.schema,
	          data: {},
	          topicdata: {}
	        });
	      }
	    case _RoomActions.CLEAR_ROOM:
	      return Object.assign({}, state, { success: '', deleteSuccess: '' });
	    case _RoomActions.SAVED_ROOM_USER:
	      if (action.data) return Object.assign({}, state, { data: action.data });else return state;
	    case _RoomActions.SAVED_TOPIC:
	      return action.status ? Object.assign({}, state, { edit: action.status, topicdata: action.data, success: action.message }) : state;
	    case _RoomActions.LIST_ROOM_TOPIC:
	      return Object.assign({}, state, {
	        topicList: action.listData, topiccount: action.count, currentTopicsPage: action.currentPage
	      });
	
	    case _RoomActions.LIST_TOPIC_FILES:
	      return Object.assign({}, state, {
	        topicFileList: action.listData, topicfilecount: action.count, currentFilePage: action.currentPage
	      });
	    case _RoomActions.CANCEL_TOPIC:
	      return Object.assign({}, state, { edit: action.status, success: action.message });
	
	    case _RoomActions.SAVED_ROOM_TOPIC:
	      return Object.assign({}, state, { topicdata: action.data });
	
	    case _RoomActions.SAVED_TOPIC_FILE:
	      return Object.assign({}, state, { topicFileData: action.data });
	    case _RoomActions.CANCEL_FILE:
	      return Object.assign({}, state, { edit: action.status, success: action.message });
	
	    case _RoomActions.SHOW_MODAL:
	      return Object.assign({}, state, {
	        show: action.data
	      });
	
	    case _RoomActions.EDIT_MODAL:
	      return Object.assign({}, state, {
	        edit: action.data
	      });
	
	    case _RoomActions.FETCHED_TOPIC_QUESTIONNAIRE:
	      return Object.assign({}, state, {
	        questionnaireData: action.data
	      });
	
	    case _RoomActions.FETCH_TOPIC_QUESTIONNAIRE_FAILED:
	      return Object.assign({}, state, {
	        questionnaireData: action.data
	      });
	
	    case _RoomActions.ASSIGNED_QUESTIONNAIRE:
	      return Object.assign({}, state, {
	        topicdata: action.data,
	        success: action.message
	      });
	
	    case _RoomActions.ASSIGN_QUESTIONNAIRE_FAILED:
	      return Object.assign({}, state, {
	        success: action.message
	      });
	
	    case _RoomActions.QUESTIONNAIRE_SUCCESSFULLY_UNASSIGNED:
	      return Object.assign({}, state, {
	        status: action.status,
	        success: action.message,
	        topicdata: action.data,
	        error: []
	      });
	
	    case _RoomActions.QUESTIONNAIRE_UNASSIGN_FAILED:
	      return Object.assign({}, state, {
	        status: action.status,
	        error: action.error
	      });
	
	    case _RoomActions.LIST_RESULT_TOPIC:
	      return Object.assign({}, state, {
	        resultList: action.listData,
	        resultCount: action.count,
	        currentResultPage: action.currentPage
	      });
	
	    case _RoomActions.FETCHED_RESULT:
	      return Object.assign({}, state, {
	        edit: action.status,
	        resultData: action.data
	      });
	    case _RoomActions.LIST_LOCATION:
	      return Object.assign({}, state, { locationList: action.listData });
	    case _RoomActions.SAVE_LOCATION:
	      return Object.assign({}, state, { edit: action.status, success: action.message });
	    case _RoomActions.LIST_ROOM_LOCATION:
	      return Object.assign({}, state, { roomLocationList: action.listData });
	    case _RoomActions.DELETE_ROOM_LOCATION:
	      return Object.assign({}, state, { edit: action.status, success: action.message });
	    case _RoomActions.DELETE_ROOM_LOCATIONPARTICIPANT:
	      return Object.assign({}, state, { edit: action.status, success: action.message });
	    case _RoomActions.LIST_ROOM_QUESTIONNAIRE:
	      return Object.assign({}, state, { roomQuestionnaireList: action.listData });
	    case _RoomActions.SAVED_FEEDBACKTYPE:
	      return Object.assign({}, state, { edit: action.status, success: action.message, data: action.data });
	    case _RoomActions.GET_FEEDBACK_TYPE:
	      return Object.assign({}, state, { data: action.listData });
	    case _RoomActions.SAVED_CODECTYPE:
	      return Object.assign({}, state, { edit: action.status, success: action.message, data: action.data });
	    case _RoomActions.SAVED_ENABLE_LIVE:
	      return Object.assign({}, state, { edit: action.status, success: action.message, data: action.data });
	    case _RoomActions.UPDATED_FILE_DESC:
	      return Object.assign({}, state, {
	        success: action.message,
	        topicFileList: action.listData,
	        topicfilecount: action.count,
	        currentFilePage: action.currentPage
	      });
	    case _RoomActions.LIST_ROOM_ASSIGNMENT:
	      return Object.assign({}, state, {
	        assignmentList: action.listData,
	        assignmentCount: action.count,
	        currentAssignmentPage: action.currentPage
	      });
	    case _RoomActions.SAVED_ROOM_ASSIGNMENT:
	      return Object.assign({}, state, {
	        assignmentData: action.data
	      });
	    case _RoomActions.SAVED_ASSIGNMENT:
	      if (action.data) {
	        return Object.assign({}, state, {
	          edit: action.status,
	          assignmentData: action.data,
	          success: action.message
	        });
	      } else {
	        return Object.assign({}, state, {
	          edit: action.status,
	          success: action.message
	        });
	      }
	    case _RoomActions.SAVED_TOPIC_DATA:
	      return Object.assign({}, state, {
	        assignmentTopicData: action.data
	      });
	    case _RoomActions.LIST_ASSIGNMENT_SUBMISSION:
	      return Object.assign({}, state, {
	        submissionList: action.listData,
	        submissionCount: action.count,
	        currentSubmissionPage: action.currentPage
	      });
	    case _RoomActions.DELETE_UPLOADED_FILES:
	      return Object.assign({}, state, {
	        assignmentData: action.data
	      });
	    case _RoomActions.DELETE_ASSIGNMENT:
	      return Object.assign({}, state, {
	        edit: action.status,
	        success: action.message
	      });
	    case _RoomActions.UPLOAD_FILE_ENABLE:
	      if (action.status) {
	        var uploadfiles = state.topicFileList;
	        var index = _.findIndex(uploadfiles, function (o) {
	          return o._id == action.id;
	        });
	        uploadfiles[index].isEnable = !uploadfiles[index].isEnable;
	        return Object.assign({}, state, { edit: action.status, topicFileList: uploadfiles });
	      } else return state;
	    case _RoomActions.ROOM_TOPIC_ENABLE:
	      if (action.status) {
	        var topicfiles = state.topicList;
	        var _index = _.findIndex(topicfiles, function (o) {
	          return o._id == action.id;
	        });
	        topicfiles[_index].topicEnable = !topicfiles[_index].topicEnable;
	        return Object.assign({}, state, { edit: action.status, topicList: topicfiles });
	      } else return state;
	      break;
	    case _RoomActions.GET_PLAGIARISM_DATA:
	      return Object.assign({}, state, {
	        plagiarismData: action.data
	      });
	    case _RoomActions.GET_PLAGIARISM_DATA_FAILED:
	      return Object.assign({}, state, {
	        edit: action.status,
	        plagiarismData: action.data,
	        error: action.error
	      });
	    case _RoomActions.SAVED_COURSE_ATTENDANCE:
	      return Object.assign({}, state, {
	        attendanceData: action.data
	      });
	    case _RoomActions.CLEAR_PLAGIARISM_DATA:
	      return Object.assign({}, state, {
	        error: [], plagiarismData: {}, edit: '', success: '', credits: null
	      });
	    // case SAVED_STUDENTS_ASSIGNMENT:
	    //   return Object.assign({}, state, { 
	    //   assignmentData : action.data
	    // });
	    case _RoomActions.LIST_COURSE_ATTENDANCE:
	      return Object.assign({}, state, {
	        attendanceList: action.listData,
	        usersCount: action.count,
	        currentusersPage: action.currentPage
	      });
	    case _RoomActions.CLEAR_ATTENDANCE_LIST:
	      return Object.assign({}, state, {
	        attendanceList: {},
	        usersCount: 0,
	        currentusersPage: 1
	      });
	    case _RoomActions.SAVED_INDIVIDUAL_ATTENDANCE:
	      return Object.assign({}, state, {
	        attendanceData: action.data
	      });
	    case _RoomActions.LIST_INDIVIDUAL_ATTENDANCE:
	      return Object.assign({}, state, {
	        individualAttendanceList: action.listData,
	        visitCount: action.count,
	        currentvisitPage: action.currentPage
	      });
	    case _RoomActions.CLEAR_INDIVIDUAL_ATTENDANCE_LIST:
	      return Object.assign({}, state, {
	        individualAttendanceList: {},
	        visitCount: 0,
	        currentvisitPage: 1
	      });
	    case _RoomActions.LIST_TOTAL_SCHEDULES:
	      return Object.assign({}, state, {
	        schedulesList: action.listData, schedulesCount: action.count, currentSchedulePage: action.currentPage
	      });
	    case _RoomActions.CLEAR_TOTAL_SCHEDULES_LIST:
	      return Object.assign({}, state, {
	        schedulesList: {}, schedulesCount: 0, currentSchedulePage: 1
	      });
	    case _RoomActions.SAVED_VIEWED_TOPICS:
	      return Object.assign({}, state, {
	        topicdata: action.data
	      });
	    case _RoomActions.LIST_TOPIC_VIEWED_USERS:
	      return Object.assign({}, state, {
	        topicViewedList: action.listData, topicListCount: action.count, currentListPage: action.currentPage
	      });
	    case _RoomActions.SAVED_COURSE_TOPICS:
	      return Object.assign({}, state, {
	        topicdata: action.data
	      });
	    case _RoomActions.INDIVIDUAL_ASSIGNMENT_DATA:
	      return Object.assign({}, state, {
	        status: action.status,
	        individualAssigmentData: action.data,
	        success: action.message
	      });
	    case _RoomActions.INDIVIDUAL_ASSIGNMENT_DATA_FAILED:
	      return Object.assign({}, state, {
	        status: action.status,
	        error: action.error
	      });
	    case _RoomActions.CLEAR_INDIVIDUAL_ASSIGNMENT_DATA:
	      return Object.assign({}, state, {
	        individualAssigmentData: {}
	      });
	    case _RoomActions.SET_CERTIFICATE_DATA:
	      return Object.assign({}, state, {
	        certificateData: action.certificateData,
	        studentsCount: action.count,
	        currentCertificatePage: action.currentPage
	      });
	    case _RoomActions.SET_CERTIFICATE_DATA_FAILED:
	      return Object.assign({}, state, {
	        error: action.error,
	        currentCertificatePage: action.currentPage
	      });
	    case _RoomActions.TOGGLE_CERTIFICATE_DOWNLOAD:
	      if (action.status) {
	        var certificateList = state.certificateData;
	        var _index2 = _.findIndex(certificateList, function (o) {
	          return o._id == action.id;
	        });
	        certificateList[_index2].isCertificateEligible = !certificateList[_index2].isCertificateEligible;
	        return Object.assign({}, state, { edit: action.status, certificateData: certificateList });
	      } else {
	        return state;
	      }
	      break;
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var roomData = exports.roomData = function roomData(state) {
	  return state.room;
	};
	
	// Export Reducer
	exports.default = RoomReducer;

/***/ },
/* 144 */
/***/ function(module, exports) {

	"use strict";
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	//import React, { Component, PropTypes } from 'react';
	
	var DataObject = function () {
		function DataObject(obj) {
			_classCallCheck(this, DataObject);
	
			this.res = {};
			this.revObj = {};
			this.recurse(obj);
			return this.res;
		}
	
		_createClass(DataObject, [{
			key: "recurse",
			value: function recurse(obj, current) {
				for (var key in obj) {
					var value = obj[key];
					var newKey = current ? current + "." + key : key; // joined key with dot
					if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
						if (Array.isArray) {
							if (Array.isArray(value)) {
								/*for(var i = 0; i < value.length; i++){
	       	let index = newKey+"["+i+"]";
	       	this.res[index] = value[i];
	       }*/
								this.res[newKey] = value;
							} else {
								this.recurse(value, newKey); // it's a nested object, so do it again
							}
						}
					} else {
						this.res[newKey] = value; // it's not an object, so set the property
					}
				}
			}
	
			// static reverseObject = function(objTest){
			// 	var objTemp = {};
			// 	for(var key in objTest) {
			//       var value = objTest[key];
			//       // console.log(key)
			//       if(key.indexOf(".") !== -1){
	
			//       	let arr = key.split('.'),
			// 		obj, o = obj = {};
	
			// 		arr.forEach(vkey=>{o=o[vkey]={}});
			// 		_.set(obj, key, objTest[key]);
			// 		// this.revObj[arr[0]] = this.revObj[arr[1]] = objTest[key];      	
			// 		console.log("Arr", obj);
			//       }else{
			//       	console.log(objTemp);
			//       	// this.revObj = Object.assign({}, this.revObj, objTest[key] );
			//       	objTemp[key] = objTest[key];
			//       	console.log("NOR", objTemp);
			//       }
			//       // var newKey = (current ? current + "." + key : key);  // joined key with dot
			//       // if(value && typeof value === "object") {
			//       //   this.recurse(value, newKey);  // it's a nested object, so do it again
			//       // } else {
			//       //   this.res[newKey] = value;  // it's not an object, so set the property
			//       // }
			//     }
			// 	// let str = objTest,
			// 	// arr = str.split('.'),
			// 	// obj, o = obj = {};
	
			// 	// arr.forEach(key=>{o=o[key]={}});
	
			// 	// console.log(this.revObj);
			// }
	
		}]);
	
		return DataObject;
	}();
	
	exports.default = DataObject;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.USER_GOOGLEID_SAVED = exports.REMOVE_PROFILE_IMAGE = exports.FETCHED_LOGS = exports.UPDATE_LOCAL_SCHEMA = exports.SAVED_LOCAL_SETTINGS = exports.GET_LOCAL_SETTINGS = exports.CREATE_SKILL_FAILED = exports.CREATED_SKILL = exports.DELETED_SCHOOL_FAILED = exports.DELETED_SCHOOL = exports.CREATE_SCHOOL_FAILED = exports.CREATED_SCHOOL = exports.DELETED_ALLSKILLS_FAILED = exports.DELETED_ALLSKILLS = exports.DELETED_GENDER_FAILED = exports.DELETED_GENDER = exports.DELETED_BIRTHDAY_FAILED = exports.DELETED_BIRTHDAY = exports.DELETED_SOCIALLINK_FAILED = exports.DELETED_SOCIALLINK = exports.DELETED_WEBSITE_FAILED = exports.DELETED_WEBSITE = exports.USER_BASIC_INFO_NOT_SAVED = exports.USER_BASIC_INFO_SAVED = exports.USER_SOCIALLINK_NOT_SAVED = exports.USER_SOCIALLINK_SAVED = exports.USER_WEBSITE_NOT_SAVED = exports.USER_WEBSITE_SAVED = exports.DELETED_ADDRESS_FAILED = exports.DELETED_ADDRESS = exports.DELETE_COLLEGE_FAILED = exports.DELETED_COLLEGE = exports.CREATE_COLLEGE_FAILED = exports.CREATED_COLLEGE = exports.DELETE_WORK_PLACE_FAILED = exports.DELETED_WORK_PLACE = exports.NO_WORK_EDU_DATA_FOUND = exports.WORK_EDU_DATA_FETCH_FAILED = exports.WORK_EDU_DATA_FETCHED = exports.CREATE_WORK_PLACE_FAILED = exports.CREATED_WORK_PLACE = exports.USER_ADDRESS_NOT_SAVED = exports.USER_ADDRESS_SAVED = exports.CLEAR_PROFILE_RES = exports.CLEAR_PROFILE = exports.UPDATE_SCHEMA = exports.GET_PROFILE = exports.CANCEL_PROFILE = exports.SAVED_PROFILE = exports.SAVE_PROFILE = exports.EDIT_PROFILE = undefined;
	exports.EditProfile = EditProfile;
	exports.ProfileStore = ProfileStore;
	exports.ClearProfile = ClearProfile;
	exports.ClearProfileRes = ClearProfileRes;
	exports.CancelProfile = CancelProfile;
	exports.UpdateProfileSchema = UpdateProfileSchema;
	exports.saveUserAddress = saveUserAddress;
	exports.UserAddressSaved = UserAddressSaved;
	exports.UserAddressNotSaved = UserAddressNotSaved;
	exports.createWorkPlaceRequest = createWorkPlaceRequest;
	exports.createdWorkPlace = createdWorkPlace;
	exports.createWorkPlaceFailed = createWorkPlaceFailed;
	exports.createSchoolRequest = createSchoolRequest;
	exports.getWorkEduDataRequest = getWorkEduDataRequest;
	exports.getWorkEduDataSuccess = getWorkEduDataSuccess;
	exports.getWorkEduDataFailed = getWorkEduDataFailed;
	exports.deleteWorkPlaceRequest = deleteWorkPlaceRequest;
	exports.createdSchool = createdSchool;
	exports.deletedWorkPlace = deletedWorkPlace;
	exports.createSchoolFailed = createSchoolFailed;
	exports.deleteWorkPlaceFailed = deleteWorkPlaceFailed;
	exports.saveUserWebsite = saveUserWebsite;
	exports.UserWebsiteSaved = UserWebsiteSaved;
	exports.UserWebsiteNotSaved = UserWebsiteNotSaved;
	exports.saveUserSocialLink = saveUserSocialLink;
	exports.UserSocialLinkSaved = UserSocialLinkSaved;
	exports.UserSocialLinkNotSaved = UserSocialLinkNotSaved;
	exports.saveBasicInfoData = saveBasicInfoData;
	exports.UserBasicInfoSaved = UserBasicInfoSaved;
	exports.UserBasicInfoNotSaved = UserBasicInfoNotSaved;
	exports.createCollegeRequest = createCollegeRequest;
	exports.createdCollege = createdCollege;
	exports.createCollegeFailed = createCollegeFailed;
	exports.deleteCollegeRequest = deleteCollegeRequest;
	exports.deleteSchoolRequest = deleteSchoolRequest;
	exports.deletedCollege = deletedCollege;
	exports.deletedSchool = deletedSchool;
	exports.deleteCollegeFailed = deleteCollegeFailed;
	exports.deleteSchoolFailed = deleteSchoolFailed;
	exports.saveSkillsRequest = saveSkillsRequest;
	exports.deleteAddressRequest = deleteAddressRequest;
	exports.createdSkill = createdSkill;
	exports.deletedAddress = deletedAddress;
	exports.deleteAddressFailed = deleteAddressFailed;
	exports.deleteWebsiteRequest = deleteWebsiteRequest;
	exports.deletedWebsite = deletedWebsite;
	exports.deleteWebsiteFailed = deleteWebsiteFailed;
	exports.deleteSocialLinkRequest = deleteSocialLinkRequest;
	exports.deletedSocialLink = deletedSocialLink;
	exports.createSkillFailed = createSkillFailed;
	exports.deleteSocialLinkFailed = deleteSocialLinkFailed;
	exports.deleteAllSkillRequest = deleteAllSkillRequest;
	exports.deleteBirthDayRequest = deleteBirthDayRequest;
	exports.deletedBirthDay = deletedBirthDay;
	exports.deleteBirthDayFailed = deleteBirthDayFailed;
	exports.deleteGenderRequest = deleteGenderRequest;
	exports.deletedAllSkill = deletedAllSkill;
	exports.deletedGender = deletedGender;
	exports.deleteAllSkillFailed = deleteAllSkillFailed;
	exports.deleteGenderFailed = deleteGenderFailed;
	exports.localesettingsStore = localesettingsStore;
	exports.saveLocaleSettings = saveLocaleSettings;
	exports.LocalSettingsStatus = LocalSettingsStatus;
	exports.UpdateLocaleSchema = UpdateLocaleSchema;
	exports.LocaleSettingsList = LocaleSettingsList;
	exports.LocaleListStatus = LocaleListStatus;
	exports.ChangeUserPassword = ChangeUserPassword;
	exports.getLogRequest = getLogRequest;
	exports.fetchlogStatus = fetchlogStatus;
	exports.removeProfileImage = removeProfileImage;
	exports.DeleteImage = DeleteImage;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _LoginActions = __webpack_require__(21);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7);
	
	var EDIT_PROFILE = exports.EDIT_PROFILE = 'EDIT_PROFILE';
	var SAVE_PROFILE = exports.SAVE_PROFILE = 'SAVE_PROFILE';
	var SAVED_PROFILE = exports.SAVED_PROFILE = 'SAVED_PROFILE';
	var CANCEL_PROFILE = exports.CANCEL_PROFILE = 'CANCEL_PROFILE';
	var GET_PROFILE = exports.GET_PROFILE = 'GET_PROFILE';
	var UPDATE_SCHEMA = exports.UPDATE_SCHEMA = 'UPDATE_SCHEMA';
	var CLEAR_PROFILE = exports.CLEAR_PROFILE = 'CLEAR_PROFILE';
	var CLEAR_PROFILE_RES = exports.CLEAR_PROFILE_RES = 'CLEAR_PROFILE_RES';
	var USER_ADDRESS_SAVED = exports.USER_ADDRESS_SAVED = 'USER_ADDRESS_SAVED';
	var USER_ADDRESS_NOT_SAVED = exports.USER_ADDRESS_NOT_SAVED = 'USER_ADDRESS_NOT_SAVED';
	var CREATED_WORK_PLACE = exports.CREATED_WORK_PLACE = 'CREATED_WORK_PLACE';
	var CREATE_WORK_PLACE_FAILED = exports.CREATE_WORK_PLACE_FAILED = 'CREATE_WORK_PLACE_FAILED';
	var WORK_EDU_DATA_FETCHED = exports.WORK_EDU_DATA_FETCHED = 'WORK_EDU_DATA_FETCHED';
	var WORK_EDU_DATA_FETCH_FAILED = exports.WORK_EDU_DATA_FETCH_FAILED = 'WORK_EDU_DATA_FETCH_FAILED';
	var NO_WORK_EDU_DATA_FOUND = exports.NO_WORK_EDU_DATA_FOUND = 'NO_WORK_EDU_DATA_FOUND';
	var DELETED_WORK_PLACE = exports.DELETED_WORK_PLACE = 'DELETED_WORK_PLACE';
	var DELETE_WORK_PLACE_FAILED = exports.DELETE_WORK_PLACE_FAILED = 'DELETE_WORK_PLACE_FAILED';
	var CREATED_COLLEGE = exports.CREATED_COLLEGE = 'CREATED_COLLEGE';
	var CREATE_COLLEGE_FAILED = exports.CREATE_COLLEGE_FAILED = 'CREATE_COLLEGE_FAILED';
	var DELETED_COLLEGE = exports.DELETED_COLLEGE = 'DELETED_COLLEGE';
	var DELETE_COLLEGE_FAILED = exports.DELETE_COLLEGE_FAILED = 'DELETE_COLLEGE_FAILED';
	var DELETED_ADDRESS = exports.DELETED_ADDRESS = 'DELETED_ADDRESS';
	var DELETED_ADDRESS_FAILED = exports.DELETED_ADDRESS_FAILED = 'DELETED_ADDRESS_FAILED';
	var USER_WEBSITE_SAVED = exports.USER_WEBSITE_SAVED = 'USER_WEBSITE_SAVED';
	var USER_WEBSITE_NOT_SAVED = exports.USER_WEBSITE_NOT_SAVED = 'USER_WEBSITE_NOT_SAVED';
	var USER_SOCIALLINK_SAVED = exports.USER_SOCIALLINK_SAVED = 'USER_SOCIALLINK_SAVED';
	var USER_SOCIALLINK_NOT_SAVED = exports.USER_SOCIALLINK_NOT_SAVED = 'USER_SOCIALLINK_NOT_SAVED';
	var USER_BASIC_INFO_SAVED = exports.USER_BASIC_INFO_SAVED = 'USER_BASIC_INFO_SAVED';
	var USER_BASIC_INFO_NOT_SAVED = exports.USER_BASIC_INFO_NOT_SAVED = 'USER_BASIC_INFO_NOT_SAVED';
	var DELETED_WEBSITE = exports.DELETED_WEBSITE = 'DELETED_WEBSITE';
	var DELETED_WEBSITE_FAILED = exports.DELETED_WEBSITE_FAILED = 'DELETED_WEBSITE_FAILED';
	var DELETED_SOCIALLINK = exports.DELETED_SOCIALLINK = 'DELETED_SOCIALLINK';
	var DELETED_SOCIALLINK_FAILED = exports.DELETED_SOCIALLINK_FAILED = 'DELETED_SOCIALLINK_FAILED';
	var DELETED_BIRTHDAY = exports.DELETED_BIRTHDAY = 'DELETED_BIRTHDAY';
	var DELETED_BIRTHDAY_FAILED = exports.DELETED_BIRTHDAY_FAILED = 'DELETED_BIRTHDAY_FAILED';
	var DELETED_GENDER = exports.DELETED_GENDER = 'DELETED_GENDER';
	var DELETED_GENDER_FAILED = exports.DELETED_GENDER_FAILED = 'DELETED_GENDER_FAILED';
	var DELETED_ALLSKILLS = exports.DELETED_ALLSKILLS = 'DELETED_ALLSKILLS';
	var DELETED_ALLSKILLS_FAILED = exports.DELETED_ALLSKILLS_FAILED = 'DELETED_ALLSKILLS_FAILED';
	var CREATED_SCHOOL = exports.CREATED_SCHOOL = 'CREATED_SCHOOL';
	var CREATE_SCHOOL_FAILED = exports.CREATE_SCHOOL_FAILED = 'CREATE_SCHOOL_FAILED';
	var DELETED_SCHOOL = exports.DELETED_SCHOOL = 'DELETED_SCHOOL';
	var DELETED_SCHOOL_FAILED = exports.DELETED_SCHOOL_FAILED = 'DELETED_SCHOOL_FAILED';
	var CREATED_SKILL = exports.CREATED_SKILL = 'CREATED_SKILL';
	var CREATE_SKILL_FAILED = exports.CREATE_SKILL_FAILED = 'CREATE_SKILL_FAILED';
	
	var GET_LOCAL_SETTINGS = exports.GET_LOCAL_SETTINGS = 'GET_LOCAL_SETTINGS';
	var SAVED_LOCAL_SETTINGS = exports.SAVED_LOCAL_SETTINGS = 'SAVED_LOCAL_SETTINGS';
	var UPDATE_LOCAL_SCHEMA = exports.UPDATE_LOCAL_SCHEMA = 'UPDATE_LOCAL_SCHEMA';
	var FETCHED_LOGS = exports.FETCHED_LOGS = 'FETCHED_LOGS';
	var REMOVE_PROFILE_IMAGE = exports.REMOVE_PROFILE_IMAGE = 'REMOVE_PROFILE_IMAGE';
	var USER_GOOGLEID_SAVED = exports.USER_GOOGLEID_SAVED = 'USER_GOOGLEID_SAVED';
	// export const SAVE_GOOGLE_DATA = 'SAVE_GOOGLE_DATA';
	
	function EditProfile() {
	  return {
	    type: EDIT_PROFILE,
	    status: true
	  };
	}
	
	// export function SaveProfile(data) {
	// 	//console.log(data);
	// 	return (dispatch) => {
	//     	return callApi('updateprofile', 'post', {
	//       	  profiledata: {
	//             	data,
	//       	  },
	//     	}).then( res => dispatch( SavedStatus(res) ));
	//   	};
	// }
	
	// export function SavedStatus(response){
	// 	// console.log(status);
	//   // console.log("response === ",response);
	// 	if(response.status){
	// 		// browserHistory.push('/admin/profile');
	// 		return {
	// 			type: SAVE_PROFILE,
	// 			status: response.status,
	// 			error : [],
	//       data : response.data,
	// 			message : response.message
	// 		};
	// 	}else if(response.error){
	// 		if(response.error.errors){
	// 			return {
	// 				type: SAVE_PROFILE,
	// 				status: response.status,
	// 				error : err,
	// 				message : ''
	// 			};
	// 		}else{
	// 			return {
	// 				type: SAVE_PROFILE,
	// 				status: response.status,
	// 				error : [response.error],
	// 				message : ''
	// 			};
	// 		}
	// 	}else{
	// 		return {
	// 			type: SAVE_PROFILE,
	// 			status: response.status,
	// 			error : ['Internal server error'],
	// 			message : ''
	// 		};
	// 	}
	// }
	
	function ProfileStore(data) {
	  return {
	    type: GET_PROFILE,
	    data: data
	  };
	}
	
	function ClearProfile() {
	  return {
	    type: CLEAR_PROFILE
	  };
	}
	
	function ClearProfileRes() {
	  return {
	    type: CLEAR_PROFILE_RES
	  };
	}
	
	function CancelProfile() {
	  return {
	    type: CANCEL_PROFILE,
	    status: false
	  };
	}
	
	function UpdateProfileSchema(schema) {
	  return {
	    type: UPDATE_SCHEMA,
	    schema: schema
	  };
	}
	
	function saveUserAddress(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('saveUserAddress', 'post', {
	      userAddressData: data
	    }).then(function (res) {
	      if (res.status) {
	        dispatch(UserAddressSaved(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession()));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(UserAddressNotSaved(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function UserAddressSaved(response) {
	  // console.log("Saved user response from controller", response);
	  return {
	    type: USER_ADDRESS_SAVED,
	    status: true,
	    message: response.message
	  };
	}
	
	function UserAddressNotSaved(response) {
	  //console.log("Not user response from controller", response);
	  return {
	    type: USER_ADDRESS_NOT_SAVED,
	    status: false,
	    error: response.error
	  };
	}
	
	function createWorkPlaceRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('create-work-place', 'post', {
	      data: data
	    }).then(function (res) {
	      if (res.status) {
	        dispatch(createdWorkPlace(res));
	        dispatch(getWorkEduDataRequest());
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(createWorkPlaceFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function createdWorkPlace(res) {
	  if (res.status) {
	    return {
	      type: CREATED_WORK_PLACE,
	      success: res.success,
	      data: res.data
	    };
	  }
	}
	
	function createWorkPlaceFailed(res) {
	  if (res.error) {
	    return {
	      type: CREATE_WORK_PLACE_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function createSchoolRequest(schoolObj) {
	  // console.log(data)
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('create-school', 'put', {
	      schoolObj: schoolObj
	    }).then(function (res) {
	      if (res.status) {
	        // console.log("res:", res);
	        dispatch(createdSchool(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile/workedu'));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(createSchoolFailed(res));
	        dispatch(ClearProfile());
	        console.log("error", res.error);
	      }
	    });
	  };
	}
	
	function getWorkEduDataRequest() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('get-work-edu-data', 'get').then(function (res) {
	      if (res.status) {
	        dispatch(getWorkEduDataSuccess(res));
	      } else if (res.error) {
	        dispatch(getWorkEduDataFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function getWorkEduDataSuccess(res) {
	  if (!res.data || _.isEmpty(res.data)) {
	    return {
	      type: NO_WORK_EDU_DATA_FOUND
	    };
	  } else {
	    return {
	      type: WORK_EDU_DATA_FETCHED,
	      workeduData: res.data
	    };
	  }
	}
	
	function getWorkEduDataFailed(res) {
	  if (res.error) {
	    return {
	      type: WORK_EDU_DATA_FETCH_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteWorkPlaceRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-workplace/' + data.workId, 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(deletedWorkPlace(res));
	        dispatch(getWorkEduDataRequest());
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(deleteWorkPlaceFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function createdSchool(res) {
	  if (res.status) {
	    return {
	      type: CREATED_SCHOOL,
	      success: res.success,
	      data: res.data
	    };
	  }
	}
	
	function deletedWorkPlace(res) {
	  if (res.status) {
	    return {
	      type: DELETED_WORK_PLACE,
	      success: [res.success]
	    };
	  }
	}
	
	function createSchoolFailed(res) {
	  if (res.error) {
	    return {
	      type: CREATE_SCHOOL_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteWorkPlaceFailed(res) {
	  if (res.error) {
	    return {
	      type: DELETE_WORK_PLACE_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function saveUserWebsite(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-user-website', 'post', {
	      userWebsiteData: data
	    }).then(function (res) {
	      if (res.status) {
	        dispatch(UserWebsiteSaved(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession()));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(UserWebsiteNotSaved(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function UserWebsiteSaved(response) {
	  // console.log("Saved user response from controller", response);
	  return {
	    type: USER_WEBSITE_SAVED,
	    status: response.status,
	    message: response.message
	  };
	}
	
	function UserWebsiteNotSaved(response) {
	  // console.log("Not user response from controller", response);
	  return {
	    type: USER_WEBSITE_NOT_SAVED,
	    status: response.status,
	    error: response.error
	  };
	}
	
	function saveUserSocialLink(data) {
	  // console.log("data at social link----->", data)
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-user-sociallink', 'post', {
	      userSocialLinkData: data
	    }).then(function (res) {
	      if (res.status) {
	        dispatch(UserSocialLinkSaved(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession()));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(UserSocialLinkNotSaved(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function UserSocialLinkSaved(response) {
	  // console.log("Saved user response from controller", response);
	  return {
	    type: USER_SOCIALLINK_SAVED,
	    status: response.status,
	    message: response.message
	  };
	}
	
	function UserSocialLinkNotSaved(response) {
	  // console.log("Not user response from controller", response);
	  return {
	    type: USER_SOCIALLINK_NOT_SAVED,
	    status: response.status,
	    error: response.error
	  };
	}
	
	function saveBasicInfoData(obj) {
	  // console.log("data at social link----->", obj)
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-user-basic-info', 'post', {
	      userBasicInfoData: obj
	    }).then(function (res) {
	      if (res.status) {
	        dispatch(UserBasicInfoSaved(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession()));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(UserBasicInfoNotSaved(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function UserBasicInfoSaved(response) {
	  // console.log("Saved user response from controller", response);
	  return {
	    type: USER_BASIC_INFO_SAVED,
	    status: response.status,
	    message: response.message
	  };
	}
	
	function UserBasicInfoNotSaved(response) {
	  // console.log("Not user response from controller", response);
	  return {
	    type: USER_BASIC_INFO_NOT_SAVED,
	    status: response.status,
	    error: response.error
	  };
	}
	
	function createCollegeRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('create-college', 'post', {
	      data: data
	    }).then(function (res) {
	      if (res.status) {
	        dispatch(createdCollege(res));
	        dispatch(getWorkEduDataRequest());
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(createCollegeFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function createdCollege(res) {
	  if (res.status) {
	    return {
	      type: CREATED_COLLEGE,
	      success: res.success,
	      data: res.data
	    };
	  }
	}
	
	function createCollegeFailed(res) {
	  if (res.error) {
	    return {
	      type: CREATE_COLLEGE_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteCollegeRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-college/' + data.collegeId, 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(deletedCollege(res));
	        dispatch(getWorkEduDataRequest());
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(deleteCollegeFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function deleteSchoolRequest() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-school', 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(deletedSchool(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile/workedu'));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(deleteSchoolFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function deletedCollege(res) {
	  if (res.status) {
	    return {
	      type: DELETED_COLLEGE,
	      success: [res.success]
	    };
	  }
	}
	
	function deletedSchool(res) {
	  if (res.status) {
	    return {
	      type: DELETED_SCHOOL,
	      success: [res.success]
	    };
	  }
	}
	
	function deleteCollegeFailed(res) {
	  if (res.error) {
	    return {
	      type: DELETE_COLLEGE_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteSchoolFailed(res) {
	  if (res.error) {
	    return {
	      type: DELETED_SCHOOL_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function saveSkillsRequest(skills) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('create-professionalSkills', 'put', {
	      skills: skills
	    }).then(function (res) {
	      if (res.status) {
	        dispatch(createdSkill(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile/workedu'));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(createSkillFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function deleteAddressRequest() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-address', 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(deletedAddress(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile/contacts'));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(deleteAddressFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function createdSkill(res) {
	  if (res.status) {
	    return {
	      type: CREATED_SKILL,
	      success: res.success
	    };
	  }
	}
	
	function deletedAddress(res) {
	  if (res.status) {
	    return {
	      type: DELETED_ADDRESS,
	      success: [res.success]
	    };
	  }
	}
	
	function deleteAddressFailed(res) {
	  if (res.error) {
	    return {
	      type: DELETED_ADDRESS_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteWebsiteRequest() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-website', 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(deletedWebsite(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile/contacts'));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(deleteWebsiteFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function deletedWebsite(res) {
	  if (res.status) {
	    return {
	      type: DELETED_WEBSITE,
	      success: [res.success]
	    };
	  }
	}
	
	function deleteWebsiteFailed(res) {
	  if (res.error) {
	    return {
	      type: DELETED_WEBSITE_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteSocialLinkRequest() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-social-link', 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(deletedSocialLink(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile/contacts'));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(deleteSocialLinkFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function deletedSocialLink(res) {
	  if (res.status) {
	    return {
	      type: DELETED_SOCIALLINK,
	      success: [res.success]
	    };
	  }
	}
	
	function createSkillFailed(res) {
	  if (res.error) {
	    return {
	      type: CREATE_SKILL_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteSocialLinkFailed(res) {
	  if (res.error) {
	    return {
	      type: DELETED_SOCIALLINK_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteAllSkillRequest() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-professional-skills', 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(deletedAllSkill(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile/workedu'));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(deleteAllSkillFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function deleteBirthDayRequest() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-birth-day', 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(deletedBirthDay(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile/contacts'));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(deleteBirthDayFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function deletedBirthDay(res) {
	  if (res.status) {
	    return {
	      type: DELETED_BIRTHDAY,
	      success: [res.success]
	    };
	  }
	}
	
	function deleteBirthDayFailed(res) {
	  if (res.error) {
	    return {
	      type: DELETED_BIRTHDAY_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteGenderRequest() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-gender', 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(deletedGender(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile/contacts'));
	        dispatch(ClearProfile());
	      } else if (res.error) {
	        dispatch(deleteGenderFailed(res));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function deletedAllSkill(res) {
	  if (res.status) {
	    return {
	      type: DELETED_ALLSKILLS,
	      success: [res.success]
	    };
	  }
	}
	
	function deletedGender(res) {
	  if (res.status) {
	    return {
	      type: DELETED_GENDER,
	      success: [res.success]
	    };
	  }
	}
	
	function deleteAllSkillFailed(res) {
	  if (res.error) {
	    return {
	      type: DELETED_ALLSKILLS_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function deleteGenderFailed(res) {
	  if (res.error) {
	    return {
	      type: DELETED_GENDER_FAILED,
	      error: [res.error]
	    };
	  }
	}
	
	function localesettingsStore(data) {
	  return {
	    type: GET_LOCAL_SETTINGS,
	    data: data
	  };
	}
	
	function saveLocaleSettings(data) {
	  var id = data._id;
	  //console.log('data in save locale', data);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('locale-settings', 'put', {
	      profileData: data
	    }).then(function (res) {
	      return dispatch(LocalSettingsStatus(res));
	    });
	  };
	}
	function LocalSettingsStatus(response) {
	  if (response.status) {
	    //console.log("saved", response);
	    //browserHistory.push('/admin/locale/view');
	    return {
	      type: SAVED_LOCAL_SETTINGS,
	      status: response.status,
	      data: response.data,
	      message: response.message,
	      error: []
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        //console.log(obj.message);
	        err.push(obj.message);
	      });
	      return {
	        type: SAVED_LOCAL_SETTINGS,
	        status: response.status,
	        data: response.data,
	        message: '',
	        error: err
	      };
	    } else {
	      return {
	        type: SAVED_LOCAL_SETTINGS,
	        status: response.status,
	        data: response.data,
	        message: '',
	        error: [response.error]
	      };
	    }
	  } else {
	    console.log("internal server error");
	    return {
	      type: SAVED_LOCAL_SETTINGS,
	      status: response.status,
	      data: response.data,
	      message: '',
	      error: ['Internal server error']
	    };
	  }
	}
	function UpdateLocaleSchema(schema) {
	  return {
	    type: UPDATE_LOCAL_SCHEMA,
	    schema: schema
	  };
	}
	
	function LocaleSettingsList(data, currentPage) {
	  // console.log(data);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('listlocale', 'post', {
	      profileData: {
	        data: data
	      }
	    }).then(function (res) {
	      return dispatch(LocaleListStatus(res, currentPage));
	    });
	  };
	}
	
	function LocaleListStatus(response, currentPage) {
	  // console.log(dataCount);
	  // console.log(data);
	  if (response.status) {
	    return {
	      type: LIST_LOCALE,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_LOCALE,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_LOCALE,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	function ChangeUserPassword(userdata) {
	  //console.log(userdata)
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('changepassword', 'post', {
	      userdata: userdata
	    });
	  };
	}
	
	function getLogRequest() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('get-logs', 'get').then(function (res) {
	      if (res.status) {
	        dispatch(fetchlogStatus(res));
	      } else {
	        dispatch(fetchlogStatus(res));
	      }
	    });
	  };
	}
	
	function fetchlogStatus(res) {
	  if (res.status) {
	    return {
	      type: FETCHED_LOGS,
	      data: res.data
	    };
	  } else if (res.error) {
	    return {
	      type: FETCH_LOGS_FAILED
	    };
	  }
	}
	
	function removeProfileImage() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('remove-profile-image', 'delete').then(function (res) {
	      if (res.status) {
	        dispatch(DeleteImage(res));
	        dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession(), '/admin/profile'));
	        dispatch(ClearProfile());
	      }
	    });
	  };
	}
	
	function DeleteImage(response) {
	  if (response.status) {
	    return {
	      type: REMOVE_PROFILE_IMAGE,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: REMOVE_PROFILE_IMAGE,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: REMOVE_PROFILE_IMAGE,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.profileData = undefined;
	
	var _ProfileActions = __webpack_require__(145);
	
	var initialState = {
	  edit: false, data: {}, schema: null, error: [], success: '',
	  isCreatedWorkPlace: false, isCreateWorkPlaceFailed: false,
	  isFetchedWorkEduData: false, workeduData: {}, isFetchWorkEduDataFailed: false,
	  isDeletedWorkPlace: false, isDeleteWorkPlaceFailed: false,
	  isCreatedCollege: false, isCreateCollegeFailed: false,
	  isDeletedCollege: false, isDeleteCollegeFailed: false,
	  isDeletedAddress: false, isDeleteAddressFailed: false,
	  logData: {}
	};
	
	var ProfileReducer = function ProfileReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _ProfileActions.EDIT_PROFILE:
	      return Object.assign({}, state, { edit: action.status });
	    /*case SAVE_PROFILE: {
	      if(action.data)
	        return Object.assign({}, state, { edit : action.status, data : action.data, success : action.message });
	      else
	        return Object.assign({}, state, { edit : action.status, success : action.message });
	    }*/
	    case _ProfileActions.CANCEL_PROFILE:
	      return Object.assign({}, state, { edit: action.status });
	    /*case SAVED_PROFILE:
	      return Object.assign({}, state, { edit : false, success : action.message });*/
	    case _ProfileActions.GET_PROFILE:
	      return Object.assign({}, state, { data: action.data });
	    case _ProfileActions.UPDATE_SCHEMA:
	      return Object.assign({}, state, { schema: action.schema, data: {} });
	    case _ProfileActions.CLEAR_PROFILE:
	      return Object.assign({}, state, { edit: false, data: {}, schema: null, error: [], success: '', isCreateWorkPlaceFailed: false, isFetchWorkEduDataFailed: false, isDeleteWorkPlaceFailed: false, isCreateCollegeFailed: false, isDeleteCollegeFailed: false, isDeleteAddressFailed: false });
	    case _ProfileActions.CLEAR_PROFILE_RES:
	      return Object.assign({}, state, { success: '' });
	    case _ProfileActions.USER_ADDRESS_SAVED:
	      return Object.assign({}, state, { status: action.status, success: action.message });
	    case _ProfileActions.USER_ADDRESS_NOT_SAVED:
	      return Object.assign({}, state, { status: action.status, error: action.error });
	    case _ProfileActions.CREATED_WORK_PLACE:
	      return Object.assign({}, state, {
	        status: true,
	        isCreatedWorkPlace: true,
	        success: action.success,
	        data: action.data
	      });
	
	    case _ProfileActions.CREATE_WORK_PLACE_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        isCreateWorkPlaceFailed: true,
	        error: action.error
	      });
	
	    case _ProfileActions.CREATED_SCHOOL:
	      return Object.assign({}, state, {
	        status: true,
	        success: action.success
	      });
	
	    case _ProfileActions.CREATE_SCHOOL_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        error: action.error
	      });
	
	    case _ProfileActions.WORK_EDU_DATA_FETCHED:
	      return Object.assign({}, state, {
	        status: true,
	        isFetchedWorkEduData: true,
	        workeduData: action.workeduData
	      });
	
	    case _ProfileActions.WORK_EDU_DATA_FETCH_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        isFetchWorkEduDataFailed: true,
	        error: action.error
	      });
	
	    case _ProfileActions.NO_WORK_EDU_DATA_FOUND:
	      return Object.assign({}, state, {
	        status: false
	      });
	
	    case _ProfileActions.DELETED_WORK_PLACE:
	      return Object.assign({}, state, {
	        status: true,
	        isDeletedWorkPlace: true,
	        isFetchedWorkEduData: false,
	        success: action.success
	      });
	
	    case _ProfileActions.DELETE_WORK_PLACE_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        isDeleteWorkPlaceFailed: true,
	        error: action.error
	      });
	    case _ProfileActions.USER_WEBSITE_SAVED:
	      return Object.assign({}, state, { status: action.status, success: action.message });
	    case _ProfileActions.USER_WEBSITE_NOT_SAVED:
	      return Object.assign({}, state, { status: action.status, error: action.error });
	    case _ProfileActions.USER_SOCIALLINK_SAVED:
	      return Object.assign({}, state, { status: action.status, success: action.message });
	    case _ProfileActions.USER_SOCIALLINK_NOT_SAVED:
	      return Object.assign({}, state, { status: action.status, error: action.error });
	    case _ProfileActions.USER_BASIC_INFO_SAVED:
	      return Object.assign({}, state, { status: action.status, success: action.message });
	    case _ProfileActions.USER_BASIC_INFO_NOT_SAVED:
	      return Object.assign({}, state, { status: action.status, error: action.error });
	
	    case _ProfileActions.CREATED_COLLEGE:
	      return Object.assign({}, state, {
	        status: true,
	        isCreatedCollege: true,
	        success: action.success,
	        data: action.data
	      });
	
	    case _ProfileActions.CREATE_COLLEGE_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        isCreateCollegeFailed: true,
	        error: action.error
	      });
	
	    case _ProfileActions.DELETED_COLLEGE:
	      return Object.assign({}, state, {
	        status: true,
	        isDeletedCollege: true,
	        isFetchedWorkEduData: false,
	        success: action.success
	      });
	
	    case _ProfileActions.DELETE_COLLEGE_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        isDeleteCollegeFailed: true,
	        error: action.error
	      });
	
	    case _ProfileActions.DELETED_SCHOOL:
	      return Object.assign({}, state, {
	        status: true,
	        success: action.success
	      });
	
	    case _ProfileActions.DELETED_SCHOOL_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        error: action.error
	      });
	
	    case _ProfileActions.CREATED_SKILL:
	      return Object.assign({}, state, {
	        status: true,
	        success: action.success
	      });
	
	    case _ProfileActions.CREATE_SKILL_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        error: action.error
	      });
	
	    case _ProfileActions.DELETED_ALLSKILLS:
	      return Object.assign({}, state, {
	        status: true,
	        success: action.success
	      });
	
	    case _ProfileActions.DELETED_ALLSKILLS_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        error: action.error
	      });
	
	    case _ProfileActions.DELETED_ADDRESS:
	      return Object.assign({}, state, {
	        status: true,
	        isDeletedAddress: true,
	        success: action.success
	      });
	
	    case _ProfileActions.DELETED_ADDRESS_FAILED:
	      return Object.assign({}, state, {
	        status: false,
	        isDeleteAddressFailed: true,
	        error: action.error
	      });
	    case _ProfileActions.DELETED_WEBSITE:
	      return Object.assign({}, state, { status: action.status, success: action.success });
	    case _ProfileActions.DELETED_WEBSITE_FAILED:
	      return Object.assign({}, state, { status: action.status, error: action.error });
	    case _ProfileActions.DELETED_SOCIALLINK:
	      return Object.assign({}, state, { status: action.status, success: action.success });
	    case _ProfileActions.DELETED_SOCIALLINK_FAILED:
	      return Object.assign({}, state, { status: action.status, error: action.error });
	    case _ProfileActions.DELETED_BIRTHDAY:
	      return Object.assign({}, state, { status: action.status, success: action.success });
	    case _ProfileActions.DELETED_BIRTHDAY_FAILED:
	      return Object.assign({}, state, { status: action.status, error: action.error });
	    case _ProfileActions.DELETED_GENDER:
	      return Object.assign({}, state, { status: action.status, success: action.success });
	    case _ProfileActions.DELETED_GENDER_FAILED:
	      return Object.assign({}, state, { status: action.status, error: action.error });
	    case _ProfileActions.SAVED_LOCAL_SETTINGS:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: action.message });
	    case _ProfileActions.GET_LOCAL_SETTINGS:
	      return Object.assign({}, state, { data: action.data });
	    case _ProfileActions.UPDATE_LOCAL_SCHEMA:
	      return Object.assign({}, state, { schema: action.schema, data: {} });
	    case _ProfileActions.FETCHED_LOGS:
	      return Object.assign({}, state, { logData: action.data });
	    case _ProfileActions.REMOVE_PROFILE_IMAGE:
	      return Object.assign({}, state, { status: action.status, success: action.success });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var profileData = exports.profileData = function profileData(state) {
	  return state.profile;
	};
	
	// Export Reducer
	exports.default = ProfileReducer;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.questionnaireData = undefined;
	
	var _initialState;
	
	var _QuestionnaireActions = __webpack_require__(149);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var initialState = (_initialState = {
	  edit: false, data: {},
	  dataList: {}, currentPage: 1,
	  count: 0, itemsPerPage: 5,
	  schema: null, error: [], success: '',
	  questionnaireList: {}, currentQuestionnairePage: 1,
	  questionnaireCount: 0, show: '' }, _defineProperty(_initialState, 'edit', ''), _defineProperty(_initialState, 'deleteSuccess', ''), _defineProperty(_initialState, 'gradeData', []), _defineProperty(_initialState, 'questionnaireResultData', {}), _defineProperty(_initialState, 'questionnairesData', {}), _defineProperty(_initialState, 'questionnaireCloneData', {}), _initialState);
	
	var QuestionnaireReducer = function QuestionnaireReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	
	    case _QuestionnaireActions.GET_QUESTIONNAIRE:
	      return Object.assign({}, state, {
	        data: action.data
	      });
	
	    case _QuestionnaireActions.GET_QUESTIONNAIRE_FAILED:
	      return Object.assign({}, state, {
	        data: action.data
	      });
	
	    case _QuestionnaireActions.SAVED_QUESTIONNAIRE:
	      return Object.assign({}, state, {
	        edit: action.status,
	        data: action.data,
	        success: action.message
	      });
	
	    case _QuestionnaireActions.SAVE_QUESTIONNAIRE_FAILED:
	      return Object.assign({}, state, {
	        edit: action.status,
	        // data : action.data, 
	        success: action.message
	      });
	
	    case _QuestionnaireActions.LIST_QUESTIONNAIRE:
	      return Object.assign({}, state, {
	        questionnaireList: action.listData,
	        questionnaireCount: action.count,
	        currentQuestionnairePage: action.currentPage
	      });
	
	    case _QuestionnaireActions.LIST_QUESTIONNAIRE_FAILED:
	      return Object.assign({}, state, {
	        questionnaireList: action.listData,
	        questionnaireCount: action.count,
	        currentQuestionnairePage: action.currentPage
	      });
	
	    case _QuestionnaireActions.CLEAR_QUESTIONNAIRE:
	      return Object.assign({}, state, {
	        success: '',
	        error: [],
	        deleteSuccess: ''
	      });
	
	    case _QuestionnaireActions.QUESTION_SUCCESSFULLY_DELETED:
	      return Object.assign({}, state, {
	        status: action.status,
	        deleteSuccess: action.message,
	        data: action.data,
	        error: []
	      });
	
	    case _QuestionnaireActions.QUESTION_DELETION_FAILED:
	      return Object.assign({}, state, {
	        status: action.status,
	        error: action.error
	      });
	
	    case _QuestionnaireActions.SHOW_MODAL:
	      return Object.assign({}, state, {
	        show: action.data
	      });
	
	    case _QuestionnaireActions.EDIT_MODAL:
	      return Object.assign({}, state, {
	        edit: action.data
	      });
	    case _QuestionnaireActions.SAVE_GRADE_QUESTIONNAIRE:
	      return Object.assign({}, state, {
	        gradeData: action.data,
	        success: action.message
	      });
	    case _QuestionnaireActions.SAVE_GRADE_QUESTIONNAIRE_FAILED:
	      return Object.assign({}, state, {
	        gradeData: action.data,
	        error: action.message,
	        success: action.message
	      });
	    case _QuestionnaireActions.GET_GRADE_QUESTIONNAIRE:
	      return Object.assign({}, state, {
	        gradeData: action.data
	      });
	    case _QuestionnaireActions.CLEAR_QUESTIONNAIRE_GRADES:
	      return Object.assign({}, state, {
	        gradeData: [], success: '', error: []
	      });
	    case _QuestionnaireActions.GET_QUESTIONNAIRE_RESULT:
	      if (action.data) {
	        return Object.assign({}, state, { questionnaireResult: action.data });
	      } else {
	        return state;
	      }
	    case _QuestionnaireActions.GET_CLONE_QEUSTIONNAIRE:
	      if (action.data) {
	        return Object.assign({}, state, { questionnaireCloneData: action.data });
	      } else {
	        return state;
	      }
	    case _QuestionnaireActions.FETCH_CLONE_QEUSTIONNAIRE:
	      if (action.data) {
	        return Object.assign({}, state, { questionnaireCloneData: action.data });
	      } else {
	        return state;
	      }
	
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var questionnaireData = exports.questionnaireData = function questionnaireData(state) {
	  return state.questionnaire;
	};
	
	// Export Reducer
	exports.default = QuestionnaireReducer;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.CLEAR_ACTIVEUSERS_LIST = exports.LIST_ACTIVEUSERS_FAILED = exports.LIST_ACTIVEUSERS = exports.SAVED_LOGIN_ACTIVEUSERS = exports.EXPORT_USER_FAILED = exports.EXPORT_USER = exports.IMPORT_USER_FAILED = exports.IMPORT_USER = exports.LIST_USER_FAILED = exports.CLEAR_USER = exports.UPDATE_SCHEMA = exports.VIEW_USER = exports.LIST_USER = exports.SAVED_USER = exports.CANCEL_USER = exports.GET_USER = exports.SAVE_USER = undefined;
	exports.EditUser = EditUser;
	exports.SaveUser = SaveUser;
	exports.UserStatus = UserStatus;
	exports.UserStore = UserStore;
	exports.ClearUser = ClearUser;
	exports.UserList = UserList;
	exports.UserListStatus = UserListStatus;
	exports.getProfileData = getProfileData;
	exports.getUserProfile = getUserProfile;
	exports.getUserLocaleData = getUserLocaleData;
	exports.getUserImage = getUserImage;
	exports.viewUser = viewUser;
	exports.viewUserStatus = viewUserStatus;
	exports.getUserData = getUserData;
	exports.setUser = setUser;
	exports.CancelUser = CancelUser;
	exports.UpdateUserSchema = UpdateUserSchema;
	exports.getRoles = getRoles;
	exports.GetUpdateRoles = GetUpdateRoles;
	exports.GetCompanyData = GetCompanyData;
	exports.DeleteUser = DeleteUser;
	exports.UserLoadList = UserLoadList;
	exports.exportUsersRequest = exportUsersRequest;
	exports.ExportUsersStatus = ExportUsersStatus;
	exports.importUsersRequest = importUsersRequest;
	exports.importUserStatus = importUserStatus;
	exports.ActivateUser = ActivateUser;
	exports.SetActiveUsers = SetActiveUsers;
	exports.getActiveUsersReportRequest = getActiveUsersReportRequest;
	exports.activeUserListStatus = activeUserListStatus;
	exports.ActiveUsersListRequest = ActiveUsersListRequest;
	exports.ClearActiveUsers = ClearActiveUsers;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _DataObject = __webpack_require__(144);
	
	var _DataObject2 = _interopRequireDefault(_DataObject);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SAVE_USER = exports.SAVE_USER = 'SAVE_USER';
	var GET_USER = exports.GET_USER = 'GET_USER';
	var CANCEL_USER = exports.CANCEL_USER = 'CANCEL_USER';
	var SAVED_USER = exports.SAVED_USER = 'SAVED_USER';
	var LIST_USER = exports.LIST_USER = 'LIST_USER';
	var VIEW_USER = exports.VIEW_USER = "VIEW_USER";
	var UPDATE_SCHEMA = exports.UPDATE_SCHEMA = 'UPDATE_SCHEMA';
	var CLEAR_USER = exports.CLEAR_USER = 'CLEAR_USER';
	var LIST_USER_FAILED = exports.LIST_USER_FAILED = 'LIST_USER_FAILED';
	var IMPORT_USER = exports.IMPORT_USER = 'IMPORT_USER';
	var IMPORT_USER_FAILED = exports.IMPORT_USER_FAILED = 'IMPORT_USER_FAILED';
	var EXPORT_USER = exports.EXPORT_USER = 'EXPORT_USER';
	var EXPORT_USER_FAILED = exports.EXPORT_USER_FAILED = 'EXPORT_USER_FAILED';
	var SAVED_LOGIN_ACTIVEUSERS = exports.SAVED_LOGIN_ACTIVEUSERS = 'SAVED_LOGIN_ACTIVEUSERS';
	var LIST_ACTIVEUSERS = exports.LIST_ACTIVEUSERS = 'LIST_ACTIVEUSERS';
	var LIST_ACTIVEUSERS_FAILED = exports.LIST_ACTIVEUSERS_FAILED = 'LIST_ACTIVEUSERS_FAILED';
	var CLEAR_ACTIVEUSERS_LIST = exports.CLEAR_ACTIVEUSERS_LIST = 'CLEAR_ACTIVEUSERS_LIST';
	
	function EditUser() {
		return {
			type: EDIT_USER,
			status: true
		};
	}
	
	function SaveUser(data) {
		//console.log("data == ",data);
		if (data._id) {
			var id = data._id;
			// delete data["_id"];
			return function (dispatch) {
				return (0, _apiCaller2.default)('update-user/' + id, 'put', {
					userdata: data
				}).then(function (res) {
					return dispatch(UserStatus(res));
				});
			};
		} else {
			return function (dispatch) {
				return (0, _apiCaller2.default)('save-user', 'post', {
					userdata: data
				}).then(function (res) {
					return dispatch(UserStatus(res));
				});
			};
		}
	}
	
	function UserStatus(response) {
		// console.log("response--", response);
		if (response.status) {
			return {
				type: SAVED_USER,
				status: response.status,
				data: response.data,
				message: response.message,
				error: []
			};
		} else if (response.error) {
			console.log("save user error === ", response.error);
			if (response.error.errors) {
				var err = [];
				_.forIn(response.error.errors, function (obj, key) {
					err.push(obj.message);
				});
				return {
					type: SAVED_USER,
					status: response.status,
					data: {},
					message: '',
					error: err
				};
			} else {
				return {
					type: SAVED_USER,
					status: response.status,
					data: {},
					message: '',
					error: [response.error]
				};
			}
		} else {
			return {
				type: SAVED_USER,
				status: response.status,
				data: {},
				message: '',
				error: ['Internal server error']
			};
		}
	}
	
	function UserStore(data) {
		return {
			type: GET_USER,
			data: data
		};
	}
	
	function ClearUser() {
		return {
			type: CLEAR_USER
		};
	}
	
	function UserList(data, currentPage) {
		// console.dir(data);
		var query = '?items=' + data.itemsPerPage + '&page=' + data.currentPage + '&search=' + data.searchKeyword + '&userStatus=' + data.userStatus + '&sort=' + JSON.stringify(data.sortObj);
		//console.log("query---->", query);
		return function (dispatch) {
			return (0, _apiCaller2.default)('list-users' + query, 'get').then(function (res) {
				return dispatch(UserListStatus(res, currentPage));
			});
		};
	}
	function UserListStatus(response, currentPage) {
	
		if (response.status) {
			return {
				status: response.status,
				type: LIST_USER,
				listData: response.data,
				count: response.count,
				currentPage: currentPage,
				message: response.message,
				error: []
			};
		} else if (response.error) {
			console.log(response.error);
			return {
				status: response.status,
				type: LIST_USER_FAILED,
				count: 0,
				currentPage: currentPage,
				error: [response.error]
			};
		} else {
			return {
				status: response.status,
				type: LIST_USER_FAILED,
				count: 0,
				currentPage: currentPage,
				error: ['Internal server error']
			};
		}
	}
	
	function getProfileData(uid) {
		return (0, _apiCaller2.default)('viewUser', 'post', {
			userdata: {
				uid: uid
			}
		});
	}
	
	function getUserProfile(uid) {
		return (0, _apiCaller2.default)('viewuserprofile', 'post', {
			userdata: {
				uid: uid
			}
		});
	}
	
	function getUserLocaleData(uid) {
		return (0, _apiCaller2.default)('getuserlocaledata', 'post', {
			userdata: {
				uid: uid
			}
		});
	}
	
	function getUserImage(uid) {
		return (0, _apiCaller2.default)('getProfileImage', 'post', {
			uid: uid
		});
	}
	
	function viewUser(uid, pageName) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('viewUser', 'post', {
				userdata: {
					uid: uid
				}
			}).then(function (res) {
				return dispatch(viewUserStatus(res, pageName));
			});
		};
	}
	
	function viewUserStatus(response) {
		var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
		if (response.status) {
			if (page != '') {
				_reactRouter.browserHistory.push(page);
			}
			return {
				type: VIEW_USER,
				data: response.data,
				status: response.status,
				error: []
			};
		} else if (response.error) {
			return {
				type: VIEW_USER,
				data: {},
				status: response.status,
				error: [response.error]
			};
		} else {
			return {
				type: VIEW_USER,
				data: {},
				status: response.status,
				error: ['Internal server error']
			};
		}
	}
	
	function getUserData(recordId) {
		return function (dispatch) {
			var query = "id=" + recordId;
			return (0, _apiCaller2.default)('fetch-user?' + query, 'get').then(function (res) {
				return dispatch(setUser(res));
			});
		};
	}
	function setUser(response) {
		var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
		if (response.status) {
			if (page != '') {
				_reactRouter.browserHistory.push(page);
			}
			return {
				type: SAVED_USER,
				status: response.status,
				data: response.data,
				error: [],
				message: ''
			};
		} else if (response.error) {
			return {
				type: SAVED_USER,
				status: response.status,
				data: {},
				error: [response.error],
				message: ''
			};
		} else {
			return {
				type: SAVED_USER,
				status: response.status,
				data: {},
				error: ['Internal server error'],
				message: ''
			};
		}
	}
	
	function CancelUser() {
		return {
			type: CANCEL_USER,
			status: false
		};
	}
	
	function UpdateUserSchema(schema) {
		return {
			type: UPDATE_SCHEMA,
			schema: schema
		};
	}
	
	function getRoles(selectedcid, pageName) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('getroles/' + selectedcid, 'get');
		};
	}
	
	/*export function getRooms (selectedcid, pageName){
		return (dispatch) => {
	  	return callApi('getrooms/' + selectedcid , 'get')
	  };
	}*/
	
	function GetUpdateRoles(userId, pageName) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('getrolesupdate/' + userId, 'get');
		};
	}
	
	function GetCompanyData() {
		return function (dispatch) {
			return (0, _apiCaller2.default)('corporate-ids', 'get');
		};
	}
	
	function DeleteUser(objEntity) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('deleteuser', 'post', {
				userdata: {
					id: objEntity.userId
				}
			}).then(function (res) {
				return dispatch(UserLoadList(res));
			});
		};
	}
	
	function UserLoadList(response) {
		// console.log("response === ",response);
		if (response.status) {
			// browserHistory.push('/admin/users/list');
			return {
				type: CANCEL_USER,
				status: response.status,
				error: [],
				message: response.message
			};
		} else if (response.error) {
			return {
				type: CANCEL_USER,
				status: response.status,
				error: [response.error],
				message: ''
			};
		} else {
			return {
				type: CANCEL_USER,
				status: response.status,
				error: ['Internal server error'],
				message: ''
			};
		}
	}
	
	function exportUsersRequest(objEntity) {
		var query = '?userStatus=' + objEntity.userStatus + '&searchKeyword=' + objEntity.searchKeyword;
		return function (dispatch) {
			return (0, _apiCaller2.default)('export-users' + query, 'get').then(function (res) {
				return dispatch(ExportUsersStatus(res));
			});
		};
	}
	
	function ExportUsersStatus(response) {
		// console.log("response === ",response);
		if (response.status) {
			return {
				type: EXPORT_USER,
				status: response.status,
				fileName: response.data,
				error: [],
				message: response.message
			};
		} else if (response.error) {
			return {
				type: EXPORT_USER_FAILED,
				status: response.status,
				error: [response.error],
				message: ''
			};
		} else {
			return {
				type: EXPORT_USER_FAILED,
				status: response.status,
				error: ['Internal server error'],
				message: ''
			};
		}
	}
	
	function importUsersRequest(objEntity, currentPage) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('import-users', 'post', {
				userdata: objEntity
			}).then(function (res) {
				return dispatch(importUserStatus(res, currentPage));
			});
		};
	}
	
	function importUserStatus(response, currentPage) {
	
		if (response.status == true) {
			if (response.error) {
				return {
					status: response.status,
					type: IMPORT_USER,
					listData: response.data,
					count: response.count,
					currentPage: currentPage,
					message: response.message,
					error: [response.error]
				};
			} else {
				return {
					status: response.status,
					type: IMPORT_USER,
					listData: response.data,
					count: response.count,
					currentPage: currentPage,
					message: response.message,
					error: []
				};
			}
		} else if (response.status == false) {
			return {
				status: response.status,
				type: IMPORT_USER_FAILED,
				count: 0,
				currentPage: currentPage,
				error: [response.error]
			};
		} else {
			return {
				status: response.status,
				type: IMPORT_USER_FAILED,
				count: 0,
				currentPage: currentPage,
				error: ['Internal server error']
			};
		}
	}
	
	function ActivateUser(data) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('activate-user', 'put', {
				userdata: data
			});
		};
	}
	
	function SetActiveUsers(response) {
		if (response.status) {
			return {
				type: SAVED_LOGIN_ACTIVEUSERS,
				status: response.status,
				data: response.data
			};
		} else if (response.error) {
			return {
				type: SAVED_LOGIN_ACTIVEUSERS,
				status: response.status
			};
		} else {
			return {
				type: SAVED_LOGIN_ACTIVEUSERS,
				status: response.status
			};
		}
	}
	
	function getActiveUsersReportRequest(cid, fromdate, todate) {
	
		var query = '?companyId=' + cid + '&fromDate=' + fromdate.toISOString() + '&toDate=' + todate.toISOString() + '';
		return function (dispatch) {
			return (0, _apiCaller2.default)('getactiveusers' + query, 'get').then(function (res) {
				return dispatch(SetActiveUsers(res));
			});
		};
	}
	
	function activeUserListStatus(response, currentPage) {
	
		if (response.status) {
			return {
				status: response.status,
				type: LIST_ACTIVEUSERS,
				listData: response.data,
				count: response.count,
				currentPage: currentPage,
				message: response.message,
				error: []
			};
		} else if (response.error) {
			console.log(response.error);
			return {
				status: response.status,
				type: LIST_ACTIVEUSERS_FAILED,
				count: 0,
				currentPage: currentPage,
				error: [response.error]
			};
		} else {
			return {
				status: response.status,
				type: LIST_ACTIVEUSERS_FAILED,
				count: 0,
				currentPage: currentPage,
				error: ['Internal server error']
			};
		}
	}
	
	function ActiveUsersListRequest(objEntity, currentPage) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('list-activeusers', 'post', {
				usersData: objEntity
			}).then(function (res) {
				return dispatch(activeUserListStatus(res, currentPage));
			});
		};
	}
	
	function ClearActiveUsers() {
		return {
			type: CLEAR_ACTIVEUSERS_LIST
		};
	}

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.FETCH_CLONE_QEUSTIONNAIRE = exports.GET_CLONE_QEUSTIONNAIRE = exports.GET_QUESTIONNAIRE_RESULT = exports.CLEAR_QUESTIONNAIRE_GRADES = exports.GET_GRADE_QUESTIONNAIRE_FAILED = exports.GET_GRADE_QUESTIONNAIRE = exports.SAVE_GRADE_QUESTIONNAIRE_FAILED = exports.SAVE_GRADE_QUESTIONNAIRE = exports.EDIT_MODAL = exports.SHOW_MODAL = exports.QUESTION_DELETION_FAILED = exports.QUESTION_SUCCESSFULLY_DELETED = exports.CLEAR_QUESTIONNAIRE = exports.LIST_QUESTIONNAIRE_FAILED = exports.LIST_QUESTIONNAIRE = exports.SAVE_QUESTIONNAIRE_FAILED = exports.SAVED_QUESTIONNAIRE = exports.GET_QUESTIONNAIRE_FAILED = exports.GET_QUESTIONNAIRE = undefined;
	exports.QuestionnaireStore = QuestionnaireStore;
	exports.SaveQuestionnaireRequest = SaveQuestionnaireRequest;
	exports.SaveQuestionRequest = SaveQuestionRequest;
	exports.updateQuestionnaireRequest = updateQuestionnaireRequest;
	exports.QuestionnaireStatus = QuestionnaireStatus;
	exports.QuestionnaireListRequest = QuestionnaireListRequest;
	exports.QuestionnaireListStatus = QuestionnaireListStatus;
	exports.ClearQuestionnaire = ClearQuestionnaire;
	exports.getQuestionnaireData = getQuestionnaireData;
	exports.setQuestionnaire = setQuestionnaire;
	exports.DeleteQuestionnaire = DeleteQuestionnaire;
	exports.ConfirmDeleteQuestionnaire = ConfirmDeleteQuestionnaire;
	exports.QuestionnaireDeleteStatus = QuestionnaireDeleteStatus;
	exports.removeQuestionRequest = removeQuestionRequest;
	exports.confirmedRemoveQuestionRequest = confirmedRemoveQuestionRequest;
	exports.removeQuestionResponse = removeQuestionResponse;
	exports.showModal = showModal;
	exports.editModal = editModal;
	exports.saveGrades = saveGrades;
	exports.SaveGradeStatus = SaveGradeStatus;
	exports.getQuestionnaireGradesData = getQuestionnaireGradesData;
	exports.GetGradeStatus = GetGradeStatus;
	exports.ClearGradesData = ClearGradesData;
	exports.getQuestionnaireResultData = getQuestionnaireResultData;
	exports.getQuestionnaireResult = getQuestionnaireResult;
	exports.setCloneQuestionnaires = setCloneQuestionnaires;
	exports.getCloneQuestionnaires = getCloneQuestionnaires;
	exports.setQuestionnaireResponse = setQuestionnaireResponse;
	exports.fetchQuestionnaire = fetchQuestionnaire;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var GET_QUESTIONNAIRE = exports.GET_QUESTIONNAIRE = 'GET_QUESTIONNAIRE';
	var GET_QUESTIONNAIRE_FAILED = exports.GET_QUESTIONNAIRE_FAILED = 'GET_QUESTIONNAIRE_FAILED';
	var SAVED_QUESTIONNAIRE = exports.SAVED_QUESTIONNAIRE = 'SAVED_QUESTIONNAIRE';
	var SAVE_QUESTIONNAIRE_FAILED = exports.SAVE_QUESTIONNAIRE_FAILED = 'SAVE_QUESTIONNAIRE_FAILED';
	var LIST_QUESTIONNAIRE = exports.LIST_QUESTIONNAIRE = 'LIST_QUESTIONNAIRE';
	var LIST_QUESTIONNAIRE_FAILED = exports.LIST_QUESTIONNAIRE_FAILED = 'LIST_QUESTIONNAIRE_FAILED';
	var CLEAR_QUESTIONNAIRE = exports.CLEAR_QUESTIONNAIRE = 'CLEAR_QUESTIONNAIRE';
	var QUESTION_SUCCESSFULLY_DELETED = exports.QUESTION_SUCCESSFULLY_DELETED = 'QUESTION_SUCCESSFULLY_DELETED';
	var QUESTION_DELETION_FAILED = exports.QUESTION_DELETION_FAILED = 'QUESTION_DELETION_FAILED';
	var SHOW_MODAL = exports.SHOW_MODAL = 'SHOW_MODAL';
	var EDIT_MODAL = exports.EDIT_MODAL = 'EDIT_MODAL';
	var SAVE_GRADE_QUESTIONNAIRE = exports.SAVE_GRADE_QUESTIONNAIRE = 'SAVE_GRADE_QUESTIONNAIRE';
	var SAVE_GRADE_QUESTIONNAIRE_FAILED = exports.SAVE_GRADE_QUESTIONNAIRE_FAILED = 'SAVE_GRADE_QUESTIONNAIRE_FAILED';
	var GET_GRADE_QUESTIONNAIRE = exports.GET_GRADE_QUESTIONNAIRE = 'GET_GRADE_QUESTIONNAIRE';
	var GET_GRADE_QUESTIONNAIRE_FAILED = exports.GET_GRADE_QUESTIONNAIRE_FAILED = 'GET_GRADE_QUESTIONNAIRE_FAILED';
	var CLEAR_QUESTIONNAIRE_GRADES = exports.CLEAR_QUESTIONNAIRE_GRADES = 'CLEAR_QUESTIONNAIRE_GRADES';
	var GET_QUESTIONNAIRE_RESULT = exports.GET_QUESTIONNAIRE_RESULT = 'GET_QUESTIONNAIRE_RESULT';
	var GET_CLONE_QEUSTIONNAIRE = exports.GET_CLONE_QEUSTIONNAIRE = 'GET_CLONE_QEUSTIONNAIRE';
	var FETCH_CLONE_QEUSTIONNAIRE = exports.FETCH_CLONE_QEUSTIONNAIRE = 'FETCH_CLONE_QEUSTIONNAIRE';
	
	function QuestionnaireStore(data) {
	  return {
	    type: GET_QUESTIONNAIRE,
	    data: data
	  };
	}
	
	function SaveQuestionnaireRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-questionnaire', 'post', {
	      questionnaireData: {
	        data: data
	      }
	    }).then(function (res) {
	      return dispatch(QuestionnaireStatus(res));
	    });
	  };
	}
	//Changes made by prateek for bug#2970
	
	function SaveQuestionRequest(data) {
	  var qid = data.question._id;
	  delete data.question["_id"];
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-question/' + qid, 'put', {
	      questionnaireData: {
	        data: data
	      }
	    }).then(function (res) {
	      return dispatch(QuestionnaireStatus(res));
	    });
	  };
	}
	
	//Chnages made by prateek for bug#2970
	function updateQuestionnaireRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('update-questionnaire/', 'put', {
	      questionnaireData: {
	        data: data
	      }
	    }).then(function (res) {
	      return dispatch(QuestionnaireStatus(res));
	    });
	  };
	}
	
	function QuestionnaireStatus(response) {
	  // console.log("response === ",response);
	  if (response.status) {
	    // browserHistory.push('/admin/questionnaire/list/');
	    return {
	      type: SAVED_QUESTIONNAIRE,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        err.push(obj.message);
	      });
	      return {
	        type: SAVE_QUESTIONNAIRE_FAILED,
	        status: response.status,
	        data: {},
	        error: err,
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVE_QUESTIONNAIRE_FAILED,
	        status: response.status,
	        // data: {},
	        error: [response.error],
	        openFrom: response.openFrom,
	        closeFrom: response.closeFrom,
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVE_QUESTIONNAIRE_FAILED,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function QuestionnaireListRequest(data, currentPage) {
	  var sortStr = JSON.stringify(data.sortObj);
	  var query = 'items=' + data.itemsPerPage + '&page=' + data.currentPage + '&sort=' + sortStr;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-questionnaire?' + query, 'get').then(function (res) {
	      return dispatch(QuestionnaireListStatus(res, currentPage));
	    });
	  };
	}
	
	function QuestionnaireListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_QUESTIONNAIRE,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_QUESTIONNAIRE_FAILED,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_QUESTIONNAIRE_FAILED,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function ClearQuestionnaire() {
	  return {
	    type: CLEAR_QUESTIONNAIRE
	  };
	}
	
	function getQuestionnaireData(objEntity, pageName) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-questionnaire/' + objEntity.questionnaireId, 'get').then(function (res) {
	      return dispatch(setQuestionnaire(res, pageName));
	    });
	  };
	}
	
	function setQuestionnaire(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  // console.log(boolStatus);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: GET_QUESTIONNAIRE,
	      status: response.status,
	      data: response.data,
	      message: '',
	      error: []
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        //console.log(obj.message);
	        err.push(obj.message);
	      });
	      return {
	        type: GET_QUESTIONNAIRE_FAILED,
	        status: response.status,
	        data: {},
	        message: '',
	        error: err
	      };
	    } else {
	      console.log("error === ", response.error);
	      return {
	        type: GET_QUESTIONNAIRE_FAILED,
	        status: response.status,
	        data: {},
	        message: '',
	        error: [response.error]
	      };
	    }
	  } else {
	    console.log("internal server error");
	    return {
	      type: GET_QUESTIONNAIRE_FAILED,
	      status: response.status,
	      data: {},
	      message: '',
	      error: ['Internal server error']
	    };
	  }
	}
	
	function DeleteQuestionnaire(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-questionnaire/' + objEntity.questionnaireId, 'delete').then(function (res) {
	      return dispatch(QuestionnaireDeleteStatus(res, currentPage));
	    });
	  };
	}
	
	function ConfirmDeleteQuestionnaire(objEntity, currentPage) {
	  // console.log('objEntity', objEntity);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('confirm-delete-questionnaire/' + objEntity.questionnaireId + '/' + objEntity.dependentModule, 'delete').then(function (res) {
	      return dispatch(QuestionnaireDeleteStatus(res, currentPage));
	    });
	  };
	}
	
	function QuestionnaireDeleteStatus(response) {
	  //console.log("response === ",response);
	  if (response.status) {
	    // browserHistory.push('/admin/questionnaire/list');
	    return {
	      type: QUESTION_SUCCESSFULLY_DELETED,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: QUESTION_DELETION_FAILED,
	      status: false,
	      error: [response.error],
	      httpstatuscode: response.httpstatuscode,
	      dependentModule: response.dependency,
	      message: ''
	    };
	  } else {
	    return {
	      type: QUESTION_DELETION_FAILED,
	      status: false,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function removeQuestionRequest(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-question/' + objEntity.questionnaireId + '/' + objEntity.questionId, 'delete').then(function (res) {
	      return dispatch(removeQuestionResponse(res));
	    });
	  };
	}
	
	//Chnaged by prateek for delete questions bug#2924
	function confirmedRemoveQuestionRequest(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('confirm-delete-question/' + objEntity.questionnaireId + '/' + objEntity.questionId, 'delete').then(function (res) {
	      return dispatch(removeQuestionResponse(res));
	    });
	  };
	}
	
	function removeQuestionResponse(response) {
	  //console.log("response === ",response);
	  if (response.status) {
	    return {
	      type: QUESTION_SUCCESSFULLY_DELETED,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: QUESTION_DELETION_FAILED,
	      status: false,
	      error: [response.error],
	      httpStatusCode: response.httpStatusCode,
	      message: ''
	    };
	  } else {
	    return {
	      type: QUESTION_DELETION_FAILED,
	      status: false,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function showModal(data) {
	  return {
	    type: SHOW_MODAL,
	    data: data
	  };
	}
	
	function editModal(data) {
	  return {
	    type: EDIT_MODAL,
	    data: data
	  };
	}
	
	function saveGrades(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('save-grades-questionnaire', 'post', {
	      data: data }).then(function (res) {
	      return dispatch(SaveGradeStatus(res));
	    });
	  };
	}
	
	function SaveGradeStatus(response) {
	  if (response.status) {
	    return {
	      type: SAVE_GRADE_QUESTIONNAIRE,
	      data: response.data,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: SAVE_GRADE_QUESTIONNAIRE_FAILED,
	      data: {},
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: SAVE_GRADE_QUESTIONNAIRE_FAILED,
	      data: {},
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function getQuestionnaireGradesData() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('get-questionnaire-grades', 'get').then(function (res) {
	      return dispatch(GetGradeStatus(res));
	    });
	  };
	}
	
	function GetGradeStatus(response) {
	  if (response.status) {
	    return {
	      type: GET_GRADE_QUESTIONNAIRE,
	      data: response.data,
	      status: response.status,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: GET_GRADE_QUESTIONNAIRE_FAILED,
	      data: {},
	      status: response.status,
	      error: response.error
	    };
	  } else {
	    return {
	      type: GET_GRADE_QUESTIONNAIRE_FAILED,
	      data: {},
	      status: response.status,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function ClearGradesData() {
	  return {
	    type: CLEAR_QUESTIONNAIRE_GRADES
	  };
	}
	
	function getQuestionnaireResultData(response) {
	  if (response.status) {
	    return {
	      type: GET_QUESTIONNAIRE_RESULT,
	      data: { questionnaireResultData: response.data, submittedFlag: response.submittedFlag },
	      status: response.status,
	      flag: response.changeFlag,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: GET_QUESTIONNAIRE_RESULT,
	      data: {},
	      status: response.status,
	      error: response.error
	    };
	  } else {
	    return {
	      type: GET_QUESTIONNAIRE_RESULT,
	      data: {},
	      status: response.status,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getQuestionnaireResult(questionnaireId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('get-questionnaire-result/' + questionnaireId, 'get').then(function (res) {
	      return dispatch(getQuestionnaireResultData(res));
	    });
	  };
	}
	function setCloneQuestionnaires(response) {
	  if (response.status) {
	    return {
	      type: GET_CLONE_QEUSTIONNAIRE,
	      data: response.data,
	      status: response.status,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: GET_CLONE_QEUSTIONNAIRE,
	      data: {},
	      status: response.status,
	      error: response.error
	    };
	  } else {
	    return {
	      type: GET_CLONE_QEUSTIONNAIRE,
	      data: {},
	      status: response.status,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getCloneQuestionnaires() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('questionnaire-list/', 'get').then(function (res) {
	      return dispatch(setCloneQuestionnaires(res));
	    });
	  };
	}
	
	function setQuestionnaireResponse(response) {
	  if (response.status) {
	    return {
	      type: FETCH_CLONE_QEUSTIONNAIRE,
	      data: response.data,
	      status: response.status,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: FETCH_CLONE_QEUSTIONNAIRE,
	      data: {},
	      status: response.status,
	      error: response.error
	    };
	  } else {
	    return {
	      type: FETCH_CLONE_QEUSTIONNAIRE,
	      data: {},
	      status: response.status,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function fetchQuestionnaire(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-clone-questionnaire/' + objEntity, 'get').then(function (res) {
	      return dispatch(setQuestionnaireResponse(res));
	    });
	  };
	}

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.STUDENT_COURSES_CERTIFICATE_ELIGIBLE = exports.STUDENT_ASSIGNMENT_LIST = exports.LIST_STUDENT_VIEWED_TOPICS = exports.SAVED_TOPIC_REPORT = exports.CLEAR_TOTAL_SCHEDULES_LIST = exports.LIST_TOTAL_SCHEDULES = exports.CLEAR_ATTENDANCE_LIST = exports.LIST_STUDENT_ATTENDANCE = exports.SAVED_STUDENT_ATTENDANCE = exports.GET_REPORTS = exports.STUDENT_COURSE_LIST = undefined;
	exports.StudentCourseListStatus = StudentCourseListStatus;
	exports.studentCourseList = studentCourseList;
	exports.ReportsStore = ReportsStore;
	exports.setStudentAttendance = setStudentAttendance;
	exports.getStudentAttendanceRequest = getStudentAttendanceRequest;
	exports.getAttendanceListRequest = getAttendanceListRequest;
	exports.getStudentAttendanceList = getStudentAttendanceList;
	exports.clearAttendanceList = clearAttendanceList;
	exports.getTotalSchedulesRequest = getTotalSchedulesRequest;
	exports.getTotalSchedulesList = getTotalSchedulesList;
	exports.clearTotalSchedulesList = clearTotalSchedulesList;
	exports.setTopicsReport = setTopicsReport;
	exports.getTopicsReportRequest = getTopicsReportRequest;
	exports.setStudentTopicsList = setStudentTopicsList;
	exports.getStudentTopicsList = getStudentTopicsList;
	exports.studentAssignmentList = studentAssignmentList;
	exports.StudentAssignmentListStatus = StudentAssignmentListStatus;
	exports.getStudentAssignmentResultData = getStudentAssignmentResultData;
	exports.setCertificateEligibility = setCertificateEligibility;
	exports.checkCertificateEligibility = checkCertificateEligibility;
	exports.fetchCertificate = fetchCertificate;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var STUDENT_COURSE_LIST = exports.STUDENT_COURSE_LIST = 'STUDENT_COURSE_LIST';
	var GET_REPORTS = exports.GET_REPORTS = 'GET_REPORTS';
	// export const SAVED_STUDENT_ASSIGNMENTS_REPORT = 'SAVED_STUDENT_ASSIGNMENTS_REPORT';
	var SAVED_STUDENT_ATTENDANCE = exports.SAVED_STUDENT_ATTENDANCE = 'SAVED_STUDENT_ATTENDANCE';
	var LIST_STUDENT_ATTENDANCE = exports.LIST_STUDENT_ATTENDANCE = 'LIST_STUDENT_ATTENDANCE';
	var CLEAR_ATTENDANCE_LIST = exports.CLEAR_ATTENDANCE_LIST = 'CLEAR_ATTENDANCE_LIST';
	var LIST_TOTAL_SCHEDULES = exports.LIST_TOTAL_SCHEDULES = 'LIST_TOTAL_SCHEDULES';
	var CLEAR_TOTAL_SCHEDULES_LIST = exports.CLEAR_TOTAL_SCHEDULES_LIST = 'CLEAR_TOTAL_SCHEDULES_LIST';
	var SAVED_TOPIC_REPORT = exports.SAVED_TOPIC_REPORT = 'SAVED_TOPIC_REPORT';
	var LIST_STUDENT_VIEWED_TOPICS = exports.LIST_STUDENT_VIEWED_TOPICS = 'LIST_STUDENT_VIEWED_TOPICS';
	var STUDENT_ASSIGNMENT_LIST = exports.STUDENT_ASSIGNMENT_LIST = 'STUDENT_ASSIGNMENT_LIST';
	var STUDENT_COURSES_CERTIFICATE_ELIGIBLE = exports.STUDENT_COURSES_CERTIFICATE_ELIGIBLE = 'STUDENT_COURSES_CERTIFICATE_ELIGIBLE';
	
	function StudentCourseListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      type: STUDENT_COURSE_LIST,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: STUDENT_COURSE_LIST,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: STUDENT_COURSE_LIST,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function studentCourseList(data, currentPage) {
	
	  var query = 'items=' + data.itemsPerPage + '&page=' + data.currentPage;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('student-course-list?' + query, 'get').then(function (res) {
	      return dispatch(StudentCourseListStatus(res, currentPage));
	    });
	  };
	}
	
	function ReportsStore(data) {
	  return {
	    type: GET_REPORTS,
	    data: data
	  };
	}
	
	// export function getStudentAssignmentDataRequest (objEntity) {
	//   return (dispatch) => {
	//     return callApi('fetch-student-assignments/' + objEntity.roomId , 'get').then(res => dispatch(setStudentAssignmentReport(res)));
	//   };
	// }
	
	// export function setStudentAssignmentReport(response) {
	//   if (response.status) {
	//     return {
	//       type: SAVED_STUDENT_ASSIGNMENTS_REPORT,
	//       status: response.status,
	//       data: response.data,
	//     };
	//   } else if (response.error) {
	//     return {
	//       type: SAVED_STUDENT_ASSIGNMENTS_REPORT,
	//       status: response.status,
	//     };
	//   } else {
	//     return {
	//       type: SAVED_STUDENT_ASSIGNMENTS_REPORT,
	//       status: response.status,
	//     };
	//   }
	// }
	
	function setStudentAttendance(response) {
	  if (response.status) {
	    return {
	      type: SAVED_STUDENT_ATTENDANCE,
	      status: response.status,
	      data: response.data
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_STUDENT_ATTENDANCE,
	      status: response.status
	    };
	  } else {
	    return {
	      type: SAVED_STUDENT_ATTENDANCE,
	      status: response.status
	    };
	  }
	}
	
	function getStudentAttendanceRequest(objEntity) {
	  var query = '?rId=' + objEntity.courseId + '&uId=' + objEntity.userId + '&fromDate=' + moment(objEntity.fromDate).utc().format("x") + '&toDate=' + moment(objEntity.toDate).utc().format("x");
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-individual-attendance' + query, 'get').then(function (res) {
	      return dispatch(setStudentAttendance(res));
	    });
	  };
	}
	function getAttendanceListRequest(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_STUDENT_ATTENDANCE,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_STUDENT_ATTENDANCE,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_STUDENT_ATTENDANCE,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getStudentAttendanceList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-individual-attendance', 'post', {
	      attendanceData: objEntity
	    }).then(function (res) {
	      return dispatch(getAttendanceListRequest(res, currentPage));
	    });
	  };
	}
	
	function clearAttendanceList() {
	  return {
	    type: CLEAR_ATTENDANCE_LIST
	  };
	}
	
	function getTotalSchedulesRequest(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_TOTAL_SCHEDULES,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_TOTAL_SCHEDULES,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_TOTAL_SCHEDULES,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getTotalSchedulesList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-total-schedules', 'post', {
	      scheduleData: objEntity
	    }).then(function (res) {
	      return dispatch(getTotalSchedulesRequest(res, currentPage));
	    });
	  };
	}
	
	function clearTotalSchedulesList() {
	  return {
	    type: CLEAR_TOTAL_SCHEDULES_LIST
	  };
	}
	
	function setTopicsReport(response, currentPage) {
	  if (response.status) {
	    return {
	      type: SAVED_TOPIC_REPORT,
	      status: response.status,
	      data: response.data
	    };
	  } else if (response.error) {
	    return {
	      type: SAVED_TOPIC_REPORT,
	      status: response.status
	    };
	  } else {
	    return {
	      type: SAVED_TOPIC_REPORT,
	      status: response.status
	    };
	  }
	}
	
	function getTopicsReportRequest(objEntity) {
	  var query = '?rId=' + objEntity.courseId;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-student-topics' + query, 'get').then(function (res) {
	      return dispatch(setTopicsReport(res));
	    });
	  };
	}
	
	function setStudentTopicsList(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_STUDENT_VIEWED_TOPICS,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_STUDENT_VIEWED_TOPICS,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_STUDENT_VIEWED_TOPICS,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getStudentTopicsList(objEntity, currentPage) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-course-topics', 'post', {
	      topicsData: objEntity
	    }).then(function (res) {
	      return dispatch(setStudentTopicsList(res, currentPage));
	    });
	  };
	}
	
	function studentAssignmentList(data, currentPage) {
	
	  var query = 'items=' + data.itemsPerPage + '&page=' + data.currentPage + "&roomId=" + data.roomId;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('student-assignment-list?' + query, 'get').then(function (res) {
	      return dispatch(StudentAssignmentListStatus(res, currentPage));
	    });
	  };
	}
	
	function StudentAssignmentListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      type: STUDENT_ASSIGNMENT_LIST,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: STUDENT_ASSIGNMENT_LIST,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: STUDENT_ASSIGNMENT_LIST,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getStudentAssignmentResultData(data) {
	  var query = 'assignmentId=' + data;
	
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('student-assignment-result-data?' + query, 'get');
	  };
	}
	
	function setCertificateEligibility(roomIds) {
	  return {
	    type: STUDENT_COURSES_CERTIFICATE_ELIGIBLE,
	    roomIds: roomIds
	  };
	}
	
	function checkCertificateEligibility() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('check-certificate-eligibility', 'get').then(function (res) {
	      var result = [];
	      res.roomIds.map(function (id) {
	        return result.push(id.roomId);
	      });
	
	      dispatch(setCertificateEligibility(result));
	    });
	  };
	}
	
	function fetchCertificate(roomId) {
	  var query = 'rId=' + roomId;
	
	  return function (dispatch) {
	    (0, _apiCaller2.default)('fetch-certificate?' + query, 'get').then(function (res) {
	      dispatch(function () {
	        var blob = new Blob([new Uint8Array(res.body.data)], { type: 'application/pdf' });
	        var link = document.createElement('a');
	        link.href = window.URL.createObjectURL(blob);
	        link.download = 'certificate.pdf';
	        link.click();
	      });
	    });
	  };
	}

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.reportsData = undefined;
	
	var _ReportsActions = __webpack_require__(150);
	
	//SAVED_STUDENT_ASSIGNMENTS_REPORT
	
	var initialState = {
	  dataList: {}, currentPage: 1,
	  count: 0, itemsPerPage: 5,
	  data: {}, edit: false,
	  deleteSuccess: '',
	  // assignmentsData: {},
	  attendanceData: {},
	  attendanceList: {}, visitCount: 0, currentvisitPage: 1,
	  schedulesList: {}, schedulesCount: 0, currentSchedulePage: 1,
	  topicsReportData: {}, assignmentListData: {}
	};
	
	var ReporstReducer = function ReporstReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _ReportsActions.STUDENT_COURSE_LIST:
	      return Object.assign({}, state, {
	        dataList: action.listData, count: action.count, currentPage: action.currentPage
	      });
	    case _ReportsActions.GET_REPORTS:
	      return Object.assign({}, state, { data: action.data });
	    // case SAVED_STUDENT_ASSIGNMENTS_REPORT:
	    //   return Object.assign({}, state, { 
	    //   assignmentsData : action.data
	    // });
	    case _ReportsActions.SAVED_STUDENT_ATTENDANCE:
	      return Object.assign({}, state, {
	        attendanceData: action.data
	      });
	    case _ReportsActions.LIST_STUDENT_ATTENDANCE:
	      return Object.assign({}, state, {
	        attendanceList: action.listData, visitCount: action.count, currentvisitPage: action.currentPage
	      });
	    case _ReportsActions.CLEAR_ATTENDANCE_LIST:
	      return Object.assign({}, state, {
	        attendanceList: {}, visitCount: 0, currentvisitPage: 1
	      });
	    case _ReportsActions.LIST_TOTAL_SCHEDULES:
	      return Object.assign({}, state, {
	        schedulesList: action.listData, schedulesCount: action.count, currentSchedulePage: action.currentPage
	      });
	    case _ReportsActions.CLEAR_TOTAL_SCHEDULES_LIST:
	      return Object.assign({}, state, {
	        schedulesList: {}, schedulesCount: 0, currentSchedulePage: 1
	      });
	    case _ReportsActions.SAVED_TOPIC_REPORT:
	      return Object.assign({}, state, {
	        topicsReportData: action.data
	      });
	    case _ReportsActions.LIST_STUDENT_VIEWED_TOPICS:
	      return Object.assign({}, state, {
	        topicsList: action.listData, topicsCount: action.count, currentTopicsPage: action.currentPage
	      });
	    case _ReportsActions.STUDENT_ASSIGNMENT_LIST:
	      return Object.assign({}, state, {
	        assignmentListData: action.listData, count: action.count, currentPage: action.currentPage
	      });
	    case _ReportsActions.STUDENT_COURSES_CERTIFICATE_ELIGIBLE:
	      return Object.assign({}, state, {
	        eligibleRoomIds: action.roomIds
	      });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var reportsData = exports.reportsData = function reportsData(state) {
	  return state.reports;
	};
	
	// Export Reducer
	exports.default = ReporstReducer;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SAVE_GROUP_NAME_FAILED = exports.ADD_PARTICIPANTS_IN_GROUP_FAILED = exports.ADD_PARTICIPANTS_IN_GROUP = exports.SAVE_GROUP_NAME = exports.DELETE_STUDENT = exports.DELETE_GROUP = exports.CLEAR_GROUP = exports.FETCH_GROUP_DATA = exports.LIST_GROUP_FAILED = exports.LIST_GROUP = exports.SAVE_GROUP_FAILED = exports.SAVED_GROUP = undefined;
	exports.SaveGroupRequest = SaveGroupRequest;
	exports.SaveGroupRequestStatus = SaveGroupRequestStatus;
	exports.searchStudents = searchStudents;
	exports.listStudentsGroup = listStudentsGroup;
	exports.listStudentsGroupListStatus = listStudentsGroupListStatus;
	exports.getGroupStudents = getGroupStudents;
	exports.fetchGroupStudentsResponse = fetchGroupStudentsResponse;
	exports.clearParticipantsGroup = clearParticipantsGroup;
	exports.deleteStudentGroup = deleteStudentGroup;
	exports.deleteGroupStudentsResponse = deleteGroupStudentsResponse;
	exports.deleteStudentInGroup = deleteStudentInGroup;
	exports.deleteStudentsResponse = deleteStudentsResponse;
	exports.saveGroupName = saveGroupName;
	exports.saveGroupNameResponse = saveGroupNameResponse;
	exports.SaveAddedParticipants = SaveAddedParticipants;
	exports.saveAddedParticipantsResponse = saveAddedParticipantsResponse;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SAVED_GROUP = exports.SAVED_GROUP = 'SAVED_GROUP';
	var SAVE_GROUP_FAILED = exports.SAVE_GROUP_FAILED = 'SAVE_GROUP_FAILED';
	var LIST_GROUP = exports.LIST_GROUP = 'LIST_GROUP';
	var LIST_GROUP_FAILED = exports.LIST_GROUP_FAILED = 'LIST_GROUP_FAILED';
	var FETCH_GROUP_DATA = exports.FETCH_GROUP_DATA = 'FETCH_GROUP_DATA';
	var CLEAR_GROUP = exports.CLEAR_GROUP = 'CLEAR_GROUP';
	var DELETE_GROUP = exports.DELETE_GROUP = 'DELETE_GROUP';
	var DELETE_STUDENT = exports.DELETE_STUDENT = 'DELETE_STUDENT';
	var SAVE_GROUP_NAME = exports.SAVE_GROUP_NAME = 'SAVE_GROUP_NAME';
	var ADD_PARTICIPANTS_IN_GROUP = exports.ADD_PARTICIPANTS_IN_GROUP = 'ADD_PARTICIPANTS_IN_GROUP';
	var ADD_PARTICIPANTS_IN_GROUP_FAILED = exports.ADD_PARTICIPANTS_IN_GROUP_FAILED = 'ADD_PARTICIPANTS_IN_GROUP_FAILED';
	var SAVE_GROUP_NAME_FAILED = exports.SAVE_GROUP_NAME_FAILED = 'SAVE_GROUP_NAME_FAILED';
	
	function SaveGroupRequest(data) {
	  //console.log("data at action== ",data);  
	  if (data._id) {
	    var id = data._id;
	    delete data["_id"];
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('studentsGroup/' + id, 'put', {
	        data: data
	      }).then(function (res) {
	        return dispatch(SaveGroupRequestStatus(res));
	      });
	    };
	  } else {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('studentsGroup', 'post', {
	        data: data
	      }).then(function (res) {
	        return dispatch(SaveGroupRequestStatus(res));
	      });
	    };
	  }
	}
	
	function SaveGroupRequestStatus(response) {
	  //console.log("response-------", response);
	  if (response.status) {
	    // //console.log("saved");
	    // browserHistory.push('/admin/category/view/'+response.data._id);
	    return {
	      type: SAVED_GROUP,
	      status: response.status,
	      data: response.data,
	      message: response.message,
	      count: response.count,
	      error: []
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVE_GROUP_FAILED,
	        status: response.status,
	        data: {},
	        message: '',
	        error: response.error
	      };
	    } else {
	      ////console.log("error === ",response.error);
	      return {
	        type: SAVE_GROUP_FAILED,
	        status: response.status,
	        data: {},
	        message: '',
	        error: response.error
	      };
	    }
	  } else {
	    // //console.log("internal server error");
	    return {
	      type: SAVE_GROUP_FAILED,
	      status: response.status,
	      data: {},
	      message: '',
	      error: ['Internal server error']
	    };
	  }
	}
	
	function searchStudents(data) {
	  //console.log("data == ",data);
	  var query = 'input=' + data.input;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('searchgroupstudents?' + query, 'get');
	  };
	}
	
	function listStudentsGroup(data, currentPage) {
	  return function (dispatch) {
	    var query = 'itemsPerPage=' + data.itemsPerPage + '&currentPage=' + data.currentPage;
	    if (data && data.searchKeyword) {
	      query += '&search=' + data.searchKeyword;
	    }
	    return (0, _apiCaller2.default)('listGroupStudents?' + query, 'get').then(function (res) {
	      return dispatch(listStudentsGroupListStatus(res, currentPage));
	    });
	  };
	}
	
	function listStudentsGroupListStatus(response, currentPage) {
	  // console.log('listStudentsGroupListStatus', response);
	  if (response.status) {
	    return {
	      type: LIST_GROUP,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_GROUP_FAILED,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_GROUP_FAILED,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getGroupStudents(data, currentPage) {
	  console.log('data', data);
	  var query = 'id=' + data.id;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetchGroupStudents?' + query, 'get').then(function (res) {
	      return dispatch(fetchGroupStudentsResponse(res, currentPage));
	    });
	  };
	}
	
	function fetchGroupStudentsResponse(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  console.log("response in group === ", response);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: FETCH_GROUP_DATA,
	      status: response.status,
	      listData: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: FETCH_GROUP_DATA,
	      status: response.status,
	      listData: {},
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: FETCH_GROUP_DATA,
	      status: response.status,
	      listData: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function clearParticipantsGroup() {
	  return {
	    type: CLEAR_GROUP
	  };
	}
	
	function deleteStudentGroup(data, currentPage) {
	  //console.log("data == ",data);
	  var id = data.id;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('deleteGroupStudents/' + id, 'delete').then(function (res) {
	      return dispatch(deleteGroupStudentsResponse(res, currentPage));
	    });
	  };
	}
	
	function deleteGroupStudentsResponse(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  //console.log("response in group === ", response);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: DELETE_GROUP,
	      status: response.status,
	      error: [],
	      message: response.message,
	      listData: {}
	    };
	  } else if (response.error) {
	    return {
	      type: DELETE_GROUP,
	      status: response.status,
	      listData: {},
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: DELETE_GROUP,
	      status: response.status,
	      listData: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function deleteStudentInGroup(data, currentPage) {
	  //console.log("data == ",data);
	  return function (dispatch) {
	    var query = "sid=" + data.sid + "&id=" + data.id;
	    return (0, _apiCaller2.default)('deleteStudent?' + query, 'delete').then(function (res) {
	      return dispatch(deleteStudentsResponse(res, currentPage));
	    });
	  };
	}
	
	function deleteStudentsResponse(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  //console.log("response in group === ", response);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: DELETE_STUDENT,
	      listData: response.data,
	      status: response.status,
	      error: [],
	      message: response.message
	
	    };
	  } else if (response.error) {
	    return {
	      type: DELETE_STUDENT,
	      status: response.status,
	      listData: {},
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: DELETE_STUDENT,
	      status: response.status,
	      listData: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function saveGroupName(data, currentPage) {
	  //console.log("data == ",data);
	  //var query = 'groupName=' + data.groupName + '&id=' + data.id;
	  var id = data.id;
	  delete data["id"];
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('updategroupname/' + id, 'put', {
	      data: data
	    }).then(function (res) {
	      return dispatch(saveGroupNameResponse(res, currentPage));
	    });
	  };
	}
	
	function saveGroupNameResponse(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  //console.log("response in group === ", response);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: SAVE_GROUP_NAME,
	      listData: response.data,
	      status: response.status,
	      error: [],
	      message: response.message
	
	    };
	  } else if (response.error) {
	    return {
	      type: SAVE_GROUP_NAME_FAILED,
	      status: response.status,
	      listData: {},
	      error: response.error,
	      message: ''
	    };
	  } else {
	    return {
	      type: SAVE_GROUP_NAME_FAILED,
	      status: response.status,
	      listData: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function SaveAddedParticipants(data, currentPage) {
	  //console.log("action data == ",data);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('saveaddedparticipants', 'post', {
	      data: data
	    }).then(function (res) {
	      return dispatch(saveAddedParticipantsResponse(res, currentPage));
	    });
	  };
	}
	
	function saveAddedParticipantsResponse(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  //console.log("response in group === ", response);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: ADD_PARTICIPANTS_IN_GROUP,
	      listData: response.data,
	      status: response.status,
	      error: [],
	      message: response.message
	
	    };
	  } else if (response.error) {
	    return {
	      type: ADD_PARTICIPANTS_IN_GROUP_FAILED,
	      status: response.status,
	      listData: {},
	      error: response.error,
	      message: ''
	    };
	  } else {
	    return {
	      type: ADD_PARTICIPANTS_IN_GROUP_FAILED,
	      status: response.status,
	      listData: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.userData = undefined;
	
	var _UsersActions = __webpack_require__(148);
	
	var initialState = {
	  edit: false, data: {}, dataList: {}, currentPage: 1, count: 0, itemsPerPage: 5, schema: null, success: '', deleteSuccess: '', activeusersData: {}
	};
	
	var UsersReducer = function UsersReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _UsersActions.EDIT_USER:
	      return Object.assign({}, state, { edit: action.status, data: action.data });
	    case _UsersActions.SAVE_USER:
	      return Object.assign({}, state, { edit: action.status, data: action.data });
	    case _UsersActions.CANCEL_USER:
	      return Object.assign({}, state, { edit: action.status, deleteSuccess: action.message });
	    case _UsersActions.SAVED_USER:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: action.message });
	    case _UsersActions.GET_USER:
	      return Object.assign({}, state, { data: action.data });
	    case _UsersActions.LIST_USER:
	      return Object.assign({}, state, { dataList: action.listData, count: action.count, currentPage: action.currentPage });
	    case _UsersActions.VIEW_USER:
	      return Object.assign({}, state, { data: action.data });
	    case _UsersActions.UPDATE_SCHEMA:
	      return Object.assign({}, state, { schema: action.schema, data: {} });
	    case _UsersActions.CLEAR_USER:
	      return Object.assign({}, state, { success: '', deleteSuccess: '' });
	    case _UsersActions.IMPORT_USER:
	      return Object.assign({}, state, { dataList: action.listData, count: action.count, currentPage: action.currentPage });
	    case _UsersActions.SAVED_LOGIN_ACTIVEUSERS:
	      return Object.assign({}, state, { activeusersData: action.data });
	    case _UsersActions.LIST_ACTIVEUSERS:
	      return Object.assign({}, state, { dataList: action.listData, count: action.count, currentPage: action.currentPage });
	    case _UsersActions.CLEAR_ACTIVEUSERS_LIST:
	      return Object.assign({}, state, { dataList: {}, count: 0, currentPage: 1 });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var userData = exports.userData = function userData(state) {
	  return state.users;
	};
	
	// Export Reducer
	exports.default = UsersReducer;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.workDashboardReload = undefined;
	
	var _WorkDashboardReloadActions = __webpack_require__(91);
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var initialState = _defineProperty({
	  topicList: false, pollList: true, assignmentList: false, topicContent: false,
	  pdfView: false, conductQuestion: false }, 'assignmentList', true);
	
	var WorkDashboardReloadReducer = function WorkDashboardReloadReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _WorkDashboardReloadActions.RELOAD_TOPIC_LIST:
	      return Object.assign({}, state, { topicList: !state.topicList });
	    case _WorkDashboardReloadActions.RELOAD_TOPIC_CONTENT:
	      return Object.assign({}, state, { topicContent: !state.topicContent });
	    case _WorkDashboardReloadActions.RELOAD_UPLOAD_FILES:
	      return Object.assign({}, state, { topicContent: !state.topicContent });
	    case _WorkDashboardReloadActions.RELOAD_TOPIC_QUESTIONNAIRES:
	      return Object.assign({}, state, { topicContent: !state.topicContent });
	    case _WorkDashboardReloadActions.RELOAD_TOPIC_PDFVIEW:
	      return Object.assign({}, state, { pdfView: !state.pdfView });
	    case _WorkDashboardReloadActions.RELOAD_REMOVED_QUESTIONNAIRES:
	      return Object.assign({}, state, { conductQuestion: !state.conductQuestion });
	    case _WorkDashboardReloadActions.RELOAD_CONDUCT_QUESTION:
	      return Object.assign({}, state, { conductQuestion: !state.conductQuestion });
	    case _WorkDashboardReloadActions.RELOAD_POLLS_LIST:
	      return Object.assign({}, state, { pollList: !state.pollList });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var workDashboardReload = exports.workDashboardReload = function workDashboardReload(state) {
	  return state.workDashboardReload;
	};
	
	// Export Reducer
	exports.default = WorkDashboardReloadReducer;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CANCEL_CATEGORY = exports.CLEAR_CAT = exports.LIST_CATEGORY_FAILED = exports.LIST_CATEGORY = exports.SAVE_CATEGORY_FAILED = exports.SAVED_CATEGORY = exports.GET_CATEGORY_FAILED = exports.GET_CATEGORY = exports.UPDATE_SCHEMA = undefined;
	exports.SaveCategoryRequest = SaveCategoryRequest;
	exports.CategoryStatus = CategoryStatus;
	exports.CategoryListRequest = CategoryListRequest;
	exports.CategoryListStatus = CategoryListStatus;
	exports.CategoryStore = CategoryStore;
	exports.ClearCat = ClearCat;
	exports.getCategoryData = getCategoryData;
	exports.setCategory = setCategory;
	exports.UpdateCategorySchema = UpdateCategorySchema;
	exports.DeleteCategory = DeleteCategory;
	exports.CategoryLoadList = CategoryLoadList;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var UPDATE_SCHEMA = exports.UPDATE_SCHEMA = 'UPDATE_SCHEMA';
	var GET_CATEGORY = exports.GET_CATEGORY = 'GET_CATEGORY';
	var GET_CATEGORY_FAILED = exports.GET_CATEGORY_FAILED = 'GET_CATEGORY_FAILED';
	var SAVED_CATEGORY = exports.SAVED_CATEGORY = 'SAVED_CATEGORY';
	var SAVE_CATEGORY_FAILED = exports.SAVE_CATEGORY_FAILED = 'SAVE_CATEGORY_FAILED';
	var LIST_CATEGORY = exports.LIST_CATEGORY = 'LIST_CATEGORY';
	var LIST_CATEGORY_FAILED = exports.LIST_CATEGORY_FAILED = 'LIST_CATEGORY_FAILED';
	var CLEAR_CAT = exports.CLEAR_CAT = 'CLEAR_CAT';
	var CANCEL_CATEGORY = exports.CANCEL_CATEGORY = 'CANCEL_CATEGORY';
	
	function SaveCategoryRequest(data) {
	  //console.log("data == ",data);
	  if (data._id) {
	    var id = data._id;
	    delete data["_id"];
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('update-category/' + id, 'put', {
	        categorydata: {
	          data: data
	        }
	      }).then(function (res) {
	        return dispatch(CategoryStatus(res));
	      });
	    };
	  } else {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('save-category', 'post', {
	        categorydata: {
	          data: data
	        }
	      }).then(function (res) {
	        return dispatch(CategoryStatus(res));
	      });
	    };
	  }
	}
	
	function CategoryStatus(response) {
	  if (response.status) {
	    // console.log("saved");
	    // browserHistory.push('/admin/category/view/'+response.data._id);
	    return {
	      type: SAVED_CATEGORY,
	      status: response.status,
	      data: response.data,
	      message: response.message,
	      error: []
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        err.push(obj.message);
	      });
	      return {
	        type: SAVE_CATEGORY_FAILED,
	        status: response.status,
	        data: {},
	        message: '',
	        error: err
	      };
	    } else {
	      //console.log("error === ",response.error);
	      return {
	        type: SAVE_CATEGORY_FAILED,
	        status: response.status,
	        data: {},
	        message: '',
	        error: [response.error]
	      };
	    }
	  } else {
	    console.log("internal server error");
	    return {
	      type: SAVE_CATEGORY_FAILED,
	      status: response.status,
	      data: {},
	      message: '',
	      error: ['Internal server error']
	    };
	  }
	}
	
	function CategoryListRequest(data, currentPage) {
	  var sortStr = JSON.stringify(data.sortObj);
	  var query = 'items=' + data.itemsPerPage + '&page=' + data.currentPage + '&sort=' + sortStr;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('list-category?' + query, 'get').then(function (res) {
	      return dispatch(CategoryListStatus(res, currentPage));
	    });
	  };
	}
	
	function CategoryListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      type: LIST_CATEGORY,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_CATEGORY_FAILED,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_CATEGORY_FAILED,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function CategoryStore(data) {
	  return {
	    type: GET_CATEGORY,
	    data: data
	  };
	}
	
	function ClearCat() {
	  return {
	    type: CLEAR_CAT
	  };
	}
	
	function getCategoryData(objEntity, pageName) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('fetch-category/' + objEntity.categoryId, 'get').then(function (res) {
	      return dispatch(setCategory(res, pageName));
	    });
	  };
	}
	
	function setCategory(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  // console.log(boolStatus);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: GET_CATEGORY,
	      status: response.status,
	      data: response.data,
	      message: '',
	      error: []
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        //console.log(obj.message);
	        err.push(obj.message);
	      });
	      return {
	        type: GET_CATEGORY_FAILED,
	        status: response.status,
	        data: {},
	        message: '',
	        error: err
	      };
	    } else {
	      console.log("error === ", response.error);
	      return {
	        type: GET_CATEGORY_FAILED,
	        status: response.status,
	        data: {},
	        message: '',
	        error: [response.error]
	      };
	    }
	  } else {
	    console.log("internal server error");
	    return {
	      type: GET_CATEGORY_FAILED,
	      status: response.status,
	      data: {},
	      message: '',
	      error: ['Internal server error']
	    };
	  }
	}
	
	function UpdateCategorySchema(schema) {
	  return {
	    type: UPDATE_SCHEMA,
	    schema: schema
	  };
	}
	
	function DeleteCategory(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('delete-category/' + objEntity.categoryId, 'delete').then(function (res) {
	      return dispatch(CategoryLoadList(res));
	    });
	  };
	}
	
	function CategoryLoadList(response) {
	  if (response.status) {
	    // browserHistory.push('/admin/category/list');
	    // console.log(response)
	    return {
	      type: CANCEL_CATEGORY,
	      status: response.status,
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: CANCEL_CATEGORY,
	      status: response.status,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: CANCEL_CATEGORY,
	      status: response.status,
	      error: ['Internal server error']
	    };
	  }
	}

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.categoryData = undefined;
	
	var _CategoryActions = __webpack_require__(155);
	
	var initialState = {
	  edit: false, data: {}, dataList: {},
	  currentPage: 1, count: 0,
	  itemsPerPage: 5,
	  schema: null,
	  error: [],
	  success: '', deleteSuccess: ''
	};
	
	var CategoryReducer = function CategoryReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _CategoryActions.UPDATE_SCHEMA:
	      return Object.assign({}, state, { schema: action.schema, data: {}, success: '', error: [] });
	    case _CategoryActions.GET_CATEGORY:
	      return Object.assign({}, state, { data: action.data });
	    case _CategoryActions.GET_CATEGORY_FAILED:
	      return Object.assign({}, state, { data: action.data });
	    case _CategoryActions.SAVED_CATEGORY:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: action.message, error: action.error });
	    case _CategoryActions.SAVE_CATEGORY_FAILED:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: action.message, error: action.error });
	    case _CategoryActions.LIST_CATEGORY:
	      return Object.assign({}, state, { dataList: action.listData, count: action.count, currentPage: action.currentPage, error: action.error });
	    case _CategoryActions.LIST_CATEGORY_FAILED:
	      return Object.assign({}, state, { dataList: action.listData, count: action.count, currentPage: action.currentPage, error: action.error });
	    case _CategoryActions.CANCEL_CATEGORY:
	      return Object.assign({}, state, { edit: action.status, deleteSuccess: action.message });
	    case _CategoryActions.CLEAR_CAT:
	      return Object.assign({}, state, { success: '', error: [], deleteSuccess: '' });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	
	var categoryData = exports.categoryData = function categoryData(state) {
	  return state.category;
	};
	
	// Export Reducer
	exports.default = CategoryReducer;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CLEAR_CORP = exports.UPDATE_SCHEMA = exports.LIST_CORPORATE = exports.SAVED_CORPORATE = exports.CANCEL_CORPORATE = exports.GET_CORPORATE = exports.SAVE_CORPORATE = exports.EDIT_CORPORATE = undefined;
	exports.EditCorporate = EditCorporate;
	exports.ClearCrop = ClearCrop;
	exports.SaveCorporate = SaveCorporate;
	exports.CorporateStatus = CorporateStatus;
	exports.getCorporateData = getCorporateData;
	exports.setCorporate = setCorporate;
	exports.CorporateList = CorporateList;
	exports.CorporateListStatus = CorporateListStatus;
	exports.CorporateStore = CorporateStore;
	exports.UpdateCorporateSchema = UpdateCorporateSchema;
	exports.CancelCorporate = CancelCorporate;
	exports.DeleteCorporate = DeleteCorporate;
	exports.CorporateLoadList = CorporateLoadList;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EDIT_CORPORATE = exports.EDIT_CORPORATE = 'EDIT_CORPORATE';
	var SAVE_CORPORATE = exports.SAVE_CORPORATE = 'SAVE_CORPORATE';
	var GET_CORPORATE = exports.GET_CORPORATE = 'GET_CORPORATE';
	var CANCEL_CORPORATE = exports.CANCEL_CORPORATE = 'CANCEL_CORPORATE';
	var SAVED_CORPORATE = exports.SAVED_CORPORATE = 'SAVED_CORPORATE';
	var LIST_CORPORATE = exports.LIST_CORPORATE = 'LIST_CORPORATE';
	var UPDATE_SCHEMA = exports.UPDATE_SCHEMA = 'UPDATE_SCHEMA';
	var CLEAR_CORP = exports.CLEAR_CORP = 'CLEAR_CORP';
	
	function EditCorporate() {
	  return {
	    type: EDIT_CORPORATE,
	    status: true
	  };
	}
	
	function ClearCrop() {
	  return {
	    type: CLEAR_CORP
	  };
	}
	
	function SaveCorporate(data) {
	  //console.log("data == ",data);
	  if (data._id) {
	    var id = data._id;
	    delete data['_id'];
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('corporates/' + id, 'put', {
	        corporatedata: data
	      }).then(function (res) {
	        return dispatch(CorporateStatus(res));
	      });
	    };
	  } else {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('corporates', 'post', {
	        corporatedata: data
	      }).then(function (res) {
	        return dispatch(CorporateStatus(res));
	      });
	    };
	  }
	}
	
	function CorporateStatus(response) {
	  if (response.status) {
	    // console.log("saved");
	    return {
	      type: SAVED_CORPORATE,
	      status: response.status,
	      id: response.id,
	      message: response.message,
	      error: []
	    };
	  } else if (response.error) {
	    console.log("error ==== ", response.error);
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        err.push(obj.message);
	      });
	      return {
	        type: SAVED_CORPORATE,
	        status: response.status,
	        message: '',
	        error: err
	      };
	    } else {
	      //console.log("error === ",response.error);
	      return {
	        type: SAVED_CORPORATE,
	        status: response.status,
	        message: '',
	        error: [response.error]
	      };
	    }
	  } else {
	    console.log("internal server error");
	    return {
	      type: SAVED_CORPORATE,
	      status: response.status,
	      message: '',
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getCorporateData(corporateId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('corporates/' + corporateId, 'get').then(function (res) {
	      return dispatch(setCorporate(res));
	    });
	  };
	}
	
	function setCorporate(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  // console.log(boolStatus);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: GET_CORPORATE,
	      status: response.status,
	      data: response.data,
	      error: []
	    };
	  } else if (response.error) {
	    console.log("error === ", response.error);
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        //console.log(obj.message);
	        err.push(obj.message);
	      });
	      return {
	        type: GET_CORPORATE,
	        status: response.status,
	        data: {},
	        error: err
	      };
	    } else {
	      console.log("error === ", response.error);
	      return {
	        type: GET_CORPORATE,
	        status: response.status,
	        data: {},
	        error: [response.error]
	      };
	    }
	  } else {
	    console.log("internal server error");
	    return {
	      type: GET_CORPORATE,
	      status: response.status,
	      data: {},
	      error: ['Internal server error']
	    };
	  }
	}
	
	function CorporateList(data, currentPage) {
	  // console.dir(data);
	  var sortStr = JSON.stringify(data.sortObj);
	  var query = 'items=' + data.itemsPerPage + '&page=' + data.currentPage + '&search=' + data.searchKeyword + '&sort=' + sortStr;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('corporates-list?' + query, 'get').then(function (res) {
	      return dispatch(CorporateListStatus(res, currentPage));
	    });
	  };
	}
	
	function CorporateListStatus(response, currentPage) {
	  // console.log(dataCount);
	  // console.log(data);
	  if (response.status) {
	    return {
	      type: LIST_CORPORATE,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    console.log("error === ", response.error);
	    return {
	      type: LIST_CORPORATE,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_CORPORATE,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function CorporateStore(data) {
	  return {
	    type: GET_CORPORATE,
	    data: data
	  };
	}
	
	function UpdateCorporateSchema(schema) {
	  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	  return {
	    type: UPDATE_SCHEMA,
	    schema: schema,
	    data: data
	  };
	}
	
	function CancelCorporate() {
	  return {
	    type: CANCEL_CORPORATE,
	    status: false
	  };
	}
	
	function DeleteCorporate(corporateId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('corporates/' + corporateId, 'delete').then(function (res) {
	      return dispatch(CorporateLoadList(res));
	    });
	  };
	}
	
	function CorporateLoadList(response) {
	  if (response.status) {
	    return {
	      type: CANCEL_CORPORATE,
	      status: true,
	      message: response.message
	    };
	  } else if (response.error) {
	    console.log("error === ", response.error);
	    return {
	      type: CANCEL_CORPORATE,
	      status: false,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: CANCEL_CORPORATE,
	      status: false,
	      error: ['Internal server error']
	    };
	  }
	}

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.corporateData = undefined;
	
	var _CorporateActions = __webpack_require__(157);
	
	var initialState = {
	  edit: false, data: {}, dataList: {},
	  currentPage: 1, count: 0,
	  itemsPerPage: 5,
	  schema: null,
	  success: '', deleteSuccess: ''
	};
	
	var CorporateReducer = function CorporateReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _CorporateActions.EDIT_CORPORATE:
	      return Object.assign({}, state, { edit: action.status, success: '' });
	    case _CorporateActions.SAVE_CORPORATE:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: '' });
	    case _CorporateActions.CANCEL_CORPORATE:
	      return Object.assign({}, state, { edit: action.status, deleteSuccess: action.message });
	    case _CorporateActions.SAVED_CORPORATE:
	      return Object.assign({}, state, { edit: action.status, success: action.message });
	    case _CorporateActions.GET_CORPORATE:
	      return Object.assign({}, state, { data: action.data });
	    case _CorporateActions.LIST_CORPORATE:
	      return Object.assign({}, state, { dataList: action.listData, count: action.count, currentPage: action.currentPage });
	    case _CorporateActions.UPDATE_SCHEMA:
	      if (action.data && action.data != null) {
	        return Object.assign({}, state, { schema: action.schema, data: action.data, success: '' });
	      } else {
	        return Object.assign({}, state, { schema: action.schema, data: {}, success: '' });
	      }
	    case _CorporateActions.CLEAR_CORP:
	      return Object.assign({}, state, { success: '', deleteSuccess: '' });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	
	var corporateData = exports.corporateData = function corporateData(state) {
	  return state.corporate;
	};
	
	// Export Reducer
	exports.default = CorporateReducer;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.VIEW_LOCATION = exports.CANCEL_LOCATION = exports.LIST_LOCATION = exports.CLEAR_LOCATION = exports.UPDATE_SCHEMA = exports.GET_LOCATION = exports.SAVED_LOCATION = undefined;
	exports.SaveLocation = SaveLocation;
	exports.LocationStatus = LocationStatus;
	exports.LocationStore = LocationStore;
	exports.UpdateLocationSchema = UpdateLocationSchema;
	exports.ClearLocation = ClearLocation;
	exports.LocationList = LocationList;
	exports.LocationListStatus = LocationListStatus;
	exports.getLocationData = getLocationData;
	exports.setLocation = setLocation;
	exports.DeleteLocation = DeleteLocation;
	exports.LocationLoadList = LocationLoadList;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SAVED_LOCATION = exports.SAVED_LOCATION = 'SAVED_LOCATION';
	var GET_LOCATION = exports.GET_LOCATION = 'GET_LOCATION';
	var UPDATE_SCHEMA = exports.UPDATE_SCHEMA = 'UPDATE_SCHEMA';
	var CLEAR_LOCATION = exports.CLEAR_LOCATION = 'CLEAR_LOCATION';
	var LIST_LOCATION = exports.LIST_LOCATION = 'LIST_LOCATION';
	var CANCEL_LOCATION = exports.CANCEL_LOCATION = 'CANCEL_LOCATION';
	var VIEW_LOCATION = exports.VIEW_LOCATION = 'VIEW_LOCATION';
	
	function SaveLocation(data) {
	  if (data._id) {
	    var id = data._id;
	    delete data["_id"];
	    delete data["locationId"];
	    delete data["uid"];
	
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('locations/' + id, 'put', {
	        locationData: data
	      }).then(function (res) {
	        return dispatch(LocationStatus(res));
	      });
	    };
	  } else {
	    return function (dispatch) {
	      return (0, _apiCaller2.default)('locations', 'post', {
	        locationData: data
	      }).then(function (res) {
	        return dispatch(LocationStatus(res));
	      });
	    };
	  }
	}
	
	function LocationStatus(response) {
	  //console.log("response === ",response)
	  if (response.status) {
	    _reactRouter.browserHistory.push('/admin/location/list/');
	    return {
	      type: SAVED_LOCATION,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      return {
	        type: SAVED_LOCATION,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    } else {
	      return {
	        type: SAVED_LOCATION,
	        status: response.status,
	        data: {},
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVED_LOCATION,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function LocationStore(data) {
	  return {
	    type: GET_LOCATION,
	    data: data
	  };
	}
	
	function UpdateLocationSchema(schema) {
	  return {
	    type: UPDATE_SCHEMA,
	    schema: schema
	  };
	}
	
	function ClearLocation() {
	  return {
	    type: CLEAR_LOCATION
	  };
	}
	
	function LocationList(data, currentPage) {
	  var query = 'items=' + data.itemsPerPage + '&page=' + data.currentPage;
	  if (data && data.searchKeyword) {
	    query += '&search=' + data.searchKeyword;
	  }
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('locations?' + query, 'get').then(function (res) {
	      return dispatch(LocationListStatus(res, currentPage));
	    });
	  };
	}
	// export function LocationList(data, currentPage){
	//   return (dispatch) => {
	//     return callApi('listlocation', 'post', {
	//       data,
	//     }).then(res => dispatch(LocationListStatus(res, currentPage)));
	//   };
	// }
	
	function LocationListStatus(response, currentPage) {
	  if (response.status) {
	    return {
	      status: response.status,
	      type: LIST_LOCATION,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      status: response.status,
	      type: LIST_LOCATION,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      status: response.status,
	      type: LIST_LOCATION,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	// export function getLocationData (objEntity, pageName){
	//   return (dispatch) => {
	//     return callApi('fetchlocation', 'post', {
	//       locationdata: {
	//         uid : objEntity.uid,
	//         locationId : objEntity.locationId
	//       },
	//     }).then(res => dispatch(setLocation(res, pageName)));
	//   };
	// }
	function getLocationData(locationId, pageName) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('locations/' + locationId, 'get').then(function (res) {
	      return dispatch(setLocation(res, pageName));
	    });
	  };
	}
	function setLocation(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: VIEW_LOCATION,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: ''
	    };
	  } else if (response.error) {
	    return {
	      type: VIEW_LOCATION,
	      status: response.status,
	      data: {},
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: VIEW_LOCATION,
	      status: response.status,
	      data: {},
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function DeleteLocation(objEntity) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('locations/' + objEntity.locationId, 'delete').then(function (res) {
	      return dispatch(LocationLoadList(res));
	    });
	  };
	}
	
	function LocationLoadList(response) {
	  //console.log("response === ",response);
	  if (response.status) {
	    _reactRouter.browserHistory.push('/admin/location/list');
	    return {
	      type: CANCEL_LOCATION,
	      status: false,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: CANCEL_LOCATION,
	      status: false,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: CANCEL_LOCATION,
	      status: false,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.locationData = undefined;
	
	var _LocationActions = __webpack_require__(159);
	
	var initialState = {
	  edit: false, data: {}, dataList: {}, currentPage: 1, count: 0, itemsPerPage: 5, schema: null, success: ''
	};
	
	var LocationReducer = function LocationReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _LocationActions.SAVED_LOCATION:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: action.message });
	    case _LocationActions.GET_LOCATION:
	      return Object.assign({}, state, { data: action.data });
	    case _LocationActions.UPDATE_SCHEMA:
	      return Object.assign({}, state, { schema: action.schema, data: {} });
	    case _LocationActions.CLEAR_LOCATION:
	      return Object.assign({}, state, { success: '' });
	    case _LocationActions.LIST_LOCATION:
	      return Object.assign({}, state, { dataList: action.listData, count: action.count, currentPage: action.currentPage });
	    case _LocationActions.CANCEL_LOCATION:
	      return Object.assign({}, state, { edit: action.status, success: action.message });
	    case _LocationActions.VIEW_LOCATION:
	      return Object.assign({}, state, { data: action.data });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var locationData = exports.locationData = function locationData(state) {
	  return state.location;
	};
	
	// Export Reducer
	exports.default = LocationReducer;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.FETCH_PACKAGE_FAILED = exports.FETCHED_PACKAGE = exports.CLEAR_PACKAGE = exports.UPDATE_SCHEMA = exports.LIST_PACKAGE = exports.SAVED_PACKAGE = exports.CANCEL_PACKAGE = exports.GET_PACKAGE = exports.SAVE_PACKAGE = exports.EDIT_PACKAGE = undefined;
	exports.EditPackage = EditPackage;
	exports.SavePackage = SavePackage;
	exports.UpdatePackage = UpdatePackage;
	exports.PackageStatus = PackageStatus;
	exports.getPackageData = getPackageData;
	exports.setPackage = setPackage;
	exports.PackageList = PackageList;
	exports.PackageListStatus = PackageListStatus;
	exports.PackageStore = PackageStore;
	exports.UpdatePackageSchema = UpdatePackageSchema;
	exports.CancelPackage = CancelPackage;
	exports.DeletePackage = DeletePackage;
	exports.PackageLoadList = PackageLoadList;
	exports.ClearPackage = ClearPackage;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EDIT_PACKAGE = exports.EDIT_PACKAGE = 'EDIT_PACKAGE';
	var SAVE_PACKAGE = exports.SAVE_PACKAGE = 'SAVE_PACKAGE';
	var GET_PACKAGE = exports.GET_PACKAGE = 'GET_PACKAGE';
	var CANCEL_PACKAGE = exports.CANCEL_PACKAGE = 'CANCEL_PACKAGE';
	var SAVED_PACKAGE = exports.SAVED_PACKAGE = 'SAVED_PACKAGE';
	var LIST_PACKAGE = exports.LIST_PACKAGE = 'LIST_PACKAGE';
	var UPDATE_SCHEMA = exports.UPDATE_SCHEMA = 'UPDATE_SCHEMA';
	var CLEAR_PACKAGE = exports.CLEAR_PACKAGE = 'CLEAR_PACKAGE';
	var FETCHED_PACKAGE = exports.FETCHED_PACKAGE = 'FETCHED_PACKAGE';
	var FETCH_PACKAGE_FAILED = exports.FETCH_PACKAGE_FAILED = 'FETCH_PACKAGE_FAILED';
	
	function EditPackage() {
	  return {
	    type: EDIT_PACKAGE,
	    status: true
	  };
	}
	
	function SavePackage(data) {
	  // console.log("data == ",data);
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('packages', 'post', {
	      packagedata: data
	    }).then(function (res) {
	      return dispatch(PackageStatus(res));
	    });
	  };
	}
	
	function UpdatePackage(data, id) {
	  delete data["_id"];
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('packages/' + id, 'put', {
	      packagedata: data
	    }).then(function (res) {
	      return dispatch(PackageStatus(res));
	    });
	  };
	}
	
	function PackageStatus(response) {
	  if (response.status) {
	    // browserHistory.push('/admin/package/view/'+response.data._id);
	    return {
	      type: SAVED_PACKAGE,
	      status: response.status,
	      id: response.id,
	      message: response.message,
	      error: []
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        //console.log(obj.message);
	        err.push(obj.message);
	      });
	      return {
	        type: SAVED_PACKAGE,
	        status: response.status,
	        message: '',
	        error: err
	      };
	    } else {
	      // console.log("error === ",response.error);
	      return {
	        type: SAVED_PACKAGE,
	        status: response.status,
	        message: '',
	        error: [response.error]
	      };
	    }
	  } else {
	    console.log("internal server error");
	    return {
	      type: SAVED_PACKAGE,
	      status: response.status,
	      message: '',
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getPackageData(recordId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('packages/' + recordId, 'get').then(function (res) {
	      return dispatch(setPackage(res));
	    });
	  };
	}
	
	function setPackage(response) {
	  var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  // console.log(boolStatus);
	  if (response.status) {
	    if (page != '') {
	      _reactRouter.browserHistory.push(page);
	    }
	    return {
	      type: FETCHED_PACKAGE,
	      status: response.status,
	      data: response.data,
	      message: '',
	      error: []
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        //console.log(obj.message);
	        err.push(obj.message);
	      });
	      return {
	        type: FETCH_PACKAGE_FAILED,
	        status: response.status,
	        data: response.data,
	        message: '',
	        error: err
	      };
	    } else {
	      //console.log("error === ",response.error);
	      return {
	        type: FETCH_PACKAGE_FAILED,
	        status: response.status,
	        data: response.data,
	        message: '',
	        error: [response.error]
	      };
	    }
	  } else {
	    console.log("internal server error");
	    return {
	      type: FETCH_PACKAGE_FAILED,
	      status: response.status,
	      data: response.data,
	      message: '',
	      error: ['Internal server error']
	    };
	  }
	}
	
	function PackageList(data, currentPage) {
	  var sortStr = JSON.stringify(data.sortObj);
	  var query = 'items=' + data.itemsPerPage + '&page=' + data.currentPage + '&sort=' + sortStr;
	  if (data && data.searchKeyword) query += '&search=' + data.searchKeyword;
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('packages?' + query, 'get').then(function (res) {
	      return dispatch(PackageListStatus(res, currentPage));
	    });
	  };
	}
	
	function PackageListStatus(response, currentPage) {
	  // console.log(dataCount);
	  // console.log(data);
	  if (response.status) {
	    return {
	      type: LIST_PACKAGE,
	      listData: response.data,
	      count: response.count,
	      currentPage: currentPage,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_PACKAGE,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_PACKAGE,
	      listData: {},
	      count: 0,
	      currentPage: currentPage,
	      error: ['Internal server error']
	    };
	  }
	}
	
	function PackageStore(data) {
	  return {
	    type: GET_PACKAGE,
	    data: data
	  };
	}
	
	function UpdatePackageSchema(schema) {
	  return {
	    type: UPDATE_SCHEMA,
	    schema: schema
	  };
	}
	
	function CancelPackage() {
	  return {
	    type: CANCEL_PACKAGE,
	    status: false
	  };
	}
	
	function DeletePackage(recordId) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('packages/' + recordId, 'delete').then(function (res) {
	      return dispatch(PackageLoadList(res));
	    });
	  };
	}
	
	function PackageLoadList(response) {
	  if (response.status) {
	    // browserHistory.push('/admin/package/list');
	    return {
	      type: CANCEL_PACKAGE,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: CANCEL_PACKAGE,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: CANCEL_PACKAGE,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	
	function ClearPackage() {
	  return {
	    type: CLEAR_PACKAGE
	  };
	}

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.packageData = undefined;
	
	var _PackageActions = __webpack_require__(161);
	
	var initialState = {
	  edit: false, data: {},
	  dataList: {}, currentPage: 1,
	  count: 0, itemsPerPage: 5,
	  schema: null,
	  success: '',
	  deleteSuccess: ''
	};
	
	var PackageReducer = function PackageReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _PackageActions.EDIT_PACKAGE:
	      return Object.assign({}, state, { edit: action.status });
	    case _PackageActions.SAVE_PACKAGE:
	      return Object.assign({}, state, { edit: action.status, data: action.data });
	    case _PackageActions.CANCEL_PACKAGE:
	      return Object.assign({}, state, { edit: action.status, deleteSuccess: action.message });
	    case _PackageActions.SAVED_PACKAGE:
	      return Object.assign({}, state, { edit: action.status, success: action.message });
	    case _PackageActions.GET_PACKAGE:
	      return Object.assign({}, state, { data: action.data });
	    case _PackageActions.LIST_PACKAGE:
	      return Object.assign({}, state, {
	        dataList: action.listData, count: action.count, currentPage: action.currentPage
	      });
	    case _PackageActions.UPDATE_SCHEMA:
	      return Object.assign({}, state, { schema: action.schema, data: {} });
	    case _PackageActions.CLEAR_PACKAGE:
	      return Object.assign({}, state, { success: '', deleteSuccess: '' });
	    case _PackageActions.FETCHED_PACKAGE:
	      return Object.assign({}, state, { data: action.data });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var packageData = exports.packageData = function packageData(state) {
	  return state.packages;
	};
	
	// Export Reducer
	exports.default = PackageReducer;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.groupData = undefined;
	
	var _ParticipantsGroupActions = __webpack_require__(152);
	
	var initialState = {
	  edit: false, data: {}, dataList: {},
	  currentPage: 1, count: 0,
	  itemsPerPage: 5,
	  schema: null,
	  error: [],
	  success: '', deleteSuccess: ''
	};
	
	var ParticipantsGroupReducer = function ParticipantsGroupReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _ParticipantsGroupActions.SAVED_GROUP:
	      return Object.assign({}, state, { edit: action.status, dataList: action.data, success: action.message, count: action.count });
	    case _ParticipantsGroupActions.SAVE_GROUP_FAILED:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: action.message, error: action.error });
	    case _ParticipantsGroupActions.LIST_GROUP:
	      return Object.assign({}, state, { dataList: action.listData, count: action.count, currentPage: action.currentPage, error: action.error });
	    case _ParticipantsGroupActions.LIST_GROUP_FAILED:
	      return Object.assign({}, state, { dataList: action.listData, count: action.count, currentPage: action.currentPage, error: action.error });
	    case _ParticipantsGroupActions.FETCH_GROUP_DATA:
	      return Object.assign({}, state, { dataList: action.listData });
	    case _ParticipantsGroupActions.CLEAR_GROUP:
	      return Object.assign({}, state, { dataList: {},
	        currentPage: 1, count: 0, error: [],
	        success: '', deleteSuccess: '' });
	    case _ParticipantsGroupActions.DELETE_GROUP:
	      return Object.assign({}, state, { success: action.message, deleteSuccess: action.message });
	    case _ParticipantsGroupActions.DELETE_STUDENT:
	      return Object.assign({}, state, { success: action.message, dataList: action.listData });
	    case _ParticipantsGroupActions.SAVE_GROUP_NAME:
	      return Object.assign({}, state, { success: action.message, dataList: action.listData });
	
	    case _ParticipantsGroupActions.SAVE_GROUP_NAME_FAILED:
	      return Object.assign({}, state, { error: action.error });
	    case _ParticipantsGroupActions.ADD_PARTICIPANTS_IN_GROUP:
	      return Object.assign({}, state, { success: action.message, dataList: action.listData });
	    case _ParticipantsGroupActions.ADD_PARTICIPANTS_IN_GROUP_FAILED:
	      return Object.assign({}, state, { error: action.error });
	
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	
	var groupData = exports.groupData = function groupData(state) {
	  return state.ParticipantsGroup;
	};
	
	// Export Reducer
	exports.default = ParticipantsGroupReducer;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.feedbackData = undefined;
	
	var _RoomActions = __webpack_require__(63);
	
	var initialState = {
	  data: {},
	  dataList: [], currentPage: 1,
	  count: 0, itemsPerPage: 5,
	  schema: null, error: [], success: '', roomId: ''
	};
	
	var FeedbackReducer = function FeedbackReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _RoomActions.CLEAR_FEEDBACK:
	      return Object.assign({}, state, { edit: action.status });
	    case _RoomActions.LIST_ROOM_FEEDBACK:
	      return Object.assign({}, state, { edit: action.status, dataList: action.listData, count: action.count, roomId: action.roomId, currentPage: action.currentPage });
	    case _RoomActions.SAVED_ROOM_FEEDBACK:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: action.message });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var feedbackData = exports.feedbackData = function feedbackData(state) {
	  return state.feedback;
	};
	
	// Export Reducer
	exports.default = FeedbackReducer;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.statsDetails = undefined;
	
	var _ConferenceActions = __webpack_require__(38);
	
	var initialState = {
	  ssrc_audio_send: { bytes_sent: null, packets_sent: null, packets_lost: null, rtt_ms: null, codec_name: null },
	  ssrc_audio_recv: { bytes_recv: null, packets_recv: null, packets_lost: null, delay_estimated_ms: null, codec_name: null },
	  ssrc_video_send: { bytes_sent: null, packets_sent: null, packets_lost: null, rtt_ms: null, codec_name: null, firs_rcvd: null, nacks_rcvd: null, plis_rcvd: null, send_frame_height: null, send_frame_width: null, framerate_sent: null, last_adapt_reason: null, adapt_changes: null },
	  ssrc_video_recv: { bytes_recv: null, packets_recv: null, packets_lost: null, current_delay_ms: null, codec_name: null, firs_sent: null, nacks_rcvd: null, plis_rcvd: null, frame_height: null, frame_width: null, framerate_rcvd: null, framereate_output: null },
	  VideoBWE: { available_send_bandwidth: null, available_recv_bandwidth: null, trasmit_bitrate: null, retransmit_bitrate: null }
	};
	/*
	  confStatus: 1 - Presenter, 2 - Conference, 3 - Telepresence
	*/
	
	var StatsReducer = function StatsReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _ConferenceActions.AUDIO_SEND:
	      return Object.assign({}, state, { ssrc_audio_send: action.ssrc_audio_send });
	    case _ConferenceActions.AUDIO_RECV:
	      return Object.assign({}, state, { ssrc_audio_recv: action.ssrc_audio_recv });
	    case _ConferenceActions.VIDEO_SEND:
	      return Object.assign({}, state, { ssrc_video_send: action.ssrc_video_send });
	    case _ConferenceActions.VIDEO_RECV:
	      return Object.assign({}, state, { ssrc_video_recv: action.ssrc_video_recv });
	    case _ConferenceActions.VIDEO_BWE:
	      return Object.assign({}, state, { VideoBWE: action.VideoBWE });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	
	var statsDetails = exports.statsDetails = function statsDetails(state) {
	  return state.stats;
	};
	// Export Reducer
	exports.default = StatsReducer;

/***/ },
/* 166 */
/***/ function(module, exports) {

	module.exports = require("react-draggable");

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LIST_FULL_CALENDAR_EVENTS = undefined;
	exports.CalendarEventsList = CalendarEventsList;
	exports.CalendarEventsListStatus = CalendarEventsListStatus;
	exports.getMyRooms = getMyRooms;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LIST_FULL_CALENDAR_EVENTS = exports.LIST_FULL_CALENDAR_EVENTS = 'LIST_FULL_CALENDAR_EVENTS';
	
	var _ = __webpack_require__(7);
	
	function CalendarEventsList(year) {
	  var startDate = moment(year, 'YYYY').startOf('year').utc().format('x');
	  var endDate = moment(year, 'YYYY').endOf('year').utc().format('x');
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('date-schedules/' + startDate + '/' + endDate, 'get').then(function (res) {
	      return dispatch(CalendarEventsListStatus(res, year));
	    });
	    // return callApi('get-full-calendar-events/' + startDate + '/' + endDate, 'get').then(res => dispatch(CalendarEventsListStatus(res, year)));
	  };
	};
	
	function CalendarEventsListStatus(response) {
	  if (response.status) {
	    var scheduleData = [];
	    response.data.forEach(function (data) {
	      var obj = {
	        title: data.meetingName,
	        start: moment(data.dates.startTime, 'x').toDate(),
	        end: moment(data.dates.endTime, 'x').toDate(),
	        data: data
	      };
	      scheduleData.push(obj);
	    });
	    return {
	      type: LIST_FULL_CALENDAR_EVENTS,
	      data: scheduleData,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: LIST_FULL_CALENDAR_EVENTS,
	      data: [],
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: LIST_FULL_CALENDAR_EVENTS,
	      data: [],
	      error: ['Internal server error']
	    };
	  }
	}
	
	function getMyRooms() {
	  return (0, _apiCaller2.default)('fetch-my-rooms', 'get');
	}

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.FullCalendarEventsData = undefined;
	
	var _FullCalendarActions = __webpack_require__(167);
	
	var initialState = {
	  edit: false, data: {}, error: []
	};
	
	var FullCalendarReducer = function FullCalendarReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _FullCalendarActions.LIST_FULL_CALENDAR_EVENTS:
	      return Object.assign({}, state, { data: action.data, error: action.error });
	    default:
	      return state;
	  }
	};
	var FullCalendarEventsData = exports.FullCalendarEventsData = function FullCalendarEventsData(state) {
	  return state.fullCalendarEvents;
	};
	exports.default = FullCalendarReducer;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DELETE_SETTINGS = exports.CLEAR_LDAP = exports.UPDATE_SCHEMA = exports.HAS_LDAPSETTINGS = exports.SAVED_LDAPSETTINGS = exports.CANCEL_LDAPSETTINGS = exports.GET_LDAPSETTINGS = exports.SAVE_LDAPSETTINGS = exports.EDIT_LDAPSETTINGS = undefined;
	exports.EditLDAPSettings = EditLDAPSettings;
	exports.getLDAPSettings = getLDAPSettings;
	exports.ClearLDAP = ClearLDAP;
	exports.hasLDAPSettings = hasLDAPSettings;
	exports.saveLDAPSettings = saveLDAPSettings;
	exports.LDAPSettingsStatus = LDAPSettingsStatus;
	exports.LDAPSettingsStore = LDAPSettingsStore;
	exports.CancelLDAPSettings = CancelLDAPSettings;
	exports.UpdateLDAPSchema = UpdateLDAPSchema;
	exports.deleteLDAPSettings = deleteLDAPSettings;
	exports.LDAPSettings = LDAPSettings;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EDIT_LDAPSETTINGS = exports.EDIT_LDAPSETTINGS = 'EDIT_LDAPSETTINGS';
	var SAVE_LDAPSETTINGS = exports.SAVE_LDAPSETTINGS = 'SAVE_LDAPSETTINGS';
	var GET_LDAPSETTINGS = exports.GET_LDAPSETTINGS = 'GET_LDAPSETTINGS';
	var CANCEL_LDAPSETTINGS = exports.CANCEL_LDAPSETTINGS = 'CANCEL_LDAPSETTINGS';
	var SAVED_LDAPSETTINGS = exports.SAVED_LDAPSETTINGS = 'SAVED_LDAPSETTINGS';
	var HAS_LDAPSETTINGS = exports.HAS_LDAPSETTINGS = 'HAS_LDAPSETTINGS';
	var UPDATE_SCHEMA = exports.UPDATE_SCHEMA = 'UPDATE_SCHEMA';
	var CLEAR_LDAP = exports.CLEAR_LDAP = 'CLEAR_LDAP';
	var DELETE_SETTINGS = exports.DELETE_SETTINGS = 'DELETE_SETTINGS';
	
	function EditLDAPSettings() {
	  return {
	    type: EDIT_LDAPSETTINGS,
	    status: true
	  };
	}
	
	function getLDAPSettings() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('ldap-Settings', 'get').then(function (res) {
	      return dispatch(hasLDAPSettings(res));
	    });
	  };
	}
	
	function ClearLDAP() {
	  return {
	    type: CLEAR_LDAP
	  };
	}
	
	function hasLDAPSettings(response) {
	
	  if (response.status) {
	    return {
	      type: HAS_LDAPSETTINGS,
	      status: response.status,
	      data: response.data,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: HAS_LDAPSETTINGS,
	      status: response.status,
	      data: {},
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: HAS_LDAPSETTINGS,
	      status: response.status,
	      data: {},
	      error: []
	    };
	  }
	}
	
	function saveLDAPSettings(data) {
	  /*console.log("data");
	  console.log(data);*/
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('ldap-Settings', 'post', {
	      LDAPSettingsData: {
	        data: data
	      }
	    }).then(function (res) {
	      return dispatch(LDAPSettingsStatus(res));
	    });
	  };
	}
	
	function LDAPSettingsStatus(response) {
	
	  if (response.status) {
	    return {
	      type: SAVED_LDAPSETTINGS,
	      status: response.status,
	      data: response.data,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        err.push(obj.message);
	      });
	      return {
	        type: SAVED_LDAPSETTINGS,
	        status: response.status,
	        data: response.data,
	        error: err,
	        message: response.message
	      };
	    } else {
	      return {
	        type: SAVED_LDAPSETTINGS,
	        status: response.status,
	        data: response.data,
	        error: [response.error],
	        message: ''
	      };
	    }
	  } else {
	    return {
	      type: SAVED_LDAPSETTINGS,
	      status: response.status,
	      data: response.data,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}
	function LDAPSettingsStore(data) {
	  return {
	    type: GET_LDAPSETTINGS,
	    data: data
	  };
	}
	
	function CancelLDAPSettings() {
	  return {
	    type: CANCEL_LDAPSETTINGS,
	    status: false
	  };
	}
	
	function UpdateLDAPSchema(schema) {
	  return {
	    type: UPDATE_SCHEMA,
	    schema: schema
	  };
	}
	function deleteLDAPSettings() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('ldap-Settings', 'delete').then(function (res) {
	      return dispatch(LDAPSettings(res));
	    });
	  };
	}
	
	function LDAPSettings(response) {
	  if (response.status) {
	    return {
	      type: DELETE_SETTINGS,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: DELETE_SETTINGS,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: DELETE_SETTINGS,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LDAPSettingsData = undefined;
	
	var _LDAPSettingsActions = __webpack_require__(169);
	
	var initialState = {
	  edit: false, data: {}, schema: null, error: [], success: ''
	};
	
	var LDAPSettingsReducer = function LDAPSettingsReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _LDAPSettingsActions.EDIT_LDAPSETTINGS:
	      return Object.assign({}, state, { edit: action.status, error: [], success: '' });
	    case _LDAPSettingsActions.SAVE_LDAPSETTINGS:
	      return Object.assign({}, state, { edit: action.status, data: action.data, error: [], success: '' });
	    case _LDAPSettingsActions.CANCEL_LDAPSETTINGS:
	      return Object.assign({}, state, { edit: action.status, error: [], success: '' });
	    case _LDAPSettingsActions.SAVED_LDAPSETTINGS:
	      return Object.assign({}, state, { edit: action.status, data: action.data, error: action.error, success: action.message });
	    case _LDAPSettingsActions.GET_LDAPSETTINGS:
	      return Object.assign({}, state, { data: action.data, error: [], success: '' });
	    case _LDAPSettingsActions.HAS_LDAPSETTINGS:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: '', error: action.error });
	    case _LDAPSettingsActions.UPDATE_SCHEMA:
	      return Object.assign({}, state, { schema: action.schema, data: {}, error: [], success: '' });
	    case _LDAPSettingsActions.CLEAR_LDAP:
	      return Object.assign({}, state, { edit: false, data: {}, success: '', error: [], schema: null });
	    case _LDAPSettingsActions.DELETE_SETTINGS:
	      return Object.assign({}, state, { edit: action.status, data: {}, success: action.message, error: [] });
	    default:
	      return state;
	  }
	};
	var LDAPSettingsData = exports.LDAPSettingsData = function LDAPSettingsData(state) {
	  return state.ldapSettings;
	};
	exports.default = LDAPSettingsReducer;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GET_USERDATA_FAILED = exports.GET_USERDATA = undefined;
	exports.getUserDataRequest = getUserDataRequest;
	exports.getUserDataRequestStatus = getUserDataRequestStatus;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var GET_USERDATA = exports.GET_USERDATA = 'GET_USERDATA';
	var GET_USERDATA_FAILED = exports.GET_USERDATA_FAILED = 'GET_USERDATA_FAILED';
	
	function getUserDataRequest(data) {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('getUserData/' + data, 'get').then(function (res) {
	      return dispatch(getUserDataRequestStatus(res));
	    });
	  };
	}
	
	function getUserDataRequestStatus(response) {
	  if (response.status) {
	    return {
	      type: GET_USERDATA,
	      data: response.data,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: GET_USERDATA_FAILED,
	      data: {},
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: GET_USERDATA_FAILED,
	      data: {},
	      error: ['Internal server error']
	    };
	  }
	}

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.professionalProfileData = undefined;
	
	var _ProfessionalProfileActions = __webpack_require__(171);
	
	var initialState = {
	  data: {}, error: []
	};
	
	var ProfessionalProfileReducer = function ProfessionalProfileReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _ProfessionalProfileActions.GET_USERDATA:
	      return Object.assign({}, state, { data: action.data });
	    case _ProfessionalProfileActions.GET_USERDATA_FAILED:
	      return Object.assign({}, state, { error: action.error });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var professionalProfileData = exports.professionalProfileData = function professionalProfileData(state) {
	  return state.professionalprofile;
	};
	
	exports.default = ProfessionalProfileReducer;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.studentData = undefined;
	
	var _RoomActions = __webpack_require__(63);
	
	var initialState = {
	  // edit : false, data : {}, 
	};
	
	var StudentReducer = function StudentReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case _RoomActions.SAVED_ROOM_STUDENT:
	      return Object.assign({}, state, { data: action.data });
	    case _RoomActions.SAVED_GROUP_STUDENT:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: action.message });
	    default:
	      return state;
	  }
	};
	
	/* Selectors */
	var studentData = exports.studentData = function studentData(state) {
	  return state.student;
	};
	
	// Export Reducer
	exports.default = StudentReducer;

/***/ },
/* 174 */,
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DELETE_SMTP = exports.CLEAR_SMTP = exports.UPDATE_SCHEMA = exports.HAS_SETTINGS = exports.SAVED_SETTINGS = exports.CANCEL_SETTINGS = exports.GET_SETTINGS = exports.SAVE_SETTINGS = exports.EDIT_SETTINGS = undefined;
	exports.EditSettings = EditSettings;
	exports.getSettings = getSettings;
	exports.saveSettings = saveSettings;
	exports.SettingsStatus = SettingsStatus;
	exports.settingsStore = settingsStore;
	exports.CancelSettings = CancelSettings;
	exports.ClearSMTP = ClearSMTP;
	exports.UpdateSettingsSchema = UpdateSettingsSchema;
	exports.deleteSMTPSettings = deleteSMTPSettings;
	exports.SMTPSettings = SMTPSettings;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EDIT_SETTINGS = exports.EDIT_SETTINGS = 'EDIT_SETTINGS';
	var SAVE_SETTINGS = exports.SAVE_SETTINGS = 'SAVE_SETTINGS';
	var GET_SETTINGS = exports.GET_SETTINGS = 'GET_SETTINGS';
	var CANCEL_SETTINGS = exports.CANCEL_SETTINGS = 'CANCEL_SETTINGS';
	var SAVED_SETTINGS = exports.SAVED_SETTINGS = 'SAVED_SETTINGS';
	var HAS_SETTINGS = exports.HAS_SETTINGS = 'HAS_SETTINGS';
	var UPDATE_SCHEMA = exports.UPDATE_SCHEMA = 'UPDATE_SCHEMA';
	var CLEAR_SMTP = exports.CLEAR_SMTP = 'CLEAR_SMTP';
	var DELETE_SMTP = exports.DELETE_SMTP = 'DELETE_SMTP';
	
	function EditSettings() {
	  return {
	    type: EDIT_SETTINGS,
	    status: true
	  };
	}
	
	function getSettings() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('smtp-settings', 'get').then(function (res) {
	      return dispatch(hasSettings(res));
	    });
	  };
	}
	
	function hasSettings(response) {
	  if (response.status) {
	    return {
	      type: HAS_SETTINGS,
	      status: response.status,
	      data: response.data,
	      error: []
	    };
	  } else if (response.error) {
	    return {
	      type: HAS_SETTINGS,
	      status: response.status,
	      data: {},
	      error: [response.error]
	    };
	  } else {
	    return {
	      type: HAS_SETTINGS,
	      status: response.status,
	      data: {},
	      error: []
	    };
	  }
	}
	
	function saveSettings(data) {
	
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('smtp-settings', 'post', {
	      settingsData: {
	        data: data
	      }
	    }).then(function (res) {
	      return dispatch(SettingsStatus(res));
	    });
	  };
	}
	
	function SettingsStatus(response) {
	
	  if (response.status) {
	    return {
	      type: SAVED_SETTINGS,
	      status: response.status,
	      data: response.data,
	      message: response.message,
	      error: []
	    };
	  } else if (response.error) {
	    if (response.error.errors) {
	      var err = [];
	      _.forIn(response.error.errors, function (obj, key) {
	        err.push(obj.message);
	      });
	      return {
	        type: SAVED_SETTINGS,
	        status: response.status,
	        data: {},
	        message: '',
	        error: err
	      };
	    } else {
	      return {
	        type: SAVED_SETTINGS,
	        status: response.status,
	        data: {},
	        message: '',
	        error: [response.error]
	      };
	    }
	  } else {
	    return {
	      type: SAVED_SETTINGS,
	      status: response.status,
	      data: {},
	      message: '',
	      error: ['Internal server error']
	    };
	  }
	}
	
	function settingsStore(data) {
	
	  return {
	    type: GET_SETTINGS,
	    data: data
	  };
	}
	
	function CancelSettings() {
	  return {
	    type: CANCEL_SETTINGS,
	    status: false
	  };
	}
	
	function ClearSMTP() {
	  return {
	    type: CLEAR_SMTP
	  };
	}
	
	function UpdateSettingsSchema(schema) {
	  return {
	    type: UPDATE_SCHEMA,
	    schema: schema
	  };
	}
	
	function deleteSMTPSettings() {
	  return function (dispatch) {
	    return (0, _apiCaller2.default)('smtp-settings', 'delete').then(function (res) {
	      return dispatch(SMTPSettings(res));
	    });
	  };
	}
	
	function SMTPSettings(response) {
	  if (response.status) {
	    return {
	      type: DELETE_SMTP,
	      status: response.status,
	      error: [],
	      message: response.message
	    };
	  } else if (response.error) {
	    return {
	      type: DELETE_SMTP,
	      status: response.status,
	      error: [response.error],
	      message: ''
	    };
	  } else {
	    return {
	      type: DELETE_SMTP,
	      status: response.status,
	      error: ['Internal server error'],
	      message: ''
	    };
	  }
	}

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.settingsData = undefined;
	
	var _SettingsActions = __webpack_require__(175);
	
	var initialState = {
	  edit: false, data: {}, success: '', error: [], schema: null
	};
	
	var SettingsReducer = function SettingsReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	
	  switch (action.type) {
	    case _SettingsActions.EDIT_SETTINGS:
	      return Object.assign({}, state, { edit: action.status });
	    case _SettingsActions.SAVE_SETTINGS:
	      return Object.assign({}, state, { edit: action.status, data: action.data });
	    case _SettingsActions.CANCEL_SETTINGS:
	      return Object.assign({}, state, { edit: action.status });
	    case _SettingsActions.SAVED_SETTINGS:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: action.message, error: action.error });
	    case _SettingsActions.GET_SETTINGS:
	      return Object.assign({}, state, { data: action.data });
	    case _SettingsActions.HAS_SETTINGS:
	      return Object.assign({}, state, { edit: action.status, data: action.data, success: '', error: action.error });
	    case _SettingsActions.UPDATE_SCHEMA:
	      return Object.assign({}, state, { schema: action.schema, data: {}, success: '', error: [] });
	    case _SettingsActions.CLEAR_SMTP:
	      return Object.assign({}, state, { edit: false, data: {}, success: '', error: [], schema: null });
	    case _SettingsActions.DELETE_SMTP:
	      return Object.assign({}, state, { edit: action.status, data: {}, success: action.message, error: [] });
	    default:
	      return state;
	  }
	};
	var settingsData = exports.settingsData = function settingsData(state) {
	  return state.settings;
	};
	exports.default = SettingsReducer;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.createLogs = createLogs;
	exports.updateAttendance = updateAttendance;
	exports.saveVisiteTopic = saveVisiteTopic;
	exports.markAsCompleteTopic = markAsCompleteTopic;
	exports.getTopicStatus = getTopicStatus;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function createLogs(data, callback) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('logAnalytics', 'post', {
				data: data
			}).then(function (res) {
				return callback(res);
			});
		};
	}
	
	function updateAttendance(data) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('updateAttendance', 'post', {
				data: data
			}).then(function (res) {
				return console.log("Updated teh attendance");
			});
		};
	}
	
	function saveVisiteTopic(data, callback) {
		return function (dispatch) {
			return (0, _apiCaller2.default)('saveVisiteTopic', 'put', {
				data: data
			}).then(function (res) {
				return callback(res);
			});
		};
	}
	
	function markAsCompleteTopic(data) {
		return (0, _apiCaller2.default)('markAsCompleteTopic', 'put', {
			data: data
		});
	}
	
	function getTopicStatus(data) {
		return (0, _apiCaller2.default)('get-topic-status/' + data.roomId + '/' + data.topicId, 'get');
	}

/***/ },
/* 178 */,
/* 179 */
/***/ function(module, exports) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _messages;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	exports.default = {
	  locale: 'en',
	  messages: (_messages = {
	    siteTitle: 'instaVC - Business Suite',
	    addPost: 'Add Post',
	    switchLanguage: 'Switch Language',
	    twitterMessage: 'We are on Twitter',
	    by: 'By',
	    deletePost: 'Delete Post',
	    createNewPost: 'Create new post',
	    authorName: 'Author\'s Name',
	    postTitle: 'Post Title',
	    postContent: 'Post Content',
	    submit: 'Submit',
	    comment: 'user {name} {value, plural,\n          =0 {does not have any comments}\n          =1 {has # comment}\n          other {has # comments}\n        }',
	    HTMLComment: 'user <b style=\'font-weight: bold\'>{name} </b> {value, plural,\n          =0 {does not have <i style=\'font-style: italic\'>any</i> comments}\n          =1 {has <i style=\'font-style: italic\'>#</i> comment}\n          other {has <i style=\'font-style: italic\'>#</i> comments}\n        }',
	    nestedDateComment: 'user {name} {value, plural,\n          =0 {does not have any comments}\n          =1 {has # comment}\n          other {has # comments}\n        } as of {date}',
	    loginTitle: 'Login',
	    login_prompt: 'Please sign in to your instaVC account',
	    email_address: 'Email Address',
	    password: 'Password',
	    sign_in: 'Sign in',
	    sign_up: 'Sign up',
	    keep_signed_in: 'Please keep me signed in',
	    forgotten_password: 'I’ve forgotten my password',
	    privacy_policy: 'Privacy Policy ',
	    terms_conditions: 'Terms & Conditions',
	    my_profile: 'My Profile',
	    work_education: 'Work & Education',
	    contacts: 'Contact Info',
	    personal_info: 'Personal Info',
	    company_details: 'Company Details',
	    about_me: 'About Me',
	    full_name: 'Full Name',
	    email: 'E-mail',
	    phone: 'Phone Number',
	    position: 'Position',
	    department: 'Department',
	    activities: 'Recent Activities',
	    edit: 'Edit',
	    cancel: 'Cancel',
	    save: 'Save',
	    delete: 'Delete',
	    list: 'List',
	    new: 'New',
	    general_info: 'General Info',
	    first_name: 'First Name',
	    last_name: 'Last Name',
	    gender: 'Gender',
	    contact_details: 'Contact Details',
	    male: 'Male',
	    female: 'Female',
	    corporate_directory: 'Corporate Directory',
	    user_info: 'User Info',
	    credential_access: 'Credential & Access',
	    default_room: 'Default Room',
	    business_id: 'Business Id',
	    business_name: 'Business Name',
	    business_type: 'Business Type',
	    corporate_type: 'Corporate Type',
	    website: 'Website',
	    company_status: 'Company Status',
	    schedule_type: 'Schedule Type',
	    name: 'Name',
	    address: 'Address',
	    street: 'Street',
	    district: 'District',
	    state: 'State',
	    country: 'Country',
	    pincode: 'Pincode',
	    license_details: 'License Details',
	    publish_limit: 'Publish Limit',
	    room_limit: 'Room Limit',
	    no_p2p: 'No. of P2P',
	    subscriber_limit: 'Subscriber Limit',
	    users_limit: 'Users Limit',
	    legal_doc_details: 'Legal Document Details',
	    pan_number: 'PAN Number',
	    tan_id: 'TAN Id',
	    active: 'Active',
	    inactive: 'Inactive',
	    calendar: 'Calendar',
	    contact_name: 'Contact Name',
	    contact_phone_number: 'Contact Phone Number',
	    view: 'View',
	    title_company_details: 'Below are the details about the Company you have created',
	    title_category_details: 'Below are the details about the Category you have created',
	    corporate_info: "Corporate Info",
	    all_corporates: "All Corporates",
	    title_list_details: 'Below are the list of',
	    corporate_list: 'Corporate List',
	    hidden: " ",
	    company_code: 'Company Code',
	    role: "Role",
	    new_user: 'New User',
	    edit_user: 'Edit User',
	    all_users: "All Users",
	    date: 'Date',
	    user_details: 'User Details',
	    room: 'Room',
	    smtp_details: 'SMTP Details',
	    api_key: 'Api key',
	    domain: 'Domain',
	    username: 'Username',
	    server: 'Server',
	    smtp_setting: "SMTP Settings",
	    basic_info: 'Basic Info',
	    select_package: 'Select Package',
	    room_name: 'Room Name',
	    room_type: 'Conference Type',
	    room_password: 'Room Password',
	    other_details: 'Other Details',
	    corporate_name: 'Corporate Name',
	    host_password: 'Host Password',
	    bridge_number: 'Bridge Number',
	    room_manager: 'Room Manager',
	    my_room: 'My Room',
	    room_users: 'Room Users',
	    room_user: 'Room User',
	    new_room: 'New Room',
	    all_rooms: 'All Rooms',
	    add_user_to_room: 'Add User To Room',
	    package_name: 'Package Name',
	    title_created_room_details: 'Below are the details about the Room you have created.',
	    room_license: 'Room License',
	    mcu_server: 'Mcu Server',
	    title_contact_details: 'Below are the users added to this Room',
	    package_details: 'Package Details',
	    package_manager: 'Package Manager',
	    package_info: 'Package Info',
	    package_price: 'Package Price',
	    user_count: 'User Count',
	    user_presence: 'User Presence',
	    package_validity: 'Package Validity',
	    server_location: 'Server Location',
	    assigned_to: 'Assigned To',
	    title_about_package: 'Below are the details about the package you have created.',
	    search_contacts: 'Search Contacts',
	    search_assigned_to_contacts: 'Search contacts to assign.',
	    add: 'Add',
	    dashboard: 'Dashboard',
	    my_account: 'My Account',
	    manage_user: 'Manage Users',
	    reports: 'Reports',
	    ldap_settings: 'LDAP Settings',
	    room_management: 'Room Management',
	    package_management: 'Package Management',
	    category_management: 'Category Management',
	    logout: 'Log Out',
	    settings: 'Settings',
	    ldap_details: 'LDAP Details'
	  }, _defineProperty(_messages, 'domain', 'Domain'), _defineProperty(_messages, 'base_dn', 'Base DN'), _defineProperty(_messages, 'url', 'URL'), _defineProperty(_messages, 'bind_cn', 'Bind CN'), _defineProperty(_messages, 'bind_password', 'Bind Password'), _defineProperty(_messages, 'force_login', 'Force Login'), _defineProperty(_messages, 'new_category', 'New Category'), _defineProperty(_messages, 'all_categories', 'All Categories'), _defineProperty(_messages, 'edit_category', 'Edit Category'), _defineProperty(_messages, 'category_details', 'Category Details'), _defineProperty(_messages, 'category_name', 'Category Name'), _defineProperty(_messages, 'category_desc', 'Category Description'), _defineProperty(_messages, 'category_list', 'Category List'), _defineProperty(_messages, 'package_list', 'Package List'), _defineProperty(_messages, 'room_list', 'Room List'), _defineProperty(_messages, 'user_list', 'User List'), _defineProperty(_messages, 'corporate_detail', 'Corporate Details'), _defineProperty(_messages, 'true', 'true'), _defineProperty(_messages, 'false', 'false'), _defineProperty(_messages, 'conference', 'Conference'), _defineProperty(_messages, 'lms', 'LMS'), _defineProperty(_messages, 'crm', 'CRM'), _defineProperty(_messages, 'presenter', 'Presenter'), _defineProperty(_messages, 'admin', 'Admin'), _defineProperty(_messages, 'user', 'User'), _defineProperty(_messages, 'mix', 'Mix'), _defineProperty(_messages, 'forward', 'Forward'), _defineProperty(_messages, 'hybrid', 'Hybrid'), _defineProperty(_messages, 'desc', 'Description'), _defineProperty(_messages, 'no_users_found', 'No Users Found.'), _defineProperty(_messages, 'my_contacts', 'My Contacts'), _defineProperty(_messages, 'chat', 'Chat'), _defineProperty(_messages, 'mute_unmute', 'Mute / Unmute'), _defineProperty(_messages, 'disable_enable', 'Disable / Enable'), _defineProperty(_messages, 'start_recoding', 'Start Recording'), _defineProperty(_messages, 'expand_contract', 'Expand / Contract'), _defineProperty(_messages, 'no_recent_contacts', 'No Recent Contacts'), _defineProperty(_messages, 'add_your_contacts', 'Add your contacts'), _defineProperty(_messages, 'close', 'Close'), _defineProperty(_messages, 'sandra_smith', 'Sandra Smith'), _defineProperty(_messages, 'say_something', 'Say something...'), _defineProperty(_messages, 'video_quality', 'Video Quality'), _defineProperty(_messages, 'languages', 'Languages'), _defineProperty(_messages, 'help', 'Help'), _defineProperty(_messages, 'add_contacts', 'Add Contacts'), _defineProperty(_messages, 'attach_file', 'Attach file'), _defineProperty(_messages, 'search_contacts_add', 'Search contacts to add to your contacts list.'), _defineProperty(_messages, 'set_language', 'Set Language'), _defineProperty(_messages, 'set_video_qulity', 'Set video resolution'), _defineProperty(_messages, 'push_the_message', 'Push the message'), _defineProperty(_messages, 'invite_others', 'Invite others to join instantly'), _defineProperty(_messages, 'regenerate', 'Regenerate'), _defineProperty(_messages, 'copy_this_link', 'Copy this link'), _defineProperty(_messages, 'share_Link', 'Share Link'), _defineProperty(_messages, 'open_mail_client', 'Open Mail Client'), _defineProperty(_messages, 'start_conference', 'Start Conference'), _defineProperty(_messages, 'create_new_room', 'Create new Room'), _defineProperty(_messages, 'add_participants', 'Add participants'), _defineProperty(_messages, 'search_room', 'Search Room'), _defineProperty(_messages, 'my_rooms', 'My Rooms'), _defineProperty(_messages, 'select_your_room', 'Select your Room'), _defineProperty(_messages, 'presenter_mode', 'Presenter Mode'), _defineProperty(_messages, 'conference_mode', 'Conference Mode'), _defineProperty(_messages, 'valid_untill', 'Valid Until'), _defineProperty(_messages, 'search_rooms', 'Search Rooms...'), _defineProperty(_messages, 'schedules_new', 'Schedule Conference'), _defineProperty(_messages, 'schedule_meeting', 'Schedule Meeting'), _defineProperty(_messages, 'past_schedules', 'Past Schedules'), _defineProperty(_messages, 'no_schedules', 'No Schedules'), _defineProperty(_messages, 'create_schedule', 'Create your schedule  by clicking the Schedule Conference button'), _defineProperty(_messages, 'meeting_name', 'Meeting Name'), _defineProperty(_messages, 'please_enter_meeting_name', 'Please enter meeting name'), _defineProperty(_messages, 'create_edit_conference', 'Create/Edit Conference'), _defineProperty(_messages, 'choose_anavailable_date', 'Choose an available date'), _defineProperty(_messages, 'set_start_time', 'Set Start Time'), _defineProperty(_messages, 'set_duration', 'Set Duration'), _defineProperty(_messages, 'recurring_schedule', 'Recurring Schedule'), _defineProperty(_messages, 'repeats', 'Repeats'), _defineProperty(_messages, 'repeat_every', 'Repeat Every'), _defineProperty(_messages, 'set_conference_password', 'Set your conference password.'), _defineProperty(_messages, 'invite', 'Invite'), _defineProperty(_messages, 'start', 'Start'), _defineProperty(_messages, 'organizer', 'Organizer'), _defineProperty(_messages, 'edit_schedule', 'Edit this schedule'), _defineProperty(_messages, 'delete_schedule', 'Delete this schedule'), _defineProperty(_messages, 'invite_contacts', 'Invite contacts'), _defineProperty(_messages, 'invite_people', 'Invite People'), _defineProperty(_messages, 'join_meeting', 'Please join my meeting from your desktop, tablet or smartphone'), _defineProperty(_messages, 'conference_room_url', 'Invitation URL'), _defineProperty(_messages, 'enter_email', 'Enter email'), _defineProperty(_messages, 'please_enter', 'Please enter the mail id...'), _defineProperty(_messages, 'enter_meeting_name', 'Please enter the meeting name.'), _defineProperty(_messages, 'select_room', 'Please select the Room.'), _defineProperty(_messages, 'minimum_date', 'Please select current or future date.'), _defineProperty(_messages, 'start_time_greater', 'Start time should be greater than current time.'), _defineProperty(_messages, 'end_time_greater', 'End time should be greater than start time.'), _defineProperty(_messages, 'video_resolution', 'For SIF Video Resolution'), _defineProperty(_messages, 'video_graphics', 'For Video Graphics Array (VGA) Video Resolution'), _defineProperty(_messages, 'hd_video', 'For HD Video Resolution'), _defineProperty(_messages, 'full_hd', 'For Full HD Video Resolution'), _defineProperty(_messages, 'online', 'Online'), _defineProperty(_messages, 'away', 'Away'), _defineProperty(_messages, 'offline', 'Offline'), _defineProperty(_messages, 'do_not_disturb', 'Do not disturb'), _defineProperty(_messages, 'locale', 'Locale'), _defineProperty(_messages, 'time_zone', 'Time Zone'), _defineProperty(_messages, 'date_format', 'Date Format'), _defineProperty(_messages, 'time_format', 'Time Format'), _defineProperty(_messages, 'currency_format', 'Currency Format'), _defineProperty(_messages, 'prefered_language', 'Preferred Language'), _defineProperty(_messages, 'room_topic', 'Topics'), _defineProperty(_messages, 'my_topic', 'My Topic'), _defineProperty(_messages, 'room_topic_manager', 'Room Topic Manager'), _defineProperty(_messages, 'topic_name', 'Topic Name'), _defineProperty(_messages, 'description', 'Description'), _defineProperty(_messages, 'topic_details', 'Topic Information'), _defineProperty(_messages, 'upload', 'Upload'), _defineProperty(_messages, 'upload_file', 'Upload File'), _defineProperty(_messages, 'upload_media', 'Upload Media'), _defineProperty(_messages, 'upload_sco', 'Upload SCO'), _defineProperty(_messages, 'topic_list', 'Topic List'), _defineProperty(_messages, 'upload_list', 'Upload List'), _defineProperty(_messages, 'file_name', 'File Name'), _defineProperty(_messages, 'openfile', 'Download'), _defineProperty(_messages, 'questionnaire', 'Questionnaire'), _defineProperty(_messages, 'all_questionnaire', 'All Questionnaire'), _defineProperty(_messages, 'questionnaire_list', 'Questionnaire List'), _defineProperty(_messages, 'add_questionnaire', 'Add Questionnaire'), _defineProperty(_messages, 'questionnaire_details', 'Questionnaire Information'), _defineProperty(_messages, 'questionnaire_name', 'Questionnaire Name'), _defineProperty(_messages, 'view_questionnaire', 'View Questionnaire'), _defineProperty(_messages, 'questions', 'Questions'), _defineProperty(_messages, 'questionnaire_details', 'Questionnaire Details'), _defineProperty(_messages, 'title_questionnaire_details', 'Below are the details about the questionnaire you have created.'), _defineProperty(_messages, 'selectroom', 'Select Room'), _defineProperty(_messages, 'no_rooms', 'No rooms have been created'), _defineProperty(_messages, 'create_a_room', 'Create a Room'), _defineProperty(_messages, 'requiedField', 'Please'), _defineProperty(_messages, 'help_content', 'Help Content.'), _defineProperty(_messages, 'no_data_yet', 'No Data Yet!'), _defineProperty(_messages, 'add_question', 'Add Question'), _defineProperty(_messages, 'title_question_details', 'Below are the questions added to this questionnaire'), _defineProperty(_messages, 'deletefile', 'Delete present file'), _defineProperty(_messages, 'edit_questionnaire', 'Edit Questionnaire'), _defineProperty(_messages, 'local_settings', 'Locale Settings'), _defineProperty(_messages, 'select_company', 'Select Company'), _defineProperty(_messages, 'select_gender', 'Select Gender'), _defineProperty(_messages, 'select_role', 'Select Role'), _defineProperty(_messages, 'files', 'Files'), _defineProperty(_messages, 'content', 'Content'), _defineProperty(_messages, 'edit_question', 'Edit Question'), _defineProperty(_messages, 'feedback', 'Feedback'), _defineProperty(_messages, 'all_feedback', "All Feedback"), _defineProperty(_messages, 'user_feedback', 'User Feedback'), _defineProperty(_messages, 'feedback_text', 'Please enter your comment'), _defineProperty(_messages, 'assign_questionnaire', "Assign Questionnaire"), _defineProperty(_messages, 'title_questionnaire_assigned', 'Below are the questionnaires assigned to this topic'), _defineProperty(_messages, 'automatic', 'Automatic'), _defineProperty(_messages, 'set', 'Set'), _defineProperty(_messages, 'change_password', 'Change Password'), _defineProperty(_messages, 'old_pwd', 'Old Password'), _defineProperty(_messages, 'new_pwd', 'New Password'), _defineProperty(_messages, 're_new_pwd', 'Retype new password'), _defineProperty(_messages, 'forgot_password', 'Forgot Password'), _defineProperty(_messages, 'reset_prompt', 'Reset Password'), _defineProperty(_messages, 'forgot_prompt', 'Kindly enter your email address'), _defineProperty(_messages, 'dd_mm_yyyy', 'DD/MM/YYYY'), _defineProperty(_messages, 'dd_mm_yy', 'DD/MM/YY'), _defineProperty(_messages, 'ddmmyyyy', 'DD-MM-YYYY'), _defineProperty(_messages, 'hh_mm_ss', 'HH:MM:SS'), _defineProperty(_messages, 'usd', 'USD'), _defineProperty(_messages, 'indian_rupee', 'Indian Rupee'), _defineProperty(_messages, 'english', 'English'), _defineProperty(_messages, 'hindi', 'Hindi'), _defineProperty(_messages, 'edit_corporate', 'Edit Corporate'), _defineProperty(_messages, 'user_directory', 'User Directory'), _defineProperty(_messages, 'new_corporate', "New Corporate"), _defineProperty(_messages, 'all_packages', 'All Packages'), _defineProperty(_messages, 'package_directory', 'Package Directory'), _defineProperty(_messages, 'new_package', 'New Package'), _defineProperty(_messages, 'edit_package', 'Edit Package'), _defineProperty(_messages, 'room_directory', 'Room Directory'), _defineProperty(_messages, 'room_details', 'Room Details'), _defineProperty(_messages, 'room_info', 'Room Info'), _defineProperty(_messages, 'category_directory', 'Category Directory'), _defineProperty(_messages, 'category_info', 'Category Info'), _defineProperty(_messages, 'smtp_info', 'SMTP Info'), _defineProperty(_messages, 'ldap_info', 'LDAP Info'), _defineProperty(_messages, 'upload_url', 'URL Upload'), _defineProperty(_messages, 'invalid_date', 'Please select / enter valid Date'), _defineProperty(_messages, 'invalid_start_time', 'Invalid start time'), _defineProperty(_messages, 'invalid_end_time', 'Invalid end time'), _defineProperty(_messages, 'invalid_enddate', 'Invalid end date'), _defineProperty(_messages, 'select_the_days', 'Please select the days'), _defineProperty(_messages, 'select_the_endson', 'Please select the ends on'), _defineProperty(_messages, 'enter_occurence', 'Please enter the no. of occurences'), _defineProperty(_messages, 'category_name', 'Category Name'), _defineProperty(_messages, 'all', 'All'), _defineProperty(_messages, 'image', 'Image'), _defineProperty(_messages, 'application', 'Application'), _defineProperty(_messages, 'video', 'Video'), _defineProperty(_messages, 'audio', 'Audio'), _defineProperty(_messages, 'zip', 'Zip'), _defineProperty(_messages, 'search', 'Search....'), _defineProperty(_messages, 'result_list', 'Result List'), _defineProperty(_messages, 'candidate_name', 'Candidate Name'), _defineProperty(_messages, 'result_details', 'Result Details'), _defineProperty(_messages, 'my_groups', 'My Groups'), _defineProperty(_messages, 'no_recent_groups', 'No Recent Groups'), _defineProperty(_messages, 'add_your_groups', 'Add your groups'), _defineProperty(_messages, 'create_group', 'Create Group'), _defineProperty(_messages, 'group_name', 'Group Name'), _defineProperty(_messages, 'questionnaire_result', 'Result'), _defineProperty(_messages, 'room_feedback', 'Feedback List'), _defineProperty(_messages, 'user_name', 'User Name'), _defineProperty(_messages, 'over_all_rating', 'Over All Rating'), _defineProperty(_messages, 'knowlegable_session', 'Knowledgeable Session'), _defineProperty(_messages, 'instructor_skills', 'Presenter Skills'), _defineProperty(_messages, 'content_sharing', 'Content Sharing'), _defineProperty(_messages, 'over_all_rating', 'Rating'), _defineProperty(_messages, 'user_comment', 'User Comment'), _defineProperty(_messages, 'audio_quality', 'Audio Quality'), _defineProperty(_messages, 'user_feedback_data', 'Feedback'), _defineProperty(_messages, 'individual_feedback', 'Feedback details submitted by user'), _defineProperty(_messages, 'feedback_details', 'Individual Feedback details'), _defineProperty(_messages, 'multiple_delete', 'Multiple Delete'), _defineProperty(_messages, 'no_recent_member', 'No Recent Members'), _defineProperty(_messages, 'add_your_members', 'Add your members'), _defineProperty(_messages, 'add_member', 'Add Member'), _defineProperty(_messages, 'search_members_add', 'Search contacts to add to your Gorup.'), _defineProperty(_messages, 'back_to_room', 'Back to Room'), _defineProperty(_messages, 'add_student', 'Add Attendee'), _defineProperty(_messages, 'instructor_name', 'Presenter Name'), _defineProperty(_messages, 'room_student_to_instructor', 'Add Attendee to Presenter'), _defineProperty(_messages, 'search_students', 'Search Attendee'), _defineProperty(_messages, 'whiteboard', 'Whiteboard'), _defineProperty(_messages, 'screen_share', 'Screen Share'), _defineProperty(_messages, 'topics', 'Topics'), _defineProperty(_messages, 'hand_raise', 'Q&A'), _defineProperty(_messages, 'topics_list', 'Topics List'), _defineProperty(_messages, 'welcome_room', 'Welcome to Room:'), _defineProperty(_messages, 'fulltopic', 'Read more...'), _defineProperty(_messages, 'search_attendees', 'Search Attendees'), _defineProperty(_messages, 'no_topics_yet', 'No Topics Yet!..'), _defineProperty(_messages, 'list_topics', 'Below are the list of topics related to this room.'), _defineProperty(_messages, 'have_schedule', 'Already have a schedule'), _defineProperty(_messages, 'your_selected_date', 'Your selected dates'), _defineProperty(_messages, 'presenter', 'Presenter'), _defineProperty(_messages, 'telepresence', 'Telepresence'), _defineProperty(_messages, 'record', 'Record'), _defineProperty(_messages, 'no_attendees_present', 'No Attendees present'), _defineProperty(_messages, 'no_user_added', 'No Users added to this room'), _defineProperty(_messages, 'delete_group', 'Delete group'), _defineProperty(_messages, 'location_name', 'Location Name'), _defineProperty(_messages, 'location_directory', 'Location Directory'), _defineProperty(_messages, 'location_details', 'Location Details'), _defineProperty(_messages, 'location_list', 'Location List'), _defineProperty(_messages, 'title_created_location_details', 'Below are the details about the location you have created.'), _defineProperty(_messages, 'no_questions', 'No Questions'), _defineProperty(_messages, 'location_info', 'Location Info'), _defineProperty(_messages, 'edit_location', 'Edit Location'), _defineProperty(_messages, 'new_location', 'New Location'), _defineProperty(_messages, 'all_locations', 'All Locations'), _defineProperty(_messages, 'location', 'Location'), _defineProperty(_messages, 'room_location', 'Room Locations'), _defineProperty(_messages, 'course_location', 'Room Location'), _defineProperty(_messages, 'addlocation', 'Add Location'), _defineProperty(_messages, 'room_chat', 'Room Chat'), _defineProperty(_messages, 'title_location_details', 'Below are the locations added to this Room'), _defineProperty(_messages, 'viewprofile', 'View Profile'), _defineProperty(_messages, 'back', 'Back'), _defineProperty(_messages, 'profile', 'Profile'), _defineProperty(_messages, 'add_feedback', 'Add Feedback'), _defineProperty(_messages, 'manage', 'Manage'), _defineProperty(_messages, 'ask', 'Ask'), _defineProperty(_messages, 'ask_question', 'Ask Question'), _defineProperty(_messages, 'previous_questions', 'Previous Questions'), _defineProperty(_messages, 'post', 'Post'), _defineProperty(_messages, 'answers', 'Answers'), _defineProperty(_messages, 'make_speaker', 'Request Video'), _defineProperty(_messages, 'answer_the_question', 'Answer the Question'), _defineProperty(_messages, 'reply', 'reply'), _defineProperty(_messages, 'your_comment', 'Your Comment'), _defineProperty(_messages, 'post_comment', 'Comment'), _defineProperty(_messages, 'previous_answers', 'Previous Answers'), _defineProperty(_messages, 'comment_on_answer', 'Comment on Answer'), _defineProperty(_messages, 'make_this_user_the_speaker', 'Make this user the Speaker'), _defineProperty(_messages, 'delete_the_question', 'Delete the question'), _defineProperty(_messages, 'edit_the_question', 'Edit the question'), _defineProperty(_messages, 'see_all_answers', 'See all answers'), _defineProperty(_messages, 'media_resources', 'Media Resources'), _defineProperty(_messages, 'documents', 'Documents'), _defineProperty(_messages, 'questionnaires', 'Questionnaires'), _defineProperty(_messages, 'no_questionnaires_yet', 'No Questionnaires Yet!'), _defineProperty(_messages, 'start_date', 'Start Date'), _defineProperty(_messages, 'end_date', 'End Date'), _defineProperty(_messages, 'choose_question_answers', 'Choose the correct answer from the questions listed below'), _defineProperty(_messages, 'no_files_yet', 'No Files Yet!'), _defineProperty(_messages, 'no_questions_yet', 'No Questions Yet!'), _defineProperty(_messages, 'not_attempted', 'Not Attempted!'), _defineProperty(_messages, 'locale_directory', 'Locale Direcrory'), _defineProperty(_messages, 'share_your_screen', 'Share your screen!'), _defineProperty(_messages, 'city_town', 'City / Town'), _defineProperty(_messages, 'landmark', 'Landmark'), _defineProperty(_messages, 'contact_information', 'Contact Information'), _defineProperty(_messages, 'website_and_social_links', 'Website and social links'), _defineProperty(_messages, 'basic_information', 'Basic Information'), _defineProperty(_messages, 'add_address', 'Add Address'), _defineProperty(_messages, 'add_website', 'Add Website'), _defineProperty(_messages, 'add_social_link', 'Add social link'), _defineProperty(_messages, 'add_basic_information', 'Add Basic Information'), _defineProperty(_messages, 'social_link', 'Social Link'), _defineProperty(_messages, 'birthday', 'Birthday'), _defineProperty(_messages, 'save_changes', 'Save Changes'), _defineProperty(_messages, 'birth_year', 'Birth Year'), _defineProperty(_messages, 'add_a_social_links', 'Add a social link'), _defineProperty(_messages, 'add_college', 'Add College'), _defineProperty(_messages, 'add_workplace', 'Add Workplace'), _defineProperty(_messages, 'add_highSchool', 'Add High School'), _defineProperty(_messages, 'add_professionalSkills', 'Add Professional Skills'), _defineProperty(_messages, 'work_title', 'Work'), _defineProperty(_messages, 'professionalSkills_title', 'Professional Skills'), _defineProperty(_messages, 'college_title', 'College'), _defineProperty(_messages, 'highSchool_title', 'High School'), _defineProperty(_messages, 'work_education_timeperiod', 'Time Period'), _defineProperty(_messages, 'work_education_desciption', 'Description'), _defineProperty(_messages, 'work_education_graduated', 'Graduated'), _defineProperty(_messages, 'work_education_school', 'School'), _defineProperty(_messages, 'work_education_concentration', 'Concentration'), _defineProperty(_messages, 'work_education_company', 'Company'), _defineProperty(_messages, 'work_education_position', 'Position'), _defineProperty(_messages, 'work_education_university', 'University'), _defineProperty(_messages, 'work_education_workStatus', 'I currently work here'), _defineProperty(_messages, 'work_education_saveChanges', 'Save Changes'), _defineProperty(_messages, 'work_company_placeholder', 'Where have you worked?'), _defineProperty(_messages, 'work_position_placeholder', 'What is your job title?'), _defineProperty(_messages, 'college_university_placeholder', 'Which college/university did you attend?'), _defineProperty(_messages, 'school_placeholder', 'Which school did you attend?'), _defineProperty(_messages, 'sync', 'Sync'), _defineProperty(_messages, 'pointer', 'Pointer'), _defineProperty(_messages, 'pencil', 'Pencil'), _defineProperty(_messages, 'square', 'Square'), _defineProperty(_messages, 'circle', 'Circle'), _defineProperty(_messages, 'oval', 'Oval'), _defineProperty(_messages, 'line', 'Line'), _defineProperty(_messages, 'alphabets', 'Alphabets'), _defineProperty(_messages, 'erase_all', 'Erase All'), _defineProperty(_messages, 'fill_background_colors', 'Fill Background Colors'), _defineProperty(_messages, 'background', 'Background'), _defineProperty(_messages, 'stroke', 'Stroke'), _defineProperty(_messages, 'line_color', 'Line color'), _defineProperty(_messages, 'no_participants', 'No Participants'), _defineProperty(_messages, 'no_conference_loaded', 'No Conference Loaded...'), _defineProperty(_messages, 'loading', 'Loading'), _defineProperty(_messages, 'loading_please_wait', 'Loading! please wait'), _defineProperty(_messages, 'current_password', 'Current Password'), _defineProperty(_messages, 'new_password', 'New Password'), _defineProperty(_messages, 'retype_new_password', 'Retype New Password'), _defineProperty(_messages, 'please_provide_your_valuable_feedback', 'Please provide your valuable feedback'), _defineProperty(_messages, 'video_quality', 'Video Quality'), _defineProperty(_messages, 'rate_the_quality_of_the_video_you_experienced', 'Rate the quality of the video you experienced'), _defineProperty(_messages, 'audio_quality', 'Audio Quality'), _defineProperty(_messages, 'rate_the_quality_of_the_audio_you_experienced', 'Rate the quality of the audio you experienced'), _defineProperty(_messages, 'content_sharing', 'Content Sharing'), _defineProperty(_messages, 'rate_the_quality_of_the_content_sharing_you_experienced', 'Rate the quality of the content sharing you experienced'), _defineProperty(_messages, 'knowlegeable_session', 'Knowledgeable Session'), _defineProperty(_messages, 'rate_how_Knowlegeable_this_session_was', 'Rate how Knowledgeable this session was'), _defineProperty(_messages, 'instructor_skills', 'Presenter Skills'), _defineProperty(_messages, 'rate_how_good_instructor_presented_the_subject', 'Rate how good Presenter presented the subject'), _defineProperty(_messages, 'overall_rating', 'Overall Rating'), _defineProperty(_messages, 'provide_the_overall_rating', 'Provide the overall rating'), _defineProperty(_messages, 'your_comments', 'Your Comments'), _defineProperty(_messages, 'your_comments_are_highly_appreciated', 'Your comments are highly appreciated'), _defineProperty(_messages, 'no_thanks', 'No Thanks'), _defineProperty(_messages, 'poor', 'Poor'), _defineProperty(_messages, 'average', 'Average'), _defineProperty(_messages, 'good', 'Good'), _defineProperty(_messages, 'very_good', 'Very Good'), _defineProperty(_messages, 'excellent', 'Excellent'), _defineProperty(_messages, 'feedback_submit', 'Submit'), _defineProperty(_messages, 'become_host_to_access_bellow_features', 'Become host to access bellow features'), _defineProperty(_messages, 'screen_shared', 'Screen Shared!'), _defineProperty(_messages, 'you_are_sharing_your_screen', 'You are sharing your screen!'), _defineProperty(_messages, 'ok', 'OK'), _defineProperty(_messages, 'warning', 'Warning'), _defineProperty(_messages, 'delete_question_alert', 'Are you sure you want to delete this question?'), _defineProperty(_messages, 'delete_category_alert', 'Are you sure you want to delete this category?'), _defineProperty(_messages, 'delete_corporate_alert', 'Are you sure you want to delete this corporate?'), _defineProperty(_messages, 'delete_location_alert', 'Are you sure you want to delete this location?'), _defineProperty(_messages, 'delete_package_alert', 'Are you sure you want to delete this package?'), _defineProperty(_messages, 'delete_address_alert', 'Are you sure you want to delete this address?'), _defineProperty(_messages, 'delete_link_alert', 'Are you sure you want to delete this website link?'), _defineProperty(_messages, 'delete_social_link_alert', 'Are you sure you want to delete this social link?'), _defineProperty(_messages, 'delete_birth_day_alert', 'Are you sure you want to delete birthday?'), _defineProperty(_messages, 'delete_gender_alert', 'Are you sure you want to delete gender?'), _defineProperty(_messages, 'delete_school_alert', 'Are you sure you want to delete this school?'), _defineProperty(_messages, 'delete_college_alert', 'Are you sure you want to delete this college?'), _defineProperty(_messages, 'delete_workplace_alert', 'Are you sure you want to delete this workplace?'), _defineProperty(_messages, 'delete_professional_alert', 'Are you sure you want to delete this professional skill?'), _defineProperty(_messages, 'delete_user_alert', 'Are you sure you want to delete this user?'), _defineProperty(_messages, 'delete_room_alert', 'Are you sure you want to delete this room?'), _defineProperty(_messages, 'delete_topic_alert', 'Are you sure you want to delete this topic?'), _defineProperty(_messages, 'delete_file_alert', 'Are you sure you want to delete this file?'), _defineProperty(_messages, 'delete_all_files_alert', 'Are you sure you want to delete all this files?'), _defineProperty(_messages, 'delete_questionaire_alert', 'Are you sure you want to delete this questionnaire?'), _defineProperty(_messages, 'delete_schedule_alert', 'Are you sure you want to delete this schedule?'), _defineProperty(_messages, 'edit_schedule_alert', 'If you edit the schedule the invitation link needs  to be sent again. Do you really want to edit?'), _defineProperty(_messages, 'delete_whiteboardObjects_alert', 'Are you sure you want to delete?'), _defineProperty(_messages, 'logout_confirm_incall', 'You are in call, are you sure you want to logout?'), _defineProperty(_messages, 'author', 'Author'), _defineProperty(_messages, 'selected_codec', 'Selected Codec'), _defineProperty(_messages, 'start_time', 'Start time'), _defineProperty(_messages, 'end_time', 'End time'), _defineProperty(_messages, 'delete_room_user_alert', 'Are you sure you want to remove the user?'), _defineProperty(_messages, 'chat_file_alert', 'File Size should be less than 20MB!..'), _defineProperty(_messages, 'share_file_alert', 'File Size should be less than 10MB!..'), _defineProperty(_messages, 'topic_file_alert', 'File Size should be less than 20MB!..'), _defineProperty(_messages, 'url_alert', 'Enter a URL!..'), _defineProperty(_messages, 'valid_url_alert', 'Not a valid URL!..'), _defineProperty(_messages, 'unassign_question_alert', 'Are you sure you want to unassign the questionnaire?'), _defineProperty(_messages, 'generate_meeting_alert', 'Meetings already scheduled for this room, Do you want to regenarate?'), _defineProperty(_messages, 'questionnaire_alert', 'Questionnaire not started yet!..'), _defineProperty(_messages, 'delete_group_alert', 'Are you sure you want to delete this group?'), _defineProperty(_messages, 'delete_member_group_alert', 'Are you sure you want to delete member from this group?'), _defineProperty(_messages, 'submitted_by', 'Submitted By'), _defineProperty(_messages, 'delete_room_user_alert', 'Are you sure you want to remove the user?'), _defineProperty(_messages, 'feedback_submitted_successfully', 'Feedback submitted Successfully'), _defineProperty(_messages, 'submitted', 'Submitted'), _defineProperty(_messages, 'question', 'Question'), _defineProperty(_messages, 'type', 'Type'), _defineProperty(_messages, 'mark_correct_answer', 'Enter the two answer choices and mark the correct answer'), _defineProperty(_messages, 'select_type', 'Select Type'), _defineProperty(_messages, 'remove', 'Remove'), _defineProperty(_messages, 'answer_choice', 'answer choice'), _defineProperty(_messages, 'delete_this_location', 'Delete this location'), _defineProperty(_messages, 'no_locations_yet', 'No Locations Yet!!!'), _defineProperty(_messages, 'enter_the_answer_choices_and_mark_which_answer_is_correct', 'Enter the answer choices, and mark which answer is correct'), _defineProperty(_messages, 'transport_title', 'Transport?'), _defineProperty(_messages, 'uploadtotopic_title', 'Choose the content type to upload files in this topic.'), _defineProperty(_messages, 'file_title', 'Files'), _defineProperty(_messages, 'media_title', 'Media'), _defineProperty(_messages, 'sco_title', 'Zip'), _defineProperty(_messages, 'youtube_url_title', 'YouTube URL:'), _defineProperty(_messages, 'upload_title', 'Upload'), _defineProperty(_messages, 'filetypes_title', 'File Types:'), _defineProperty(_messages, 'youtube_url_placeholder', 'Paste link here: Eg: https://www.youtube.com/channel/UCdPJhu2eYCXIDo5hcTDw0_g'), _defineProperty(_messages, 'answer_sheet', 'Answer Sheet'), _defineProperty(_messages, 'answer_sheet_details', 'The answer sheet details'), _defineProperty(_messages, 'grade', 'Grade'), _defineProperty(_messages, 'open', 'Open'), _defineProperty(_messages, 'close', 'Close'), _defineProperty(_messages, 'select_location', 'Select Location'), _defineProperty(_messages, 'remove_user_from_room', 'Remove User from Room'), _defineProperty(_messages, 'add_user', 'Add User'), _defineProperty(_messages, 'add_student', 'Add Attendee'), _defineProperty(_messages, 'view_students', 'View Attendees'), _defineProperty(_messages, 'list_results', 'List Results'), _defineProperty(_messages, 'view_edit_questionaire_from_topic', 'View/Edit Questionnaire from Topic'), _defineProperty(_messages, 'unassign_questionnaire_from_topic', 'Unassign Questionnaire from Topic'), _defineProperty(_messages, 'remove_question_from_questionnaire', 'Remove Question from Questionnaire'), _defineProperty(_messages, 'view_edit_question_from_questionnaire', 'View/Edit Question from Questionnaire'), _defineProperty(_messages, 'participants_group', 'Participants Group'), _defineProperty(_messages, 'participants_list', 'Participants List'), _defineProperty(_messages, 'enter_group_name', 'Enter group name'), _defineProperty(_messages, 'not_allowed', 'Not Allowed'), _defineProperty(_messages, 'no_questions_added_to_this_questionnaire', 'No Questions added to this questionnaire.'), _defineProperty(_messages, 'feature_info', 'Features Info'), _defineProperty(_messages, 'features', 'Features'), _defineProperty(_messages, 'no_of_rooms', 'No. of Rooms'), _defineProperty(_messages, 'no_of_topics', 'No. of Topics'), _defineProperty(_messages, 'server_recording', 'Server Recording'), _defineProperty(_messages, 'client_recording', 'Client Recording'), _defineProperty(_messages, 'video_conference', 'Video Conference'), _defineProperty(_messages, 'continuous_presence', 'No. of Continuous Presence'), _defineProperty(_messages, 'title_groupParticipants_details', 'Below are participants added to this group'), _defineProperty(_messages, 'group_participants', 'Participants lists'), _defineProperty(_messages, 'delete_this_group', 'Delete this group'), _defineProperty(_messages, 'edit_group_name', 'Edit group name'), _defineProperty(_messages, 'add_participants_group', 'Add Participants to group'), _defineProperty(_messages, 'search_participants', 'Search Participants'), _defineProperty(_messages, 'delete_participant_alert', 'Do you want to remove this participant?'), _defineProperty(_messages, 'created_by', 'Created By'), _defineProperty(_messages, 'please_enter_group_name', 'Group name can not be empty'), _defineProperty(_messages, 'please_enter_participant_name', 'Please select participant'), _defineProperty(_messages, 'participants_group_list', 'Participants group list'), _defineProperty(_messages, 'room_configuration', 'Room Configuration'), _defineProperty(_messages, 'room_feedback_title', 'Feedback'), _defineProperty(_messages, 'configure_feedback', 'Configure Feedback'), _defineProperty(_messages, 'feedbackType_title', 'Feedback Type'), _defineProperty(_messages, 'configration', 'Configuration'), _defineProperty(_messages, 'codecType_title', 'Codec Type'), _defineProperty(_messages, 'enableLive_title', 'Enable Live'), _defineProperty(_messages, 'assign_questionaire', 'Assign Questionnaire'), _defineProperty(_messages, 'delete_SMTPSettings_alert', 'Are you sure you want to delete this SMTP Settings?'), _defineProperty(_messages, 'time_limit', 'Time Limit'), _defineProperty(_messages, 'no_time_limitations', 'No Time Limitations'), _defineProperty(_messages, 'delete_LDAPSettings_alert', 'Are you sure you want to delete this LDAP Settings?'), _defineProperty(_messages, 'previous', 'Previous'), _defineProperty(_messages, 'next', 'Next'), _defineProperty(_messages, 'back_to_uploadlist', 'Back to UploadList'), _defineProperty(_messages, 'enable_swot', 'Enable SWOT'), _defineProperty(_messages, 'select_an_answer_otherwise_it_will_not_be_considered_for_evaluation', 'Select an answer, otherwise it will not be considered for evaluation'), _defineProperty(_messages, 'export_users', 'Export Users'), _defineProperty(_messages, 'import_users', 'Import Users'), _defineProperty(_messages, 'import_format', 'Import Format'), _defineProperty(_messages, 'createdby', 'CreatedBy'), _defineProperty(_messages, 'count', 'Count'), _defineProperty(_messages, 'please_enter_the_question', 'Please enter the Question'), _defineProperty(_messages, 'invalid_mail_id', 'Invalid mail id.'), _defineProperty(_messages, 'accept', 'Accept'), _defineProperty(_messages, 'reject', 'Reject'), _defineProperty(_messages, 'request_pending', 'Request Pending'), _defineProperty(_messages, 'start_chating', 'Start chatting....!'), _defineProperty(_messages, 'pdf_view', 'PDF View'), _defineProperty(_messages, 'uploading_please_wait', 'Uploading! please wait'), _defineProperty(_messages, 'host_access', 'Host Access'), _defineProperty(_messages, 'become_host', 'Become Host'), _defineProperty(_messages, 'become_a_host', 'Become a Host'), _defineProperty(_messages, 'request_access_share', 'Request access to share screen / document'), _defineProperty(_messages, 'revoke', 'Revoke'), _defineProperty(_messages, 'enter_host_password', 'Enter Host Password'), _defineProperty(_messages, 'host_error', 'In-correct Host Password, please try again.'), _defineProperty(_messages, 'revoke_error', 'You are already Host. Do you want to Revoke...?'), _defineProperty(_messages, 'set_desc', 'Set Description'), _defineProperty(_messages, 'remove_participants_from_group', 'Remove participant from group'), _defineProperty(_messages, 'confirm_password', 'Confirm password'), _defineProperty(_messages, 'no_data_found', 'No data found'), _defineProperty(_messages, 'invalid_group_name', 'Invalid group name'), _defineProperty(_messages, 'no_groups_found', 'No Groups Found'), _defineProperty(_messages, 'start_class', 'Start Class'), _defineProperty(_messages, 'join_class', 'Join Class'), _defineProperty(_messages, 'create_a_class', 'Create a class'), _defineProperty(_messages, 'upcoming_classes', 'Upcoming Schedules'), _defineProperty(_messages, 'past_classes', 'Past Schedules'), _defineProperty(_messages, 'have_class', 'Already have a schedule'), _defineProperty(_messages, 'create_edit_class', 'Create/Edit Class'), _defineProperty(_messages, 'class_name', 'Class Name'), _defineProperty(_messages, 'please_enter_class_name', 'Please enter meeting name'), _defineProperty(_messages, 'my_classes', 'My classes'), _defineProperty(_messages, 'set_class_password', 'Set your class password.'), _defineProperty(_messages, 'edit_class', 'Edit this class'), _defineProperty(_messages, 'delete_class', 'Delete this class'), _defineProperty(_messages, 'select_language', 'Select Language'), _defineProperty(_messages, 'no_data_found', 'No data found'), _defineProperty(_messages, 'edit_class_alert', 'If you edit the class the invitation link needs  to be sent again. Do you really want to edit?'), _defineProperty(_messages, 'delete_class_alert', 'Are you sure you want to delete this class?'), _defineProperty(_messages, 'submitted_on', 'Submitted On'), _defineProperty(_messages, 'delete_Profile_image_alert', 'Are you sure you want to delete your Profile Picture'), _defineProperty(_messages, 'room_options', "Room options"), _defineProperty(_messages, 'room_assignments', 'Assignments'), _defineProperty(_messages, 'assignment_list', 'Assignment List'), _defineProperty(_messages, 'assignment_details', 'Assignment Information'), _defineProperty(_messages, 'assignment_name', 'Assignment Name'), _defineProperty(_messages, 'room_assignment_manager', 'Room Assignment Manager'), _defineProperty(_messages, 'list_assignments', 'Below are the list of assignments related to this room.'), _defineProperty(_messages, 'no_assignments_yet', 'No Assignments Yet!..'), _defineProperty(_messages, 'submissions', 'Submissions'), _defineProperty(_messages, 'submission_list', 'Submission List'), _defineProperty(_messages, 'student_name', 'Student Name'), _defineProperty(_messages, 'back_to_assignments', 'Back To Assignments'), _defineProperty(_messages, 'file', 'File'), _defineProperty(_messages, 'select', 'Select'), _defineProperty(_messages, 'add_topics', 'Add topics to room'), _defineProperty(_messages, 'become_host_to_share_your_document', 'Become host to share your document'), _defineProperty(_messages, 'share_your_document', 'Share your document!'), _defineProperty(_messages, 'share_your_screen_document', 'Share your screen / document!'), _defineProperty(_messages, 'manage_assignments', 'Manage Assignments'), _defineProperty(_messages, 'manage_questionnaire', 'Manage Questionnaire'), _defineProperty(_messages, 'plagiarism', 'Plagiarism'), _defineProperty(_messages, 'drag', 'Drag'), _defineProperty(_messages, 'delete_assignment_alert', 'All submissions will also be deleted, Are you sure you want to delete this assignment?'), _defineProperty(_messages, 'refresh_schedules', 'Refresh Schedules'), _defineProperty(_messages, 'schedules', 'Schedules'), _defineProperty(_messages, 'refresh_rooms', 'Refresh Rooms'), _defineProperty(_messages, 'creating_please_wait', 'Creating! please wait'), _defineProperty(_messages, 'updating_please_wait', 'Updating! please wait'), _defineProperty(_messages, 'enable', 'Enable'), _defineProperty(_messages, 'publish', 'Publish'), _defineProperty(_messages, 'categories', 'categories.'), _defineProperty(_messages, 'corporates', 'corporates.'), _defineProperty(_messages, 'feedbacks', 'feedbacks.'), _defineProperty(_messages, 'locations', 'locations.'), _defineProperty(_messages, 'packages', 'packages.'), _defineProperty(_messages, 'participants', 'participants in the group.'), _defineProperty(_messages, 'rooms', 'rooms.'), _defineProperty(_messages, 'users', 'users.'), _defineProperty(_messages, 'list_topic', 'topics.'), _defineProperty(_messages, 'list_files', 'files.'), _defineProperty(_messages, 'list_certificates', 'certificates'), _defineProperty(_messages, 'results', 'results.'), _defineProperty(_messages, 'polls', 'Polls'), _defineProperty(_messages, 'poll_list', 'Poll List'), _defineProperty(_messages, 'list_polls', 'Below are the list of polls related to this room.'), _defineProperty(_messages, 'no_polls_yet', 'No Polls Yet!..'), _defineProperty(_messages, 'package_validFrom', 'Valid From'), _defineProperty(_messages, 'create_poll', 'Create Poll'), _defineProperty(_messages, 'option', 'Option'), _defineProperty(_messages, 'package_validFrom', 'Valid From'), _defineProperty(_messages, 'title_created_plagiarism_details', 'Below are the details about the plagiarism check for upload.'), _defineProperty(_messages, 'plagiarism_info', 'Plagiarism Info'), _defineProperty(_messages, 'percents', 'Percents'), _defineProperty(_messages, 'copied_words', 'No.of CopiedWords'), _defineProperty(_messages, 'comparison_report', 'Comparison Report'), _defineProperty(_messages, 'cached_version', 'Cached Version'), _defineProperty(_messages, 'title', 'Title'), _defineProperty(_messages, 'introduction', 'Introduction'), _defineProperty(_messages, 'embeded_comparison', 'Embeded Comparison'), _defineProperty(_messages, 'plagiarism', 'Plagiarism'), _defineProperty(_messages, 'publish', 'Publish'), _defineProperty(_messages, 'published', 'Published'), _defineProperty(_messages, 'update_poll', 'Update Poll'), _defineProperty(_messages, 'delete_poll_alert', 'Are you sure you want to delete this poll?'), _defineProperty(_messages, 'delete_poll', 'Delete Poll'), _defineProperty(_messages, 'broadcast', 'Broadcast News'), _defineProperty(_messages, 'broadcast_news_list', 'Broadcast News list '), _defineProperty(_messages, 'no_broadcast', 'No broadcast News'), _defineProperty(_messages, 'broadcast_list', 'Broadcast list'), _defineProperty(_messages, 'no_submittions_yet', 'No Submissions Yet!..'), _defineProperty(_messages, 'list_poll_submissions', 'Below are the list of submissions related to this poll.'), _defineProperty(_messages, 'poll_analysis', 'Below is the analysis chart related to this poll.'), _defineProperty(_messages, 'delete_broadcast_alert', 'Are you sure you want to delete this broadcast news?'), _defineProperty(_messages, 'view_comments', 'Comments'), _defineProperty(_messages, 'view_all_comments', 'View all comments'), _defineProperty(_messages, 'edit_comment', 'Edit Comment'), _defineProperty(_messages, 'delete_comment', 'Delete comment'), _defineProperty(_messages, 'reply_on_comment', 'Reply on comment'), _defineProperty(_messages, 'reply_comment', 'Reply'), _defineProperty(_messages, 'previous_comments', 'Previous comment'), _defineProperty(_messages, 'comment_on_broadcast_news', 'Comment on broadcast news'), _defineProperty(_messages, 'your_reply', "Reply on comment"), _defineProperty(_messages, 'delete_broadcast_alert', 'Are you sure you want to delete this broadcast?'), _defineProperty(_messages, 'refresh_polls', 'Refresh Polls'), _defineProperty(_messages, 'studentId', 'Student Id'), _defineProperty(_messages, 'view_result', 'View Result'), _defineProperty(_messages, 'submit_poll', 'Submit Poll'), _defineProperty(_messages, 'attendance', 'Attendance'), _defineProperty(_messages, 'please_enter_the_broadcast', 'Please enter broadcast news'), _defineProperty(_messages, 'total_attendance', 'Total Attendance'), _defineProperty(_messages, 'student_list', 'Student List'), _defineProperty(_messages, 'class_list', 'Class List'), _defineProperty(_messages, 'expiry_Date', 'Expiry Date'), _defineProperty(_messages, 'students', 'students'), _defineProperty(_messages, 'overall', 'OverAll'), _defineProperty(_messages, 'detailed', 'Detailed'), _defineProperty(_messages, 'classes', 'classes'), _defineProperty(_messages, 'view_attendance', 'View Attendance'), _defineProperty(_messages, 'assignment_reports', 'Assignment Reports'), _defineProperty(_messages, 'assignment_list', 'Assignment List'), _defineProperty(_messages, 'my_reports', 'My Reports'), _defineProperty(_messages, 'created_date', 'Created Date'), _defineProperty(_messages, 'expiry_date', 'Expiry Date'), _defineProperty(_messages, 'assignment', 'Assignment'), _defineProperty(_messages, 'test_reports', 'Test Report'), _defineProperty(_messages, 'active_users', 'Active Users'), _defineProperty(_messages, 'current_day', 'Current Day'), _defineProperty(_messages, 'recurring', 'Recurring'), _defineProperty(_messages, 'current_recurring', 'Delete Current Day / Recurring'), _defineProperty(_messages, 'delete_current_recurring', 'Do you want to delete current day (or) recurring schedule?'), _defineProperty(_messages, 'title_user_details', 'Below are the details about the user you have created'), _defineProperty(_messages, 'registration_prompt', 'Please fill below fields for registration'), _defineProperty(_messages, 'institute_name', 'Please enter institute name'), _defineProperty(_messages, 'please_enter_institute_name', 'Please enter institute name'), _defineProperty(_messages, 'inactive_user', 'Registered User'), _defineProperty(_messages, 'activate_user', 'Activate User'), _defineProperty(_messages, 'active_user', 'Active User'), _defineProperty(_messages, 'inactive_user_list', 'In active user list'), _defineProperty(_messages, 'Marks', 'Marks'), _defineProperty(_messages, 'total_marks', 'Total Marks'), _defineProperty(_messages, 'multiple_choice_answers', 'Multiple choice answers'), _defineProperty(_messages, 'multiple_responsive_answers', 'Multiple responsive answers'), _defineProperty(_messages, 'true_false', 'Trues or False answers'), _defineProperty(_messages, 'active_users_list', 'Active Users List'), _defineProperty(_messages, 'course_attendance', 'Course Attendance'), _defineProperty(_messages, 'show_result', 'Show Result'), _defineProperty(_messages, 'student_reg_form', 'Student registration form'), _defineProperty(_messages, 'already_registered_user', 'Already registered?'), _defineProperty(_messages, 'i_agree', 'I Agree'), _defineProperty(_messages, 'terms_conditions', 'Terms and Conditions'), _defineProperty(_messages, 'grade_configuration', 'Grade Configuration'), _defineProperty(_messages, 'title_grade_configuration', 'Configure questionnaire grades here.'), _defineProperty(_messages, 'title_view_grade_configuration', 'Below are the grades which will be reflected in questionnaire result.'), _defineProperty(_messages, 'fullcalender', 'Full Calendar'), _defineProperty(_messages, 'select_duration', 'Please Select the Duration'), _defineProperty(_messages, 'set_hours', 'Set Hours'), _defineProperty(_messages, 'set_minutes', 'Set Minutes'), _defineProperty(_messages, 'checkin_time', 'Check-In Time'), _defineProperty(_messages, 'checkout_time', 'Check-Out Time'), _defineProperty(_messages, 'topic_report', 'Topics Reports '), _defineProperty(_messages, 'course_view', 'Course View'), _defineProperty(_messages, 'topic_name', 'Topic Name'), _defineProperty(_messages, 'viewed_topics', 'Viewed Topics'), _defineProperty(_messages, 'topic_viewed_users', 'Topic Viewed Users'), _defineProperty(_messages, 'description', 'Description'), _defineProperty(_messages, 'status', 'Status'), _defineProperty(_messages, 'deleted_user', 'Deleted user'), _defineProperty(_messages, 'registered', 'Registered'), _defineProperty(_messages, 'deleted', 'Deleted'), _defineProperty(_messages, 'deleted_list', 'Deleted users'), _defineProperty(_messages, 'active_user_list', 'Active users'), _defineProperty(_messages, 'registered_user_list', 'Registered users'), _defineProperty(_messages, 'skip', 'Skip'), _defineProperty(_messages, 'all_participants_groups', 'All participants groups'), _defineProperty(_messages, 'from', 'From'), _defineProperty(_messages, 'to', 'To'), _defineProperty(_messages, 'no_replies', 'No Replies'), _defineProperty(_messages, 'no_answers', 'No Answers'), _defineProperty(_messages, 'link_is_either_expired_or_broken', 'Link is either expired or broken'), _defineProperty(_messages, 'summary', 'Summary'), _defineProperty(_messages, 'room_students', 'Room Students'), _defineProperty(_messages, 'topic_content', 'Topic Content'), _defineProperty(_messages, 'you_are_in_mange_users_panel', 'You are in manage users panel'), _defineProperty(_messages, 'work_edu_details', 'View Work and Education'), _defineProperty(_messages, 'view_contact_details', 'View Contact'), _defineProperty(_messages, 'view_locale', 'View Locale'), _defineProperty(_messages, 'you_are_in_active_users_panel', 'You are in active users panel'), _defineProperty(_messages, 'you_are_in_my_profile_panel', 'You are in my profile panel'), _defineProperty(_messages, 'you_are_in_package_list_panel', 'You are in package management panel'), _defineProperty(_messages, 'you_are_in_corporate_list_panel', 'You are in corporate panel'), _defineProperty(_messages, 'you_are_in_category_list_panel', 'You are in category management panel'), _defineProperty(_messages, 'you_are_in_room_list_panel', 'You are in room management panel'), _defineProperty(_messages, 'you_are_in_location_list_panel', 'You are in location panel'), _defineProperty(_messages, 'you_are_in_participant_group_list_panel', 'You are in participant group panel'), _defineProperty(_messages, 'you_are_in_questionarie_list_panel', 'You are in questionarie panel'), _defineProperty(_messages, 'edit_grade_configuaration', 'Edit grade configuaration'), _defineProperty(_messages, 'You_are_in_reports_list_panel', 'You are in reports panel'), _defineProperty(_messages, 'add_assignment', 'Add Assignment'), _defineProperty(_messages, 'users_activity', 'Users Activity'), _defineProperty(_messages, 'Update', "Update"), _defineProperty(_messages, 'blocked', 'Blocked'), _defineProperty(_messages, 'guest', 'Guest'), _defineProperty(_messages, 'requiedFieldText', 'Please enter'), _defineProperty(_messages, 'requiedFieldDate', 'Please select'), _defineProperty(_messages, 'validInputData', 'Please enter valid'), _defineProperty(_messages, 'select_dropdown', 'select'), _defineProperty(_messages, 'save_publish', 'Save & Publish'), _defineProperty(_messages, 'connect_with_social_link', 'Connect with Social Links'), _defineProperty(_messages, 'request_for_share_document', 'Request for share screen / document'), _defineProperty(_messages, 'requested_for_share_document_please_wait', 'Requested for share screen / document, Please wait .....'), _defineProperty(_messages, 'confirm_unassign_questionnaire_topics', 'Are you sure you want to unassign questionnaire as there are results based on this questionnaire?'), _defineProperty(_messages, 'update_publish', 'Update & Publish'), _defineProperty(_messages, 'invalid_file_format', 'Invalid file format.'), _defineProperty(_messages, 'confirm_delete_question_from_questionnaire', 'Are you sure you want to delete question from questionnaire as there are results based on question?'), _defineProperty(_messages, 'stop_screen_share', 'Stop Screen Share'), _defineProperty(_messages, 'pause_screen_share', 'Pause Screen Share'), _defineProperty(_messages, 'play_screen_share', 'Play Screen Share'), _defineProperty(_messages, 'add_students', 'Add student'), _defineProperty(_messages, 'confirm_submit_alert', 'Are you sure you want to submit?'), _defineProperty(_messages, 'user_reg_form', 'User registration form'), _defineProperty(_messages, 'registration_please_wait', 'Registering, Please wait'), _defineProperty(_messages, 'student_data_not_found', 'Student data not found'), _defineProperty(_messages, 'individual_user', 'Individual User'), _defineProperty(_messages, 'group', 'Group'), _defineProperty(_messages, 'add_groups', 'Add Groups'), _defineProperty(_messages, 'edit_room', 'Edit Room'), _defineProperty(_messages, 'edit_profie', 'Edit Profile'), _defineProperty(_messages, 'create_topic', 'Create Topic'), _defineProperty(_messages, 'new_questionnaire', 'New Questionnaire'), _defineProperty(_messages, 'student_assignment_list_title', 'assignments which you have submitted'), _defineProperty(_messages, 'evaluation_not_yet_done', 'Evaluation not yet done'), _defineProperty(_messages, 'instructor_feedback', "Instructor's Feedback"), _defineProperty(_messages, 'total_assignment_marks', 'Total Assignment Marks'), _defineProperty(_messages, 'scored_marks', 'Scored Marks'), _defineProperty(_messages, 'add_another_field', 'Add another field'), _defineProperty(_messages, 'maximum_marks', 'Maximum Marks'), _defineProperty(_messages, 'total_score', 'Total Score'), _defineProperty(_messages, 'load_more', 'load more..'), _defineProperty(_messages, 'note', 'Note'), _defineProperty(_messages, 'default', 'Default'), _defineProperty(_messages, 'proxy', 'Proxy'), _defineProperty(_messages, 'quality', 'Quality'), _defineProperty(_messages, 'best_quality', 'Best Quality'), _defineProperty(_messages, 'better_quality', 'Better Quality'), _defineProperty(_messages, 'standard', 'Standard'), _defineProperty(_messages, 'better_speed', 'Better Speed'), _defineProperty(_messages, 'best_speed', 'Best Speed'), _defineProperty(_messages, 'ends_on', 'Ends'), _defineProperty(_messages, 'after', 'After'), _defineProperty(_messages, 'occurences', 'occurences'), _defineProperty(_messages, 'repeat_on', 'Repeat On'), _defineProperty(_messages, 'On', 'On'), _defineProperty(_messages, 'No_Questionnaires_assigned_to_this_topic', 'No Questionnaires assigned to this topic.'), _defineProperty(_messages, 'total_percentage', 'Total Percentage'), _defineProperty(_messages, 'options', 'Options'), _defineProperty(_messages, 'revoke_host', 'Revoke Host'), _defineProperty(_messages, 'become_host', 'Become Host'), _defineProperty(_messages, 'video_settings', 'Video Settings'), _defineProperty(_messages, 'mute_unmute', 'Mute/Unmute'), _defineProperty(_messages, 'remote_mute_unmute', 'Remote Mute/Unmute'), _defineProperty(_messages, 'full_Screen', 'Full Screen'), _defineProperty(_messages, 'share', 'Share'), _defineProperty(_messages, 'volume_on_off', 'Volume On/Off'), _defineProperty(_messages, 'become_speaker', 'Become Speaker'), _defineProperty(_messages, 'revoke_speaker', 'Revoke Speaker'), _defineProperty(_messages, 'become_presenter', 'Become Presenter'), _defineProperty(_messages, 'revoke_presenter', 'Revoke Presenter'), _defineProperty(_messages, 'add_another_field', 'Add Another Field'), _defineProperty(_messages, 'today', 'Today'), _defineProperty(_messages, 'yesterday', 'Yesterday'), _defineProperty(_messages, 'last_seven_days', 'Last 7 days'), _defineProperty(_messages, 'last_thirty_days', 'Last 30 days'), _defineProperty(_messages, 'custom', 'Custom'), _defineProperty(_messages, 'date_range', 'Date Range'), _defineProperty(_messages, 'apply', 'Apply'), _defineProperty(_messages, 'not_loggedin_users', 'Not Logged-In Users'), _defineProperty(_messages, 'loggedin_users', 'Logged-In Users'), _defineProperty(_messages, 'loggedin_users_status', 'Logged-In Users Status'), _defineProperty(_messages, 'present_instructors', 'Present Instructors'), _defineProperty(_messages, 'absent_instructors', 'Absent Instructors'), _defineProperty(_messages, 'present_students', 'Present Students'), _defineProperty(_messages, 'absent_students', 'Absent Students '), _defineProperty(_messages, 'instructors_attendance', 'Instructors Attendance'), _defineProperty(_messages, 'students_attendance', 'Students Attendance'), _defineProperty(_messages, 'percentage', 'Percentage'), _defineProperty(_messages, 'offline_visits', 'Offline Visits'), _defineProperty(_messages, 'online_visits', 'Online Visits'), _defineProperty(_messages, 'absent_schedules', 'Absent Schedules'), _defineProperty(_messages, 'total_schedules', 'Total Schedules'), _defineProperty(_messages, 'total_attendance', 'Total Attendance'), _defineProperty(_messages, 'count', 'Count'), _defineProperty(_messages, 'back_to_list', 'Back to List'), _defineProperty(_messages, 'back_to_reports', 'Back to Reports'), _defineProperty(_messages, 'completely_viewed_topic_users', 'Completely Viewed Topic Users'), _defineProperty(_messages, 'partially_viewed_topic_users', 'Partially Viewed Topic Users'), _defineProperty(_messages, 'not_AtAll_Viewed_Topic_Users', 'Not At All Viewed Topic Users'), _defineProperty(_messages, 'viewed_users', 'Viewed Users'), _defineProperty(_messages, 'completely_viewed_topics', 'Completely Viewed Topics'), _defineProperty(_messages, 'partially_viewed_topics', 'Partially Viewed Topics'), _defineProperty(_messages, 'notAtAll_Viewed_Topics', 'Not At All Viewed Topics'), _defineProperty(_messages, 'user_viewed_topics', 'User Viewed Topics'), _defineProperty(_messages, 'topics_viewed', 'Topics Viewed'), _defineProperty(_messages, 'topic_users', 'Users'), _defineProperty(_messages, 'clear_room_chat', 'Clear Chat'), _defineProperty(_messages, 'delete_room_chat_alert', 'Are you sure you want to clear the chat?'), _defineProperty(_messages, 'join', 'Join'), _defineProperty(_messages, 'access_denied', 'Access Denied'), _defineProperty(_messages, 'video_bit_rate', 'Video Bit Rate'), _defineProperty(_messages, 'audio_bit_rate', 'Audio Bit Rate'), _defineProperty(_messages, 'evaluate_assignment', 'Evaluate Assignment'), _defineProperty(_messages, 'back_to_submissions', 'Back To Submissions'), _defineProperty(_messages, 'Persian', 'Persian'), _defineProperty(_messages, 'submit', 'Submit'), _defineProperty(_messages, 'make_speaker_vedio', 'Make Speaker'), _defineProperty(_messages, 'Connection_Request', 'Connection Request'), _defineProperty(_messages, 'message', 'Message'), _defineProperty(_messages, 'sources', 'Sources'), _defineProperty(_messages, 'resolutions', 'Resolutions'), _defineProperty(_messages, 'camera', 'Camera'), _defineProperty(_messages, 'Audio_Inputs', 'Audio Inputs'), _defineProperty(_messages, 'Please_enter_Company', 'Please enter Company'), _defineProperty(_messages, 'Please_enter_Position', 'Please enter Position'), _defineProperty(_messages, 'Please_enter_valid_City_Town', "'Please enter valid City/ Town' (Special charecters should not be allowed)"), _defineProperty(_messages, 'Please_enter_valid_Country', 'Please enter valid Country'), _defineProperty(_messages, 'Please_enter_valid_From_Date', 'Please enter valid From Date'), _defineProperty(_messages, 'From_date_cannot_be_in_future', 'From date cannot be in future'), _defineProperty(_messages, 'Please_enter_valid_To_Date', "Please enter valid To Date"), _defineProperty(_messages, 'From_date_and_To_date_cannot_be_same', 'From date and To date cannot be same'), _defineProperty(_messages, 'To_date_should_be_greater_than_From_date', 'To date should be greater than From date'), _defineProperty(_messages, 'Please_enter_School', 'Please enter School'), _defineProperty(_messages, 'School_field_cannot_have_empty_spaces', "School field can't have empty spaces"), _defineProperty(_messages, 'Please_enter_University', 'Please enter University'), _defineProperty(_messages, 'University_field_cannot_have_empty_spaces', "University field can't have empty spaces"), _defineProperty(_messages, 'Please_enter_atleast_one_skill', "Please enter atleast one skill"), _defineProperty(_messages, 'Please_enter_Address', 'Please enter Address'), _defineProperty(_messages, 'Please_enter_a_valid_Address', 'Please enter a valid Address'), _defineProperty(_messages, 'Please_enter_City', 'Please enter City'), _defineProperty(_messages, 'Please_enter_a_valid_City', 'Please enter a valid City'), _defineProperty(_messages, 'Please_enter_Zip', "Please enter Zip"), _defineProperty(_messages, 'Please_enter_a_valid_Zip', 'Please enter a valid Zip'), _defineProperty(_messages, 'Please_enter_website', 'Please enter website'), _defineProperty(_messages, 'Please_enter_valid_website', 'Please enter valid website'), _defineProperty(_messages, 'Please_enter_social_link', 'Please enter social link'), _defineProperty(_messages, 'Please_enter_valid_social_link', 'Please enter valid social link'), _defineProperty(_messages, 'Please_enter_valid_Date_of_birth', 'Please enter valid Date of birth'), _defineProperty(_messages, 'Date_of_birth_cannot_be_future_Date', "Date of birth can't be future Date"), _defineProperty(_messages, 'Please_select_Gender', ' Please select Gender'), _defineProperty(_messages, 'Please_enter_Current_Password', 'Please enter Current Password'), _defineProperty(_messages, 'Please_enter_New_Password', 'Please enter New Password'), _defineProperty(_messages, 'Please_enter_Confirm_password', 'Please enter Confirm password'), _defineProperty(_messages, 'New_Password_and_Confirm_password_should_be_same', 'New Password and Confirm password should be same.'), _defineProperty(_messages, 'Assignment_name_cannot_have_only_white_spaces', "Assignment name can't have only white spaces"), _defineProperty(_messages, 'Please_enter_Assignment_Name', 'Please enter Assignment Name'), _defineProperty(_messages, 'Please_enter_Question', 'Please enter Question'), _defineProperty(_messages, 'please_select_type', ' please select type'), _defineProperty(_messages, 'Please_enter_Options', ' Please enter Options'), _defineProperty(_messages, 'Provide_atleast_Two_Options', 'Provide atleast Two Options'), _defineProperty(_messages, 'Options_cannot_be_same', "Options can't be same"), _defineProperty(_messages, 'Please_select_an_Answer', 'Please select an Answer'), _defineProperty(_messages, 'Marks_cannot_be_empty', "Marks can't be empty"), _defineProperty(_messages, 'Marks_can_only_have_Numbers', ' Marks can only have Numbers'), _defineProperty(_messages, 'Please_enter_a_valid_Name', ' Please enter a valid Name'), _defineProperty(_messages, 'Please_enter_valid_Email_id', 'Please enter valid Email id'), _defineProperty(_messages, 'Please_enter_Password', ' Please enter Password'), _defineProperty(_messages, 'Passwords_are_not_matching', 'Passwords are not matching'), _defineProperty(_messages, 'Please_enter_valid_City_Name', 'Please enter valid City Name'), _defineProperty(_messages, 'Please_enter_valid_State_Name', ' Please enter valid State Name'), _defineProperty(_messages, 'Please_accept_Term_conditions', 'Please accept Terms & conditions'), _defineProperty(_messages, 'Please_enter_institute_name', 'Please enter institute name'), _defineProperty(_messages, 'Enter_at_least_three_letters_to_search', 'Enter at least three letters to search'), _defineProperty(_messages, 'support_center', 'Support Center'), _defineProperty(_messages, 'open_a_new_ticket', 'Open a New Ticket'), _defineProperty(_messages, 'check_ticket_status', 'Check Ticket Status'), _defineProperty(_messages, 'troubleshoot', 'Troubleshoot'), _defineProperty(_messages, 'edit_current_day_recurring', 'Edit Current Day / Recurring'), _defineProperty(_messages, 'want_to_edit_current_day_or_recurring_schedule', 'Do you want to Edit Current day (or) recurring schedule?'), _defineProperty(_messages, 'want_to_delete_current_day_or_recurring_schedule', 'Do you want to delete Current day (or) recurring schedule?'), _defineProperty(_messages, 'delete_current_day_recurring', 'Delete Current Day / Recurring'), _defineProperty(_messages, 'duration_time_should_be_greaterthan_current_time', 'duration time should be greaterthan current time'), _defineProperty(_messages, 'Please_select_the_duration', 'Please select the duration'), _defineProperty(_messages, 'Please_fill_all_the_fields', 'Please fill all the fields'), _defineProperty(_messages, 'question_name_cannot_have_only_white_spaces', "Question name can't have only white spaces"), _defineProperty(_messages, 'options_cannot_have_only_white_spaces', "Options can't have only white spaces"), _defineProperty(_messages, 'upload_new', 'Upload New'), _defineProperty(_messages, 'profile_picture', 'Profile Picture'), _defineProperty(_messages, 'current', 'Current'), _defineProperty(_messages, 'recurring', 'Recurring'), _defineProperty(_messages, 'profile_picture', 'Profile Picture'), _defineProperty(_messages, 'Please_select_any_option', 'Please select any option'), _defineProperty(_messages, 'go_back', 'Go back'), _defineProperty(_messages, 'phne', 'Phone'), _defineProperty(_messages, 'Current', 'Current'), _defineProperty(_messages, 'Personal_Information', 'Personal Information'), _defineProperty(_messages, 'Work_Places', 'Work Places'), _defineProperty(_messages, 'dob', 'DOB'), _defineProperty(_messages, 'Social_Links', 'Social Links'), _defineProperty(_messages, 'Connections', 'Connections'), _defineProperty(_messages, 'All_Connections', 'All Connections'), _defineProperty(_messages, 'View_all', 'View all'), _defineProperty(_messages, 'Hide_all', 'Hide all'), _defineProperty(_messages, 'hide', 'Hide'), _defineProperty(_messages, 'enter_schedule_password', 'Enter schedule password'), _defineProperty(_messages, 'conference_access', 'Conference access'), _defineProperty(_messages, 'please_enter_schedule_password', 'Please enter schedule password'), _defineProperty(_messages, 'invalid_or_expire_room', 'It looks an invalid room or your room is expired'), _defineProperty(_messages, 'unautharized_request', 'It looks an unautharized request'), _defineProperty(_messages, 'invalid_user', 'It looks you are an invalid user'), _defineProperty(_messages, 'invalid_room', 'It looks an invalid room'), _defineProperty(_messages, 'invalid_or_expire_package', 'It looks an invalid package or your package is expired'), _defineProperty(_messages, 'export_chat', 'Export Chat'), _defineProperty(_messages, 'download_certificate', 'Download Certificate'), _defineProperty(_messages, 'topics_completed', 'Topics Completed'), _defineProperty(_messages, 'certificates', 'Certificates'), _defineProperty(_messages, 'certificate_approved', 'Certificate Approved'), _defineProperty(_messages, 'select_questionnaire', "Select Questionnaire"), _defineProperty(_messages, 'questionnaire_name_error', "Please enter Questionnaire Name"), _defineProperty(_messages, 'questionnaire_description_error', "Please enter Description"), _defineProperty(_messages, 'clone_from_previoues_questionnaire', "Clone from previous Questionnaire"), _defineProperty(_messages, 'select_questionnaire', "Please select questionnaire"), _defineProperty(_messages, 'topic_completed', 'If topic completes'), _defineProperty(_messages, 'i_have_completed_this_topic', 'I have completed the topic'), _defineProperty(_messages, 'continous_user_presence_exceeded', 'User limit exceeded, Please contact admin'), _defineProperty(_messages, 'update_basic_information', 'Update Basic Information'), _defineProperty(_messages, 'adding_question_please_wait', 'Adding question, please wait...'), _messages)
	};

/***/ },
/* 180 */
/***/ function(module, exports) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _messages;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	exports.default = {
	  locale: 'hi',
	  messages: (_messages = {
	    siteTitle: 'instaVC - Business Suite',
	    addPost: 'Add Post',
	    switchLanguage: 'Switch Language',
	    twitterMessage: 'We are on Twitter',
	    by: 'By',
	    deletePost: 'Delete Post',
	    createNewPost: 'Create new post',
	    authorName: 'Author\'s Name',
	    postTitle: 'Post Title',
	    postContent: 'Post Content',
	    submit: 'Submit',
	    comment: 'user {name} {value, plural,\n        =0 {does not have any comments}\n        =1 {has # comment}\n        other {has # comments}\n      }',
	    HTMLComment: 'user <b style=\'font-weight: bold\'>{name} </b> {value, plural,\n        =0 {does not have <i style=\'font-style: italic\'>any</i> comments}\n        =1 {has <i style=\'font-style: italic\'>#</i> comment}\n        other {has <i style=\'font-style: italic\'>#</i> comments}\n      }',
	    nestedDateComment: 'user {name} {value, plural,\n        =0 {does not have any comments}\n        =1 {has # comment}\n        other {has # comments} \n      } as of {date}',
	    loginTitle: 'लॉग इन करें',
	    login_prompt: 'कृपया अपने instaVC खाते में साइन इन करें',
	    email_address: 'ईमेल पता',
	    password: 'पासवर्ड',
	    sign_in: 'साइन इन करें',
	    sign_up: 'साइन अप करें',
	    keep_signed_in: 'कृपया मुझे साइन इन रखें',
	    forgotten_password: 'मैं अपना पासवर्ड भूल चूका हूँ',
	    privacy_policy: 'गोपनीयता नीति',
	    terms_conditions: 'नियम एवं शर्तें',
	    my_profile: 'मेरी प्रोफाइल',
	    work_education: 'काम और शिक्षा',
	    contacts: 'संपर्क जानकारी',
	    personal_info: 'व्यक्तिगत जानकारी',
	    company_details: 'संस्थान के विवरण',
	    about_me: 'मेरे बारे में',
	    full_name: 'पूरा नाम',
	    email: 'ईमेल',
	    phone: 'फ़ोन नंबर',
	    position: 'पद',
	    department: 'विभाग',
	    activities: 'क्रियाएँ',
	    edit: 'संपादित करें',
	    cancel: 'रद्द करे',
	    save: 'जमा करे',
	    delete: 'मिटाना',
	    list: 'सूची',
	    new: 'नया',
	    general_info: 'सामान्य जानकारी',
	    first_name: 'पहला नाम',
	    last_name: 'अंतिम नाम',
	    gender: 'लिंग',
	    contact_details: 'संपर्क विवरण',
	    male: 'पुस्र्ष',
	    female: 'महिला',
	    user_info: 'उपयोगकर्ता जानकारी',
	    credential_access: 'क्रेडेंशियल और प्रवेश',
	    default_room: 'डिफ़ॉल्ट कक्ष',
	    business_id: 'व्यवसाय आईडी',
	    business_name: 'व्यवास्यक नाम',
	    business_type: 'व्यापार के प्रकार',
	    corporate_type: 'कंपनी के प्रकार',
	    website: 'वेबसाइट',
	    company_status: 'कंपनी की स्थिति',
	    schedule_type: 'शेड्यूल के प्रकार',
	    name: 'नाम',
	    address: 'पता',
	    street: 'सड़क',
	    district: 'जिला',
	    state: 'राज्य',
	    country: 'देश',
	    pincode: 'पिन कोड',
	    license_details: 'लाइसेंस विवरण',
	    publish_limit: 'प्रकाशित सीमा',
	    room_limit: 'कक्ष सीमा',
	    no_p2p: 'पी 2 पी की संख्या',
	    subscriber_limit: 'सब्सक्राइबर सीमा',
	    users_limit: 'उपयोगकर्ताओं को सीमित',
	    legal_doc_details: 'कानूनी दस्तावेज विवरण',
	    pan_number: 'पैन नंबर',
	    tan_id: 'टैन पहचान पत्र',
	    active: 'सक्रिय',
	    inactive: 'निष्क्रिय',
	    calendar: 'कैलेंडर',
	    contact_name: 'संपर्क नाम',
	    contact_phone_number: 'संपर्क दूरभाष क्रमांक',
	    view: 'दृश्य दृष्टि',
	    title_company_details: 'नीचे आपके द्वारा बनाई गई कंपनी के बारे में विवरण दिया गया है',
	    title_category_details: 'नीचे आपके द्वारा बनाई गई श्रेणी के बारे में विवरण दिया गया है',
	    corporate_info: "कॉर्पोरेट जानकारी",
	    all_corporates: "सभी निगमों",
	    title_list_details: 'नीचे दी गई सूची',
	    corporate_list: 'कॉर्पोरेट सूची',
	    hidden: " ",
	    company_code: 'कंपनी कोड',
	    role: "भूमिका",
	    new_user: 'नया उपभोक्ता',
	    edit_user: 'यूजर को संपादित करो',
	    all_users: "सभी उपयोगकर्ताओं",
	    date: 'तारीख',
	    user_details: 'उपयोगकर्ता विवरण',
	    room: 'कक्ष',
	    smtp_details: 'एसएमटीपी विवरण',
	    api_key: 'एपीआई कुंजी',
	    username: 'उपयोगकर्ता नाम',
	    server: 'सर्वर',
	    basic_info: 'बुनियादी जानकारी',
	    select_package: 'पैकेज को चुन ले',
	    room_name: 'कक्ष का नाम',
	    room_type: 'सम्मेलन प्रकार',
	    room_password: 'कक्ष का पासवर्ड',
	    other_details: 'अन्य जानकारी',
	    corporate_name: 'कंपनी का नाम',
	    host_password: 'होस्ट पासवर्ड',
	    bridge_number: 'ब्रिज नंबर',
	    room_manager: 'कक्ष प्रबंधक',
	    my_room: 'मेरा कक्ष',
	    room_users: 'कक्ष उपयोगकर्ता',
	    room_user: 'कक्ष उपयोगकर्ता',
	    new_room: 'नया कक्ष',
	    all_rooms: 'सभी कक्ष',
	    add_user_to_room: 'कक्ष में उपयोगकर्ता जोड़ें',
	    package_name: 'पैकेज का नाम',
	    title_created_room_details: 'नीचे आपके द्वारा बनाए गए कक्ष के बारे में विवरण दिया गया है',
	    room_license: 'कक्ष लाइसेंस',
	    mcu_server: 'एमसीयू सर्वर',
	    title_contact_details: 'इस कक्ष में जोड़े गए संपर्क नीचे दिए गए हैं',
	    package_details: 'पैकेज के ब्यौरे',
	    package_manager: 'पैकेज प्रबंधक',
	    package_info: 'पैकेज जानकारी',
	    package_price: 'पैकेज कीमत',
	    user_count: 'उपयोगकर्ता की संख्या',
	    user_presence: 'उपयोगकर्ता उपस्थिति',
	    package_validity: 'पैकेज वैधता',
	    server_location: 'सर्वर स्थान',
	    assigned_to: 'को सौंपना',
	    title_about_package: 'नीचे आपके द्वारा बनाए गए पैकेज के बारे में विवरण दिया गया है',
	    search_contacts: 'खोजें संपर्क',
	    search_assigned_to_contacts: 'असाइन करने के लिए संपर्क खोजें',
	    add: 'जोड़ना',
	    settings: 'सेटिंग्स',
	    dashboard: 'डैशबोर्ड',
	    my_account: 'मेरा खाता',
	    corporate_directory: 'कॉर्पोरेट निर्देशिका',
	    smtp_setting: "एसएमटीपी सेटिंग",
	    manage_user: 'उपयोगकर्ताओं को प्रबंधित करें',
	    reports: 'रिपोर्ट',
	    ldap_settings: 'LDAP सेटिंग',
	    room_management: 'कक्ष प्रबंधन',
	    package_management: 'पैकेज प्रबंधन',
	    category_management: 'श्रेणी प्रबंधन',
	    logout: 'लोग आउट',
	    ldap_details: 'LDAP विवरण',
	    domain: 'डोमेन',
	    base_dn: 'बेस डी.एन.',
	    url: 'यूआरएल',
	    bind_cn: 'बाँध सीएन',
	    bind_password: 'बाँध पासवर्ड',
	    force_login: 'सेना लॉग इन',
	    new_category: 'नई श्रेणी',
	    all_categories: 'सब श्रेणियाँ',
	    category_details: 'श्रेणी विवरण',
	    category_name: 'श्रेणी नाम',
	    category_desc: 'श्रेणियाँ विवरण',
	    category_list: 'श्रेणी सूची',
	    package_list: 'पैकेज की सूची',
	    room_list: 'कक्ष सूची',
	    user_list: 'उपयोगकर्ता सूची',
	    corporate_detail: 'कॉर्पोरेट विवरण',
	    true: 'सच',
	    false: 'झूठा',
	    conference: 'सम्मेलन',
	    lms: 'एलएमएस',
	    presenter: 'प्रस्तुतकर्ता',
	    crm: 'सीआरएम',
	    admin: 'व्यवस्थापक',
	    user: 'उपयोगकर्ता',
	    mix: 'मिश्रण',
	    forward: 'आगे',
	    hybrid: 'संकर',
	    no_users_found: 'कोई उपयोग्कर्ता नहीं मिले',
	    my_contacts: 'मेरे संपर्क',
	    chat: 'बातचीत',
	    mute_unmute: 'म्यूट / अनम्यूट',
	    disable_enable: 'सक्षम अक्षम',
	    start_recoding: 'रिकॉर्डिंग शुरू',
	    expand_contract: 'विस्तार / अनुबंध',
	    no_recent_contacts: 'हाल ही के कोई संपर्क नहीं',
	    add_your_contacts: 'अपने संपर्क जोड़ें',
	    close: 'बंद करे',
	    sandra_smith: 'सैंड्रा स्मिथ',
	    say_something: 'आप कुछ बोलो',
	    video_quality: 'वीडियो की गुणवत्ता',
	    languages: 'भाषा',
	    help: 'मदद',
	    add_contacts: 'संपर्क जोड़ें',
	    attach_file: 'फ़ाइल जोड़ें',
	    search_contacts_add: 'अपनी संपर्क सूची में जोड़ने के लिए संपर्क खोजें',
	    set_language: 'भाषा सेट करें',
	    set_video_qulity: 'सेट विडियो रेसोलुशन ',
	    desc: 'विवरण',
	    push_the_message: 'संदेश भेजें',
	    invite_others: 'दूसरों को तुरंत शामिल करने के लिए निमन्त्रण दे',
	    regenerate: 'फिर से उत्पन्न करे',
	    copy_this_link: 'इस लिंक को कॉपी करे',
	    share_Link: 'लिंक शेयर करें',
	    open_mail_client: 'मेल क्लाइंट खोले ',
	    start_conference: 'सम्मेलन प्रारंभ करें',
	    create_new_room: 'नया कक्ष बनाएं',
	    add_participants: 'प्रतिभागियों को जोड़ें',
	    search_room: 'कक्ष खोजें',
	    my_rooms: 'मेरे कक्ष',
	    select_your_room: 'अपने कक्ष को चुन ले',
	    presenter_mode: 'प्रस्तुतकर्ता मोड',
	    conference_mode: 'सम्मेलन मोड',
	    valid_untill: 'तब तक वैध',
	    search_rooms: 'कक्ष खोजें...',
	    schedules_new: 'अनुसूची सम्मेलन',
	    schedule_meeting: 'सुनियोजित बैठक',
	    past_schedules: 'पिछले शेड्यूल',
	    no_schedules: 'कोई शेड्यूल नहीं ',
	    create_schedule: 'मेरे शेड्यूल बटन पर क्लिक करके अपना शेड्यूल बनाएं',
	    meeting_name: 'सभा का नाम',
	    please_enter_meeting_name: 'कृपया मीटिंग का नाम दर्ज करें',
	    create_edit_conference: 'बनाएं / संपादित सम्मेलन',
	    choose_anavailable_date: 'एक उपलब्ध तिथि चुनें.',
	    set_start_time: 'प्रारंभ समय सेट करें',
	    // set_end_time:'समाप्ति समय सेट करें',
	    set_duration: 'सेट अवधि',
	    recurring_schedule: 'आवर्ती कार्यक्रम',
	    repeats: 'दोहराता',
	    repeat_every: 'हर दोहराना',
	    set_conference_password: 'अपने सम्मेलन का पासवर्ड सेट करें',
	    invite: 'आमंत्रण',
	    start: 'प्रारंभ',
	    organizer: 'व्यवस्थापक',
	    edit_schedule: 'इस शेड्यूल को संपादित करें',
	    delete_schedule: 'इस शेड्यूल को हटाएं',
	    invite_contacts: 'संपर्कों को आमंत्रित करें',
	    invite_people: 'लोगो को आमंत्रित करें',
	    join_meeting: 'अपने  डेस्कटॉप , टेबलेट  या  स्मार्टफोन  से  मेरी  सभा  में  शामिल  होने  की  कृपा करे',
	    conference_room_url: 'निमंत्रण यूआरएल',
	    enter_email: 'ईमेल दर्ज करें',
	    please_enter: 'कृप्या ईमेल आईडी दर्ज...',
	    enter_meeting_name: 'कृप्या सभा नाम दर्ज करें',
	    select_room: 'कृपया कक्ष को चुन ले',
	    minimum_date: 'कृपया वर्तमान या भविष्य की तिथि का चयन करें',
	    start_time_greater: 'प्रारंभ समय वर्तमान समय की तुलना में अधिक होना चाहिए।',
	    end_time_greater: 'समाप्ति समय से अधिक समय शुरू होना चाहिए।',
	    video_resolution: 'SIF वीडियो रेसोलुशन  के लिए',
	    video_graphics: 'वीडियो ग्राफिक्स ऐरे (वीजीए) वीडियो के लिए रेसोलुशन',
	    hd_video: 'HD वीडियो रेसोलुशन के लिए',
	    full_hd: 'पूर्ण HD वीडियो रेसोलुशन के लिए',
	    online: 'ऑनलाइन',
	    away: 'दूर',
	    offline: 'ऑफलाइन',
	    do_not_disturb: 'परेशान न करें'
	  }, _defineProperty(_messages, 'logout', 'लोग आउट'), _defineProperty(_messages, 'locale', 'लोकले'), _defineProperty(_messages, 'time_zone', 'समय क्षेत्र'), _defineProperty(_messages, 'date_format', 'तारीख प्रारूप'), _defineProperty(_messages, 'time_format', 'समय प्रारूप'), _defineProperty(_messages, 'currency_format', 'मुद्रा प्रारूप'), _defineProperty(_messages, 'prefered_language', 'पसंदीदा भाषा'), _defineProperty(_messages, 'room_topic', 'विषय'), _defineProperty(_messages, 'my_topic', 'मेरा विषय'), _defineProperty(_messages, 'room_topic_manager', 'कक्ष विषय प्रबंधक'), _defineProperty(_messages, 'topic_name', 'विषय का नाम'), _defineProperty(_messages, 'description', 'विवरण'), _defineProperty(_messages, 'topic_details', 'विषय में जानकारी'), _defineProperty(_messages, 'upload', 'अपलोड'), _defineProperty(_messages, 'upload_file', 'दस्तावेज अपलोड करें'), _defineProperty(_messages, 'questionnaire', 'प्रश्नावली'), _defineProperty(_messages, 'all_questionnaire', 'सभी प्रश्नावली'), _defineProperty(_messages, 'questionnaire_list', 'प्रश्नावली सूची'), _defineProperty(_messages, 'add_questionnaire', 'प्रश्नावली जोड़े'), _defineProperty(_messages, 'questionnaire_details', 'प्रश्नावली में जानकारी'), _defineProperty(_messages, 'questionnaire_name', 'प्रश्नावली का नाम'), _defineProperty(_messages, 'view_questionnaire', 'देखें प्रश्नावली'), _defineProperty(_messages, 'questions', 'प्रशन'), _defineProperty(_messages, 'questionnaire_details', 'प्रश्नावली विवरण'), _defineProperty(_messages, 'title_questionnaire_details', 'नीचे आपके द्वारा बनाए गए प्रश्नावली के बारे में विवरण दिया गया है'), _defineProperty(_messages, 'selectroom', 'कक्ष को चुन ले'), _defineProperty(_messages, 'no_rooms', 'कोई कमरा नहीं बनाया गया है'), _defineProperty(_messages, 'create_a_room', 'एक कमरा बनाओ'), _defineProperty(_messages, 'requiedField', 'कृपया'), _defineProperty(_messages, 'help_content', 'सहायता सामग्री.'), _defineProperty(_messages, 'no_data_yet', 'अभी तक कोई डेटा नहीं है!'), _defineProperty(_messages, 'add_question', 'प्रश्न जोड़ें'), _defineProperty(_messages, 'title_question_details', 'नीचे इस प्रश्नावली में जोड़े गए सवाल हैं'), _defineProperty(_messages, 'deletefile', 'वर्तमान फ़ाइल हटाएँ'), _defineProperty(_messages, 'edit_questionnaire', 'प्रश्नावली संपादित करें'), _defineProperty(_messages, 'change_password', 'पासवर्ड बदलें'), _defineProperty(_messages, 'forgot_password', 'पासवर्ड भूल गए'), _defineProperty(_messages, 'reset_prompt', 'पासवर्ड रीसेट'), _defineProperty(_messages, 'forgot_prompt', 'कृपया अपना ईमेल पता दर्ज करें'), _defineProperty(_messages, 'local_settings', 'लोकले सेटिंग'), _defineProperty(_messages, 'dd_mm_yyyy', 'DD/MM/YYYY'), _defineProperty(_messages, 'dd_mm_yy', 'DD/MM/YY'), _defineProperty(_messages, 'ddmmyyyy', 'DD-MM-YYYY'), _defineProperty(_messages, 'hh_mm_ss', 'HH:MM:SS'), _defineProperty(_messages, 'usd', 'USD'), _defineProperty(_messages, 'indian_rupee', 'Indian Rupee'), _defineProperty(_messages, 'english', 'English'), _defineProperty(_messages, 'hindi', 'Hindi'), _defineProperty(_messages, 'edit_corporate', 'संपादित कॉर्पोरेट'), _defineProperty(_messages, 'user_directory', 'प्रयोक्ता निर्देशिका'), _defineProperty(_messages, 'new_corporate', "नया कॉर्पोरेट"), _defineProperty(_messages, 'all_packages', 'सभी पैकेज'), _defineProperty(_messages, 'package_directory', 'पैकेज निर्देशिका'), _defineProperty(_messages, 'new_package', 'नया पैकेज'), _defineProperty(_messages, 'edit_package', 'पैकेज को संपादित करें'), _defineProperty(_messages, 'room_directory', 'कक्ष निर्देशिका'), _defineProperty(_messages, 'room_details', 'कक्ष का विवरण'), _defineProperty(_messages, 'room_info', 'कक्ष जानकारी'), _defineProperty(_messages, 'category_directory', 'श्रेणी निर्देशिका'), _defineProperty(_messages, 'category_info', 'श्रेणी जानकारी'), _defineProperty(_messages, 'smtp_info', 'एसएमटीपी जानकारी'), _defineProperty(_messages, 'ldap_info', 'एलडीएपी जानकारी'), _defineProperty(_messages, 'invalid_date', 'कृपया वैध दिनांक चुनें / दर्ज करें'), _defineProperty(_messages, 'upload_url', 'URL अपलोड'), _defineProperty(_messages, 'select_gender', 'लिंग चुनें'), _defineProperty(_messages, 'topic_list', 'विषय सूची'), _defineProperty(_messages, 'content', 'सामग्री'), _defineProperty(_messages, 'files', 'फ़ाइलें'), _defineProperty(_messages, 'upload_media', 'मीडिया अपलोड करें'), _defineProperty(_messages, 'upload_sco', 'SCO अपलोड करें'), _defineProperty(_messages, 'file_name', 'फ़ाइल का नाम'), _defineProperty(_messages, 'openfile', 'डाउनलोड'), _defineProperty(_messages, 'all', 'सब'), _defineProperty(_messages, 'image', 'छवि'), _defineProperty(_messages, 'application', 'आवेदन'), _defineProperty(_messages, 'video', 'वीडियो'), _defineProperty(_messages, 'audio', 'ऑडियो'), _defineProperty(_messages, 'zip', 'ज़िप'), _defineProperty(_messages, 'upload_list', 'अपलोड सूची'), _defineProperty(_messages, 'search', 'खोज....'), _defineProperty(_messages, 'all_feedback', 'सभी प्रतिक्रिया'), _defineProperty(_messages, 'feedback', 'प्रतिक्रिया'), _defineProperty(_messages, 'user_feedback', 'उपयोगकर्ता प्रतिसाद'), _defineProperty(_messages, 'multiple_delete', 'एकाधिक हटाएँ'), _defineProperty(_messages, 'room_feedback', 'फ़ीडबैक सूची'), _defineProperty(_messages, 'add_your_groups', 'अपने समूह जोड़ें'), _defineProperty(_messages, 'no_recent_groups', 'हाल के कोई समूह नहीं'), _defineProperty(_messages, 'back_to_room', 'वापस कक्ष में'), _defineProperty(_messages, 'add_student', 'उपस्थिति जोड़ें'), _defineProperty(_messages, 'instructor_name', 'प्रशिक्षक का नाम'), _defineProperty(_messages, 'room_student_to_instructor', 'प्रस्तुतकर्ता को उपस्थितकर्ता जोड़ें'), _defineProperty(_messages, 'search_students', 'खोज उपस्थिति'), _defineProperty(_messages, 'my_groups', 'मेरे समूह'), _defineProperty(_messages, 'no_recent_member', 'हाल के कोई सदस्य नहीं'), _defineProperty(_messages, 'add_your_members', 'अपने सदस्यों को जोड़ें'), _defineProperty(_messages, 'whiteboard', 'व्हाइटबोर्ड'), _defineProperty(_messages, 'screen_share', 'स्क्रीन शेयर'), _defineProperty(_messages, 'hand_raise', 'सवाल जवाब'), _defineProperty(_messages, 'topics', 'विषय'), _defineProperty(_messages, 'topics_list', 'विषय सूची'), _defineProperty(_messages, 'welcome_room', 'कक्ष में आपका स्वागत है:'), _defineProperty(_messages, 'fulltopic', 'अधिक पढ़ें...'), _defineProperty(_messages, 'search_attendees', 'उपस्थिति खोजें'), _defineProperty(_messages, 'no_topics_yet', 'अभी तक कोई विषय नहीं!..'), _defineProperty(_messages, 'list_topics', 'नीचे इस कक्ष से संबंधित विषयों की सूची दी गई है।'), _defineProperty(_messages, 'have_schedule', 'पहले से ही एक शेड्यूल है'), _defineProperty(_messages, 'your_selected_date', 'आपके चयनित तिथियां'), _defineProperty(_messages, 'presenter', 'प्रस्तुतकर्ता'), _defineProperty(_messages, 'telepresence', 'टेलीप्रेसेन्स'), _defineProperty(_messages, 'record', 'रिकॉर्ड करें'), _defineProperty(_messages, 'no_attendees_present', 'कोई उपस्थित नहीं'), _defineProperty(_messages, 'no_user_added', 'इस कक्ष में कोई भी उपयोगकर्ता जोड़ा नहीं गया'), _defineProperty(_messages, 'automatic', 'Automatic'), _defineProperty(_messages, 'set', 'Set'), _defineProperty(_messages, 'location', 'स्थान'), _defineProperty(_messages, 'manage', 'प्रबंधन करें'), _defineProperty(_messages, 'room_chat', 'बातचीत'), _defineProperty(_messages, 'ask', 'पूछें'), _defineProperty(_messages, 'ask_question', 'प्रश्न पूछें'), _defineProperty(_messages, 'previous_questions', 'पिछले सवाल'), _defineProperty(_messages, 'post', 'प्रकाशित करें'), _defineProperty(_messages, 'no_questions', 'कोई प्रश्न नहीं'), _defineProperty(_messages, 'answers', 'जवाब'), _defineProperty(_messages, 'make_speaker', 'अनुरोध वीडियो'), _defineProperty(_messages, 'answer_the_question', 'प्रश्न का उत्तर दो'), _defineProperty(_messages, 'reply', 'जवाब दें'), _defineProperty(_messages, 'your_comment', 'आपकी टिप्पणी'), _defineProperty(_messages, 'post_comment', 'टिप्पणी'), _defineProperty(_messages, 'previous_answers', 'पिछले जवाब'), _defineProperty(_messages, 'comment_on_answer', 'जवाब पर टिप्पणी'), _defineProperty(_messages, 'make_this_user_the_speaker', 'इस अध्यक्ष को स्पीकर बनाओ'), _defineProperty(_messages, 'delete_the_question', 'सवाल हटा दें'), _defineProperty(_messages, 'edit_the_question', 'सवाल संपादित'), _defineProperty(_messages, 'see_all_answers', 'सारे सवालों के जवाब देखे'), _defineProperty(_messages, 'room_chat', 'कक्ष चैट'), _defineProperty(_messages, 'no_questions', 'कोई प्रशन नहीं'), _defineProperty(_messages, 'ask', 'पूछना'), _defineProperty(_messages, 'topics_list', 'विषय सूची'), _defineProperty(_messages, 'media_resources', 'मीडिया संसाधन'), _defineProperty(_messages, 'documents', 'दस्तावेज़'), _defineProperty(_messages, 'questionnaires', 'प्रश्नावली'), _defineProperty(_messages, 'no_questionnaires_yet', 'अभी तक कोई प्रश्नावली नहीं'), _defineProperty(_messages, 'start_date', 'आरंभ करने की तिथि'), _defineProperty(_messages, 'end_date', 'अंतिम तिथि'), _defineProperty(_messages, 'choose_question_answers', 'नीचे दिए गए सवालों के सही उत्तर चुनें'), _defineProperty(_messages, 'no_files_yet', 'कोई फाइल नहीं!'), _defineProperty(_messages, 'no_questions_yet', 'अभी तक कोई प्रशन नहीं!'), _defineProperty(_messages, 'not_attempted', 'प्रयास नहीं किया!'), _defineProperty(_messages, 'add_college', 'कॉलेज जोड़ें'), _defineProperty(_messages, 'add_workplace', 'कार्यस्थल जोड़ें'), _defineProperty(_messages, 'add_highSchool', 'हाई स्कूल जोड़ें'), _defineProperty(_messages, 'add_professionalSkills', 'व्यावसायिक कौशल जोड़ें'), _defineProperty(_messages, 'work_title', 'काम'), _defineProperty(_messages, 'professionalSkills_title', 'व्यावसायिक कौशल'), _defineProperty(_messages, 'college_title', 'कॉलेज'), _defineProperty(_messages, 'highSchool_title', 'उच्च विद्यालय'), _defineProperty(_messages, 'work_education_timeperiod', 'समय सीमा'), _defineProperty(_messages, 'work_education_desciption', 'विवरण'), _defineProperty(_messages, 'work_education_graduated', 'स्नातक किया हुआ'), _defineProperty(_messages, 'work_education_school', 'स्कूल'), _defineProperty(_messages, 'work_education_concentration', 'एकाग्रता'), _defineProperty(_messages, 'work_education_company', 'कंपनी'), _defineProperty(_messages, 'work_education_position', 'पद'), _defineProperty(_messages, 'work_education_university', 'विश्वविद्यालय'), _defineProperty(_messages, 'work_education_workStatus', 'मैं वर्तमान में यहाँ काम करता हूं'), _defineProperty(_messages, 'work_education_saveChanges', 'परिवर्तनों को सुरक्षित करें'), _defineProperty(_messages, 'work_company_placeholder', 'आपने पहले कहां काम किया है?'), _defineProperty(_messages, 'work_position_placeholder', 'अपकी नौकरी शीर्षक क्या है?'), _defineProperty(_messages, 'college_university_placeholder', 'आपने कौन सी कॉलेज / विश्वविद्यालय में भाग लिया?'), _defineProperty(_messages, 'school_placeholder', 'आपने किस स्कूल में भाग लिया?'), _defineProperty(_messages, 'room_location', 'कक्ष स्थान'), _defineProperty(_messages, 'title_questionnaire_assigned', 'नीचे दिए गए प्रश्नावली इस विषय पर दी गई हैं'), _defineProperty(_messages, 'assign_questionnaire', 'प्रश्नावली असाइन करें'), _defineProperty(_messages, 'add_feedback', 'फ़ीडबैक जोड़ें'), _defineProperty(_messages, 'course_location', 'कक्ष स्थान'), _defineProperty(_messages, 'title_location_details', 'नीचे इस कक्ष में जोड़े गए स्थान हैं'), _defineProperty(_messages, 'all_locations', 'सभी स्थान'), _defineProperty(_messages, 'location_directory', 'स्थान निर्देशिका'), _defineProperty(_messages, 'new_location', 'नया स्थान'), _defineProperty(_messages, 'location_info', 'स्थान जानकारी'), _defineProperty(_messages, 'location_name', 'स्थान का नाम'), _defineProperty(_messages, 'location_details', 'स्थान के विवरण'), _defineProperty(_messages, 'location_list', 'स्थान सूची'), _defineProperty(_messages, 'title_created_location_details', 'नीचे आपके द्वारा बनाए गए स्थान के बारे में विवरण दिया गया है।'), _defineProperty(_messages, 'edit_location', 'स्थान संपादित करें'), _defineProperty(_messages, 'locale_directory', 'स्थानीय निर्देशिका'), _defineProperty(_messages, 'share_your_screen', 'अपनी स्क्रीन शेयर करें!'), _defineProperty(_messages, 'city_town', 'शहर / नगर'), _defineProperty(_messages, 'landmark', 'महत्वपूर्ण स्थान के पास'), _defineProperty(_messages, 'contact_information', 'संपर्क जानकारी'), _defineProperty(_messages, 'website_and_social_links', 'वेबसाइट और सामाजिक लिंक'), _defineProperty(_messages, 'basic_information', 'मूलभूत जानकारी'), _defineProperty(_messages, 'add_address', 'पता जोड़ें'), _defineProperty(_messages, 'add_website', 'वेबसाइट जोड़ें'), _defineProperty(_messages, 'add_social_link', 'सामाजिक लिंक जोड़ें'), _defineProperty(_messages, 'add_basic_information', 'बुनियादी जानकारी जोड़ें'), _defineProperty(_messages, 'social_link', 'सामाजिक लिंक'), _defineProperty(_messages, 'birthday', 'जन्मदिन'), _defineProperty(_messages, 'save_changes', 'परिवर्तनों को सुरक्षित करें'), _defineProperty(_messages, 'birth_year', 'जन्म वर्ष'), _defineProperty(_messages, 'add_a_social_links', 'सामाजिक लिंक'), _defineProperty(_messages, 'locale_directory', 'स्थानीय निर्देशिका'), _defineProperty(_messages, 'viewprofile', 'प्रोफाइल देखिये'), _defineProperty(_messages, 'profile', 'प्रोफाइल'), _defineProperty(_messages, 'back', 'पिछली तरफ़'), _defineProperty(_messages, 'sync', 'सिंक'), _defineProperty(_messages, 'pointer', 'सूचक'), _defineProperty(_messages, 'pencil', 'पेंसिल'), _defineProperty(_messages, 'square', 'चौकोर'), _defineProperty(_messages, 'circle', 'वृत्त'), _defineProperty(_messages, 'oval', 'ओवल'), _defineProperty(_messages, 'line', 'लाइन'), _defineProperty(_messages, 'alphabets', 'अल्फाबेट्स '), _defineProperty(_messages, 'erase_all', 'सब मिटा दो'), _defineProperty(_messages, 'fill_background_colors', 'बैकग्राउंड रंग भरें'), _defineProperty(_messages, 'background', 'बैकग्राउंड'), _defineProperty(_messages, 'stroke', 'स्ट्रोक '), _defineProperty(_messages, 'line_color', 'लाइन रंग'), _defineProperty(_messages, 'no_participants', 'कोई प्रतिभागी नहीं'), _defineProperty(_messages, 'no_conference_loaded', 'कोई सम्मेलन लोड नहीं हुआ ...'), _defineProperty(_messages, 'loading', 'लोड हो रहा है'), _defineProperty(_messages, 'loading_please_wait', 'लोड हो रहा है! कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'current_password', 'वर्तमान पासवर्ड'), _defineProperty(_messages, 'new_password', 'नया पासवर्ड'), _defineProperty(_messages, 'retype_new_password', 'नया पासवर्ड दोबारा टाइप करें'), _defineProperty(_messages, 'please_provide_your_valuable_feedback', 'कृपया अपने बहुमूल्य फ़ीडबैक प्रदान करें'), _defineProperty(_messages, 'video_quality', 'वीडियो की गुणवत्ता'), _defineProperty(_messages, 'rate_the_quality_of_the_video_you_experienced', 'आपके द्वारा अनुभवी वीडियो की गुणवत्ता का मूल्यांकन करें'), _defineProperty(_messages, 'audio_quality', 'ध्वनि गुणवत्ता'), _defineProperty(_messages, 'rate_the_quality_of_the_audio_you_experienced', 'आपको अनुभव की गई सामग्री साझा करने की गुणवत्ता का मूल्यांकन करें'), _defineProperty(_messages, 'content_sharing', 'सामग्री शेयरिंग'), _defineProperty(_messages, 'rate_the_quality_of_the_content_sharing_you_experienced', 'आपको अनुभव की गई सामग्री साझा करने की गुणवत्ता का मूल्यांकन करें'), _defineProperty(_messages, 'knowlegeable_session', 'जानकार सत्र'), _defineProperty(_messages, 'rate_how_Knowlegeable_this_session_was', 'इस सत्र के बारे में जानने योग्य कैसे क्रेडेंशियल'), _defineProperty(_messages, 'instructor_skills', 'प्रशिक्षक कौशल'), _defineProperty(_messages, 'rate_how_good_instructor_presented_the_subject', 'रेट कैसे अच्छा प्रशिक्षक विषय प्रस्तुत किया'), _defineProperty(_messages, 'overall_rating', 'समग्र रेटिंग'), _defineProperty(_messages, 'provide_the_overall_rating', 'समग्र रेटिंग प्रदान क्रेडेंशियल'), _defineProperty(_messages, 'your_comments', 'आपकी टिप्पणी'), _defineProperty(_messages, 'your_comments_are_highly_appreciated', 'आपकी टिप्पणियों की अत्यधिक सराहना की जाती है'), _defineProperty(_messages, 'no_thanks', 'जी नहीं, धन्यवाद'), _defineProperty(_messages, 'poor', 'खराब'), _defineProperty(_messages, 'average', 'औसत'), _defineProperty(_messages, 'good', 'अच्छा'), _defineProperty(_messages, 'very_good', 'बहुत अच्छा'), _defineProperty(_messages, 'excellent', 'उत्कृष्ट'), _defineProperty(_messages, 'feedback_submit', 'जमा करें'), _defineProperty(_messages, 'become_host_to_access_bellow_features', 'ब्रश सुविधाओं को एक्सेस करने के लिए होस्ट बनें'), _defineProperty(_messages, 'screen_shared', 'स्क्रीन शेयर्ड!'), _defineProperty(_messages, 'you_are_sharing_your_screen', 'आप अपनी स्क्रीन शेयर कर रहे हैं!'), _defineProperty(_messages, 'ok', 'ठीक है '), _defineProperty(_messages, 'warning', 'चेतावनी'), _defineProperty(_messages, 'delete_question_alert', 'क्या आप सुनिश्चित हैं कि आप प्रश्न को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_category_alert', 'क्या आप सुनिश्चित हैं कि आप श्रेणी को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_corporate_alert', 'क्या आप सुनिश्चित हैं कि आप कॉर्पोरेट को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_location_alert', 'क्या आप सुनिश्चित हैं कि आप स्थान को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_package_alert', 'क्या आप सुनिश्चित हैं कि आप पैकेज को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_address_alert', 'क्या आप सुनिश्चित हैं कि आप पता हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_link_alert', 'क्या आप सुनिश्चित हैं कि आप वेबसाइट लिंक को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_social_link_alert', 'क्या आप सुनिश्चित हैं कि आप सामाजिक लिंक को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_birth_day_alert', 'क्या आप सुनिश्चित हैं कि आप जन्मदिन को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_gender_alert', 'क्या आप सुनिश्चित हैं कि आप लिंग को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_school_alert', 'क्या आप सुनिश्चित हैं कि आप स्कूल को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_college_alert', 'क्या आप सुनिश्चित हैं कि आप कॉलेज को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_workplace_alert', 'क्या आप सुनिश्चित हैं कि आप कार्यस्थल को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_professional_alert', 'क्या आप सुनिश्चित हैं कि आप व्यावसायिक कौशल को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_user_alert', 'क्या आप सुनिश्चित हैं कि आप उपयोगकर्ता को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_room_alert', 'क्या आप सुनिश्चित हैं कि आप कक्ष को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_topic_alert', 'क्या आप सुनिश्चित हैं कि आप विषय को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_file_alert', 'क्या आप सुनिश्चित हैं कि आप फाइल को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_all_files_alert', 'क्या आप सुनिश्चित हैं कि आपको ये सारी फाइल्स को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_questionaire_alert', 'क्या आप सुनिश्चित हैं कि आपको ये सारी प्रश्नावली को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_schedule_alert', 'क्या आप सुनिश्चित हैं कि आप शेड्यूल को हटाना चाहते हैं?'), _defineProperty(_messages, 'edit_schedule_alert', 'यदि आप शेड्यूल को संपादित करते हैं तो निमंत्रण लिंक को फिर से भेजने की आवश्यकता है क्या आप वास्तव में संपादित करना चाहते हैं?'), _defineProperty(_messages, 'delete_whiteboardObjects_alert', 'क्या आप सुनिश्चित हैं कि आप हटाना चाहते हैं?'), _defineProperty(_messages, 'logout_confirm_incall', 'आप कॉल में हैं, क्या आप सुनिश्चित हैं कि आप लॉग आउट करना चाहते हैं?'), _defineProperty(_messages, 'author', 'रचयिता'), _defineProperty(_messages, 'selected_codec', 'चुना हुआ कोडेक'), _defineProperty(_messages, 'start_time', 'शुरू समय'), _defineProperty(_messages, 'end_time', 'अंतिम समय'), _defineProperty(_messages, 'delete_room_user_alert', 'क्या आप सुनिश्चित हैं कि आप उपयोगकर्ता को हटाना चाहते हैं?'), _defineProperty(_messages, 'chat_file_alert', 'फ़ाइल का आकार 20MB से कम होना चाहिए!..'), _defineProperty(_messages, 'share_file_alert', 'फ़ाइल का आकार 10MB से कम होना चाहिए!..'), _defineProperty(_messages, 'topic_file_alert', 'फ़ाइल का आकार 20MB से कम होना चाहिए!..'), _defineProperty(_messages, 'url_alert', 'एक URL दर्ज करें!..'), _defineProperty(_messages, 'valid_url_alert', 'वैध URL नहीं!..'), _defineProperty(_messages, 'unassign_question_alert', 'क्या आप सुनिश्चित हैं कि आप प्रश्नावली को अनसिनित करना चाहते हैं?'), _defineProperty(_messages, 'generate_meeting_alert', 'पहले से ही इस कमरे के लिए निर्धारित मीटिंग्स, क्या आप दोबारा बनाना चाहते हैं?'), _defineProperty(_messages, 'questionnaire_alert', 'प्रश्नावली अभी तक शुरू नहीं हुई!..'), _defineProperty(_messages, 'delete_group_alert', 'क्या आप सुनिश्चित हैं कि आप समूह को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_member_group_alert', 'क्या आप सुनिश्चित हैं कि आप समूह के सदस्य को हटाना चाहते हैं?'), _defineProperty(_messages, 'submitted_by', 'द्वारा प्रस्तुत'), _defineProperty(_messages, 'user_name', 'उपयोगकर्ता नाम'), _defineProperty(_messages, 'over_all_rating', 'समग्र रेटिंग'), _defineProperty(_messages, 'knowlegable_session', 'जानकार सत्र'), _defineProperty(_messages, 'user_comment', 'उपयोगकर्ता टिप्पणी'), _defineProperty(_messages, 'user_feedback_data', 'प्रतिक्रिया'), _defineProperty(_messages, 'individual_feedback', 'उपयोगकर्ता द्वारा सबमिट किए गए फ़ीडबैक विवरण'), _defineProperty(_messages, 'feedback_details', 'व्यक्तिगत फ़ीडबैक विवरण'), _defineProperty(_messages, 'submitted', 'प्रस्तुत'), _defineProperty(_messages, 'feedback_submitted_successfully', 'सफलतापूर्वक सबमिट की गई प्रतिक्रिया'), _defineProperty(_messages, 'edit_question', 'प्रश्न संपादित करें'), _defineProperty(_messages, 'question', 'प्रश्न'), _defineProperty(_messages, 'type', 'प्रकार'), _defineProperty(_messages, 'mark_correct_answer', 'दो जवाब विकल्पों को दर्ज करें और सही उत्तर दर्ज करें'), _defineProperty(_messages, 'select_type', 'प्रकार चुनें'), _defineProperty(_messages, 'remove', 'हटाना'), _defineProperty(_messages, 'answer_choice', 'उत्तर विकल्प'), _defineProperty(_messages, 'delete_this_location', 'इस स्थान को हटा दें'), _defineProperty(_messages, 'no_locations_yet', 'अभी तक कोई स्थान नहीं!!!'), _defineProperty(_messages, 'enter_the_answer_choices_and_mark_which_answer_is_correct', 'उत्तर के विकल्प दर्ज करें, और चिह्नित करें कि कौन सा उत्तर सही है'), _defineProperty(_messages, 'transport_title', 'ट्रांसपोर्ट?'), _defineProperty(_messages, 'uploadtotopic_title', 'इस विषय में फाइल अपलोड करने के लिए सामग्री प्रकार चुनें'), _defineProperty(_messages, 'file_title', 'फ़ाइलें'), _defineProperty(_messages, 'media_title', 'मीडिया'), _defineProperty(_messages, 'sco_title', 'ज़िप'), _defineProperty(_messages, 'youtube_url_title', 'यूट्यूब यूआरएल:'), _defineProperty(_messages, 'upload_title', 'अपलोड करें'), _defineProperty(_messages, 'filetypes_title', 'फाइल के प्रकार :'), _defineProperty(_messages, 'youtube_url_placeholder', 'पेस्ट करें लिंक यहाँ जैसे: https://www.youtube.com/channel/UCdPJhu2eYCXIDo5hcTDw0_g'), _defineProperty(_messages, 'candidate_name', 'प्रत्याशी का नाम'), _defineProperty(_messages, 'questionnaire_result', 'परिणाम'), _defineProperty(_messages, 'result_details', 'परिणाम विवरण'), _defineProperty(_messages, 'result_list', 'परिणाम सूची'), _defineProperty(_messages, 'answer_sheet', 'उत्तर पत्रिका'), _defineProperty(_messages, 'answer_sheet_details', 'उत्तर पत्र विवरण'), _defineProperty(_messages, 'grade', 'ग्रेड'), _defineProperty(_messages, 'open', 'खुला'), _defineProperty(_messages, 'close', 'बंद करे'), _defineProperty(_messages, 'select_location', 'स्थान चुनें'), _defineProperty(_messages, 'participants_group', 'प्रतिभागी समूह'), _defineProperty(_messages, 'participants_list', 'प्रतिभागियों की सूची'), _defineProperty(_messages, 'enter_group_name', 'समूह नाम दर्ज करें'), _defineProperty(_messages, 'transport_title', 'ट्रांसपोर्ट?'), _defineProperty(_messages, 'remove_user_from_room', 'उपयोगकर्ता कक्ष से निकालें'), _defineProperty(_messages, 'add_user', 'उपयोगकर्ता जोड़ें'), _defineProperty(_messages, 'add_student', 'उपस्थिति जोड़ें'), _defineProperty(_messages, 'view_students', 'उपस्थिति देखें'), _defineProperty(_messages, 'list_results', 'सूची परिणाम'), _defineProperty(_messages, 'view_edit_questionaire_from_topic', 'विषय से प्रश्नावली देखें / संपादित करें'), _defineProperty(_messages, 'unassign_questionnaire_from_topic', 'विषय से प्रश्नावली अनियंत्रित करें'), _defineProperty(_messages, 'remove_question_from_questionnaire', 'प्रश्नावली से प्रश्न निकालें'), _defineProperty(_messages, 'view_edit_question_from_questionnaire', 'प्रश्नावली से प्रश्न देखें / संपादित करें'), _defineProperty(_messages, 'not_allowed', 'अनुमति नहीं हैं'), _defineProperty(_messages, 'no_questions_added_to_this_questionnaire', 'इस प्रश्नावली में कोई प्रश्न नहीं जोड़ा गया'), _defineProperty(_messages, 'feature_info', 'सुविधा जानकारी'), _defineProperty(_messages, 'features', 'विशेषताएं'), _defineProperty(_messages, 'no_of_rooms', 'कमरों की संख्या'), _defineProperty(_messages, 'no_of_topics', 'विषयों की संख्या'), _defineProperty(_messages, 'server_recording', 'सर्वर रिकॉर्डिंग'), _defineProperty(_messages, 'client_recording', 'क्लाइंट रिकॉर्डिंग'), _defineProperty(_messages, 'video_conference', 'वीडियो सम्मेलन'), _defineProperty(_messages, 'continuous_presence', 'सतत उपस्थिति की संख्या'), _defineProperty(_messages, 'edit_group_name', 'समूह का नाम संपादित करें'), _defineProperty(_messages, 'add_participants_group', 'प्रतिभागी समूह जोड़ें'), _defineProperty(_messages, 'search_participants', 'खोज प्रतिभागियों'), _defineProperty(_messages, 'delete_participant_alert', 'क्या आप इस भागीदार को निकालना चाहते हैं?'), _defineProperty(_messages, 'created_by', 'द्वारा बनाई गई'), _defineProperty(_messages, 'group_participants', 'प्रतिभागियों की सूची'), _defineProperty(_messages, 'title_groupParticipants_details', 'नीचे इस समूह में जोड़े गए प्रतिभागी हैं'), _defineProperty(_messages, 'please_enter_group_name', 'समूह का नाम रिक्त नहीं हो सकता'), _defineProperty(_messages, 'please_enter_participant_name', 'कृपया प्रतिभागी का चयन करें'), _defineProperty(_messages, 'participants_group_list', 'प्रतिभागी समूह सूची'), _defineProperty(_messages, 'room_configuration', 'कक्ष कॉन्फ़िगरेशन'), _defineProperty(_messages, 'configure_feedback', 'प्रतिक्रिया कॉन्फ़िगर करें'), _defineProperty(_messages, 'configration', 'विन्यास'), _defineProperty(_messages, 'feedbackType_title', 'प्रतिक्रिया के प्रकार'), _defineProperty(_messages, 'codecType_title', 'कोडेक प्रकार'), _defineProperty(_messages, 'enableLive_title', 'लाइव सक्षम करें'), _defineProperty(_messages, 'assign_questionaire', 'प्रश्नावली असाइन करें'), _defineProperty(_messages, 'delete_SMTPSettings_alert', 'क्या आप वाकई इस SMTP सेटिंग को हटाना चाहते हैं?'), _defineProperty(_messages, 'time_limit', 'समय सीमा'), _defineProperty(_messages, 'no_time_limitations', 'कोई समय सीमाएं नहीं'), _defineProperty(_messages, 'delete_LDAPSettings_alert', 'क्या आप वाकई इस LDAP सेटिंग को हटाना चाहते हैं?'), _defineProperty(_messages, 'previous', 'पिछला'), _defineProperty(_messages, 'next', 'अगला'), _defineProperty(_messages, 'back_to_uploadlist', 'अपलोड सूची पर वापस जाएं'), _defineProperty(_messages, 'enable_swot', 'स्वाॉट सक्षम करें'), _defineProperty(_messages, 'select_an_answer_otherwise_it_will_not_be_considered_for_evaluation', 'एक जवाब चुनें, अन्यथा इसे मूल्यांकन के लिए नहीं माना जाएगा'), _defineProperty(_messages, 'select_role', 'भूमिका का चयन करें'), _defineProperty(_messages, 'group_name', 'समूह का नाम'), _defineProperty(_messages, 'createdby', 'के द्वारा बनाई गई'), _defineProperty(_messages, 'count', 'कुल'), _defineProperty(_messages, 'please_enter_the_question', 'कृपया प्रश्न दर्ज करें'), _defineProperty(_messages, 'invalid_mail_id', 'अमान्य मेल आईडी'), _defineProperty(_messages, 'accept', 'स्वीकार'), _defineProperty(_messages, 'reject', 'अस्वीकार'), _defineProperty(_messages, 'request_pending', 'अनुरोध अपूर्ण है'), _defineProperty(_messages, 'start_chating', 'चाट शुरू करो ....'), _defineProperty(_messages, 'export_users', 'उपयोगकर्ताओं को निर्यात करें'), _defineProperty(_messages, 'import_users', 'उपयोगकर्ताओं को आयात करें'), _defineProperty(_messages, 'import_format', 'आयात प्रारूप'), _defineProperty(_messages, 'pdf_view', 'पीडीएफ देखें'), _defineProperty(_messages, 'uploading_please_wait', 'अपलोड हो रहा है! कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'host_access', 'होस्ट प्रवेश'), _defineProperty(_messages, 'become_host', 'होस्ट बनें'), _defineProperty(_messages, 'become_a_host', 'होस्ट बनें'), _defineProperty(_messages, 'request_access_share', 'स्क्रीन / दस्तावेज़ साझा करने के लिए अभिगम का अनुरोध'), _defineProperty(_messages, 'revoke', 'वापस लेना'), _defineProperty(_messages, 'enter_host_password', 'होस्ट पासवर्ड दर्ज करें'), _defineProperty(_messages, 'host_error', 'गलत होस्ट पासवर्ड, कृपया पुनः प्रयास करें'), _defineProperty(_messages, 'revoke_error', 'आप पहले से ही होस्ट हैं क्या आप निरस्त करना चाहते हैं ...?'), _defineProperty(_messages, 'delete_this_group', 'इस समूह की याचिका को हटा दें'), _defineProperty(_messages, 'remove_participants_from_group', 'समूह से प्रतिभागियों को निकालें'), _defineProperty(_messages, 'confirm_password', 'पासवर्ड की पुष्टि करें'), _defineProperty(_messages, 'no_data_found', 'कोई डेटा नहीं मिला'), _defineProperty(_messages, 'invalid_group_name', 'अमान्य समूह का नाम'), _defineProperty(_messages, 'no_groups_found', 'कोई ग्रुप्स नहीं मिलें'), _defineProperty(_messages, 'select_language', 'भाषा चुनिए'), _defineProperty(_messages, 'no_data_found', 'कोई डेटा नहीं मिला'), _defineProperty(_messages, 'start_class', 'कक्षा प्रारंभ करें'), _defineProperty(_messages, 'join_class', 'कक्षा में शामिल हों'), _defineProperty(_messages, 'create_a_class', 'एक क्लास बनाएं'), _defineProperty(_messages, 'upcoming_classes', 'आगामी अनुसूची'), _defineProperty(_messages, 'past_classes', 'पिछली अनुसूची'), _defineProperty(_messages, 'have_class', 'पहले से ही एक शेड्यूल है'), _defineProperty(_messages, 'create_edit_class', 'कक्षा बनाएं / संपादित करें'), _defineProperty(_messages, 'class_name', 'कक्षा का नाम'), _defineProperty(_messages, 'please_enter_class_name', 'कृपया वर्ग का नाम दर्ज करें'), _defineProperty(_messages, 'my_classes', 'मेरी कक्षाएं'), _defineProperty(_messages, 'set_class_password', 'अपना क्लास पासवर्ड सेट करें'), _defineProperty(_messages, 'edit_class', 'इस कक्षा को संपादित करें'), _defineProperty(_messages, 'delete_class', 'इस कक्षा को हटाएं'), _defineProperty(_messages, 'edit_class_alert', 'यदि आप कक्षा को संपादित करते हैं तो निमंत्रण लिंक को फिर से भेजा जाना चाहिए। क्या आप वास्तव में संपादित करना चाहते हैं?'), _defineProperty(_messages, 'delete_class_alert', 'क्या आप वाकई इस कक्षा को हटाना चाहते हैं?'), _defineProperty(_messages, 'set_desc', 'विवरण सेट करें'), _defineProperty(_messages, 'submitted_on', 'सबमिट करने की तारीख'), _defineProperty(_messages, 'room_options', 'कमरे के विकल्प'), _defineProperty(_messages, 'select', 'चयन'), _defineProperty(_messages, 'file', 'फ़ाइल'), _defineProperty(_messages, 'add_topics', 'कमरे में विषय जोड़ें'), _defineProperty(_messages, 'room_assignments', 'कार्य'), _defineProperty(_messages, 'assignment_list', 'कार्य सूची'), _defineProperty(_messages, 'assignment_details', 'कार्य जानकारी'), _defineProperty(_messages, 'assignment_name', 'कार्य का नाम'), _defineProperty(_messages, 'room_assignment_manager', 'कक्ष कार्य प्रबंधक'), _defineProperty(_messages, 'list_assignments', 'इस कमरे से संबंधित कार्य की सूची नीचे दी गई है'), _defineProperty(_messages, 'no_assignments_yet', 'अभी तक कोई कार्य नहीं है!..'), _defineProperty(_messages, 'submissions', 'प्रस्तुतियाँ'), _defineProperty(_messages, 'submission_list', 'प्रस्तुत सूची'), _defineProperty(_messages, 'student_name', 'छात्र का नाम'), _defineProperty(_messages, 'back_to_assignments', 'वापस कार्य पर'), _defineProperty(_messages, 'become_host_to_share_your_document', 'अपने दस्तावेज़ को साझा करने के लिए होस्ट बनें'), _defineProperty(_messages, 'share_your_document', 'अपनी दस्तावेज़ साझा करें!'), _defineProperty(_messages, 'share_your_screen_document', 'अपनी स्क्रीन / दस्तावेज़ साझा करें!'), _defineProperty(_messages, 'room_feedback_title', 'प्रतिक्रिया'), _defineProperty(_messages, 'manage_assignments', 'कार्य प्रबंधित करें'), _defineProperty(_messages, 'manage_questionnaire', 'प्रश्नावली प्रबंधित करें'), _defineProperty(_messages, 'plagiarism', 'साहित्यिक चोरी'), _defineProperty(_messages, 'drag', 'खींचें'), _defineProperty(_messages, 'delete_assignment_alert', 'सभी सबमिशन भी हटा दिए जाएंगे, क्या आप वाकई यह कार्य हटाना चाहते हैं?'), _defineProperty(_messages, 'refresh_schedules', 'रीफ्रेश अनुसूचियों'), _defineProperty(_messages, 'schedules', 'अनुसूचियों'), _defineProperty(_messages, 'refresh_rooms', 'रीफ्रेश कक्ष'), _defineProperty(_messages, 'creating_please_wait', 'बना रहे हैं! कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'updating_please_wait', 'अद्यतन कर रहे हैं! कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'enable', 'सक्षम'), _defineProperty(_messages, 'publish', 'प्रकाशित करना'), _defineProperty(_messages, 'categories', 'श्रेणियाँ है.'), _defineProperty(_messages, 'corporates', 'कॉरपोरेट्स है.'), _defineProperty(_messages, 'feedbacks', 'प्रतिक्रिया है.'), _defineProperty(_messages, 'locations', 'स्थानों है.'), _defineProperty(_messages, 'packages', 'पैकेजेस है.'), _defineProperty(_messages, 'participants', 'समूह में भाग लेने वाले'), _defineProperty(_messages, 'rooms', 'कमरा है.'), _defineProperty(_messages, 'users', 'उपयोगकर्ताओं है.'), _defineProperty(_messages, 'list_topic', 'विषय है.'), _defineProperty(_messages, 'list_files', 'फ़ाइलें है.'), _defineProperty(_messages, 'list_certificates', 'प्रमाणपत्रों की है.'), _defineProperty(_messages, 'results', 'परिणाम है.'), _defineProperty(_messages, 'polls', 'सर्वेक्षण'), _defineProperty(_messages, 'poll_list', 'सर्वेक्षण सूची'), _defineProperty(_messages, 'list_polls', 'इस कमरे से संबंधित सर्वेक्षण की सूची नीचे दी गई है।'), _defineProperty(_messages, 'no_polls_yet', 'अभी तक कोई सर्वेक्षण नहीं! ..'), _defineProperty(_messages, 'package_validFrom', 'से वैध'), _defineProperty(_messages, 'create_poll', 'सर्वेक्षण बनाएं'), _defineProperty(_messages, 'option', 'विकल्प'), _defineProperty(_messages, 'package_validFrom', 'से वैध'), _defineProperty(_messages, 'published', 'प्रकाशित'), _defineProperty(_messages, 'publish', 'प्रकाशित करना'), _defineProperty(_messages, 'update_poll', 'सर्वेक्षण अद्यतन करें'), _defineProperty(_messages, 'delete_poll_alert', 'क्या आप वाकई इस सर्वेक्षण को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_poll', 'मतदान हटाएं'), _defineProperty(_messages, 'broadcast', 'समाचार प्रसारण'), _defineProperty(_messages, 'broadcast_news_list', 'प्रसारण समाचार सूची'), _defineProperty(_messages, 'no_broadcast', 'कोई प्रसारण समाचार नहीं'), _defineProperty(_messages, 'broadcast_list', 'प्रसारण सूची'), _defineProperty(_messages, 'delete_poll', 'सर्वेक्षण हटाएं'), _defineProperty(_messages, 'no_submittions_yet', 'अभी तक कोई प्रस्तुतियाँ नहीं है!..'), _defineProperty(_messages, 'list_poll_submissions', 'नीचे इस सर्वेक्षण से संबंधित प्रस्तुतियाँ की सूची है।'), _defineProperty(_messages, 'poll_analysis', 'नीचे इस सर्वेक्षण से संबंधित विश्लेषण चार्ट है'), _defineProperty(_messages, 'delete_broadcast_alert', 'क्या आप वाकई इस प्रसारण समाचार को हटाना चाहते हैं?'), _defineProperty(_messages, 'view_comments', 'टिप्पणियाँ'), _defineProperty(_messages, 'view_all_comments', 'सभी टिप्पणियां देखें'), _defineProperty(_messages, 'edit_comment', 'टिप्पणी संपादित करें'), _defineProperty(_messages, 'delete_comment', 'टिप्पणी निकालें'), _defineProperty(_messages, 'reply_on_comment', 'टिप्पणी पर उत्तर दें'), _defineProperty(_messages, 'reply_comment', 'जवाब दें'), _defineProperty(_messages, 'previous_comments', 'पिछली टिप्पणी'), _defineProperty(_messages, 'comment_on_broadcast_news', 'प्रसारण समाचार पर टिप्पणी'), _defineProperty(_messages, 'your_reply', "टिप्पणी पर उत्तर दें"), _defineProperty(_messages, 'delete_broadcast_alert', 'क्या आप वाकई इस प्रसारण को हटाना चाहते हैं?'), _defineProperty(_messages, 'refresh_polls', 'रीफ्रेश सर्वेक्षण'), _defineProperty(_messages, 'studentId', 'छात्र आईडी'), _defineProperty(_messages, 'view_result', 'परिणाम देखें'), _defineProperty(_messages, 'submit_poll', 'सर्वेक्षण जमा करें'), _defineProperty(_messages, 'attendance', 'उपस्थिति'), _defineProperty(_messages, 'please_enter_the_broadcast', 'कृपया प्रसारण समाचार दर्ज करें'), _defineProperty(_messages, 'total_attendance', 'कुल उपस्थिति'), _defineProperty(_messages, 'student_list', 'छात्र सूची'), _defineProperty(_messages, 'class_list', 'कक्षा सूची'), _defineProperty(_messages, 'attendance', 'Attendance'), _defineProperty(_messages, 'expiry_Date', 'समाप्ति तिथि'), _defineProperty(_messages, 'students', 'students'), _defineProperty(_messages, 'overall', 'OverAll'), _defineProperty(_messages, 'detailed', 'Detailed'), _defineProperty(_messages, 'classes', 'classes'), _defineProperty(_messages, 'view_attendance', 'उपस्थिति देखें'), _defineProperty(_messages, 'assignment_reports', 'असाइनमेंट रिपोर्ट'), _defineProperty(_messages, 'assignment_list', 'असाइनमेंट सूची'), _defineProperty(_messages, 'my_reports', 'मेरी रिपोर्ट'), _defineProperty(_messages, 'created_date', 'रचना तिथि'), _defineProperty(_messages, 'expiry_date', 'समाप्ति तिथि'), _defineProperty(_messages, 'assignment', 'असाइनमेंट'), _defineProperty(_messages, 'test_reports', 'जाँच रिपोर्ट'), _defineProperty(_messages, 'active_users', 'सक्रिय उपयोगकर्ता'), _defineProperty(_messages, 'invalid_enddate', 'अमान्य समाप्ति तिथि'), _defineProperty(_messages, 'select_the_days', 'कृपया दिन चुनें'), _defineProperty(_messages, 'select_the_endson', 'कृपया समाप्त होने का चयन करें'), _defineProperty(_messages, 'select_occurence', 'कृपया नंबर दर्ज करें घटनाओं की'), _defineProperty(_messages, 'current_day', 'वर्तमान दिन'), _defineProperty(_messages, 'recurring', 'आवर्ती'), _defineProperty(_messages, 'current_recurring', 'वर्तमान दिन / पुनरावर्ती हटाएं'), _defineProperty(_messages, 'delete_current_recurring', 'क्या आप वर्तमान दिन (या) पुनरावर्ती शेड्यूल को हटाना चाहते हैं?'), _defineProperty(_messages, 'title_user_details', 'नीचे आपके द्वारा बनाए गए उपयोगकर्ता के विवरण दिए गए हैं'), _defineProperty(_messages, 'registration_prompt', 'कृपया पंजीकरण के लिए नीचे फ़ील्ड भरें'), _defineProperty(_messages, 'institute_name', 'कृपया संस्थान नाम दर्ज करें'), _defineProperty(_messages, 'please_enter_institute_name', 'कृपया संस्थान नाम दर्ज करें'), _defineProperty(_messages, 'inactive_user', 'पंजीकृत उपयोगकर्ता'), _defineProperty(_messages, 'activate_user', 'सक्रिय उपयोगकर्ता'), _defineProperty(_messages, 'active_user', 'सक्रिय उपयोगकर्ता'), _defineProperty(_messages, 'inactive_user_list', 'सक्रिय उपयोगकर्ता सूची में'), _defineProperty(_messages, 'Marks', 'अंक'), _defineProperty(_messages, 'total_marks', 'कुल अंक'), _defineProperty(_messages, 'multiple_choice_answers', 'एकाधिक विकल्प जवाब'), _defineProperty(_messages, 'multiple_responsive_answers', 'एकाधिक उत्तरदायी उत्तर'), _defineProperty(_messages, 'true_false', 'हां या नहीं जवाब'), _defineProperty(_messages, 'active_users_list', 'सक्रिय उपयोगकर्ता सूची'), _defineProperty(_messages, 'course_attendance', 'कोर्स की उपस्थिति'), _defineProperty(_messages, 'true_false', 'हां या नहीं जवाब'), _defineProperty(_messages, 'show_result', 'परिणाम दिखाओ'), _defineProperty(_messages, 'student_reg_form', 'छात्र पंजीकरण फॉर्म'), _defineProperty(_messages, 'already_registered_user', 'पहले से पंजीकृत उपयोगकर्ता?'), _defineProperty(_messages, 'i_agree', 'मैं सहमत हूं'), _defineProperty(_messages, 'terms_conditions', 'नियम और शर्तें'), _defineProperty(_messages, 'grade_configuration', 'ग्रेड कॉन्फ़िगरेशन'), _defineProperty(_messages, 'title_grade_configuration', 'प्रश्नावली ग्रेड को यहां कॉन्फ़िगर करें.'), _defineProperty(_messages, 'title_view_grade_configuration', 'नीचे दिए गए ग्रेड हैं जो प्रश्नावली परिणाम में दिखाई देंगे।'), _defineProperty(_messages, 'fullcalender', 'पूर्ण कैलेंडर'), _defineProperty(_messages, 'select_duration', 'प्लस अवधि का चयन करें'), _defineProperty(_messages, 'set_hours', 'सेट घंटे'), _defineProperty(_messages, 'set_minutes', 'सेट मिनट'), _defineProperty(_messages, 'checkin_time', 'प्रवेश का समय'), _defineProperty(_messages, 'checkout_time', 'जाने का समय'), _defineProperty(_messages, 'topic_report', 'विषय रिपोर्ट '), _defineProperty(_messages, 'course_view', 'पाठ्यक्रम देखें'), _defineProperty(_messages, 'topic_name', 'विषय का नाम'), _defineProperty(_messages, 'viewed_topics', 'देखा गया विषय'), _defineProperty(_messages, 'topic_viewed_users', 'विषय देखें उपयोगकर्ता'), _defineProperty(_messages, 'description', 'विवरण'), _defineProperty(_messages, 'status', 'स्थिति'), _defineProperty(_messages, 'deleted_user', 'हटाया हुआ उपयोगकर्ता'), _defineProperty(_messages, 'registered', 'दर्ज कराई'), _defineProperty(_messages, 'deleted', 'हटाए गए'), _defineProperty(_messages, 'deleted_list', 'हटाए गए उपयोगकर्ता'), _defineProperty(_messages, 'active_user_list', 'सक्रिय उपयोगकर्ता'), _defineProperty(_messages, 'registered_user_list', 'पंजीकृत उपभोक्ता'), _defineProperty(_messages, 'skip', 'छोड़ें'), _defineProperty(_messages, 'all_participants_groups', 'सभी प्रतिभागी समूह'), _defineProperty(_messages, 'from', 'से'), _defineProperty(_messages, 'to', 'तक'), _defineProperty(_messages, 'no_replies', 'जवाब नहीं'), _defineProperty(_messages, 'no_answers', 'कोई जवाब नहीं'), _defineProperty(_messages, 'summary', 'सारांश'), _defineProperty(_messages, 'link_is_either_expired_or_broken', 'लिंक या तो समाप्त हो या टूटा हुआ है'), _defineProperty(_messages, 'room_students', 'पाठ्यक्रम के छात्रों'), _defineProperty(_messages, 'topic_content', 'विषय सामग्री'), _defineProperty(_messages, 'you_are_in_mange_users_panel', 'आप उपयोगकर्ता पैनल प्रबंधित कर रहे हैं'), _defineProperty(_messages, 'work_edu_details', 'कार्य और शिक्षा देखें'), _defineProperty(_messages, 'view_contact_details', 'संपर्क देखें'), _defineProperty(_messages, 'view_locale', 'लोकले देखें'), _defineProperty(_messages, 'you_are_in_active_users_panel', 'आप सक्रिय उपयोगकर्ता पैनल में हैं'), _defineProperty(_messages, 'you_are_in_my_profile_panel', 'आप मेरे खाते के पैनल में हैं'), _defineProperty(_messages, 'you_are_in_package_list_panel', 'आप पैकेज प्रबंधन पैनल में हैं'), _defineProperty(_messages, 'you_are_in_corporate_list_panel', 'आप कॉर्पोरेट पैनल में हैं'), _defineProperty(_messages, 'you_are_in_category_list_panel', 'आप श्रेणी प्रबंधन पैनल में हैं'), _defineProperty(_messages, 'you_are_in_room_list_panel', 'आप कमरे प्रबंधन पैनल में हैं'), _defineProperty(_messages, 'you_are_in_location_list_panel', 'आप स्थान पैनल में हैं'), _defineProperty(_messages, 'you_are_in_participant_group_list_panel', 'आप प्रतिभागी समूह पैनल में हैं'), _defineProperty(_messages, 'you_are_in_questionarie_list_panel', 'आप प्रश्नावली पैनल में हैं'), _defineProperty(_messages, 'edit_grade_configuaration', 'ग्रेड कॉन्फिगरेशन संपादित करें'), _defineProperty(_messages, 'You_are_in_reports_list_panel', 'आप रिपोर्ट पैनल में हैं'), _defineProperty(_messages, 'add_assignment', 'असाइनमेंट जोड़ें'), _defineProperty(_messages, 'users_activity', 'उपयोगकर्ता गतिविधि'), _defineProperty(_messages, 'Update', "संपादित करें"), _defineProperty(_messages, 'blocked', 'अवरोधित'), _defineProperty(_messages, 'guest', 'अतिथि'), _defineProperty(_messages, 'requiedFieldText', 'कृपया दर्ज करें'), _defineProperty(_messages, 'requiedFieldDate', 'कृपया चुने'), _defineProperty(_messages, 'validInputData', 'कृपया वैध दर्ज करें'), _defineProperty(_messages, 'select_dropdown', 'चुने'), _defineProperty(_messages, 'save_publish', 'बचाना & प्रकाशित करना'), _defineProperty(_messages, 'connect_with_social_link', 'सामाजिक लिंक से जुड़ें'), _defineProperty(_messages, 'request_for_share_document', 'शेयर स्क्रीन / दस्तावेज़ के लिए अनुरोध'), _defineProperty(_messages, 'requested_for_share_document_please_wait', 'शेयर स्क्रीन / दस्तावेज़ के लिए अनुरोध किया, कृपया प्रतीक्षा करें .....'), _defineProperty(_messages, 'confirm_unassign_questionnaire_topics', 'क्या आप वाकई प्रश्नावली को अनसाइंड करना चाहते हैं क्योंकि इस प्रश्नावली के आधार पर परिणाम हैं?'), _defineProperty(_messages, 'update_publish', 'संपादित & प्रकाशित करना'), _defineProperty(_messages, 'invalid_file_format', 'अमान्य फाइल प्रारूप'), _defineProperty(_messages, 'confirm_delete_question_from_questionnaire', 'क्या आप प्रश्नावली से प्रश्न हटाना चाहते हैं क्योंकि प्रश्न के आधार पर परिणाम होते हैं?'), _defineProperty(_messages, 'stop_screen_share', 'स्क्रीन शेयर बंद करें'), _defineProperty(_messages, 'pause_screen_share', 'स्क्रीन शेयर रोकें'), _defineProperty(_messages, 'play_screen_share', 'स्क्रीन साझा प्ले करें'), _defineProperty(_messages, 'add_students', 'छात्र जोड़ें'), _defineProperty(_messages, 'confirm_submit_alert', 'क्या आप वाकई सबमिट करने के इच्छुक हैं?'), _defineProperty(_messages, 'user_reg_form', 'उपयोगकर्ता पंजीकरण फॉर्म'), _defineProperty(_messages, 'registration_please_wait', 'पंजीकरण कर रहा है, कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'student_data_not_found', 'छात्र डेटा नहीं मिला'), _defineProperty(_messages, 'individual_user', 'व्यक्तिगत उपयोगकर्ता'), _defineProperty(_messages, 'group', 'समूह'), _defineProperty(_messages, 'add_groups', 'समूह जोड़ें'), _defineProperty(_messages, 'edit_room', 'कमरा संपादित करें'), _defineProperty(_messages, 'edit_profie', 'प्रोफाइल संपादित करें'), _defineProperty(_messages, 'create_topic', 'विषय बनाएँ'), _defineProperty(_messages, 'student_assignment_list_title', 'आपके द्वारा सबमिट किए गए कार्य'), _defineProperty(_messages, 'evaluation_not_yet_done', 'मूल्यांकन अभी तक नहीं किया'), _defineProperty(_messages, 'instructor_feedback', "प्रशिक्षक का फीडबैक"), _defineProperty(_messages, 'total_assignment_marks', 'कुल असाइनमेंट मार्क्स'), _defineProperty(_messages, 'scored_marks', 'स्कोरांकित मार्क्स'), _defineProperty(_messages, 'add_another_field', 'अन्य फ़ील्ड जोड़ें'), _defineProperty(_messages, 'maximum_marks', 'अधिकतम अंक'), _defineProperty(_messages, 'total_score', 'कुल स्कोर'), _defineProperty(_messages, 'load_more', 'और लोड करें..'), _defineProperty(_messages, 'default', 'पूर्व निर्धारित'), _defineProperty(_messages, 'proxy', 'प्रतिनिधि'), _defineProperty(_messages, 'quality', 'गुणवत्ता'), _defineProperty(_messages, 'best_quality', 'सर्वोत्तम गुणवत्ता'), _defineProperty(_messages, 'better_quality', 'बेहतर गुणवत्ता'), _defineProperty(_messages, 'standard', 'मानक'), _defineProperty(_messages, 'better_speed', 'बेहतर गति'), _defineProperty(_messages, 'best_speed', 'सर्वोत्तम गति'), _defineProperty(_messages, 'ends_on', 'समाप्त होता है'), _defineProperty(_messages, 'after', 'बाद'), _defineProperty(_messages, 'occurences', 'घटनाओं'), _defineProperty(_messages, 'repeat_on', 'दोबारा चालू'), _defineProperty(_messages, 'On', 'चालू'), _defineProperty(_messages, 'No_Questionnaires_assigned_to_this_topic', 'इस विषय को सौंपा कोई प्रश्नावली नहीं'), _defineProperty(_messages, 'total_percentage', 'कुल प्रतिशत'), _defineProperty(_messages, 'options', 'विकल्प'), _defineProperty(_messages, 'revoke_host', 'मेजबान रद्द करें'), _defineProperty(_messages, 'become_host', 'मेजबान बनें'), _defineProperty(_messages, 'video_settings', 'वीडियो सेटिंग्स'), _defineProperty(_messages, 'mute_unmute', 'म्यूट / अनम्यूट'), _defineProperty(_messages, 'remote_mute_unmute', 'रिमोट म्यूट / अनम्यूट'), _defineProperty(_messages, 'full_Screen', 'पूर्ण स्क्रीन'), _defineProperty(_messages, 'share', 'शेयर'), _defineProperty(_messages, 'volume_on_off', 'वॉल्यूम चालू / बंद'), _defineProperty(_messages, 'become_speaker', 'स्पीकर बनें'), _defineProperty(_messages, 'revoke_speaker', 'स्पीकर रद्द करें'), _defineProperty(_messages, 'become_presenter', 'प्रस्तुतकर्ता बनें'), _defineProperty(_messages, 'revoke_presenter', 'प्रस्तुतकर्ता को रद्द करना'), _defineProperty(_messages, 'add_another_field', 'अन्य फ़ील्ड जोड़ें'), _defineProperty(_messages, 'today', 'आज'), _defineProperty(_messages, 'yesterday', 'बिता कल'), _defineProperty(_messages, 'last_seven_days', 'पिछले 7 दिन'), _defineProperty(_messages, 'last_thirty_days', 'पिछले 30 दिनों में'), _defineProperty(_messages, 'custom', 'रिवाज'), _defineProperty(_messages, 'date_range', 'तिथि सीमा'), _defineProperty(_messages, 'apply', 'लागू करें'), _defineProperty(_messages, 'not_loggedin_users', 'लॉग-इन नहीं हुए उपयोगकर्ता'), _defineProperty(_messages, 'loggedin_users', 'लॉग-इन उपयोगकर्ता'), _defineProperty(_messages, 'loggedin_users_status', 'लॉग-इन उपयोगकर्ता स्थिति'), _defineProperty(_messages, 'present_instructors', 'वर्तमान प्रशिक्षक'), _defineProperty(_messages, 'absent_instructors', 'अनुपस्थित प्रशिक्षक'), _defineProperty(_messages, 'present_students', 'वर्तमान छात्र'), _defineProperty(_messages, 'absent_students', 'अनुपस्थित छात्र '), _defineProperty(_messages, 'instructors_attendance', 'प्रशिक्षक उपस्थिति'), _defineProperty(_messages, 'students_attendance', 'छात्र उपस्थिति'), _defineProperty(_messages, 'percentage', 'प्रतिशत'), _defineProperty(_messages, 'offline_visits', 'ऑफ़लाइन विज़िट्स'), _defineProperty(_messages, 'online_visits', 'ऑनलाइन विज़िट्स'), _defineProperty(_messages, 'absent_schedules', 'अनुपस्थित अनुसूचियां'), _defineProperty(_messages, 'total_schedules', 'कुल अनुसूची'), _defineProperty(_messages, 'total_attendance', 'कुल उपस्थिति'), _defineProperty(_messages, 'count', 'गिनती'), _defineProperty(_messages, 'back_to_list', 'दोबारा सूची को जाएं'), _defineProperty(_messages, 'back_to_reports', 'रिपोर्ट पर वापस जाएं'), _defineProperty(_messages, 'completely_viewed_topic_users', 'पूरी तरह से देखा गया विषय उपयोगकर्ता'), _defineProperty(_messages, 'partially_viewed_topic_users', 'आंशिक रूप से देखा गया विषय उपयोगकर्ता'), _defineProperty(_messages, 'not_AtAll_Viewed_Topic_Users', 'सभी दृश्यमान विषय उपयोगकर्ताओं में नहीं'), _defineProperty(_messages, 'viewed_users', 'देखे गए उपयोगकर्ता'), _defineProperty(_messages, 'completely_viewed_topics', 'पूरी तरह से देखा गया विषय'), _defineProperty(_messages, 'partially_viewed_topics', 'आंशिक रूप से देखा गया विषय'), _defineProperty(_messages, 'notAtAll_Viewed_Topics', 'बिल्कुल नहीं देखा विषय पर'), _defineProperty(_messages, 'user_viewed_topics', 'उपयोगकर्ता ने देखा विषय'), _defineProperty(_messages, 'topic_users', 'उपयोगकर्ता'), _defineProperty(_messages, 'clear_room_chat', 'चैट हटाएं'), _defineProperty(_messages, 'delete_room_chat_alert', 'क्या आप वाकई चैट को साफ़ करना चाहते हैं?'), _defineProperty(_messages, 'join', 'में शामिल होने के'), _defineProperty(_messages, 'access_denied', 'पहुंच अस्वीकृत'), _defineProperty(_messages, 'video_bit_rate', 'वीडियो बिट दर'), _defineProperty(_messages, 'audio_bit_rate', 'गानों का बिट दर'), _defineProperty(_messages, 'evaluate_assignment', 'असाइनमेंट का मूल्यांकन करें'), _defineProperty(_messages, 'back_to_submissions', 'वापस प्रस्तुतियाँ'), _defineProperty(_messages, 'Persian', 'Persian'), _defineProperty(_messages, 'submit', 'जमा करें'), _defineProperty(_messages, 'make_speaker_vedio', 'स्पीकर बनाएं'), _defineProperty(_messages, 'Connection_Request', 'कनेक्शन अनुरोध'), _defineProperty(_messages, 'message', 'संदेश'), _defineProperty(_messages, 'sources', 'सूत्रों का कहना है'), _defineProperty(_messages, 'resolutions', 'संकल्प'), _defineProperty(_messages, 'camera', 'कैमरा'), _defineProperty(_messages, 'Audio_Inputs', 'ऑडियो इनपुट'), _defineProperty(_messages, 'Please_enter_Company', 'कृपया कंपनी दर्ज करें'), _defineProperty(_messages, 'Please_enter_Position', 'कृपया स्थिति दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_City_Town', "'कृपया मान्य शहर / नगर दर्ज करें' (विशेष अनुयायियों को अनुमति नहीं दी जानी चाहिए)"), _defineProperty(_messages, 'Please_enter_valid_Country', 'कृपया मान्य देश दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_From_Date', 'कृपया वैध दिनांक दर्ज करें'), _defineProperty(_messages, 'From_date_cannot_be_in_future', 'तिथि से भविष्य में नहीं हो सकता'), _defineProperty(_messages, 'Please_enter_valid_To_Date', "कृपया वैध तिथि दर्ज करें"), _defineProperty(_messages, 'From_date_and_To_date_cannot_be_same', 'तिथि और तिथि से समान नहीं हो सकता'), _defineProperty(_messages, 'To_date_should_be_greater_than_From_date', 'तिथि करने के लिए तिथि से अधिक होना चाहिए'), _defineProperty(_messages, 'Please_enter_School', 'कृपया स्कूल दर्ज करें'), _defineProperty(_messages, 'School_field_cannot_have_empty_spaces', "स्कूल के मैदान में रिक्त स्थान नहीं हो सकते"), _defineProperty(_messages, 'Please_enter_University', 'कृपया विश्वविद्यालय दर्ज करें'), _defineProperty(_messages, 'University_field_cannot_have_empty_spaces', "विश्वविद्यालय के क्षेत्र में रिक्त स्थान नहीं हो सकते"), _defineProperty(_messages, 'Please_enter_atleast_one_skill', "कृपया कम से कम एक कौशल दर्ज करें"), _defineProperty(_messages, 'Please_enter_Address', 'कृपया पता दर्ज करें'), _defineProperty(_messages, 'Please_enter_a_valid_Address', 'कपया वैध पता अंकित करें'), _defineProperty(_messages, 'Please_enter_City', 'कृपया शहर दर्ज करें'), _defineProperty(_messages, 'Please_enter_a_valid_City', 'कृपया एक मान्य शहर दर्ज करें'), _defineProperty(_messages, 'Please_enter_Zip', "कृपया ज़िप दर्ज करें"), _defineProperty(_messages, 'Please_enter_a_valid_Zip', 'कृपया एक वैध ज़िप दर्ज करें'), _defineProperty(_messages, 'Please_enter_website', 'कृपया एक वैध ज़िप दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_website', 'कृपया वैध वेबसाइट दर्ज करें'), _defineProperty(_messages, 'Please_enter_social_link', 'कृपया सामाजिक लिंक दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_social_link', 'कृपया मान्य सामाजिक लिंक दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_Date_of_birth', 'कृपया जन्म तिथि की वैध तिथि दर्ज करें'), _defineProperty(_messages, 'Date_of_birth_cannot_be_future_Date', "जन्म तिथि भविष्य की तिथि नहीं हो सकती"), _defineProperty(_messages, 'Please_select_Gender', ' कृपया लिंग चुनें'), _defineProperty(_messages, 'Please_enter_Current_Password', 'कृपया वर्तमान पासवर्ड दर्ज करें'), _defineProperty(_messages, 'Please_enter_New_Password', 'कृपया नया पासवर्ड दर्ज करें'), _defineProperty(_messages, 'Please_enter_Confirm_password', 'कृपया पासवर्ड की पुष्टि करें दर्ज करें'), _defineProperty(_messages, 'New_Password_and_Confirm_password_should_be_same', 'नया पासवर्ड और पासवर्ड की पुष्टि करना समान होना चाहिए।'), _defineProperty(_messages, 'Assignment_name_cannot_have_only_white_spaces', "असाइनमेंट नाम में केवल सफेद स्थान नहीं हो सकते"), _defineProperty(_messages, 'Please_enter_Assignment_Name', 'कृपया असाइनमेंट नाम दर्ज करें'), _defineProperty(_messages, 'Please_enter_Question', 'कृपया प्रश्न दर्ज करें'), _defineProperty(_messages, 'please_select_type', ' कृपया प्रकार चुनें'), _defineProperty(_messages, 'Please_enter_Options', ' कृपया विकल्प दर्ज करें'), _defineProperty(_messages, 'Provide_atleast_Two_Options', 'कम से कम दो विकल्प प्रदान करें'), _defineProperty(_messages, 'Options_cannot_be_same', "विकल्प समान नहीं हो सकते"), _defineProperty(_messages, 'Please_select_an_Answer', 'कृपया एक उत्तर चुनें'), _defineProperty(_messages, 'Marks_cannot_be_empty', "मार्क्स रिक्त नहीं हो सकते"), _defineProperty(_messages, 'Marks_can_only_have_Numbers', ' अंक में केवल नंबर हो सकते हैं'), _defineProperty(_messages, 'Please_enter_a_valid_Name', ' कृपया कोई मान्य नाम दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_Email_id', 'कृपया मान्य ईमेल आईडी दर्ज करें'), _defineProperty(_messages, 'Please_enter_Password', ' कृप्या पास्वर्ड भरो'), _defineProperty(_messages, 'Passwords_are_not_matching', 'पासवर्ड मेल नहीं खाते हैं'), _defineProperty(_messages, 'Please_enter_valid_City_Name', 'कृपया मान्य शहर का नाम दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_State_Name', ' कृपया वैध राज्य नाम दर्ज करें'), _defineProperty(_messages, 'Please_accept_Term_conditions', 'कृपया नियम एवं शर्तें स्वीकार करें'), _defineProperty(_messages, 'Please_enter_institute_name', 'कृपया संस्थान नाम दर्ज करें'), _defineProperty(_messages, 'Enter_at_least_three_letters_to_search', 'खोज करने के लिए कम से कम तीन अक्षर दर्ज करें'), _defineProperty(_messages, 'profile_picture', 'प्रोफ़ाइल फोटो'), _defineProperty(_messages, 'search_members_add', 'अपने गोरुप में जोड़ने के लिए संपर्क खोजें.'), _defineProperty(_messages, 'delete_group', 'समूह हटाएं'), _defineProperty(_messages, 'addlocation', 'स्थान बताईए'), _defineProperty(_messages, 'access_denied', 'पहुंच अस्वीकृत'), _defineProperty(_messages, 'edit_category', 'श्रेणी संपादित करें'), _defineProperty(_messages, 'select_company', 'कंपनी का चयन करें'), _defineProperty(_messages, 'select_gender', 'लिंग चुनें'), _defineProperty(_messages, 'old_pwd', 'पुराना पासवर्ड'), _defineProperty(_messages, 'new_pwd', 'नया पासवर्ड'), _defineProperty(_messages, 're_new_pwd', 'नया पासवर्ड दोबारा टाइप करें'), _defineProperty(_messages, 'result_details', 'परिणाम विवरण'), _defineProperty(_messages, 'create_group', 'समूह बनाएँ'), _defineProperty(_messages, 'Please_select_any_option', 'कृपया कोई भी विकल्प चुनें'), _defineProperty(_messages, 'phne', 'फ़ोन'), _defineProperty(_messages, 'go_back', 'वापस जाओ'), _defineProperty(_messages, 'Current', 'वर्तमान'), _defineProperty(_messages, 'Personal_Information', 'व्यक्तिगत जानकारी'), _defineProperty(_messages, 'Work_Places', 'कार्य स्थल'), _defineProperty(_messages, 'dob', 'जन्म तिथि'), _defineProperty(_messages, 'Social_Links', 'सामाजिक लिंक'), _defineProperty(_messages, 'Connections', 'कनेक्शन'), _defineProperty(_messages, 'All_Connections', 'सभी कनेक्शन'), _defineProperty(_messages, 'View_all', 'सभी को देखें'), _defineProperty(_messages, 'Hide_all', 'सभी छुपाएं'), _defineProperty(_messages, 'hide', 'छिपाना'), _defineProperty(_messages, 'enter_schedule_password', 'शेड्यूल पासवर्ड दर्ज करें'), _defineProperty(_messages, 'conference_access', 'सम्मेलन का उपयोग'), _defineProperty(_messages, 'please_enter_schedule_password', 'कृपया शेड्यूल पासवर्ड दर्ज करें'), _defineProperty(_messages, 'support_center', 'समर्थन केंद्र'), _defineProperty(_messages, 'open_a_new_ticket', 'एक नई टिकट खोलें'), _defineProperty(_messages, 'check_ticket_status', 'टिकट स्थिति की जांच करें'), _defineProperty(_messages, 'troubleshoot', 'समस्या निवारण करें'), _defineProperty(_messages, 'invalid_or_expire_room', 'यह एक अमान्य कमरा दिखता है या आपके कमरे की समय सीमा समाप्त हो गई है'), _defineProperty(_messages, 'unautharized_request', 'यह एक असामान्य अनुरोध दिखता है'), _defineProperty(_messages, 'invalid_user', 'ऐसा लगता है कि आप एक अमान्य उपयोगकर्ता हैं'), _defineProperty(_messages, 'invalid_room', 'यह एक अमान्य कमरा दिखता है'), _defineProperty(_messages, 'invalid_or_expire_package', 'यह एक अमान्य पैकेज दिखता है या आपका पैकेज समाप्त हो गया है'), _defineProperty(_messages, 'export_chat', 'निर्यात चैट'), _defineProperty(_messages, 'download_certificate', 'प्रमाणपत्र डाउनलोड करें'), _defineProperty(_messages, 'topics_completed', 'पूर्ण किये गए विषय'), _defineProperty(_messages, 'certificates', 'प्रमाणपत्र'), _defineProperty(_messages, 'certificate_approved', 'प्रमाणपत्र स्वीकृत करें'), _defineProperty(_messages, 'select_questionnaire', "प्रश्नावली का चयन करें"), _defineProperty(_messages, 'questionnaire_name_error', "कृपया प्रश्ननाम नाम दर्ज करें"), _defineProperty(_messages, 'questionnaire_description_error', "कृपया विवरण दर्ज करें"), _defineProperty(_messages, 'clone_from_previoues_questionnaire', "पिछले प्रश्नावली से क्लोन"), _defineProperty(_messages, 'select_questionnaire', "कृपया प्रश्नावली चुनें"), _defineProperty(_messages, 'topic_completed', 'यदि विषय पूर्ण हो जाता है'), _defineProperty(_messages, 'i_have_completed_this_topic', 'कंने विषय पूरा कर लिया है'), _defineProperty(_messages, 'continous_user_presence_exceeded', 'उपयोगकर्ता की सीमा पार हो गई, कृपया व्यवस्थापक से संपर्क करें'), _defineProperty(_messages, 'update_basic_information', 'बुनियादी जानकारी अपडेट करें'), _defineProperty(_messages, 'adding_question_please_wait', 'सवाल जोड़ना, कृपया प्रतीक्षा करें...'), _messages)
	};

/***/ },
/* 181 */
/***/ function(module, exports) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _messages;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	exports.default = {
	  locale: 'en',
	  messages: (_messages = {
	    siteTitle: 'instaVC - Business Suite',
	    addPost: 'Add Post',
	    switchLanguage: 'Switch Language',
	    twitterMessage: 'We are on Twitter',
	    by: 'By',
	    deletePost: 'Delete Post',
	    createNewPost: 'Create new post',
	    authorName: 'Author\'s Name',
	    postTitle: 'Post Title',
	    postContent: 'Post Content',
	    submit: 'Submit',
	    comment: 'user {name} {value, plural,\n          =0 {does not have any comments}\n          =1 {has # comment}\n          other {has # comments}\n        }',
	    HTMLComment: 'user <b style=\'font-weight: bold\'>{name} </b> {value, plural,\n          =0 {does not have <i style=\'font-style: italic\'>any</i> comments}\n          =1 {has <i style=\'font-style: italic\'>#</i> comment}\n          other {has <i style=\'font-style: italic\'>#</i> comments}\n        }',
	    nestedDateComment: 'user {name} {value, plural,\n          =0 {does not have any comments}\n          =1 {has # comment}\n          other {has # comments}\n        } as of {date}',
	    loginTitle: 'Login',
	    login_prompt: 'Please sign in to your instaVC account',
	    email_address: 'Email Address',
	    password: 'Password',
	    sign_in: 'Sign in',
	    sign_up: 'Sign up',
	    keep_signed_in: 'Please sign in to your instaVC account',
	    forgotten_password: 'I’ve forgotten my password',
	    privacy_policy: 'Privacy Policy ',
	    terms_conditions: 'Terms & Conditions',
	    my_profile: 'My Profile',
	    work_education: 'Work & Education',
	    contacts: 'Contact Info',
	    personal_info: 'Personal Info',
	    company_details: 'Company Details',
	    about_me: 'About Me',
	    full_name: 'Full Name',
	    email: 'E-mail',
	    phone: 'Phone Number',
	    position: 'Position',
	    department: 'Department',
	    activities: 'Recent Activities',
	    edit: 'Edit',
	    cancel: 'Cancel',
	    save: 'Save',
	    delete: 'Delete',
	    list: 'List',
	    new: 'New',
	    general_info: 'General Info',
	    first_name: 'First Name',
	    last_name: 'Last Name',
	    gender: 'Gender',
	    contact_details: 'Contact Details',
	    male: 'Male',
	    female: 'Female',
	    corporate_directory: 'Corporate Directory',
	    user_info: 'User Info',
	    credential_access: 'Credential & Access',
	    default_room: 'Default Course',
	    business_id: 'Business Id',
	    business_name: 'Business Name',
	    business_type: 'Business Type',
	    corporate_type: 'Corporate Type',
	    website: 'Website',
	    company_status: 'Company Status',
	    schedule_type: 'Schedule Type',
	    name: 'Name',
	    address: 'Address',
	    street: 'Street',
	    district: 'District',
	    state: 'State',
	    country: 'Country',
	    pincode: 'Pincode',
	    license_details: 'License Details',
	    publish_limit: 'Publish Limit',
	    room_limit: 'Course Limit',
	    no_p2p: 'No. of P2P',
	    subscriber_limit: 'Subscriber Limit',
	    users_limit: 'Users Limit',
	    legal_doc_details: 'Legal Document Details',
	    pan_number: 'PAN Number',
	    tan_id: 'TAN Id',
	    active: 'Active',
	    inactive: 'Inactive',
	    calendar: 'Calendar',
	    contact_name: 'Contact Name',
	    contact_phone_number: 'Contact Phone Number',
	    view: 'View',
	    title_company_details: 'Below are the details about the Company you have created',
	    title_category_details: 'Below are the details about the Category you have created',
	    corporate_info: "Corporate Info",
	    all_corporates: "All Corporates",
	    title_list_details: 'Below are the list of',
	    corporate_list: 'Corporate List',
	    hidden: " ",
	    company_code: 'Company Code',
	    role: "Role",
	    new_user: 'New User',
	    edit_user: 'Edit User',
	    all_users: "All Users",
	    date: 'Date',
	    user_details: 'User Details',
	    room: 'Course',
	    smtp_details: 'SMTP Details',
	    api_key: 'Api key',
	    domain: 'Domain',
	    username: 'Username',
	    server: 'Server',
	    smtp_setting: "SMTP Settings",
	    basic_info: 'Basic Info',
	    select_package: 'Select Package',
	    room_name: 'Course Name',
	    room_type: 'Conference Type',
	    room_password: 'Course Password',
	    other_details: 'Other Details',
	    corporate_name: 'Corporate Name',
	    host_password: 'Host Password',
	    bridge_number: 'Bridge Number',
	    room_manager: 'Course Manager',
	    my_room: 'My Course',
	    room_users: 'Course Users',
	    room_user: 'Course User',
	    new_room: 'New Course',
	    all_rooms: 'All Courses',
	    add_user_to_room: 'Add User To Course',
	    package_name: 'Package Name',
	    title_created_room_details: 'Below are the details about the course you have created.',
	    room_license: 'Course License',
	    mcu_server: 'Mcu Server',
	    title_contact_details: 'Below are the users added to this course',
	    package_details: 'Package Details',
	    package_manager: 'Package Manager',
	    package_info: 'Package Info',
	    package_price: 'Package Price',
	    user_count: 'User Count',
	    user_presence: 'User Presence',
	    package_validity: 'Package Validity',
	    server_location: 'Server Location',
	    assigned_to: 'Assigned To',
	    title_about_package: 'Below are the details about the package you have created.',
	    search_contacts: 'Search Contacts',
	    search_assigned_to_contacts: 'Search contacts to assign.',
	    // add : 'Add',
	    add: 'Add',
	    dashboard: 'Dashboard',
	    my_account: 'My Account',
	    manage_user: 'Manage Users',
	    reports: 'Reports',
	    ldap_settings: 'LDAP Settings',
	    room_management: 'Course Management',
	    category_management: 'Category Management',
	    package_management: 'Package Management',
	    logout: 'Log Out',
	    settings: 'Settings'
	  }, _defineProperty(_messages, 'ldap_settings', 'LDAP Settings'), _defineProperty(_messages, 'ldap_details', 'LDAP Details'), _defineProperty(_messages, 'domain', 'Domain'), _defineProperty(_messages, 'base_dn', 'Base DN'), _defineProperty(_messages, 'url', 'URL'), _defineProperty(_messages, 'bind_cn', 'Bind CN'), _defineProperty(_messages, 'bind_password', 'Bind Password'), _defineProperty(_messages, 'force_login', 'Force Login'), _defineProperty(_messages, 'new_category', 'New Category'), _defineProperty(_messages, 'all_categories', 'All Category'), _defineProperty(_messages, 'edit_category', 'Edit Category'), _defineProperty(_messages, 'category_details', 'Category Details'), _defineProperty(_messages, 'category_name', 'Category Name'), _defineProperty(_messages, 'category_desc', 'Category Description'), _defineProperty(_messages, 'category_list', 'Category List'), _defineProperty(_messages, 'package_list', 'Package List'), _defineProperty(_messages, 'room_list', 'Course List'), _defineProperty(_messages, 'user_list', 'User List'), _defineProperty(_messages, 'corporate_detail', 'Corporate Details'), _defineProperty(_messages, 'true', 'true'), _defineProperty(_messages, 'false', 'false'), _defineProperty(_messages, 'conference', 'Conference'), _defineProperty(_messages, 'lms', 'LMS'), _defineProperty(_messages, 'presenter', 'Presenter'), _defineProperty(_messages, 'crm', 'CRM'), _defineProperty(_messages, 'admin', 'Admin'), _defineProperty(_messages, 'user', 'User'), _defineProperty(_messages, 'mix', 'Mix '), _defineProperty(_messages, 'forward', 'Forward'), _defineProperty(_messages, 'hybrid', 'Hybrid'), _defineProperty(_messages, 'desc', 'Description'), _defineProperty(_messages, 'no_users_found', 'No Users Found.'), _defineProperty(_messages, 'my_contacts', 'My Contacts'), _defineProperty(_messages, 'chat', 'Chat'), _defineProperty(_messages, 'mute_unmute', 'Mute / Unmute'), _defineProperty(_messages, 'disable_enable', 'Disable / Enable'), _defineProperty(_messages, 'start_recoding', 'Start Recording'), _defineProperty(_messages, 'expand_contract', 'Expand / Contract'), _defineProperty(_messages, 'no_recent_contacts', 'No Recent Contacts'), _defineProperty(_messages, 'add_your_contacts', 'Add your contacts'), _defineProperty(_messages, 'close', 'Close'), _defineProperty(_messages, 'sandra_smith', 'Sandra Smith'), _defineProperty(_messages, 'say_something', 'Say something...'), _defineProperty(_messages, 'video_quality', 'Video Quality'), _defineProperty(_messages, 'languages', 'Languages'), _defineProperty(_messages, 'help', 'Help'), _defineProperty(_messages, 'add_contacts', 'Add Contacts'), _defineProperty(_messages, 'attach_file', 'Attach file'), _defineProperty(_messages, 'search_contacts_add', 'Search contacts to add to your contacts list.'), _defineProperty(_messages, 'set_language', 'Set Language'), _defineProperty(_messages, 'set_video_qulity', 'Set video resolution'), _defineProperty(_messages, 'push_the_message', 'Push the message'), _defineProperty(_messages, 'invite_others', 'Invite others to join instantly'), _defineProperty(_messages, 'regenerate', 'Regenerate'), _defineProperty(_messages, 'copy_this_link', 'Copy this link'), _defineProperty(_messages, 'share_Link', 'Share Link'), _defineProperty(_messages, 'open_mail_client', 'Open Mail Client'), _defineProperty(_messages, 'start_conference', 'Start Conference'), _defineProperty(_messages, 'create_new_room', 'Create new course'), _defineProperty(_messages, 'add_participants', 'Add participants'), _defineProperty(_messages, 'search_room', 'Search course'), _defineProperty(_messages, 'my_rooms', 'My Courses'), _defineProperty(_messages, 'select_your_room', 'Select your course'), _defineProperty(_messages, 'presenter_mode', 'Presenter Mode'), _defineProperty(_messages, 'conference_mode', 'Conference Mode'), _defineProperty(_messages, 'valid_untill', 'Valid Until'), _defineProperty(_messages, 'search_rooms', 'Search courses...'), _defineProperty(_messages, 'schedules_new', 'Schedules New'), _defineProperty(_messages, 'my_schedules', 'My Schedules'), _defineProperty(_messages, 'past_schedules', 'Past Schedules'), _defineProperty(_messages, 'no_schedules', 'No Schedules'), _defineProperty(_messages, 'create_schedule', 'Create your schedule  by clicking the Schedule class button'), _defineProperty(_messages, 'meeting_name', 'Meeting Name'), _defineProperty(_messages, 'please_enter_meeting_name', 'Please enter meeting name'), _defineProperty(_messages, 'create_edit_conference', 'Create/Edit Conference'), _defineProperty(_messages, 'choose_anavailable_date', 'Choose an available date'), _defineProperty(_messages, 'set_start_time', 'Set Start Time'), _defineProperty(_messages, 'set_duration', 'Set Duration'), _defineProperty(_messages, 'recurring_schedule', 'Recurring Schedule'), _defineProperty(_messages, 'repeats', 'Repeats'), _defineProperty(_messages, 'repeat_every', 'Repeat Every'), _defineProperty(_messages, 'set_conference_password', 'Set your conference password.'), _defineProperty(_messages, 'invite', 'Invite'), _defineProperty(_messages, 'start', 'Start'), _defineProperty(_messages, 'organizer', 'Organizer'), _defineProperty(_messages, 'edit_schedule', 'Edit this schedule'), _defineProperty(_messages, 'delete_schedule', 'Delete this schedule'), _defineProperty(_messages, 'invite_contacts', 'Invite contacts'), _defineProperty(_messages, 'invite_people', 'Invite People'), _defineProperty(_messages, 'join_meeting', 'Please join my meeting from your desktop, tablet or smartphone'), _defineProperty(_messages, 'conference_room_url', 'Invitation URL'), _defineProperty(_messages, 'enter_email', 'Enter email'), _defineProperty(_messages, 'please_enter', 'Please enter the mail id...'), _defineProperty(_messages, 'enter_meeting_name', 'Please enter the class name.'), _defineProperty(_messages, 'select_room', 'Please select the course.'), _defineProperty(_messages, 'minimum_date', 'Please select current or future date.'), _defineProperty(_messages, 'start_time_greater', 'Start time should be greater than current time.'), _defineProperty(_messages, 'end_time_greater', 'End time should be greater than start time.'), _defineProperty(_messages, 'video_resolution', 'For SIF Video Resolution'), _defineProperty(_messages, 'video_graphics', 'For Video Graphics Array (VGA) Video Resolution'), _defineProperty(_messages, 'hd_video', 'For HD Video Resolution'), _defineProperty(_messages, 'full_hd', 'For Full HD Video Resolution'), _defineProperty(_messages, 'online', 'Online'), _defineProperty(_messages, 'away', 'Away'), _defineProperty(_messages, 'offline', 'Offline'), _defineProperty(_messages, 'do_not_disturb', 'Do not disturb'), _defineProperty(_messages, 'locale', 'Locale'), _defineProperty(_messages, 'time_zone', 'Time Zone'), _defineProperty(_messages, 'date_format', 'Date Format'), _defineProperty(_messages, 'time_format', 'Time Format'), _defineProperty(_messages, 'currency_format', 'Currency Format'), _defineProperty(_messages, 'prefered_language', 'Preferred Language'), _defineProperty(_messages, 'room_topic', 'Topics'), _defineProperty(_messages, 'my_topic', 'My Topic'), _defineProperty(_messages, 'room_topic_manager', 'Course Topic Manager'), _defineProperty(_messages, 'topic_name', 'Topic Name'), _defineProperty(_messages, 'description', 'Description'), _defineProperty(_messages, 'topic_details', 'Topic Information'), _defineProperty(_messages, 'upload', 'Upload'), _defineProperty(_messages, 'upload_file', 'Upload File'), _defineProperty(_messages, 'questionnaire', 'Questionnaire'), _defineProperty(_messages, 'all_questionnaire', 'All Questionnaire'), _defineProperty(_messages, 'questionnaire_list', 'Questionnaire List'), _defineProperty(_messages, 'add_questionnaire', 'Add Questionnaire'), _defineProperty(_messages, 'questionnaire_details', 'Questionnaire Information'), _defineProperty(_messages, 'questionnaire_name', 'Questionnaire Name'), _defineProperty(_messages, 'view_questionnaire', 'View Questionnaire'), _defineProperty(_messages, 'questions', 'Questions'), _defineProperty(_messages, 'questionnaire_details', 'Questionnaire Details'), _defineProperty(_messages, 'title_questionnaire_details', 'Below are the details about the questionnaire you have created.'), _defineProperty(_messages, 'selectroom', 'Select Course'), _defineProperty(_messages, 'no_rooms', 'No courses have been created'), _defineProperty(_messages, 'create_a_room', 'Create a Course'), _defineProperty(_messages, 'requiedField', ' Please'), _defineProperty(_messages, 'help_content', 'Help Content.'), _defineProperty(_messages, 'no_data_yet', 'No Data Yet!'), _defineProperty(_messages, 'add_question', 'Add Question'), _defineProperty(_messages, 'title_question_details', 'Below are the questions added to this questionnaire'), _defineProperty(_messages, 'deletefile', 'Delete present file'), _defineProperty(_messages, 'edit_questionnaire', 'Edit Questionnaire'), _defineProperty(_messages, 'change_password', 'Change Password'), _defineProperty(_messages, 'forgot_password', 'Forgot Password'), _defineProperty(_messages, 'reset_prompt', 'Reset Password'), _defineProperty(_messages, 'forgot_prompt', 'Kindly enter your email address'), _defineProperty(_messages, 'local_settings', 'Locale Settings'), _defineProperty(_messages, 'edit_corporate', 'Edit Corporate'), _defineProperty(_messages, 'user_directory', 'User Directory'), _defineProperty(_messages, 'new_corporate', "New Corporate"), _defineProperty(_messages, 'all_packages', 'All Packages'), _defineProperty(_messages, 'package_directory', 'Package Directory'), _defineProperty(_messages, 'new_package', 'New Package'), _defineProperty(_messages, 'edit_package', 'Edit Package'), _defineProperty(_messages, 'room_directory', 'Course Directory'), _defineProperty(_messages, 'room_details', 'Course Details'), _defineProperty(_messages, 'room_info', 'Course Info'), _defineProperty(_messages, 'category_directory', 'Category Directory'), _defineProperty(_messages, 'category_info', 'Category Info'), _defineProperty(_messages, 'smtp_info', 'SMTP Info'), _defineProperty(_messages, 'ldap_info', 'LDAP Info'), _defineProperty(_messages, 'invalid_date', 'Please select / enter valid Date'), _defineProperty(_messages, 'upload_url', 'URL Upload'), _defineProperty(_messages, 'category_name', 'Category Name'), _defineProperty(_messages, 'select_gender', 'Select Gender'), _defineProperty(_messages, 'feedback', 'Feedback'), _defineProperty(_messages, 'all_feedback', "All Feedback"), _defineProperty(_messages, 'user_feedback', 'User Feedback'), _defineProperty(_messages, 'my_groups', 'My Groups'), _defineProperty(_messages, 'no_recent_groups', 'Add your groups by clicking the add group button'), _defineProperty(_messages, 'create_group', 'Create Group'), _defineProperty(_messages, 'group_name', 'Group Name'), _defineProperty(_messages, 'no_recent_member', 'No Recent Members'), _defineProperty(_messages, 'add_your_members', 'Add your members'), _defineProperty(_messages, 'add_member', 'Add Member'), _defineProperty(_messages, 'search_members_add', 'Search contacts to add to your Gorup.'), _defineProperty(_messages, 'assign_questionnaire', "Assign Questionnaire"), _defineProperty(_messages, 'title_questionnaire_assigned', 'Below are the questionnaires assigned to this topic'), _defineProperty(_messages, 'questionnaire_result', 'Result'), _defineProperty(_messages, 'edit_question', 'Edit Question'), _defineProperty(_messages, 'topic_list', 'Topic List'), _defineProperty(_messages, 'result_list', 'Result List'), _defineProperty(_messages, 'candidate_name', 'Candidate Name'), _defineProperty(_messages, 'result_details', 'Result Details'), _defineProperty(_messages, 'room_feedback', 'Feedback List'), _defineProperty(_messages, 'add_your_groups', 'Add your groups'), _defineProperty(_messages, 'back_to_room', 'Back to Course'), _defineProperty(_messages, 'add_student', 'Add Student'), _defineProperty(_messages, 'instructor_name', 'Instructor Name'), _defineProperty(_messages, 'room_student_to_instructor', 'Add Student to Instructor'), _defineProperty(_messages, 'search_students', 'Search Students'), _defineProperty(_messages, 'whiteboard', 'Whiteboard'), _defineProperty(_messages, 'screen_share', 'Screen Share'), _defineProperty(_messages, 'topics', 'Topics'), _defineProperty(_messages, 'hand_raise', 'Q&A'), _defineProperty(_messages, 'topics_list', 'Topics List'), _defineProperty(_messages, 'welcome_room', 'Welcome to Course:'), _defineProperty(_messages, 'fulltopic', 'Read more...'), _defineProperty(_messages, 'search_attendees', 'Search Attendees'), _defineProperty(_messages, 'no_topics_yet', 'No Topics Yet!..'), _defineProperty(_messages, 'list_topics', 'Below are the list of topics related to this room.'), _defineProperty(_messages, 'have_schedule', 'Have schedule'), _defineProperty(_messages, 'your_selected_date', 'Your selected dates'), _defineProperty(_messages, 'presenter', 'Presenter'), _defineProperty(_messages, 'telepresence', 'Telepresence'), _defineProperty(_messages, 'record', 'Record'), _defineProperty(_messages, 'no_attendees_present', 'No Attendees present'), _defineProperty(_messages, 'no_user_added', 'No Users added to this course'), _defineProperty(_messages, 'files', 'Files'), _defineProperty(_messages, 'content', 'Content'), _defineProperty(_messages, 'upload_list', 'Upload List'), _defineProperty(_messages, 'delete_group', 'Delete group'), _defineProperty(_messages, 'multiple_delete', 'Multiple Delete'), _defineProperty(_messages, 'file_name', 'File Name'), _defineProperty(_messages, 'openfile', 'Download'), _defineProperty(_messages, 'upload_media', 'Upload Media'), _defineProperty(_messages, 'upload_sco', 'Upload SCO'), _defineProperty(_messages, 'all', 'All'), _defineProperty(_messages, 'image', 'Image'), _defineProperty(_messages, 'application', 'Application'), _defineProperty(_messages, 'video', 'Video'), _defineProperty(_messages, 'audio', 'Audio'), _defineProperty(_messages, 'zip', 'Zip'), _defineProperty(_messages, 'search', 'Search....'), _defineProperty(_messages, 'dd_mm_yyyy', 'DD/MM/YYYY'), _defineProperty(_messages, 'dd_mm_yy', 'DD/MM/YY'), _defineProperty(_messages, 'ddmmyyyy', 'DD-MM-YYYY'), _defineProperty(_messages, 'hh_mm_ss', 'HH:MM:SS'), _defineProperty(_messages, 'usd', 'USD'), _defineProperty(_messages, 'indian_rupee', 'Indian Rupee'), _defineProperty(_messages, 'automatic', 'Automatic'), _defineProperty(_messages, 'set', 'Set'), _defineProperty(_messages, 'english', 'English'), _defineProperty(_messages, 'hindi', 'Hindi'), _defineProperty(_messages, 'location_name', 'Location Name'), _defineProperty(_messages, 'location_directory', 'Location Directory'), _defineProperty(_messages, 'location_details', 'Location Details'), _defineProperty(_messages, 'location_list', 'Location List'), _defineProperty(_messages, 'title_created_location_details', 'Below are the details about the location you have created.'), _defineProperty(_messages, 'no_questions', 'No Questions'), _defineProperty(_messages, 'location_info', 'Location Info'), _defineProperty(_messages, 'edit_location', 'Edit Location'), _defineProperty(_messages, 'new_location', 'New Location'), _defineProperty(_messages, 'all_locations', 'All Locations'), _defineProperty(_messages, 'location', 'Location'), _defineProperty(_messages, 'room_location', 'Course Locations'), _defineProperty(_messages, 'course_location', 'Course Location'), _defineProperty(_messages, 'addlocation', 'Add Location'), _defineProperty(_messages, 'room_chat', 'Course Chat'), _defineProperty(_messages, 'title_location_details', 'Below are the locations added to this Course'), _defineProperty(_messages, 'viewprofile', 'View Profile'), _defineProperty(_messages, 'back', 'Back'), _defineProperty(_messages, 'profile', 'Profile'), _defineProperty(_messages, 'add_feedback', 'Add Feedback'), _defineProperty(_messages, 'manage', 'Manage'), _defineProperty(_messages, 'ask', 'Ask'), _defineProperty(_messages, 'ask_question', 'Ask Question'), _defineProperty(_messages, 'previous_questions', 'Previous Questions'), _defineProperty(_messages, 'post', 'Post'), _defineProperty(_messages, 'answers', 'Answers'), _defineProperty(_messages, 'make_speaker', 'Request Video'), _defineProperty(_messages, 'answer_the_question', 'Answer the Question'), _defineProperty(_messages, 'reply', 'reply'), _defineProperty(_messages, 'your_comment', 'Your Comment'), _defineProperty(_messages, 'post_comment', 'Comment'), _defineProperty(_messages, 'previous_answers', 'Previous Answers'), _defineProperty(_messages, 'reply_to_the_answer', 'Reply to the answer'), _defineProperty(_messages, 'make_this_user_the_speaker', 'Make this user the Speaker'), _defineProperty(_messages, 'delete_the_question', 'Delete the question'), _defineProperty(_messages, 'edit_the_question', 'Edit the Question'), _defineProperty(_messages, 'see_all_answers', 'See all answers'), _defineProperty(_messages, 'media_resources', 'Media Resources'), _defineProperty(_messages, 'documents', 'Documents'), _defineProperty(_messages, 'questionnaires', 'Questionnaires'), _defineProperty(_messages, 'no_questionnaires_yet', 'No Questionnaires Yet!'), _defineProperty(_messages, 'start_date', 'Start Date'), _defineProperty(_messages, 'end_date', 'End Date'), _defineProperty(_messages, 'choose_question_answers', 'Choose the correct answer form the questions listed below'), _defineProperty(_messages, 'no_files_yet', 'No Files Yet!'), _defineProperty(_messages, 'no_questions_yet', 'No Questions Yet!'), _defineProperty(_messages, 'not_attempted', 'Not Attempted!'), _defineProperty(_messages, 'locale_directory', 'Locale Direcrory'), _defineProperty(_messages, 'share_your_screen', 'Share your screen!'), _defineProperty(_messages, 'city_town', 'City / Town'), _defineProperty(_messages, 'landmark', 'Landmark'), _defineProperty(_messages, 'contact_information', 'Contact Information'), _defineProperty(_messages, 'website_and_social_links', 'Website and social links'), _defineProperty(_messages, 'basic_information', 'Basic Information'), _defineProperty(_messages, 'add_address', 'Add Address'), _defineProperty(_messages, 'add_website', 'Add Website'), _defineProperty(_messages, 'add_social_link', 'Add social link'), _defineProperty(_messages, 'add_basic_information', 'Add Basic Information'), _defineProperty(_messages, 'social_link', 'Social Link'), _defineProperty(_messages, 'birthday', 'Birthday'), _defineProperty(_messages, 'save_changes', 'Save Changes'), _defineProperty(_messages, 'birth_year', 'Birth Year'), _defineProperty(_messages, 'add_a_social_links', 'Add a social link'), _defineProperty(_messages, 'add_college', 'Add College'), _defineProperty(_messages, 'add_workplace', 'Add Workplace'), _defineProperty(_messages, 'add_highSchool', 'Add High School'), _defineProperty(_messages, 'add_professionalSkills', 'Add Professional Skills'), _defineProperty(_messages, 'work_title', 'Work'), _defineProperty(_messages, 'professionalSkills_title', 'Professional Skills'), _defineProperty(_messages, 'college_title', 'College'), _defineProperty(_messages, 'highSchool_title', 'High School'), _defineProperty(_messages, 'work_education_timeperiod', 'Time Period'), _defineProperty(_messages, 'work_education_desciption', 'Description'), _defineProperty(_messages, 'work_education_graduated', 'Graduated'), _defineProperty(_messages, 'work_education_school', 'School'), _defineProperty(_messages, 'work_education_concentration', 'Concentration'), _defineProperty(_messages, 'work_education_company', 'Company'), _defineProperty(_messages, 'work_education_position', 'Position'), _defineProperty(_messages, 'work_education_university', 'University'), _defineProperty(_messages, 'work_education_workStatus', 'I currently work here'), _defineProperty(_messages, 'work_education_saveChanges', 'Save Changes'), _defineProperty(_messages, 'work_company_placeholder', 'Where have you worked?'), _defineProperty(_messages, 'work_position_placeholder', 'What is your job title?'), _defineProperty(_messages, 'college_university_placeholder', 'Which college/university did you attend?'), _defineProperty(_messages, 'school_placeholder', 'Which school did you attend?'), _defineProperty(_messages, 'locale_directory', 'Locale Direcrory'), _defineProperty(_messages, 'sync', 'Sync'), _defineProperty(_messages, 'pointer', 'Pointer'), _defineProperty(_messages, 'pencil', 'Pencil'), _defineProperty(_messages, 'square', 'Square'), _defineProperty(_messages, 'circle', 'Circle'), _defineProperty(_messages, 'oval', 'Oval'), _defineProperty(_messages, 'line', 'Line'), _defineProperty(_messages, 'alphabets', 'Alphabets'), _defineProperty(_messages, 'erase_all', 'Erase All'), _defineProperty(_messages, 'fill_background_colors', 'Fill Background Colors'), _defineProperty(_messages, 'background', 'Background'), _defineProperty(_messages, 'stroke', 'Stroke'), _defineProperty(_messages, 'line_color', 'Line color'), _defineProperty(_messages, 'no_participants', 'No Participants'), _defineProperty(_messages, 'no_conference_loaded', 'No Conference Loaded...'), _defineProperty(_messages, 'loading', 'Loading'), _defineProperty(_messages, 'loading_please_wait', 'Loading! please wait'), _defineProperty(_messages, 'current_password', 'Current Password'), _defineProperty(_messages, 'new_password', 'New Password'), _defineProperty(_messages, 'retype_new_password', 'Retype New Password'), _defineProperty(_messages, 'become_host_to_access_bellow_features', 'Become host to access bellow features'), _defineProperty(_messages, 'screen_shared', 'Screen Shared!'), _defineProperty(_messages, 'you_are_sharing_your_screen', 'You are sharing your screen!'), _defineProperty(_messages, 'ok', 'OK'), _defineProperty(_messages, 'warning', 'Warning'), _defineProperty(_messages, 'delete_question_alert', 'Are you sure you want to delete this question?'), _defineProperty(_messages, 'delete_category_alert', 'Are you sure you want to delete this category?'), _defineProperty(_messages, 'delete_corporate_alert', 'Are you sure you want to delete this corporate?'), _defineProperty(_messages, 'delete_location_alert', 'Are you sure you want to delete this location?'), _defineProperty(_messages, 'delete_package_alert', 'Are you sure you want to delete this package?'), _defineProperty(_messages, 'delete_address_alert', 'Are you sure you want to delete the address?'), _defineProperty(_messages, 'delete_link_alert', 'Are you sure you want to delete the website link?'), _defineProperty(_messages, 'delete_social_link_alert', 'Are you sure you want to delete the social link?'), _defineProperty(_messages, 'delete_birth_day_alert', 'Are you sure you want to delete birthday?'), _defineProperty(_messages, 'delete_gender_alert', 'Are you sure you want to delete gender?'), _defineProperty(_messages, 'delete_school_alert', 'Are you sure you want to delete this school?'), _defineProperty(_messages, 'delete_college_alert', 'Are you sure you want to delete this college?'), _defineProperty(_messages, 'delete_workplace_alert', 'Are you sure you want to delete this workplace?'), _defineProperty(_messages, 'delete_professional_alert', 'Are you sure you want to delete this professional skill?'), _defineProperty(_messages, 'delete_user_alert', 'Are you sure you want to delete this user?'), _defineProperty(_messages, 'delete_room_alert', 'Are you sure you want to delete this course?'), _defineProperty(_messages, 'delete_topic_alert', 'Are you sure you want to delete this topic?'), _defineProperty(_messages, 'delete_file_alert', 'Are you sure you want to delete this file?'), _defineProperty(_messages, 'delete_all_files_alert', 'Are you sure you want to delete all this files?'), _defineProperty(_messages, 'delete_questionaire_alert', 'Are you sure you want to delete this questionnaire?'), _defineProperty(_messages, 'delete_schedule_alert', 'Are you sure you want to delete this schedule?'), _defineProperty(_messages, 'edit_schedule_alert', 'If you edit the schedule the invitation link needs  to be sent again. Do you really want to edit?'), _defineProperty(_messages, 'delete_whiteboardObjects_alert', 'Are you sure you want to delete?'), _defineProperty(_messages, 'logout_confirm_incall', 'You are in call, are you sure you want to logout?'), _defineProperty(_messages, 'author', 'Author'), _defineProperty(_messages, 'selected_codec', 'Selected Codec'), _defineProperty(_messages, 'start_time', 'Start time'), _defineProperty(_messages, 'end_time', 'End time'), _defineProperty(_messages, 'please_provide_your_valuable_feedback', 'Please provide your valuable feedback'), _defineProperty(_messages, 'video_quality', 'Video Quality'), _defineProperty(_messages, 'rate_the_quality_of_the_video_you_experienced', 'Rate the quality of the video you experienced'), _defineProperty(_messages, 'audio_quality', 'Audio Quality'), _defineProperty(_messages, 'rate_the_quality_of_the_audio_you_experienced', 'Rate the quality of the audio you experienced'), _defineProperty(_messages, 'content_sharing', 'Content Sharing'), _defineProperty(_messages, 'rate_the_quality_of_the_content_sharing_you_experienced', 'Rate the quality of the content sharing you experienced'), _defineProperty(_messages, 'knowlegeable_session', 'Knowledgeable Session'), _defineProperty(_messages, 'rate_how_Knowlegeable_this_session_was', 'Rate how Knowledgeable this session was'), _defineProperty(_messages, 'instructor_skills', 'Instructor Skills'), _defineProperty(_messages, 'rate_how_good_instructor_presented_the_subject', 'Rate how good instructor presented the subject'), _defineProperty(_messages, 'overall_rating', 'Overall Rating'), _defineProperty(_messages, 'provide_the_overall_rating', 'Provide the overall rating'), _defineProperty(_messages, 'your_comments', 'Your Comments'), _defineProperty(_messages, 'your_comments_are_highly_appreciated', 'Your comments are highly appreciated'), _defineProperty(_messages, 'no_thanks', 'No Thanks'), _defineProperty(_messages, 'poor', 'Poor'), _defineProperty(_messages, 'average', 'Average'), _defineProperty(_messages, 'good', 'Good'), _defineProperty(_messages, 'very_good', 'Very Good'), _defineProperty(_messages, 'excellent', 'Excellent'), _defineProperty(_messages, 'submitted_by', 'Submitted By'), _defineProperty(_messages, 'user_name', 'User Name'), _defineProperty(_messages, 'over_all_rating', 'Over All Rating'), _defineProperty(_messages, 'knowlegable_session', 'Knowledgeable Session'), _defineProperty(_messages, 'instructor_skills', 'Presenter Skills'), _defineProperty(_messages, 'user_comment', 'User Comment'), _defineProperty(_messages, 'user_feedback_data', 'Feedback'), _defineProperty(_messages, 'individual_feedback', 'Feedback details submitted by user'), _defineProperty(_messages, 'feedback_details', 'Individual Feedback details'), _defineProperty(_messages, 'delete_room_user_alert', 'Are you sure you want to remove the user?'), _defineProperty(_messages, 'feedback_submit', 'Submit'), _defineProperty(_messages, 'chat_file_alert', 'File Size should be less than 20MB!..'), _defineProperty(_messages, 'share_file_alert', 'File Size should be less than 10MB!..'), _defineProperty(_messages, 'topic_file_alert', 'File Size should be less than 20MB!..'), _defineProperty(_messages, 'url_alert', 'Enter a URL!..'), _defineProperty(_messages, 'valid_url_alert', 'Not a valid URL!..'), _defineProperty(_messages, 'unassign_question_alert', 'Are you sure you want to unassign the questionnaire?'), _defineProperty(_messages, 'generate_meeting_alert', 'Meetings already scheduled for this room, Do you want to regenarate?'), _defineProperty(_messages, 'questionnaire_alert', 'Questionnaire not started yet!..'), _defineProperty(_messages, 'delete_group_alert', 'Are you sure you want to delete this group?'), _defineProperty(_messages, 'delete_member_group_alert', 'Are you sure you want to delete member from this group?'), _defineProperty(_messages, 'feedback_submitted_successfully', 'Feedback submitted Successfully'), _defineProperty(_messages, 'submitted', 'Submitted'), _defineProperty(_messages, 'question', 'Question'), _defineProperty(_messages, 'type', 'Type'), _defineProperty(_messages, 'mark_correct_answer', 'Enter the two answer choices and mark the correct answer'), _defineProperty(_messages, 'select_type', 'Select Type'), _defineProperty(_messages, 'remove', 'Remove'), _defineProperty(_messages, 'answer_choice', 'answer choice'), _defineProperty(_messages, 'delete_this_location', 'Delete this location'), _defineProperty(_messages, 'no_locations_yet', 'No Locations Yet!!!'), _defineProperty(_messages, 'enter_the_answer_choices_and_mark_which_answer_is_correct', 'Enter the answer choices, and mark which answer is correct'), _defineProperty(_messages, 'transport_title', 'Transport?'), _defineProperty(_messages, 'uploadtotopic_title', 'Choose the content type to upload files in this topic.'), _defineProperty(_messages, 'file_title', 'Files'), _defineProperty(_messages, 'media_title', 'Media'), _defineProperty(_messages, 'sco_title', 'Zip'), _defineProperty(_messages, 'youtube_url_title', 'YouTube URL:'), _defineProperty(_messages, 'upload_title', 'Upload'), _defineProperty(_messages, 'filetypes_title', 'File Types:'), _defineProperty(_messages, 'youtube_url_placeholder', 'Paste link here: Eg: https://www.youtube.com/channel/UCdPJhu2eYCXIDo5hcTDw0_g'), _defineProperty(_messages, 'answer_sheet', 'Answer Sheet'), _defineProperty(_messages, 'answer_sheet_details', 'The answer sheet details'), _defineProperty(_messages, 'grade', 'Grade'), _defineProperty(_messages, 'open', 'Open'), _defineProperty(_messages, 'close', 'Close'), _defineProperty(_messages, 'select_location', 'Select Location'), _defineProperty(_messages, 'remove_user_from_room', 'Remove User from Course'), _defineProperty(_messages, 'add_user', 'Add User'), _defineProperty(_messages, 'add_student', 'Add Student'), _defineProperty(_messages, 'view_students', 'View Students'), _defineProperty(_messages, 'list_results', 'List Results'), _defineProperty(_messages, 'view_edit_questionaire_from_topic', 'View/Edit Questionnaire from Topic'), _defineProperty(_messages, 'unassign_questionnaire_from_topic', 'Unassign Questionnaire from Topic'), _defineProperty(_messages, 'remove_question_from_questionnaire', 'Remove Question from Questionnaire'), _defineProperty(_messages, 'view_edit_question_from_questionnaire', 'View/Edit Question from Questionnaire'), _defineProperty(_messages, 'participants_group', 'Participants Group'), _defineProperty(_messages, 'participants_list', 'Students List'), _defineProperty(_messages, 'enter_group_name', 'Enter group name'), _defineProperty(_messages, 'not_allowed', 'Not Allowed'), _defineProperty(_messages, 'no_questions_added_to_this_questionnaire', 'No Questions added to this questionnaire.'), _defineProperty(_messages, 'feature_info', 'Features Info'), _defineProperty(_messages, 'features', 'Features'), _defineProperty(_messages, 'no_of_rooms', 'No. of Courses'), _defineProperty(_messages, 'no_of_topics', 'No. of Topics'), _defineProperty(_messages, 'server_recording', 'Server Recording'), _defineProperty(_messages, 'client_recording', 'Client Recording'), _defineProperty(_messages, 'video_conference', 'Video Conference'), _defineProperty(_messages, 'continuous_presence', 'No. of Continuous Presence'), _defineProperty(_messages, 'title_groupParticipants_details', 'Below are students added to this group'), _defineProperty(_messages, 'group_participants', 'Students lists'), _defineProperty(_messages, 'delete_this_group', 'Delete this group'), _defineProperty(_messages, 'edit_group_name', 'Edit group name'), _defineProperty(_messages, 'add_participants_group', 'Add Students to group'), _defineProperty(_messages, 'search_participants', 'Search Students'), _defineProperty(_messages, 'delete_participant_alert', 'Do you want to remove this student?'), _defineProperty(_messages, 'created_by', 'Created By'), _defineProperty(_messages, 'please_enter_group_name', 'Group name can not be empty'), _defineProperty(_messages, 'please_enter_participant_name', 'Please select student'), _defineProperty(_messages, 'participants_group_list', 'Participants group list'), _defineProperty(_messages, 'room_configuration', 'Course Configuration'), _defineProperty(_messages, 'room_feedback_title', 'Feedback'), _defineProperty(_messages, 'configration', 'Configuration'), _defineProperty(_messages, 'configure_feedback', 'Configure Feedback'), _defineProperty(_messages, 'feedbackType_title', 'Feedback Type'), _defineProperty(_messages, 'codecType_title', 'Codec Type'), _defineProperty(_messages, 'enableLive_title', 'Enable Live'), _defineProperty(_messages, 'assign_questionaire', 'Assign Questionnaire'), _defineProperty(_messages, 'delete_SMTPSettings_alert', 'Are you sure you want to delete this SMTP Settings?'), _defineProperty(_messages, 'time_limit', 'Time Limit'), _defineProperty(_messages, 'no_time_limitations', 'No Time Limitations'), _defineProperty(_messages, 'delete_LDAPSettings_alert', 'Are you sure you want to delete this LDAP Settings?'), _defineProperty(_messages, 'previous', 'Previous'), _defineProperty(_messages, 'next', 'Next'), _defineProperty(_messages, 'enable_swot', 'Enable SWOT'), _defineProperty(_messages, 'select_an_answer_otherwise_it_will_not_be_considered_for_evaluation', 'Select an answer, otherwise it will not be considered for evaluation'), _defineProperty(_messages, 'export_users', 'Export Users'), _defineProperty(_messages, 'import_users', 'Import Users'), _defineProperty(_messages, 'import_format', 'Import Format'), _defineProperty(_messages, 'back_to_uploadlist', 'Back to UploadList'), _defineProperty(_messages, 'no_users_found', 'No Users Found.'), _defineProperty(_messages, 'select_role', 'Select Role'), _defineProperty(_messages, 'createdby', 'CreatedBy'), _defineProperty(_messages, 'count', 'Count'), _defineProperty(_messages, 'please_enter_the_question', 'Please enter the Question'), _defineProperty(_messages, 'invalid_mail_id', 'Invalid mail id.'), _defineProperty(_messages, 'accept', 'Accept'), _defineProperty(_messages, 'reject', 'Reject'), _defineProperty(_messages, 'request_pending', 'Request Pending'), _defineProperty(_messages, 'start_chating', 'Start chatting....!'), _defineProperty(_messages, 'pdf_view', 'PDF View'), _defineProperty(_messages, 'uploading_please_wait', 'Uploading! please wait'), _defineProperty(_messages, 'host_access', 'Host Access'), _defineProperty(_messages, 'become_host', 'Become Host'), _defineProperty(_messages, 'become_a_host', 'Become a Host'), _defineProperty(_messages, 'request_access_share', 'Request access to share screen / document'), _defineProperty(_messages, 'revoke', 'Revoke'), _defineProperty(_messages, 'enter_host_password', 'Enter Host Password'), _defineProperty(_messages, 'host_error', 'In-correct Host Password, please try again.'), _defineProperty(_messages, 'revoke_error', 'You are already Host. Do you want to Revoke...?'), _defineProperty(_messages, 'set_desc', 'Set Description'), _defineProperty(_messages, 'remove_participants_from_group', 'Remove student from group'), _defineProperty(_messages, 'confirm_password', 'Confirm password'), _defineProperty(_messages, 'no_data_found', 'No data found'), _defineProperty(_messages, 'invalid_group_name', 'Invalid group name'), _defineProperty(_messages, 'no_groups_found', 'No Groups Found'), _defineProperty(_messages, 'start_class', 'Start Class'), _defineProperty(_messages, 'join_class', 'Join Class'), _defineProperty(_messages, 'create_a_class', 'Schedule Class'), _defineProperty(_messages, 'upcoming_classes', 'Upcoming Schedules'), _defineProperty(_messages, 'past_classes', 'Past Schedules'), _defineProperty(_messages, 'have_class', 'Already have a schedule'), _defineProperty(_messages, 'create_edit_class', 'Schedule Class'), _defineProperty(_messages, 'class_name', 'Class Name'), _defineProperty(_messages, 'please_enter_class_name', 'Please enter class Name'), _defineProperty(_messages, 'my_classes', 'My classes'), _defineProperty(_messages, 'set_class_password', 'Set your class password.'), _defineProperty(_messages, 'edit_class', 'Edit this class'), _defineProperty(_messages, 'delete_class', 'Delete this class'), _defineProperty(_messages, 'select_language', 'Select Language'), _defineProperty(_messages, 'no_data_found', 'No data found'), _defineProperty(_messages, 'edit_class_alert', 'If you edit the class the invitation link needs  to be sent again. Do you really want to edit?'), _defineProperty(_messages, 'delete_class_alert', 'Are you sure you want to delete this class?'), _defineProperty(_messages, 'submitted_on', 'Submitted On'), _defineProperty(_messages, 'delete_Profile_image_alert', 'Are you sure you want to delete your Profile Picture'), _defineProperty(_messages, 'room_options', 'Class options'), _defineProperty(_messages, 'room_assignments', 'Assignments'), _defineProperty(_messages, 'assignment_list', 'Assignment List'), _defineProperty(_messages, 'assignment_details', 'Assignment Information'), _defineProperty(_messages, 'assignment_name', 'Assignment Name'), _defineProperty(_messages, 'room_assignment_manager', 'Course Assignment Manager'), _defineProperty(_messages, 'list_assignments', 'Below are the list of assignments related to this course.'), _defineProperty(_messages, 'no_assignments_yet', 'No Assignments Yet!..'), _defineProperty(_messages, 'submissions', 'Submissions'), _defineProperty(_messages, 'submission_list', 'Submission List'), _defineProperty(_messages, 'student_name', 'Student Name'), _defineProperty(_messages, 'back_to_assignments', 'Back To Assignments'), _defineProperty(_messages, 'file', 'File'), _defineProperty(_messages, 'select', 'Select'), _defineProperty(_messages, 'add_topics', 'Manage Topics'), _defineProperty(_messages, 'become_host_to_share_your_document', 'Become host to share your document'), _defineProperty(_messages, 'share_your_document', 'Share your document!'), _defineProperty(_messages, 'share_your_screen_document', 'Share your screen / document!'), _defineProperty(_messages, 'manage_assignments', 'Manage Assignments'), _defineProperty(_messages, 'manage_questionnaire', 'Manage Questionnaire'), _defineProperty(_messages, 'plagiarism', 'Plagiarism'), _defineProperty(_messages, 'drag', 'Drag'), _defineProperty(_messages, 'delete_assignment_alert', 'All submissions will also be deleted, Are you sure you want to delete this assignment?'), _defineProperty(_messages, 'refresh_schedules', 'Refresh Schedules'), _defineProperty(_messages, 'schedules', 'Schedules'), _defineProperty(_messages, 'refresh_rooms', 'Refresh Rooms'), _defineProperty(_messages, 'creating_please_wait', 'Creating! please wait'), _defineProperty(_messages, 'updating_please_wait', 'Updating! please wait'), _defineProperty(_messages, 'enable', 'Enable'), _defineProperty(_messages, 'publish', 'Publish'), _defineProperty(_messages, 'categories', 'categories.'), _defineProperty(_messages, 'corporates', 'corporates.'), _defineProperty(_messages, 'feedbacks', 'feedbacks.'), _defineProperty(_messages, 'locations', 'locations.'), _defineProperty(_messages, 'packages', 'packages.'), _defineProperty(_messages, 'participants', 'participants in the group.'), _defineProperty(_messages, 'rooms', 'courses.'), _defineProperty(_messages, 'users', 'users.'), _defineProperty(_messages, 'list_topic', 'topics.'), _defineProperty(_messages, 'list_files', 'files.'), _defineProperty(_messages, 'list_certificates', 'certificates'), _defineProperty(_messages, 'results', 'results.'), _defineProperty(_messages, 'polls', 'Polls'), _defineProperty(_messages, 'poll_list', 'Poll List'), _defineProperty(_messages, 'list_polls', 'Below are the list of polls related to this room.'), _defineProperty(_messages, 'no_polls_yet', 'No Polls Yet!..'), _defineProperty(_messages, 'package_validFrom', 'Valid From'), _defineProperty(_messages, 'create_poll', 'Create Poll'), _defineProperty(_messages, 'option', 'Option'), _defineProperty(_messages, 'package_validFrom', 'Valid From'), _defineProperty(_messages, 'title_created_plagiarism_details', 'Below are the details about the plagiarism check for upload.'), _defineProperty(_messages, 'plagiarism_info', 'Plagiarism Info'), _defineProperty(_messages, 'percents', 'Percents'), _defineProperty(_messages, 'copied_words', 'No.of CopiedWords'), _defineProperty(_messages, 'comparison_report', 'Comparison Report'), _defineProperty(_messages, 'cached_version', 'Cached Version'), _defineProperty(_messages, 'title', 'Title'), _defineProperty(_messages, 'introduction', 'Introduction'), _defineProperty(_messages, 'embeded_comparison', 'Embeded Comparison'), _defineProperty(_messages, 'plagiarism', 'Plagiarism'), _defineProperty(_messages, 'publish', 'Publish'), _defineProperty(_messages, 'published', 'Published'), _defineProperty(_messages, 'update_poll', 'Update Poll'), _defineProperty(_messages, 'delete_poll_alert', 'Are you sure you want to delete this poll?'), _defineProperty(_messages, 'delete_poll', 'Delete Poll'), _defineProperty(_messages, 'broadcast', 'Broadcast News'), _defineProperty(_messages, 'broadcast_news_list', 'Broadcast News list '), _defineProperty(_messages, 'no_broadcast', 'No broadcast News'), _defineProperty(_messages, 'broadcast_list', 'Broadcast list'), _defineProperty(_messages, 'no_submittions_yet', 'No Submissions Yet!..'), _defineProperty(_messages, 'list_poll_submissions', 'Below are the list of submissions related to this poll.'), _defineProperty(_messages, 'poll_analysis', 'Below is the analysis chart related to this poll.'), _defineProperty(_messages, 'delete_broadcast_alert', 'Are you sure you want to delete this broadcast news?'), _defineProperty(_messages, 'view_comments', 'Comments'), _defineProperty(_messages, 'view_all_comments', 'View all comments'), _defineProperty(_messages, 'edit_comment', 'Edit Comment'), _defineProperty(_messages, 'delete_comment', 'Delete comment'), _defineProperty(_messages, 'reply_on_comment', 'reply on comment'), _defineProperty(_messages, 'reply_comment', 'Reply'), _defineProperty(_messages, 'previous_comments', 'Previous comment'), _defineProperty(_messages, 'comment_on_broadcast_news', 'Comment on broadcast news'), _defineProperty(_messages, 'your_reply', "Reply on comment"), _defineProperty(_messages, 'delete_broadcast_alert', 'Are you sure you want to delete this broadcast?'), _defineProperty(_messages, 'refresh_polls', 'Refresh Polls'), _defineProperty(_messages, 'request_for_share_document', 'Request for share screen / document'), _defineProperty(_messages, 'studentId', 'Student Id'), _defineProperty(_messages, 'view_result', 'View Result'), _defineProperty(_messages, 'submit_poll', 'Submit Poll'), _defineProperty(_messages, 'attendance', 'Attendance'), _defineProperty(_messages, 'please_enter_the_broadcast', 'Please enter broadcast news'), _defineProperty(_messages, 'total_attendance', 'Total Attendance'), _defineProperty(_messages, 'student_list', 'Student List'), _defineProperty(_messages, 'class_list', 'Class List'), _defineProperty(_messages, 'expiry_Date', 'Expiry Date'), _defineProperty(_messages, 'students', 'students'), _defineProperty(_messages, 'overall', 'OverAll'), _defineProperty(_messages, 'detailed', 'Detailed'), _defineProperty(_messages, 'classes', 'classes'), _defineProperty(_messages, 'view_attendance', 'View Attendance'), _defineProperty(_messages, 'assignment_reports', 'Assignment Reports'), _defineProperty(_messages, 'assignment_list', 'Assignment List'), _defineProperty(_messages, 'my_reports', 'My Reports'), _defineProperty(_messages, 'created_date', 'Created Date'), _defineProperty(_messages, 'expiry_date', 'Expiry Date'), _defineProperty(_messages, 'assignment', 'Assignment'), _defineProperty(_messages, 'test_reports', 'Test Report'), _defineProperty(_messages, 'active_users', 'Active Users'), _defineProperty(_messages, 'invalid_enddate', 'Invalid end date'), _defineProperty(_messages, 'select_the_days', 'Please select the days'), _defineProperty(_messages, 'select_the_endson', 'Please select the ends on'), _defineProperty(_messages, 'enter_occurence', 'Please enter the no. of occurences'), _defineProperty(_messages, 'current_day', 'Current Day'), _defineProperty(_messages, 'recurring', 'Recurring'), _defineProperty(_messages, 'current_recurring', 'Delete Current Day / Recurring'), _defineProperty(_messages, 'delete_current_recurring', 'Do you want to delete current day (or) recurring schedule?'), _defineProperty(_messages, 'title_user_details', 'Below are the details about the user you have created'), _defineProperty(_messages, 'registration_prompt', 'Please fill below fields for registration'), _defineProperty(_messages, 'institute_name', 'Please enter institute name'), _defineProperty(_messages, 'please_enter_institute_name', 'Please enter institute name'), _defineProperty(_messages, 'inactive_user', 'Registered User'), _defineProperty(_messages, 'activate_user', 'Activate User'), _defineProperty(_messages, 'active_user', 'Active User'), _defineProperty(_messages, 'inactive_user_list', 'In active user list'), _defineProperty(_messages, 'Marks', 'Marks'), _defineProperty(_messages, 'total_marks', 'Total Marks'), _defineProperty(_messages, 'multiple_choice_answers', 'Multiple choice answers'), _defineProperty(_messages, 'multiple_responsive_answers', 'Multiple responsive answers'), _defineProperty(_messages, 'true_false', 'True or False answers'), _defineProperty(_messages, 'active_users_list', 'Active Users List'), _defineProperty(_messages, 'course_attendance', 'Course Attendance'), _defineProperty(_messages, 'show_result', 'Show Result'), _defineProperty(_messages, 'student_reg_form', 'Student registration form'), _defineProperty(_messages, 'already_registered_user', 'Already registered?'), _defineProperty(_messages, 'i_agree', 'I Agree'), _defineProperty(_messages, 'terms_conditions', 'Terms and Conditions'), _defineProperty(_messages, 'grade_configuration', 'Grade Configuration'), _defineProperty(_messages, 'title_grade_configuration', 'Configure questionnaire grades here.'), _defineProperty(_messages, 'title_view_grade_configuration', 'Below are the grades which will be reflected in questionnaire result.'), _defineProperty(_messages, 'fullcalender', 'Full Calendar'), _defineProperty(_messages, 'select_duration', 'Plese Select the Duration'), _defineProperty(_messages, 'set_hours', 'Set Hours'), _defineProperty(_messages, 'set_minutes', 'Set Minutes'), _defineProperty(_messages, 'checkin_time', 'Check-In Time'), _defineProperty(_messages, 'checkout_time', 'Check-Out Time'), _defineProperty(_messages, 'topic_report', 'Topics Reports '), _defineProperty(_messages, 'course_view', 'Course View'), _defineProperty(_messages, 'topic_name', 'Topic Name'), _defineProperty(_messages, 'viewed_topics', 'Viewed Topics'), _defineProperty(_messages, 'topic_viewed_users', 'Topic Viewed Users'), _defineProperty(_messages, 'description', 'Description'), _defineProperty(_messages, 'status', 'Status'), _defineProperty(_messages, 'deleted_user', 'Deleted user'), _defineProperty(_messages, 'registered', 'Registered'), _defineProperty(_messages, 'deleted', 'Deleted'), _defineProperty(_messages, 'deleted_list', 'Deleted users'), _defineProperty(_messages, 'active_user_list', 'Active users'), _defineProperty(_messages, 'registered_user_list', 'Registered users'), _defineProperty(_messages, 'skip', 'Skip'), _defineProperty(_messages, 'all_participants_groups', 'All participants groups'), _defineProperty(_messages, 'from', 'From'), _defineProperty(_messages, 'to', 'To'), _defineProperty(_messages, 'no_replies', 'No Replies'), _defineProperty(_messages, 'no_answers', 'No Answers'), _defineProperty(_messages, 'link_is_either_expired_or_broken', 'Link is either expired or broken'), _defineProperty(_messages, 'summary', 'Summary'), _defineProperty(_messages, 'room_students', 'Course Students'), _defineProperty(_messages, 'topic_content', 'Topic Content'), _defineProperty(_messages, 'you_are_in_mange_users_panel', 'You are in manage users panel'), _defineProperty(_messages, 'work_edu_details', 'View Work and Education'), _defineProperty(_messages, 'view_contact_details', 'View Contacts'), _defineProperty(_messages, 'view_locale', 'View Locale'), _defineProperty(_messages, 'you_are_in_active_users_panel', 'You are in active users panel'), _defineProperty(_messages, 'you_are_in_my_profile_panel', 'You are in my profile panel'), _defineProperty(_messages, 'you_are_in_package_list_panel', 'You are in package management panel'), _defineProperty(_messages, 'you_are_in_corporate_list_panel', 'You are in corporate panel'), _defineProperty(_messages, 'you_are_in_category_list_panel', 'You are in category management panel'), _defineProperty(_messages, 'you_are_in_room_list_panel', 'You are in course management panel'), _defineProperty(_messages, 'you_are_in_location_list_panel', 'You are in location panel'), _defineProperty(_messages, 'you_are_in_participant_group_list_panel', 'You are in participant group panel'), _defineProperty(_messages, 'you_are_in_questionarie_list_panel', 'You are in questionarie panel'), _defineProperty(_messages, 'edit_grade_configuaration', 'Edit grade configuaration'), _defineProperty(_messages, 'You_are_in_reports_list_panel', 'You are in reports panel'), _defineProperty(_messages, 'add_assignment', 'Add Assignment'), _defineProperty(_messages, 'attendance_reports', 'Attendance Reports'), _defineProperty(_messages, 'users_activity', 'Users Activity'), _defineProperty(_messages, 'Update', "Update"), _defineProperty(_messages, 'blocked', 'Blocked'), _defineProperty(_messages, 'guest', 'Guest'), _defineProperty(_messages, 'requiedFieldText', 'Please enter'), _defineProperty(_messages, 'requiedFieldDate', 'Please select'), _defineProperty(_messages, 'validInputData', 'Please enter valid'), _defineProperty(_messages, 'select_dropdown', 'select'), _defineProperty(_messages, 'save_publish', 'Save & Publish'), _defineProperty(_messages, 'requested_for_share_document_please_wait', 'Requested for share screen / document, Please wait .....'), _defineProperty(_messages, 'confirm_unassign_questionnaire_topics', 'Are you sure you want to unassign questionnaire as there are results based on this questionnaire?'), _defineProperty(_messages, 'connect_with_social_link', 'Connect with Social Links'), _defineProperty(_messages, 'requested_for_share_document_please_wait', 'Requested for share screen / document, Please wait .....'), _defineProperty(_messages, 'update_publish', 'Update & Publish'), _defineProperty(_messages, 'invalid_file_format', 'Invalid file format.'), _defineProperty(_messages, 'confirm_delete_question_from_questionnaire', 'Are you sure you want to delete question from questionnaire as there are results based on question?'), _defineProperty(_messages, 'stop_screen_share', 'Stop Screen Share'), _defineProperty(_messages, 'pause_screen_share', 'Pause Screen Share'), _defineProperty(_messages, 'play_screen_share', 'Play Screen Share'), _defineProperty(_messages, 'add_students', 'Add student'), _defineProperty(_messages, 'confirm_submit_alert', 'Are you sure you want to submit?'), _defineProperty(_messages, 'user_reg_form', 'User registration form'), _defineProperty(_messages, 'registration_please_wait', 'Registering, Please wait'), _defineProperty(_messages, 'student_data_not_found', 'Student data not found'), _defineProperty(_messages, 'individual_user', 'Individual User'), _defineProperty(_messages, 'group', 'Group'), _defineProperty(_messages, 'add_groups', 'Add Groups'), _defineProperty(_messages, 'edit_room', 'Edit Course'), _defineProperty(_messages, 'edit_profie', 'Edit Profile'), _defineProperty(_messages, 'create_topic', 'Create Topic'), _defineProperty(_messages, 'new_questionnaire', 'New Questionnaire'), _defineProperty(_messages, 'student_assignment_list_title', 'assignments which you have submitted'), _defineProperty(_messages, 'evaluation_not_yet_done', 'Evaluation not yet done'), _defineProperty(_messages, 'instructor_feedback', "Instructor's Feedback"), _defineProperty(_messages, 'total_assignment_marks', 'Total Assignment Marks'), _defineProperty(_messages, 'scored_marks', 'Scored Marks'), _defineProperty(_messages, 'add_another_field', 'Add another field'), _defineProperty(_messages, 'maximum_marks', 'Maximum Marks'), _defineProperty(_messages, 'total_score', 'Total Score'), _defineProperty(_messages, 'load_more', 'load more..'), _defineProperty(_messages, 'note', 'Note'), _defineProperty(_messages, 'default', 'Default'), _defineProperty(_messages, 'proxy', 'Proxy'), _defineProperty(_messages, 'quality', 'Quality'), _defineProperty(_messages, 'best_quality', 'Best Quality'), _defineProperty(_messages, 'better_quality', 'Better Quality'), _defineProperty(_messages, 'standard', 'Standard'), _defineProperty(_messages, 'better_speed', 'Better Speed'), _defineProperty(_messages, 'best_speed', 'Best Speed'), _defineProperty(_messages, 'ends_on', 'Ends'), _defineProperty(_messages, 'after', 'After'), _defineProperty(_messages, 'occurences', 'occurences'), _defineProperty(_messages, 'repeat_on', 'Repeat On'), _defineProperty(_messages, 'On', 'On'), _defineProperty(_messages, 'No_Questionnaires_assigned_to_this_topic', 'No Questionnaires assigned to this topic.'), _defineProperty(_messages, 'total_percentage', 'Total Percentage'), _defineProperty(_messages, 'options', 'Options'), _defineProperty(_messages, 'revoke_host', 'Revoke Host'), _defineProperty(_messages, 'become_host', 'Become Host'), _defineProperty(_messages, 'video_settings', 'Video Settings'), _defineProperty(_messages, 'mute_unmute', 'Mute/Unmute'), _defineProperty(_messages, 'remote_mute_unmute', 'Remote Mute/Unmute'), _defineProperty(_messages, 'full_Screen', 'Full Screen'), _defineProperty(_messages, 'share', 'Share'), _defineProperty(_messages, 'volume_on_off', 'Volume On/Off'), _defineProperty(_messages, 'become_speaker', 'Become Speaker'), _defineProperty(_messages, 'revoke_speaker', 'Revoke Speaker'), _defineProperty(_messages, 'become_presenter', 'Become Presenter'), _defineProperty(_messages, 'revoke_presenter', 'Revoke Presenter'), _defineProperty(_messages, 'add_another_field', 'Add Another Field'), _defineProperty(_messages, 'today', 'Today'), _defineProperty(_messages, 'yesterday', 'Yesterday'), _defineProperty(_messages, 'last_seven_days', 'Last 7 days'), _defineProperty(_messages, 'last_thirty_days', 'Last 30 days'), _defineProperty(_messages, 'custom', 'Custom'), _defineProperty(_messages, 'date_range', 'Date Range'), _defineProperty(_messages, 'apply', 'Apply'), _defineProperty(_messages, 'not_loggedin_users', 'Not Logged-In Users'), _defineProperty(_messages, 'loggedin_users', 'Logged-In Users'), _defineProperty(_messages, 'loggedin_users_status', 'Logged-In Users Status'), _defineProperty(_messages, 'present_instructors', 'Present Instructors'), _defineProperty(_messages, 'absent_instructors', 'Absent Instructors'), _defineProperty(_messages, 'present_students', 'Present Students'), _defineProperty(_messages, 'absent_students', 'Absent Students '), _defineProperty(_messages, 'instructors_attendance', 'Instructors Attendance'), _defineProperty(_messages, 'students_attendance', 'Students Attendance'), _defineProperty(_messages, 'percentage', 'Percentage'), _defineProperty(_messages, 'offline_visits', 'Offline Visits'), _defineProperty(_messages, 'online_visits', 'Online Visits'), _defineProperty(_messages, 'absent_schedules', 'Absent Schedules'), _defineProperty(_messages, 'total_schedules', 'Total Schedules'), _defineProperty(_messages, 'total_attendance', 'Total Attendance'), _defineProperty(_messages, 'count', 'Count'), _defineProperty(_messages, 'back_to_list', 'Back to List'), _defineProperty(_messages, 'back_to_reports', 'Back to Reports'), _defineProperty(_messages, 'completely_viewed_topic_users', 'Completely Viewed Topic Users'), _defineProperty(_messages, 'partially_viewed_topic_users', 'Partially Viewed Topic Users'), _defineProperty(_messages, 'not_AtAll_Viewed_Topic_Users', 'Not At All Viewed Topic Users'), _defineProperty(_messages, 'viewed_users', 'Viewed Users'), _defineProperty(_messages, 'completely_viewed_topics', 'Completely Viewed Topics'), _defineProperty(_messages, 'partially_viewed_topics', 'Partially Viewed Topics'), _defineProperty(_messages, 'notAtAll_Viewed_Topics', 'Not At All Viewed Topics'), _defineProperty(_messages, 'user_viewed_topics', 'User Viewed Topics'), _defineProperty(_messages, 'topics_viewed', 'Topics Viewed'), _defineProperty(_messages, 'topic_users', 'Students'), _defineProperty(_messages, 'clear_room_chat', 'Clear Chat'), _defineProperty(_messages, 'delete_room_chat_alert', 'Are you sure you want to clear the chat?'), _defineProperty(_messages, 'join', 'Join'), _defineProperty(_messages, 'access_denied', 'Access Denied'), _defineProperty(_messages, 'video_bit_rate', 'Video Bit Rate'), _defineProperty(_messages, 'audio_bit_rate', 'Audio Bit Rate'), _defineProperty(_messages, 'evaluate_assignment', 'Evaluate Assignment'), _defineProperty(_messages, 'back_to_submissions', 'Back To Submissions'), _defineProperty(_messages, 'Persian', 'Persian'), _defineProperty(_messages, 'submit', 'Submit'), _defineProperty(_messages, 'make_speaker_vedio', 'Make Speaker'), _defineProperty(_messages, 'Connection_Request', 'Connection Request'), _defineProperty(_messages, 'message', 'Message'), _defineProperty(_messages, 'sources', 'Sources'), _defineProperty(_messages, 'resolutions', 'Resolutions'), _defineProperty(_messages, 'camera', 'Camera'), _defineProperty(_messages, 'Audio_Inputs', 'Audio Inputs'), _defineProperty(_messages, 'Please_enter_Company', 'Please enter Company'), _defineProperty(_messages, 'Please_enter_Position', 'Please enter Position'), _defineProperty(_messages, 'Please_enter_valid_City_Town', "'Please enter valid City/ Town' (Special charecters should not be allowed)"), _defineProperty(_messages, 'Please_enter_valid_Country', 'Please enter valid Country'), _defineProperty(_messages, 'Please_enter_valid_From_Date', 'Please enter valid From Date'), _defineProperty(_messages, 'From_date_cannot_be_in_future', 'From date cannot be in future'), _defineProperty(_messages, 'Please_enter_valid_To_Date', "Please enter valid To Date"), _defineProperty(_messages, 'From_date_and_To_date_cannot_be_same', 'From date and To date cannot be same'), _defineProperty(_messages, 'To_date_should_be_greater_than_From_date', 'To date should be greater than From date'), _defineProperty(_messages, 'Please_enter_School', 'Please enter School'), _defineProperty(_messages, 'School_field_cannot_have_empty_spaces', "School field can't have empty spaces"), _defineProperty(_messages, 'Please_enter_University', 'Please enter University'), _defineProperty(_messages, 'University_field_cannot_have_empty_spaces', "University field can't have empty spaces"), _defineProperty(_messages, 'Please_enter_atleast_one_skill', "Please enter atleast one skill"), _defineProperty(_messages, 'Please_enter_Address', 'Please enter Address'), _defineProperty(_messages, 'Please_enter_a_valid_Address', 'Please enter a valid Address'), _defineProperty(_messages, 'Please_enter_City', 'Please enter City'), _defineProperty(_messages, 'Please_enter_a_valid_City', 'Please enter a valid City'), _defineProperty(_messages, 'Please_enter_Zip', "Please enter Zip"), _defineProperty(_messages, 'Please_enter_a_valid_Zip', 'Please enter a valid Zip'), _defineProperty(_messages, 'Please_enter_website', 'Please enter website'), _defineProperty(_messages, 'Please_enter_valid_website', 'Please enter valid website'), _defineProperty(_messages, 'Please_enter_social_link', 'Please enter social link'), _defineProperty(_messages, 'Please_enter_valid_social_link', 'Please enter valid social link'), _defineProperty(_messages, 'Please_enter_valid_Date_of_birth', 'Please enter valid Date of birth'), _defineProperty(_messages, 'Date_of_birth_cannot_be_future_Date', "Date of birth can't be future Date"), _defineProperty(_messages, 'Please_select_Gender', ' Please select Gender'), _defineProperty(_messages, 'Please_enter_Current_Password', 'Please enter Current Password'), _defineProperty(_messages, 'Please_enter_New_Password', 'Please enter New Password'), _defineProperty(_messages, 'Please_enter_Confirm_password', 'Please enter Confirm password'), _defineProperty(_messages, 'New_Password_and_Confirm_password_should_be_same', 'New Password and Confirm password should be same.'), _defineProperty(_messages, 'Assignment_name_cannot_have_only_white_spaces', "Assignment name can't have only white spaces"), _defineProperty(_messages, 'Please_enter_Assignment_Name', 'Please enter Assignment Name'), _defineProperty(_messages, 'Please_enter_Question', 'Please enter Question'), _defineProperty(_messages, 'please_select_type', ' please select type'), _defineProperty(_messages, 'Please_enter_Options', ' Please enter Options'), _defineProperty(_messages, 'Provide_atleast_Two_Options', 'Provide atleast Two Options'), _defineProperty(_messages, 'Options_cannot_be_same', "Options can't be same"), _defineProperty(_messages, 'Please_select_an_Answer', 'Please select an Answer'), _defineProperty(_messages, 'Marks_cannot_be_empty', "Marks can't be empty"), _defineProperty(_messages, 'Marks_can_only_have_Numbers', ' Marks can only have Numbers'), _defineProperty(_messages, 'Please_enter_a_valid_Name', ' Please enter a valid Name'), _defineProperty(_messages, 'Please_enter_valid_Email_id', 'Please enter valid Email id'), _defineProperty(_messages, 'Please_enter_Password', ' Please enter Password'), _defineProperty(_messages, 'Passwords_are_not_matching', 'Passwords are not matching'), _defineProperty(_messages, 'Please_enter_valid_City_Name', 'Please enter valid City Name'), _defineProperty(_messages, 'Please_enter_valid_State_Name', ' Please enter valid State Name'), _defineProperty(_messages, 'Please_accept_Term_conditions', 'Please accept Terms & conditions'), _defineProperty(_messages, 'Please_enter_institute_name', 'Please enter institute name'), _defineProperty(_messages, 'Enter_at_least_three_letters_to_search', 'Enter at least three letters to search'), _defineProperty(_messages, 'support_center', 'Support Center'), _defineProperty(_messages, 'open_a_new_ticket', 'Open a New Ticket'), _defineProperty(_messages, 'check_ticket_status', 'Check Ticket Status'), _defineProperty(_messages, 'troubleshoot', 'Troubleshoot'), _defineProperty(_messages, 'edit_current_day_recurring', 'Edit Current Day / Recurring'), _defineProperty(_messages, 'want_to_edit_current_day_or_recurring_schedule', 'Do you want to Edit Current day (or) recurring schedule?'), _defineProperty(_messages, 'want_to_delete_current_day_or_recurring_schedule', 'Do you want to delete Current day (or) recurring schedule?'), _defineProperty(_messages, 'delete_current_day_recurring', 'Delete Current Day / Recurring'), _defineProperty(_messages, 'duration_time_should_be_greaterthan_current_time', 'duration time should be greaterthan current time'), _defineProperty(_messages, 'Please_select_the_duration', 'Please select the duration'), _defineProperty(_messages, 'Please_fill_all_the_fields', 'Please fill all the fields'), _defineProperty(_messages, 'question_name_cannot_have_only_white_spaces', "Question name can't have only white spaces"), _defineProperty(_messages, 'options_cannot_have_only_white_spaces', "Options can't have only white spaces"), _defineProperty(_messages, 'upload_new', 'Upload New'), _defineProperty(_messages, 'profile_picture', 'Profile Picture'), _defineProperty(_messages, 'current', 'Current'), _defineProperty(_messages, 'recurring', 'Recurring'), _defineProperty(_messages, 'profile_picture', 'Profile Picture'), _defineProperty(_messages, 'Please_select_any_option', 'Please select any option'), _defineProperty(_messages, 'go_back', 'Go back'), _defineProperty(_messages, 'phne', 'Phone'), _defineProperty(_messages, 'Current', 'Current'), _defineProperty(_messages, 'Personal_Information', 'Personal Information'), _defineProperty(_messages, 'Work_Places', 'Work Places'), _defineProperty(_messages, 'dob', 'DOB'), _defineProperty(_messages, 'Social_Links', 'Social Links'), _defineProperty(_messages, 'Connections', 'Connections'), _defineProperty(_messages, 'All_Connections', 'All Connections'), _defineProperty(_messages, 'View_all', 'View all'), _defineProperty(_messages, 'Hide_all', 'Hide all'), _defineProperty(_messages, 'hide', 'Hide'), _defineProperty(_messages, 'enter_schedule_password', 'Enter schedule password'), _defineProperty(_messages, 'conference_access', 'Conference access'), _defineProperty(_messages, 'please_enter_schedule_password', 'Please enter schedule password'), _defineProperty(_messages, 'invalid_or_expire_room', 'It looks an invalid course or your course is expired'), _defineProperty(_messages, 'unautharized_request', 'It looks an unautharized request'), _defineProperty(_messages, 'invalid_user', 'It looks you are an invalid user'), _defineProperty(_messages, 'invalid_room', 'It looks an invalid course'), _defineProperty(_messages, 'invalid_or_expire_package', 'It looks an invalid package or your package is expired'), _defineProperty(_messages, 'export_chat', 'Export Chat'), _defineProperty(_messages, 'download_certificate', 'Download Certificate'), _defineProperty(_messages, 'topics_completed', 'Topics Completed'), _defineProperty(_messages, 'certificates', 'Certificates'), _defineProperty(_messages, 'certificate_approved', 'Certificate Approved'), _defineProperty(_messages, 'select_questionnaire', "Select Questionnaire"), _defineProperty(_messages, 'questionnaire_name_error', "Please enter Questionnaire Name"), _defineProperty(_messages, 'questionnaire_description_error', "Please enter Description"), _defineProperty(_messages, 'clone_from_previoues_questionnaire', "Clone from previous Questionnaire"), _defineProperty(_messages, 'select_questionnaire', "Please select questionnaire"), _defineProperty(_messages, 'topic_completed', 'If topic completes'), _defineProperty(_messages, 'i_have_completed_this_topic', 'I have completed the topic'), _defineProperty(_messages, 'continous_user_presence_exceeded', 'User limit exceeded, Please contact admin'), _defineProperty(_messages, 'update_basic_information', 'Update Basic Information'), _defineProperty(_messages, 'adding_question_please_wait', 'Adding question, please wait...'), _messages)
	};

/***/ },
/* 182 */
/***/ function(module, exports) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _messages;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	exports.default = {
	  locale: 'hi',
	  messages: (_messages = {
	    siteTitle: 'instaVC - Business Suite',
	    addPost: 'Add Post',
	    switchLanguage: 'Switch Language',
	    twitterMessage: 'We are on Twitter',
	    by: 'By',
	    deletePost: 'Delete Post',
	    createNewPost: 'Create new post',
	    authorName: 'Author\'s Name',
	    postTitle: 'Post Title',
	    postContent: 'Post Content',
	    submit: 'Submit',
	    comment: 'user {name} {value, plural,\n        =0 {does not have any comments}\n        =1 {has # comment}\n        other {has # comments}\n      }',
	    HTMLComment: 'user <b style=\'font-weight: bold\'>{name} </b> {value, plural,\n        =0 {does not have <i style=\'font-style: italic\'>any</i> comments}\n        =1 {has <i style=\'font-style: italic\'>#</i> comment}\n        other {has <i style=\'font-style: italic\'>#</i> comments}\n      }',
	    nestedDateComment: 'user {name} {value, plural,\n        =0 {does not have any comments}\n        =1 {has # comment}\n        other {has # comments}\n      } as of {date}',
	    loginTitle: 'लॉग इन करें',
	    login_prompt: 'कृपया अपने instaVC खाते में साइन इन करें',
	    email_address: 'ईमेल पता',
	    password: 'पासवर्ड',
	    sign_in: 'साइन इन करें',
	    sign_up: 'साइन अप करें',
	    keep_signed_in: 'कृपया मुझे साइन इन रखें',
	    forgotten_password: 'मैं अपना पासवर्ड भूल चूका हूँ',
	    privacy_policy: 'गोपनीयता नीति',
	    terms_conditions: 'नियम एवं शर्तें',
	    my_profile: 'मेरी प्रोफाइल',
	    work_education: 'काम और शिक्षा',
	    contacts: 'संपर्क जानकारी',
	    personal_info: 'व्यक्तिगत जानकारी',
	    company_details: 'संस्थान के विवरण',
	    about_me: 'मेरे बारे में',
	    full_name: 'पूरा नाम',
	    email: 'ईमेल',
	    phone: 'फ़ोन नंबर',
	    position: 'पद',
	    department: 'विभाग',
	    activities: 'क्रियाएँ',
	    edit: 'संपादित करें',
	    cancel: 'रद्द करे',
	    save: 'जमा करे',
	    delete: 'मिटाना',
	    list: 'सूची',
	    new: 'नया',
	    general_info: 'सामान्य जानकारी',
	    first_name: 'पहला नाम',
	    last_name: 'अंतिम नाम',
	    gender: 'लिंग',
	    contact_details: 'संपर्क विवरण',
	    male: 'पुस्र्ष',
	    female: 'महिला',
	    user_info: 'उपयोगकर्ता जानकारी',
	    credential_access: 'क्रेडेंशियल और प्रवेश',
	    default_room: 'डिफ़ॉल्ट पाठ्यक्रम',
	    business_id: 'व्यवसाय आईडी',
	    business_name: 'व्यवास्यक नाम',
	    business_type: 'व्यापार के प्रकार',
	    corporate_type: 'कंपनी के प्रकार',
	    website: 'वेबसाइट',
	    company_status: 'कंपनी की स्थिति',
	    schedule_type: 'शेड्यूल के प्रकार',
	    name: 'नाम',
	    address: 'पता',
	    street: 'सड़क',
	    district: 'जिला',
	    state: 'राज्य',
	    country: 'देश',
	    pincode: 'पिन कोड',
	    license_details: 'लाइसेंस विवरण',
	    publish_limit: 'प्रकाशित सीमा',
	    room_limit: 'पाठ्यक्रम सीमा',
	    no_p2p: 'पी 2 पी की संख्या',
	    subscriber_limit: 'सब्सक्राइबर सीमा',
	    users_limit: 'उपयोगकर्ताओं को सीमित',
	    legal_doc_details: 'कानूनी दस्तावेज विवरण',
	    pan_number: 'पैन नंबर',
	    tan_id: 'टैन पहचान पत्र',
	    active: 'सक्रिय',
	    inactive: 'निष्क्रिय',
	    calendar: 'कैलेंडर',
	    contact_name: 'संपर्क नाम',
	    contact_phone_number: 'संपर्क दूरभाष क्रमांक',
	    view: 'दृश्य दृष्टि',
	    title_company_details: 'नीचे आपके द्वारा बनाई गई कंपनी के बारे में विवरण दिया गया है',
	    title_category_details: 'नीचे आपके द्वारा बनाई गई श्रेणी के बारे में विवरण दिया गया है',
	    corporate_info: "कॉर्पोरेट जानकारी",
	    all_corporates: "सभी निगमों",
	    title_list_details: 'नीचे दी गई सूची',
	    corporate_list: 'कॉर्पोरेट सूची',
	    hidden: " ",
	    company_code: 'कंपनी कोड',
	    role: "भूमिका",
	    new_user: 'नया उपभोक्ता',
	    edit_user: 'यूजर को संपादित करो',
	    all_users: "सभी उपयोगकर्ताओं",
	    date: 'तारीख',
	    user_details: 'उपयोगकर्ता विवरण',
	    room: 'पाठ्यक्रम',
	    smtp_details: 'एसएमटीपी विवरण',
	    api_key: 'एपीआई कुंजी',
	    username: 'उपयोगकर्ता नाम',
	    server: 'सर्वर',
	    basic_info: 'बुनियादी जानकारी',
	    select_package: 'पैकेज को चुन ले',
	    room_name: 'पाठ्यक्रम का नाम',
	    room_type: 'सम्मेलन प्रकार',
	    room_password: 'पाठ्यक्रम का पासवर्ड',
	    other_details: 'अन्य जानकारी',
	    corporate_name: 'कंपनी का नाम',
	    host_password: 'होस्ट पासवर्ड',
	    bridge_number: 'ब्रिज नंबर',
	    room_manager: 'पाठ्यक्रम प्रबंधक',
	    my_room: 'मेरा पाठ्यक्रम',
	    room_users: 'पाठ्यक्रम उपयोगकर्ता',
	    room_user: 'पाठ्यक्रम उपयोगकर्ता',
	    new_room: 'नया पाठ्यक्रम',
	    all_rooms: 'सभी पाठ्यक्रम',
	    add_user_to_room: 'पाठ्यक्रम में उपयोगकर्ता जोड़ें',
	    package_name: 'पैकेज का नाम',
	    title_created_room_details: 'नीचे आपके द्वारा बनाए गए पाठ्यक्रम के बारे में विवरण दिया गया है',
	    room_license: 'पाठ्यक्रम लाइसेंस',
	    mcu_server: 'एमसीयू सर्वर',
	    title_contact_details: 'इस पाठ्यक्रम में जोड़े गए संपर्क नीचे दिए गए हैं',
	    package_details: 'पैकेज के ब्यौरे',
	    package_manager: 'पैकेज प्रबंधक',
	    package_info: 'पैकेज जानकारी',
	    package_price: 'पैकेज कीमत',
	    user_count: 'उपयोगकर्ता की संख्या',
	    user_presence: 'उपयोगकर्ता उपस्थिति',
	    package_validity: 'पैकेज वैधता',
	    server_location: 'सर्वर स्थान',
	    assigned_to: 'को सौंपना',
	    title_about_package: 'नीचे आपके द्वारा बनाए गए पैकेज के बारे में विवरण दिया गया है',
	    search_contacts: 'खोजें संपर्क',
	    search_assigned_to_contacts: 'असाइन करने के लिए संपर्क खोजें',
	    // add : 'जोड़ना',
	    add: 'जोड़े',
	    settings: 'सेटिंग्स',
	    dashboard: 'डैशबोर्ड',
	    my_account: 'मेरा खाता',
	    corporate_directory: 'कॉर्पोरेट निर्देशिका',
	    smtp_setting: "एसएमटीपी सेटिंग",
	    manage_user: 'उपयोगकर्ताओं को प्रबंधित करें',
	    reports: 'रिपोर्ट',
	    ldap_settings: 'LDAP सेटिंग',
	    room_management: 'पाठ्यक्रम प्रबंधन',
	    package_management: 'पैकेज प्रबंधन',
	    category_management: 'श्रेणी प्रबंधन',
	    logout: 'लोग आउट',
	    ldap_details: 'LDAP विवरण',
	    domain: 'डोमेन',
	    base_dn: 'बेस डी.एन.',
	    url: 'यूआरएल',
	    bind_cn: 'बाँध सीएन',
	    bind_password: 'बाँध पासवर्ड',
	    force_login: 'सेना लॉग इन',
	    new_category: 'नई श्रेणी',
	    all_categories: 'सब वर्ग',
	    category_details: 'श्रेणी विवरण',
	    category_name: 'श्रेणी नाम',
	    category_desc: 'वर्ग विवरण',
	    category_list: 'श्रेणी सूची',
	    package_list: 'पैकेज की सूची',
	    room_list: 'पाठ्यक्रम सूची',
	    user_list: 'उपयोगकर्ता सूची',
	    corporate_detail: 'कॉर्पोरेट विवरण',
	    true: 'सच',
	    false: 'झूठा',
	    conference: 'सम्मेलन',
	    lms: 'एलएमएस',
	    presenter: 'प्रस्तुतकर्ता',
	    crm: 'सीआरएम',
	    admin: 'व्यवस्थापक',
	    user: 'उपयोगकर्ता',
	    mix: 'मिश्रण',
	    forward: 'आगे',
	    hybrid: 'संकर',
	    no_users_found: 'कोई उपयोग्कर्ता नहीं मिले',
	    my_contacts: 'मेरे संपर्क',
	    chat: 'बातचीत',
	    mute_unmute: 'म्यूट / अनम्यूट',
	    disable_enable: 'सक्षम अक्षम',
	    start_recoding: 'रिकॉर्डिंग शुरू',
	    expand_contract: 'विस्तार / अनुबंध',
	    no_recent_contacts: 'हाल ही के कोई संपर्क नहीं',
	    add_your_contacts: 'अपने संपर्क जोड़ें',
	    close: 'बंद करे',
	    sandra_smith: 'सैंड्रा स्मिथ',
	    say_something: 'आप कुछ बोलो',
	    video_quality: 'वीडियो की गुणवत्ता',
	    languages: 'भाषा',
	    help: 'मदद',
	    add_contacts: 'संपर्क जोड़ें',
	    attach_file: 'फ़ाइल जोड़ें',
	    search_contacts_add: 'अपनी संपर्क सूची में जोड़ने के लिए संपर्क खोजें',
	    set_language: 'भाषा सेट करें',
	    set_video_qulity: 'सेट विडियो रेसोलुशन ',
	    desc: 'विवरण',
	    push_the_message: 'संदेश भेजें',
	    invite_others: 'दूसरों को तुरंत शामिल करने के लिए निमन्त्रण दे',
	    regenerate: 'फिर से उत्पन्न करे',
	    copy_this_link: 'इस लिंक को कॉपी करे',
	    share_Link: 'लिंक शेयर करें',
	    open_mail_client: 'मेल क्लाइंट खोले',
	    start_conference: 'सम्मेलन प्रारंभ करें',
	    create_new_room: 'नया पाठ्यक्रम बनाएं',
	    add_participants: 'प्रतिभागियों को जोड़ें',
	    search_room: 'पाठ्यक्रम खोजें',
	    my_rooms: 'मेरे पाठ्यक्रम',
	    select_your_room: 'अपने पाठ्यक्रम को चुन ले',
	    presenter_mode: 'प्रस्तुतकर्ता मोड',
	    conference_mode: 'सम्मेलन मोड',
	    valid_untill: 'तब तक वैध',
	    search_rooms: 'पाठ्यक्रम खोजें...',
	    schedules_new: 'शेड्यूल नया',
	    schedule_meeting: 'सुनियोजित बैठक',
	    past_schedules: 'पिछले शेड्यूल',
	    no_schedules: 'कोई शेड्यूल नहीं',
	    create_schedule: 'अनुसूची वर्ग बटन पर क्लिक करके अपना शेड्यूल बनाएं',
	    meeting_name: 'सभा का नाम',
	    please_enter_meeting_name: 'कृपया मीटिंग का नाम दर्ज करें',
	    create_edit_conference: 'बनाएं / संपादित सम्मेलन',
	    choose_anavailable_date: 'एक उपलब्ध तिथि चुनें.',
	    set_start_time: 'प्रारंभ समय सेट करें',
	    // set_end_time:'समाप्ति समय सेट करें',
	    set_duration: 'सेट अवधि',
	    recurring_schedule: 'आवर्ती कार्यक्रम',
	    repeats: 'दोहराता',
	    repeat_every: 'हर दोहराना',
	    set_conference_password: 'अपने सम्मेलन का पासवर्ड सेट करें',
	    invite: 'आमंत्रण',
	    start: 'प्रारंभ',
	    organizer: 'व्यवस्थापक',
	    edit_schedule: 'इस शेड्यूल को संपादित करें',
	    delete_schedule: 'इस शेड्यूल को हटाएं',
	    invite_contacts: 'संपर्कों को आमंत्रित करें',
	    invite_people: 'लोगो को आमंत्रित करें',
	    join_meeting: 'अपने  डेस्कटॉप , टेबलेट  या  स्मार्टफोन  से  मेरी सभा में  शामिल  होने  की  कृपा करे ',
	    conference_room_url: 'निमंत्रण यूआरएल',
	    enter_email: 'ईमेल दर्ज करें',
	    please_enter: 'कृप्या ईमेल आईडी दर्ज करें',
	    enter_meeting_name: 'कृप्या कक्षा नाम दर्ज करें',
	    select_room: 'कृपया पाठ्यक्रम को चुन ले',
	    minimum_date: 'कृपया वर्तमान या भविष्य की तिथि का चयन करें',
	    start_time_greater: 'प्रारंभ समय वर्तमान समय की तुलना में अधिक होना चाहिए।',
	    end_time_greater: 'समाप्ति समय से अधिक समय शुरू होना चाहिए।',
	    video_resolution: 'SIF वीडियो रेसोलुशन के लिए',
	    video_graphics: 'वीडियो ग्राफिक्स ऐरे (वीजीए) के लिए वीडियो रेसोलुशन',
	    hd_video: 'HD वीडियो रेसोलुशन के लिए',
	    full_hd: 'पूर्ण HD वीडियो रेसोलुशन के लिए',
	    online: 'ऑनलाइन',
	    away: 'दूर',
	    offline: 'ऑफलाइन',
	    do_not_disturb: 'परेशान न करें'
	  }, _defineProperty(_messages, 'logout', 'लोग आउट'), _defineProperty(_messages, 'locale', 'लोकले'), _defineProperty(_messages, 'time_zone', 'समय क्षेत्र'), _defineProperty(_messages, 'date_format', 'तारीख प्रारूप'), _defineProperty(_messages, 'time_format', 'समय प्रारूप'), _defineProperty(_messages, 'currency_format', 'मुद्रा प्रारूप'), _defineProperty(_messages, 'prefered_language', 'पसंदीदा भाषा'), _defineProperty(_messages, 'room_topic', 'विषय'), _defineProperty(_messages, 'my_topic', 'मेरा विषय'), _defineProperty(_messages, 'room_topic_manager', 'पाठ्यक्रम विषय प्रबंधक'), _defineProperty(_messages, 'topic_name', 'विषय का नाम'), _defineProperty(_messages, 'description', 'विवरण'), _defineProperty(_messages, 'topic_details', 'विषय में जानकारी'), _defineProperty(_messages, 'upload', 'अपलोड'), _defineProperty(_messages, 'upload_file', 'दस्तावेज अपलोड करें'), _defineProperty(_messages, 'questionnaire', 'प्रश्नावली'), _defineProperty(_messages, 'all_questionnaire', 'सभी प्रश्नावली'), _defineProperty(_messages, 'questionnaire_list', 'प्रश्नावली सूची'), _defineProperty(_messages, 'add_questionnaire', 'प्रश्नावली जोड़े'), _defineProperty(_messages, 'questionnaire_details', 'प्रश्नावली में जानकारी'), _defineProperty(_messages, 'questionnaire_name', 'प्रश्नावली का नाम'), _defineProperty(_messages, 'view_questionnaire', 'देखें प्रश्नावली'), _defineProperty(_messages, 'questions', 'प्रशन'), _defineProperty(_messages, 'questionnaire_details', 'प्रश्नावली विवरण'), _defineProperty(_messages, 'title_questionnaire_details', 'नीचे आपके द्वारा बनाए गए प्रश्नावली के बारे में विवरण दिया गया है'), _defineProperty(_messages, 'selectroom', 'पाठ्यक्रम को चुन ले'), _defineProperty(_messages, 'no_rooms', 'कोई पाठ्यक्रम नहीं बनाया गया है'), _defineProperty(_messages, 'create_a_room', 'एक कोर्स बनाओ'), _defineProperty(_messages, 'requiedField', 'कृपया'), _defineProperty(_messages, 'help_content', 'सहायता सामग्री.'), _defineProperty(_messages, 'no_data_yet', 'अभी तक कोई डेटा नहीं है!'), _defineProperty(_messages, 'add_question', 'प्रश्न जोड़ें'), _defineProperty(_messages, 'title_question_details', 'नीचे इस प्रश्नावली में जोड़े गए सवाल हैं'), _defineProperty(_messages, 'deletefile', 'वर्तमान फ़ाइल हटाएँ'), _defineProperty(_messages, 'edit_questionnaire', 'प्रश्नावली संपादित करें'), _defineProperty(_messages, 'local_settings', 'लोकले सेटिंग'), _defineProperty(_messages, 'edit_corporate', 'संपादित कॉर्पोरेट'), _defineProperty(_messages, 'user_directory', 'प्रयोक्ता निर्देशिका'), _defineProperty(_messages, 'new_corporate', "नया कॉर्पोरेट"), _defineProperty(_messages, 'all_packages', 'सभी पैकेज'), _defineProperty(_messages, 'package_directory', 'पैकेज निर्देशिका'), _defineProperty(_messages, 'new_package', 'नए पैकेज'), _defineProperty(_messages, 'edit_package', 'पैकेज को संपादित करें'), _defineProperty(_messages, 'room_directory', 'पाठ्यक्रम निर्देशिका'), _defineProperty(_messages, 'room_details', 'पाठ्यक्रम का विवरण'), _defineProperty(_messages, 'room_info', 'पाठ्यक्रम जानकारी'), _defineProperty(_messages, 'category_directory', 'श्रेणी निर्देशिका'), _defineProperty(_messages, 'category_info', 'श्रेणी जानकारी'), _defineProperty(_messages, 'smtp_info', 'एसएमटीपी जानकारी'), _defineProperty(_messages, 'ldap_info', 'एलडीएपी जानकारी'), _defineProperty(_messages, 'change_password', 'पासवर्ड बदलें'), _defineProperty(_messages, 'forgot_password', 'पासवर्ड भूल गए'), _defineProperty(_messages, 'reset_prompt', 'पासवर्ड रीसेट'), _defineProperty(_messages, 'forgot_prompt', 'कृपया अपना ईमेल पता दर्ज करें'), _defineProperty(_messages, 'invalid_date', 'कृपया वैध दिनांक चुनें / दर्ज करें'), _defineProperty(_messages, 'upload_url', 'URL अपलोड'), _defineProperty(_messages, 'multiple_delete', 'एकाधिक हटाएँ'), _defineProperty(_messages, 'select_gender', 'लिंग चुनें'), _defineProperty(_messages, 'all_feedback', 'सभी प्रतिक्रिया'), _defineProperty(_messages, 'feedback', 'प्रतिक्रिया'), _defineProperty(_messages, 'user_feedback', 'उपयोगकर्ता प्रतिसाद'), _defineProperty(_messages, 'room_feedback', 'फ़ीडबैक सूची'), _defineProperty(_messages, 'add_your_groups', 'अपने समूह जोड़ें'), _defineProperty(_messages, 'no_recent_groups', 'हाल के कोई समूह नहीं'), _defineProperty(_messages, 'back_to_room', 'पाठ्यक्रम पर वापस'), _defineProperty(_messages, 'add_student', 'छात्र जोड़ें'), _defineProperty(_messages, 'instructor_name', 'प्रशिक्षक का नाम'), _defineProperty(_messages, 'room_student_to_instructor', 'शिक्षक को छात्र जोड़ें'), _defineProperty(_messages, 'search_students', 'छात्रों को खोजे '), _defineProperty(_messages, 'my_groups', 'मेरे समूह'), _defineProperty(_messages, 'no_recent_member', 'हाल के कोई सदस्य नहीं'), _defineProperty(_messages, 'add_your_members', 'अपने सदस्यों को जोड़ें'), _defineProperty(_messages, 'whiteboard', 'व्हाइटबोर्ड'), _defineProperty(_messages, 'screen_share', 'स्क्रीन शेयर'), _defineProperty(_messages, 'hand_raise', 'सवाल जवाब'), _defineProperty(_messages, 'topics', 'विषय'), _defineProperty(_messages, 'topics_list', 'विषय सूची'), _defineProperty(_messages, 'welcome_room', 'कोर्स में आपका स्वागत है:'), _defineProperty(_messages, 'fulltopic', 'अधिक पढ़ें...'), _defineProperty(_messages, 'search_attendees', 'उपस्थिति खोजें'), _defineProperty(_messages, 'no_topics_yet', 'अभी तक कोई विषय नहीं!..'), _defineProperty(_messages, 'list_topics', 'नीचे इस कमरे से संबंधित विषयों की सूची दी गई है।'), _defineProperty(_messages, 'have_schedule', 'शेड्यूल है'), _defineProperty(_messages, 'your_selected_date', 'आपके चयनित तिथियां'), _defineProperty(_messages, 'presenter', 'प्रस्तुतकर्ता'), _defineProperty(_messages, 'telepresence', 'टेलीप्रेसेन्स'), _defineProperty(_messages, 'record', 'रिकॉर्ड करें'), _defineProperty(_messages, 'no_attendees_present', 'कोई उपस्थित नहीं'), _defineProperty(_messages, 'no_user_added', 'इस कोर्स में कोई उपयोगकर्ता जोड़ा नहीं गया'), _defineProperty(_messages, 'content', 'सामग्री'), _defineProperty(_messages, 'files', 'फ़ाइलें'), _defineProperty(_messages, 'all', 'सब'), _defineProperty(_messages, 'image', 'छवि'), _defineProperty(_messages, 'application', 'आवेदन'), _defineProperty(_messages, 'video', 'वीडियो'), _defineProperty(_messages, 'audio', 'ऑडियो'), _defineProperty(_messages, 'zip', 'ज़िप'), _defineProperty(_messages, 'search', 'खोज....'), _defineProperty(_messages, 'upload_media', 'मीडिया अपलोड करें'), _defineProperty(_messages, 'upload_sco', 'SCO अपलोड करें'), _defineProperty(_messages, 'file_name', 'फ़ाइल का नाम'), _defineProperty(_messages, 'openfile', 'डाउनलोड'), _defineProperty(_messages, 'upload_list', 'अपलोड सूची'), _defineProperty(_messages, 'topic_list', 'विषय सूची'), _defineProperty(_messages, 'dd_mm_yyyy', 'DD/MM/YYYY'), _defineProperty(_messages, 'dd_mm_yy', 'DD/MM/YY'), _defineProperty(_messages, 'ddmmyyyy', 'DD-MM-YYYY'), _defineProperty(_messages, 'hh_mm_ss', 'HH:MM:SS'), _defineProperty(_messages, 'usd', 'USD'), _defineProperty(_messages, 'indian_rupee', 'Indian Rupee'), _defineProperty(_messages, 'english', 'English'), _defineProperty(_messages, 'hindi', 'Hindi'), _defineProperty(_messages, 'french', 'French'), _defineProperty(_messages, 'automatic', 'Automatic'), _defineProperty(_messages, 'set', 'Set'), _defineProperty(_messages, 'manage', 'प्रबंधन करें'), _defineProperty(_messages, 'room_chat', 'पाठ्यक्रम चैट'), _defineProperty(_messages, 'ask', 'पूछें'), _defineProperty(_messages, 'ask_question', 'प्रश्न पूछें'), _defineProperty(_messages, 'previous_questions', 'पिछले सवाल'), _defineProperty(_messages, 'post', 'प्रकाशित करें'), _defineProperty(_messages, 'no_questions', 'कोई प्रश्न नहीं'), _defineProperty(_messages, 'answers', 'जवाब'), _defineProperty(_messages, 'make_speaker', 'अनुरोध वीडियो'), _defineProperty(_messages, 'answer_the_question', 'प्रश्न का उत्तर दो'), _defineProperty(_messages, 'reply', 'जवाब देंs'), _defineProperty(_messages, 'your_comment', 'आपकी टिप्पणी'), _defineProperty(_messages, 'post_comment', 'टिप्पणी'), _defineProperty(_messages, 'previous_answers', 'पिछले जवाब'), _defineProperty(_messages, 'comment_on_answer', 'जवाब पर टिप्पणी'), _defineProperty(_messages, 'make_this_user_the_speaker', 'इस अध्यक्ष को स्पीकर बनाओ'), _defineProperty(_messages, 'delete_the_question', 'सवाल हटा दें'), _defineProperty(_messages, 'edit_the_question', 'सवाल संपादित'), _defineProperty(_messages, 'see_all_answers', 'सारे सवालों के जवाब  देखे'), _defineProperty(_messages, 'location', 'स्थान'), _defineProperty(_messages, 'room_chat', 'कोर्स चैट'), _defineProperty(_messages, 'no_questions', 'कोई प्रशन नहीं'), _defineProperty(_messages, 'ask', 'पूछना'), _defineProperty(_messages, 'topics_list', 'विषय सूची'), _defineProperty(_messages, 'media_resources', 'मीडिया संसाधन'), _defineProperty(_messages, 'documents', 'दस्तावेज़'), _defineProperty(_messages, 'questionnaires', 'प्रश्नावली'), _defineProperty(_messages, 'no_questionnaires_yet', 'अभी तक कोई प्रश्नावली नहीं'), _defineProperty(_messages, 'start_date', 'प्रारंभ तिथि'), _defineProperty(_messages, 'end_date', 'अंतिम तिथि'), _defineProperty(_messages, 'choose_question_answers', 'नीचे दिए गए सवालों के सही उत्तर चुनें'), _defineProperty(_messages, 'no_files_yet', 'कोई फाइल नहीं!'), _defineProperty(_messages, 'no_questions_yet', 'अभी तक कोई प्रशन नहीं!'), _defineProperty(_messages, 'not_attempted', 'प्रयास नहीं किया!'), _defineProperty(_messages, 'room_location', 'पाठ्यक्रम स्थान'), _defineProperty(_messages, 'add_college', 'कॉलेज जोड़ें'), _defineProperty(_messages, 'add_workplace', 'कार्यस्थल जोड़ें'), _defineProperty(_messages, 'add_highSchool', 'हाई स्कूल जोड़ें'), _defineProperty(_messages, 'add_professionalSkills', 'व्यावसायिक कौशल जोड़ें'), _defineProperty(_messages, 'work_title', 'काम'), _defineProperty(_messages, 'professionalSkills_title', 'व्यावसायिक कौशल'), _defineProperty(_messages, 'college_title', 'कॉलेज'), _defineProperty(_messages, 'highSchool_title', 'उच्च विद्यालय'), _defineProperty(_messages, 'work_education_timeperiod', 'समय सीमा'), _defineProperty(_messages, 'work_education_desciption', 'विवरण'), _defineProperty(_messages, 'work_education_graduated', 'स्नातक किया हुआ'), _defineProperty(_messages, 'work_education_school', 'स्कूल'), _defineProperty(_messages, 'work_education_concentration', 'एकाग्रता'), _defineProperty(_messages, 'work_education_company', 'कंपनी'), _defineProperty(_messages, 'work_education_position', 'पद'), _defineProperty(_messages, 'work_education_university', 'विश्वविद्यालय'), _defineProperty(_messages, 'work_education_workStatus', 'मैं वर्तमान में यहाँ काम करता हूं'), _defineProperty(_messages, 'work_education_saveChanges', 'परिवर्तनों को सुरक्षित करें'), _defineProperty(_messages, 'work_company_placeholder', 'आपने पहले कहां काम किया है?'), _defineProperty(_messages, 'work_position_placeholder', 'अपकी नौकरी शीर्षक क्या है?'), _defineProperty(_messages, 'college_university_placeholder', 'आपने कौन सी कॉलेज / विश्वविद्यालय में भाग लिया?'), _defineProperty(_messages, 'school_placeholder', 'आपने किस स्कूल में भाग लिया?'), _defineProperty(_messages, 'title_questionnaire_assigned', 'नीचे दिए गए प्रश्नावली इस विषय पर दी गई हैं'), _defineProperty(_messages, 'assign_questionnaire', 'प्रश्नावली असाइन करें'), _defineProperty(_messages, 'add_feedback', 'फ़ीडबैक जोड़ें'), _defineProperty(_messages, 'course_location', 'कोर्स स्थान'), _defineProperty(_messages, 'title_location_details', 'नीचे इस पाठ्यक्रम में जोड़े गए स्थान हैं'), _defineProperty(_messages, 'all_locations', 'सभी स्थान'), _defineProperty(_messages, 'location_directory', 'स्थान निर्देशिका'), _defineProperty(_messages, 'new_location', 'नया स्थान'), _defineProperty(_messages, 'location_info', 'स्थान जानकारी'), _defineProperty(_messages, 'location_name', 'स्थान का नाम'), _defineProperty(_messages, 'location_details', 'स्थान के विवरण'), _defineProperty(_messages, 'location_list', 'स्थान सूची'), _defineProperty(_messages, 'title_created_location_details', 'नीचे आपके द्वारा बनाए गए स्थान के बारे में विवरण दिया गया है।'), _defineProperty(_messages, 'edit_location', 'स्थान संपादित करें'), _defineProperty(_messages, 'locale_directory', 'स्थानीय निर्देशिका'), _defineProperty(_messages, 'share_your_screen', 'अपनी स्क्रीन शेयर करें!'), _defineProperty(_messages, 'city_town', 'शहर / नगर'), _defineProperty(_messages, 'landmark', 'महत्वपूर्ण स्थान के पास'), _defineProperty(_messages, 'contact_information', 'संपर्क जानकारी'), _defineProperty(_messages, 'website_and_social_links', 'वेबसाइट और सामाजिक लिंक'), _defineProperty(_messages, 'basic_information', 'मूलभूत जानकारी'), _defineProperty(_messages, 'add_address', 'पता जोड़ें'), _defineProperty(_messages, 'add_website', 'वेबसाइट जोड़ें'), _defineProperty(_messages, 'add_social_link', 'सामाजिक लिंक जोड़ें'), _defineProperty(_messages, 'add_basic_information', 'बुनियादी जानकारी जोड़ें'), _defineProperty(_messages, 'social_link', 'सामाजिक लिंक'), _defineProperty(_messages, 'birthday', 'जन्मदिन'), _defineProperty(_messages, 'save_changes', 'परिवर्तनों को सुरक्षित करें'), _defineProperty(_messages, 'birth_year', 'जन्म वर्ष'), _defineProperty(_messages, 'add_a_social_links', 'सामाजिक लिंक'), _defineProperty(_messages, 'locale_directory', 'स्थानीय निर्देशिका'), _defineProperty(_messages, 'viewprofile', 'प्रोफाइल देखिये'), _defineProperty(_messages, 'profile', 'प्रोफाइल'), _defineProperty(_messages, 'back', 'पिछली तरफ़'), _defineProperty(_messages, 'sync', 'सिंक'), _defineProperty(_messages, 'pointer', 'सूचक'), _defineProperty(_messages, 'pencil', 'पेंसिल'), _defineProperty(_messages, 'square', 'चौकोर'), _defineProperty(_messages, 'circle', 'वृत्त'), _defineProperty(_messages, 'oval', 'ओवल'), _defineProperty(_messages, 'line', 'लाइन'), _defineProperty(_messages, 'alphabets', 'अल्फाबेट्स '), _defineProperty(_messages, 'erase_all', 'सब मिटा दो'), _defineProperty(_messages, 'fill_background_colors', 'बैकग्राउंड रंग भरें'), _defineProperty(_messages, 'background', 'बैकग्राउंड'), _defineProperty(_messages, 'stroke', 'स्ट्रोक '), _defineProperty(_messages, 'line_color', 'लाइन रंग'), _defineProperty(_messages, 'no_participants', 'कोई प्रतिभागी नहीं'), _defineProperty(_messages, 'no_conference_loaded', 'कोई सम्मेलन लोड नहीं हुआ ...'), _defineProperty(_messages, 'loading', 'लोड हो रहा है'), _defineProperty(_messages, 'loading_please_wait', 'लोड हो रहा है! कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'current_password', 'वर्तमान पासवर्ड'), _defineProperty(_messages, 'new_password', 'नया पासवर्ड'), _defineProperty(_messages, 'retype_new_password', 'नया पासवर्ड दोबारा टाइप करें'), _defineProperty(_messages, 'please_provide_your_valuable_feedback', 'कृपया अपने बहुमूल्य फ़ीडबैक प्रदान करें'), _defineProperty(_messages, 'video_quality', 'वीडियो की गुणवत्ता'), _defineProperty(_messages, 'rate_the_quality_of_the_video_you_experienced', 'आपके द्वारा अनुभवी वीडियो की गुणवत्ता का मूल्यांकन करें'), _defineProperty(_messages, 'audio_quality', 'ध्वनि गुणवत्ता'), _defineProperty(_messages, 'rate_the_quality_of_the_audio_you_experienced', 'आपको अनुभव की गई सामग्री साझा करने की गुणवत्ता का मूल्यांकन करें'), _defineProperty(_messages, 'content_sharing', 'सामग्री शेयरिंग'), _defineProperty(_messages, 'rate_the_quality_of_the_content_sharing_you_experienced', 'आपको अनुभव की गई सामग्री साझा करने की गुणवत्ता का मूल्यांकन करें'), _defineProperty(_messages, 'knowlegeable_session', 'जानकार सत्र'), _defineProperty(_messages, 'rate_how_Knowlegeable_this_session_was', 'इस सत्र के बारे में जानने योग्य कैसे क्रेडेंशियल'), _defineProperty(_messages, 'instructor_skills', 'प्रशिक्षक कौशल'), _defineProperty(_messages, 'rate_how_good_instructor_presented_the_subject', 'रेट कैसे अच्छा प्रशिक्षक विषय प्रस्तुत किया'), _defineProperty(_messages, 'overall_rating', 'समग्र रेटिंग'), _defineProperty(_messages, 'provide_the_overall_rating', 'समग्र रेटिंग प्रदान क्रेडेंशियल'), _defineProperty(_messages, 'your_comments', 'आपकी टिप्पणी'), _defineProperty(_messages, 'your_comments_are_highly_appreciated', 'आपकी टिप्पणियों की अत्यधिक सराहना की जाती है'), _defineProperty(_messages, 'no_thanks', 'जी नहीं, धन्यवाद'), _defineProperty(_messages, 'poor', 'खराब'), _defineProperty(_messages, 'average', 'औसत'), _defineProperty(_messages, 'good', 'अच्छा'), _defineProperty(_messages, 'very_good', 'बहुत अच्छा'), _defineProperty(_messages, 'excellent', 'उत्कृष्ट'), _defineProperty(_messages, 'feedback_submit', 'जमा करें'), _defineProperty(_messages, 'become_host_to_access_bellow_features', 'ब्रश सुविधाओं को एक्सेस करने के लिए होस्ट बनें'), _defineProperty(_messages, 'screen_shared', 'स्क्रीन शेयर्ड!'), _defineProperty(_messages, 'you_are_sharing_your_screen', 'आप अपनी स्क्रीन शेयर कर रहे हैं!'), _defineProperty(_messages, 'ok', 'ठीक है '), _defineProperty(_messages, 'warning', 'चेतावनी'), _defineProperty(_messages, 'delete_question_alert', 'क्या आप सुनिश्चित हैं कि आप प्रश्न को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_category_alert', 'क्या आप सुनिश्चित हैं कि आप श्रेणी को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_corporate_alert', 'क्या आप सुनिश्चित हैं कि आप कॉर्पोरेट को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_location_alert', 'क्या आप सुनिश्चित हैं कि आप स्थान को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_package_alert', 'क्या आप सुनिश्चित हैं कि आप पैकेज को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_address_alert', 'क्या आप सुनिश्चित हैं कि आप पता हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_link_alert', 'क्या आप सुनिश्चित हैं कि आप वेबसाइट लिंक को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_social_link_alert', 'क्या आप सुनिश्चित हैं कि आप सामाजिक लिंक को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_birth_day_alert', 'क्या आप सुनिश्चित हैं कि आप जन्मदिन को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_gender_alert', 'क्या आप सुनिश्चित हैं कि आप लिंग को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_school_alert', 'क्या आप सुनिश्चित हैं कि आप स्कूल को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_college_alert', 'क्या आप सुनिश्चित हैं कि आप कॉलेज को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_workplace_alert', 'क्या आप सुनिश्चित हैं कि आप कार्यस्थल को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_professional_alert', 'क्या आप सुनिश्चित हैं कि आप व्यावसायिक कौशल को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_user_alert', 'क्या आप सुनिश्चित हैं कि आप उपयोगकर्ता को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_room_alert', 'क्या आप सुनिश्चित हैं कि आप पाठ्यक्रम को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_topic_alert', 'क्या आप सुनिश्चित हैं कि आप विषय को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_file_alert', 'क्या आप सुनिश्चित हैं कि आप फाइल को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_all_files_alert', 'क्या आप सुनिश्चित हैं कि आपको ये सारी फाइल्स को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_questionaire_alert', 'क्या आप सुनिश्चित हैं कि आपको ये सारी प्रश्नावली को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_schedule_alert', 'क्या आप सुनिश्चित हैं कि आप शेड्यूल को हटाना चाहते हैं?'), _defineProperty(_messages, 'edit_schedule_alert', 'यदि आप शेड्यूल को संपादित करते हैं तो निमंत्रण लिंक को फिर से भेजने की आवश्यकता है क्या आप वास्तव में संपादित करना चाहते हैं?'), _defineProperty(_messages, 'delete_whiteboardObjects_alert', 'क्या आप सुनिश्चित हैं कि आप हटाना चाहते हैं?'), _defineProperty(_messages, 'logout_confirm_incall', 'आप कॉल में हैं, क्या आप सुनिश्चित हैं कि आप लॉग आउट करना चाहते हैं?'), _defineProperty(_messages, 'author', 'रचयिता'), _defineProperty(_messages, 'selected_codec', 'चुना हुआ कोडेक'), _defineProperty(_messages, 'start_time', 'शुरू समय'), _defineProperty(_messages, 'end_time', 'अंतिम समय'), _defineProperty(_messages, 'delete_room_user_alert', 'क्या आप सुनिश्चित हैं कि आप उपयोगकर्ता को हटाना चाहते हैं?'), _defineProperty(_messages, 'chat_file_alert', 'फ़ाइल का आकार 20MB से कम होना चाहिए!..'), _defineProperty(_messages, 'share_file_alert', 'फ़ाइल का आकार 10MB से कम होना चाहिए!..'), _defineProperty(_messages, 'topic_file_alert', 'फ़ाइल का आकार 20MB से कम होना चाहिए!..'), _defineProperty(_messages, 'url_alert', 'एक URL दर्ज करें!..'), _defineProperty(_messages, 'valid_url_alert', 'वैध URL नहीं!..'), _defineProperty(_messages, 'unassign_question_alert', 'क्या आप सुनिश्चित हैं कि आप प्रश्नावली को अनसिनित करना चाहते हैं?'), _defineProperty(_messages, 'generate_meeting_alert', 'इस कोर्स के लिए पहले से ही निर्धारित मीटिंग्स क्या आप दोबारा राज करना चाहते हैं?'), _defineProperty(_messages, 'questionnaire_alert', 'प्रश्नावली अभी तक शुरू नहीं हुई!..'), _defineProperty(_messages, 'delete_group_alert', 'क्या आप सुनिश्चित हैं कि आप समूह को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_member_group_alert', 'क्या आप सुनिश्चित हैं कि आप समूह के सदस्य को हटाना चाहते हैं?'), _defineProperty(_messages, 'submitted_by', 'द्वारा प्रस्तुत'), _defineProperty(_messages, 'user_name', 'उपयोगकर्ता नाम'), _defineProperty(_messages, 'over_all_rating', 'समग्र रेटिंग'), _defineProperty(_messages, 'knowlegable_session', 'जानकार सत्र'), _defineProperty(_messages, 'user_comment', 'उपयोगकर्ता टिप्पणी'), _defineProperty(_messages, 'user_feedback_data', 'प्रतिक्रिया'), _defineProperty(_messages, 'individual_feedback', 'उपयोगकर्ता द्वारा सबमिट किए गए फ़ीडबैक विवरण'), _defineProperty(_messages, 'feedback_details', 'व्यक्तिगत फ़ीडबैक विवरण'), _defineProperty(_messages, 'feedback_submitted_successfully', 'सफलतापूर्वक सबमिट की गई प्रतिक्रिया'), _defineProperty(_messages, 'submitted', 'प्रस्तुत'), _defineProperty(_messages, 'edit_question', 'प्रश्न संपादित करें'), _defineProperty(_messages, 'question', 'प्रश्न'), _defineProperty(_messages, 'type', 'प्रकार'), _defineProperty(_messages, 'mark_correct_answer', 'दो जवाब विकल्पों को दर्ज करें और सही उत्तर दर्ज करें'), _defineProperty(_messages, 'select_type', 'प्रकार चुनें'), _defineProperty(_messages, 'remove', 'हटाना'), _defineProperty(_messages, 'answer_choice', 'उत्तर विकल्प'), _defineProperty(_messages, 'delete_this_location', 'इस स्थान को हटा दें'), _defineProperty(_messages, 'no_locations_yet', 'अभी तक कोई स्थान नहीं!!!'), _defineProperty(_messages, 'enter_the_answer_choices_and_mark_which_answer_is_correct', 'उत्तर के विकल्प दर्ज करें, और चिह्नित करें कि कौन सा उत्तर सही है'), _defineProperty(_messages, 'transport_title', 'ट्रांसपोर्ट?'), _defineProperty(_messages, 'uploadtotopic_title', 'इस विषय में फाइल अपलोड करने के लिए सामग्री प्रकार चुनें'), _defineProperty(_messages, 'file_title', 'फ़ाइलें'), _defineProperty(_messages, 'media_title', 'मीडिया'), _defineProperty(_messages, 'sco_title', 'ज़िप'), _defineProperty(_messages, 'youtube_url_title', 'यूट्यूब यूआरएल:'), _defineProperty(_messages, 'upload_title', 'अपलोड करें'), _defineProperty(_messages, 'filetypes_title', 'फाइल के प्रकार :'), _defineProperty(_messages, 'youtube_url_placeholder', 'पेस्ट करें लिंक यहाँ जैसे: https://www.youtube.com/channel/UCdPJhu2eYCXIDo5hcTDw0_g'), _defineProperty(_messages, 'candidate_name', 'प्रत्याशी का नाम'), _defineProperty(_messages, 'questionnaire_result', 'परिणाम'), _defineProperty(_messages, 'result_details', 'परिणाम विवरण'), _defineProperty(_messages, 'result_list', 'परिणाम सूची'), _defineProperty(_messages, 'answer_sheet', 'उत्तर पत्रिका'), _defineProperty(_messages, 'answer_sheet_details', 'उत्तर पत्र विवरण'), _defineProperty(_messages, 'grade', 'ग्रेड'), _defineProperty(_messages, 'open', 'खुला'), _defineProperty(_messages, 'close', 'बंद करे'), _defineProperty(_messages, 'select_location', 'स्थान चुनें'), _defineProperty(_messages, 'remove_user_from_room', 'कोर्स से उपयोगकर्ता को निकालें'), _defineProperty(_messages, 'add_user', 'उपयोगकर्ता जोड़ें'), _defineProperty(_messages, 'add_student', 'छात्र जोड़ें'), _defineProperty(_messages, 'view_students', 'छात्र देखें'), _defineProperty(_messages, 'list_results', 'सूची परिणाम'), _defineProperty(_messages, 'view_edit_questionaire_from_topic', 'विषय से प्रश्नावली देखें / संपादित करें'), _defineProperty(_messages, 'unassign_questionnaire_from_topic', 'विषय से प्रश्नावली अनियंत्रित करें'), _defineProperty(_messages, 'remove_question_from_questionnaire', 'प्रश्नावली से प्रश्न निकालें'), _defineProperty(_messages, 'view_edit_question_from_questionnaire', 'प्रश्नावली से प्रश्न देखें / संपादित करें'), _defineProperty(_messages, 'participants_group', 'प्रतिभागी समूह'), _defineProperty(_messages, 'participants_list', 'छात्रों की सूची'), _defineProperty(_messages, 'enter_group_name', 'समूह नाम दर्ज करें'), _defineProperty(_messages, 'not_allowed', 'अनुमति नहीं हैं'), _defineProperty(_messages, 'no_questions_added_to_this_questionnaire', 'इस प्रश्नावली में कोई प्रश्न नहीं जोड़ा गया'), _defineProperty(_messages, 'feature_info', 'सुविधा जानकारी'), _defineProperty(_messages, 'features', 'विशेषताएं'), _defineProperty(_messages, 'no_of_rooms', 'पाठ्यक्रमों की संख्या'), _defineProperty(_messages, 'no_of_topics', 'विषयों की संख्या'), _defineProperty(_messages, 'server_recording', 'सर्वर रिकॉर्डिंग'), _defineProperty(_messages, 'client_recording', 'क्लाइंट रिकॉर्डिंग'), _defineProperty(_messages, 'video_conference', 'वीडियो सम्मेलन'), _defineProperty(_messages, 'continuous_presence', 'सतत उपस्थिति की संख्या'), _defineProperty(_messages, 'edit_group_name', 'समूह का नाम संपादित करें'), _defineProperty(_messages, 'add_participants_group', 'छात्रों को समूह में जोड़ें'), _defineProperty(_messages, 'search_participants', 'खोज छात्रों'), _defineProperty(_messages, 'delete_participant_alert', 'क्या आप इस छात्र को निकालना चाहते हैं?'), _defineProperty(_messages, 'group_name', 'समूह का नाम'), _defineProperty(_messages, 'created_by', 'द्वारा बनाई गई'), _defineProperty(_messages, 'group_participants', 'छात्र सूची'), _defineProperty(_messages, 'title_groupParticipants_details', 'नीचे इस समूह में छात्रों को जोड़ा गया है'), _defineProperty(_messages, 'please_enter_group_name', 'समूह का नाम रिक्त नहीं हो सकताs'), _defineProperty(_messages, 'please_enter_participant_name', 'कृपया छात्र का चयन करें'), _defineProperty(_messages, 'participants_group_list', 'प्रतिभागी समूह सूची'), _defineProperty(_messages, 'room_configuration', 'पाठ्यक्रम कॉन्फ़िगरेशन'), _defineProperty(_messages, 'configure_feedback', 'प्रतिक्रिया कॉन्फ़िगर करें'), _defineProperty(_messages, 'configration', 'विन्यास'), _defineProperty(_messages, 'feedbackType_title', 'प्रतिक्रिया के प्रकार'), _defineProperty(_messages, 'codecType_title', 'कोडेक प्रकार'), _defineProperty(_messages, 'enableLive_title', 'लाइव सक्षम करें'), _defineProperty(_messages, 'assign_questionaire', 'प्रश्नावली असाइन करें'), _defineProperty(_messages, 'delete_SMTPSettings_alert', 'क्या आप वाकई इस SMTP सेटिंग को हटाना चाहते हैं?'), _defineProperty(_messages, 'time_limit', 'समय सीमा'), _defineProperty(_messages, 'no_time_limitations', 'कोई समय सीमाएं नहीं'), _defineProperty(_messages, 'delete_LDAPSettings_alert', 'क्या आप वाकई इस LDAP सेटिंग को हटाना चाहते हैं?'), _defineProperty(_messages, 'previous', 'पिछला'), _defineProperty(_messages, 'next', 'अगला'), _defineProperty(_messages, 'enable_swot', 'स्वाॉट सक्षम करें'), _defineProperty(_messages, 'select_an_answer_otherwise_it_will_not_be_considered_for_evaluation', 'एक जवाब चुनें, अन्यथा इसे मूल्यांकन के लिए नहीं माना जाएगा'), _defineProperty(_messages, 'back_to_uploadlist', 'अपलोड सूची पर वापस जाएं'), _defineProperty(_messages, 'no_users_found', 'कोई उपयोगकर्ता नहीं मिला'), _defineProperty(_messages, 'select_role', 'भूमिका का चयन करें'), _defineProperty(_messages, 'createdby', 'के द्वारा बनाई गई'), _defineProperty(_messages, 'count', 'कुल'), _defineProperty(_messages, 'please_enter_the_question', 'कृपया प्रश्न दर्ज करें'), _defineProperty(_messages, 'invalid_mail_id', 'अमान्य मेल आईडी'), _defineProperty(_messages, 'accept', 'स्वीकार'), _defineProperty(_messages, 'reject', 'अस्वीकार'), _defineProperty(_messages, 'request_pending', 'अनुरोध अपूर्ण है'), _defineProperty(_messages, 'start_chating', 'चाट शुरू करो ....'), _defineProperty(_messages, 'export_users', 'उपयोगकर्ताओं को निर्यात करें'), _defineProperty(_messages, 'import_users', 'उपयोगकर्ताओं को आयात करें'), _defineProperty(_messages, 'import_format', 'आयात प्रारूप'), _defineProperty(_messages, 'pdf_view', 'पीडीएफ देखें'), _defineProperty(_messages, 'uploading_please_wait', 'अपलोड हो रहा है! कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'host_access', 'होस्ट प्रवेश'), _defineProperty(_messages, 'become_host', 'होस्ट बनें'), _defineProperty(_messages, 'become_a_host', 'होस्ट बनें'), _defineProperty(_messages, 'request_access_share', 'स्क्रीन / दस्तावेज़ साझा करने के लिए अभिगम का अनुरोध'), _defineProperty(_messages, 'revoke', 'वापस लेना'), _defineProperty(_messages, 'enter_host_password', 'होस्ट पासवर्ड दर्ज करें'), _defineProperty(_messages, 'host_error', 'गलत होस्ट पासवर्ड, कृपया पुनः प्रयास करें'), _defineProperty(_messages, 'revoke_error', 'आप पहले से ही होस्ट हैं क्या आप निरस्त करना चाहते हैं ...?'), _defineProperty(_messages, 'delete_this_group', 'इस समूह की याचिका को हटा दें'), _defineProperty(_messages, 'remove_participants_from_group', 'समूह से छात्र को हटा दें'), _defineProperty(_messages, 'confirm_password', 'पासवर्ड की पुष्टि करें'), _defineProperty(_messages, 'no_data_found', 'कोई डेटा नहीं मिला'), _defineProperty(_messages, 'invalid_group_name', 'अमान्य समूह का नाम'), _defineProperty(_messages, 'no_groups_found', 'कोई ग्रुप्स नहीं मिलें'), _defineProperty(_messages, 'select_language', 'भाषा चुनिए'), _defineProperty(_messages, 'no_data_found', 'कोई डेटा नहीं मिला'), _defineProperty(_messages, 'start_class', 'कक्षा प्रारंभ करें'), _defineProperty(_messages, 'join_class', 'कक्षा में शामिल हों'), _defineProperty(_messages, 'create_a_class', 'अनुसूची वर्ग'), _defineProperty(_messages, 'upcoming_classes', 'आगामी अनुसूची'), _defineProperty(_messages, 'past_classes', 'पिछली अनुसूची'), _defineProperty(_messages, 'have_class', 'पहले से ही एक अनुसूची है'), _defineProperty(_messages, 'create_edit_class', 'कक्षा बनाएं / संपादित करें'), _defineProperty(_messages, 'class_name', 'कक्षा का नाम'), _defineProperty(_messages, 'please_enter_class_name', 'कृपया वर्ग का नाम दर्ज करें'), _defineProperty(_messages, 'my_classes', 'मेरी कक्षाएं'), _defineProperty(_messages, 'set_class_password', 'अपना क्लास पासवर्ड सेट करें'), _defineProperty(_messages, 'edit_class', 'इस कक्षा को संपादित करें'), _defineProperty(_messages, 'delete_class', 'इस कक्षा को हटाएं'), _defineProperty(_messages, 'edit_class_alert', 'यदि आप कक्षा को संपादित करते हैं तो निमंत्रण लिंक को फिर से भेजा जाना चाहिए। क्या आप वास्तव में संपादित करना चाहते हैं?'), _defineProperty(_messages, 'delete_class_alert', 'क्या आप वाकई इस कक्षा को हटाना चाहते हैं?'), _defineProperty(_messages, 'set_desc', 'विवरण सेट करें'), _defineProperty(_messages, 'submitted_on', 'सबमिट करने की तारीख'), _defineProperty(_messages, 'room_options', 'कक्षा विकल्प'), _defineProperty(_messages, 'select', 'चयन'), _defineProperty(_messages, 'file', 'फ़ाइल'), _defineProperty(_messages, 'add_topics', 'पाठ्यक्रम को विषय जोड़ें'), _defineProperty(_messages, 'room_assignments', 'कार्य'), _defineProperty(_messages, 'assignment_list', 'कार्य सूची'), _defineProperty(_messages, 'assignment_details', 'कार्य जानकारी'), _defineProperty(_messages, 'assignment_name', 'कार्य का नाम'), _defineProperty(_messages, 'room_assignment_manager', 'पाठ्यक्रम कार्य प्रबंधक'), _defineProperty(_messages, 'list_assignments', 'इस कोर्स से संबंधित कार्य की सूची नीचे दी गई है'), _defineProperty(_messages, 'no_assignments_yet', 'अभी तक कोई कार्य नहीं है!..'), _defineProperty(_messages, 'submissions', 'प्रस्तुतियाँ'), _defineProperty(_messages, 'submission_list', 'प्रस्तुत सूची'), _defineProperty(_messages, 'student_name', 'छात्र का नाम'), _defineProperty(_messages, 'back_to_assignments', 'वापस कार्य पर'), _defineProperty(_messages, 'become_host_to_share_your_document', 'अपने दस्तावेज़ को साझा करने के लिए होस्ट बनें'), _defineProperty(_messages, 'share_your_document', 'अपनी दस्तावेज़ साझा करें!'), _defineProperty(_messages, 'share_your_screen_document', 'अपनी स्क्रीन / दस्तावेज़ साझा करें!'), _defineProperty(_messages, 'room_feedback_title', 'प्रतिक्रिया'), _defineProperty(_messages, 'manage_assignments', 'कार्य प्रबंधित करें'), _defineProperty(_messages, 'manage_questionnaire', 'प्रश्नावली प्रबंधित करें'), _defineProperty(_messages, 'plagiarism', 'साहित्यिक चोरी'), _defineProperty(_messages, 'drag', 'खींचें'), _defineProperty(_messages, 'delete_assignment_alert', 'सभी सबमिशन भी हटा दिए जाएंगे, क्या आप वाकई यह कार्य हटाना चाहते हैं?'), _defineProperty(_messages, 'refresh_schedules', 'रीफ्रेश अनुसूचियों'), _defineProperty(_messages, 'schedules', 'अनुसूचियों'), _defineProperty(_messages, 'refresh_rooms', 'रीफ्रेश पाठ्यक्रम'), _defineProperty(_messages, 'creating_please_wait', 'बना रहे हैं! कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'updating_please_wait', 'अद्यतन कर रहे हैं! कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'enable', 'सक्षम'), _defineProperty(_messages, 'publish', 'प्रकाशित करना'), _defineProperty(_messages, 'categories', 'श्रेणियाँ है.'), _defineProperty(_messages, 'corporates', 'कॉरपोरेट्स है.'), _defineProperty(_messages, 'feedbacks', 'प्रतिक्रिया है.'), _defineProperty(_messages, 'locations', 'स्थानों है.'), _defineProperty(_messages, 'packages', 'पैकेजेस है.'), _defineProperty(_messages, 'participants', 'समूह में भाग लेने वाले'), _defineProperty(_messages, 'rooms', 'पाठ्यक्रम है.'), _defineProperty(_messages, 'users', 'उपयोगकर्ताओं है.'), _defineProperty(_messages, 'list_topic', 'विषय है.'), _defineProperty(_messages, 'list_files', 'फ़ाइलें है.'), _defineProperty(_messages, 'list_certificates', 'प्रमाणपत्रों की है.'), _defineProperty(_messages, 'results', 'परिणाम है.'), _defineProperty(_messages, 'polls', 'सर्वेक्षण'), _defineProperty(_messages, 'poll_list', 'सर्वेक्षण सूची'), _defineProperty(_messages, 'list_polls', 'इस कमरे से संबंधित सर्वेक्षण की सूची नीचे दी गई है।'), _defineProperty(_messages, 'no_polls_yet', 'अभी तक कोई सर्वेक्षण नहीं! ..'), _defineProperty(_messages, 'package_validFrom', 'से वैध'), _defineProperty(_messages, 'create_poll', 'सर्वेक्षण बनाएं'), _defineProperty(_messages, 'option', 'विकल्प'), _defineProperty(_messages, 'package_validFrom', 'से वैध'), _defineProperty(_messages, 'published', 'प्रकाशित'), _defineProperty(_messages, 'publish', 'प्रकाशित करना'), _defineProperty(_messages, 'update_poll', 'सर्वेक्षण अद्यतन करें'), _defineProperty(_messages, 'delete_poll_alert', 'क्या आप वाकई इस सर्वेक्षण को हटाना चाहते हैं?'), _defineProperty(_messages, 'delete_poll', 'मतदान हटाएं'), _defineProperty(_messages, 'broadcast', 'समाचार प्रसारण'), _defineProperty(_messages, 'broadcast_news_list', 'प्रसारण समाचार सूची'), _defineProperty(_messages, 'no_broadcast', 'कोई प्रसारण समाचार नहीं'), _defineProperty(_messages, 'broadcast_list', 'प्रसारण सूची'), _defineProperty(_messages, 'delete_poll', 'सर्वेक्षण हटाएं'), _defineProperty(_messages, 'no_submittions_yet', 'अभी तक कोई प्रस्तुतियाँ नहीं है!..'), _defineProperty(_messages, 'list_poll_submissions', 'नीचे इस सर्वेक्षण से संबंधित प्रस्तुतियाँ की सूची है।'), _defineProperty(_messages, 'poll_analysis', 'नीचे इस सर्वेक्षण से संबंधित विश्लेषण चार्ट है'), _defineProperty(_messages, 'delete_broadcast_alert', 'क्या आप वाकई इस प्रसारण समाचार को हटाना चाहते हैं?'), _defineProperty(_messages, 'view_comments', 'टिप्पणियाँ'), _defineProperty(_messages, 'view_all_comments', 'सभी टिप्पणियां देखें'), _defineProperty(_messages, 'edit_comment', 'टिप्पणी संपादित करें'), _defineProperty(_messages, 'delete_comment', 'टिप्पणी निकालें'), _defineProperty(_messages, 'reply_on_comment', 'टिप्पणी पर उत्तर दें'), _defineProperty(_messages, 'reply_comment', 'जवाब दें'), _defineProperty(_messages, 'previous_comments', 'पिछली टिप्पणी'), _defineProperty(_messages, 'comment_on_broadcast_news', 'प्रसारण समाचार पर टिप्पणी'), _defineProperty(_messages, 'your_reply', "टिप्पणी पर उत्तर दें"), _defineProperty(_messages, 'delete_broadcast_alert', 'क्या आप वाकई इस प्रसारण को हटाना चाहते हैं?'), _defineProperty(_messages, 'refresh_polls', 'रीफ्रेश सर्वेक्षण'), _defineProperty(_messages, 'request_for_share_document', 'शेयर स्क्रीन / दस्तावेज़ के लिए अनुरोध'), _defineProperty(_messages, 'studentId', 'छात्र आईडी'), _defineProperty(_messages, 'view_result', 'परिणाम देखें'), _defineProperty(_messages, 'submit_poll', 'सर्वेक्षण जमा करें'), _defineProperty(_messages, 'attendance', 'उपस्थिति'), _defineProperty(_messages, 'please_enter_the_broadcast', 'कृपया प्रसारण समाचार दर्ज करें'), _defineProperty(_messages, 'total_attendance', 'कुल उपस्थिति'), _defineProperty(_messages, 'student_list', 'छात्र सूची'), _defineProperty(_messages, 'class_list', 'कक्षा सूची'), _defineProperty(_messages, 'attendance', 'उपस्थिति'), _defineProperty(_messages, 'expiry_Date', 'समाप्ति तिथि'), _defineProperty(_messages, 'students', 'students'), _defineProperty(_messages, 'overall', 'OverAll'), _defineProperty(_messages, 'detailed', 'Detailed'), _defineProperty(_messages, 'classes', 'classes'), _defineProperty(_messages, 'view_attendance', 'उपस्थिति देखें'), _defineProperty(_messages, 'assignment_reports', 'असाइनमेंट रिपोर्ट'), _defineProperty(_messages, 'assignment_list', 'असाइनमेंट सूची'), _defineProperty(_messages, 'my_reports', 'मेरी रिपोर्ट'), _defineProperty(_messages, 'created_date', 'रचना तिथि'), _defineProperty(_messages, 'expiry_date', 'समाप्ति तिथि'), _defineProperty(_messages, 'assignment', 'असाइनमेंट'), _defineProperty(_messages, 'test_reports', 'जाँच रिपोर्ट'), _defineProperty(_messages, 'active_users', 'सक्रिय उपयोगकर्ता'), _defineProperty(_messages, 'invalid_enddate', 'अमान्य समाप्ति तिथि'), _defineProperty(_messages, 'select_the_days', 'कृपया दिन चुनें'), _defineProperty(_messages, 'select_the_endson', 'कृपया समाप्त होने का चयन करें'), _defineProperty(_messages, 'select_occurence', 'कृपया नंबर दर्ज करें घटनाओं की'), _defineProperty(_messages, 'current_day', 'वर्तमान दिन'), _defineProperty(_messages, 'recurring', 'आवर्ती'), _defineProperty(_messages, 'current_recurring', 'वर्तमान दिन / पुनरावर्ती हटाएं'), _defineProperty(_messages, 'delete_current_recurring', 'क्या आप वर्तमान दिन (या) पुनरावर्ती शेड्यूल को हटाना चाहते हैं?'), _defineProperty(_messages, 'title_user_details', 'नीचे आपके द्वारा बनाए गए उपयोगकर्ता के विवरण दिए गए हैं'), _defineProperty(_messages, 'registration_prompt', 'कृपया पंजीकरण के लिए नीचे फ़ील्ड भरें'), _defineProperty(_messages, 'institute_name', 'कृपया संस्थान नाम दर्ज करें'), _defineProperty(_messages, 'please_enter_institute_name', 'कृपया संस्थान नाम दर्ज करें'), _defineProperty(_messages, 'inactive_user', 'पंजीकृत उपयोगकर्ता'), _defineProperty(_messages, 'activate_user', 'सक्रिय उपयोगकर्ता'), _defineProperty(_messages, 'active_user', 'सक्रिय उपयोगकर्ता'), _defineProperty(_messages, 'inactive_user_list', 'सक्रिय उपयोगकर्ता सूची में'), _defineProperty(_messages, 'Marks', 'अंक'), _defineProperty(_messages, 'total_marks', 'कुल अंक'), _defineProperty(_messages, 'multiple_choice_answers', 'एकाधिक विकल्प जवाब'), _defineProperty(_messages, 'multiple_responsive_answers', 'एकाधिक उत्तरदायी उत्तर'), _defineProperty(_messages, 'true_false', 'हां या नहीं जवाब'), _defineProperty(_messages, 'active_users_list', 'सक्रिय उपयोगकर्ता सूची'), _defineProperty(_messages, 'course_attendance', 'कोर्स की उपस्थिति'), _defineProperty(_messages, 'true_false', 'हां या नहीं जवाब'), _defineProperty(_messages, 'show_result', 'परिणाम दिखाओ'), _defineProperty(_messages, 'true_false', 'हां या नहीं जवाब'), _defineProperty(_messages, 'student_reg_form', 'छात्र पंजीकरण फॉर्म'), _defineProperty(_messages, 'already_registered_user', 'पहले से पंजीकृत उपयोगकर्ता?'), _defineProperty(_messages, 'i_agree', 'मैं सहमत हूं'), _defineProperty(_messages, 'terms_conditions', 'नियम और शर्तें'), _defineProperty(_messages, 'grade_configuration', 'ग्रेड कॉन्फ़िगरेशन'), _defineProperty(_messages, 'title_grade_configuration', 'प्रश्नावली ग्रेड को यहां कॉन्फ़िगर करें.'), _defineProperty(_messages, 'title_view_grade_configuration', 'नीचे दिए गए ग्रेड हैं जो प्रश्नावली परिणाम में दिखाई देंगे।'), _defineProperty(_messages, 'fullcalender', 'पूर्ण कैलेंडर'), _defineProperty(_messages, 'select_duration', 'प्लस अवधि का चयन करें'), _defineProperty(_messages, 'set_hours', 'सेट घंटे'), _defineProperty(_messages, 'set_minutes', 'सेट मिनट'), _defineProperty(_messages, 'checkin_time', 'प्रवेश का समय'), _defineProperty(_messages, 'checkout_time', 'जाने का समय'), _defineProperty(_messages, 'topic_report', 'विषय रिपोर्ट '), _defineProperty(_messages, 'course_view', 'पाठ्यक्रम देखें'), _defineProperty(_messages, 'topic_name', 'विषय का नाम'), _defineProperty(_messages, 'viewed_topics', 'देखा गया विषय'), _defineProperty(_messages, 'topic_viewed_users', 'विषय देखें उपयोगकर्ता'), _defineProperty(_messages, 'description', 'विवरण'), _defineProperty(_messages, 'status', 'स्थिति'), _defineProperty(_messages, 'deleted_user', 'हटाया हुआ उपयोगकर्ता'), _defineProperty(_messages, 'active', 'सक्रिय'), _defineProperty(_messages, 'registered', 'दर्ज कराई'), _defineProperty(_messages, 'deleted', 'हटाए गए'), _defineProperty(_messages, 'deleted_list', 'हटाए गए उपयोगकर्ता'), _defineProperty(_messages, 'active_user_list', 'सक्रिय उपयोगकर्ता'), _defineProperty(_messages, 'registered_user_list', 'पंजीकृत उपभोक्ता'), _defineProperty(_messages, 'skip', 'छोड़ें'), _defineProperty(_messages, 'all_participants_groups', 'सभी प्रतिभागी समूह'), _defineProperty(_messages, 'from', 'से'), _defineProperty(_messages, 'to', 'तक'), _defineProperty(_messages, 'no_replies', 'जवाब नहीं'), _defineProperty(_messages, 'no_answers', 'कोई जवाब नहीं'), _defineProperty(_messages, 'summary', 'सारांश'), _defineProperty(_messages, 'link_is_either_expired_or_broken', 'लिंक या तो समाप्त हो या टूटा हुआ है'), _defineProperty(_messages, 'room_students', 'पाठ्यक्रम के छात्रों'), _defineProperty(_messages, 'topic_content', 'विषय सामग्री'), _defineProperty(_messages, 'you_are_in_mange_users_panel', 'आप उपयोगकर्ता पैनल प्रबंधित कर रहे हैं'), _defineProperty(_messages, 'work_edu_details', 'कार्य और शिक्षा देखें'), _defineProperty(_messages, 'view_contact_details', 'संपर्क देखें'), _defineProperty(_messages, 'view_locale', 'लोकले देखें'), _defineProperty(_messages, 'you_are_in_active_users_panel', 'आप सक्रिय उपयोगकर्ता पैनल में हैं'), _defineProperty(_messages, 'you_are_in_my_profile_panel', 'आप मेरे खाते के पैनल में हैं'), _defineProperty(_messages, 'you_are_in_package_list_panel', 'आप पैकेज प्रबंधन पैनल में हैं'), _defineProperty(_messages, 'you_are_in_corporate_list_panel', 'आप कॉर्पोरेट पैनल में हैं'), _defineProperty(_messages, 'you_are_in_category_list_panel', 'आप श्रेणी प्रबंधन पैनल में हैं'), _defineProperty(_messages, 'you_are_in_room_list_panel', 'आप कोर्स प्रबंधन पैनल में हैं'), _defineProperty(_messages, 'you_are_in_location_list_panel', 'आप स्थान पैनल में हैं'), _defineProperty(_messages, 'you_are_in_participant_group_list_panel', 'आप प्रतिभागी समूह पैनल में हैं'), _defineProperty(_messages, 'you_are_in_questionarie_list_panel', 'आप प्रश्नावली पैनल में हैं'), _defineProperty(_messages, 'edit_grade_configuaration', 'ग्रेड कॉन्फिगरेशन संपादित करें'), _defineProperty(_messages, 'You_are_in_reports_list_panel', 'आप रिपोर्ट पैनल में हैं'), _defineProperty(_messages, 'add_assignment', 'असाइनमेंट जोड़ें'), _defineProperty(_messages, 'attendance_reports', 'उपस्थिति रिपोर्टें'), _defineProperty(_messages, 'users_activity', 'उपयोगकर्ता गतिविधि'), _defineProperty(_messages, 'Update', "संपादित करें"), _defineProperty(_messages, 'blocked', 'अवरोधित'), _defineProperty(_messages, 'guest', 'अतिथि'), _defineProperty(_messages, 'requiedFieldText', 'कृपया दर्ज करें'), _defineProperty(_messages, 'requiedFieldDate', 'कृपया चुने'), _defineProperty(_messages, 'validInputData', 'कृपया वैध दर्ज करें'), _defineProperty(_messages, 'select_dropdown', 'चुने'), _defineProperty(_messages, 'save_publish', 'बचाना & प्रकाशित करना'), _defineProperty(_messages, 'requested_for_share_document_please_wait', 'शेयर स्क्रीन / दस्तावेज़ के लिए अनुरोध किया, कृपया प्रतीक्षा करें .....'), _defineProperty(_messages, 'confirm_unassign_questionnaire_topics', 'क्या आप वाकई प्रश्नावली को अनसाइंड करना चाहते हैं क्योंकि इस प्रश्नावली के आधार पर परिणाम हैं?'), _defineProperty(_messages, 'connect_with_social_link', 'सामाजिक लिंक से जुड़ें'), _defineProperty(_messages, 'requested_for_share_document_please_wait', 'शेयर स्क्रीन / दस्तावेज़ के लिए अनुरोध किया, कृपया प्रतीक्षा करें .....'), _defineProperty(_messages, 'update_publish', 'संपादित & प्रकाशित करना'), _defineProperty(_messages, 'invalid_file_format', 'अमान्य फाइल प्रारूप'), _defineProperty(_messages, 'confirm_delete_question_from_questionnaire', 'क्या आप प्रश्नावली से प्रश्न हटाना चाहते हैं क्योंकि प्रश्न के आधार पर परिणाम होते हैं?'), _defineProperty(_messages, 'stop_screen_share', 'स्क्रीन शेयर बंद करें'), _defineProperty(_messages, 'pause_screen_share', 'स्क्रीन शेयर रोकें'), _defineProperty(_messages, 'play_screen_share', 'स्क्रीन साझा प्ले करें'), _defineProperty(_messages, 'add_students', 'छात्र जोड़ें'), _defineProperty(_messages, 'confirm_submit_alert', 'क्या आप वाकई सबमिट करने के इच्छुक हैं?'), _defineProperty(_messages, 'user_reg_form', 'उपयोगकर्ता पंजीकरण फॉर्म'), _defineProperty(_messages, 'registration_please_wait', 'पंजीकरण कर रहा है, कृपया प्रतीक्षा करें'), _defineProperty(_messages, 'student_data_not_found', 'छात्र डेटा नहीं मिला'), _defineProperty(_messages, 'individual_user', 'व्यक्तिगत उपयोगकर्ता'), _defineProperty(_messages, 'group', 'समूह'), _defineProperty(_messages, 'add_groups', 'समूह जोड़ें'), _defineProperty(_messages, 'edit_room', 'कोर्स संपादित करें'), _defineProperty(_messages, 'edit_profie', 'प्रोफाइल संपादित करें'), _defineProperty(_messages, 'create_topic', 'विषय बनाएँ'), _defineProperty(_messages, 'new_questionnaire', 'नई प्रश्नावली'), _defineProperty(_messages, 'student_assignment_list_title', 'आपके द्वारा सबमिट किए गए कार्य'), _defineProperty(_messages, 'evaluation_not_yet_done', 'मूल्यांकन अभी तक नहीं किया'), _defineProperty(_messages, 'instructor_feedback', "प्रशिक्षक का फीडबैक"), _defineProperty(_messages, 'total_assignment_marks', 'कुल असाइनमेंट मार्क्स'), _defineProperty(_messages, 'scored_marks', 'स्कोरांकित मार्क्स'), _defineProperty(_messages, 'add_another_field', 'अन्य फ़ील्ड जोड़ें'), _defineProperty(_messages, 'maximum_marks', 'अधिकतम अंक'), _defineProperty(_messages, 'total_score', 'कुल स्कोर'), _defineProperty(_messages, 'load_more', 'और लोड करें..'), _defineProperty(_messages, 'note', 'टिप्पणी'), _defineProperty(_messages, 'default', 'पूर्व निर्धारित'), _defineProperty(_messages, 'proxy', 'प्रतिनिधि'), _defineProperty(_messages, 'quality', 'गुणवत्ता'), _defineProperty(_messages, 'best_quality', 'सर्वोत्तम गुणवत्ता'), _defineProperty(_messages, 'better_quality', 'बेहतर गुणवत्ता'), _defineProperty(_messages, 'standard', 'मानक'), _defineProperty(_messages, 'better_speed', 'बेहतर गति'), _defineProperty(_messages, 'best_speed', 'सर्वोत्तम गति'), _defineProperty(_messages, 'ends_on', 'समाप्त होता है'), _defineProperty(_messages, 'after', 'बाद'), _defineProperty(_messages, 'occurences', 'घटनाओं'), _defineProperty(_messages, 'repeat_on', 'दोबारा चालू'), _defineProperty(_messages, 'On', 'चालू'), _defineProperty(_messages, 'No_Questionnaires_assigned_to_this_topic', 'इस विषय को सौंपा कोई प्रश्नावली नहीं'), _defineProperty(_messages, 'total_percentage', 'कुल प्रतिशत'), _defineProperty(_messages, 'options', 'विकल्प'), _defineProperty(_messages, 'revoke_host', 'मेजबान रद्द करें'), _defineProperty(_messages, 'become_host', 'मेजबान बनें'), _defineProperty(_messages, 'video_settings', 'वीडियो सेटिंग्स'), _defineProperty(_messages, 'mute_unmute', 'म्यूट / अनम्यूट'), _defineProperty(_messages, 'remote_mute_unmute', 'रिमोट म्यूट / अनम्यूट'), _defineProperty(_messages, 'full_Screen', 'पूर्ण स्क्रीन'), _defineProperty(_messages, 'share', 'शेयर'), _defineProperty(_messages, 'volume_on_off', 'वॉल्यूम चालू / बंद'), _defineProperty(_messages, 'become_speaker', 'स्पीकर बनें'), _defineProperty(_messages, 'revoke_speaker', 'स्पीकर रद्द करें'), _defineProperty(_messages, 'become_presenter', 'प्रस्तुतकर्ता बनें'), _defineProperty(_messages, 'revoke_presenter', 'प्रस्तुतकर्ता को रद्द करना'), _defineProperty(_messages, 'add_another_field', 'अन्य फ़ील्ड जोड़ें'), _defineProperty(_messages, 'today', 'आज'), _defineProperty(_messages, 'yesterday', 'बिता कल'), _defineProperty(_messages, 'last_seven_days', 'पिछले 7 दिन'), _defineProperty(_messages, 'last_thirty_days', 'पिछले 30 दिनों में'), _defineProperty(_messages, 'custom', 'रिवाज'), _defineProperty(_messages, 'date_range', 'तिथि सीमा'), _defineProperty(_messages, 'apply', 'लागू करें'), _defineProperty(_messages, 'not_loggedin_users', 'लॉग-इन नहीं हुए उपयोगकर्ता'), _defineProperty(_messages, 'loggedin_users', 'लॉग-इन उपयोगकर्ता'), _defineProperty(_messages, 'loggedin_users_status', 'लॉग-इन उपयोगकर्ता स्थिति'), _defineProperty(_messages, 'present_instructors', 'वर्तमान प्रशिक्षक'), _defineProperty(_messages, 'absent_instructors', 'अनुपस्थित प्रशिक्षक'), _defineProperty(_messages, 'present_students', 'वर्तमान छात्र'), _defineProperty(_messages, 'absent_students', 'अनुपस्थित छात्र '), _defineProperty(_messages, 'instructors_attendance', 'प्रशिक्षक उपस्थिति'), _defineProperty(_messages, 'students_attendance', 'छात्र उपस्थिति'), _defineProperty(_messages, 'percentage', 'प्रतिशत'), _defineProperty(_messages, 'offline_visits', 'ऑफ़लाइन विज़िट्स'), _defineProperty(_messages, 'online_visits', 'ऑनलाइन विज़िट्स'), _defineProperty(_messages, 'absent_schedules', 'अनुपस्थित अनुसूचियां'), _defineProperty(_messages, 'total_schedules', 'कुल अनुसूची'), _defineProperty(_messages, 'total_attendance', 'कुल उपस्थिति'), _defineProperty(_messages, 'count', 'गिनती'), _defineProperty(_messages, 'back_to_list', 'दोबारा सूची को जाएं'), _defineProperty(_messages, 'back_to_reports', 'रिपोर्ट पर वापस जाएं'), _defineProperty(_messages, 'completely_viewed_topic_users', 'पूरी तरह से देखा गया विषय उपयोगकर्ता'), _defineProperty(_messages, 'partially_viewed_topic_users', 'आंशिक रूप से देखा गया विषय उपयोगकर्ता'), _defineProperty(_messages, 'not_AtAll_Viewed_Topic_Users', 'सभी दृश्यमान विषय उपयोगकर्ताओं में नहीं'), _defineProperty(_messages, 'viewed_users', 'देखे गए उपयोगकर्ता'), _defineProperty(_messages, 'completely_viewed_topics', 'पूरी तरह से देखा गया विषय'), _defineProperty(_messages, 'partially_viewed_topics', 'आंशिक रूप से देखा गया विषय'), _defineProperty(_messages, 'notAtAll_Viewed_Topics', 'बिल्कुल नहीं देखा विषय पर'), _defineProperty(_messages, 'user_viewed_topics', 'उपयोगकर्ता ने देखा विषय'), _defineProperty(_messages, 'topic_users', 'छात्र'), _defineProperty(_messages, 'clear_room_chat', 'चैट हटाएं'), _defineProperty(_messages, 'delete_room_chat_alert', 'क्या आप वाकई चैट को साफ़ करना चाहते हैं?'), _defineProperty(_messages, 'join', 'में शामिल होने के'), _defineProperty(_messages, 'access_denied', 'पहुंच अस्वीकृत'), _defineProperty(_messages, 'video_bit_rate', 'वीडियो बिट दर'), _defineProperty(_messages, 'audio_bit_rate', 'गानों का बिट दर'), _defineProperty(_messages, 'evaluate_assignment', 'असाइनमेंट का मूल्यांकन करें'), _defineProperty(_messages, 'back_to_submissions', 'वापस प्रस्तुतियाँ'), _defineProperty(_messages, 'Persian', 'Persian'), _defineProperty(_messages, 'submit', 'जमा करें'), _defineProperty(_messages, 'make_speaker_vedio', 'स्पीकर बनाएं'), _defineProperty(_messages, 'Connection_Request', 'कनेक्शन अनुरोध'), _defineProperty(_messages, 'message', 'संदेश'), _defineProperty(_messages, 'sources', 'सूत्रों का कहना है'), _defineProperty(_messages, 'resolutions', 'संकल्प'), _defineProperty(_messages, 'camera', 'कैमरा'), _defineProperty(_messages, 'Audio_Inputs', 'ऑडियो इनपुट'), _defineProperty(_messages, 'Please_enter_Company', 'कृपया कंपनी दर्ज करें'), _defineProperty(_messages, 'Please_enter_Position', 'कृपया स्थिति दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_City_Town', "'कृपया मान्य शहर / नगर दर्ज करें' (विशेष अनुयायियों को अनुमति नहीं दी जानी चाहिए)"), _defineProperty(_messages, 'Please_enter_valid_Country', 'कृपया मान्य देश दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_From_Date', 'कृपया वैध दिनांक दर्ज करें'), _defineProperty(_messages, 'From_date_cannot_be_in_future', 'तिथि से भविष्य में नहीं हो सकता'), _defineProperty(_messages, 'Please_enter_valid_To_Date', "कृपया वैध तिथि दर्ज करें"), _defineProperty(_messages, 'From_date_and_To_date_cannot_be_same', 'तिथि और तिथि से समान नहीं हो सकता'), _defineProperty(_messages, 'To_date_should_be_greater_than_From_date', 'तिथि करने के लिए तिथि से अधिक होना चाहिए'), _defineProperty(_messages, 'Please_enter_School', 'कृपया स्कूल दर्ज करें'), _defineProperty(_messages, 'School_field_cannot_have_empty_spaces', "स्कूल के मैदान में रिक्त स्थान नहीं हो सकते"), _defineProperty(_messages, 'Please_enter_University', 'कृपया विश्वविद्यालय दर्ज करें'), _defineProperty(_messages, 'University_field_cannot_have_empty_spaces', "विश्वविद्यालय के क्षेत्र में रिक्त स्थान नहीं हो सकते"), _defineProperty(_messages, 'Please_enter_atleast_one_skill', "कृपया कम से कम एक कौशल दर्ज करें"), _defineProperty(_messages, 'Please_enter_Address', 'कृपया पता दर्ज करें'), _defineProperty(_messages, 'Please_enter_a_valid_Address', 'कपया वैध पता अंकित करें'), _defineProperty(_messages, 'Please_enter_City', 'कृपया शहर दर्ज करें'), _defineProperty(_messages, 'Please_enter_a_valid_City', 'कृपया एक मान्य शहर दर्ज करें'), _defineProperty(_messages, 'Please_enter_Zip', "कृपया ज़िप दर्ज करें"), _defineProperty(_messages, 'Please_enter_a_valid_Zip', 'कृपया एक वैध ज़िप दर्ज करें'), _defineProperty(_messages, 'Please_enter_website', 'कृपया एक वैध ज़िप दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_website', 'कृपया वैध वेबसाइट दर्ज करें'), _defineProperty(_messages, 'Please_enter_social_link', 'कृपया सामाजिक लिंक दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_social_link', 'कृपया मान्य सामाजिक लिंक दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_Date_of_birth', 'कृपया जन्म तिथि की वैध तिथि दर्ज करें'), _defineProperty(_messages, 'Date_of_birth_cannot_be_future_Date', "जन्म तिथि भविष्य की तिथि नहीं हो सकती"), _defineProperty(_messages, 'Please_select_Gender', ' कृपया लिंग चुनें'), _defineProperty(_messages, 'Please_enter_Current_Password', 'कृपया वर्तमान पासवर्ड दर्ज करें'), _defineProperty(_messages, 'Please_enter_New_Password', 'कृपया नया पासवर्ड दर्ज करें'), _defineProperty(_messages, 'Please_enter_Confirm_password', 'कृपया पासवर्ड की पुष्टि करें दर्ज करें'), _defineProperty(_messages, 'New_Password_and_Confirm_password_should_be_same', 'नया पासवर्ड और पासवर्ड की पुष्टि करना समान होना चाहिए।'), _defineProperty(_messages, 'Assignment_name_cannot_have_only_white_spaces', "असाइनमेंट नाम में केवल सफेद स्थान नहीं हो सकते"), _defineProperty(_messages, 'Please_enter_Assignment_Name', 'कृपया असाइनमेंट नाम दर्ज करें'), _defineProperty(_messages, 'Please_enter_Question', 'कृपया प्रश्न दर्ज करें'), _defineProperty(_messages, 'please_select_type', ' कृपया प्रकार चुनें'), _defineProperty(_messages, 'Please_enter_Options', ' कृपया विकल्प दर्ज करें'), _defineProperty(_messages, 'Provide_atleast_Two_Options', 'कम से कम दो विकल्प प्रदान करें'), _defineProperty(_messages, 'Options_cannot_be_same', "विकल्प समान नहीं हो सकते"), _defineProperty(_messages, 'Please_select_an_Answer', 'कृपया एक उत्तर चुनें'), _defineProperty(_messages, 'Marks_cannot_be_empty', "मार्क्स रिक्त नहीं हो सकते"), _defineProperty(_messages, 'Marks_can_only_have_Numbers', ' अंक में केवल नंबर हो सकते हैं'), _defineProperty(_messages, 'Please_enter_a_valid_Name', ' कृपया कोई मान्य नाम दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_Email_id', 'कृपया मान्य ईमेल आईडी दर्ज करें'), _defineProperty(_messages, 'Please_enter_Password', ' कृप्या पास्वर्ड भरो'), _defineProperty(_messages, 'Passwords_are_not_matching', 'पासवर्ड मेल नहीं खाते हैं'), _defineProperty(_messages, 'Please_enter_valid_City_Name', 'कृपया मान्य शहर का नाम दर्ज करें'), _defineProperty(_messages, 'Please_enter_valid_State_Name', ' कृपया वैध राज्य नाम दर्ज करें'), _defineProperty(_messages, 'Please_accept_Term_conditions', 'कृपया नियम एवं शर्तें स्वीकार करें'), _defineProperty(_messages, 'Please_enter_institute_name', 'कृपया संस्थान नाम दर्ज करें'), _defineProperty(_messages, 'Enter_at_least_three_letters_to_search', 'खोज करने के लिए कम से कम तीन अक्षर दर्ज करें'), _defineProperty(_messages, 'profile_picture', 'प्रोफ़ाइल फोटो'), _defineProperty(_messages, 'search_members_add', 'अपने गोरुप में जोड़ने के लिए संपर्क खोजें.'), _defineProperty(_messages, 'delete_group', 'समूह हटाएं'), _defineProperty(_messages, 'addlocation', 'स्थान बताईए'), _defineProperty(_messages, 'access_denied', 'पहुंच अस्वीकृत'), _defineProperty(_messages, 'edit_category', 'श्रेणी संपादित करें'), _defineProperty(_messages, 'select_company', 'कंपनी का चयन करें'), _defineProperty(_messages, 'select_gender', 'लिंग चुनें'), _defineProperty(_messages, 'old_pwd', 'पुराना पासवर्ड'), _defineProperty(_messages, 'new_pwd', 'नया पासवर्ड'), _defineProperty(_messages, 're_new_pwd', 'नया पासवर्ड दोबारा टाइप करें'), _defineProperty(_messages, 'result_details', 'परिणाम विवरण'), _defineProperty(_messages, 'create_group', 'समूह बनाएँ'), _defineProperty(_messages, 'Please_select_any_option', 'कृपया कोई भी विकल्प चुनें'), _defineProperty(_messages, 'phne', 'फ़ोन'), _defineProperty(_messages, 'go_back', 'वापस जाओ'), _defineProperty(_messages, 'Current', 'वर्तमान'), _defineProperty(_messages, 'Personal_Information', 'व्यक्तिगत जानकारी'), _defineProperty(_messages, 'Work_Places', 'कार्य स्थल'), _defineProperty(_messages, 'dob', 'जन्म तिथि'), _defineProperty(_messages, 'Social_Links', 'सामाजिक लिंक'), _defineProperty(_messages, 'Connections', 'कनेक्शन'), _defineProperty(_messages, 'All_Connections', 'सभी कनेक्शन'), _defineProperty(_messages, 'View_all', 'सभी को देखें'), _defineProperty(_messages, 'Hide_all', 'सभी छुपाएं'), _defineProperty(_messages, 'hide', 'छिपाना'), _defineProperty(_messages, 'enter_schedule_password', 'शेड्यूल पासवर्ड दर्ज करें'), _defineProperty(_messages, 'conference_access', 'सम्मेलन का उपयोग'), _defineProperty(_messages, 'please_enter_schedule_password', 'कृपया शेड्यूल पासवर्ड दर्ज करें'), _defineProperty(_messages, 'support_center', 'समर्थन केंद्र'), _defineProperty(_messages, 'open_a_new_ticket', 'एक नई टिकट खोलें'), _defineProperty(_messages, 'check_ticket_status', 'टिकट स्थिति की जांच करें'), _defineProperty(_messages, 'troubleshoot', 'समस्या निवारण करें'), _defineProperty(_messages, 'invalid_or_expire_room', 'यह एक अमान्य पाठ्यक्रम दिखता है या आपका कोर्स समाप्त हो गया है'), _defineProperty(_messages, 'unautharized_request', 'यह एक असामान्य अनुरोध दिखता है'), _defineProperty(_messages, 'invalid_user', 'ऐसा लगता है कि आप एक अमान्य उपयोगकर्ता हैं'), _defineProperty(_messages, 'invalid_room', 'यह एक अमान्य पाठ्यक्रम दिखता है'), _defineProperty(_messages, 'invalid_or_expire_package', 'यह एक अमान्य पैकेज दिखता है या आपका पैकेज समाप्त हो गया है'), _defineProperty(_messages, 'export_chat', 'निर्यात चैट'), _defineProperty(_messages, 'download_certificate', 'प्रमाणपत्र डाउनलोड करें'), _defineProperty(_messages, 'topics_completed', 'पूर्ण किये गए विषय'), _defineProperty(_messages, 'certificates', 'प्रमाणपत्र'), _defineProperty(_messages, 'certificate_approved', 'प्रमाणपत्र स्वीकृत करें'), _defineProperty(_messages, 'select_questionnaire', "प्रश्नावली का चयन करें"), _defineProperty(_messages, 'questionnaire_name_error', "कृपया प्रश्ननाम नाम दर्ज करें"), _defineProperty(_messages, 'questionnaire_description_error', "कृपया विवरण दर्ज करें"), _defineProperty(_messages, 'clone_from_previoues_questionnaire', "पिछले प्रश्नावली से क्लोन"), _defineProperty(_messages, 'select_questionnaire', "कृपया प्रश्नावली चुनें"), _defineProperty(_messages, 'topic_completed', 'यदि विषय पूर्ण हो जाता है'), _defineProperty(_messages, 'i_have_completed_this_topic', 'कंने विषय पूरा कर लिया है'), _defineProperty(_messages, 'continous_user_presence_exceeded', 'उपयोगकर्ता की सीमा पार हो गई, कृपया व्यवस्थापक से संपर्क करें'), _defineProperty(_messages, 'update_basic_information', 'बुनियादी जानकारी अपडेट करें'), _defineProperty(_messages, 'adding_question_please_wait', 'सवाल जोड़ना, कृपया प्रतीक्षा करें...'), _messages)
	};

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _lodash = __webpack_require__(7);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsUpdate = __webpack_require__(94);
	
	var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);
	
	var _ToastMessage = __webpack_require__(96);
	
	var _ToastMessage2 = _interopRequireDefault(_ToastMessage);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var ToastContainer = function (_Component) {
	  _inherits(ToastContainer, _Component);
	
	  function ToastContainer() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, ToastContainer);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ToastContainer.__proto__ || Object.getPrototypeOf(ToastContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      toasts: [],
	      toastId: 0,
	      messageList: []
	    }, _this._handle_toast_remove = _this._handle_toast_remove.bind(_this), _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  _createClass(ToastContainer, [{
	    key: "error",
	    value: function error(message, title, optionsOverride) {
	      this._notify(this.props.toastType.error, message, title, optionsOverride);
	    }
	  }, {
	    key: "info",
	    value: function info(message, title, optionsOverride) {
	      this._notify(this.props.toastType.info, message, title, optionsOverride);
	    }
	  }, {
	    key: "success",
	    value: function success(message, title, optionsOverride) {
	      this._notify(this.props.toastType.success, message, title, optionsOverride);
	    }
	  }, {
	    key: "warning",
	    value: function warning(message, title, optionsOverride) {
	      this._notify(this.props.toastType.warning, message, title, optionsOverride);
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      var _this2 = this;
	
	      Object.keys(this.refs).forEach(function (key) {
	        _this2.refs[key].hideToast(false);
	      });
	    }
	  }, {
	    key: "_notify",
	    value: function _notify(type, message, title) {
	      var _this3 = this;
	
	      var optionsOverride = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	
	      if (this.props.preventDuplicates) {
	        if (_lodash2.default.includes(this.state.messageList, message)) {
	          return;
	        }
	      }
	      var key = this.state.toastId++;
	      var toastId = key;
	      var newToast = (0, _reactAddonsUpdate2.default)(optionsOverride, {
	        $merge: {
	          type: type,
	          title: title,
	          message: message,
	          toastId: toastId,
	          key: key,
	          ref: "toasts__" + key,
	          handleOnClick: function handleOnClick(e) {
	            if ("function" === typeof optionsOverride.handleOnClick) {
	              optionsOverride.handleOnClick();
	            }
	            return _this3._handle_toast_on_click(e);
	          },
	          handleRemove: this._handle_toast_remove
	        }
	      });
	      var toastOperation = _defineProperty({}, "" + (this.props.newestOnTop ? "$unshift" : "$push"), [newToast]);
	
	      var messageOperation = _defineProperty({}, "" + (this.props.newestOnTop ? "$unshift" : "$push"), [message]);
	
	      var nextState = (0, _reactAddonsUpdate2.default)(this.state, {
	        toasts: toastOperation,
	        messageList: messageOperation
	      });
	      this.setState(nextState);
	    }
	  }, {
	    key: "_handle_toast_on_click",
	    value: function _handle_toast_on_click(event) {
	      this.props.onClick(event);
	      if (event.defaultPrevented) {
	        return;
	      }
	      event.preventDefault();
	      event.stopPropagation();
	    }
	  }, {
	    key: "_handle_toast_remove",
	    value: function _handle_toast_remove(toastId) {
	      var _this4 = this;
	
	      if (this.props.preventDuplicates) {
	        this.state.previousMessage = "";
	      }
	      var operationName = "" + (this.props.newestOnTop ? "reduceRight" : "reduce");
	      this.state.toasts[operationName](function (found, toast, index) {
	        if (found || toast.toastId !== toastId) {
	          return false;
	        }
	        _this4.setState((0, _reactAddonsUpdate2.default)(_this4.state, {
	          toasts: { $splice: [[index, 1]] },
	          messageList: { $splice: [[index, 1]] }
	        }));
	        return true;
	      }, false);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this5 = this;
	
	      var divProps = _lodash2.default.omit(this.props, ["toastType", "toastMessageFactory", "preventDuplicates", "newestOnTop"]);
	
	      return _react2.default.createElement("div", _extends({}, divProps, { "aria-live": "polite", role: "alert" }), this.state.toasts.map(function (toast) {
	        return _this5.props.toastMessageFactory(toast);
	      }));
	    }
	  }]);
	
	  return ToastContainer;
	}(_react.Component);
	
	ToastContainer.propTypes = {
	  toastType: _react.PropTypes.shape({
	    error: _react.PropTypes.string,
	    info: _react.PropTypes.string,
	    success: _react.PropTypes.string,
	    warning: _react.PropTypes.string
	  }).isRequired,
	  id: _react.PropTypes.string.isRequired,
	  toastMessageFactory: _react.PropTypes.func.isRequired,
	  preventDuplicates: _react.PropTypes.bool.isRequired,
	  newestOnTop: _react.PropTypes.bool.isRequired,
	  onClick: _react.PropTypes.func.isRequired
	};
	ToastContainer.defaultProps = {
	  toastType: {
	    error: "error",
	    info: "info",
	    success: "success",
	    warning: "warning"
	  },
	  id: "toast-container",
	  toastMessageFactory: _react2.default.createFactory(_ToastMessage2.default.animation),
	  preventDuplicates: true,
	  newestOnTop: true,
	  onClick: function onClick() {}
	};
	exports.default = ToastContainer;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _ReactTransitionEvents = __webpack_require__(260);
	
	var _ReactTransitionEvents2 = _interopRequireDefault(_ReactTransitionEvents);
	
	var _reactDom = __webpack_require__(64);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _elementClass = __webpack_require__(240);
	
	var _elementClass2 = _interopRequireDefault(_elementClass);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var TICK = 17;
	var toString = Object.prototype.toString;
	exports.default = {
	  getDefaultProps: function getDefaultProps() {
	    return {
	      transition: null, // some examples defined in index.scss (scale, fadeInOut, rotate)
	      showAnimation: "animated bounceIn", // or other animations from animate.css
	      hideAnimation: "animated bounceOut",
	      timeOut: 5000,
	      extendedTimeOut: 1000
	    };
	  },
	  componentWillMount: function componentWillMount() {
	    this.classNameQueue = [];
	    this.isHiding = false;
	    this.intervalId = null;
	  },
	  componentDidMount: function componentDidMount() {
	    var _this = this;
	
	    this._is_mounted = true;
	    this._show();
	    var node = _reactDom2.default.findDOMNode(this);
	
	    var onHideComplete = function onHideComplete() {
	      if (_this.isHiding) {
	        _this._set_is_hiding(false);
	        _ReactTransitionEvents2.default.removeEndEventListener(node, onHideComplete);
	        _this._handle_remove();
	      }
	    };
	    _ReactTransitionEvents2.default.addEndEventListener(node, onHideComplete);
	
	    if (this.props.timeOut > 0) {
	      this._set_interval_id(setTimeout(this.hideToast, this.props.timeOut));
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    this._is_mounted = false;
	    if (this.intervalId) {
	      clearTimeout(this.intervalId);
	    }
	  },
	  _set_transition: function _set_transition(hide) {
	    var animationType = hide ? "leave" : "enter";
	    var node = _reactDom2.default.findDOMNode(this);
	    var className = this.props.transition + "-" + animationType;
	    var activeClassName = className + "-active";
	
	    var endListener = function endListener(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	
	      var classList = (0, _elementClass2.default)(node);
	      classList.remove(className);
	      classList.remove(activeClassName);
	
	      _ReactTransitionEvents2.default.removeEndEventListener(node, endListener);
	    };
	
	    _ReactTransitionEvents2.default.addEndEventListener(node, endListener);
	
	    (0, _elementClass2.default)(node).add(className);
	
	    // Need to do this to actually trigger a transition.
	    this._queue_class(activeClassName);
	  },
	  _clear_transition: function _clear_transition(hide) {
	    var node = _reactDom2.default.findDOMNode(this);
	    var animationType = hide ? "leave" : "enter";
	    var className = this.props.transition + "-" + animationType;
	    var activeClassName = className + "-active";
	
	    var classList = (0, _elementClass2.default)(node);
	    classList.remove(className);
	    classList.remove(activeClassName);
	  },
	  _set_animation: function _set_animation(hide) {
	    var node = _reactDom2.default.findDOMNode(this);
	    var animations = this._get_animation_classes(hide);
	    var endListener = function endListener(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	
	      animations.forEach(function (anim) {
	        return (0, _elementClass2.default)(node).remove(anim);
	      });
	
	      _ReactTransitionEvents2.default.removeEndEventListener(node, endListener);
	    };
	
	    _ReactTransitionEvents2.default.addEndEventListener(node, endListener);
	
	    animations.forEach(function (anim) {
	      return (0, _elementClass2.default)(node).add(anim);
	    });
	  },
	  _get_animation_classes: function _get_animation_classes(hide) {
	    var animations = hide ? this.props.hideAnimation : this.props.showAnimation;
	    if ("[object Array]" === toString.call(animations)) {
	      return animations;
	    } else if ("string" === typeof animations) {
	      return animations.split(" ");
	    }
	  },
	  _clear_animation: function _clear_animation(hide) {
	    var node = _reactDom2.default.findDOMNode(this);
	    var animations = this._get_animation_classes(hide);
	    animations.forEach(function (animation) {
	      return (0, _elementClass2.default)(node).remove(animation);
	    });
	  },
	  _queue_class: function _queue_class(className) {
	    this.classNameQueue.push(className);
	
	    if (!this.timeout) {
	      this.timeout = setTimeout(this._flush_class_name_queue, TICK);
	    }
	  },
	  _flush_class_name_queue: function _flush_class_name_queue() {
	    var _this2 = this;
	
	    if (this._is_mounted) {
	      (function () {
	        var node = _reactDom2.default.findDOMNode(_this2);
	        _this2.classNameQueue.forEach(function (className) {
	          return (0, _elementClass2.default)(node).add(className);
	        });
	      })();
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },
	  _show: function _show() {
	    if (this.props.transition) {
	      this._set_transition();
	    } else if (this.props.showAnimation) {
	      this._set_animation();
	    }
	  },
	  handleMouseEnter: function handleMouseEnter() {
	    clearTimeout(this.intervalId);
	    this._set_interval_id(null);
	    if (this.isHiding) {
	      this._set_is_hiding(false);
	
	      if (this.props.hideAnimation) {
	        this._clear_animation(true);
	      } else if (this.props.transition) {
	        this._clear_transition(true);
	      }
	    }
	  },
	  handleMouseLeave: function handleMouseLeave() {
	    if (!this.isHiding && (this.props.timeOut > 0 || this.props.extendedTimeOut > 0)) {
	      this._set_interval_id(setTimeout(this.hideToast, this.props.extendedTimeOut));
	    }
	  },
	  hideToast: function hideToast(override) {
	    if (this.isHiding || this.intervalId === null && !override) {
	      return;
	    }
	
	    this._set_is_hiding(true);
	    if (this.props.transition) {
	      this._set_transition(true);
	    } else if (this.props.hideAnimation) {
	      this._set_animation(true);
	    } else {
	      this._handle_remove();
	    }
	  },
	  _set_interval_id: function _set_interval_id(intervalId) {
	    this.intervalId = intervalId;
	  },
	  _set_is_hiding: function _set_is_hiding(isHiding) {
	    this.isHiding = isHiding;
	  }
	};

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _reactDom = __webpack_require__(64);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function call_show_method($node, props) {
	  $node[props.showMethod]({
	    duration: props.showDuration,
	    easing: props.showEasing
	  });
	}
	
	exports.default = {
	  getDefaultProps: function getDefaultProps() {
	    return {
	      style: {
	        display: "none" },
	      showMethod: "fadeIn", // slideDown, and show are built into jQuery
	      showDuration: 300,
	      showEasing: "swing", // and linear are built into jQuery
	      hideMethod: "fadeOut",
	      hideDuration: 1000,
	      hideEasing: "swing",
	      //
	      timeOut: 5000,
	      extendedTimeOut: 1000
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      intervalId: null,
	      isHiding: false
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    call_show_method(this._get_$_node(), this.props);
	    if (this.props.timeOut > 0) {
	      this._set_interval_id(setTimeout(this.hideToast, this.props.timeOut));
	    }
	  },
	  handleMouseEnter: function handleMouseEnter() {
	    clearTimeout(this.state.intervalId);
	    this._set_interval_id(null);
	    this._set_is_hiding(false);
	
	    call_show_method(this._get_$_node().stop(true, true), this.props);
	  },
	  handleMouseLeave: function handleMouseLeave() {
	    if (!this.state.isHiding && (this.props.timeOut > 0 || this.props.extendedTimeOut > 0)) {
	      this._set_interval_id(setTimeout(this.hideToast, this.props.extendedTimeOut));
	    }
	  },
	  hideToast: function hideToast(override) {
	    if (this.state.isHiding || this.state.intervalId === null && !override) {
	      return;
	    }
	    this.setState({ isHiding: true });
	
	    this._get_$_node()[this.props.hideMethod]({
	      duration: this.props.hideDuration,
	      easing: this.props.hideEasing,
	      complete: this._handle_remove
	    });
	  },
	  _get_$_node: function _get_$_node() {
	    /* eslint-disable no-undef */
	    return jQuery(_reactDom2.default.findDOMNode(this));
	    /* eslint-enable no-undef */
	  },
	  _set_interval_id: function _set_interval_id(intervalId) {
	    this.setState({
	      intervalId: intervalId
	    });
	  },
	  _set_is_hiding: function _set_is_hiding(isHiding) {
	    this.setState({
	      isHiding: isHiding
	    });
	  }
	};

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.LeftMenu = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _main = {
	  "btnPrimaryDark": "_31E9BurxzSEZnZC6S2rB5i",
	  "bgPrimaryDark": "_2U4iOoVT93HKc6TY3Yhpc8",
	  "bgPrimaryDarkA": "_1kioQADujZQ6TylOsfwy3L",
	  "bgPrimaryDarkB": "_1iXfj7aYHjrOoIILdN4Uw3",
	  "bgPrimary": "_1eK_OqsdSKH6Ww14uPaJ-4",
	  "bgPrimaryLight": "_2s26DqNxbSnMNHChD0fpY3",
	  "foreColorLight100": "T_G37ZhGLHSGeORUFaMGE",
	  "foreColorLight70": "_2s1NjQ5Os0T964m8FaqeAV",
	  "foreColorLight50": "_1smo35s1EBd6PlFlaTmOVT",
	  "foreColorDark100": "_2BQEmwS-UHhbhJLvwvdFtV",
	  "foreColorDark87": "_2TaP0tSvqsm7R6gPLNyFBO",
	  "foreColorDark54": "_3IMx-j5u7S6iNsiWtcAKjJ",
	  "foreColorDark38": "_29qeAGFHlesOKs1n-FhSpY",
	  "mgRight8": "_2hSetRh-Ja8K0N9ugkdfvT",
	  "modDropDown": "_2R3XlZjoybwKUxENLMh2D-",
	  "infoBlock": "_1n2gUV7cowzrB_Q3Yc8GMV",
	  "showInfoBlock": "_1KPirtUqPRullNjnHLv7LC",
	  "active": "_3T56peYWObpewAcj6MML28",
	  "statusCircle": "_25sEi_zFmPv-fWxe-9MhLN",
	  "bgAway": "_3v9ju8fA80XxQaqa1JzHoa",
	  "bgDntDistrub": "i3G3SAQvPmTDyNd3mqXQl",
	  "bgOffline": "f3sfBt6PB_loBH2cYTt09",
	  "bgOnline": "_3K5QKZdjTbK5514T6P-Vx4",
	  "modDropDownDrop": "_1wdzau3GcxE3Etdf3q-iEY",
	  "selected": "_32LRSkR2VkBF3JW2X7mDtl",
	  "modPad": "_3YowDb-oIWUYi2P_azLYfo",
	  "inputGroup": "_2JGglWuzl2RwpWz98wQEKx",
	  "inputField": "_28ySg1xadRN73pLPNyS0eY",
	  "inputGroupAddon": "_29jkAz3K2WA1HpPt6oZbbX",
	  "userNameCap": "_2ZB0G3KF0RvESXUb7c5rkn"
	};
	
	var _main2 = _interopRequireDefault(_main);
	
	var _AppActions = __webpack_require__(70);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _LeftMenu = {
	  "containerBlock": "_1NbbrGGUmPhxRx1fqk5fOW",
	  "blockLeftHeader": "_3GKKS02OtTsvcl8J2p4TUJ",
	  "heading": "_1fHoU15UMCwD_0iGMAe2r5",
	  "iconBox": "MZcerE9YGpwkM4tIOdtX9",
	  "menuItems": "_3o7xiT9U7i2QQV9ffjt_2B",
	  "active": "_1LdMLsBZs6yxQAPnw33FPw",
	  "slideIn": "_2vtXn0C2StQ54lQtvQOHmj",
	  "blackCover": "_2wWbKpOECTfUUFkFFuwdcc"
	};
	
	var _LeftMenu2 = _interopRequireDefault(_LeftMenu);
	
	var _reactRedux = __webpack_require__(16);
	
	var _roles = __webpack_require__(46);
	
	var _LoginActions = __webpack_require__(21);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import adminStyles from '../Admin.css';
	
	
	var _ref = _jsx('li', {
	  id: 'dashboard'
	}, void 0, _jsx(_reactRouter.Link, {
	  to: '/dashboard'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'dashboard'
	})));
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'my_account'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'corporate_directory'
	});
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'manage_user'
	});
	
	var _ref5 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'package_management'
	});
	
	var _ref6 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'room_management'
	});
	
	var _ref7 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'participants_group'
	});
	
	var _ref8 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'questionnaire'
	});
	
	var _ref9 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'my_reports'
	});
	
	var _ref10 = _jsx('img', {
	  src: '/images/white-icons/white-left-arrow.png',
	  className: 'hidden-lg hidden-md'
	});
	
	var _ref11 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'settings'
	});
	
	var LeftMenu = exports.LeftMenu = function (_Component) {
	  _inherits(LeftMenu, _Component);
	
	  function LeftMenu(props) {
	    _classCallCheck(this, LeftMenu);
	
	    var _this = _possibleConstructorReturn(this, (LeftMenu.__proto__ || Object.getPrototypeOf(LeftMenu)).call(this, props));
	
	    _this.clsContainerBlock = _LeftMenu2.default.containerBlock + ' ' + _main2.default.bgPrimaryDarkA + ' pull-left';
	    _this.clsBlockLeftHeader = _LeftMenu2.default.blockLeftHeader + ' ' + _main2.default.bgPrimaryDarkB;
	    _this.clsIconBox = '' + _LeftMenu2.default.iconBox;
	    _this.clsHeading = '' + _LeftMenu2.default.heading;
	    _this.WoogeenObject = new _WoogeenManager2.default();
	    _this.state = {
	      value: '',
	      activeLink: 'profile'
	    };
	    return _this;
	  }
	
	  // logOut = () => {
	  //   // console.log("logout--", this.WoogeenObject.getConnectionStatus());
	  //   if(this.WoogeenObject.getConnectionStatus()) {
	  //     let that = this;
	  //     alertify.confirm(this.props.intl.messages.warning,this.props.intl.messages.logout_confirm_incall, 
	  //       function (result) {
	  //         if(result) {
	  //           if (that.props.loggedInData.data.guest) {
	  //             callApi ('delete-guest/'+that.props.confRoom, 'delete');
	  //           };
	  //           AuthClient.deleteSession();
	  //           browserHistory.push('/');
	  //         }
	  //       },
	  //       function() { }
	  //     ).setting('labels', {'ok': this.props.intl.messages.ok, 'cancel': this.props.intl.messages.cancel});
	  //   } else {
	  //     if (this.props.loggedInData.data.guest) {
	  //       callApi ('delete-guest/'+this.props.confRoom, 'delete');
	  //     };
	  //     AuthClient.deleteSession();
	  //     browserHistory.push('/');
	  //     // End Call
	  //     this.WoogeenObject.endConference();
	  //     this.props.dispatch( ClearImage());
	
	  //   }
	  // }
	
	  _createClass(LeftMenu, [{
	    key: 'componentwillmount',
	    value: function componentwillmount() {
	      console.log("In will mount");
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setdata(this.props.loggedInData);
	    }
	  }, {
	    key: 'setdata',
	    value: function setdata(res) {
	
	      //Code changed by-Najib, Desc - Highlight left navigation links when clicked
	      var urlLink = location.pathname;
	      //console.log("At componet did mount, urlLink", urlLink);
	
	      // let profilePatrn = '/admin/profile';
	      // let corporatePatrn = '/admin/corporate';
	      // let usersPatrn = '/admin/users';
	      // let packagePatrn = '/admin/package';
	      // let roomPatrn = '/admin/room';
	      // let categoryPatrn = '/admin/category';
	      // let participantsPatrn = '/admin/participants-group';
	      // let questionnairePatrn = '/admin/questionnaire';
	      // let settingsPatrn = '/admin/settings';
	      // let ldapsettingsPatrn = '/admin/ldapsettings';
	      // let reportsPatrn = '/admin/reports';
	      // let coursePatrn = '/course/reports';
	      // let courseAttndPatrn = '/course/attendance';
	      // let locationPatrn = '/admin/location';
	
	      var profileRegex = new RegExp('/admin/profile');
	      var corporateRegex = new RegExp('/admin/corporate');
	      var usersRegex = new RegExp('/admin/users');
	      var packageRegex = new RegExp('/admin/package');
	      var roomRegex = new RegExp('/admin/room');
	      var categoryRegex = new RegExp('/admin/category');
	      var participantsRegex = new RegExp('/admin/participants-group');
	      var questionnaireRegex = new RegExp('/admin/questionnaire');
	      var settingsRegex = new RegExp('/admin/settings');
	      var ldapsettingsRegex = new RegExp('/admin/ldapsettings');
	      var reportsRegex = new RegExp('/admin/reports');
	      var attndRegex = new RegExp('/course/reports');
	      var courseRegex = new RegExp('/course/attendance');
	      var locationRegex = new RegExp('/admin/location');
	
	      if (profileRegex.test(urlLink)) {
	        this.setState({ activeLink: 'profile' });
	      } else if (corporateRegex.test(urlLink)) {
	        this.setState({ activeLink: 'corporate' });
	      } else if (usersRegex.test(urlLink)) {
	        this.setState({ activeLink: 'users' });
	      } else if (packageRegex.test(urlLink)) {
	        this.setState({ activeLink: 'package' });
	      } else if (roomRegex.test(urlLink)) {
	        this.setState({ activeLink: 'room' });
	      } else if (categoryRegex.test(urlLink)) {
	        this.setState({ activeLink: 'category' });
	      } else if (participantsRegex.test(urlLink)) {
	        this.setState({ activeLink: 'participants' });
	      } else if (questionnaireRegex.test(urlLink)) {
	        this.setState({ activeLink: 'questionnaire' });
	      } else if (settingsRegex.test(urlLink)) {
	        this.setState({ activeLink: 'settings' });
	      } else if (ldapsettingsRegex.test(urlLink)) {
	        this.setState({ activeLink: 'ldapsettings' });
	      } else if (reportsRegex.test(urlLink)) {
	        this.setState({ activeLink: 'reports' });
	      } else if (courseRegex.test(urlLink) || attndRegex.test(urlLink)) {
	        this.setState({ activeLink: 'course' });
	      } else if (locationRegex.test(urlLink)) {
	        this.setState({ activeLink: 'location' });
	      }
	      this.setState({ value: res.data.role });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProp) {
	      if (nextProp.role) {
	        this.setState({ value: nextProp.role });
	      }
	      if (!nextProp.isVisible) {
	        this.clsContainerBlock = _LeftMenu2.default.containerBlock + ' ' + _main2.default.bgPrimaryDarkA + ' pull-left';
	      } else {
	        this.clsContainerBlock = _LeftMenu2.default.containerBlock + ' ' + _main2.default.bgPrimaryDarkA + ' ' + _LeftMenu2.default.slideIn + ' pull-left';
	      }
	      if (nextProp.urlLink == '/admin/profile') {
	        this.setState({ activeLink: 'profile' });
	      }
	    }
	  }, {
	    key: 'handleLink',
	    value: function handleLink(e) {
	      //console.log("this.props.location.pathname", location.pathname);
	      //console.log("e.target.id--", e.target.id);
	      this.setState({ activeLink: e.currentTarget.id });
	    }
	  }, {
	    key: 'renderMenu',
	    value: function renderMenu(value) {
	      return _jsx('ul', {
	        id: 'sideMenu',
	        onClick: this.toggleLeft.bind(this)
	      }, void 0, _ref, _jsx('li', {
	        onClick: this.handleLink.bind(this),
	        id: 'profile'
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: this.state.activeLink == 'profile' ? _LeftMenu2.default.active : '',
	        to: '/admin/profile'
	      }, void 0, _ref2)), value == _roles.Roles.Superadmin ? _jsx('li', {
	        onClick: this.handleLink.bind(this),
	        id: 'corporate'
	      }, void 0, ' ', _jsx(_reactRouter.Link, {
	        className: this.state.activeLink == 'corporate' ? _LeftMenu2.default.active : '',
	        to: '/admin/corporate/list'
	      }, void 0, _ref3), ' ') : null, value == _roles.Roles.Superadmin || value == _roles.Roles.Admin || value == _roles.Roles.Presenteradmin || value == _roles.Roles.Lmsadmin || value == _roles.Roles.CRMadmin ? _jsx('li', {
	        onClick: this.handleLink.bind(this),
	        id: 'users'
	      }, void 0, ' ', _jsx(_reactRouter.Link, {
	        className: this.state.activeLink == 'users' ? _LeftMenu2.default.active : '',
	        to: '/admin/users/list'
	      }, void 0, _ref4), ' ') : null, value == _roles.Roles.Superadmin || value == _roles.Roles.Admin || value == _roles.Roles.Presenteradmin || value == _roles.Roles.Lmsadmin || value == _roles.Roles.CRMadmin ? _jsx('li', {
	        onClick: this.handleLink.bind(this),
	        id: 'package'
	      }, void 0, ' ', _jsx(_reactRouter.Link, {
	        className: this.state.activeLink == 'package' ? _LeftMenu2.default.active : '',
	        to: '/admin/package/list'
	      }, void 0, _ref5), ' ') : null, value == _roles.Roles.Superadmin || value == _roles.Roles.Admin || value == _roles.Roles.Presenteradmin || value == _roles.Roles.Lmsadmin || value == _roles.Roles.CRMadmin || value == _roles.Roles.Presenter || value == _roles.Roles.Instructor || value == _roles.Roles.Moderator ? _jsx('li', {
	        onClick: this.handleLink.bind(this),
	        id: 'room'
	      }, void 0, ' ', _jsx(_reactRouter.Link, {
	        className: this.state.activeLink == 'room' ? _LeftMenu2.default.active : '',
	        to: '/admin/room/list'
	      }, void 0, _ref6), ' ') : null, value == _roles.Roles.Superadmin || value == _roles.Roles.Lmsadmin || value == _roles.Roles.Instructor ? _jsx('li', {
	        onClick: this.handleLink.bind(this),
	        id: 'participants'
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: this.state.activeLink == 'participants' ? _LeftMenu2.default.active : '',
	        to: '/admin/participants-group/list'
	      }, void 0, _ref7)) : null, value == _roles.Roles.Superadmin || value == _roles.Roles.Admin || value == _roles.Roles.Presenteradmin || value == _roles.Roles.Lmsadmin || value == _roles.Roles.Presenter || value == _roles.Roles.Instructor || value == _roles.Roles.CRMadmin ? _jsx('li', {
	        onClick: this.handleLink.bind(this),
	        id: 'questionnaire'
	      }, void 0, ' ', _jsx(_reactRouter.Link, {
	        className: this.state.activeLink == 'questionnaire' ? _LeftMenu2.default.active : '',
	        to: '/admin/questionnaire/list'
	      }, void 0, _ref8), ' ') : null, value == _roles.Roles.Student ? _jsx('li', {
	        onClick: this.handleLink.bind(this),
	        id: 'course'
	      }, void 0, ' ', _jsx(_reactRouter.Link, {
	        className: this.state.activeLink == 'course' ? _LeftMenu2.default.active : '',
	        to: '/course/reports'
	      }, void 0, _ref9), ' ') : null);
	    }
	  }, {
	    key: 'toggleLeft',
	    value: function toggleLeft(e) {
	      this.props.dispatch((0, _AppActions.toggleLeftMenu)());
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      // console.log(" render--this.state.activeLink", this.state.activeLink);
	      // console.log(" render--this.state.activeLink", this.state.activeLink);
	      return _jsx('div', {
	        className: this.clsContainerBlock
	      }, void 0, _jsx('div', {
	        className: this.clsBlockLeftHeader
	      }, void 0, _jsx('div', {
	        className: this.clsIconBox,
	        onClick: this.toggleLeft.bind(this)
	      }, void 0, _ref10), _jsx('h2', {
	        className: this.clsHeading
	      }, void 0, _ref11)), _jsx('div', {
	        className: _LeftMenu2.default.menuItems
	      }, void 0, this.renderMenu(this.state.value)));
	    }
	  }]);
	
	  return LeftMenu;
	}(_react.Component);
	
	LeftMenu.contextTypes = {
	  router: _react2.default.PropTypes.object
	};
	
	function mapStateToProps(store) {
	  return {
	    intl: store.intl,
	    loggedInData: store.login
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(LeftMenu);
	
	// export default LeftMenu;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.App = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Analytics = __webpack_require__(66);
	
	var _Analytics2 = _interopRequireDefault(_Analytics);
	
	var _App = {
	  "container": "_4uEyKcd5WHob5qPzotT7",
	  "goBackDash": "rVqW_eC3X5xdbAEEPWOTI",
	  "goTextDash": "_3fNxAADkK9yWDbFAr6IeYF",
	  "sectionMain": "COZIMIWpKavlm2062DfRs",
	  "aligner": "FLVQcC2-9gssOnXND5deg",
	  "centerAligner": "Es8zQdVtQLLTnTzA4bWD4",
	  "errorIcon": "gR17NZJlxFmunqSl_VnUj",
	  "paraVal": "_2v6sCMxw2Fiyrsc-9RaA4C"
	};
	
	var _App2 = _interopRequireDefault(_App);
	
	var _reactHelmet = __webpack_require__(84);
	
	var _reactHelmet2 = _interopRequireDefault(_reactHelmet);
	
	var _DevTools = __webpack_require__(98);
	
	var _DevTools2 = _interopRequireDefault(_DevTools);
	
	var _Header = __webpack_require__(189);
	
	var _Header2 = _interopRequireDefault(_Header);
	
	var _Footer = __webpack_require__(188);
	
	var _Footer2 = _interopRequireDefault(_Footer);
	
	var _Loading = __webpack_require__(142);
	
	var _Loading2 = _interopRequireDefault(_Loading);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _LoginActions = __webpack_require__(21);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _AppActions = __webpack_require__(70);
	
	var _IntlActions = __webpack_require__(37);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _SocketHandler = __webpack_require__(32);
	
	var _SocketHandler2 = _interopRequireDefault(_SocketHandler);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// Import Style
	
	
	// Import Components
	
	
	// Import Actions
	
	
	var callOnce = false;
	
	var _ref = _jsx(_DevTools2.default, {});
	
	var App = exports.App = function (_Component) {
	  _inherits(App, _Component);
	
	  function App(props) {
	    _classCallCheck(this, App);
	
	    //socketErrorCode [0-initialize, 1-connected, 2 - failed to connect, 3-not configured]
	    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));
	
	    _this.toggleAddPostSection = function () {
	      _this.props.dispatch((0, _AppActions.toggleAddPost)());
	    };
	
	    _this.state = { isMounted: false, statusBox: false, loadnow: false, socketErrorCode: 0, footer: null };
	    _this.setdata = _this.setdata.bind(_this);
	    return _this;
	  }
	
	  _createClass(App, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      // console.log("App will Mount");
	      //this.props.dispatch(isLoggedIn(AuthClient.getSession())).then(res=>{this.setdata(res)});
	    }
	  }, {
	    key: 'setdata',
	    value: function setdata(res) {
	      //this.setState({loadnow: true});
	      var that = this;
	      // console.log("App Res", res);
	      if (res.status && res.socketServer) {
	        if (!callOnce) {
	          callOnce = true;
	          _SocketHandler2.default.connectServer(res.data._id, res.socketServer, res.iceServers, function (status) {
	            if (status) {
	              that.setState({ loadnow: true, socketErrorCode: 1 });
	            } else {
	              console.log("Error");
	              that.setState({ socketErrorCode: 2 });
	            }
	          });
	          var _objAnalytics = new _Analytics2.default();
	          _objAnalytics.Initialize(res.ga_ui, res.data._id);
	        }
	      } else {
	        that.setState({ loadnow: true, socketErrorCode: 3 });
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;
	
	      this.props.dispatch((0, _LoginActions.isLoggedIn)(_AuthController2.default.getSession())).then(function (res) {
	        _this2.setdata(res);
	      });
	      (0, _AppActions.getFooter)().then(function (res) {
	        return _this2.setState({ footer: res.message });
	      });
	      this.setState({ isMounted: true }); // eslint-disable-line
	    }
	  }, {
	    key: 'renderFooter',
	    value: function renderFooter() {
	      if (!this.props.loggedInData.status) {
	        return _jsx(_Footer2.default, {
	          message: this.state.footer
	        });
	      } else {
	        return;
	      }
	    }
	  }, {
	    key: 'helmet',
	    value: function helmet(colorCode, StickyMargin) {
	      var bgCss;
	      if (StickyMargin > 0) {
	        bgCss = "body {background-color: " + colorCode + "; margin-bottom: " + StickyMargin + "px;}";
	      } else {
	        bgCss = "body {background-color: " + colorCode + "; margin: 0;}";
	      }
	      return _jsx(_reactHelmet2.default, {
	        title: 'InstaVC - Business Edition',
	        titleTemplate: '%s - Make your communication simple & easy',
	        meta: [{ charset: 'utf-8' }, {
	          'http-equiv': 'X-UA-Compatible',
	          content: 'IE=edge'
	        }, {
	          name: 'viewport',
	          content: 'user-scalable=no,initial-scale=1.0001,maximum-scale=1.0001'
	        }],
	        link: [{ rel: "shortcut icon", href: "/images/icons/favicon.ico" }],
	        style: [{ cssText: bgCss }]
	      });
	    }
	  }, {
	    key: 'getHelmet',
	    value: function getHelmet() {
	      if (this.props.loggedInData.status) {
	        return this.helmet('#f4f4f4', 0);
	      } else {
	        return this.helmet('#008abc', 65);
	      }
	    }
	  }, {
	    key: 'showStatusBox',
	    value: function showStatusBox(e) {
	      e.stopPropagation();
	      this.setState({
	        statusBox: !this.state.statusBox
	      });
	    }
	  }, {
	    key: 'hideStatusBox',
	    value: function hideStatusBox(e) {
	      this.setState({
	        statusBox: false
	      });
	    }
	  }, {
	    key: 'toggleLeft',
	    value: function toggleLeft(e) {
	      console.log("Toogle dispatch");
	      this.props.dispatch((0, _AppActions.toggleLeftMenu)());
	    }
	    // background-color: #00aafa;
	
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;
	
	      if (this.state.loadnow) {
	        var fullName = "";
	        var loginType = "";
	        var data = this.props.loggedInData.data;
	        if (data && data.firstname) {
	          //console.log(this.props.loggedInData.data)
	          //console.log(this.props.loggedInData.data);
	          fullName = data.firstname;
	          fullName = data.lastname ? fullName + ' ' + data.lastname : fullName;
	          if (data.profile && data.profile.companyid && data.profile.companyid.businessType) {
	            //console.log(data.profile.companyid.businessType)
	            loginType = data.profile.companyid.businessType;
	          }
	        }
	        if (this.props.loggedInData && this.props.loggedInData.data) {
	          var loggedInData = this.props.loggedInData;
	        }
	        //console.log('header',this.props);
	
	
	        return _jsx('div', {
	          onClick: this.hideStatusBox.bind(this)
	        }, void 0, this.state.isMounted && !window.devToolsExtension && process.env.NODE_ENV === 'development' && _ref, this.getHelmet(), _jsx(_Header2.default, {
	          switchLanguage: function switchLanguage(lang) {
	            return _this3.props.dispatch((0, _IntlActions.switchLanguage)(lang, loginType));
	          },
	          intl: this.props.intl,
	          loggedStatus: loggedInData,
	          toggleAddPost: this.toggleAddPostSection,
	          showPopCallback: this.showStatusBox.bind(this),
	          showPop: this.state.statusBox,
	          toggleLeft: this.toggleLeft.bind(this),
	          fullName: fullName,
	          isGuest: data.guest ? data.guest : false,
	          confRoom: this.props.workDashboardData.roomKey
	        }), this.props.children, this.renderFooter());
	      } else {
	        var message = '';
	        if (this.state.socketErrorCode == 2) {
	          message = 'Connect to server failed, Trying to re-connect';
	          console.log(message);
	        }
	        return _jsx(_Loading2.default, {
	          message: message
	        });
	      }
	    }
	  }]);
	
	  return App;
	}(_react.Component);
	
	// Retrieve data from store as props
	function mapStateToProps(store) {
	  return {
	    intl: store.intl,
	    loggedInData: (0, _LoginReducer.loggedInData)(store),
	    workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(store)
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(App);

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	// Import Style
	
	
	// Import Images
	
	
	exports.Footer = Footer;
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _Footer = {
	  "stickyFooter": "_1-Q9HCym4eZ3nLsGlRv-wz"
	};
	
	var _Footer2 = _interopRequireDefault(_Footer);
	
	var _headerBk = '/' + "bbaeb5f32b7042f0def39648a1d111b9.png";
	
	var _headerBk2 = _interopRequireDefault(_headerBk);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Footer(props, context) {
	  return _jsx('div', {
	    className: _Footer2.default.stickyFooter
	  }, void 0, _jsx('p', {}, void 0, '\xA9 ', props.message && props.message.year ? props.message.year : '', ' \xB7 ', props.message && props.message.name ? props.message.name : '', ' \xB7 ', props.message && props.message.company ? props.message.company : ''));
	}
	
	exports.default = Footer;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	exports.Header = Header;
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _main = {
	  "btnPrimaryDark": "_31E9BurxzSEZnZC6S2rB5i",
	  "bgPrimaryDark": "_2U4iOoVT93HKc6TY3Yhpc8",
	  "bgPrimaryDarkA": "_1kioQADujZQ6TylOsfwy3L",
	  "bgPrimaryDarkB": "_1iXfj7aYHjrOoIILdN4Uw3",
	  "bgPrimary": "_1eK_OqsdSKH6Ww14uPaJ-4",
	  "bgPrimaryLight": "_2s26DqNxbSnMNHChD0fpY3",
	  "foreColorLight100": "T_G37ZhGLHSGeORUFaMGE",
	  "foreColorLight70": "_2s1NjQ5Os0T964m8FaqeAV",
	  "foreColorLight50": "_1smo35s1EBd6PlFlaTmOVT",
	  "foreColorDark100": "_2BQEmwS-UHhbhJLvwvdFtV",
	  "foreColorDark87": "_2TaP0tSvqsm7R6gPLNyFBO",
	  "foreColorDark54": "_3IMx-j5u7S6iNsiWtcAKjJ",
	  "foreColorDark38": "_29qeAGFHlesOKs1n-FhSpY",
	  "mgRight8": "_2hSetRh-Ja8K0N9ugkdfvT",
	  "modDropDown": "_2R3XlZjoybwKUxENLMh2D-",
	  "infoBlock": "_1n2gUV7cowzrB_Q3Yc8GMV",
	  "showInfoBlock": "_1KPirtUqPRullNjnHLv7LC",
	  "active": "_3T56peYWObpewAcj6MML28",
	  "statusCircle": "_25sEi_zFmPv-fWxe-9MhLN",
	  "bgAway": "_3v9ju8fA80XxQaqa1JzHoa",
	  "bgDntDistrub": "i3G3SAQvPmTDyNd3mqXQl",
	  "bgOffline": "f3sfBt6PB_loBH2cYTt09",
	  "bgOnline": "_3K5QKZdjTbK5514T6P-Vx4",
	  "modDropDownDrop": "_1wdzau3GcxE3Etdf3q-iEY",
	  "selected": "_32LRSkR2VkBF3JW2X7mDtl",
	  "modPad": "_3YowDb-oIWUYi2P_azLYfo",
	  "inputGroup": "_2JGglWuzl2RwpWz98wQEKx",
	  "inputField": "_28ySg1xadRN73pLPNyS0eY",
	  "inputGroupAddon": "_29jkAz3K2WA1HpPt6oZbbX",
	  "userNameCap": "_2ZB0G3KF0RvESXUb7c5rkn"
	};
	
	var _main2 = _interopRequireDefault(_main);
	
	var _Header = {
	  "header": "_2sEZYfHlvDy9uXqVIXG1aM",
	  "imgLogo": "Dhk5glIaozNg6JEHBb8gO",
	  "languageSelect": "_J2fGKYBEuFmOL5YxTUWJ",
	  "imgLogo_dashboard": "_2ehnFbJuw0UCfhiEfW0a7U",
	  "conf": "_368dvXqxOzT2Go1ryfz2Sf",
	  "mobMenu": "_2jVUeI3i5h9uN4VQFA9Buk"
	};
	
	var _Header2 = _interopRequireDefault(_Header);
	
	var _LoginActions = __webpack_require__(21);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _Analytics = __webpack_require__(66);
	
	var _Analytics2 = _interopRequireDefault(_Analytics);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _IntlActions = __webpack_require__(37);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ref = _jsx('img', {
	  src: '/images/sub-nav-bars.png'
	});
	
	var _ref2 = _jsx('img', {
	  src: '/images/logo/logos.png'
	});
	
	var _ref3 = _jsx(_reactRouter.Link, {
	  id: 'dashboard',
	  to: '/dashboard'
	}, void 0, _jsx('img', {
	  src: '/images/logo/logos.png'
	}));
	
	var _ref4 = _jsx(_reactRouter.Link, {
	  id: 'profile',
	  to: '/admin/profile'
	}, void 0, _jsx(_reactFontawesome2.default, {
	  name: 'th'
	}), ' ', _jsx(_reactIntl.FormattedMessage, {
	  id: 'manage'
	}));
	
	var _ref5 = _jsx(_reactFontawesome2.default, {
	  name: 'sign-out'
	});
	
	var _ref6 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'logout'
	});
	
	var _ref7 = _jsx(_reactFontawesome2.default, {
	  name: 'angle-down'
	});
	
	var _ref8 = _jsx('div', {});
	
	function Header(props, context) {
	  if (props && props.loggedStatus && props.loggedStatus.status) {
	    var loggedIn = props.loggedStatus.status;
	  }
	  // const loggedIn = props.loggedStatus.status;
	  function logOut(e) {
	
	    var WoogeenObject = new _WoogeenManager2.default();
	    _Analytics2.default.destroyObj();
	    console.log("logout--", WoogeenObject.getConnectionStatus());
	    if (WoogeenObject.getConnectionStatus()) {
	      alertify.confirm(props.intl.messages.warning, props.intl.messages.logout_confirm_incall, function (result) {
	        if (result) {
	          // End Call
	          if (props.loggedStatus.data.guest) {
	            (0, _apiCaller2.default)('delete-guest/' + props.confRoom, 'delete');
	          };
	          WoogeenObject.endConference();
	          store.dispatch((0, _IntlActions.loginLanguage)(props.loggedStatus.data, null));
	          store.dispatch((0, _LoginActions.ClearImage)());
	          //store.dispatch( logoutUser()); 
	          _AuthController2.default.deleteSession();
	          _reactRouter.browserHistory.push('/');
	        }
	      }, function () {}).setting('labels', { 'ok': props.intl.messages.ok, 'cancel': props.intl.messages.cancel });
	    } else {
	      if (props.loggedStatus.data.guest) {
	        (0, _apiCaller2.default)('delete-guest/' + props.confRoom, 'delete');
	      };
	      store.dispatch((0, _IntlActions.loginLanguage)(props.loggedStatus.data, null));
	      store.dispatch((0, _LoginActions.ClearImage)());
	      //store.dispatch( logoutUser());  
	      _AuthController2.default.deleteSession();
	      _reactRouter.browserHistory.push('/');
	    }
	  }
	
	  var languageNodes = props.intl.enabledLanguages.map(function (lang) {
	    return _jsx('li', {
	      id: 'lang',
	      onClick: function onClick() {
	        return props.switchLanguage(lang[1]);
	      },
	      className: lang[1] === props.intl.locale ? _main2.default.selected : ''
	    }, lang[1], lang[0]);
	  });
	
	  var cls = _Header2.default.header + ' ' + _main2.default.bgPrimary;
	  var url = window.location.href;
	  var path = url.split('/')[3];
	
	  if (loggedIn) {
	    cls = _Header2.default.header + ' ' + _main2.default.bgPrimaryDark;
	  }
	  var cls_ln = '' + _Header2.default.languageSelect;
	  var cls_mob = _Header2.default.mobMenu + ' hidden-lg hidden-md';
	  var cls_Online = _main2.default.statusCircle + ' ' + _main2.default.bgOnline;
	  var cls_Offline = _main2.default.statusCircle + ' ' + _main2.default.bgOffline;
	  var cls_DntDistrub = _main2.default.statusCircle + ' ' + _main2.default.bgDntDistrub;
	  var cls_Away = _main2.default.statusCircle + ' ' + _main2.default.bgAway;
	  var cls_statusCircleOnline = _main2.default.statusCircle + ' ' + _main2.default.bgOnline;
	  var cls_statusCircleAway = _main2.default.statusCircle + ' ' + _main2.default.bgAway;
	  var cls_statusCircleOffline = _main2.default.statusCircle + ' ' + _main2.default.bgOffline;
	  var cls_statusCircleDntDistrub = _main2.default.statusCircle + ' ' + _main2.default.bgDntDistrub;
	  var cls_userNameCap = ' ' + _main2.default.userNameCap + ' hidden-xs hidden-sm ';
	
	  var cls_popClass = '' + _main2.default.infoBlock;
	  if (props.showPop) {
	    cls_popClass = _main2.default.infoBlock + ' ' + _main2.default.showInfoBlock;
	  }
	  if (props && props.loggedStatus && props.loggedStatus.headerFlag) {
	    // console.log("Inside conf-------------------");
	    cls = _Header2.default.header + ' ' + _Header2.default.conf + ' ' + _main2.default.bgPrimaryDark;
	  }
	
	  var image = '';
	  if (props && props.loggedStatus && props.loggedStatus.data && props.loggedStatus.data.profile && props.loggedStatus.data.profile.profileImage) {
	    image = "/uploads/" + props.loggedStatus.data.profile.profileImage;
	  } else {
	    image = "/images/profile-pics/defaultStudent.jpg";
	  }
	
	  var cls_imgLogo = path && path !== "dashboard" && path !== "conf" && path !== "broadcast-news" && path !== "full-calendar" ? '' + _Header2.default.imgLogo : _Header2.default.imgLogo + ' ' + _Header2.default.imgLogo_dashboard;
	  // <FormattedMessage id="switchLanguage" />
	  if (loggedIn) {
	    return _jsx('div', {
	      className: cls
	    }, void 0, path && path !== "dashboard" && path !== "conf" && path !== "broadcast-news" && path !== "full-calendar" ? _jsx('div', {
	      id: 'instaLink',
	      className: cls_mob,
	      onClick: props.toggleLeft
	    }, void 0, _ref) : null, _jsx('div', {
	      className: cls_imgLogo
	    }, void 0, props.isGuest ? _ref2 : _ref3), _jsx('div', {
	      className: cls_ln
	    }, void 0, props.isGuest ? _jsx('div', {
	      className: _main2.default.modDropDown
	    }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx('span', {
	      className: 'hidden-xs hidden-sm'
	    }, void 0, props.fullName, ' \xA0')))) : _jsx('div', {
	      id: 'mainDropdown',
	      className: _main2.default.modDropDown,
	      onClick: props.showPopCallback
	    }, void 0, _jsx('div', {
	      className: cls_popClass
	    }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _ref4, _jsx(_reactRouter.Link, {
	      id: 'logout',
	      onClick: logOut
	    }, void 0, _ref5, ' ', _ref6)))), _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx('div', {
	      className: cls_statusCircleOnline
	    }), _jsx('span', {
	      className: cls_userNameCap
	    }, void 0, props.fullName, ' \xA0', _ref7), _jsx('img', {
	      src: image
	    }))))));
	  } else {
	    return _ref8;
	  }
	}
	
	Header.contextTypes = {
	  router: _react2.default.PropTypes.object
	};
	
	exports.default = Header;

/***/ },
/* 190 */
/***/ function(module, exports) {

	"use strict";
	
	'use strict';
	
	// Meter class that generates a number correlated to audio volume.
	// The meter class itself displays nothing, but it makes the
	// instantaneous and time-decaying volumes available for inspection.
	// It also reports on the fraction of samples that were at or near
	// the top of the measurement range.
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function SoundMeter(context) {
	  this.context = context;
	  this.instant = 0.0;
	  this.slow = 0.0;
	  this.clip = 0.0;
	  this.script = context.createScriptProcessor(2048, 1, 1);
	  var that = this;
	  this.script.onaudioprocess = function (event) {
	    var input = event.inputBuffer.getChannelData(0);
	    var i;
	    var sum = 0.0;
	    var clipcount = 0;
	    for (i = 0; i < input.length; ++i) {
	      sum += input[i] * input[i];
	      if (Math.abs(input[i]) > 0.99) {
	        clipcount += 1;
	      }
	    }
	    that.instant = Math.sqrt(sum / input.length);
	    that.slow = 0.95 * that.slow + 0.05 * that.instant;
	    that.clip = clipcount / input.length;
	  };
	}
	
	SoundMeter.prototype.connectToSource = function (stream, callback) {
	  console.log('SoundMeter connecting');
	  try {
	    this.mic = this.context.createMediaStreamSource(stream);
	    this.mic.connect(this.script);
	    // necessary to make sample run, but should not be.
	    this.script.connect(this.context.destination);
	    if (typeof callback !== 'undefined') {
	      callback(null);
	    }
	  } catch (e) {
	    console.error(e);
	    if (typeof callback !== 'undefined') {
	      callback(e);
	    }
	  }
	};
	SoundMeter.prototype.stop = function () {
	  this.mic.disconnect();
	  this.script.disconnect();
	};
	
	exports.default = SoundMeter;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AddContacts = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrapDatetimepicker = __webpack_require__(86);
	
	var _reactBootstrapDatetimepicker2 = _interopRequireDefault(_reactBootstrapDatetimepicker);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Modal = __webpack_require__(52);
	
	var _component = {
	  "form-control": "QmIrbtmLmFNpHdWMqFMWS",
	  "innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
	  "colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
	  "error": "_3jAfmA6J7YmNDyB2VfsCxP",
	  "mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
	  "dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
	  "iElement": "_2crZNiFs8z8oNhzPDC1qOE",
	  "oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
	  "iLabel": "_3Pyvct_srCoSvJCgGG41jw",
	  "oLabel": "NsxWZpxBqBX8wky_O477_",
	  "iForm": "_3IlToa7pigrSS8KWut_dJ8",
	  "oForm": "_3N0YNUcfI5U02VSmBEbYot",
	  "iFormField": "_12yKSn29WLZIE6fvGQfcrN",
	  "oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
	  "iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
	  "oFormGroup": "_386CxczA49XX2-ejr3Qe55",
	  "formNext": "ccTxjcG6_GZO9OgzW33HT",
	  "iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
	  "oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
	  "iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
	  "oContainer": "_2tEAAtqgoutuOUU96rNvv1",
	  "iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
	  "oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
	  "iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
	  "iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
	  "whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
	  "iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
	  "active": "_2fF1Q9nO2O_1B8Ldb4RM52",
	  "scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
	  "errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
	  "errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
	  "whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
	  "greyCard": "_34l9W17Mt1koxHLd1yUqgk",
	  "reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
	  "countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
	  "react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
	  "ad": "N3bKXyhfwvWT3eAEC9Nno",
	  "ae": "taXUT8yfjgRMeSH3rMNxy",
	  "af": "_2vH4qShCgBPBO4GR8BdNvd",
	  "ag": "n8QfWtvpZLMpatCUqX2Td",
	  "ai": "_3fPX_RcpesOPxFsmsaygCE",
	  "al": "_1T12tbcC6990b-fIMG5LYW",
	  "am": "_31HdarMDfXvAgjizVUoeHk",
	  "ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
	  "ar": "_2qJleMgRbIErIrx3kQF57O",
	  "as": "_2ZPVYL8Vjn-vdWZToCEhjN",
	  "at": "_1hWilvnrVbANEHRyLGlF-m",
	  "au": "_2zJE4K6o-ftWqhb3exXZgk",
	  "aw": "_1UroMxX5JHt9bjGdHwa1OY",
	  "az": "_-Y2xueZ_1mEtB9YDOqEGB",
	  "ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
	  "bb": "_34600Kl8Wac9Hx7S3-3U6b",
	  "bd": "_3WBX90V5VJXA7-vSUfEWCh",
	  "be": "BcK33edOPcbYdkxxvOApy",
	  "bf": "ShN64-J7UZdswoQjkf7L_",
	  "bg": "_2A9PgkQEF5_KbvHvDf6_lY",
	  "bh": "_10p3rxNRYOhv8-BtZuq1w8",
	  "bi": "_6MzP1qXXDFAZVL7nBmRiH",
	  "bj": "_2U8H1sji9LfDEW706KyKvF",
	  "bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
	  "bn": "PgMDvF79WHl3kaklOmhw3",
	  "bo": "_7MheGVInaTi-QLxw5PiUi",
	  "br": "_1BDNUyT0cHDlbCBFgrrLkJ",
	  "bs": "_3vcASZB5bu7mJAzTzaRkWe",
	  "bt": "esu4pvyd9ZFWrf-etnrva",
	  "bw": "_2Hbv1I361RJFK3Ph2xPlu_",
	  "by": "_2tbYam6Og8RAicMhX9SXvI",
	  "bz": "_3xB704PIgqFnU2zTG-JZFN",
	  "ca": "_36FyK29nkNl9Ez7yWh04AS",
	  "cd": "_9PnHTqK1pSn_GIAbBtPT2",
	  "cf": "_2LgMF7o1A3a2cgw5jkpvZV",
	  "cg": "_3hYc9Y3UdCphltZKe2vJWk",
	  "ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
	  "ci": "FoSGkvvMDFAVcvsZBWX-Z",
	  "ck": "_1742IgEaHW3SZU7h_-nkwr",
	  "cl": "_36IaMt7ntEwUsH4lwN4tW-",
	  "cm": "_1N8krqbPtlsEVsh6SaCetm",
	  "cn": "IfkD3fwbUSx9FZflX6iIU",
	  "co": "_3Y7u7ONzxyZVjZYzS1OHTr",
	  "cr": "Gw5Qz4qBNZjPDmpQmi-d2",
	  "cu": "ZuHtEp_knwZcbwTTJkRgI",
	  "cv": "o6BzJCyjRH1pOsf_HpbQ6",
	  "cw": "hRElJCQXyNIITDZ6UQVut",
	  "cy": "_2cHKWrINPNO6L8BEOdtJCG",
	  "cz": "nS617LE8Qcckdv9HJTWpt",
	  "de": "fqJD93WBywDPs0lrLEXLT",
	  "dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
	  "dk": "_3fpBLMtuUi0kowy3ziMRYd",
	  "dm": "_3gMwGkQW-OGFx1U7vd7VMD",
	  "do": "G9EZGjpXLJUyQuREesyGO",
	  "dz": "_3Nka0vwv6nZpeugyuqYQIJ",
	  "ec": "_18t83SdIOs8EY6iF0zV0CZ",
	  "ee": "_1miCbYr55XmBKvcUu6XetR",
	  "eg": "_1T55wMh1svM7M5QGxFM2ex",
	  "er": "c0Ab9spCQ4VnXr_6xijnD",
	  "es": "_1lutiEL9tJpdNgKmnTT6Ld",
	  "et": "_2GGXIPO2kOV6CUsu65V4Z3",
	  "fi": "_1I-g5oWpQznT5QZuBfQ8A",
	  "fj": "_3oeTP_GhC_XzsjzHW86oDc",
	  "fk": "_3-_BjK4NArHS0nyf0DLc4F",
	  "fm": "_1WQYGDC-zTatxog3SIwE80",
	  "fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
	  "fr": "_3-mqatBXfaTfex8LWjnIDA",
	  "bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
	  "mf": "_34f4ya9mcbpIcQPgHJ4I6c",
	  "ga": "_15_iO4CJaXbX7PySxoldPF",
	  "gb": "_1vZuFSSey59_ixozre-0L_",
	  "gd": "_26Ub0jcjDpVD4nwM7m5n4e",
	  "ge": "_27ctDR0Hf6HO15MgHS8wyh",
	  "gf": "_2S6C39D4wNBuVSqzYM5Ldy",
	  "gh": "_3vjGi6-umA-RzwxRFaTfNN",
	  "gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
	  "gl": "_1OTvyS4D4UOkymKuDLxUdx",
	  "gm": "_3-0gezNOVCHKzaLYGUySo2",
	  "gn": "_8f6uadrEfnS9IX8DEIpKO",
	  "gp": "_36yEj9UcEbZcI0WJvgmk0B",
	  "gq": "xHX18x9xk7PhDBlgsvnad",
	  "gr": "HTk_eFej1VrCiBuKBIfLT",
	  "gt": "hgmUbzxaHNZNL6frPhPeb",
	  "gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
	  "gw": "_36JwaXqhh4gBrIvAy4c1KO",
	  "gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
	  "hk": "_1mT74O5OVtonPLmYnVVOu7",
	  "hn": "_1ze0KI-TYxTrDcXlMOu24s",
	  "hr": "ZIDUSRfcbDCZTyhqWGPob",
	  "ht": "Y65Ad5pf3z7ufcknP0vhk",
	  "hu": "_3EHKICvcensXt5hEu8Nkfs",
	  "id": "_3oZE8uvxIFK7M9DCEtsSCD",
	  "ie": "_2RNmpg94YYioQp2fWyz_xn",
	  "il": "_2Mq_no7KYxPp2NSLGS1Tcs",
	  "in": "_1UlEZ269GihRa58c5mCEBN",
	  "io": "_3ovelrc7S_DdmXxL-8uuwk",
	  "iq": "_3VSlK6DYHrBgKbkE2Rng2N",
	  "ir": "NRX2sFBmuPSJ9EOigyuEP",
	  "is": "_25HaTNE7x74CJO9S1mnm4I",
	  "it": "_1-LmlhbrcpKN-xjESmR_sO",
	  "jm": "VsvDBply-4FtMoJhi8Cvu",
	  "jo": "yEE3hbkzWK8CSCrCJibCo",
	  "jp": "_3oxjjz1uD2cX2QsoSToLgz",
	  "ke": "_1ksOT6KMPd99EWuWCXPga_",
	  "kg": "_2CMnR3yv5DGwDc8p3uoOjp",
	  "kh": "_927b1QnaSWnN35i3bVewJ",
	  "ki": "_2CuDp55lqYTpFp68D4IWep",
	  "km": "_3tvMTeZYZMzBB9bGn9lV9E",
	  "kn": "_6kbCvwc22pJX0tNv3HToQ",
	  "kp": "_3tIPOe5PNrHH-bgCGaZTJj",
	  "kr": "_2653rpVUuy3ETaw1mogdnF",
	  "kw": "_1SKg_lTe0ShbPSOl44eKjp",
	  "ky": "tgj8SOv7bYoF7qfbbQWNG",
	  "kz": "bchn50J152EdQa0zf3k5u",
	  "la": "mu9oycLgpKX8_yLLkR5b9",
	  "lb": "_2TcAFbagIrNyc6mgzRVNW0",
	  "lc": "_2IFItnUNT-albvpN-ksxd2",
	  "li": "_3_E6nQspv6zJQLQI24puaS",
	  "lk": "_2M2wq3qQhGeUegbBTs7ilH",
	  "lr": "L4o4xOg0s6QbasyIRPgyF",
	  "ls": "LhBB6SRin61WSFtUwaEfe",
	  "lt": "ITDUphrnMkKItKGMVHZf8",
	  "lu": "_1mVW30sc4i-1M8tDPCQlL",
	  "lv": "_3rq6vE2IagAsGI6iESAcJq",
	  "ly": "_3se_Nzm1WQrEN3VZYiJJrv",
	  "ma": "_fSDiNxp_jjfqkQcWffDM",
	  "mc": "_2hRTRZeBtDGN4mNeWBZVgB",
	  "md": "_26jDl0skadEwmUYDGmEzST",
	  "me": "_388lJj_7sQdyd9HL7pMrar",
	  "mg": "_3aFoqVWcvG3p47Vwa6UuoE",
	  "mh": "_1YHi6OtXmKfP15ZNbwYGgy",
	  "mk": "_9QVyhHcp8yH762J8fWXhC",
	  "ml": "yYD99PoyhgFI4912_qoyJ",
	  "mm": "URzk8-j7LcySpGUMJf_Qk",
	  "mn": "_1J-lktQUTK0rydBz3foJGF",
	  "mo": "_1sbL0zhHof-KbfGWu2qjqF",
	  "mp": "_1tJjJlSjRw5AnqcXXmGwCI",
	  "mq": "fHob9sxaJrTuqSc0xL744",
	  "mr": "t-Bmj7a31aA-IwcRcL0ua",
	  "ms": "_2xyT54DQP62zWDySH7-Kdy",
	  "mt": "_1Ul_OlGODc8S0QplVq94PV",
	  "mu": "_1yIBERRJqnV33pTq2VpKRc",
	  "mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
	  "mw": "_3i8n-5-htdGNJLgn96O21",
	  "mx": "_16-6zoyiVzSGB1O72cUTzV",
	  "my": "_3W2P0D9eTN4BQoOcThOsaM",
	  "mz": "wJ8icX7Asp3dSImkXOdTM",
	  "na": "_1qt_F94mybbX5kr0ArtN-Z",
	  "nc": "h82AMIuCGdKf69Hc_nM6D",
	  "ne": "_2mVa5nGsijzD93WRl8dk64",
	  "nf": "_3XQ9oUH_84SsdZLjpVRuqT",
	  "ng": "_1uyyH1GZjsEk3YpaUSmmG6",
	  "ni": "_22_3H6UeFo26o3fSavtQaX",
	  "nl": "_93asfBYgR8C7bEDucZO8l",
	  "bq": "_37A1nwIz7Z3obwUjmliw4s",
	  "no": "_2-sVmkWiLn_ogTikc0c0Eg",
	  "np": "_1PqZSwf5cuMNmbE7bpKe67",
	  "nr": "_9q5Rg9Xn0G2buivFSGySP",
	  "nu": "RLhVdyjL9Cex8ekaJqirU",
	  "nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
	  "om": "_9mZYNhgBLiQg-j1FeVprJ",
	  "pa": "_3S7TrzxJIEYVghUMVHB6E7",
	  "pe": "_3V5sP7VvdGOFqApj7POYl2",
	  "pf": "_1YzdrkyHO-eCcEFF-hjZl7",
	  "pg": "ddWAanlQJPlB0QDWO6dAF",
	  "ph": "_2TGbmCcqHlJFCssz78MxOs",
	  "pk": "_2JerTABYGCUN8FLjpnDzKy",
	  "pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
	  "pm": "_29Hoo7EsoSHtvRFvlVg2cD",
	  "pr": "_3_pkwz60KLoYcbKwaRvIsS",
	  "ps": "_3jenITZ_yUYS7kU1HwFEHj",
	  "pt": "_1vz8ABWy5Yd43_JhaTWq9u",
	  "pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
	  "py": "_1_W41pJLcGMRhLdU997clv",
	  "qa": "Z0tjAakoNSOs14KuenmRi",
	  "re": "_3k5KF4jzE7HUitQw9MQKnp",
	  "ro": "_2b8XhT3-7NgjAC8gJJkpis",
	  "rs": "_2MUJr9MQbiKRTd_g0TaRQr",
	  "ru": "HjzPW2CxxNMSGZw1ugFW7",
	  "rw": "_23TGIOoPmB9QYqIPG6W3tA",
	  "sa": "_34WM8rSonfayW0vJ3koqJS",
	  "sb": "_3486rZNsCjvTmIoHbjK8mG",
	  "sc": "_3meAM_iQCU6MyfPQJTN3yl",
	  "sd": "_2x6XeHNF__4s9VVfFXCJhO",
	  "se": "_66VDclGQXxpdUR8uE3ZFa",
	  "sg": "tv3I_hfLcUJ_8i9ewVcUz",
	  "sh": "_1syDbbhbumwMwwD7Dwkb1V",
	  "si": "_3jsffwJjGr2sMEofSTTGkG",
	  "sk": "_1EpYAUcQLCqbYB48Auixqb",
	  "sl": "_3STJQv9nY5mol4cW82D2ci",
	  "sm": "_9aTR-AZMTaYHRmDVAyFTM",
	  "sn": "_3mTatYTWeJQQACfV7xzRhi",
	  "so": "_1LnWon2slwLMqAHzhkRT4c",
	  "sr": "_1GSedFwSsf5isgOi3p0x6U",
	  "ss": "_1sq99LOjKKgery3luOXOFn",
	  "st": "_1O6vYx_NaXFBAs1qYxgwaB",
	  "sv": "_10D9RGnRzUv14bYWQaC23c",
	  "sx": "KonDEEzH2JzIWsVUBzFdY",
	  "sy": "_1ZAnqGYeixOJVFwwt6hNIo",
	  "sz": "_3FeOFkec3sXYbvQhWDdIM7",
	  "tc": "_1FZvldKEV-vz12TyyNfEf",
	  "td": "_31fysfDRtTWVKcX_UjX0ty",
	  "tg": "H60Kyr6MsF6nvRz5l7EfN",
	  "th": "SHZkbUz1c_H_zDOfxLc4",
	  "tj": "_2MRI0fA4OLgepXVooYMu9H",
	  "tk": "_1W959S9LHLCKhz3xi4MpHe",
	  "tl": "_1lMF_0nwQXTyBRRzRj7hBF",
	  "tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
	  "tn": "_2MeGi_bqLVuCaRtJzs3QqA",
	  "to": "_3egwC_50WENVPaap_uwXr8",
	  "tr": "_2KiPy3o6m7JCKQWPY2fI1d",
	  "tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
	  "tv": "_2D9VWSmHkhgNemAaIKF_cp",
	  "tw": "_2J7nVAh1zEa7kV5Ba51CLV",
	  "tz": "_2acF96LLqMjlbfMX1oiAjT",
	  "ua": "_2rr3Tyr8dP6vDvE0khEDKT",
	  "ug": "D7gjzKmlr78rNWXXw90np",
	  "us": "_1l5RtWI_acgLVeCd5fjgHG",
	  "uy": "_1zX6hTsIa2TtL6dgR47eQ9",
	  "uz": "_29NUL3VtwK1_RWUyPsY2ei",
	  "va": "_39kTgRBkhqqGVLUTJvK_67",
	  "vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
	  "ve": "_3Lk2Svkm2NTAVpUfiY_No5",
	  "vg": "_3SiYuGrNzW9DNkXwTZugyj",
	  "vi": "_2BiiERObu5xcE6P1SZxLdj",
	  "vn": "_3kSg6iW0KLoUpJ0g70fckK",
	  "vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
	  "wf": "Arz0xEqJcbKbLmPz_tXTS",
	  "ws": "_3oTaxcmbTriEd90-cXNqD8",
	  "ye": "gxtmCiQO2ao4JTQXuRUIJ",
	  "za": "_25HyrYKmQQAteF_LwADnIt",
	  "zm": "Kui2u7hZHcNBqlzbqR-vQ",
	  "zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
	  "hide": "_2kO_U0LXcg71jJA6RSia2e",
	  "v-hide": "_2HBc009zwTsSlkh8P8tH10",
	  "invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
	  "flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
	  "open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
	  "selected-flag": "_10c169vRt8V92_nQ_S0KtR",
	  "flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
	  "arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
	  "up": "_2ykRnfq4f2nlmZGfvzrn92",
	  "country-list": "UlTusogWL2urjgGgLNpcD",
	  "divider": "_2zMaTbM3nSdE07wOs7YYRt",
	  "country": "uL848pHFWhb_G94Ak-KX5",
	  "dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
	  "highlight": "BLa_2aA2PkYD2PsO2fvNC",
	  "country-name": "_3ih_ovRiGmAkpjxuz63nhk",
	  "uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
	  "fileUpload": "_2WENukerx3mNXkTyu0UXQf",
	  "uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
	  "upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
	  "blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
	  "feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
	  "errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
	  "gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
	  "red": "_3wj0AXV9gqX9YG1nk-2u9J",
	  "green": "_3KPVxc3su8ewtuKZgu8TGv",
	  "orange": "_3cLlE5QI9XJwY6e7jO5bLg",
	  "capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
	  "importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
	  "importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
	  "importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
	  "icon": "_12rnwIUewKT2PdtWMnNyD5",
	  "importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
	  "broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
	  "broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
	  "btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
	  "textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
	  "spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
	  "pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
	  "lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
	  "removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
	  "inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
	  "popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
	  "dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
	  "dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
	  "applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
	  "filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
	  "btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
	  "assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
	  "pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
	  "assTab": "y4LW63OuadI0JWTQBnbJ1",
	  "heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
	  "radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
	  "wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
	  "leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
	  "rightBox": "DP21PoKxwKk_vJyOuQTcr",
	  "gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
	  "actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
	  "gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
	  "actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
	  "gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
	  "morePref": "JBm94eKPIFI8vfiroATJ6",
	  "tile": "_1Ssp2zTovh7AwJWuRkgnge",
	  "tileItems": "_3cDqgy8AedDYzhy8Euosis",
	  "tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
	  "tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
	  "category": "_2Ow56TBY2Y24yY5SjVRU4l",
	  "innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
	  "maxScore": "_3uL97t2vemfuAs83cAFhjE",
	  "maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
	  "scored": "_12gGWK_s69JBGzOAX7ClkT",
	  "scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
	  "remTile": "_3vgBsvWRGVVRwIEDn1TquO",
	  "tileBody": "dF1WC_PeNjG87K2XGMIcS",
	  "tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
	  "gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
	  "gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
	  "assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
	  "blue": "K7acjAQMroOGGtUqqojYy",
	  "yellow": "G7N-PGOIbGO_ZkaqBu2mx",
	  "txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
	  "txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
	  "txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
	  "txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
	  "txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
	  "txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
	  "addTile": "lCw_kxhsAPcuM3yFAqvpF",
	  "addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
	  "addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
	  "commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
	  "totalScore": "FDG4LAia-7JDDtxb7R4Kb",
	  "totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
	  "textBox": "_13VdIFmMegxz_eR8VIXN_M",
	  "totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
	  "totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
	  "resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
	  "resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
	  "resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
	  "headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
	  "scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
	  "resultBody": "N6kKlySaRGbRcB4bBmpZ0",
	  "resGroup": "_2byM-_1N3yjHb2dpmlikdf",
	  "resTile": "DZeuj4DKkdAPKCgYd76RK",
	  "resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
	  "resRating": "R7j9mxFZmdmLgC7bPXpyN",
	  "txtSize": "_977ldMQMMiHQ0YG_61T3g",
	  "txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
	  "resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
	  "resInput": "_14gsxA36f-uYOfxGDvr_gi",
	  "activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
	  "feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
	  "fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
	  "feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
	  "profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
	  "profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
	  "profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
	  "name": "_25-6SxUiv8zhOMEVTRrg8w",
	  "commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
	  "addpdng": "_6rQH8tivz8ELIWszpbahs",
	  "good": "_3lOxcxDfxhPcuhLBJHo4Ur",
	  "vGood": "l_IAfocpDxfvpU316U0EI",
	  "fair": "_3I3YapUnBVxgs-ZsGf3Poh",
	  "poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _ConfSettings = {
	  "contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
	  "attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
	  "groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
	  "indiChatFixed": "_121x6wkYY9bMxq2znilpes",
	  "settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
	  "openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
	  "openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
	  "openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
	  "onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
	  "onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
	  "tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
	  "tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
	  "tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
	  "modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
	  "modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
	  "modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
	  "block50": "_3KEUbD9sh-5efPnOe48KQu",
	  "nohover": "m7jTOV3afDX3KYXfpJDuW",
	  "fileUpload": "_1Ta80WwlyVY6khGgoelZff",
	  "modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
	  "active": "_3wgRcJQgpFwV1Tze6eaYAL",
	  "modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
	  "noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
	  "modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
	  "navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
	  "backSearch": "w7BGjmEiChPoMYjET5k8R",
	  "subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
	  "topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
	  "modContactList": "_1zmiGIPb92yNtOu845RHyM",
	  "chatBox": "_2taDr3sNLvZl64o7TkBTEg",
	  "callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
	  "midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
	  "modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
	  "contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
	  "avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
	  "contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
	  "listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
	  "onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
	  "busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
	  "bgOffline": "jL-R5aQBwO_2EmgAsiay1",
	  "bgOnline": "_3TEYblB_gY5codKEtLqX7q",
	  "adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
	  "addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
	  "formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
	  "inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
	  "btn": "_27VXnOss6C0tcmiXDJyEQY",
	  "btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
	  "topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
	  "modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
	  "addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
	  "btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
	  "btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
	  "contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
	  "asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
	  "modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
	  "headerText": "_2POMQ33JzpZXRKNQwhKTpK",
	  "optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
	  "settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
	  "click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
	  "radio": "_1YNHku8cDP1FxyBn3XkUJY",
	  "modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
	  "modChatContainer": "_21msPTbxn87ey3RWsSt_35",
	  "selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
	  "avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
	  "messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
	  "downloadFile": "_33q4w5biPTOCecW_SwRklY",
	  "downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
	  "textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
	  "otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
	  "chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
	  "modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
	  "chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
	  "formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
	  "sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
	  "avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
	  "setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
	  "iconBlock": "_1llySoPNa1j3k655fl2PNS",
	  "passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
	  "meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
	  "meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
	  "inputError": "_30zq1PCjl9v2jnkrDEFjSK",
	  "formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
	  "calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
	  "endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
	  "schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
	  "schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
	  "schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
	  "onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
	  "repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
	  "repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
	  "schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
	  "schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
	  "inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
	  "setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
	  "dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
	  "actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
	  "actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
	  "indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
	  "alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
	  "centerBlock": "HLVHVZhqp-7yopt3Ah073",
	  "btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
	  "transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
	  "btnTransport": "szHYW92cM7tgGZoXatQyg",
	  "helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
	  "sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
	  "scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
	  "scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
	  "sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
	  "sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
	  "sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
	  "popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
	  "btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
	  "emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
	  "formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
	  "formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
	  "colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
	  "colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
	  "endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
	  "toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _Admin = {
	  "form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
	  "progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
	  "progress": "_32kzRKjl47M7AcFAivyyho",
	  "progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
	  "progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
	  "backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
	  "containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
	  "googleContainer": "_1G8DyX--1Xskim3uSHbxil",
	  "googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
	  "googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
	  "header": "_2xHja59x-eRkfv95koY1ce",
	  "hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
	  "body": "_1wybmROxdPMB2DSkLyTGGx",
	  "navRight": "_2fWAne55trxpJYagJCezpL",
	  "navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
	  "active": "_1mqL1x9MCLjw6_Ok5T24oF",
	  "midContainer": "_1oKiSeTflL6v2wZC13o7oC",
	  "formField": "P8wcycRRhQUOqnf0qytj0",
	  "profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
	  "fullname": "m8-V01m5JYGd00wGYRCbo",
	  "position": "aCZ3mMjMPWmB1Xr4poVi_",
	  "txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
	  "plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
	  "inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
	  "inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
	  "inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
	  "inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
	  "labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
	  "viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
	  "avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
	  "avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
	  "imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
	  "avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
	  "profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
	  "avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
	  "avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
	  "whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
	  "whiteTile": "KCFNekbG6kNm7QCCmxcOC",
	  "customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
	  "mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
	  "infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
	  "headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
	  "headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
	  "headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
	  "actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
	  "headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
	  "headingTxt": "IA7VynD7jO_xLZWz7aACg",
	  "userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
	  "userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
	  "userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
	  "userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
	  "searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
	  "searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
	  "searchBox": "_79ROL_K6mHBW5o2LSPYyD",
	  "whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
	  "whiteIconSearch": "_8753oABxDX3rcNGmogytj",
	  "chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
	  "chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
	  "whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
	  "whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
	  "whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
	  "userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
	  "modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
	  "invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
	  "brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
	  "imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
	  "fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
	  "checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
	  "fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
	  "inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
	  "accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
	  "accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
	  "roomLink": "_3GAUEPkkabqWlcSfevhUau",
	  "multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
	  "inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
	  "gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
	  "gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
	  "gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
	  "gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
	  "gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
	  "groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
	  "groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
	  "avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
	  "avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
	  "removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
	  "locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
	  "locationContainer": "GqFlk81qWkoM8pg8rM9mT",
	  "locationHeader": "mgZJ5PYIcU3xilagy40bF",
	  "deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
	  "locationBody": "_9tu9wEbJADVdffughhYgF",
	  "remove": "_2qTNEmDNBxEEHjfsZx6jUU",
	  "viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
	  "studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
	  "addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
	  "removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
	  "studentblock": "_1npAxnK_u_EjOeG19x_gPa",
	  "studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
	  "participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
	  "tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
	  "tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
	  "thStyle": "_253KYsN6UeeVvx_kTT0FTG",
	  "hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
	  "removeStyle": "XmJHLhTym-EGI-3dZGbWc",
	  "attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
	  "highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
	  "highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
	  "lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
	  "lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
	  "removePdng": "j5wasHyxigllgK3-KBNZp",
	  "endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
	  "dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
	  "dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
	  "applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
	  "filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
	  "gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
	  "facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
	  "btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
	  "btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
	  "fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
	  "fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
	  "googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
	  "inLine": "_3SKSHSNT9quu0AEumeGTQT",
	  "inputGrade": "_2Q0ilim6NermuOEyggbVkC",
	  "flexContainer": "_3ELNW3V19Qpndrzsv3951F",
	  "actionRightAbs": "_1uuENocETyaOc2rRiwior5",
	  "closebtn": "_2GrTt3NBt2HkOlxHF614-3",
	  "editClosebtn": "wpV9V72-_ceslWX8JrnXB",
	  "first": "_35E4iHqMVJmbMgmzKL6Tv5",
	  "headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
	  "flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
	  "formH5": "_23XBDJVodLOklMKND6BFwz",
	  "qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
	  "editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
	  "formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
	  "blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
	  "blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
	  "btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
	  "btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
	  "blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
	  "btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
	  "btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
	  "btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
	  "blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
	  "btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
	  "btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
	  "inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
	  "diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
	  "gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
	  "gTextg": "_1SEMPATJm2_wne7kQlcG10",
	  "gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
	  "errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
	  "mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
	  "rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
	  "seprator": "_2UGm2z7pTnp444hmFIFOIp",
	  "checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
	  "inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
	  "localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
	  "localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
	  "nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
	  "allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
	  "proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
	  "popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
	  "textCapAll": "dmP3hNbZiWb10oxof-KKb",
	  "stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
	  "stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
	  "topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
	  "emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
	  "txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
	  "addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
	  "addStudPop2": "pJUMNDAuP9bGHel-6ESf",
	  "addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
	  "addStudText": "bfDwzSKIRHVbJQpazT_Il",
	  "changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
	  "fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
	  "fdInfo": "jkgczk2IOaooUA2sdYQcY",
	  "fdName": "_1GOg26hVpb9pUXFN9I9y75",
	  "fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
	  "fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
	  "fdAns": "_25xB1C18_oF2MVuf5cn3zq",
	  "errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
	  "qleditor": "_17N2ULf7_DBC-wvog56baS",
	  "txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
	  "addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
	  "progress-bar": "A2ftBZ69PzksWTqo3GY0k",
	  "formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
	  "mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
	  "innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
	  "loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _ShowUser = __webpack_require__(197);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var validator = __webpack_require__(12);
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
	  id: 'please_enter'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'add_contacts'
	});
	
	var _ref3 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'search_contacts_add'
	}));
	
	var _ref4 = _jsx(_reactFontawesome2.default, {
	  name: 'search'
	});
	
	var _ref5 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'no_users_found'
	});
	
	var AddContacts = exports.AddContacts = function (_Component) {
	  _inherits(AddContacts, _Component);
	
	  function AddContacts(props) {
	    _classCallCheck(this, AddContacts);
	
	    var _this = _possibleConstructorReturn(this, (AddContacts.__proto__ || Object.getPrototypeOf(AddContacts)).call(this, props));
	
	    _this.handleKeyPress = function (event) {
	      if (event.which == 13 || event.keyCode == 13) {
	        // this.setState({ value : event.target.value });
	        _this.findUser();
	      }
	    };
	
	    _this.handleChange = function (e) {
	      //console.log("value == ",e.target.value);
	      if (e.target.value.trim() != '') _this.setState({ value: e.target.value });else _this.setState({ value: e.target.value, users: [] });
	    };
	
	    _this.findUser = function () {
	      var lowerCaseValue = _this.state.value.toLowerCase();
	      if (_this.state.value != '' && validator.isEmail(_this.state.value)) {
	        var obj = {
	          uid: _this.props.uid,
	          input: lowerCaseValue
	        };
	        (0, _UserDashboardActions.getMachedUsers)(obj).then(function (res) {
	          // console.log("res === ",res);
	          if (res) {
	            if (res.status) {
	              _this.setState({ users: res.data, error: '' });
	            } else {
	              _this.setState({ users: [], error: res.error });
	            }
	          }
	        });
	      } else {
	        _this.setState({ error: _ref });
	      }
	    };
	
	    _this.freeData = function () {
	      //Changes made by prateek for bug#2999
	      _this.setState({ value: '', users: [], error: '' });
	      _this.props.hidecallback();
	    };
	
	    _this.cls_block50_l = _ConfSettings2.default.block50 + ' pull-left';
	    _this.cls_btnSaveEdit = 'btn btn-success btn-icon btn-sm';
	    _this.cls_formControlOverwrite = _ConfSettings2.default.formControlOverwrite + ' form-control ';
	    _this.cls_calendarInlineBlock = _ConfSettings2.default.calendarInlineBlock + ' clearfix';
	    _this.cls_inputGroupAddonOverwrite = _ConfSettings2.default.inputGroupAddonOverwrite + ' input-group-addon';
	    _this.cls_confDatePicker = _ConfSettings2.default.setDueDateOverwrite + ' set-due-date form-control confDatepicker';
	    _this.cls_confTimePicker = _ConfSettings2.default.setDueDateOverwrite + ' set-due-date form-control confTimeTpicker';
	    _this.cls_errcls = '' + _component2.default.error;
	    _this.state = {
	      value: '',
	      error: '',
	      users: []
	    };
	    return _this;
	  }
	
	  _createClass(AddContacts, [{
	    key: 'sendUserId',
	    value: function sendUserId(userId) {
	      if (userId && userId != 'undefined') {
	        this.props.getUserId(userId);
	        this.setState({ value: '', users: [] });
	      }
	    }
	  }, {
	    key: 'render',
	
	
	    //for schedule
	    value: function render() {
	      var _this2 = this;
	
	      var listUsers = void 0;
	
	      if (this.state.users) {
	        var docs = this.state.users;
	        if (docs.length > 0) {
	          listUsers = docs.map(function (userData) {
	            return _jsx(_ShowUser.ShowUser, {
	              contactsData: _this2.props.contactsData,
	              requestResponse: _this2.props.requestResponse,
	              value: userData,
	              getUserId: _this2.sendUserId.bind(_this2),
	              classTitle: _this2.props.intl.messages.add_user
	            }, userData._id);
	          });
	        }
	      }
	      return _jsx(_reactBootstrap.Modal, {
	        show: this.props.showModal,
	        onHide: this.freeData
	      }, void 0, _jsx(_Modal.Header, {
	        closeButton: true
	      }, void 0, _jsx(_Modal.Title, {
	        className: _Admin2.default.popHeadingAll
	      }, void 0, _ref2)), _jsx(_Modal.Body, {}, void 0, _ref3, _jsx('div', {
	        className: _Admin2.default.searchBox
	      }, void 0, _jsx('input', {
	        id: 'search',
	        type: 'text',
	        name: 'search',
	        placeholder: this.props.intl.messages.search_contacts,
	        className: _Admin2.default.whiteSearch,
	        onChange: this.handleChange.bind(this),
	        onKeyPress: this.handleKeyPress.bind(this),
	        value: this.state.value,
	        maxLength: 50,
	        autoFocus: 'true'
	      }), _jsx('span', {
	        id: 'searchBtn',
	        className: _Admin2.default.whiteIconSearch,
	        onClick: this.findUser.bind(this)
	      }, void 0, _ref4), _jsx('label', {
	        id: 'noUserError',
	        className: this.cls_errcls
	      }, void 0, this.state.error ? _ref5 : null)), _jsx('div', {
	        className: _Admin2.default.searchUsersListBlock
	      }, void 0, _jsx('div', {
	        className: _Admin2.default.searchUsersListGroup
	      }, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
	        md: 12
	      }, void 0, _jsx('div', {
	        className: _Admin2.default.userListGroup
	      }, void 0, _jsx('ul', {}, void 0, listUsers))))))));
	    }
	  }]);
	
	  return AddContacts;
	}(_react.Component);
	
	AddContacts.contextTypes = {
	  router: _react2.default.PropTypes.object
	};
	
	AddContacts.defaultProps = { showModal: false };
	
	exports.default = (0, _reactIntl.injectIntl)(AddContacts);
	
	/*<input type="submit" className={adminStyles.whiteSearchSubmit}/>*/
	
	/*<li>
	                        <Link to="" className="clearfix">
	                          <img src="/images/profile-pics/beautiful.jpg" className="pull-left" />
	                          <h4 className="pull-left">
	                          User Name
	                            <p>email@gmail.com</p>
	                          </h4>
	                          <div className={adminStyles.userAction} title="Add to contacts">
	                            <FontAwesome name ="plus" />
	                          </div>
	                        </Link>
	                      </li>*/

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _ChatReducer = __webpack_require__(39);
	
	var _ChatActions = __webpack_require__(30);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _SocketHandler = __webpack_require__(32);
	
	var _SocketHandler2 = _interopRequireDefault(_SocketHandler);
	
	var _DashLayout = {
	  "container": "_3MDDAV5-6IWoiIUW_vk7CC",
	  "elasticWrapper": "R8LqGT-AW4U3mBKJ1MFvQ",
	  "minimize": "_21MnHEkmOnrX-W0YKg26By",
	  "footerFixed": "RdcUT5Wsmg6NbDJAwL0Md",
	  "minimizeFooterFixed": "gbOmycGmduK-Yg4TTsE33",
	  "elasticSideBar": "PPajvO_MDBlpK2G4OYyA8",
	  "slideElasticSideBar": "_35chDIcwDNW7Nw5j2d-Zyx",
	  "mobConf": "Kk9_BVy3rj24cvtuu_ns7"
	};
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _ConfSettings = {
	  "contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
	  "attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
	  "groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
	  "indiChatFixed": "_121x6wkYY9bMxq2znilpes",
	  "settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
	  "openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
	  "openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
	  "openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
	  "onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
	  "onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
	  "tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
	  "tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
	  "tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
	  "modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
	  "modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
	  "modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
	  "block50": "_3KEUbD9sh-5efPnOe48KQu",
	  "nohover": "m7jTOV3afDX3KYXfpJDuW",
	  "fileUpload": "_1Ta80WwlyVY6khGgoelZff",
	  "modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
	  "active": "_3wgRcJQgpFwV1Tze6eaYAL",
	  "modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
	  "noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
	  "modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
	  "navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
	  "backSearch": "w7BGjmEiChPoMYjET5k8R",
	  "subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
	  "topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
	  "modContactList": "_1zmiGIPb92yNtOu845RHyM",
	  "chatBox": "_2taDr3sNLvZl64o7TkBTEg",
	  "callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
	  "midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
	  "modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
	  "contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
	  "avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
	  "contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
	  "listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
	  "onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
	  "busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
	  "bgOffline": "jL-R5aQBwO_2EmgAsiay1",
	  "bgOnline": "_3TEYblB_gY5codKEtLqX7q",
	  "adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
	  "addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
	  "formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
	  "inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
	  "btn": "_27VXnOss6C0tcmiXDJyEQY",
	  "btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
	  "topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
	  "modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
	  "addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
	  "btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
	  "btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
	  "contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
	  "asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
	  "modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
	  "headerText": "_2POMQ33JzpZXRKNQwhKTpK",
	  "optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
	  "settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
	  "click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
	  "radio": "_1YNHku8cDP1FxyBn3XkUJY",
	  "modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
	  "modChatContainer": "_21msPTbxn87ey3RWsSt_35",
	  "selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
	  "avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
	  "messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
	  "downloadFile": "_33q4w5biPTOCecW_SwRklY",
	  "downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
	  "textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
	  "otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
	  "chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
	  "modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
	  "chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
	  "formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
	  "sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
	  "avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
	  "setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
	  "iconBlock": "_1llySoPNa1j3k655fl2PNS",
	  "passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
	  "meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
	  "meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
	  "inputError": "_30zq1PCjl9v2jnkrDEFjSK",
	  "formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
	  "calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
	  "endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
	  "schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
	  "schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
	  "schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
	  "onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
	  "repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
	  "repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
	  "schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
	  "schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
	  "inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
	  "setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
	  "dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
	  "actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
	  "actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
	  "indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
	  "alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
	  "centerBlock": "HLVHVZhqp-7yopt3Ah073",
	  "btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
	  "transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
	  "btnTransport": "szHYW92cM7tgGZoXatQyg",
	  "helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
	  "sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
	  "scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
	  "scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
	  "sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
	  "sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
	  "sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
	  "popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
	  "btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
	  "emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
	  "formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
	  "formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
	  "colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
	  "colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
	  "endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
	  "toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _Modal = __webpack_require__(52);
	
	var _lib = __webpack_require__(45);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ToastMessageFactory = _react2.default.createFactory(_lib.ToastMessage.animation);
	
	var _ref = _jsx(_Modal.Footer, {}, void 0);
	
	var _ref2 = _jsx(_reactFontawesome2.default, {
	  name: 'arrow-circle-o-down'
	});
	
	var _ref3 = _jsx(_reactFontawesome2.default, {
	  name: 'arrow-circle-o-down'
	});
	
	var _ref4 = _jsx(_reactFontawesome2.default, {
	  name: 'arrow-circle-o-down'
	});
	
	var _ref5 = _jsx('img', {
	  src: '/images/black-icons/black-left-arrow.png'
	});
	
	var _ref6 = _jsx('label', {
	  htmlFor: 'fileInput'
	}, void 0, _jsx(_reactFontawesome2.default, {
	  name: 'paperclip'
	}));
	
	var _ref7 = _jsx('img', {
	  src: '/images/black-icons/black-paper-plane.png'
	});
	
	var ConfChats = function (_Component) {
	  _inherits(ConfChats, _Component);
	
	  function ConfChats() {
	    var _this$state;
	
	    _classCallCheck(this, ConfChats);
	
	    var _this = _possibleConstructorReturn(this, (ConfChats.__proto__ || Object.getPrototypeOf(ConfChats)).call(this));
	
	    _this.handleChange = function (e) {
	      _this.setState({ msgContent: e.target.value });
	      if (e.key == 'Enter') {
	        _this.sendMsg();
	      }
	    };
	
	    _this.sendMsg = function (e) {
	      if (_this.state.msgContent.trim() != '') {
	        var fileName = '';
	        var messageType = '';
	        var url = _this.state.msgContent.trim();
	        var regexQuery = /(http(s)?:\\)?([\w-]+\.)+[\w-]+[.com|.in|.org]+(\[\?%&=]*)?/;
	        var retVal = new RegExp(regexQuery, "i");
	        if (retVal.test(url)) {
	          url.match(/(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);
	          if (RegExp.$3.indexOf('youtu') > -1) {
	            fileName = RegExp.$6;
	            messageType = "YOUTUBE";
	          } else if (RegExp.$3.indexOf('vimeo') > -1) {
	            fileName = RegExp.$6;
	            messageType = "VIMEO";
	          } else {
	            messageType = "URL";
	          }
	          //console.log("fileName", fileName);
	          //console.log("messageType", messageType);  
	        } else {
	          messageType = "TXT";
	        }
	        var obj = {
	          command: "IND-CHAT",
	          chatData: {
	            sentBy: _this.props.loggedInData.data._id,
	            chatType: _this.props.chatData.chatType,
	            messageType: messageType,
	            message: url,
	            fileName: fileName
	          }
	          //console.log("sent chatdata", chatData);
	        };if (_this.props.chatData.chatType == 'Indi') {
	          obj.chatData['sentTo'] = _this.props.chatData.activeData._id;
	        } else if (_this.props.chatData.chatType == 'Group') {
	          obj.chatData['sentToGroup'] = _this.props.chatData.activeData._id;
	        }
	        //console.log("obj before send === ",obj);
	        // SocketHandler.sendInstaMessage(obj, this.state.userId);
	        //Chnaged by rajesh for clearing the chat message
	        _this.temp = _this.state.msgContent;
	        _this.setState({ msgContent: '' });
	        _this.props.dispatch((0, _ChatActions.sendMessage)(obj.chatData)).then(function (res) {
	          return _this.clearInput(res, obj);
	        });
	      }
	    };
	
	    _this.handleUpload = function (e) {
	      var reader = new FileReader();
	      var file = e.target.files[0];
	      if (!file) {
	        return;
	      } else if (file.size > 20971520) {
	        alertify.alert(_this.props.intl.messages.warning, _this.props.intl.messages.chat_file_alert, function () {}).setting({ 'label': _this.props.intl.messages.ok });
	        return;
	      }
	
	      // For progress bar 
	      var that = _this;
	      reader.onprogress = function (data) {
	        if (data.lengthComputable) {
	          var progress = parseInt(data.loaded / data.total * 100, 10);
	          // console.log(progress);
	          if (progress == 100) {
	            that.setState({
	              progressBar: false,
	              progress: ''
	            });
	          } else if (that.state.progressBar == true) {
	            that.setState({
	              progress: progress
	            });
	          } else {
	            that.setState({
	              progressBar: true,
	              progress: progress
	            });
	          }
	        }
	      };
	
	      reader.onload = function (img) {
	        var dataURI = img.target.result;
	        this.imageData["file"] = dataURI.split(',')[1];
	        this.imageData["fileName"] = file.name;
	        this.imageData["fileSize"] = file.size;
	        if (file.type == 'application/zip') {
	          this.imageData["fileType"] = 'zip';
	        } else if (file.type != "") {
	          this.imageData["fileType"] = file.type.substring(0, file.type.indexOf("/"));
	        }
	        var fileFormat = file.name.split(".");
	        var length = fileFormat.length;
	        var typeOfFile = _.trim(fileFormat[length - 1]);
	        var allowedFormats = _.map(['xlsx', 'xls', 'doc', 'docx', 'ppt', 'pptx', 'txt', 'pdf', 'odp', 'odt', 'ods', 'png', 'jpeg', 'jpg', 'gif', 'wav', 'mp3', 'wmv', 'mp4', 'mkv', 'avi'], _.trim);
	        var data = this.imageData;
	        if (allowedFormats.includes(typeOfFile) || file.type == 'application/zip') {
	          this.saveFile(data);
	        } else {
	          this.refs.chatscontainer.error('Sorry File Not Supported');
	        }
	      }.bind(_this);
	      reader.readAsDataURL(file);
	    };
	
	    _this.hideCallback = function () {
	      var obj = {};
	      if (_this.props.chatData.chatType == 'Indi') {
	        obj['current'] = 'contacts';
	      } else if (_this.props.chatData.chatType == 'Group') {
	        obj['current'] = 'groups';
	      }
	      _this.props.handleMenu(obj);
	      _this.props.dispatch((0, _ChatActions.clearChatData)());
	      _SocketHandler2.default.clearActiveChat();
	    };
	
	    _this.state = (_this$state = {
	      msgContent: '',
	      showImageModal: false,
	      fileName: '',
	      fileType: '',
	      progress: '',
	      progressBar: false
	    }, _defineProperty(_this$state, 'fileName', ''), _defineProperty(_this$state, 'fileId', ''), _this$state);
	    _this.imageData = {};
	    _this.temp = '';
	    return _this;
	  }
	
	  _createClass(ConfChats, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.chatData && this.props.chatData.activeData) {
	        var obj = { sentTo: this.props.chatData.activeData._id,
	          chatType: this.props.chatData.chatType
	        };
	        _SocketHandler2.default.setActiveChat(obj.sentTo);
	        this.props.dispatch((0, _ChatActions.getChatData)(obj));
	        this.refs.chatinput.focus();
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var objDiv = document.getElementById("chatBody");
	      if (objDiv != undefined) {
	        objDiv.scrollTop = objDiv.scrollHeight;
	      }
	    }
	  }, {
	    key: 'clearInput',
	    value: function clearInput(res, obj) {
	      if (res.status) {
	        // this.setState({ msgContent : '' });
	        _SocketHandler2.default.sendInstaMessage(obj, this.props.chatData.activeData._id);
	      } else {
	        //assign previous value when error come from res
	        this.setState({ msgContent: this.temp });
	        this.refs.chatscontainer.error(res.error);
	      }
	    }
	  }, {
	    key: 'saveFile',
	    value: function saveFile(data) {
	      var _this2 = this;
	
	      var messageType;
	      if (data.fileType == "application" || data.fileType == "zip" || data.fileType == "text") {
	        messageType = 'FILE';
	      } else if (data.fileType == "image") {
	        messageType = 'IMG';
	      } else if (data.fileType == "audio") {
	        messageType = 'MEDIA';
	      } else if (data.fileType == "video") {
	        messageType = 'VIDEO';
	      }
	      var obj = {
	        command: "IND-CHAT",
	        chatData: {
	          sentBy: this.props.loggedInData.data._id,
	          chatType: this.props.chatData.chatType,
	          messageType: messageType,
	          message: data.fileName,
	          file: data.file,
	          fileSize: data.fileSize
	        }
	      };
	      if (this.props.chatData.chatType == 'Indi') {
	        obj.chatData['sentTo'] = this.props.chatData.activeData._id;
	      } else if (this.props.chatData.chatType == 'Group') {
	        obj.chatData['sentToGroup'] = this.props.chatData.activeData._id;
	      }
	      // console.log(obj.chatData);
	      this.props.dispatch((0, _ChatActions.sendMessage)(obj.chatData)).then(function (res) {
	        return _this2.clearInput(res, obj);
	      });
	    }
	  }, {
	    key: 'handleImage',
	    value: function handleImage(imageName, fileType) {
	      this.setState({
	        showImageModal: true,
	        fileName: imageName,
	        fileType: fileType
	      });
	    }
	  }, {
	    key: 'hideImageModal',
	    value: function hideImageModal() {
	      this.setState({
	        showImageModal: false,
	        fileName: '',
	        fileType: ''
	      });
	    }
	  }, {
	    key: 'viewUser',
	    value: function viewUser(id) {
	      if (this.props.loggedInData && this.props.loggedInData.data && !this.props.loggedInData.data.guest) {
	        _reactRouter.browserHistory.push('/profile/' + id);
	      }
	    }
	  }, {
	    key: 'handleURLVideo',
	    value: function handleURLVideo(fileName, fileType) {
	      this.setState({
	        showImageModal: true,
	        fileId: fileName.fileId,
	        fileType: fileType.messageType
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;
	
	      var cls_headerList = _ConfSettings2.default.modHeaderList + ' clearfix';
	      var cls_midTitle = _ConfSettings2.default.midTitle + ' pull-left';
	      var cls_block50 = _ConfSettings2.default.block50 + ' pull-right';
	      // let cls_block50_l     = `${styles.block50} pull-left`;
	      var cls_block50_mob_back = _ConfSettings2.default.block50 + ' pull-left';
	      var cls_headerText = _ConfSettings2.default.headerText + ' pull-left';
	      var cls_optionBlock = _ConfSettings2.default.optionsBlock + ' pull-right';
	      var cls_settingsOptions = _ConfSettings2.default.settingsOptionInput + ' ' + _ConfSettings2.default.radio;
	      var cls_elasticBar = '' + _DashLayout2.default.elasticSideBar;
	      var cls_modChatFooter = _ConfSettings2.default.modChatFooter + ' clearfix';
	      var cls_chatWrite = _ConfSettings2.default.chatWrite + ' pull-left';
	      var cls_formControl = _ConfSettings2.default.formControl + ' ' + _ConfSettings2.default.formControlChatOverwrite;
	      var cls_sendMessage = 'pull-right ' + _ConfSettings2.default.sendMessage;
	
	      var cls_chatsList = _ConfSettings2.default.indiChatFixed + ' ' + _ConfSettings2.default.openIndiChat;
	
	      //code changed by - Najib, Desc - Checking guest user and setting status variable 
	      var guestStatus = false;
	      if (this.props.loggedInData && this.props.loggedInData.data && this.props.loggedInData.data.guest) {
	        guestStatus = true;
	      }
	      var varLink = '';
	      if (this.state.fileType == "YOUTUBE") {
	        varLink = "https://www.youtube.com/embed/" + this.state.fileId;
	      } else if (this.state.fileType == "VIMEO") {
	        varLink = "https://vimeo.com/" + this.state.fileId;
	      } else {
	        var showFileName = '';
	        var extn = '';
	        showFileName = this.state.fileName.substring(this.state.fileName.indexOf("_") + 1);
	
	        //code changed by - Najib, Desc- Limiting file name if exceeds 35 character 
	        extn = showFileName.substring(showFileName.lastIndexOf('.') + 1, showFileName.length) || showFileName;
	        if (showFileName.length > 35) {
	          varLink = showFileName.substr(0, 35) + '...' + extn;
	        } else {
	          varLink = showFileName;
	        }
	      }
	
	      var youTubeLink = "https://www.youtube.com/embed/" + this.state.fileId;
	      var vimeoLink = "https://player.vimeo.com/video/" + this.state.fileId + "?api=1&player_id=player_1";
	
	      var chats = 'Start chatting....!';
	      var chatData = this.props.chatData;
	      // console.log("chatData----", chatDatas);
	      var fileURL = "/uploads/" + this.state.fileName;
	      var fileName = this.state.fileName.substring(this.state.fileName.indexOf("_") + 1);
	      var showImageModal = this.state.showImageModal ? _jsx('div', {}, void 0, _jsx(_reactBootstrap.Modal, {
	        show: this.state.showImageModal,
	        onHide: this.hideImageModal.bind(this)
	      }, void 0, _jsx(_Modal.Header, {
	        closeButton: true
	      }, void 0, _jsx(_Modal.Title, {
	        className: _Dashboard2.default.popHeadingAllExtra
	      }, void 0, varLink)), _jsx(_Modal.Body, {}, void 0, _jsx('div', {
	        className: _Dashboard2.default.mediaView
	      }, void 0, this.state.fileType == "VIDEO" ? _jsx('div', {
	        className: _Dashboard2.default.videoWrapper
	      }, void 0, _jsx('video', {
	        src: fileURL,
	        controls: true
	      })) : this.state.fileType == "IMG" ? _jsx('img', {
	        alt: 'document image',
	        src: fileURL
	      }) : this.state.fileType == "YOUTUBE" ? _jsx('div', {
	        className: _Dashboard2.default.videoWrapper
	      }, void 0, _jsx('iframe', {
	        src: youTubeLink
	      })) : this.state.fileType == "VIMEO" ? _jsx('div', {
	        className: _Dashboard2.default.videoWrapper
	      }, void 0, _jsx('iframe', {
	        src: vimeoLink
	      })) : null)), _ref)) : null;
	
	      var now = this.state.progress;
	      var progressBar = this.state.progressBar ? _jsx(_reactBootstrap.ProgressBar, {
	        bsStyle: 'success',
	        now: now,
	        label: now + '%'
	      }) : null;
	
	      if (chatData && chatData.chatData && chatData.chatData.length > 0) {
	        chats = chatData.chatData.map(function (chat) {
	          var messageType = chat.messageType;
	          var fileName = chat.message;
	          var fileId = chat.fileName;
	          var message;
	          if (chat.messageType == 'FILE' || chat.messageType == 'MEDIA') {
	            var chatMessage = chat.message.substring(chat.message.indexOf("_") + 1);
	            var link = "/uploads/" + chat.message;
	            var ext = chatMessage.split('.').pop();
	            var src = "/images/icons/" + ext + ".png";
	            message = _jsx('div', {}, void 0, _jsx('img', {
	              src: src
	            }), _jsx('span', {
	              className: _ConfSettings2.default.textField
	            }, void 0, chatMessage), _jsx(_reactRouter.Link, {
	              id: 'download',
	              href: link,
	              download: true
	            }, void 0, _jsx('span', {
	              className: _ConfSettings2.default.downloadFile
	            }, void 0, _ref2)));
	          } else if (chat.messageType == 'IMG') {
	            var _chatMessage = chat.message.substring(chat.message.indexOf("_") + 1);
	            var _src = "/uploads/" + chat.message;
	            message = _jsx('div', {}, void 0, _jsx('div', {
	              className: _ConfSettings2.default.chatMediaBox
	            }, void 0, _jsx('img', {
	              id: 'image',
	              src: _src,
	              title: _chatMessage,
	              onClick: _this3.handleImage.bind(_this3, chat.message, chat.messageType)
	            }, chat.message)), _jsx(_reactRouter.Link, {
	              id: 'download',
	              href: _src,
	              download: true
	            }, void 0, _jsx('span', {
	              className: _ConfSettings2.default.downloadMedia
	            }, void 0, _ref3)));
	          } else if (chat.messageType == 'VIDEO') {
	            var _chatMessage2 = chat.message.substring(chat.message.indexOf("_") + 1);
	            var _src2 = "/uploads/" + chat.message;
	            message = _jsx('div', {}, void 0, _jsx('div', {
	              className: _ConfSettings2.default.chatMediaBox
	            }, void 0, _jsx('video', {
	              id: 'video',
	              src: _src2,
	              title: _chatMessage2,
	              onClick: _this3.handleImage.bind(_this3, chat.message, chat.messageType)
	            }, chat.message)), _jsx(_reactRouter.Link, {
	              id: 'download',
	              href: _src2,
	              download: true
	            }, void 0, _jsx('span', {
	              className: _ConfSettings2.default.downloadMedia
	            }, void 0, _ref4)));
	          } else if (chat.messageType == 'VIMEO') {
	            var duration = '';
	            if (chat.duration) {
	              var m = chat.duration / 60 | 0;
	              var s = chat.duration % 60 | 0;
	              duration = _moment2.default.utc().minutes(m).seconds(s).format("mm:ss");
	            }
	            var _src3 = chat.vimeoThumbnail ? chat.vimeoThumbnail : "/images/black-icons/black-start.png";
	            var title = chat.title ? chat.title : 'No Name';
	            message = _jsx('div', {
	              className: _Dashboard2.default.mediaListBlock
	            }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, chat._id, _jsx(_reactRouter.Link, {}, void 0, _jsx('div', {
	              className: _Dashboard2.default.videoThubBox
	            }, void 0, _jsx('div', {
	              className: _Dashboard2.default.timeDisplay
	            }, void 0, _jsx('p', {}, void 0, duration)), _jsx('img', {
	              id: 'vimeo',
	              src: _src3,
	              onClick: _this3.handleURLVideo.bind(_this3, { fileId: fileId }, { messageType: messageType }),
	              title: title
	            }, fileId))), _jsx('label', {
	              title: title
	            }, void 0, title))));
	          } else if (chat.messageType == 'YOUTUBE') {
	            var _src4 = "http://img.youtube.com/vi/" + fileId + "/1.jpg";
	            var _title = chat.title ? chat.title : 'No Name';
	            message = _jsx('div', {
	              className: _Dashboard2.default.mediaListBlock
	            }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, chat._id, _jsx(_reactRouter.Link, {}, void 0, _jsx('div', {
	              className: _Dashboard2.default.videoThubBox
	            }, void 0, _jsx('div', {
	              className: _Dashboard2.default.timeDisplay
	            }, void 0, _jsx('p', {}, void 0, chat.duration ? _moment2.default.duration(chat.duration).minutes() + ":" + _moment2.default.duration(chat.duration).seconds() : null)), _jsx('img', {
	              id: 'youtube',
	              src: _src4,
	              width: '100',
	              height: '100',
	              onClick: _this3.handleURLVideo.bind(_this3, { fileId: fileId }, { messageType: messageType }),
	              title: _title
	            }, fileId))), _jsx('label', {
	              title: _title
	            }, void 0, _title))));
	          } else if (chat.messageType == 'URL') {
	            if (!fileName.match(/http/g)) {
	              var addHead = "https://";
	              var url = addHead + fileName;
	            } else {
	              var url = fileName;
	            }
	            message = _jsx('a', {
	              id: 'file',
	              href: url,
	              target: '_blank'
	            }, void 0, _jsx('p', {}, void 0, fileName));
	          } else {
	            message = _jsx('p', {}, void 0, chat.message);
	          }
	          var pic = '/images/profile-pics/defaultStudent.jpg';
	          var currDate = (0, _moment2.default)().endOf('day');
	          var msgDate = (0, _moment2.default)(chat.createdOn).endOf('day');
	          var sentOn = (0, _moment2.default)(chat.createdOn).seconds(0).format('hh:mm A');
	          if (+currDate > +msgDate) sentOn = (0, _moment2.default)(chat.createdOn).format('DD-MM-YY hh:mm A');
	          if (chat.sentBy._id == _this3.props.chatData.activeData._id) {
	
	            if (chat.sentBy && chat.sentBy.profile && chat.sentBy.profile.profileImage) pic = "/uploads/" + chat.sentBy.profile.profileImage;
	            return _jsx('div', {
	              className: _ConfSettings2.default.selfChatBox
	            }, chat._id, _jsx(_reactRouter.Link, {
	              className: guestStatus ? _ConfSettings2.default.avatarCircleGuest : _ConfSettings2.default.avatarCircle
	            }, void 0, _jsx('img', {
	              id: 'viewprofile',
	              src: pic,
	              onClick: _this3.viewUser.bind(_this3, chat.sentBy._id),
	              title: _this3.props.intl.messages.viewprofile
	            })), _jsx('p', {}, void 0, chat.sentBy.firstname, ' ', chat.sentBy.lastname), _jsx('h6', {}, void 0, sentOn), _jsx('div', {
	              className: _ConfSettings2.default.messageBox
	            }, void 0, message));
	          } else {
	            if (chat.sentBy && chat.sentBy.profile && chat.sentBy.profile.profileImage) pic = "/uploads/" + chat.sentBy.profile.profileImage;
	            return _jsx('div', {
	              className: _ConfSettings2.default.otherChatBox
	            }, chat._id, _jsx(_reactRouter.Link, {
	              className: _ConfSettings2.default.avatarCircle
	            }, void 0, _jsx('img', {
	              id: 'viewprofile',
	              src: pic,
	              onClick: _this3.viewUser.bind(_this3, chat.sentBy._id),
	              title: _this3.props.intl.messages.viewprofile
	            })), _jsx('p', {}, void 0, chat.sentBy.firstname, ' ', chat.sentBy.lastname), _jsx('h6', {}, void 0, sentOn), _jsx('div', {
	              className: _ConfSettings2.default.messageBox
	            }, void 0, message));
	          }
	        });
	      }
	      var lastname = chatData.activeData && chatData.activeData.lastname ? chatData.activeData.lastname : '';
	      var headName = chatData.chatType == 'Indi' ? chatData.activeData.firstname + " " + lastname : chatData.activeData.groupName;
	      return _jsx('aside', {
	        className: cls_chatsList,
	        id: 'blockIndiChat'
	      }, void 0, progressBar, _jsx('div', {
	        className: _ConfSettings2.default.tableBlock
	      }, void 0, _jsx('div', {
	        className: _ConfSettings2.default.modAsideHeader
	      }, void 0, _react2.default.createElement(_lib.ToastContainer, {
	        toastMessageFactory: ToastMessageFactory,
	        ref: 'chatscontainer',
	        className: _ConfSettings2.default.toastTop
	      }), _jsx('div', {
	        className: cls_headerList
	      }, void 0, _jsx('div', {
	        className: cls_block50_mob_back,
	        title: this.props.intl.messages.close,
	        id: 'closeIndiChat',
	        onClick: this.hideCallback
	      }, void 0, _ref5), _jsx(_reactRouter.Link, {
	        id: 'viewprofile',
	        className: cls_midTitle,
	        onClick: this.viewUser.bind(this, this.props.chatData.activeData._id),
	        title: this.props.intl.messages.viewprofile
	      }, void 0, _jsx('h2', {}, void 0, headName)), _jsx('div', {
	        className: cls_block50,
	        title: this.props.intl.messages.attach_file
	      }, void 0, _jsx('div', {
	        className: _ConfSettings2.default.fileUpload
	      }, void 0, _ref6, _react2.default.createElement('input', { type: 'file', ref: 'fileInput', id: 'fileInput', accept: '.xlsx,.xls,.doc, .docx,.ppt, .pptx,.txt,.pdf,.odp,.odt,.ods,.png,.jpeg,.jpg,.gif,.wav,.mp3,.wmv,application/zip,.mp4,.mkv', onChange: this.handleUpload.bind(this), value: '' }))))), _jsx('div', {
	        className: _ConfSettings2.default.modChatBody,
	        id: 'chatBody'
	      }, void 0, _jsx('div', {
	        className: _ConfSettings2.default.modChatContainer
	      }, void 0, chats)), _jsx('div', {
	        className: cls_modChatFooter
	      }, void 0, _jsx('div', {
	        className: cls_chatWrite
	      }, void 0, _react2.default.createElement('input', { id: 'chatInput', type: 'text', ref: 'chatinput', className: cls_formControl, placeholder: this.props.intl.messages.say_something, onChange: this.handleChange, value: this.state.msgContent, onKeyPress: this.handleChange })), _jsx('div', {
	        id: 'sendBtn',
	        className: cls_sendMessage,
	        title: this.props.intl.messages.push_the_message,
	        onClick: this.sendMsg
	      }, void 0, _ref7))), showImageModal);
	    }
	  }]);
	
	  return ConfChats;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    intl: state.intl,
	    loggedInData: (0, _LoginReducer.loggedInData)(state),
	    chatData: (0, _ChatReducer.chatData)(state)
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(ConfChats);

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
			value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _LoginActions = __webpack_require__(21);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _DashLayout = {
			"container": "_3MDDAV5-6IWoiIUW_vk7CC",
			"elasticWrapper": "R8LqGT-AW4U3mBKJ1MFvQ",
			"minimize": "_21MnHEkmOnrX-W0YKg26By",
			"footerFixed": "RdcUT5Wsmg6NbDJAwL0Md",
			"minimizeFooterFixed": "gbOmycGmduK-Yg4TTsE33",
			"elasticSideBar": "PPajvO_MDBlpK2G4OYyA8",
			"slideElasticSideBar": "_35chDIcwDNW7Nw5j2d-Zyx",
			"mobConf": "Kk9_BVy3rj24cvtuu_ns7"
	};
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _ConfSettings = {
			"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
			"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
			"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
			"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
			"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
			"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
			"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
			"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
			"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
			"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
			"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
			"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
			"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
			"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
			"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
			"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
			"block50": "_3KEUbD9sh-5efPnOe48KQu",
			"nohover": "m7jTOV3afDX3KYXfpJDuW",
			"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
			"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
			"active": "_3wgRcJQgpFwV1Tze6eaYAL",
			"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
			"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
			"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
			"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
			"backSearch": "w7BGjmEiChPoMYjET5k8R",
			"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
			"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
			"modContactList": "_1zmiGIPb92yNtOu845RHyM",
			"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
			"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
			"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
			"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
			"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
			"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
			"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
			"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
			"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
			"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
			"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
			"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
			"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
			"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
			"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
			"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
			"btn": "_27VXnOss6C0tcmiXDJyEQY",
			"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
			"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
			"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
			"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
			"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
			"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
			"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
			"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
			"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
			"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
			"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
			"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
			"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
			"radio": "_1YNHku8cDP1FxyBn3XkUJY",
			"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
			"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
			"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
			"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
			"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
			"downloadFile": "_33q4w5biPTOCecW_SwRklY",
			"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
			"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
			"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
			"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
			"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
			"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
			"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
			"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
			"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
			"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
			"iconBlock": "_1llySoPNa1j3k655fl2PNS",
			"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
			"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
			"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
			"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
			"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
			"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
			"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
			"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
			"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
			"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
			"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
			"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
			"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
			"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
			"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
			"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
			"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
			"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
			"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
			"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
			"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
			"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
			"centerBlock": "HLVHVZhqp-7yopt3Ah073",
			"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
			"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
			"btnTransport": "szHYW92cM7tgGZoXatQyg",
			"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
			"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
			"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
			"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
			"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
			"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
			"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
			"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
			"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
			"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
			"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
			"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
			"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
			"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
			"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
			"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _UserDashboardReducer = __webpack_require__(88);
	
	var _ChatReducer = __webpack_require__(39);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _AddContacts = __webpack_require__(191);
	
	var _AddContacts2 = _interopRequireDefault(_AddContacts);
	
	var _contactsList = __webpack_require__(199);
	
	var _contactsList2 = _interopRequireDefault(_contactsList);
	
	var _lib = __webpack_require__(45);
	
	var _SocketHandler = __webpack_require__(32);
	
	var _SocketHandler2 = _interopRequireDefault(_SocketHandler);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ToastMessageFactory = _react2.default.createFactory(_lib.ToastMessage.animation);
	
	var _ref = _jsx('img', {
			src: '/images/profile-pics/no-contacts.png'
	});
	
	var _ref2 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
			id: 'no_recent_contacts'
	}), _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
			id: 'add_your_contacts'
	})));
	
	var _ref3 = _jsx('img', {
			src: '/images/black-icons/black-left-arrow.png'
	});
	
	var _ref4 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
			id: 'my_contacts'
	}));
	
	var _ref5 = _jsx('img', {
			src: '/images/black-icons/black-right-arrow.png'
	});
	
	var _ref6 = _jsx('img', {
			src: '/images/black-icons/black-add-contacts.png'
	});
	
	var ConfContacts = function (_Component) {
			_inherits(ConfContacts, _Component);
	
			function ConfContacts() {
					_classCallCheck(this, ConfContacts);
	
					var _this = _possibleConstructorReturn(this, (ConfContacts.__proto__ || Object.getPrototypeOf(ConfContacts)).call(this));
	
					_this.state = {
							showAddContacts: false,
							uid: null,
							userId: null
					};
					return _this;
			}
	
			_createClass(ConfContacts, [{
					key: 'componentDidMount',
					value: function componentDidMount() {
							var result = this.props.loggedInData;
							if (result && result.data && result.data._id) {
									this.setState({ uid: result.data._id });
							}
							this.props.dispatch((0, _UserDashboardActions.getMyContacts)());
					}
			}, {
					key: 'showOrHideAddContacts',
					value: function showOrHideAddContacts(e) {
							this.setState({ showAddContacts: !this.state.showAddContacts });
					}
			}, {
					key: 'addUser',
					value: function addUser(userId) {
							var _this2 = this;
	
							this.setState({ userId: userId });
							var obj = {
									userId: userId
							};
							this.props.dispatch((0, _UserDashboardActions.AddUsertoContact)(obj)).then(function (res) {
									return _this2.showresponse(res);
							});
					}
			}, {
					key: 'showresponse',
					value: function showresponse(response) {
							//console.log("response == ",response);
							var socketObj = {
									command: "ADD-CONT",
									obj: {
											uid: this.state.uid,
											userId: this.state.userId
									}
							};
							_SocketHandler2.default.sendInstaMessage(socketObj, this.state.userId);
							if (response.status) {
									this.refs.contactcontainer.success(response.message, '');
									this.setState({ searchValue: '', searchUsers: [] });
							} else {
									if (response.error) {
											this.refs.contactcontainer.error(response.error, '');
									}
							}
					}
			}, {
					key: 'sendUserId',
					value: function sendUserId(userId) {
							console.log("userId ==== ", userId);
					}
			}, {
					key: 'requestResponse',
					value: function requestResponse(obj) {
							var _this3 = this;
	
							// console.log("obj === ",obj);
							this.setState({ userId: obj.userId });
							this.props.dispatch((0, _UserDashboardActions.requestResponse)(obj)).then(function (res) {
									return _this3.setresponse(res);
							});
					}
			}, {
					key: 'setresponse',
					value: function setresponse(response) {
							if (response.status) {
									var socketObj = {
											command: "CONT-RES",
											obj: {
													uid: this.state.uid,
													userId: this.state.userId
											}
									};
									_SocketHandler2.default.sendInstaMessage(socketObj, this.state.userId);
									this.refs.contactcontainer.success(response.message, '');
							} else if (response.error) {
									this.refs.contactcontainer.error(response.error, '');
							}
					}
			}, {
					key: 'chatCallback',
					value: function chatCallback() {
							this.props.handleMenu({ current: 'chats' });
					}
			}, {
					key: 'render',
					value: function render() {
							var _this4 = this;
	
							var cls_headerList = _ConfSettings2.default.modHeaderList + ' clearfix';
							var cls_midTitle = _ConfSettings2.default.midTitle + ' pull-left';
							var cls_block50 = _ConfSettings2.default.block50 + ' pull-right hidden-xs hidden-sm';
							var cls_block50_l = _ConfSettings2.default.block50 + ' pull-right';
							var cls_block50_mob_back = _ConfSettings2.default.block50 + ' pull-left hidden-lg hidden-md';
							var cls_headerText = _ConfSettings2.default.headerText + ' pull-left';
							var cls_optionBlock = _ConfSettings2.default.optionsBlock + ' pull-right';
							var cls_settingsOptions = _ConfSettings2.default.settingsOptionInput + ' ' + _ConfSettings2.default.radio;
							var cls_modChatFooter = _ConfSettings2.default.modChatFooter + ' clearfix';
							var cls_chatWrite = _ConfSettings2.default.chatWrite + ' pull-left';
							var cls_formControl = _ConfSettings2.default.formControl + ' ' + _ConfSettings2.default.formControlChatOverwrite;
							var cls_sendMessage = 'pull-right ' + _ConfSettings2.default.sendMessage;
							var cls_chatBox = _ConfSettings2.default.chatBox + ' ' + _ConfSettings2.default.bgTransition;
							var cls_callBox = _ConfSettings2.default.callBox + ' ' + _ConfSettings2.default.bgTransition;
	
							var cls_contactsList = _ConfSettings2.default.contactListFixed + ' ' + _ConfSettings2.default.openMyContacts;
	
							var contacts = _jsx('div', {
									className: _ConfSettings2.default.modNoContacts
							}, void 0, _jsx('div', {
									className: _ConfSettings2.default.noContactsCircle
							}, void 0, _ref), _ref2);
	
							if (this.props.dashboardData.mycontacts) {
									var docs = this.props.dashboardData.mycontacts;
									console.log("contact docs--", docs);
									if (docs.length > 0) {
											// console.log("docs === ",docs);
											// let key = 101;
											var _conferenceDetails = this.props.conferenceDetails;
											if (_conferenceDetails && _conferenceDetails.onlineStatus) {
													var onlineStatus = _conferenceDetails.onlineStatus;
													var notifications = this.props.chatData.individualCount;
													var offlinecontacts = [];
													var onlinecontacts = docs.map(function (doc) {
															if (doc._id && doc._id._id) {
																	if (_.indexOf(onlineStatus, doc._id._id) > -1) {
																			return _jsx(_contactsList2.default, {
																					value: doc,
																					getUserId: _this4.sendUserId.bind(_this4),
																					chatCallback: _this4.chatCallback.bind(_this4),
																					requestResponse: _this4.requestResponse.bind(_this4),
																					online: 1,
																					count: notifications && notifications[doc._id._id] && notifications[doc._id._id] > 0 ? notifications[doc._id._id] : null
																			}, doc._id._id);
																	} else {
																			offlinecontacts.push(_jsx(_contactsList2.default, {
																					value: doc,
																					getUserId: _this4.sendUserId.bind(_this4),
																					chatCallback: _this4.chatCallback.bind(_this4),
																					requestResponse: _this4.requestResponse.bind(_this4),
																					online: -1,
																					count: notifications && notifications[doc._id._id] && notifications[doc._id._id] > 0 ? notifications[doc._id._id] : null
																			}, doc._id._id));
																			return null;
																	}
															} else {
																	return null;
															}
													});
													contacts = _jsx('div', {
															className: _ConfSettings2.default.modContactList
													}, void 0, _jsx('ul', {}, void 0, onlinecontacts, offlinecontacts));
											}
									}
							}
	
							return _jsx('aside', {
									className: cls_contactsList,
									id: 'blockMyContacts'
							}, void 0, _jsx('div', {
									className: _ConfSettings2.default.tableBlock
							}, void 0, _jsx('div', {
									className: _ConfSettings2.default.modAsideHeader
							}, void 0, _jsx('div', {
									className: cls_headerList
							}, void 0, _react2.default.createElement(_lib.ToastContainer, {
									toastMessageFactory: ToastMessageFactory,
									ref: 'contactcontainer',
									className: _ConfSettings2.default.toastTop
							}), _jsx('div', {
									className: cls_block50_mob_back,
									onClick: this.props.hideCallback,
									title: this.props.intl.messages.close,
									id: 'closeMyContacts'
							}, void 0, _ref3), _jsx('div', {
									className: cls_midTitle
							}, void 0, _ref4), _jsx(_AddContacts2.default, {
									showModal: this.state.showAddContacts,
									hidecallback: this.showOrHideAddContacts.bind(this),
									getUserId: this.addUser.bind(this),
									uid: this.state.uid,
									contactsData: this.props.dashboardData.mycontacts,
									requestResponse: this.requestResponse.bind(this)
							}), _jsx('div', {
									className: cls_block50,
									onClick: this.props.hideCallback,
									title: this.props.intl.messages.close,
									id: 'closeMyContacts'
							}, void 0, _ref5), _jsx('div', {
									className: cls_block50_l,
									title: this.props.intl.messages.add_contacts,
									onClick: this.showOrHideAddContacts.bind(this),
									id: 'iconMyContact'
							}, void 0, _ref6))), _jsx('div', {
									className: _ConfSettings2.default.modAsideListBody
							}, void 0, contacts)));
					}
			}]);
	
			return ConfContacts;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
			return {
					intl: state.intl,
					dashboardData: (0, _UserDashboardReducer.dashboardData)(state),
					loggedInData: (0, _LoginReducer.loggedInData)(state),
					conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state),
					chatData: (0, _ChatReducer.chatData)(state)
			};
	}
	
	ConfContacts.contextTypes = {
			router: _react2.default.PropTypes.object
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(ConfContacts);
	
	/*ConfContacts.propTypes = {
	    intl: PropTypes.object,
	  	currentState: PropTypes.object,
	  	hideCallback: PropTypes.func,
	  	chatCallback: PropTypes.func,
	};*/

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _DashLayout = {
		"container": "_3MDDAV5-6IWoiIUW_vk7CC",
		"elasticWrapper": "R8LqGT-AW4U3mBKJ1MFvQ",
		"minimize": "_21MnHEkmOnrX-W0YKg26By",
		"footerFixed": "RdcUT5Wsmg6NbDJAwL0Md",
		"minimizeFooterFixed": "gbOmycGmduK-Yg4TTsE33",
		"elasticSideBar": "PPajvO_MDBlpK2G4OYyA8",
		"slideElasticSideBar": "_35chDIcwDNW7Nw5j2d-Zyx",
		"mobConf": "Kk9_BVy3rj24cvtuu_ns7"
	};
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _ConfSettings = {
		"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
		"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
		"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
		"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
		"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
		"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
		"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
		"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
		"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
		"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
		"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
		"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
		"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
		"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
		"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
		"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
		"block50": "_3KEUbD9sh-5efPnOe48KQu",
		"nohover": "m7jTOV3afDX3KYXfpJDuW",
		"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
		"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
		"active": "_3wgRcJQgpFwV1Tze6eaYAL",
		"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
		"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
		"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
		"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
		"backSearch": "w7BGjmEiChPoMYjET5k8R",
		"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
		"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
		"modContactList": "_1zmiGIPb92yNtOu845RHyM",
		"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
		"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
		"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
		"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
		"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
		"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
		"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
		"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
		"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
		"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
		"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
		"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
		"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
		"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
		"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
		"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
		"btn": "_27VXnOss6C0tcmiXDJyEQY",
		"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
		"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
		"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
		"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
		"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
		"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
		"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
		"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
		"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
		"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
		"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
		"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
		"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
		"radio": "_1YNHku8cDP1FxyBn3XkUJY",
		"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
		"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
		"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
		"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
		"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
		"downloadFile": "_33q4w5biPTOCecW_SwRklY",
		"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
		"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
		"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
		"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
		"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
		"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
		"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
		"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
		"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
		"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
		"iconBlock": "_1llySoPNa1j3k655fl2PNS",
		"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
		"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
		"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
		"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
		"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
		"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
		"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
		"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
		"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
		"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
		"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
		"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
		"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
		"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
		"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
		"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
		"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
		"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
		"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
		"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
		"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
		"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
		"centerBlock": "HLVHVZhqp-7yopt3Ah073",
		"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
		"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
		"btnTransport": "szHYW92cM7tgGZoXatQyg",
		"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
		"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
		"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
		"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
		"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
		"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
		"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
		"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
		"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
		"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
		"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
		"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
		"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
		"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
		"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
		"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _VideoQuality = __webpack_require__(198);
	
	var _VideoQuality2 = _interopRequireDefault(_VideoQuality);
	
	var _Language = __webpack_require__(196);
	
	var _Language2 = _interopRequireDefault(_Language);
	
	var _Help = __webpack_require__(195);
	
	var _Help2 = _interopRequireDefault(_Help);
	
	var _IntlActions = __webpack_require__(37);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _RightBarActions = __webpack_require__(67);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('img', {
		src: '/images/black-icons/black-left-arrow.png'
	});
	
	var _ref2 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'settings'
	}));
	
	var _ref3 = _jsx('img', {
		src: '/images/black-icons/black-right-arrow.png'
	});
	
	var _ref4 = _jsx('span', {}, void 0, _jsx('img', {
		src: '/images/black-icons/black-video.png'
	}));
	
	var _ref5 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'video_quality'
	}));
	
	var _ref6 = _jsx('span', {}, void 0, _jsx('img', {
		src: '/images/black-icons/black-language.png'
	}));
	
	var _ref7 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'languages'
	}));
	
	var _ref8 = _jsx('span', {}, void 0, _jsx('img', {
		src: '/images/black-icons/black-help.png'
	}));
	
	var _ref9 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'help'
	}));
	
	var ConfSettings = function (_Component) {
		_inherits(ConfSettings, _Component);
	
		function ConfSettings() {
			_classCallCheck(this, ConfSettings);
	
			var _this = _possibleConstructorReturn(this, (ConfSettings.__proto__ || Object.getPrototypeOf(ConfSettings)).call(this));
	
			_this.confObject = new _WoogeenManager2.default();
			_this.state = {
				videoQuality: false,
				language: false,
				help: false,
				active: 0,
				pathname: ''
	
			};
			return _this;
		}
	
		_createClass(ConfSettings, [{
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				this.setState({ pathname: nextProps.pathname });
			}
		}, {
			key: 'videoquality',
			value: function videoquality(e) {
				if (!this.state.videoQuality) {
					this.setState({
						videoQuality: !this.state.videoQuality,
						language: false,
						help: false,
						active: 0
					});
				}
			}
		}, {
			key: 'language',
			value: function language(e) {
				if (!this.state.language) {
					this.setState({
						videoQuality: false,
						language: !this.state.language,
						help: false,
						active: 1
					});
				}
			}
		}, {
			key: 'help',
			value: function help(e) {
				if (!this.state.help) {
					this.setState({
						videoQuality: false,
						language: false,
						help: !this.state.help,
						active: 2
					});
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var cls_headerList = _ConfSettings2.default.modHeaderList + ' clearfix';
				var cls_midTitle = _ConfSettings2.default.midTitle + ' pull-left';
				var cls_block50 = _ConfSettings2.default.block50 + ' pull-right hidden-xs hidden-sm';
				var cls_block50_mob_back = _ConfSettings2.default.block50 + ' pull-left hidden-lg hidden-md';
				var cls_headerText = _ConfSettings2.default.headerText + ' pull-left';
				var cls_optionBlock = _ConfSettings2.default.optionsBlock + ' pull-right';
				var cls_settingsOptions = _ConfSettings2.default.settingsOptionInput + ' ' + _ConfSettings2.default.radio;
				var cls_elasticBar = _DashLayout2.default.elasticSideBar + ' ' + _DashLayout2.default.slideElasticSideBar;
				var video = '';
				var language = '';
				var help = '';
				var loginType = "";
				var data = this.props.loggedInData.data;
				if (data && data.profile && data.profile.companyid && data.profile.companyid.businessType) {
					//console.log(data.profile.companyid.businessType)
					loginType = data.profile.companyid.businessType;
				}
	
				if (this.state.active == 0) {
					video = '' + _ConfSettings2.default.active;
				} else if (this.state.active == 1) {
					language = '' + _ConfSettings2.default.active;
				} else {
					help = '' + _ConfSettings2.default.active;
				}
	
				return _jsx('aside', {
					className: cls_elasticBar,
					id: 'blockSettingsOptions'
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.tableBlock
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.modAsideHeader
				}, void 0, _jsx('div', {
					className: cls_headerList
				}, void 0, _jsx('div', {
					className: cls_block50_mob_back,
					onClick: this.props.hideCallback,
					title: this.props.intl.messages.close,
					id: 'closeSettingsOptions'
				}, void 0, _ref), _jsx('div', {
					className: cls_midTitle
				}, void 0, _ref2), _jsx('div', {
					className: cls_block50,
					onClick: this.props.hideCallback,
					title: this.props.intl.messages.close,
					id: 'closeSettingsOptions'
				}, void 0, _ref3))), _jsx('div', {
					className: _ConfSettings2.default.tableBlockRow
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.tableBlockCell
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.modAsideHeaderWhite
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.modHeaderWhiteList
				}, void 0, _jsx('ul', {
					className: 'clearfix'
				}, void 0, !this.confObject.getConnectionStatus() ? _jsx('li', {
					className: video
				}, void 0, _jsx('a', {
					id: 'videoQuality',
					title: this.props.intl.messages.set_video_qulity,
					onClick: this.videoquality.bind(this)
				}, void 0, _ref4, _ref5)) : null, _jsx('li', {
					className: language,
					style: this.confObject.getConnectionStatus() ? { width: "50%" } : {}
				}, void 0, _jsx('a', {
					id: 'language',
					title: this.props.intl.messages.set_language,
					onClick: this.language.bind(this)
				}, void 0, _ref6, _ref7)), _jsx('li', {
					className: help,
					style: this.confObject.getConnectionStatus() ? { width: "50%" } : {}
				}, void 0, _jsx('a', {
					id: 'help',
					title: this.props.intl.messages.help,
					onClick: this.help.bind(this)
				}, void 0, _ref8, _ref9))))), this.state.videoQuality == true ? _jsx(_VideoQuality2.default, {
					currentState: this.state,
					pathname: this.state.pathname
				}) : this.state.language == true ? _jsx(_Language2.default, {
					currentState: this.state,
					loginType: loginType
				}) : this.state.help == true ? _jsx(_Help2.default, {
					currentState: this.state
				}) : !this.confObject.getConnectionStatus() ? _jsx(_VideoQuality2.default, {
					currentState: this.state,
					pathname: this.state.pathname
				}) : _jsx(_Language2.default, {
					currentState: this.state,
					loginType: loginType
				})))));
			}
		}]);
	
		return ConfSettings;
	}(_react.Component);
	
	function mapStateToProps(state) {
		return {
			intl: state.intl,
			switchLanguage: state.switchLanguage,
			loggedInData: (0, _LoginReducer.loggedInData)(state)
		};
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(ConfSettings);

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
				value: true
	});
	exports.Help = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _DashLayout = {
				"container": "_3MDDAV5-6IWoiIUW_vk7CC",
				"elasticWrapper": "R8LqGT-AW4U3mBKJ1MFvQ",
				"minimize": "_21MnHEkmOnrX-W0YKg26By",
				"footerFixed": "RdcUT5Wsmg6NbDJAwL0Md",
				"minimizeFooterFixed": "gbOmycGmduK-Yg4TTsE33",
				"elasticSideBar": "PPajvO_MDBlpK2G4OYyA8",
				"slideElasticSideBar": "_35chDIcwDNW7Nw5j2d-Zyx",
				"mobConf": "Kk9_BVy3rj24cvtuu_ns7"
	};
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _ConfSettings = {
				"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
				"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
				"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
				"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
				"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
				"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
				"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
				"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
				"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
				"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
				"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
				"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
				"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
				"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
				"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
				"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
				"block50": "_3KEUbD9sh-5efPnOe48KQu",
				"nohover": "m7jTOV3afDX3KYXfpJDuW",
				"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
				"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
				"active": "_3wgRcJQgpFwV1Tze6eaYAL",
				"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
				"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
				"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
				"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
				"backSearch": "w7BGjmEiChPoMYjET5k8R",
				"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
				"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
				"modContactList": "_1zmiGIPb92yNtOu845RHyM",
				"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
				"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
				"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
				"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
				"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
				"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
				"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
				"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
				"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
				"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
				"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
				"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
				"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
				"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
				"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
				"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
				"btn": "_27VXnOss6C0tcmiXDJyEQY",
				"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
				"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
				"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
				"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
				"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
				"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
				"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
				"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
				"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
				"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
				"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
				"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
				"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
				"radio": "_1YNHku8cDP1FxyBn3XkUJY",
				"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
				"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
				"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
				"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
				"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
				"downloadFile": "_33q4w5biPTOCecW_SwRklY",
				"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
				"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
				"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
				"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
				"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
				"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
				"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
				"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
				"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
				"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
				"iconBlock": "_1llySoPNa1j3k655fl2PNS",
				"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
				"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
				"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
				"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
				"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
				"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
				"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
				"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
				"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
				"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
				"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
				"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
				"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
				"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
				"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
				"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
				"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
				"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
				"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
				"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
				"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
				"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
				"centerBlock": "HLVHVZhqp-7yopt3Ah073",
				"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
				"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
				"btnTransport": "szHYW92cM7tgGZoXatQyg",
				"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
				"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
				"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
				"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
				"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
				"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
				"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
				"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
				"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
				"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
				"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
				"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
				"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
				"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
				"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
				"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('li', {}, void 0, _jsx('a', {
				id: 'supportCenter',
				href: 'http://helpdesk.instavc.com/',
				target: '_blank'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
				id: 'support_center'
	})));
	
	var _ref2 = _jsx('li', {}, void 0, _jsx('a', {
				id: 'openNewTicket',
				href: 'http://helpdesk.instavc.com/open.php',
				target: '_blank'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
				id: 'open_a_new_ticket'
	})));
	
	var _ref3 = _jsx('li', {}, void 0, _jsx('a', {
				id: 'checkTicketStatus',
				href: 'http://helpdesk.instavc.com/view.php',
				target: '_blank'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
				id: 'check_ticket_status'
	})));
	
	var _ref4 = _jsx('li', {}, void 0, _jsx('a', {
				id: 'troubleshoot',
				href: 'https://test.webrtc.org/',
				target: '_blank'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
				id: 'troubleshoot'
	})));
	
	var Help = exports.Help = function (_Component) {
				_inherits(Help, _Component);
	
				function Help() {
							_classCallCheck(this, Help);
	
							return _possibleConstructorReturn(this, (Help.__proto__ || Object.getPrototypeOf(Help)).apply(this, arguments));
				}
	
				_createClass(Help, [{
							key: 'render',
							value: function render() {
	
										var cls_headerList = _ConfSettings2.default.modHeaderList + ' clearfix';
										var cls_midTitle = _ConfSettings2.default.midTitle + ' pull-left';
										var cls_block50 = _ConfSettings2.default.block50 + ' pull-right';
										var cls_headerText = _ConfSettings2.default.headerText + ' pull-left';
										var cls_optionBlock = _ConfSettings2.default.optionsBlock + ' pull-right';
										var cls_settingsOptions = _ConfSettings2.default.settingsOptionInput + ' ' + _ConfSettings2.default.radio;
										var cls_elasticBar = '' + _DashLayout2.default.elasticSideBar;
	
										return _jsx('div', {
													className: _ConfSettings2.default.asideBodySecondary
										}, void 0, _jsx('ul', {
													className: _ConfSettings2.default.helpdesk
										}, void 0, _ref, _ref2, _ref3, _ref4));
							}
				}]);
	
				return Help;
	}(_react.Component);
	
	exports.default = (0, _reactIntl.injectIntl)(Help);

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Language = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _IntlActions = __webpack_require__(37);
	
	var _DashLayout = {
		"container": "_3MDDAV5-6IWoiIUW_vk7CC",
		"elasticWrapper": "R8LqGT-AW4U3mBKJ1MFvQ",
		"minimize": "_21MnHEkmOnrX-W0YKg26By",
		"footerFixed": "RdcUT5Wsmg6NbDJAwL0Md",
		"minimizeFooterFixed": "gbOmycGmduK-Yg4TTsE33",
		"elasticSideBar": "PPajvO_MDBlpK2G4OYyA8",
		"slideElasticSideBar": "_35chDIcwDNW7Nw5j2d-Zyx",
		"mobConf": "Kk9_BVy3rj24cvtuu_ns7"
	};
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _main = {
		"btnPrimaryDark": "_31E9BurxzSEZnZC6S2rB5i",
		"bgPrimaryDark": "_2U4iOoVT93HKc6TY3Yhpc8",
		"bgPrimaryDarkA": "_1kioQADujZQ6TylOsfwy3L",
		"bgPrimaryDarkB": "_1iXfj7aYHjrOoIILdN4Uw3",
		"bgPrimary": "_1eK_OqsdSKH6Ww14uPaJ-4",
		"bgPrimaryLight": "_2s26DqNxbSnMNHChD0fpY3",
		"foreColorLight100": "T_G37ZhGLHSGeORUFaMGE",
		"foreColorLight70": "_2s1NjQ5Os0T964m8FaqeAV",
		"foreColorLight50": "_1smo35s1EBd6PlFlaTmOVT",
		"foreColorDark100": "_2BQEmwS-UHhbhJLvwvdFtV",
		"foreColorDark87": "_2TaP0tSvqsm7R6gPLNyFBO",
		"foreColorDark54": "_3IMx-j5u7S6iNsiWtcAKjJ",
		"foreColorDark38": "_29qeAGFHlesOKs1n-FhSpY",
		"mgRight8": "_2hSetRh-Ja8K0N9ugkdfvT",
		"modDropDown": "_2R3XlZjoybwKUxENLMh2D-",
		"infoBlock": "_1n2gUV7cowzrB_Q3Yc8GMV",
		"showInfoBlock": "_1KPirtUqPRullNjnHLv7LC",
		"active": "_3T56peYWObpewAcj6MML28",
		"statusCircle": "_25sEi_zFmPv-fWxe-9MhLN",
		"bgAway": "_3v9ju8fA80XxQaqa1JzHoa",
		"bgDntDistrub": "i3G3SAQvPmTDyNd3mqXQl",
		"bgOffline": "f3sfBt6PB_loBH2cYTt09",
		"bgOnline": "_3K5QKZdjTbK5514T6P-Vx4",
		"modDropDownDrop": "_1wdzau3GcxE3Etdf3q-iEY",
		"selected": "_32LRSkR2VkBF3JW2X7mDtl",
		"modPad": "_3YowDb-oIWUYi2P_azLYfo",
		"inputGroup": "_2JGglWuzl2RwpWz98wQEKx",
		"inputField": "_28ySg1xadRN73pLPNyS0eY",
		"inputGroupAddon": "_29jkAz3K2WA1HpPt6oZbbX",
		"userNameCap": "_2ZB0G3KF0RvESXUb7c5rkn"
	};
	
	var _main2 = _interopRequireDefault(_main);
	
	var _ConfSettings = {
		"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
		"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
		"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
		"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
		"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
		"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
		"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
		"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
		"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
		"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
		"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
		"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
		"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
		"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
		"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
		"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
		"block50": "_3KEUbD9sh-5efPnOe48KQu",
		"nohover": "m7jTOV3afDX3KYXfpJDuW",
		"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
		"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
		"active": "_3wgRcJQgpFwV1Tze6eaYAL",
		"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
		"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
		"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
		"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
		"backSearch": "w7BGjmEiChPoMYjET5k8R",
		"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
		"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
		"modContactList": "_1zmiGIPb92yNtOu845RHyM",
		"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
		"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
		"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
		"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
		"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
		"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
		"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
		"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
		"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
		"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
		"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
		"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
		"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
		"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
		"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
		"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
		"btn": "_27VXnOss6C0tcmiXDJyEQY",
		"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
		"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
		"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
		"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
		"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
		"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
		"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
		"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
		"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
		"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
		"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
		"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
		"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
		"radio": "_1YNHku8cDP1FxyBn3XkUJY",
		"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
		"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
		"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
		"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
		"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
		"downloadFile": "_33q4w5biPTOCecW_SwRklY",
		"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
		"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
		"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
		"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
		"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
		"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
		"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
		"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
		"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
		"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
		"iconBlock": "_1llySoPNa1j3k655fl2PNS",
		"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
		"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
		"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
		"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
		"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
		"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
		"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
		"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
		"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
		"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
		"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
		"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
		"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
		"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
		"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
		"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
		"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
		"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
		"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
		"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
		"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
		"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
		"centerBlock": "HLVHVZhqp-7yopt3Ah073",
		"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
		"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
		"btnTransport": "szHYW92cM7tgGZoXatQyg",
		"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
		"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
		"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
		"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
		"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
		"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
		"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
		"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
		"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
		"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
		"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
		"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
		"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
		"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
		"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
		"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Language = exports.Language = function (_Component) {
		_inherits(Language, _Component);
	
		function Language() {
			_classCallCheck(this, Language);
	
			return _possibleConstructorReturn(this, (Language.__proto__ || Object.getPrototypeOf(Language)).apply(this, arguments));
		}
	
		_createClass(Language, [{
			key: 'changeLanguage',
			value: function changeLanguage(lang) {
				console.log("lang", lang);
				this.props.dispatch((0, _IntlActions.switchLanguage)(lang, this.props.loginType, lang));
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;
	
				var cls_headerList = _ConfSettings2.default.modHeaderList + ' clearfix';
				var cls_midTitle = _ConfSettings2.default.midTitle + ' pull-left';
				var cls_block50 = _ConfSettings2.default.block50 + ' pull-right';
				var cls_headerText = _ConfSettings2.default.headerText + ' pull-left';
				var cls_optionBlock = _ConfSettings2.default.optionsBlock + ' pull-right';
				var cls_settingsOptions = _ConfSettings2.default.settingsOptionInput + ' ' + _ConfSettings2.default.radio;
				var cls_elasticBar = '' + _DashLayout2.default.elasticSideBar;
				var cls_li = '' + _main2.default.selected;
				//console.log("this.props.loginType", this.props.loginType);
				var languageNodes = this.props.intl.enabledLanguages.map(function (lang) {
					return _jsx('li', {
						className: 'clearfix'
					}, lang[1], _jsx('div', {
						className: cls_headerText
					}, void 0, _jsx('h2', {}, void 0, lang[0]), ' '), _jsx('div', {
						className: cls_optionBlock
					}, void 0, _jsx('label', {}, void 0, _jsx('input', {
						id: 'changeLanguage',
						type: 'radio',
						onClick: function onClick() {
							return _this2.changeLanguage(lang[1]);
						},
						name: 'languagechk',
						className: cls_settingsOptions,
						defaultChecked: lang[1] === _this2.props.intl.locale
					}))));
				});
	
				return _jsx('div', {
					className: _ConfSettings2.default.asideBodySecondary
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.modSelectChoice
				}, void 0, _jsx('ul', {}, void 0, languageNodes)));
			}
		}]);
	
		return Language;
	}(_react.Component);
	
	function mapStateToProps(state) {
		return {
			intl: state.intl
		};
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(Language);

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ShowUser = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Admin = {
	  "form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
	  "progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
	  "progress": "_32kzRKjl47M7AcFAivyyho",
	  "progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
	  "progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
	  "backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
	  "containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
	  "googleContainer": "_1G8DyX--1Xskim3uSHbxil",
	  "googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
	  "googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
	  "header": "_2xHja59x-eRkfv95koY1ce",
	  "hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
	  "body": "_1wybmROxdPMB2DSkLyTGGx",
	  "navRight": "_2fWAne55trxpJYagJCezpL",
	  "navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
	  "active": "_1mqL1x9MCLjw6_Ok5T24oF",
	  "midContainer": "_1oKiSeTflL6v2wZC13o7oC",
	  "formField": "P8wcycRRhQUOqnf0qytj0",
	  "profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
	  "fullname": "m8-V01m5JYGd00wGYRCbo",
	  "position": "aCZ3mMjMPWmB1Xr4poVi_",
	  "txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
	  "plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
	  "inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
	  "inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
	  "inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
	  "inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
	  "labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
	  "viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
	  "avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
	  "avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
	  "imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
	  "avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
	  "profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
	  "avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
	  "avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
	  "whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
	  "whiteTile": "KCFNekbG6kNm7QCCmxcOC",
	  "customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
	  "mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
	  "infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
	  "headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
	  "headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
	  "headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
	  "actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
	  "headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
	  "headingTxt": "IA7VynD7jO_xLZWz7aACg",
	  "userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
	  "userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
	  "userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
	  "userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
	  "searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
	  "searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
	  "searchBox": "_79ROL_K6mHBW5o2LSPYyD",
	  "whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
	  "whiteIconSearch": "_8753oABxDX3rcNGmogytj",
	  "chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
	  "chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
	  "whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
	  "whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
	  "whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
	  "userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
	  "modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
	  "invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
	  "brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
	  "imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
	  "fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
	  "checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
	  "fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
	  "inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
	  "accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
	  "accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
	  "roomLink": "_3GAUEPkkabqWlcSfevhUau",
	  "multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
	  "inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
	  "gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
	  "gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
	  "gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
	  "gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
	  "gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
	  "groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
	  "groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
	  "avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
	  "avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
	  "removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
	  "locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
	  "locationContainer": "GqFlk81qWkoM8pg8rM9mT",
	  "locationHeader": "mgZJ5PYIcU3xilagy40bF",
	  "deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
	  "locationBody": "_9tu9wEbJADVdffughhYgF",
	  "remove": "_2qTNEmDNBxEEHjfsZx6jUU",
	  "viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
	  "studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
	  "addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
	  "removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
	  "studentblock": "_1npAxnK_u_EjOeG19x_gPa",
	  "studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
	  "participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
	  "tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
	  "tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
	  "thStyle": "_253KYsN6UeeVvx_kTT0FTG",
	  "hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
	  "removeStyle": "XmJHLhTym-EGI-3dZGbWc",
	  "attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
	  "highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
	  "highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
	  "lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
	  "lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
	  "removePdng": "j5wasHyxigllgK3-KBNZp",
	  "endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
	  "dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
	  "dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
	  "applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
	  "filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
	  "gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
	  "facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
	  "btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
	  "btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
	  "fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
	  "fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
	  "googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
	  "inLine": "_3SKSHSNT9quu0AEumeGTQT",
	  "inputGrade": "_2Q0ilim6NermuOEyggbVkC",
	  "flexContainer": "_3ELNW3V19Qpndrzsv3951F",
	  "actionRightAbs": "_1uuENocETyaOc2rRiwior5",
	  "closebtn": "_2GrTt3NBt2HkOlxHF614-3",
	  "editClosebtn": "wpV9V72-_ceslWX8JrnXB",
	  "first": "_35E4iHqMVJmbMgmzKL6Tv5",
	  "headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
	  "flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
	  "formH5": "_23XBDJVodLOklMKND6BFwz",
	  "qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
	  "editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
	  "formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
	  "blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
	  "blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
	  "btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
	  "btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
	  "blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
	  "btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
	  "btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
	  "btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
	  "blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
	  "btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
	  "btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
	  "inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
	  "diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
	  "gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
	  "gTextg": "_1SEMPATJm2_wne7kQlcG10",
	  "gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
	  "errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
	  "mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
	  "rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
	  "seprator": "_2UGm2z7pTnp444hmFIFOIp",
	  "checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
	  "inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
	  "localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
	  "localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
	  "nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
	  "allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
	  "proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
	  "popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
	  "textCapAll": "dmP3hNbZiWb10oxof-KKb",
	  "stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
	  "stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
	  "topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
	  "emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
	  "txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
	  "addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
	  "addStudPop2": "pJUMNDAuP9bGHel-6ESf",
	  "addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
	  "addStudText": "bfDwzSKIRHVbJQpazT_Il",
	  "changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
	  "fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
	  "fdInfo": "jkgczk2IOaooUA2sdYQcY",
	  "fdName": "_1GOg26hVpb9pUXFN9I9y75",
	  "fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
	  "fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
	  "fdAns": "_25xB1C18_oF2MVuf5cn3zq",
	  "errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
	  "qleditor": "_17N2ULf7_DBC-wvog56baS",
	  "txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
	  "addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
	  "progress-bar": "A2ftBZ69PzksWTqo3GY0k",
	  "formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
	  "mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
	  "innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
	  "loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _ConfSettings = {
	  "contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
	  "attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
	  "groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
	  "indiChatFixed": "_121x6wkYY9bMxq2znilpes",
	  "settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
	  "openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
	  "openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
	  "openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
	  "onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
	  "onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
	  "tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
	  "tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
	  "tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
	  "modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
	  "modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
	  "modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
	  "block50": "_3KEUbD9sh-5efPnOe48KQu",
	  "nohover": "m7jTOV3afDX3KYXfpJDuW",
	  "fileUpload": "_1Ta80WwlyVY6khGgoelZff",
	  "modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
	  "active": "_3wgRcJQgpFwV1Tze6eaYAL",
	  "modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
	  "noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
	  "modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
	  "navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
	  "backSearch": "w7BGjmEiChPoMYjET5k8R",
	  "subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
	  "topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
	  "modContactList": "_1zmiGIPb92yNtOu845RHyM",
	  "chatBox": "_2taDr3sNLvZl64o7TkBTEg",
	  "callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
	  "midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
	  "modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
	  "contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
	  "avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
	  "contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
	  "listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
	  "onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
	  "busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
	  "bgOffline": "jL-R5aQBwO_2EmgAsiay1",
	  "bgOnline": "_3TEYblB_gY5codKEtLqX7q",
	  "adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
	  "addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
	  "formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
	  "inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
	  "btn": "_27VXnOss6C0tcmiXDJyEQY",
	  "btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
	  "topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
	  "modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
	  "addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
	  "btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
	  "btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
	  "contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
	  "asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
	  "modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
	  "headerText": "_2POMQ33JzpZXRKNQwhKTpK",
	  "optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
	  "settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
	  "click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
	  "radio": "_1YNHku8cDP1FxyBn3XkUJY",
	  "modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
	  "modChatContainer": "_21msPTbxn87ey3RWsSt_35",
	  "selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
	  "avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
	  "messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
	  "downloadFile": "_33q4w5biPTOCecW_SwRklY",
	  "downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
	  "textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
	  "otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
	  "chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
	  "modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
	  "chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
	  "formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
	  "sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
	  "avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
	  "setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
	  "iconBlock": "_1llySoPNa1j3k655fl2PNS",
	  "passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
	  "meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
	  "meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
	  "inputError": "_30zq1PCjl9v2jnkrDEFjSK",
	  "formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
	  "calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
	  "endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
	  "schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
	  "schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
	  "schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
	  "onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
	  "repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
	  "repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
	  "schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
	  "schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
	  "inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
	  "setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
	  "dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
	  "actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
	  "actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
	  "indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
	  "alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
	  "centerBlock": "HLVHVZhqp-7yopt3Ah073",
	  "btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
	  "transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
	  "btnTransport": "szHYW92cM7tgGZoXatQyg",
	  "helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
	  "sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
	  "scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
	  "scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
	  "sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
	  "sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
	  "sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
	  "popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
	  "btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
	  "emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
	  "formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
	  "formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
	  "colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
	  "colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
	  "endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
	  "toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _lib = __webpack_require__(45);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ToastMessageFactory = _react2.default.createFactory(_lib.ToastMessage.animation);
	
	var _ref = _jsx('span', {}, void 0, 'Pending');
	
	var _ref2 = _jsx('img', {
	  src: '/images/icons/green-check.png'
	});
	
	var _ref3 = _jsx('img', {
	  src: '/images/icons/red-cross.png'
	});
	
	var _ref4 = _jsx('span', {}, void 0, 'Accepted');
	
	var _ref5 = _jsx('span', {}, void 0, 'Rejected');
	
	var ShowUser = exports.ShowUser = function (_Component) {
	  _inherits(ShowUser, _Component);
	
	  function ShowUser() {
	    _classCallCheck(this, ShowUser);
	
	    return _possibleConstructorReturn(this, (ShowUser.__proto__ || Object.getPrototypeOf(ShowUser)).apply(this, arguments));
	  }
	
	  _createClass(ShowUser, [{
	    key: 'sendUserId',
	    value: function sendUserId(e) {
	      var userId = e.target.id;
	      // console.log(userId);
	      if (userId && userId != 'undefined') this.props.getUserId(userId);
	    }
	  }, {
	    key: 'acceptrequest',
	    value: function acceptrequest(e) {
	      var obj = {
	        userId: e.currentTarget.id,
	        response: _UserDashboardActions.contactRequest.Accept
	      };
	      this.props.requestResponse(obj);
	    }
	  }, {
	    key: 'rejectrequest',
	    value: function rejectrequest(e) {
	      var obj = {
	        userId: e.currentTarget.id,
	        response: _UserDashboardActions.contactRequest.Reject
	      };
	      this.props.requestResponse(obj);
	    }
	  }, {
	    key: 'renderOptions',
	    value: function renderOptions() {
	      if (this.props) {
	        var data = this.props.contactsData;
	        // console.log("data === ",data);
	        var user = this.props.value;
	        var index = _.findIndex(data, function (obj) {
	          return obj._id && obj._id._id ? obj._id._id == user._id : false;
	        });
	        // console.log("index === ",index);
	        if (index >= 0) {
	          var status = data[index].status;
	          // console.log("status === ",status);
	          if (status == _UserDashboardActions.contactRequest.Request) {
	            return _jsx('div', {
	              className: _ConfSettings2.default.actionBlock
	            }, void 0, _ref);
	          } else if (status == _UserDashboardActions.contactRequest.Requested) {
	            return _jsx('div', {
	              className: _ConfSettings2.default.actionBlock
	            }, void 0, _jsx('span', {
	              className: _ConfSettings2.default.actionButtonBox,
	              title: 'Accept',
	              id: data[index]._id._id,
	              onClick: this.acceptrequest.bind(this)
	            }, void 0, _ref2), _jsx('span', {
	              className: _ConfSettings2.default.actionButtonBox,
	              title: 'Reject',
	              id: data[index]._id._id,
	              onClick: this.rejectrequest.bind(this)
	            }, void 0, _ref3));
	          } else if (status == _UserDashboardActions.contactRequest.Accept) {
	            return _jsx('div', {
	              className: _ConfSettings2.default.actionBlock
	            }, void 0, _ref4);
	          } else if (status == _UserDashboardActions.contactRequest.Reject) {
	            return _jsx('div', {
	              className: _ConfSettings2.default.actionBlock
	            }, void 0, _ref5);
	          }
	        } else {
	          return _jsx('div', {
	            className: _ConfSettings2.default.actionBlock,
	            title: 'add'
	          }, void 0, _jsx(_reactFontawesome2.default, {
	            name: 'plus',
	            id: user._id,
	            onClick: this.sendUserId.bind(this)
	          }));
	        }
	      } else {
	        /*return (
	            <div className={confstyles.actionBlock} title="add">
	              <FontAwesome name ="plus" id={user._id} onClick={this.sendUserId.bind(this)} />
	            </div>
	          );*/
	      }
	    }
	  }, {
	    key: 'viewUser',
	    value: function viewUser() {
	      _reactRouter.browserHistory.push('/profile/' + this.props.value._id);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      // console.log("ListItem--", props);
	      if (this.props && this.props.value) {
	        var listItem = this.props.value;
	        var imgsrc = '/images/profile-pics/defaultStudent.jpg';
	        if (listItem.profile && listItem.profile.profileImage) imgsrc = "/uploads/" + listItem.profile.profileImage;
	        return _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
	          className: 'clearfix'
	        }, void 0, _jsx('img', {
	          id: 'viewProfile',
	          src: imgsrc,
	          className: 'pull-left',
	          onClick: this.viewUser.bind(this)
	        }), _jsx('h4', {
	          className: 'pull-left'
	        }, void 0, _jsx('span', {
	          className: _Admin2.default.inputAllCap
	        }, void 0, listItem.firstname ? listItem.firstname : "-", ' ', listItem.lastname ? listItem.lastname : "-", ' '), _jsx('p', {}, void 0, listItem.email ? listItem.email : "-")), this.renderOptions()));
	      }
	    }
	  }]);
	
	  return ShowUser;
	}(_react.Component);
	
	exports.default = ShowUser;
	
	// <div className={styles.userAction} title="User Added">
	//   <FontAwesome name ="check" />
	// </div>
	// <div className={styles.userAction1} title="Add this user" >
	//   <FontAwesome name ="plus" id={listItem._id} onClick={this.sendUserId.bind(this)} />
	// </div>
	// <div className={styles.userAction2} title="Remove this user">
	//   <FontAwesome name ="times" value={listItem._id} />
	// </div>

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _DashLayout = {
		"container": "_3MDDAV5-6IWoiIUW_vk7CC",
		"elasticWrapper": "R8LqGT-AW4U3mBKJ1MFvQ",
		"minimize": "_21MnHEkmOnrX-W0YKg26By",
		"footerFixed": "RdcUT5Wsmg6NbDJAwL0Md",
		"minimizeFooterFixed": "gbOmycGmduK-Yg4TTsE33",
		"elasticSideBar": "PPajvO_MDBlpK2G4OYyA8",
		"slideElasticSideBar": "_35chDIcwDNW7Nw5j2d-Zyx",
		"mobConf": "Kk9_BVy3rj24cvtuu_ns7"
	};
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _ConfSettings = {
		"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
		"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
		"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
		"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
		"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
		"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
		"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
		"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
		"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
		"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
		"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
		"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
		"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
		"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
		"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
		"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
		"block50": "_3KEUbD9sh-5efPnOe48KQu",
		"nohover": "m7jTOV3afDX3KYXfpJDuW",
		"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
		"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
		"active": "_3wgRcJQgpFwV1Tze6eaYAL",
		"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
		"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
		"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
		"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
		"backSearch": "w7BGjmEiChPoMYjET5k8R",
		"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
		"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
		"modContactList": "_1zmiGIPb92yNtOu845RHyM",
		"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
		"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
		"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
		"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
		"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
		"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
		"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
		"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
		"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
		"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
		"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
		"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
		"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
		"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
		"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
		"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
		"btn": "_27VXnOss6C0tcmiXDJyEQY",
		"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
		"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
		"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
		"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
		"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
		"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
		"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
		"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
		"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
		"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
		"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
		"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
		"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
		"radio": "_1YNHku8cDP1FxyBn3XkUJY",
		"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
		"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
		"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
		"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
		"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
		"downloadFile": "_33q4w5biPTOCecW_SwRklY",
		"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
		"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
		"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
		"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
		"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
		"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
		"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
		"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
		"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
		"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
		"iconBlock": "_1llySoPNa1j3k655fl2PNS",
		"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
		"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
		"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
		"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
		"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
		"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
		"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
		"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
		"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
		"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
		"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
		"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
		"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
		"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
		"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
		"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
		"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
		"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
		"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
		"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
		"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
		"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
		"centerBlock": "HLVHVZhqp-7yopt3Ah073",
		"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
		"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
		"btnTransport": "szHYW92cM7tgGZoXatQyg",
		"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
		"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
		"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
		"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
		"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
		"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
		"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
		"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
		"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
		"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
		"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
		"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
		"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
		"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
		"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
		"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _ConferenceActions = __webpack_require__(38);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('h2', {}, void 0, 'SIF - (320 x 240)', _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'video_resolution'
	})));
	
	var _ref2 = _jsx('h2', {}, void 0, 'VGA - (640x480)', _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'video_graphics'
	})));
	
	var _ref3 = _jsx('h2', {}, void 0, 'HD720p - (1280x720)', _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'hd_video'
	})));
	
	var _ref4 = _jsx('h2', {}, void 0, 'HD1080p - (1920x1080)', _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'full_hd'
	})));
	
	var _ref5 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'selected_codec'
	}));
	
	var _ref6 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'transport_title'
	}));
	
	var _ref7 = _jsx(_reactIntl.FormattedMessage, {
		id: 'default'
	});
	
	var _ref8 = _jsx(_reactIntl.FormattedMessage, {
		id: 'proxy'
	});
	
	var _ref9 = _jsx(_reactIntl.FormattedMessage, {
		id: 'video_bit_rate'
	});
	
	var _ref10 = _jsx(_reactIntl.FormattedMessage, {
		id: 'audio_bit_rate'
	});
	
	var _ref11 = _jsx(_reactIntl.FormattedMessage, {
		id: 'quality'
	});
	
	var _ref12 = _jsx('option', {
		value: 'BestQuality'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'best_quality'
	}));
	
	var _ref13 = _jsx('option', {
		value: 'BetterQuality'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'better_quality'
	}));
	
	var _ref14 = _jsx('option', {
		value: 'Standard'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'standard'
	}));
	
	var _ref15 = _jsx('option', {
		value: 'BetterSpeed'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'better_speed'
	}));
	
	var _ref16 = _jsx('option', {
		value: 'BestSpeed'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'best_speed'
	}));
	
	var VideoQuality = function (_Component) {
		_inherits(VideoQuality, _Component);
	
		function VideoQuality(props) {
			_classCallCheck(this, VideoQuality);
	
			var _this = _possibleConstructorReturn(this, (VideoQuality.__proto__ || Object.getPrototypeOf(VideoQuality)).call(this, props));
	
			_this.state = {
				route: null,
				videoBitrate: 400,
				audioBitrate: 28,
				quality: "Standard"
			};
			return _this;
		}
	
		_createClass(VideoQuality, [{
			key: 'setCodec',
			value: function setCodec(codec) {
				// console.log(codec);
				// this.setState({codec: codec});
				this.props.dispatch((0, _ConferenceActions.setCodec)(codec));
			}
		}, {
			key: 'setTransport',
			value: function setTransport(transport) {
				this.props.dispatch((0, _ConferenceActions.setTransport)(transport));
			}
		}, {
			key: 'videoBitrate',
			value: function videoBitrate(e) {
				this.setState({ videoBitrate: e.target.value });
				_WoogeenManager2.default.setVideoBitrate(e.target.value);
			}
		}, {
			key: 'audioBitrate',
			value: function audioBitrate(e) {
				this.setState({ audioBitrate: e.target.value });
				_WoogeenManager2.default.setAudioBitrate(e.target.value);
			}
		}, {
			key: 'videoQuality',
			value: function videoQuality(e) {
				// console.log("Video QUality", e.target.value);
				this.setState({ quality: e.target.value });
				_WoogeenManager2.default.videoQuality(e.target.value);
			}
		}, {
			key: 'videoQualityHanlder',
			value: function videoQualityHanlder(e) {
				var videoResolution = e.target.value;
				store.dispatch((0, _ConferenceActions.setVideoResolution)(videoResolution));
				switch (videoResolution) {
					case 'sif':
						_WoogeenManager2.default.setAudioBitrate(28);
						_WoogeenManager2.default.setVideoBitrate(256);
						this.setState({ videoBitrate: 256, audioBitrate: 28 });
						break;
					case 'vga':
						_WoogeenManager2.default.setAudioBitrate(28);
						_WoogeenManager2.default.setVideoBitrate(400);
						this.setState({ videoBitrate: 400, audioBitrate: 28 });
						break;
					case 'hd720p':
						_WoogeenManager2.default.setAudioBitrate(28);
						_WoogeenManager2.default.setVideoBitrate(700);
						this.setState({ videoBitrate: 700, audioBitrate: 28 });
						break;
					case 'hd1080p':
						_WoogeenManager2.default.setAudioBitrate(28);
						_WoogeenManager2.default.setVideoBitrate(1500);
						this.setState({ videoBitrate: 1500, audioBitrate: 28 });
						break;
					default:
				}
			}
		}, {
			key: 'componentDidMount',
			value: function componentDidMount() {
				this.setState({ videoBitrate: _WoogeenManager2.default.getVideoBitrate(), audioBitrate: _WoogeenManager2.default.getAudioBitrate(), quality: _WoogeenManager2.default.getVideoQuality() });
			}
		}, {
			key: 'render',
			value: function render() {
				var cls_headerList = _ConfSettings2.default.modHeaderList + ' clearfix';
				var cls_midTitle = _ConfSettings2.default.midTitle + ' pull-left';
				var cls_block50 = _ConfSettings2.default.block50 + ' pull-right';
				var cls_headerText = _ConfSettings2.default.headerText + ' pull-left';
				var cls_optionBlock = _ConfSettings2.default.optionsBlock + ' pull-right';
				var cls_settingsOptions = _ConfSettings2.default.settingsOptionInput + ' ' + _ConfSettings2.default.radio;
				var cls_elasticBar = '' + _DashLayout2.default.elasticSideBar;
				var conferenceDetails = this.props.conferenceDetails.videoResolution;
	
				var cls_btnactive = _ConfSettings2.default.active + ' ' + _ConfSettings2.default.btnCodec;
				var cls_btntransport_act = _ConfSettings2.default.active + ' ' + _ConfSettings2.default.btnTransport;
	
				var codec = this.props.conferenceDetails.codec;
				var transport = this.props.conferenceDetails.transport;
				// console.log("Transport ", transport);
	
				var path = this.props.pathname;
				/*changes done for UI issues
	   Responsible : Prateek
	   Date: 23/09/2017*/
				return _jsx('div', {}, void 0, conferenceDetails ? _jsx('div', {
					className: _ConfSettings2.default.asideBodySecondary
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.modSelectChoice
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {
					className: 'clearfix'
				}, void 0, _jsx('div', {
					className: cls_headerText
				}, void 0, _ref), _jsx('div', {
					className: cls_optionBlock
				}, void 0, _jsx('label', {}, void 0, _jsx('input', {
					type: 'radio',
					className: cls_settingsOptions,
					name: 'example',
					onChange: this.videoQualityHanlder.bind(this),
					value: 'sif',
					checked: conferenceDetails === 'sif',
					disabled: path == 'conf' ? true : false
				})))), _jsx('li', {
					className: 'clearfix'
				}, void 0, _jsx('div', {
					className: cls_headerText
				}, void 0, _ref2), _jsx('div', {
					className: cls_optionBlock
				}, void 0, _jsx('label', {}, void 0, _jsx('input', {
					type: 'radio',
					className: cls_settingsOptions,
					name: 'example',
					onChange: this.videoQualityHanlder.bind(this),
					value: 'vga',
					checked: conferenceDetails === 'vga',
					disabled: path == 'conf' ? true : false
				})))), _jsx('li', {
					className: 'clearfix'
				}, void 0, _jsx('div', {
					className: cls_headerText
				}, void 0, _ref3), _jsx('div', {
					className: cls_optionBlock
				}, void 0, _jsx('label', {}, void 0, _jsx('input', {
					type: 'radio',
					className: cls_settingsOptions,
					name: 'example',
					onChange: this.videoQualityHanlder.bind(this),
					value: 'hd720p',
					checked: conferenceDetails === 'hd720p',
					disabled: path == 'conf' ? true : false
				})))), _jsx('li', {
					className: 'clearfix'
				}, void 0, _jsx('div', {
					className: cls_headerText
				}, void 0, _ref4), _jsx('div', {
					className: cls_optionBlock
				}, void 0, _jsx('label', {}, void 0, _jsx('input', {
					type: 'radio',
					className: cls_settingsOptions,
					name: 'example',
					onChange: this.videoQualityHanlder.bind(this),
					value: 'hd1080p',
					checked: conferenceDetails === 'hd1080p',
					disabled: path == 'conf' ? true : false
				})))))), _jsx('div', {
					className: _ConfSettings2.default.alignMidBlock
				}, void 0, _ref5, _jsx('div', {
					className: _ConfSettings2.default.centerBlock
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx('button', {
					title: 'Codec VP9',
					onClick: this.setCodec.bind(this, 'vp9'),
					className: codec == 'vp9' ? cls_btnactive : _ConfSettings2.default.btnCodec,
					disabled: path == 'conf' ? true : false
				}, void 0, 'VP9')), _jsx('li', {}, void 0, _jsx('button', {
					title: 'Codec VP8',
					onClick: this.setCodec.bind(this, 'vp8'),
					className: codec == 'vp8' ? cls_btnactive : _ConfSettings2.default.btnCodec,
					disabled: this.props.pathname == 'conf' ? true : false
				}, void 0, 'VP8')), _jsx('li', {}, void 0, _jsx('button', {
					title: 'Codec H.264',
					onClick: this.setCodec.bind(this, 'h264'),
					className: codec == 'h264' ? cls_btnactive : _ConfSettings2.default.btnCodec,
					disabled: this.props.pathname == 'conf' ? true : false
				}, void 0, 'H.264'))))), _jsx('div', {
					className: _ConfSettings2.default.alignMidBlock
				}, void 0, _ref6, _jsx('div', {
					className: _ConfSettings2.default.transBlock
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx('button', {
					title: 'Default (Suggested Transport)',
					onClick: this.setTransport.bind(this, 'all'),
					className: transport == 'all' ? cls_btntransport_act : _ConfSettings2.default.btnTransport,
					disabled: path == 'conf' ? true : false
				}, void 0, _ref7)), _jsx('li', {}, void 0, _jsx('button', {
					title: 'Relay (Force Proxy)',
					onClick: this.setTransport.bind(this, 'relay'),
					className: transport == 'relay' ? cls_btntransport_act : _ConfSettings2.default.btnTransport,
					disabled: this.props.pathname == 'conf' ? true : false
				}, void 0, _ref8))))), _jsx('div', {
					className: _ConfSettings2.default.alignMidBlock
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.sliderA
				}, void 0, _ref9, ' \u2191'), _jsx('input', {
					onChange: this.videoBitrate.bind(this),
					className: _ConfSettings2.default.sliderB,
					id: 'sldBandwidth',
					type: 'range',
					min: '50',
					max: '2000',
					step: '10',
					value: this.state.videoBitrate
				}), _jsx('div', {
					className: _ConfSettings2.default.sliderText
				}, void 0, this.state.videoBitrate)), _jsx('div', {
					className: _ConfSettings2.default.alignMidBlock
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.sliderA
				}, void 0, _ref10, ' \u2191'), _jsx('input', {
					onChange: this.audioBitrate.bind(this),
					className: _ConfSettings2.default.sliderB,
					id: 'sldBandwidth',
					type: 'range',
					min: '10',
					max: '100',
					step: '2',
					value: this.state.audioBitrate
				}), _jsx('div', {
					className: _ConfSettings2.default.sliderText
				}, void 0, this.state.audioBitrate)), _jsx('div', {
					className: _ConfSettings2.default.alignMidBlock
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.sliderA
				}, void 0, _ref11), _jsx('select', {
					className: _ConfSettings2.default.sideDrop,
					value: this.state.quality,
					onChange: this.videoQuality.bind(this)
				}, void 0, _ref12, _ref13, _ref14, _ref15, _ref16))) : null);
			}
		}]);
	
		return VideoQuality;
	}(_react.Component);
	
	function mapStateToProps(state) {
		return {
			conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state),
			intl: state.intl
		};
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(VideoQuality);

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ContactList = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _ChatActions = __webpack_require__(30);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _ConfSettings = {
	  "contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
	  "attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
	  "groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
	  "indiChatFixed": "_121x6wkYY9bMxq2znilpes",
	  "settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
	  "openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
	  "openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
	  "openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
	  "onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
	  "onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
	  "tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
	  "tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
	  "tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
	  "modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
	  "modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
	  "modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
	  "block50": "_3KEUbD9sh-5efPnOe48KQu",
	  "nohover": "m7jTOV3afDX3KYXfpJDuW",
	  "fileUpload": "_1Ta80WwlyVY6khGgoelZff",
	  "modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
	  "active": "_3wgRcJQgpFwV1Tze6eaYAL",
	  "modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
	  "noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
	  "modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
	  "navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
	  "backSearch": "w7BGjmEiChPoMYjET5k8R",
	  "subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
	  "topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
	  "modContactList": "_1zmiGIPb92yNtOu845RHyM",
	  "chatBox": "_2taDr3sNLvZl64o7TkBTEg",
	  "callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
	  "midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
	  "modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
	  "contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
	  "avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
	  "contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
	  "listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
	  "onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
	  "busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
	  "bgOffline": "jL-R5aQBwO_2EmgAsiay1",
	  "bgOnline": "_3TEYblB_gY5codKEtLqX7q",
	  "adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
	  "addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
	  "formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
	  "inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
	  "btn": "_27VXnOss6C0tcmiXDJyEQY",
	  "btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
	  "topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
	  "modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
	  "addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
	  "btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
	  "btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
	  "contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
	  "asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
	  "modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
	  "headerText": "_2POMQ33JzpZXRKNQwhKTpK",
	  "optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
	  "settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
	  "click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
	  "radio": "_1YNHku8cDP1FxyBn3XkUJY",
	  "modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
	  "modChatContainer": "_21msPTbxn87ey3RWsSt_35",
	  "selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
	  "avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
	  "messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
	  "downloadFile": "_33q4w5biPTOCecW_SwRklY",
	  "downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
	  "textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
	  "otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
	  "chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
	  "modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
	  "chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
	  "formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
	  "sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
	  "avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
	  "setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
	  "iconBlock": "_1llySoPNa1j3k655fl2PNS",
	  "passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
	  "meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
	  "meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
	  "inputError": "_30zq1PCjl9v2jnkrDEFjSK",
	  "formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
	  "calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
	  "endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
	  "schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
	  "schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
	  "schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
	  "onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
	  "repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
	  "repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
	  "schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
	  "schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
	  "inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
	  "setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
	  "dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
	  "actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
	  "actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
	  "indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
	  "alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
	  "centerBlock": "HLVHVZhqp-7yopt3Ah073",
	  "btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
	  "transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
	  "btnTransport": "szHYW92cM7tgGZoXatQyg",
	  "helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
	  "sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
	  "scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
	  "scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
	  "sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
	  "sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
	  "sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
	  "popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
	  "btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
	  "emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
	  "formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
	  "formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
	  "colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
	  "colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
	  "endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
	  "toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _Admin = {
	  "form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
	  "progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
	  "progress": "_32kzRKjl47M7AcFAivyyho",
	  "progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
	  "progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
	  "backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
	  "containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
	  "googleContainer": "_1G8DyX--1Xskim3uSHbxil",
	  "googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
	  "googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
	  "header": "_2xHja59x-eRkfv95koY1ce",
	  "hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
	  "body": "_1wybmROxdPMB2DSkLyTGGx",
	  "navRight": "_2fWAne55trxpJYagJCezpL",
	  "navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
	  "active": "_1mqL1x9MCLjw6_Ok5T24oF",
	  "midContainer": "_1oKiSeTflL6v2wZC13o7oC",
	  "formField": "P8wcycRRhQUOqnf0qytj0",
	  "profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
	  "fullname": "m8-V01m5JYGd00wGYRCbo",
	  "position": "aCZ3mMjMPWmB1Xr4poVi_",
	  "txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
	  "plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
	  "inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
	  "inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
	  "inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
	  "inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
	  "labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
	  "viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
	  "avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
	  "avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
	  "imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
	  "avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
	  "profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
	  "avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
	  "avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
	  "whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
	  "whiteTile": "KCFNekbG6kNm7QCCmxcOC",
	  "customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
	  "mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
	  "infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
	  "headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
	  "headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
	  "headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
	  "actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
	  "headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
	  "headingTxt": "IA7VynD7jO_xLZWz7aACg",
	  "userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
	  "userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
	  "userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
	  "userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
	  "searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
	  "searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
	  "searchBox": "_79ROL_K6mHBW5o2LSPYyD",
	  "whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
	  "whiteIconSearch": "_8753oABxDX3rcNGmogytj",
	  "chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
	  "chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
	  "whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
	  "whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
	  "whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
	  "userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
	  "modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
	  "invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
	  "brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
	  "imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
	  "fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
	  "checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
	  "fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
	  "inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
	  "accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
	  "accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
	  "roomLink": "_3GAUEPkkabqWlcSfevhUau",
	  "multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
	  "inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
	  "gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
	  "gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
	  "gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
	  "gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
	  "gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
	  "groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
	  "groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
	  "avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
	  "avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
	  "removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
	  "locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
	  "locationContainer": "GqFlk81qWkoM8pg8rM9mT",
	  "locationHeader": "mgZJ5PYIcU3xilagy40bF",
	  "deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
	  "locationBody": "_9tu9wEbJADVdffughhYgF",
	  "remove": "_2qTNEmDNBxEEHjfsZx6jUU",
	  "viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
	  "studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
	  "addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
	  "removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
	  "studentblock": "_1npAxnK_u_EjOeG19x_gPa",
	  "studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
	  "participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
	  "tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
	  "tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
	  "thStyle": "_253KYsN6UeeVvx_kTT0FTG",
	  "hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
	  "removeStyle": "XmJHLhTym-EGI-3dZGbWc",
	  "attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
	  "highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
	  "highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
	  "lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
	  "lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
	  "removePdng": "j5wasHyxigllgK3-KBNZp",
	  "endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
	  "dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
	  "dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
	  "applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
	  "filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
	  "gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
	  "facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
	  "btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
	  "btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
	  "fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
	  "fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
	  "googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
	  "inLine": "_3SKSHSNT9quu0AEumeGTQT",
	  "inputGrade": "_2Q0ilim6NermuOEyggbVkC",
	  "flexContainer": "_3ELNW3V19Qpndrzsv3951F",
	  "actionRightAbs": "_1uuENocETyaOc2rRiwior5",
	  "closebtn": "_2GrTt3NBt2HkOlxHF614-3",
	  "editClosebtn": "wpV9V72-_ceslWX8JrnXB",
	  "first": "_35E4iHqMVJmbMgmzKL6Tv5",
	  "headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
	  "flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
	  "formH5": "_23XBDJVodLOklMKND6BFwz",
	  "qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
	  "editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
	  "formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
	  "blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
	  "blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
	  "btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
	  "btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
	  "blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
	  "btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
	  "btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
	  "btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
	  "blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
	  "btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
	  "btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
	  "inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
	  "diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
	  "gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
	  "gTextg": "_1SEMPATJm2_wne7kQlcG10",
	  "gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
	  "errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
	  "mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
	  "rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
	  "seprator": "_2UGm2z7pTnp444hmFIFOIp",
	  "checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
	  "inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
	  "localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
	  "localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
	  "nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
	  "allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
	  "proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
	  "popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
	  "textCapAll": "dmP3hNbZiWb10oxof-KKb",
	  "stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
	  "stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
	  "topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
	  "emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
	  "txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
	  "addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
	  "addStudPop2": "pJUMNDAuP9bGHel-6ESf",
	  "addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
	  "addStudText": "bfDwzSKIRHVbJQpazT_Il",
	  "changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
	  "fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
	  "fdInfo": "jkgczk2IOaooUA2sdYQcY",
	  "fdName": "_1GOg26hVpb9pUXFN9I9y75",
	  "fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
	  "fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
	  "fdAns": "_25xB1C18_oF2MVuf5cn3zq",
	  "errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
	  "qleditor": "_17N2ULf7_DBC-wvog56baS",
	  "txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
	  "addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
	  "progress-bar": "A2ftBZ69PzksWTqo3GY0k",
	  "formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
	  "mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
	  "innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
	  "loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _SocketHandler = __webpack_require__(32);
	
	var _SocketHandler2 = _interopRequireDefault(_SocketHandler);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('img', {
	  src: '/images/icons/green-check.png'
	});
	
	var _ref2 = _jsx('img', {
	  src: '/images/icons/red-cross.png'
	});
	
	var _ref3 = _jsx('img', {
	  src: '/images/black-icons/individual-chat.png'
	});
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'request_pending'
	});
	
	var ContactList = exports.ContactList = function (_Component) {
	  _inherits(ContactList, _Component);
	
	  function ContactList(props) {
	    _classCallCheck(this, ContactList);
	
	    var _this = _possibleConstructorReturn(this, (ContactList.__proto__ || Object.getPrototypeOf(ContactList)).call(this, props));
	
	    _this.viewUserProfile = function (uid) {
	      var url = "/profile/" + uid;
	      _reactRouter.browserHistory.push(url);
	    };
	
	    return _this;
	  }
	
	  _createClass(ContactList, [{
	    key: 'chatCB',
	    value: function chatCB(e) {
	      var userId = this.props.value;
	      if (userId && userId != 'undefined') {
	        this.props.chatCallback();
	        var obj = {
	          id: userId._id._id,
	          activeData: userId._id,
	          chatType: "Indi"
	        };
	
	        this.props.dispatch((0, _ChatActions.clearChatNotification)(obj));
	      }
	    }
	  }, {
	    key: 'acceptrequest',
	    value: function acceptrequest(e) {
	      var obj = {
	        userId: e.currentTarget.id,
	        response: _UserDashboardActions.contactRequest.Accept
	      };
	      this.props.requestResponse(obj);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      //SubscribeUser('');
	      // SocketHandler.subscribeStatus(this.props.value._id._id);
	    }
	  }, {
	    key: 'rejectrequest',
	    value: function rejectrequest(e) {
	      var obj = {
	        userId: e.currentTarget.id,
	        response: _UserDashboardActions.contactRequest.Reject
	      };
	      this.props.requestResponse(obj);
	    }
	  }, {
	    key: 'renderOptions',
	    value: function renderOptions() {
	      var cls_chatBox = _ConfSettings2.default.chatBox + ' ' + _ConfSettings2.default.bgTransition;
	      var cls_callBox = _ConfSettings2.default.callBox + ' ' + _ConfSettings2.default.bgTransition;
	      var cls_action = '' + _ConfSettings2.default.actionBlock;
	      var listItem = this.props.value;
	
	      if (listItem.status == _UserDashboardActions.contactRequest.Requested) {
	        var _jsx2, _jsx3;
	
	        return _jsx('div', {
	          className: cls_action
	        }, void 0, _jsx('span', (_jsx2 = {
	          id: 'accept',
	          className: _ConfSettings2.default.actionButtonBox,
	          title: this.props.intl.messages.accept
	        }, _defineProperty(_jsx2, 'id', listItem._id._id), _defineProperty(_jsx2, 'onClick', this.acceptrequest.bind(this)), _jsx2), void 0, _ref), _jsx('span', (_jsx3 = {
	          id: 'reject',
	          className: _ConfSettings2.default.actionButtonBox,
	          title: this.props.intl.messages.reject
	        }, _defineProperty(_jsx3, 'id', listItem._id._id), _defineProperty(_jsx3, 'onClick', this.rejectrequest.bind(this)), _jsx3), void 0, _ref2));
	      } else if (listItem.status == _UserDashboardActions.contactRequest.Accept) {
	        return _jsx('div', {
	          className: cls_action
	        }, void 0, _jsx('span', {
	          className: _ConfSettings2.default.actionButtonBox,
	          id: listItem._id._id,
	          onClick: this.chatCB.bind(this),
	          title: 'Chat'
	        }, void 0, _ref3, this.props.count != null ? _jsx('span', {
	          className: _ConfSettings2.default.indChatNotification
	        }, void 0, this.props.count) : null));
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var cls_Online = _ConfSettings2.default.listStatusCircle + ' ' + _ConfSettings2.default.bgOnline;
	      var cls_Offline = _ConfSettings2.default.listStatusCircle + ' ' + _ConfSettings2.default.bgOffline;
	      var cls_contactContainer = _ConfSettings2.default.contactContainer + ' clearfix';
	      // console.log("ListItem--", props);
	      if (this.props && this.props.value) {
	        var listItem = this.props.value;
	        var userName = '';
	        var fullName = '';
	        if (listItem && listItem._id.firstname && listItem._id.lastname) {
	          userName = listItem._id.firstname + ' ' + listItem._id.lastname;
	          if (userName.length > 15) {
	            fullName = userName.substr(0, 15) + '...';
	          } else {
	            fullName = userName;
	          }
	        } else if (listItem && listItem._id.firstname && !listItem._id.lastname) {
	          userName = listItem._id.firstname;
	          if (userName.length > 15) {
	            fullName = userName.substr(0, 15) + '...';
	          } else {
	            fullName = userName;
	          }
	        }
	        var imgsrc = "/images/profile-pics/default-user.png";
	        if (listItem._id.profile && listItem._id.profile.profileImage) {
	          imgsrc = "/uploads/" + listItem._id.profile.profileImage;
	        }
	        return _jsx('li', {}, void 0, this.renderOptions(), _jsx('a', {
	          id: 'viewprofile',
	          onClick: this.viewUserProfile.bind(this, listItem._id._id),
	          title: this.props.intl.messages.viewprofile
	        }, void 0, _jsx('div', {
	          className: cls_contactContainer
	        }, void 0, _jsx('div', {
	          className: _ConfSettings2.default.avatarBox
	        }, void 0, listItem.status == _UserDashboardActions.contactRequest.Accept ? this.props.online >= 0 ? _jsx('div', {
	          className: cls_Online
	        }) : _jsx('div', {
	          className: cls_Offline
	        }) : null, _jsx('img', {
	          src: imgsrc
	        })), _jsx('div', {
	          className: _ConfSettings2.default.contactInfoBox
	        }, void 0, _jsx('h3', {}, void 0, fullName, _jsx('p', {}, void 0, listItem.status == _UserDashboardActions.contactRequest.Request ? _ref4 : listItem.status == _UserDashboardActions.contactRequest.Accept ? _jsx('span', {
	          className: _ConfSettings2.default.emailInChatText
	        }, void 0, listItem._id.email) : listItem.status == _UserDashboardActions.contactRequest.Reject ? 'Rejected' : ''))))));
	      }
	    }
	  }]);
	
	  return ContactList;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    intl: state.intl,
	    loggedInData: (0, _LoginReducer.loggedInData)(state)
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(ContactList);

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AddMember = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrapDatetimepicker = __webpack_require__(86);
	
	var _reactBootstrapDatetimepicker2 = _interopRequireDefault(_reactBootstrapDatetimepicker);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Modal = __webpack_require__(52);
	
	var _component = {
	  "form-control": "QmIrbtmLmFNpHdWMqFMWS",
	  "innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
	  "colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
	  "error": "_3jAfmA6J7YmNDyB2VfsCxP",
	  "mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
	  "dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
	  "iElement": "_2crZNiFs8z8oNhzPDC1qOE",
	  "oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
	  "iLabel": "_3Pyvct_srCoSvJCgGG41jw",
	  "oLabel": "NsxWZpxBqBX8wky_O477_",
	  "iForm": "_3IlToa7pigrSS8KWut_dJ8",
	  "oForm": "_3N0YNUcfI5U02VSmBEbYot",
	  "iFormField": "_12yKSn29WLZIE6fvGQfcrN",
	  "oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
	  "iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
	  "oFormGroup": "_386CxczA49XX2-ejr3Qe55",
	  "formNext": "ccTxjcG6_GZO9OgzW33HT",
	  "iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
	  "oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
	  "iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
	  "oContainer": "_2tEAAtqgoutuOUU96rNvv1",
	  "iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
	  "oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
	  "iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
	  "iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
	  "whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
	  "iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
	  "active": "_2fF1Q9nO2O_1B8Ldb4RM52",
	  "scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
	  "errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
	  "errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
	  "whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
	  "greyCard": "_34l9W17Mt1koxHLd1yUqgk",
	  "reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
	  "countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
	  "react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
	  "ad": "N3bKXyhfwvWT3eAEC9Nno",
	  "ae": "taXUT8yfjgRMeSH3rMNxy",
	  "af": "_2vH4qShCgBPBO4GR8BdNvd",
	  "ag": "n8QfWtvpZLMpatCUqX2Td",
	  "ai": "_3fPX_RcpesOPxFsmsaygCE",
	  "al": "_1T12tbcC6990b-fIMG5LYW",
	  "am": "_31HdarMDfXvAgjizVUoeHk",
	  "ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
	  "ar": "_2qJleMgRbIErIrx3kQF57O",
	  "as": "_2ZPVYL8Vjn-vdWZToCEhjN",
	  "at": "_1hWilvnrVbANEHRyLGlF-m",
	  "au": "_2zJE4K6o-ftWqhb3exXZgk",
	  "aw": "_1UroMxX5JHt9bjGdHwa1OY",
	  "az": "_-Y2xueZ_1mEtB9YDOqEGB",
	  "ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
	  "bb": "_34600Kl8Wac9Hx7S3-3U6b",
	  "bd": "_3WBX90V5VJXA7-vSUfEWCh",
	  "be": "BcK33edOPcbYdkxxvOApy",
	  "bf": "ShN64-J7UZdswoQjkf7L_",
	  "bg": "_2A9PgkQEF5_KbvHvDf6_lY",
	  "bh": "_10p3rxNRYOhv8-BtZuq1w8",
	  "bi": "_6MzP1qXXDFAZVL7nBmRiH",
	  "bj": "_2U8H1sji9LfDEW706KyKvF",
	  "bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
	  "bn": "PgMDvF79WHl3kaklOmhw3",
	  "bo": "_7MheGVInaTi-QLxw5PiUi",
	  "br": "_1BDNUyT0cHDlbCBFgrrLkJ",
	  "bs": "_3vcASZB5bu7mJAzTzaRkWe",
	  "bt": "esu4pvyd9ZFWrf-etnrva",
	  "bw": "_2Hbv1I361RJFK3Ph2xPlu_",
	  "by": "_2tbYam6Og8RAicMhX9SXvI",
	  "bz": "_3xB704PIgqFnU2zTG-JZFN",
	  "ca": "_36FyK29nkNl9Ez7yWh04AS",
	  "cd": "_9PnHTqK1pSn_GIAbBtPT2",
	  "cf": "_2LgMF7o1A3a2cgw5jkpvZV",
	  "cg": "_3hYc9Y3UdCphltZKe2vJWk",
	  "ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
	  "ci": "FoSGkvvMDFAVcvsZBWX-Z",
	  "ck": "_1742IgEaHW3SZU7h_-nkwr",
	  "cl": "_36IaMt7ntEwUsH4lwN4tW-",
	  "cm": "_1N8krqbPtlsEVsh6SaCetm",
	  "cn": "IfkD3fwbUSx9FZflX6iIU",
	  "co": "_3Y7u7ONzxyZVjZYzS1OHTr",
	  "cr": "Gw5Qz4qBNZjPDmpQmi-d2",
	  "cu": "ZuHtEp_knwZcbwTTJkRgI",
	  "cv": "o6BzJCyjRH1pOsf_HpbQ6",
	  "cw": "hRElJCQXyNIITDZ6UQVut",
	  "cy": "_2cHKWrINPNO6L8BEOdtJCG",
	  "cz": "nS617LE8Qcckdv9HJTWpt",
	  "de": "fqJD93WBywDPs0lrLEXLT",
	  "dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
	  "dk": "_3fpBLMtuUi0kowy3ziMRYd",
	  "dm": "_3gMwGkQW-OGFx1U7vd7VMD",
	  "do": "G9EZGjpXLJUyQuREesyGO",
	  "dz": "_3Nka0vwv6nZpeugyuqYQIJ",
	  "ec": "_18t83SdIOs8EY6iF0zV0CZ",
	  "ee": "_1miCbYr55XmBKvcUu6XetR",
	  "eg": "_1T55wMh1svM7M5QGxFM2ex",
	  "er": "c0Ab9spCQ4VnXr_6xijnD",
	  "es": "_1lutiEL9tJpdNgKmnTT6Ld",
	  "et": "_2GGXIPO2kOV6CUsu65V4Z3",
	  "fi": "_1I-g5oWpQznT5QZuBfQ8A",
	  "fj": "_3oeTP_GhC_XzsjzHW86oDc",
	  "fk": "_3-_BjK4NArHS0nyf0DLc4F",
	  "fm": "_1WQYGDC-zTatxog3SIwE80",
	  "fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
	  "fr": "_3-mqatBXfaTfex8LWjnIDA",
	  "bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
	  "mf": "_34f4ya9mcbpIcQPgHJ4I6c",
	  "ga": "_15_iO4CJaXbX7PySxoldPF",
	  "gb": "_1vZuFSSey59_ixozre-0L_",
	  "gd": "_26Ub0jcjDpVD4nwM7m5n4e",
	  "ge": "_27ctDR0Hf6HO15MgHS8wyh",
	  "gf": "_2S6C39D4wNBuVSqzYM5Ldy",
	  "gh": "_3vjGi6-umA-RzwxRFaTfNN",
	  "gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
	  "gl": "_1OTvyS4D4UOkymKuDLxUdx",
	  "gm": "_3-0gezNOVCHKzaLYGUySo2",
	  "gn": "_8f6uadrEfnS9IX8DEIpKO",
	  "gp": "_36yEj9UcEbZcI0WJvgmk0B",
	  "gq": "xHX18x9xk7PhDBlgsvnad",
	  "gr": "HTk_eFej1VrCiBuKBIfLT",
	  "gt": "hgmUbzxaHNZNL6frPhPeb",
	  "gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
	  "gw": "_36JwaXqhh4gBrIvAy4c1KO",
	  "gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
	  "hk": "_1mT74O5OVtonPLmYnVVOu7",
	  "hn": "_1ze0KI-TYxTrDcXlMOu24s",
	  "hr": "ZIDUSRfcbDCZTyhqWGPob",
	  "ht": "Y65Ad5pf3z7ufcknP0vhk",
	  "hu": "_3EHKICvcensXt5hEu8Nkfs",
	  "id": "_3oZE8uvxIFK7M9DCEtsSCD",
	  "ie": "_2RNmpg94YYioQp2fWyz_xn",
	  "il": "_2Mq_no7KYxPp2NSLGS1Tcs",
	  "in": "_1UlEZ269GihRa58c5mCEBN",
	  "io": "_3ovelrc7S_DdmXxL-8uuwk",
	  "iq": "_3VSlK6DYHrBgKbkE2Rng2N",
	  "ir": "NRX2sFBmuPSJ9EOigyuEP",
	  "is": "_25HaTNE7x74CJO9S1mnm4I",
	  "it": "_1-LmlhbrcpKN-xjESmR_sO",
	  "jm": "VsvDBply-4FtMoJhi8Cvu",
	  "jo": "yEE3hbkzWK8CSCrCJibCo",
	  "jp": "_3oxjjz1uD2cX2QsoSToLgz",
	  "ke": "_1ksOT6KMPd99EWuWCXPga_",
	  "kg": "_2CMnR3yv5DGwDc8p3uoOjp",
	  "kh": "_927b1QnaSWnN35i3bVewJ",
	  "ki": "_2CuDp55lqYTpFp68D4IWep",
	  "km": "_3tvMTeZYZMzBB9bGn9lV9E",
	  "kn": "_6kbCvwc22pJX0tNv3HToQ",
	  "kp": "_3tIPOe5PNrHH-bgCGaZTJj",
	  "kr": "_2653rpVUuy3ETaw1mogdnF",
	  "kw": "_1SKg_lTe0ShbPSOl44eKjp",
	  "ky": "tgj8SOv7bYoF7qfbbQWNG",
	  "kz": "bchn50J152EdQa0zf3k5u",
	  "la": "mu9oycLgpKX8_yLLkR5b9",
	  "lb": "_2TcAFbagIrNyc6mgzRVNW0",
	  "lc": "_2IFItnUNT-albvpN-ksxd2",
	  "li": "_3_E6nQspv6zJQLQI24puaS",
	  "lk": "_2M2wq3qQhGeUegbBTs7ilH",
	  "lr": "L4o4xOg0s6QbasyIRPgyF",
	  "ls": "LhBB6SRin61WSFtUwaEfe",
	  "lt": "ITDUphrnMkKItKGMVHZf8",
	  "lu": "_1mVW30sc4i-1M8tDPCQlL",
	  "lv": "_3rq6vE2IagAsGI6iESAcJq",
	  "ly": "_3se_Nzm1WQrEN3VZYiJJrv",
	  "ma": "_fSDiNxp_jjfqkQcWffDM",
	  "mc": "_2hRTRZeBtDGN4mNeWBZVgB",
	  "md": "_26jDl0skadEwmUYDGmEzST",
	  "me": "_388lJj_7sQdyd9HL7pMrar",
	  "mg": "_3aFoqVWcvG3p47Vwa6UuoE",
	  "mh": "_1YHi6OtXmKfP15ZNbwYGgy",
	  "mk": "_9QVyhHcp8yH762J8fWXhC",
	  "ml": "yYD99PoyhgFI4912_qoyJ",
	  "mm": "URzk8-j7LcySpGUMJf_Qk",
	  "mn": "_1J-lktQUTK0rydBz3foJGF",
	  "mo": "_1sbL0zhHof-KbfGWu2qjqF",
	  "mp": "_1tJjJlSjRw5AnqcXXmGwCI",
	  "mq": "fHob9sxaJrTuqSc0xL744",
	  "mr": "t-Bmj7a31aA-IwcRcL0ua",
	  "ms": "_2xyT54DQP62zWDySH7-Kdy",
	  "mt": "_1Ul_OlGODc8S0QplVq94PV",
	  "mu": "_1yIBERRJqnV33pTq2VpKRc",
	  "mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
	  "mw": "_3i8n-5-htdGNJLgn96O21",
	  "mx": "_16-6zoyiVzSGB1O72cUTzV",
	  "my": "_3W2P0D9eTN4BQoOcThOsaM",
	  "mz": "wJ8icX7Asp3dSImkXOdTM",
	  "na": "_1qt_F94mybbX5kr0ArtN-Z",
	  "nc": "h82AMIuCGdKf69Hc_nM6D",
	  "ne": "_2mVa5nGsijzD93WRl8dk64",
	  "nf": "_3XQ9oUH_84SsdZLjpVRuqT",
	  "ng": "_1uyyH1GZjsEk3YpaUSmmG6",
	  "ni": "_22_3H6UeFo26o3fSavtQaX",
	  "nl": "_93asfBYgR8C7bEDucZO8l",
	  "bq": "_37A1nwIz7Z3obwUjmliw4s",
	  "no": "_2-sVmkWiLn_ogTikc0c0Eg",
	  "np": "_1PqZSwf5cuMNmbE7bpKe67",
	  "nr": "_9q5Rg9Xn0G2buivFSGySP",
	  "nu": "RLhVdyjL9Cex8ekaJqirU",
	  "nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
	  "om": "_9mZYNhgBLiQg-j1FeVprJ",
	  "pa": "_3S7TrzxJIEYVghUMVHB6E7",
	  "pe": "_3V5sP7VvdGOFqApj7POYl2",
	  "pf": "_1YzdrkyHO-eCcEFF-hjZl7",
	  "pg": "ddWAanlQJPlB0QDWO6dAF",
	  "ph": "_2TGbmCcqHlJFCssz78MxOs",
	  "pk": "_2JerTABYGCUN8FLjpnDzKy",
	  "pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
	  "pm": "_29Hoo7EsoSHtvRFvlVg2cD",
	  "pr": "_3_pkwz60KLoYcbKwaRvIsS",
	  "ps": "_3jenITZ_yUYS7kU1HwFEHj",
	  "pt": "_1vz8ABWy5Yd43_JhaTWq9u",
	  "pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
	  "py": "_1_W41pJLcGMRhLdU997clv",
	  "qa": "Z0tjAakoNSOs14KuenmRi",
	  "re": "_3k5KF4jzE7HUitQw9MQKnp",
	  "ro": "_2b8XhT3-7NgjAC8gJJkpis",
	  "rs": "_2MUJr9MQbiKRTd_g0TaRQr",
	  "ru": "HjzPW2CxxNMSGZw1ugFW7",
	  "rw": "_23TGIOoPmB9QYqIPG6W3tA",
	  "sa": "_34WM8rSonfayW0vJ3koqJS",
	  "sb": "_3486rZNsCjvTmIoHbjK8mG",
	  "sc": "_3meAM_iQCU6MyfPQJTN3yl",
	  "sd": "_2x6XeHNF__4s9VVfFXCJhO",
	  "se": "_66VDclGQXxpdUR8uE3ZFa",
	  "sg": "tv3I_hfLcUJ_8i9ewVcUz",
	  "sh": "_1syDbbhbumwMwwD7Dwkb1V",
	  "si": "_3jsffwJjGr2sMEofSTTGkG",
	  "sk": "_1EpYAUcQLCqbYB48Auixqb",
	  "sl": "_3STJQv9nY5mol4cW82D2ci",
	  "sm": "_9aTR-AZMTaYHRmDVAyFTM",
	  "sn": "_3mTatYTWeJQQACfV7xzRhi",
	  "so": "_1LnWon2slwLMqAHzhkRT4c",
	  "sr": "_1GSedFwSsf5isgOi3p0x6U",
	  "ss": "_1sq99LOjKKgery3luOXOFn",
	  "st": "_1O6vYx_NaXFBAs1qYxgwaB",
	  "sv": "_10D9RGnRzUv14bYWQaC23c",
	  "sx": "KonDEEzH2JzIWsVUBzFdY",
	  "sy": "_1ZAnqGYeixOJVFwwt6hNIo",
	  "sz": "_3FeOFkec3sXYbvQhWDdIM7",
	  "tc": "_1FZvldKEV-vz12TyyNfEf",
	  "td": "_31fysfDRtTWVKcX_UjX0ty",
	  "tg": "H60Kyr6MsF6nvRz5l7EfN",
	  "th": "SHZkbUz1c_H_zDOfxLc4",
	  "tj": "_2MRI0fA4OLgepXVooYMu9H",
	  "tk": "_1W959S9LHLCKhz3xi4MpHe",
	  "tl": "_1lMF_0nwQXTyBRRzRj7hBF",
	  "tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
	  "tn": "_2MeGi_bqLVuCaRtJzs3QqA",
	  "to": "_3egwC_50WENVPaap_uwXr8",
	  "tr": "_2KiPy3o6m7JCKQWPY2fI1d",
	  "tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
	  "tv": "_2D9VWSmHkhgNemAaIKF_cp",
	  "tw": "_2J7nVAh1zEa7kV5Ba51CLV",
	  "tz": "_2acF96LLqMjlbfMX1oiAjT",
	  "ua": "_2rr3Tyr8dP6vDvE0khEDKT",
	  "ug": "D7gjzKmlr78rNWXXw90np",
	  "us": "_1l5RtWI_acgLVeCd5fjgHG",
	  "uy": "_1zX6hTsIa2TtL6dgR47eQ9",
	  "uz": "_29NUL3VtwK1_RWUyPsY2ei",
	  "va": "_39kTgRBkhqqGVLUTJvK_67",
	  "vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
	  "ve": "_3Lk2Svkm2NTAVpUfiY_No5",
	  "vg": "_3SiYuGrNzW9DNkXwTZugyj",
	  "vi": "_2BiiERObu5xcE6P1SZxLdj",
	  "vn": "_3kSg6iW0KLoUpJ0g70fckK",
	  "vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
	  "wf": "Arz0xEqJcbKbLmPz_tXTS",
	  "ws": "_3oTaxcmbTriEd90-cXNqD8",
	  "ye": "gxtmCiQO2ao4JTQXuRUIJ",
	  "za": "_25HyrYKmQQAteF_LwADnIt",
	  "zm": "Kui2u7hZHcNBqlzbqR-vQ",
	  "zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
	  "hide": "_2kO_U0LXcg71jJA6RSia2e",
	  "v-hide": "_2HBc009zwTsSlkh8P8tH10",
	  "invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
	  "flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
	  "open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
	  "selected-flag": "_10c169vRt8V92_nQ_S0KtR",
	  "flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
	  "arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
	  "up": "_2ykRnfq4f2nlmZGfvzrn92",
	  "country-list": "UlTusogWL2urjgGgLNpcD",
	  "divider": "_2zMaTbM3nSdE07wOs7YYRt",
	  "country": "uL848pHFWhb_G94Ak-KX5",
	  "dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
	  "highlight": "BLa_2aA2PkYD2PsO2fvNC",
	  "country-name": "_3ih_ovRiGmAkpjxuz63nhk",
	  "uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
	  "fileUpload": "_2WENukerx3mNXkTyu0UXQf",
	  "uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
	  "upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
	  "blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
	  "feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
	  "errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
	  "gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
	  "red": "_3wj0AXV9gqX9YG1nk-2u9J",
	  "green": "_3KPVxc3su8ewtuKZgu8TGv",
	  "orange": "_3cLlE5QI9XJwY6e7jO5bLg",
	  "capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
	  "importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
	  "importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
	  "importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
	  "icon": "_12rnwIUewKT2PdtWMnNyD5",
	  "importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
	  "broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
	  "broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
	  "btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
	  "textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
	  "spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
	  "pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
	  "lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
	  "removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
	  "inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
	  "popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
	  "dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
	  "dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
	  "applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
	  "filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
	  "btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
	  "assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
	  "pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
	  "assTab": "y4LW63OuadI0JWTQBnbJ1",
	  "heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
	  "radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
	  "wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
	  "leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
	  "rightBox": "DP21PoKxwKk_vJyOuQTcr",
	  "gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
	  "actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
	  "gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
	  "actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
	  "gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
	  "morePref": "JBm94eKPIFI8vfiroATJ6",
	  "tile": "_1Ssp2zTovh7AwJWuRkgnge",
	  "tileItems": "_3cDqgy8AedDYzhy8Euosis",
	  "tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
	  "tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
	  "category": "_2Ow56TBY2Y24yY5SjVRU4l",
	  "innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
	  "maxScore": "_3uL97t2vemfuAs83cAFhjE",
	  "maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
	  "scored": "_12gGWK_s69JBGzOAX7ClkT",
	  "scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
	  "remTile": "_3vgBsvWRGVVRwIEDn1TquO",
	  "tileBody": "dF1WC_PeNjG87K2XGMIcS",
	  "tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
	  "gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
	  "gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
	  "assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
	  "blue": "K7acjAQMroOGGtUqqojYy",
	  "yellow": "G7N-PGOIbGO_ZkaqBu2mx",
	  "txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
	  "txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
	  "txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
	  "txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
	  "txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
	  "txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
	  "addTile": "lCw_kxhsAPcuM3yFAqvpF",
	  "addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
	  "addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
	  "commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
	  "totalScore": "FDG4LAia-7JDDtxb7R4Kb",
	  "totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
	  "textBox": "_13VdIFmMegxz_eR8VIXN_M",
	  "totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
	  "totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
	  "resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
	  "resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
	  "resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
	  "headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
	  "scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
	  "resultBody": "N6kKlySaRGbRcB4bBmpZ0",
	  "resGroup": "_2byM-_1N3yjHb2dpmlikdf",
	  "resTile": "DZeuj4DKkdAPKCgYd76RK",
	  "resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
	  "resRating": "R7j9mxFZmdmLgC7bPXpyN",
	  "txtSize": "_977ldMQMMiHQ0YG_61T3g",
	  "txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
	  "resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
	  "resInput": "_14gsxA36f-uYOfxGDvr_gi",
	  "activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
	  "feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
	  "fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
	  "feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
	  "profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
	  "profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
	  "profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
	  "name": "_25-6SxUiv8zhOMEVTRrg8w",
	  "commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
	  "addpdng": "_6rQH8tivz8ELIWszpbahs",
	  "good": "_3lOxcxDfxhPcuhLBJHo4Ur",
	  "vGood": "l_IAfocpDxfvpU316U0EI",
	  "fair": "_3I3YapUnBVxgs-ZsGf3Poh",
	  "poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _ConfSettings = {
	  "contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
	  "attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
	  "groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
	  "indiChatFixed": "_121x6wkYY9bMxq2znilpes",
	  "settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
	  "openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
	  "openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
	  "openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
	  "onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
	  "onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
	  "tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
	  "tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
	  "tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
	  "modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
	  "modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
	  "modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
	  "block50": "_3KEUbD9sh-5efPnOe48KQu",
	  "nohover": "m7jTOV3afDX3KYXfpJDuW",
	  "fileUpload": "_1Ta80WwlyVY6khGgoelZff",
	  "modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
	  "active": "_3wgRcJQgpFwV1Tze6eaYAL",
	  "modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
	  "noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
	  "modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
	  "navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
	  "backSearch": "w7BGjmEiChPoMYjET5k8R",
	  "subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
	  "topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
	  "modContactList": "_1zmiGIPb92yNtOu845RHyM",
	  "chatBox": "_2taDr3sNLvZl64o7TkBTEg",
	  "callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
	  "midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
	  "modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
	  "contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
	  "avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
	  "contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
	  "listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
	  "onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
	  "busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
	  "bgOffline": "jL-R5aQBwO_2EmgAsiay1",
	  "bgOnline": "_3TEYblB_gY5codKEtLqX7q",
	  "adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
	  "addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
	  "formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
	  "inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
	  "btn": "_27VXnOss6C0tcmiXDJyEQY",
	  "btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
	  "topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
	  "modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
	  "addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
	  "btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
	  "btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
	  "contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
	  "asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
	  "modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
	  "headerText": "_2POMQ33JzpZXRKNQwhKTpK",
	  "optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
	  "settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
	  "click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
	  "radio": "_1YNHku8cDP1FxyBn3XkUJY",
	  "modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
	  "modChatContainer": "_21msPTbxn87ey3RWsSt_35",
	  "selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
	  "avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
	  "messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
	  "downloadFile": "_33q4w5biPTOCecW_SwRklY",
	  "downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
	  "textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
	  "otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
	  "chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
	  "modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
	  "chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
	  "formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
	  "sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
	  "avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
	  "setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
	  "iconBlock": "_1llySoPNa1j3k655fl2PNS",
	  "passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
	  "meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
	  "meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
	  "inputError": "_30zq1PCjl9v2jnkrDEFjSK",
	  "formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
	  "calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
	  "endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
	  "schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
	  "schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
	  "schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
	  "onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
	  "repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
	  "repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
	  "schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
	  "schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
	  "inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
	  "setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
	  "dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
	  "actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
	  "actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
	  "indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
	  "alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
	  "centerBlock": "HLVHVZhqp-7yopt3Ah073",
	  "btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
	  "transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
	  "btnTransport": "szHYW92cM7tgGZoXatQyg",
	  "helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
	  "sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
	  "scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
	  "scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
	  "sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
	  "sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
	  "sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
	  "popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
	  "btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
	  "emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
	  "formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
	  "formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
	  "colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
	  "colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
	  "endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
	  "toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _Admin = {
	  "form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
	  "progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
	  "progress": "_32kzRKjl47M7AcFAivyyho",
	  "progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
	  "progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
	  "backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
	  "containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
	  "googleContainer": "_1G8DyX--1Xskim3uSHbxil",
	  "googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
	  "googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
	  "header": "_2xHja59x-eRkfv95koY1ce",
	  "hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
	  "body": "_1wybmROxdPMB2DSkLyTGGx",
	  "navRight": "_2fWAne55trxpJYagJCezpL",
	  "navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
	  "active": "_1mqL1x9MCLjw6_Ok5T24oF",
	  "midContainer": "_1oKiSeTflL6v2wZC13o7oC",
	  "formField": "P8wcycRRhQUOqnf0qytj0",
	  "profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
	  "fullname": "m8-V01m5JYGd00wGYRCbo",
	  "position": "aCZ3mMjMPWmB1Xr4poVi_",
	  "txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
	  "plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
	  "inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
	  "inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
	  "inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
	  "inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
	  "labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
	  "viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
	  "avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
	  "avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
	  "imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
	  "avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
	  "profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
	  "avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
	  "avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
	  "whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
	  "whiteTile": "KCFNekbG6kNm7QCCmxcOC",
	  "customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
	  "mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
	  "infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
	  "headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
	  "headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
	  "headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
	  "actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
	  "headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
	  "headingTxt": "IA7VynD7jO_xLZWz7aACg",
	  "userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
	  "userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
	  "userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
	  "userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
	  "searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
	  "searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
	  "searchBox": "_79ROL_K6mHBW5o2LSPYyD",
	  "whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
	  "whiteIconSearch": "_8753oABxDX3rcNGmogytj",
	  "chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
	  "chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
	  "whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
	  "whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
	  "whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
	  "userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
	  "modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
	  "invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
	  "brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
	  "imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
	  "fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
	  "checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
	  "fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
	  "inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
	  "accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
	  "accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
	  "roomLink": "_3GAUEPkkabqWlcSfevhUau",
	  "multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
	  "inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
	  "gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
	  "gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
	  "gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
	  "gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
	  "gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
	  "groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
	  "groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
	  "avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
	  "avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
	  "removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
	  "locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
	  "locationContainer": "GqFlk81qWkoM8pg8rM9mT",
	  "locationHeader": "mgZJ5PYIcU3xilagy40bF",
	  "deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
	  "locationBody": "_9tu9wEbJADVdffughhYgF",
	  "remove": "_2qTNEmDNBxEEHjfsZx6jUU",
	  "viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
	  "studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
	  "addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
	  "removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
	  "studentblock": "_1npAxnK_u_EjOeG19x_gPa",
	  "studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
	  "participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
	  "tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
	  "tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
	  "thStyle": "_253KYsN6UeeVvx_kTT0FTG",
	  "hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
	  "removeStyle": "XmJHLhTym-EGI-3dZGbWc",
	  "attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
	  "highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
	  "highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
	  "lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
	  "lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
	  "removePdng": "j5wasHyxigllgK3-KBNZp",
	  "endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
	  "dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
	  "dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
	  "applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
	  "filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
	  "gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
	  "facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
	  "btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
	  "btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
	  "fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
	  "fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
	  "googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
	  "inLine": "_3SKSHSNT9quu0AEumeGTQT",
	  "inputGrade": "_2Q0ilim6NermuOEyggbVkC",
	  "flexContainer": "_3ELNW3V19Qpndrzsv3951F",
	  "actionRightAbs": "_1uuENocETyaOc2rRiwior5",
	  "closebtn": "_2GrTt3NBt2HkOlxHF614-3",
	  "editClosebtn": "wpV9V72-_ceslWX8JrnXB",
	  "first": "_35E4iHqMVJmbMgmzKL6Tv5",
	  "headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
	  "flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
	  "formH5": "_23XBDJVodLOklMKND6BFwz",
	  "qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
	  "editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
	  "formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
	  "blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
	  "blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
	  "btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
	  "btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
	  "blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
	  "btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
	  "btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
	  "btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
	  "blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
	  "btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
	  "btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
	  "inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
	  "diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
	  "gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
	  "gTextg": "_1SEMPATJm2_wne7kQlcG10",
	  "gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
	  "errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
	  "mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
	  "rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
	  "seprator": "_2UGm2z7pTnp444hmFIFOIp",
	  "checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
	  "inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
	  "localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
	  "localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
	  "nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
	  "allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
	  "proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
	  "popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
	  "textCapAll": "dmP3hNbZiWb10oxof-KKb",
	  "stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
	  "stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
	  "topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
	  "emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
	  "txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
	  "addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
	  "addStudPop2": "pJUMNDAuP9bGHel-6ESf",
	  "addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
	  "addStudText": "bfDwzSKIRHVbJQpazT_Il",
	  "changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
	  "fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
	  "fdInfo": "jkgczk2IOaooUA2sdYQcY",
	  "fdName": "_1GOg26hVpb9pUXFN9I9y75",
	  "fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
	  "fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
	  "fdAns": "_25xB1C18_oF2MVuf5cn3zq",
	  "errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
	  "qleditor": "_17N2ULf7_DBC-wvog56baS",
	  "txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
	  "addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
	  "progress-bar": "A2ftBZ69PzksWTqo3GY0k",
	  "formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
	  "mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
	  "innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
	  "loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _ShowContact = __webpack_require__(206);
	
	var _ShowContact2 = _interopRequireDefault(_ShowContact);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
	  id: 'no_users_found'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'add_member'
	});
	
	var _ref3 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'search_members_add'
	}));
	
	var AddMember = exports.AddMember = function (_Component) {
	  _inherits(AddMember, _Component);
	
	  function AddMember(props) {
	    _classCallCheck(this, AddMember);
	
	    var _this = _possibleConstructorReturn(this, (AddMember.__proto__ || Object.getPrototypeOf(AddMember)).call(this, props));
	
	    _this.findUser = function (e) {
	      var value = e.target.value;
	      _this.setState({ value: value });
	
	      if (value != '') {
	        var obj = {
	          uid: _this.props.uid,
	          input: value,
	          gid: _this.props.gid
	        };
	        (0, _UserDashboardActions.getMachedContacts)(obj).then(function (res) {
	          if (res) {
	            if (res.status) {
	              _this.setState({ users: res.data, error: '' });
	            } else {
	              _this.setState({ users: [], error: res.error });
	            }
	          }
	        });
	      } else {
	        _this.setState({ error: "Please enter the mail id.." });
	      }
	    };
	
	    _this.freeData = function () {
	      _this.setState({ value: '', users: [] });
	      _this.props.hidecallback();
	    };
	
	    _this.cls_block50_l = _ConfSettings2.default.block50 + ' pull-left';
	    _this.cls_btnSaveEdit = 'btn btn-success btn-icon btn-sm';
	    _this.cls_formControlOverwrite = _ConfSettings2.default.formControlOverwrite + ' form-control ';
	    _this.cls_calendarInlineBlock = _ConfSettings2.default.calendarInlineBlock + ' clearfix';
	    _this.cls_inputGroupAddonOverwrite = _ConfSettings2.default.inputGroupAddonOverwrite + ' input-group-addon';
	    _this.cls_confDatePicker = _ConfSettings2.default.setDueDateOverwrite + ' set-due-date form-control confDatepicker';
	    _this.cls_confTimePicker = _ConfSettings2.default.setDueDateOverwrite + ' set-due-date form-control confTimeTpicker';
	    _this.cls_errcls = '' + _component2.default.error;
	    _this.state = {
	      value: '',
	      error: '',
	      users: []
	    };
	    return _this;
	  }
	
	  /*handleChange = (e) => {
	   	//console.log("value == ",e.target.value);
	   	this.setState({ value : e.target.value });
	   	this.findUser(e.target.value);
	  }*/
	
	  _createClass(AddMember, [{
	    key: 'sendUserId',
	    value: function sendUserId(userId) {
	      if (userId && userId != 'undefined') {
	        this.props.getUserId(userId);
	        this.setState({ value: '', users: [] });
	      }
	    }
	  }, {
	    key: 'render',
	
	
	    //for schedule
	    value: function render() {
	      var _this2 = this;
	
	      var listUsers = _ref;
	      if (this.state.users) {
	        var docs = this.state.users;
	        if (docs.length > 0) {
	          listUsers = docs.map(function (userData) {
	            return _jsx(_ShowContact2.default, {
	              value: userData,
	              getUserId: _this2.sendUserId.bind(_this2),
	              classTitle: _this2.props.intl.messages.add_user
	            }, userData._id);
	          });
	        }
	      }
	      return _jsx(_reactBootstrap.Modal, {
	        show: this.props.showModal,
	        onHide: this.freeData
	      }, void 0, _jsx(_Modal.Header, {
	        closeButton: true
	      }, void 0, _jsx(_Modal.Title, {
	        className: _Admin2.default.popHeadingAll
	      }, void 0, _ref2)), _jsx(_Modal.Body, {}, void 0, _ref3, _jsx('div', {
	        className: _Admin2.default.searchBox
	      }, void 0, _jsx('input', {
	        type: 'text',
	        name: 'search',
	        placeholder: this.props.intl.messages.search_contacts,
	        className: _Admin2.default.whiteSearch,
	        onChange: this.findUser.bind(this),
	        value: this.state.value,
	        maxLength: 50,
	        autoFocus: 'true'
	      }), _jsx('label', {
	        className: this.cls_errcls
	      }, void 0, this.state.error)), _jsx('div', {
	        className: _Admin2.default.searchUsersListBlock
	      }, void 0, _jsx('div', {
	        className: _Admin2.default.searchUsersListGroup
	      }, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
	        md: 12
	      }, void 0, _jsx('div', {
	        className: _Admin2.default.userListGroup
	      }, void 0, _jsx('ul', {}, void 0, listUsers))))))));
	    }
	  }]);
	
	  return AddMember;
	}(_react.Component);
	
	AddMember.contextTypes = {
	  router: _react2.default.PropTypes.object
	};
	
	AddMember.defaultProps = { showModal: false };
	
	exports.default = (0, _reactIntl.injectIntl)(AddMember);

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
			value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _LoginActions = __webpack_require__(21);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _DashLayout = {
			"container": "_3MDDAV5-6IWoiIUW_vk7CC",
			"elasticWrapper": "R8LqGT-AW4U3mBKJ1MFvQ",
			"minimize": "_21MnHEkmOnrX-W0YKg26By",
			"footerFixed": "RdcUT5Wsmg6NbDJAwL0Md",
			"minimizeFooterFixed": "gbOmycGmduK-Yg4TTsE33",
			"elasticSideBar": "PPajvO_MDBlpK2G4OYyA8",
			"slideElasticSideBar": "_35chDIcwDNW7Nw5j2d-Zyx",
			"mobConf": "Kk9_BVy3rj24cvtuu_ns7"
	};
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _ConfSettings = {
			"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
			"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
			"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
			"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
			"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
			"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
			"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
			"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
			"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
			"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
			"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
			"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
			"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
			"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
			"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
			"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
			"block50": "_3KEUbD9sh-5efPnOe48KQu",
			"nohover": "m7jTOV3afDX3KYXfpJDuW",
			"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
			"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
			"active": "_3wgRcJQgpFwV1Tze6eaYAL",
			"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
			"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
			"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
			"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
			"backSearch": "w7BGjmEiChPoMYjET5k8R",
			"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
			"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
			"modContactList": "_1zmiGIPb92yNtOu845RHyM",
			"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
			"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
			"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
			"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
			"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
			"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
			"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
			"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
			"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
			"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
			"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
			"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
			"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
			"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
			"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
			"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
			"btn": "_27VXnOss6C0tcmiXDJyEQY",
			"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
			"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
			"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
			"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
			"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
			"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
			"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
			"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
			"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
			"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
			"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
			"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
			"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
			"radio": "_1YNHku8cDP1FxyBn3XkUJY",
			"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
			"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
			"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
			"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
			"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
			"downloadFile": "_33q4w5biPTOCecW_SwRklY",
			"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
			"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
			"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
			"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
			"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
			"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
			"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
			"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
			"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
			"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
			"iconBlock": "_1llySoPNa1j3k655fl2PNS",
			"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
			"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
			"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
			"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
			"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
			"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
			"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
			"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
			"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
			"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
			"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
			"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
			"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
			"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
			"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
			"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
			"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
			"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
			"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
			"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
			"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
			"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
			"centerBlock": "HLVHVZhqp-7yopt3Ah073",
			"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
			"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
			"btnTransport": "szHYW92cM7tgGZoXatQyg",
			"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
			"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
			"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
			"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
			"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
			"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
			"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
			"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
			"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
			"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
			"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
			"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
			"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
			"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
			"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
			"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _ChatReducer = __webpack_require__(39);
	
	var _ChatActions = __webpack_require__(30);
	
	var _CreateGroup = __webpack_require__(202);
	
	var _CreateGroup2 = _interopRequireDefault(_CreateGroup);
	
	var _GroupList = __webpack_require__(203);
	
	var _GroupList2 = _interopRequireDefault(_GroupList);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('img', {
			src: '/images/profile-pics/no-contacts.png'
	});
	
	var _ref2 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
			id: 'no_recent_groups'
	}), _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
			id: 'add_your_groups'
	})));
	
	var _ref3 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
			id: 'my_groups'
	}));
	
	var _ref4 = _jsx('img', {
			src: '/images/black-icons/black-right-arrow.png'
	});
	
	var _ref5 = _jsx('img', {
			src: '/images/black-icons/black-add-contacts.png'
	});
	
	var ConfGroups = function (_Component) {
			_inherits(ConfGroups, _Component);
	
			function ConfGroups() {
					_classCallCheck(this, ConfGroups);
	
					var _this = _possibleConstructorReturn(this, (ConfGroups.__proto__ || Object.getPrototypeOf(ConfGroups)).call(this));
	
					_this.state = {
							showAddGroup: false,
							uid: null
					};
					return _this;
			}
	
			_createClass(ConfGroups, [{
					key: 'componentDidMount',
					value: function componentDidMount() {
							var result = this.props.loggedInData;
							if (result && result.data && result.data._id) {
									this.setState({ uid: result.data._id });
									this.props.dispatch((0, _ChatActions.getMyGroups)(result.data._id));
							}
					}
			}, {
					key: 'showOrHideAddGroups',
					value: function showOrHideAddGroups(e) {
							this.setState({ showAddGroup: !this.state.showAddGroup });
					}
			}, {
					key: 'getGroup',
					value: function getGroup(data) {
							this.props.callBack(data);
					}
			}, {
					key: 'render',
					value: function render() {
							var _this2 = this;
	
							var cls_headerList = _ConfSettings2.default.modHeaderList + ' clearfix';
							var cls_midTitle = _ConfSettings2.default.midTitle + ' pull-left';
							var cls_block50 = _ConfSettings2.default.block50 + ' pull-right';
							var cls_block50_l = _ConfSettings2.default.block50 + ' pull-right';
							var cls_headerText = _ConfSettings2.default.headerText + ' pull-left';
							var cls_optionBlock = _ConfSettings2.default.optionsBlock + ' pull-right';
							var cls_settingsOptions = _ConfSettings2.default.settingsOptionInput + ' ' + _ConfSettings2.default.radio;
							var cls_modChatFooter = _ConfSettings2.default.modChatFooter + ' clearfix';
							var cls_chatWrite = _ConfSettings2.default.chatWrite + ' pull-left';
							var cls_formControl = _ConfSettings2.default.formControl + ' ' + _ConfSettings2.default.formControlChatOverwrite;
							var cls_sendMessage = 'pull-right ' + _ConfSettings2.default.sendMessage;
							var cls_chatBox = _ConfSettings2.default.chatBox + ' ' + _ConfSettings2.default.bgTransition;
							var cls_callBox = _ConfSettings2.default.callBox + ' ' + _ConfSettings2.default.bgTransition;
	
							var cls_contactsList = '' + _ConfSettings2.default.contactListFixed;
	
							if (this.props.currentState.groups) {
									cls_contactsList = _ConfSettings2.default.contactListFixed + ' ' + _ConfSettings2.default.openMyContacts;
							}
	
							var groups = _jsx('div', {
									className: _ConfSettings2.default.modNoContacts
							}, void 0, _jsx('div', {
									className: _ConfSettings2.default.noContactsCircle
							}, void 0, _ref), _ref2);
							if (this.props.chatData.mygroups) {
									var docs = this.props.chatData.mygroups;
									if (docs.length > 0) {
											// console.log("docs === ",docs);
											// let key = 101;
											var self = this;
											var listgroups = docs.map(function (doc) {
													return doc._id ? _jsx(_GroupList2.default, {
															value: doc,
															callBack: self.getGroup.bind(self),
															chatCallback: _this2.props.chatCallback
													}, doc._id) : null;
											});
											groups = _jsx('div', {
													className: _ConfSettings2.default.modContactList
											}, void 0, _jsx('ul', {}, void 0, listgroups));
									}
							}
	
							return _jsx('aside', {
									className: cls_contactsList,
									id: 'blockMyContacts'
							}, void 0, _jsx('div', {
									className: _ConfSettings2.default.tableBlock
							}, void 0, _jsx('div', {
									className: _ConfSettings2.default.modAsideHeader
							}, void 0, _jsx('div', {
									className: cls_headerList
							}, void 0, _jsx('div', {
									className: cls_midTitle
							}, void 0, _ref3), _jsx(_CreateGroup2.default, {
									showModal: this.state.showAddGroup,
									hidecallback: this.showOrHideAddGroups.bind(this),
									uid: this.state.uid
							}), _jsx('div', {
									className: cls_block50,
									onClick: this.props.hideCallback,
									title: this.props.intl.messages.close,
									id: 'closeMyContacts'
							}, void 0, _ref4), _jsx('div', {
									className: cls_block50_l,
									title: this.props.intl.messages.create_group,
									onClick: this.showOrHideAddGroups.bind(this),
									id: 'iconMyGroup'
							}, void 0, _ref5))), _jsx('div', {
									className: _ConfSettings2.default.tableBlockRow
							}, void 0, _jsx('div', {
									className: _ConfSettings2.default.tableBlockCell
							}, void 0, _jsx('div', {
									className: _ConfSettings2.default.modAsideListBody
							}, void 0, groups)))));
					}
			}]);
	
			return ConfGroups;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
			return {
					intl: state.intl,
					chatData: (0, _ChatReducer.chatData)(state),
					loggedInData: (0, _LoginReducer.loggedInData)(state)
			};
	}
	
	ConfGroups.contextTypes = {
			router: _react2.default.PropTypes.object
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(ConfGroups);

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.CreateGroup = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Modal = __webpack_require__(52);
	
	var _component = {
		"form-control": "QmIrbtmLmFNpHdWMqFMWS",
		"innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
		"colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
		"error": "_3jAfmA6J7YmNDyB2VfsCxP",
		"mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
		"dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
		"iElement": "_2crZNiFs8z8oNhzPDC1qOE",
		"oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
		"iLabel": "_3Pyvct_srCoSvJCgGG41jw",
		"oLabel": "NsxWZpxBqBX8wky_O477_",
		"iForm": "_3IlToa7pigrSS8KWut_dJ8",
		"oForm": "_3N0YNUcfI5U02VSmBEbYot",
		"iFormField": "_12yKSn29WLZIE6fvGQfcrN",
		"oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
		"iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
		"oFormGroup": "_386CxczA49XX2-ejr3Qe55",
		"formNext": "ccTxjcG6_GZO9OgzW33HT",
		"iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
		"oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
		"iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
		"oContainer": "_2tEAAtqgoutuOUU96rNvv1",
		"iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
		"oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
		"iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
		"iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
		"whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
		"iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
		"active": "_2fF1Q9nO2O_1B8Ldb4RM52",
		"scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
		"errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
		"errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
		"whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
		"greyCard": "_34l9W17Mt1koxHLd1yUqgk",
		"reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
		"countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
		"react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
		"ad": "N3bKXyhfwvWT3eAEC9Nno",
		"ae": "taXUT8yfjgRMeSH3rMNxy",
		"af": "_2vH4qShCgBPBO4GR8BdNvd",
		"ag": "n8QfWtvpZLMpatCUqX2Td",
		"ai": "_3fPX_RcpesOPxFsmsaygCE",
		"al": "_1T12tbcC6990b-fIMG5LYW",
		"am": "_31HdarMDfXvAgjizVUoeHk",
		"ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
		"ar": "_2qJleMgRbIErIrx3kQF57O",
		"as": "_2ZPVYL8Vjn-vdWZToCEhjN",
		"at": "_1hWilvnrVbANEHRyLGlF-m",
		"au": "_2zJE4K6o-ftWqhb3exXZgk",
		"aw": "_1UroMxX5JHt9bjGdHwa1OY",
		"az": "_-Y2xueZ_1mEtB9YDOqEGB",
		"ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
		"bb": "_34600Kl8Wac9Hx7S3-3U6b",
		"bd": "_3WBX90V5VJXA7-vSUfEWCh",
		"be": "BcK33edOPcbYdkxxvOApy",
		"bf": "ShN64-J7UZdswoQjkf7L_",
		"bg": "_2A9PgkQEF5_KbvHvDf6_lY",
		"bh": "_10p3rxNRYOhv8-BtZuq1w8",
		"bi": "_6MzP1qXXDFAZVL7nBmRiH",
		"bj": "_2U8H1sji9LfDEW706KyKvF",
		"bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
		"bn": "PgMDvF79WHl3kaklOmhw3",
		"bo": "_7MheGVInaTi-QLxw5PiUi",
		"br": "_1BDNUyT0cHDlbCBFgrrLkJ",
		"bs": "_3vcASZB5bu7mJAzTzaRkWe",
		"bt": "esu4pvyd9ZFWrf-etnrva",
		"bw": "_2Hbv1I361RJFK3Ph2xPlu_",
		"by": "_2tbYam6Og8RAicMhX9SXvI",
		"bz": "_3xB704PIgqFnU2zTG-JZFN",
		"ca": "_36FyK29nkNl9Ez7yWh04AS",
		"cd": "_9PnHTqK1pSn_GIAbBtPT2",
		"cf": "_2LgMF7o1A3a2cgw5jkpvZV",
		"cg": "_3hYc9Y3UdCphltZKe2vJWk",
		"ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
		"ci": "FoSGkvvMDFAVcvsZBWX-Z",
		"ck": "_1742IgEaHW3SZU7h_-nkwr",
		"cl": "_36IaMt7ntEwUsH4lwN4tW-",
		"cm": "_1N8krqbPtlsEVsh6SaCetm",
		"cn": "IfkD3fwbUSx9FZflX6iIU",
		"co": "_3Y7u7ONzxyZVjZYzS1OHTr",
		"cr": "Gw5Qz4qBNZjPDmpQmi-d2",
		"cu": "ZuHtEp_knwZcbwTTJkRgI",
		"cv": "o6BzJCyjRH1pOsf_HpbQ6",
		"cw": "hRElJCQXyNIITDZ6UQVut",
		"cy": "_2cHKWrINPNO6L8BEOdtJCG",
		"cz": "nS617LE8Qcckdv9HJTWpt",
		"de": "fqJD93WBywDPs0lrLEXLT",
		"dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
		"dk": "_3fpBLMtuUi0kowy3ziMRYd",
		"dm": "_3gMwGkQW-OGFx1U7vd7VMD",
		"do": "G9EZGjpXLJUyQuREesyGO",
		"dz": "_3Nka0vwv6nZpeugyuqYQIJ",
		"ec": "_18t83SdIOs8EY6iF0zV0CZ",
		"ee": "_1miCbYr55XmBKvcUu6XetR",
		"eg": "_1T55wMh1svM7M5QGxFM2ex",
		"er": "c0Ab9spCQ4VnXr_6xijnD",
		"es": "_1lutiEL9tJpdNgKmnTT6Ld",
		"et": "_2GGXIPO2kOV6CUsu65V4Z3",
		"fi": "_1I-g5oWpQznT5QZuBfQ8A",
		"fj": "_3oeTP_GhC_XzsjzHW86oDc",
		"fk": "_3-_BjK4NArHS0nyf0DLc4F",
		"fm": "_1WQYGDC-zTatxog3SIwE80",
		"fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
		"fr": "_3-mqatBXfaTfex8LWjnIDA",
		"bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
		"mf": "_34f4ya9mcbpIcQPgHJ4I6c",
		"ga": "_15_iO4CJaXbX7PySxoldPF",
		"gb": "_1vZuFSSey59_ixozre-0L_",
		"gd": "_26Ub0jcjDpVD4nwM7m5n4e",
		"ge": "_27ctDR0Hf6HO15MgHS8wyh",
		"gf": "_2S6C39D4wNBuVSqzYM5Ldy",
		"gh": "_3vjGi6-umA-RzwxRFaTfNN",
		"gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
		"gl": "_1OTvyS4D4UOkymKuDLxUdx",
		"gm": "_3-0gezNOVCHKzaLYGUySo2",
		"gn": "_8f6uadrEfnS9IX8DEIpKO",
		"gp": "_36yEj9UcEbZcI0WJvgmk0B",
		"gq": "xHX18x9xk7PhDBlgsvnad",
		"gr": "HTk_eFej1VrCiBuKBIfLT",
		"gt": "hgmUbzxaHNZNL6frPhPeb",
		"gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
		"gw": "_36JwaXqhh4gBrIvAy4c1KO",
		"gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
		"hk": "_1mT74O5OVtonPLmYnVVOu7",
		"hn": "_1ze0KI-TYxTrDcXlMOu24s",
		"hr": "ZIDUSRfcbDCZTyhqWGPob",
		"ht": "Y65Ad5pf3z7ufcknP0vhk",
		"hu": "_3EHKICvcensXt5hEu8Nkfs",
		"id": "_3oZE8uvxIFK7M9DCEtsSCD",
		"ie": "_2RNmpg94YYioQp2fWyz_xn",
		"il": "_2Mq_no7KYxPp2NSLGS1Tcs",
		"in": "_1UlEZ269GihRa58c5mCEBN",
		"io": "_3ovelrc7S_DdmXxL-8uuwk",
		"iq": "_3VSlK6DYHrBgKbkE2Rng2N",
		"ir": "NRX2sFBmuPSJ9EOigyuEP",
		"is": "_25HaTNE7x74CJO9S1mnm4I",
		"it": "_1-LmlhbrcpKN-xjESmR_sO",
		"jm": "VsvDBply-4FtMoJhi8Cvu",
		"jo": "yEE3hbkzWK8CSCrCJibCo",
		"jp": "_3oxjjz1uD2cX2QsoSToLgz",
		"ke": "_1ksOT6KMPd99EWuWCXPga_",
		"kg": "_2CMnR3yv5DGwDc8p3uoOjp",
		"kh": "_927b1QnaSWnN35i3bVewJ",
		"ki": "_2CuDp55lqYTpFp68D4IWep",
		"km": "_3tvMTeZYZMzBB9bGn9lV9E",
		"kn": "_6kbCvwc22pJX0tNv3HToQ",
		"kp": "_3tIPOe5PNrHH-bgCGaZTJj",
		"kr": "_2653rpVUuy3ETaw1mogdnF",
		"kw": "_1SKg_lTe0ShbPSOl44eKjp",
		"ky": "tgj8SOv7bYoF7qfbbQWNG",
		"kz": "bchn50J152EdQa0zf3k5u",
		"la": "mu9oycLgpKX8_yLLkR5b9",
		"lb": "_2TcAFbagIrNyc6mgzRVNW0",
		"lc": "_2IFItnUNT-albvpN-ksxd2",
		"li": "_3_E6nQspv6zJQLQI24puaS",
		"lk": "_2M2wq3qQhGeUegbBTs7ilH",
		"lr": "L4o4xOg0s6QbasyIRPgyF",
		"ls": "LhBB6SRin61WSFtUwaEfe",
		"lt": "ITDUphrnMkKItKGMVHZf8",
		"lu": "_1mVW30sc4i-1M8tDPCQlL",
		"lv": "_3rq6vE2IagAsGI6iESAcJq",
		"ly": "_3se_Nzm1WQrEN3VZYiJJrv",
		"ma": "_fSDiNxp_jjfqkQcWffDM",
		"mc": "_2hRTRZeBtDGN4mNeWBZVgB",
		"md": "_26jDl0skadEwmUYDGmEzST",
		"me": "_388lJj_7sQdyd9HL7pMrar",
		"mg": "_3aFoqVWcvG3p47Vwa6UuoE",
		"mh": "_1YHi6OtXmKfP15ZNbwYGgy",
		"mk": "_9QVyhHcp8yH762J8fWXhC",
		"ml": "yYD99PoyhgFI4912_qoyJ",
		"mm": "URzk8-j7LcySpGUMJf_Qk",
		"mn": "_1J-lktQUTK0rydBz3foJGF",
		"mo": "_1sbL0zhHof-KbfGWu2qjqF",
		"mp": "_1tJjJlSjRw5AnqcXXmGwCI",
		"mq": "fHob9sxaJrTuqSc0xL744",
		"mr": "t-Bmj7a31aA-IwcRcL0ua",
		"ms": "_2xyT54DQP62zWDySH7-Kdy",
		"mt": "_1Ul_OlGODc8S0QplVq94PV",
		"mu": "_1yIBERRJqnV33pTq2VpKRc",
		"mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
		"mw": "_3i8n-5-htdGNJLgn96O21",
		"mx": "_16-6zoyiVzSGB1O72cUTzV",
		"my": "_3W2P0D9eTN4BQoOcThOsaM",
		"mz": "wJ8icX7Asp3dSImkXOdTM",
		"na": "_1qt_F94mybbX5kr0ArtN-Z",
		"nc": "h82AMIuCGdKf69Hc_nM6D",
		"ne": "_2mVa5nGsijzD93WRl8dk64",
		"nf": "_3XQ9oUH_84SsdZLjpVRuqT",
		"ng": "_1uyyH1GZjsEk3YpaUSmmG6",
		"ni": "_22_3H6UeFo26o3fSavtQaX",
		"nl": "_93asfBYgR8C7bEDucZO8l",
		"bq": "_37A1nwIz7Z3obwUjmliw4s",
		"no": "_2-sVmkWiLn_ogTikc0c0Eg",
		"np": "_1PqZSwf5cuMNmbE7bpKe67",
		"nr": "_9q5Rg9Xn0G2buivFSGySP",
		"nu": "RLhVdyjL9Cex8ekaJqirU",
		"nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
		"om": "_9mZYNhgBLiQg-j1FeVprJ",
		"pa": "_3S7TrzxJIEYVghUMVHB6E7",
		"pe": "_3V5sP7VvdGOFqApj7POYl2",
		"pf": "_1YzdrkyHO-eCcEFF-hjZl7",
		"pg": "ddWAanlQJPlB0QDWO6dAF",
		"ph": "_2TGbmCcqHlJFCssz78MxOs",
		"pk": "_2JerTABYGCUN8FLjpnDzKy",
		"pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
		"pm": "_29Hoo7EsoSHtvRFvlVg2cD",
		"pr": "_3_pkwz60KLoYcbKwaRvIsS",
		"ps": "_3jenITZ_yUYS7kU1HwFEHj",
		"pt": "_1vz8ABWy5Yd43_JhaTWq9u",
		"pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
		"py": "_1_W41pJLcGMRhLdU997clv",
		"qa": "Z0tjAakoNSOs14KuenmRi",
		"re": "_3k5KF4jzE7HUitQw9MQKnp",
		"ro": "_2b8XhT3-7NgjAC8gJJkpis",
		"rs": "_2MUJr9MQbiKRTd_g0TaRQr",
		"ru": "HjzPW2CxxNMSGZw1ugFW7",
		"rw": "_23TGIOoPmB9QYqIPG6W3tA",
		"sa": "_34WM8rSonfayW0vJ3koqJS",
		"sb": "_3486rZNsCjvTmIoHbjK8mG",
		"sc": "_3meAM_iQCU6MyfPQJTN3yl",
		"sd": "_2x6XeHNF__4s9VVfFXCJhO",
		"se": "_66VDclGQXxpdUR8uE3ZFa",
		"sg": "tv3I_hfLcUJ_8i9ewVcUz",
		"sh": "_1syDbbhbumwMwwD7Dwkb1V",
		"si": "_3jsffwJjGr2sMEofSTTGkG",
		"sk": "_1EpYAUcQLCqbYB48Auixqb",
		"sl": "_3STJQv9nY5mol4cW82D2ci",
		"sm": "_9aTR-AZMTaYHRmDVAyFTM",
		"sn": "_3mTatYTWeJQQACfV7xzRhi",
		"so": "_1LnWon2slwLMqAHzhkRT4c",
		"sr": "_1GSedFwSsf5isgOi3p0x6U",
		"ss": "_1sq99LOjKKgery3luOXOFn",
		"st": "_1O6vYx_NaXFBAs1qYxgwaB",
		"sv": "_10D9RGnRzUv14bYWQaC23c",
		"sx": "KonDEEzH2JzIWsVUBzFdY",
		"sy": "_1ZAnqGYeixOJVFwwt6hNIo",
		"sz": "_3FeOFkec3sXYbvQhWDdIM7",
		"tc": "_1FZvldKEV-vz12TyyNfEf",
		"td": "_31fysfDRtTWVKcX_UjX0ty",
		"tg": "H60Kyr6MsF6nvRz5l7EfN",
		"th": "SHZkbUz1c_H_zDOfxLc4",
		"tj": "_2MRI0fA4OLgepXVooYMu9H",
		"tk": "_1W959S9LHLCKhz3xi4MpHe",
		"tl": "_1lMF_0nwQXTyBRRzRj7hBF",
		"tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
		"tn": "_2MeGi_bqLVuCaRtJzs3QqA",
		"to": "_3egwC_50WENVPaap_uwXr8",
		"tr": "_2KiPy3o6m7JCKQWPY2fI1d",
		"tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
		"tv": "_2D9VWSmHkhgNemAaIKF_cp",
		"tw": "_2J7nVAh1zEa7kV5Ba51CLV",
		"tz": "_2acF96LLqMjlbfMX1oiAjT",
		"ua": "_2rr3Tyr8dP6vDvE0khEDKT",
		"ug": "D7gjzKmlr78rNWXXw90np",
		"us": "_1l5RtWI_acgLVeCd5fjgHG",
		"uy": "_1zX6hTsIa2TtL6dgR47eQ9",
		"uz": "_29NUL3VtwK1_RWUyPsY2ei",
		"va": "_39kTgRBkhqqGVLUTJvK_67",
		"vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
		"ve": "_3Lk2Svkm2NTAVpUfiY_No5",
		"vg": "_3SiYuGrNzW9DNkXwTZugyj",
		"vi": "_2BiiERObu5xcE6P1SZxLdj",
		"vn": "_3kSg6iW0KLoUpJ0g70fckK",
		"vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
		"wf": "Arz0xEqJcbKbLmPz_tXTS",
		"ws": "_3oTaxcmbTriEd90-cXNqD8",
		"ye": "gxtmCiQO2ao4JTQXuRUIJ",
		"za": "_25HyrYKmQQAteF_LwADnIt",
		"zm": "Kui2u7hZHcNBqlzbqR-vQ",
		"zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
		"hide": "_2kO_U0LXcg71jJA6RSia2e",
		"v-hide": "_2HBc009zwTsSlkh8P8tH10",
		"invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
		"flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
		"open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
		"selected-flag": "_10c169vRt8V92_nQ_S0KtR",
		"flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
		"arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
		"up": "_2ykRnfq4f2nlmZGfvzrn92",
		"country-list": "UlTusogWL2urjgGgLNpcD",
		"divider": "_2zMaTbM3nSdE07wOs7YYRt",
		"country": "uL848pHFWhb_G94Ak-KX5",
		"dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
		"highlight": "BLa_2aA2PkYD2PsO2fvNC",
		"country-name": "_3ih_ovRiGmAkpjxuz63nhk",
		"uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
		"fileUpload": "_2WENukerx3mNXkTyu0UXQf",
		"uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
		"upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
		"blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
		"feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
		"errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
		"gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
		"red": "_3wj0AXV9gqX9YG1nk-2u9J",
		"green": "_3KPVxc3su8ewtuKZgu8TGv",
		"orange": "_3cLlE5QI9XJwY6e7jO5bLg",
		"capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
		"importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
		"importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
		"importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
		"icon": "_12rnwIUewKT2PdtWMnNyD5",
		"importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
		"broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
		"broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
		"btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
		"textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
		"spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
		"pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
		"lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
		"removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
		"inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
		"popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
		"dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
		"dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
		"applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
		"filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
		"btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
		"assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
		"pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
		"assTab": "y4LW63OuadI0JWTQBnbJ1",
		"heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
		"radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
		"wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
		"leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
		"rightBox": "DP21PoKxwKk_vJyOuQTcr",
		"gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
		"actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
		"gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
		"actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
		"gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
		"morePref": "JBm94eKPIFI8vfiroATJ6",
		"tile": "_1Ssp2zTovh7AwJWuRkgnge",
		"tileItems": "_3cDqgy8AedDYzhy8Euosis",
		"tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
		"tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
		"category": "_2Ow56TBY2Y24yY5SjVRU4l",
		"innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
		"maxScore": "_3uL97t2vemfuAs83cAFhjE",
		"maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
		"scored": "_12gGWK_s69JBGzOAX7ClkT",
		"scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
		"remTile": "_3vgBsvWRGVVRwIEDn1TquO",
		"tileBody": "dF1WC_PeNjG87K2XGMIcS",
		"tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
		"gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
		"gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
		"assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
		"blue": "K7acjAQMroOGGtUqqojYy",
		"yellow": "G7N-PGOIbGO_ZkaqBu2mx",
		"txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
		"txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
		"txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
		"txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
		"txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
		"txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
		"addTile": "lCw_kxhsAPcuM3yFAqvpF",
		"addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
		"addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
		"commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
		"totalScore": "FDG4LAia-7JDDtxb7R4Kb",
		"totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
		"textBox": "_13VdIFmMegxz_eR8VIXN_M",
		"totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
		"totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
		"resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
		"resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
		"resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
		"headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
		"scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
		"resultBody": "N6kKlySaRGbRcB4bBmpZ0",
		"resGroup": "_2byM-_1N3yjHb2dpmlikdf",
		"resTile": "DZeuj4DKkdAPKCgYd76RK",
		"resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
		"resRating": "R7j9mxFZmdmLgC7bPXpyN",
		"txtSize": "_977ldMQMMiHQ0YG_61T3g",
		"txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
		"resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
		"resInput": "_14gsxA36f-uYOfxGDvr_gi",
		"activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
		"feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
		"fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
		"feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
		"profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
		"profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
		"profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
		"name": "_25-6SxUiv8zhOMEVTRrg8w",
		"commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
		"addpdng": "_6rQH8tivz8ELIWszpbahs",
		"good": "_3lOxcxDfxhPcuhLBJHo4Ur",
		"vGood": "l_IAfocpDxfvpU316U0EI",
		"fair": "_3I3YapUnBVxgs-ZsGf3Poh",
		"poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _Admin = {
		"form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
		"progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
		"progress": "_32kzRKjl47M7AcFAivyyho",
		"progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
		"progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
		"backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
		"containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
		"googleContainer": "_1G8DyX--1Xskim3uSHbxil",
		"googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
		"googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
		"header": "_2xHja59x-eRkfv95koY1ce",
		"hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
		"body": "_1wybmROxdPMB2DSkLyTGGx",
		"navRight": "_2fWAne55trxpJYagJCezpL",
		"navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
		"active": "_1mqL1x9MCLjw6_Ok5T24oF",
		"midContainer": "_1oKiSeTflL6v2wZC13o7oC",
		"formField": "P8wcycRRhQUOqnf0qytj0",
		"profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
		"fullname": "m8-V01m5JYGd00wGYRCbo",
		"position": "aCZ3mMjMPWmB1Xr4poVi_",
		"txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
		"plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
		"inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
		"inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
		"inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
		"inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
		"labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
		"viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
		"avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
		"avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
		"imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
		"avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
		"profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
		"avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
		"avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
		"whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
		"whiteTile": "KCFNekbG6kNm7QCCmxcOC",
		"customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
		"mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
		"infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
		"headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
		"headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
		"headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
		"actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
		"headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
		"headingTxt": "IA7VynD7jO_xLZWz7aACg",
		"userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
		"userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
		"userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
		"userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
		"searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
		"searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
		"searchBox": "_79ROL_K6mHBW5o2LSPYyD",
		"whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
		"whiteIconSearch": "_8753oABxDX3rcNGmogytj",
		"chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
		"chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
		"whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
		"whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
		"whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
		"userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
		"modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
		"invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
		"brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
		"imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
		"fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
		"checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
		"fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
		"inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
		"accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
		"accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
		"roomLink": "_3GAUEPkkabqWlcSfevhUau",
		"multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
		"inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
		"gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
		"gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
		"gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
		"gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
		"gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
		"groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
		"groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
		"avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
		"avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
		"removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
		"locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
		"locationContainer": "GqFlk81qWkoM8pg8rM9mT",
		"locationHeader": "mgZJ5PYIcU3xilagy40bF",
		"deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
		"locationBody": "_9tu9wEbJADVdffughhYgF",
		"remove": "_2qTNEmDNBxEEHjfsZx6jUU",
		"viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
		"studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
		"addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
		"removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
		"studentblock": "_1npAxnK_u_EjOeG19x_gPa",
		"studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
		"participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
		"tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
		"tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
		"thStyle": "_253KYsN6UeeVvx_kTT0FTG",
		"hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
		"removeStyle": "XmJHLhTym-EGI-3dZGbWc",
		"attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
		"highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
		"highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
		"lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
		"lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
		"removePdng": "j5wasHyxigllgK3-KBNZp",
		"endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
		"dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
		"dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
		"applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
		"filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
		"gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
		"facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
		"btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
		"btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
		"fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
		"fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
		"googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
		"inLine": "_3SKSHSNT9quu0AEumeGTQT",
		"inputGrade": "_2Q0ilim6NermuOEyggbVkC",
		"flexContainer": "_3ELNW3V19Qpndrzsv3951F",
		"actionRightAbs": "_1uuENocETyaOc2rRiwior5",
		"closebtn": "_2GrTt3NBt2HkOlxHF614-3",
		"editClosebtn": "wpV9V72-_ceslWX8JrnXB",
		"first": "_35E4iHqMVJmbMgmzKL6Tv5",
		"headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
		"flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
		"formH5": "_23XBDJVodLOklMKND6BFwz",
		"qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
		"editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
		"formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
		"blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
		"blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
		"btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
		"btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
		"blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
		"btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
		"btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
		"btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
		"blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
		"btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
		"btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
		"inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
		"diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
		"gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
		"gTextg": "_1SEMPATJm2_wne7kQlcG10",
		"gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
		"errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
		"mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
		"rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
		"seprator": "_2UGm2z7pTnp444hmFIFOIp",
		"checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
		"inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
		"localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
		"localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
		"nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
		"allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
		"proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
		"popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
		"textCapAll": "dmP3hNbZiWb10oxof-KKb",
		"stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
		"stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
		"topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
		"emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
		"txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
		"addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
		"addStudPop2": "pJUMNDAuP9bGHel-6ESf",
		"addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
		"addStudText": "bfDwzSKIRHVbJQpazT_Il",
		"changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
		"fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
		"fdInfo": "jkgczk2IOaooUA2sdYQcY",
		"fdName": "_1GOg26hVpb9pUXFN9I9y75",
		"fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
		"fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
		"fdAns": "_25xB1C18_oF2MVuf5cn3zq",
		"errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
		"qleditor": "_17N2ULf7_DBC-wvog56baS",
		"txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
		"addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
		"progress-bar": "A2ftBZ69PzksWTqo3GY0k",
		"formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
		"mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
		"innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
		"loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	var _ChatActions = __webpack_require__(30);
	
	var _lib = __webpack_require__(45);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ToastMessageFactory = _react2.default.createFactory(_lib.ToastMessage.animation);
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
		id: 'create_group'
	});
	
	var _ref2 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'group_name'
	}));
	
	var CreateGroup = exports.CreateGroup = function (_Component) {
		_inherits(CreateGroup, _Component);
	
		function CreateGroup(props) {
			_classCallCheck(this, CreateGroup);
	
			var _this = _possibleConstructorReturn(this, (CreateGroup.__proto__ || Object.getPrototypeOf(CreateGroup)).call(this, props));
	
			_this.handleEnter = function (e) {
				if (e.key == 'Enter') {
					_this.handleCreate();
				}
			};
	
			_this.setresponse = function (response) {
				// console.log("response in create page === ",response);
				if (response.status) {
					_this.setState({ value: '', error: '' });
					_this.freeData();
				} else {
					_this.setState({ error: response.error });
				}
			};
	
			_this.handleChange = function (e) {
				_this.setState({ value: e.target.value });
			};
	
			_this.handleCreate = function (e) {
				var name = _this.state.value.trim();
				if (name == '') _this.setState({ error: 'Please enter the group name' });else {
					_this.setState({ error: '' });
					var obj = {
						uid: _this.props.uid,
						groupName: name
					};
					_this.props.dispatch((0, _ChatActions.createGroup)(obj)).then(function (res) {
						return _this.setresponse(res);
					});
				}
			};
	
			_this.freeData = function () {
				// this.setState({ value : '', users : [] });
				_this.props.hidecallback();
			};
	
			_this.cls_errcls = '' + _component2.default.error;
			_this.state = {
				value: '',
				error: ''
			};
	
			return _this;
		}
	
		_createClass(CreateGroup, [{
			key: 'render',
			value: function render() {
				return _jsx(_reactBootstrap.Modal, {
					show: this.props.showModal,
					onHide: this.freeData
				}, void 0, _jsx(_Modal.Header, {
					closeButton: true
				}, void 0, _jsx(_Modal.Title, {
					className: _Admin2.default.popHeadingAll
				}, void 0, _ref)), _jsx(_Modal.Body, {}, void 0, _ref2, _jsx('div', {
					className: _Admin2.default.searchBox
				}, void 0, _jsx('input', {
					type: 'text',
					name: 'groupname',
					placeholder: this.props.intl.messages.group_name,
					className: _Admin2.default.whiteSearch,
					onChange: this.handleChange,
					onKeyPress: this.handleEnter,
					value: this.state.value,
					autoFocus: 'true'
				}), _jsx('span', {
					className: _Admin2.default.whiteIconText,
					onClick: this.handleCreate
				}, void 0, 'Create'), _jsx('label', {
					className: this.cls_errcls
				}, void 0, this.state.error))));
			}
		}]);
	
		return CreateGroup;
	}(_react.Component);
	
	CreateGroup.contextTypes = {
		router: _react2.default.PropTypes.object
	};
	
	CreateGroup.defaultProps = { showModal: false };
	
	// Retrieve data from store as props
	function mapStateToProps(store) {
		return {
			intl: store.intl
		};
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(CreateGroup);

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.GroupList = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _ConfSettings = {
		"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
		"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
		"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
		"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
		"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
		"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
		"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
		"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
		"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
		"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
		"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
		"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
		"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
		"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
		"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
		"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
		"block50": "_3KEUbD9sh-5efPnOe48KQu",
		"nohover": "m7jTOV3afDX3KYXfpJDuW",
		"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
		"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
		"active": "_3wgRcJQgpFwV1Tze6eaYAL",
		"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
		"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
		"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
		"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
		"backSearch": "w7BGjmEiChPoMYjET5k8R",
		"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
		"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
		"modContactList": "_1zmiGIPb92yNtOu845RHyM",
		"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
		"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
		"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
		"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
		"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
		"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
		"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
		"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
		"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
		"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
		"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
		"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
		"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
		"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
		"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
		"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
		"btn": "_27VXnOss6C0tcmiXDJyEQY",
		"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
		"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
		"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
		"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
		"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
		"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
		"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
		"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
		"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
		"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
		"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
		"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
		"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
		"radio": "_1YNHku8cDP1FxyBn3XkUJY",
		"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
		"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
		"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
		"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
		"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
		"downloadFile": "_33q4w5biPTOCecW_SwRklY",
		"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
		"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
		"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
		"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
		"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
		"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
		"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
		"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
		"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
		"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
		"iconBlock": "_1llySoPNa1j3k655fl2PNS",
		"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
		"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
		"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
		"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
		"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
		"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
		"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
		"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
		"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
		"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
		"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
		"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
		"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
		"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
		"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
		"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
		"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
		"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
		"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
		"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
		"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
		"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
		"centerBlock": "HLVHVZhqp-7yopt3Ah073",
		"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
		"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
		"btnTransport": "szHYW92cM7tgGZoXatQyg",
		"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
		"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
		"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
		"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
		"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
		"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
		"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
		"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
		"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
		"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
		"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
		"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
		"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
		"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
		"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
		"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _Admin = {
		"form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
		"progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
		"progress": "_32kzRKjl47M7AcFAivyyho",
		"progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
		"progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
		"backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
		"containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
		"googleContainer": "_1G8DyX--1Xskim3uSHbxil",
		"googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
		"googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
		"header": "_2xHja59x-eRkfv95koY1ce",
		"hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
		"body": "_1wybmROxdPMB2DSkLyTGGx",
		"navRight": "_2fWAne55trxpJYagJCezpL",
		"navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
		"active": "_1mqL1x9MCLjw6_Ok5T24oF",
		"midContainer": "_1oKiSeTflL6v2wZC13o7oC",
		"formField": "P8wcycRRhQUOqnf0qytj0",
		"profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
		"fullname": "m8-V01m5JYGd00wGYRCbo",
		"position": "aCZ3mMjMPWmB1Xr4poVi_",
		"txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
		"plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
		"inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
		"inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
		"inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
		"inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
		"labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
		"viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
		"avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
		"avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
		"imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
		"avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
		"profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
		"avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
		"avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
		"whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
		"whiteTile": "KCFNekbG6kNm7QCCmxcOC",
		"customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
		"mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
		"infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
		"headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
		"headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
		"headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
		"actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
		"headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
		"headingTxt": "IA7VynD7jO_xLZWz7aACg",
		"userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
		"userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
		"userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
		"userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
		"searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
		"searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
		"searchBox": "_79ROL_K6mHBW5o2LSPYyD",
		"whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
		"whiteIconSearch": "_8753oABxDX3rcNGmogytj",
		"chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
		"chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
		"whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
		"whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
		"whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
		"userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
		"modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
		"invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
		"brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
		"imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
		"fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
		"checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
		"fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
		"inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
		"accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
		"accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
		"roomLink": "_3GAUEPkkabqWlcSfevhUau",
		"multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
		"inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
		"gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
		"gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
		"gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
		"gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
		"gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
		"groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
		"groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
		"avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
		"avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
		"removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
		"locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
		"locationContainer": "GqFlk81qWkoM8pg8rM9mT",
		"locationHeader": "mgZJ5PYIcU3xilagy40bF",
		"deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
		"locationBody": "_9tu9wEbJADVdffughhYgF",
		"remove": "_2qTNEmDNBxEEHjfsZx6jUU",
		"viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
		"studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
		"addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
		"removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
		"studentblock": "_1npAxnK_u_EjOeG19x_gPa",
		"studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
		"participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
		"tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
		"tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
		"thStyle": "_253KYsN6UeeVvx_kTT0FTG",
		"hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
		"removeStyle": "XmJHLhTym-EGI-3dZGbWc",
		"attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
		"highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
		"highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
		"lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
		"lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
		"removePdng": "j5wasHyxigllgK3-KBNZp",
		"endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
		"dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
		"dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
		"applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
		"filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
		"gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
		"facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
		"btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
		"btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
		"fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
		"fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
		"googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
		"inLine": "_3SKSHSNT9quu0AEumeGTQT",
		"inputGrade": "_2Q0ilim6NermuOEyggbVkC",
		"flexContainer": "_3ELNW3V19Qpndrzsv3951F",
		"actionRightAbs": "_1uuENocETyaOc2rRiwior5",
		"closebtn": "_2GrTt3NBt2HkOlxHF614-3",
		"editClosebtn": "wpV9V72-_ceslWX8JrnXB",
		"first": "_35E4iHqMVJmbMgmzKL6Tv5",
		"headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
		"flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
		"formH5": "_23XBDJVodLOklMKND6BFwz",
		"qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
		"editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
		"formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
		"blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
		"blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
		"btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
		"btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
		"blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
		"btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
		"btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
		"btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
		"blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
		"btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
		"btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
		"inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
		"diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
		"gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
		"gTextg": "_1SEMPATJm2_wne7kQlcG10",
		"gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
		"errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
		"mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
		"rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
		"seprator": "_2UGm2z7pTnp444hmFIFOIp",
		"checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
		"inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
		"localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
		"localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
		"nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
		"allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
		"proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
		"popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
		"textCapAll": "dmP3hNbZiWb10oxof-KKb",
		"stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
		"stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
		"topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
		"emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
		"txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
		"addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
		"addStudPop2": "pJUMNDAuP9bGHel-6ESf",
		"addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
		"addStudText": "bfDwzSKIRHVbJQpazT_Il",
		"changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
		"fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
		"fdInfo": "jkgczk2IOaooUA2sdYQcY",
		"fdName": "_1GOg26hVpb9pUXFN9I9y75",
		"fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
		"fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
		"fdAns": "_25xB1C18_oF2MVuf5cn3zq",
		"errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
		"qleditor": "_17N2ULf7_DBC-wvog56baS",
		"txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
		"addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
		"progress-bar": "A2ftBZ69PzksWTqo3GY0k",
		"formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
		"mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
		"innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
		"loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	var _SocketHandler = __webpack_require__(32);
	
	var _SocketHandler2 = _interopRequireDefault(_SocketHandler);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref2 = _jsx('img', {
		src: '/images/black-icons/individual-chat.png'
	});
	
	var _ref3 = _jsx('img', {
		src: '/images/black-icons/call-phone.png'
	});
	
	var _ref4 = _jsx('img', {
		src: '/images/white-icons/white-group.png'
	});
	
	var GroupList = exports.GroupList = function (_Component) {
		_inherits(GroupList, _Component);
	
		function GroupList() {
			var _ref;
	
			var _temp, _this, _ret;
	
			_classCallCheck(this, GroupList);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = GroupList.__proto__ || Object.getPrototypeOf(GroupList)).call.apply(_ref, [this].concat(args))), _this), _this.sendData = function () {
				_this.props.callBack(_this.props.value);
			}, _this.chatCB = function () {
				_this.props.chatCallback({ chatData: _this.props.value, chatType: "Group" });
			}, _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		_createClass(GroupList, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				// console.log("subs group---", this.props.value);
				// SocketHandler.subscribeStatus(this.props.value._id);
			}
		}, {
			key: 'render',
			value: function render() {
				// console.log("ListItem--", props);
				var cls_chatBox = _ConfSettings2.default.chatBox + ' ' + _ConfSettings2.default.bgTransition;
				var cls_callBox = _ConfSettings2.default.callBox + ' ' + _ConfSettings2.default.bgTransition;
				var cls_action = '' + _ConfSettings2.default.actionBlock;
				if (this.props && this.props.value) {
					var listItem = this.props.value;
					/*let imgsrc = "/images/profile-pics/default-user.png";
	    if (listItem._id.profile && listItem._id.profile.profileImage){
	    	imgsrc = "/uploads/"+listItem._id.profile.profileImage;
	    }*/
					return _jsx('li', {}, void 0, _jsx('div', {
						className: cls_action
					}, void 0, _jsx('span', {
						className: _ConfSettings2.default.actionButtonBox,
						id: listItem._id,
						onClick: this.chatCB.bind(this),
						title: 'Chat'
					}, void 0, _ref2), _jsx('span', {
						className: _ConfSettings2.default.actionButtonBox,
						id: listItem._id,
						title: 'Call'
					}, void 0, _ref3)), _jsx('a', {
						onClick: this.sendData,
						className: 'clearfix'
					}, void 0, _ref4, _jsx('h3', {}, void 0, listItem.groupName ? listItem.groupName : "-")));
				}
			}
		}]);
	
		return GroupList;
	}(_react.Component);
	
	exports.default = GroupList;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _LoginActions = __webpack_require__(21);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _DashLayout = {
		"container": "_3MDDAV5-6IWoiIUW_vk7CC",
		"elasticWrapper": "R8LqGT-AW4U3mBKJ1MFvQ",
		"minimize": "_21MnHEkmOnrX-W0YKg26By",
		"footerFixed": "RdcUT5Wsmg6NbDJAwL0Md",
		"minimizeFooterFixed": "gbOmycGmduK-Yg4TTsE33",
		"elasticSideBar": "PPajvO_MDBlpK2G4OYyA8",
		"slideElasticSideBar": "_35chDIcwDNW7Nw5j2d-Zyx",
		"mobConf": "Kk9_BVy3rj24cvtuu_ns7"
	};
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _ConfSettings = {
		"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
		"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
		"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
		"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
		"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
		"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
		"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
		"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
		"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
		"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
		"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
		"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
		"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
		"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
		"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
		"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
		"block50": "_3KEUbD9sh-5efPnOe48KQu",
		"nohover": "m7jTOV3afDX3KYXfpJDuW",
		"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
		"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
		"active": "_3wgRcJQgpFwV1Tze6eaYAL",
		"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
		"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
		"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
		"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
		"backSearch": "w7BGjmEiChPoMYjET5k8R",
		"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
		"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
		"modContactList": "_1zmiGIPb92yNtOu845RHyM",
		"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
		"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
		"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
		"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
		"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
		"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
		"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
		"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
		"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
		"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
		"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
		"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
		"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
		"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
		"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
		"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
		"btn": "_27VXnOss6C0tcmiXDJyEQY",
		"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
		"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
		"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
		"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
		"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
		"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
		"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
		"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
		"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
		"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
		"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
		"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
		"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
		"radio": "_1YNHku8cDP1FxyBn3XkUJY",
		"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
		"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
		"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
		"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
		"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
		"downloadFile": "_33q4w5biPTOCecW_SwRklY",
		"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
		"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
		"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
		"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
		"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
		"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
		"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
		"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
		"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
		"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
		"iconBlock": "_1llySoPNa1j3k655fl2PNS",
		"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
		"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
		"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
		"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
		"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
		"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
		"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
		"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
		"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
		"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
		"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
		"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
		"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
		"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
		"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
		"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
		"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
		"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
		"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
		"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
		"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
		"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
		"centerBlock": "HLVHVZhqp-7yopt3Ah073",
		"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
		"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
		"btnTransport": "szHYW92cM7tgGZoXatQyg",
		"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
		"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
		"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
		"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
		"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
		"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
		"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
		"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
		"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
		"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
		"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
		"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
		"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
		"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
		"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
		"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _ChatReducer = __webpack_require__(39);
	
	var _ChatActions = __webpack_require__(30);
	
	var _MembersList = __webpack_require__(205);
	
	var _MembersList2 = _interopRequireDefault(_MembersList);
	
	var _AddMember = __webpack_require__(200);
	
	var _AddMember2 = _interopRequireDefault(_AddMember);
	
	var _lib = __webpack_require__(45);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ToastMessageFactory = _react2.default.createFactory(_lib.ToastMessage.animation);
	
	var _ref = _jsx('img', {
		src: '/images/profile-pics/no-contacts.png'
	});
	
	var _ref2 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_recent_member'
	}), _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'add_your_members'
	})));
	
	var _ref3 = _jsx('img', {
		src: '/images/black-icons/black-add-contacts.png'
	});
	
	var _ref4 = _jsx('img', {
		src: '/images/black-icons/black-right-arrow.png'
	});
	
	var _ref5 = _jsx('img', {
		src: '/images/black-icons/delete-box-black.png'
	});
	
	var GroupView = function (_Component) {
		_inherits(GroupView, _Component);
	
		function GroupView() {
			_classCallCheck(this, GroupView);
	
			var _this = _possibleConstructorReturn(this, (GroupView.__proto__ || Object.getPrototypeOf(GroupView)).call(this));
	
			_this.removeMember = function (mid) {
				var doc = _this.state.groupdata;
				var obj = {
					uid: _this.state.uid,
					mid: mid,
					_id: doc._id,
					status: false
					// console.log("obj === ",obj);
				};_this.props.dispatch((0, _ChatActions.membersToGroup)(obj)).then(function (res) {
					return _this.setresponse(res, doc);
				});
			};
	
			_this.deleteGroup = function (e) {
				var props = _this.props;
				var response = _this.setdeleteresponse;
				var doc = _this.state.groupdata;
	
				alertify.confirm(_this.props.intl.messages.warning, _this.props.intl.messages.delete_group_alert, function (result) {
					if (result) {
						var obj = {
							uid: this.state.uid,
							_id: doc._id
						};
						props.dispatch((0, _ChatActions.deleteGroup)(obj)).then(function (res) {
							return response(res, doc);
						});
					}
				}, function () {}).setting('labels', { 'ok': _this.props.intl.messages.ok, 'cancel': _this.props.intl.messages.cancel });
				/*if (confirm('Do you want to delete this group?')) {
	   	let doc = this.state.groupdata;
	   	let obj = {
	   		uid : this.state.uid,
	   		_id : doc._id
	   	}
	   	this.props.dispatch(deleteGroup(obj)).then(res => this.setDeleteResponse(res, doc));
	   }*/
			};
	
			_this.setDeleteResponse = function (response, groupdata) {
				// console.log("response in delete === ",response);
				if (response.status) {
					_this.props.hideCallback();
				} else {
					_this.setState({ groupdata: groupdata });
					_this.refs.group_container.error(response.error, '');
				}
			};
	
			_this.state = {
				showAddMember: false,
				uid: null,
				groupdata: null
			};
			return _this;
		}
	
		_createClass(GroupView, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var result = this.props.loggedInData;
				if (result && result.data && result.data._id) {
					this.setState({ uid: result.data._id });
				}
				if (this.props.currentState && this.props.currentState.groupdata) {
					this.setState({ groupdata: this.props.currentState.groupdata });
				}
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (nextProps.currentState && nextProps.currentState.groupdata) {
					this.setState({ groupdata: nextProps.currentState.groupdata });
				}
			}
		}, {
			key: 'showOrHideAddMember',
			value: function showOrHideAddMember(e) {
				this.setState({ showAddMember: !this.state.showAddMember });
			}
		}, {
			key: 'addMember',
			value: function addMember(id) {
				var _this2 = this;
	
				var doc = this.state.groupdata;
				var obj = {
					uid: this.state.uid,
					mid: id,
					_id: doc._id,
					status: true
					// console.log("obj === ",obj);
				};this.props.dispatch((0, _ChatActions.membersToGroup)(obj)).then(function (res) {
					return _this2.setresponse(res, doc);
				});
			}
		}, {
			key: 'setresponse',
			value: function setresponse(response, groupdata) {
				if (response.status) {
					this.refs.group_container.success(response.message, '');
					var self = this;
					_.each(response.data, function (doc) {
						if (doc._id == self.state.groupdata._id) {
							self.setState({ groupdata: doc });
						}
					});
				} else if (response.error) {
					this.setState({ groupdata: groupdata });
					this.refs.group_container.error(response.error, '');
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _this3 = this;
	
				var cls_headerList = _ConfSettings2.default.modHeaderList + ' clearfix';
				var cls_midTitle = _ConfSettings2.default.midTitle + ' pull-left';
				var cls_block50 = _ConfSettings2.default.block50 + ' pull-right';
				var cls_block50_l = _ConfSettings2.default.block50 + ' pull-left';
				var cls_headerText = _ConfSettings2.default.headerText + ' pull-left';
				var cls_optionBlock = _ConfSettings2.default.optionsBlock + ' pull-right';
				var cls_settingsOptions = _ConfSettings2.default.settingsOptionInput + ' ' + _ConfSettings2.default.radio;
				var cls_modChatFooter = _ConfSettings2.default.modChatFooter + ' clearfix';
				var cls_chatWrite = _ConfSettings2.default.chatWrite + ' pull-left';
				var cls_formControl = _ConfSettings2.default.formControl + ' ' + _ConfSettings2.default.formControlChatOverwrite;
				var cls_sendMessage = 'pull-right ' + _ConfSettings2.default.sendMessage;
				var cls_chatBox = _ConfSettings2.default.chatBox + ' ' + _ConfSettings2.default.bgTransition;
				var cls_callBox = _ConfSettings2.default.callBox + ' ' + _ConfSettings2.default.bgTransition;
	
				var cls_contactsList = '' + _ConfSettings2.default.contactListFixed;
	
				if (this.props.currentState.showgroup) {
					cls_contactsList = _ConfSettings2.default.contactListFixed + ' ' + _ConfSettings2.default.openMyContacts;
				}
	
				var members = _jsx('div', {
					className: _ConfSettings2.default.modNoContacts
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.noContactsCircle
				}, void 0, _ref), _ref2);
				if (this.state.groupdata) {
					var docs = this.state.groupdata;
					if (docs.members.length > 0) {
						// console.log("docs === ",docs);
						// let key = 101;
						var self = this;
						var listmembers = docs.members.map(function (doc) {
							return doc._id ? _jsx(_MembersList2.default, {
								value: doc,
								adminid: docs.createdBy,
								uid: self.state.uid,
								getUserId: _this3.removeMember
							}, doc._id) : null;
						});
						members = _jsx('div', {
							className: _ConfSettings2.default.modContactList
						}, void 0, _jsx('ul', {}, void 0, listmembers));
					}
				}
				var data = this.state.groupdata;
				return _jsx('aside', {
					className: cls_contactsList,
					id: 'blockMyContacts'
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.tableBlock
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.modAsideHeader
				}, void 0, _jsx('div', {
					className: cls_headerList
				}, void 0, _jsx('div', {
					className: cls_midTitle
				}, void 0, _jsx('h2', {}, void 0, data && data.groupName ? data.groupName : "-")), data && data.createdBy == this.state.uid ? _jsx('div', {
					className: cls_block50_l,
					title: this.props.intl.messages.add_member,
					onClick: this.showOrHideAddMember.bind(this)
				}, void 0, _ref3) : null, _jsx(_AddMember2.default, {
					showModal: this.state.showAddMember,
					hidecallback: this.showOrHideAddMember.bind(this),
					getUserId: this.addMember.bind(this),
					uid: this.state.uid,
					gid: this.props.currentState && this.props.currentState.groupdata ? this.props.currentState.groupdata._id : null
				}), _jsx('div', {
					className: cls_block50,
					onClick: this.props.hideCallback,
					title: this.props.intl.messages.close,
					id: 'closeMyContacts'
				}, void 0, _ref4), _jsx('div', {
					className: cls_block50,
					title: this.props.intl.messages.delete_group,
					onClick: this.deleteGroup
				}, void 0, _ref5))), _jsx('div', {
					className: _ConfSettings2.default.tableBlockRow
				}, void 0, _react2.default.createElement(_lib.ToastContainer, {
					toastMessageFactory: ToastMessageFactory,
					ref: 'group_container',
					className: 'toast-bottom-right'
				}), _jsx('div', {
					className: _ConfSettings2.default.tableBlockCell
				}, void 0, _jsx('div', {
					className: _ConfSettings2.default.modAsideListBody
				}, void 0, members)))));
			}
		}]);
	
		return GroupView;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			intl: state.intl,
			chatData: (0, _ChatReducer.chatData)(state),
			loggedInData: (0, _LoginReducer.loggedInData)(state)
		};
	}
	
	GroupView.contextTypes = {
		router: _react2.default.PropTypes.object
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(GroupView);

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.MembersList = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _ConfSettings = {
		"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
		"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
		"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
		"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
		"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
		"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
		"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
		"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
		"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
		"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
		"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
		"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
		"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
		"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
		"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
		"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
		"block50": "_3KEUbD9sh-5efPnOe48KQu",
		"nohover": "m7jTOV3afDX3KYXfpJDuW",
		"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
		"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
		"active": "_3wgRcJQgpFwV1Tze6eaYAL",
		"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
		"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
		"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
		"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
		"backSearch": "w7BGjmEiChPoMYjET5k8R",
		"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
		"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
		"modContactList": "_1zmiGIPb92yNtOu845RHyM",
		"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
		"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
		"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
		"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
		"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
		"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
		"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
		"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
		"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
		"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
		"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
		"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
		"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
		"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
		"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
		"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
		"btn": "_27VXnOss6C0tcmiXDJyEQY",
		"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
		"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
		"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
		"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
		"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
		"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
		"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
		"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
		"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
		"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
		"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
		"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
		"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
		"radio": "_1YNHku8cDP1FxyBn3XkUJY",
		"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
		"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
		"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
		"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
		"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
		"downloadFile": "_33q4w5biPTOCecW_SwRklY",
		"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
		"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
		"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
		"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
		"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
		"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
		"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
		"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
		"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
		"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
		"iconBlock": "_1llySoPNa1j3k655fl2PNS",
		"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
		"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
		"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
		"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
		"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
		"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
		"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
		"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
		"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
		"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
		"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
		"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
		"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
		"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
		"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
		"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
		"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
		"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
		"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
		"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
		"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
		"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
		"centerBlock": "HLVHVZhqp-7yopt3Ah073",
		"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
		"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
		"btnTransport": "szHYW92cM7tgGZoXatQyg",
		"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
		"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
		"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
		"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
		"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
		"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
		"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
		"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
		"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
		"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
		"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
		"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
		"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
		"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
		"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
		"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _Admin = {
		"form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
		"progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
		"progress": "_32kzRKjl47M7AcFAivyyho",
		"progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
		"progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
		"backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
		"containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
		"googleContainer": "_1G8DyX--1Xskim3uSHbxil",
		"googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
		"googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
		"header": "_2xHja59x-eRkfv95koY1ce",
		"hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
		"body": "_1wybmROxdPMB2DSkLyTGGx",
		"navRight": "_2fWAne55trxpJYagJCezpL",
		"navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
		"active": "_1mqL1x9MCLjw6_Ok5T24oF",
		"midContainer": "_1oKiSeTflL6v2wZC13o7oC",
		"formField": "P8wcycRRhQUOqnf0qytj0",
		"profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
		"fullname": "m8-V01m5JYGd00wGYRCbo",
		"position": "aCZ3mMjMPWmB1Xr4poVi_",
		"txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
		"plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
		"inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
		"inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
		"inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
		"inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
		"labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
		"viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
		"avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
		"avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
		"imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
		"avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
		"profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
		"avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
		"avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
		"whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
		"whiteTile": "KCFNekbG6kNm7QCCmxcOC",
		"customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
		"mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
		"infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
		"headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
		"headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
		"headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
		"actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
		"headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
		"headingTxt": "IA7VynD7jO_xLZWz7aACg",
		"userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
		"userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
		"userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
		"userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
		"searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
		"searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
		"searchBox": "_79ROL_K6mHBW5o2LSPYyD",
		"whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
		"whiteIconSearch": "_8753oABxDX3rcNGmogytj",
		"chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
		"chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
		"whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
		"whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
		"whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
		"userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
		"modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
		"invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
		"brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
		"imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
		"fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
		"checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
		"fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
		"inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
		"accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
		"accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
		"roomLink": "_3GAUEPkkabqWlcSfevhUau",
		"multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
		"inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
		"gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
		"gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
		"gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
		"gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
		"gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
		"groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
		"groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
		"avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
		"avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
		"removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
		"locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
		"locationContainer": "GqFlk81qWkoM8pg8rM9mT",
		"locationHeader": "mgZJ5PYIcU3xilagy40bF",
		"deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
		"locationBody": "_9tu9wEbJADVdffughhYgF",
		"remove": "_2qTNEmDNBxEEHjfsZx6jUU",
		"viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
		"studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
		"addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
		"removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
		"studentblock": "_1npAxnK_u_EjOeG19x_gPa",
		"studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
		"participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
		"tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
		"tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
		"thStyle": "_253KYsN6UeeVvx_kTT0FTG",
		"hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
		"removeStyle": "XmJHLhTym-EGI-3dZGbWc",
		"attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
		"highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
		"highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
		"lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
		"lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
		"removePdng": "j5wasHyxigllgK3-KBNZp",
		"endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
		"dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
		"dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
		"applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
		"filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
		"gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
		"facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
		"btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
		"btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
		"fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
		"fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
		"googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
		"inLine": "_3SKSHSNT9quu0AEumeGTQT",
		"inputGrade": "_2Q0ilim6NermuOEyggbVkC",
		"flexContainer": "_3ELNW3V19Qpndrzsv3951F",
		"actionRightAbs": "_1uuENocETyaOc2rRiwior5",
		"closebtn": "_2GrTt3NBt2HkOlxHF614-3",
		"editClosebtn": "wpV9V72-_ceslWX8JrnXB",
		"first": "_35E4iHqMVJmbMgmzKL6Tv5",
		"headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
		"flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
		"formH5": "_23XBDJVodLOklMKND6BFwz",
		"qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
		"editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
		"formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
		"blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
		"blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
		"btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
		"btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
		"blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
		"btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
		"btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
		"btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
		"blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
		"btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
		"btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
		"inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
		"diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
		"gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
		"gTextg": "_1SEMPATJm2_wne7kQlcG10",
		"gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
		"errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
		"mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
		"rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
		"seprator": "_2UGm2z7pTnp444hmFIFOIp",
		"checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
		"inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
		"localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
		"localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
		"nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
		"allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
		"proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
		"popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
		"textCapAll": "dmP3hNbZiWb10oxof-KKb",
		"stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
		"stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
		"topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
		"emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
		"txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
		"addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
		"addStudPop2": "pJUMNDAuP9bGHel-6ESf",
		"addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
		"addStudText": "bfDwzSKIRHVbJQpazT_Il",
		"changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
		"fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
		"fdInfo": "jkgczk2IOaooUA2sdYQcY",
		"fdName": "_1GOg26hVpb9pUXFN9I9y75",
		"fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
		"fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
		"fdAns": "_25xB1C18_oF2MVuf5cn3zq",
		"errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
		"qleditor": "_17N2ULf7_DBC-wvog56baS",
		"txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
		"addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
		"progress-bar": "A2ftBZ69PzksWTqo3GY0k",
		"formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
		"mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
		"innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
		"loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref2 = _jsx('img', {
		src: '/images/icons/red-cross.png'
	});
	
	var MembersList = exports.MembersList = function (_Component) {
		_inherits(MembersList, _Component);
	
		function MembersList() {
			var _ref;
	
			var _temp, _this, _ret;
	
			_classCallCheck(this, MembersList);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MembersList.__proto__ || Object.getPrototypeOf(MembersList)).call.apply(_ref, [this].concat(args))), _this), _this.sendUserId = function (e) {
				var id = e.currentTarget.id;
				alertify.confirm(_this.props.intl.messages.warning, _this.props.intl.messages.delete_member_group_alert, function (result) {
					if (result) {
						props.getUserId(id);
					}
				}, function () {}).setting('labels', { 'ok': _this.props.intl.messages.ok, 'cancel': _this.props.intl.messages.cancel });
				/*if (confirm('Do you want to remove from this group?')) {
	   	let id = e.currentTarget.id;
	   	this.props.getUserId(id);
	   }*/
			}, _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		_createClass(MembersList, [{
			key: 'viewUser',
			value: function viewUser() {
				_reactRouter.browserHistory.push('/profile/' + this.props.value._id);
			}
		}, {
			key: 'render',
			value: function render() {
				// console.log("ListItem--", props);
				var cls_chatBox = _ConfSettings2.default.chatBox + ' ' + _ConfSettings2.default.bgTransition;
				var cls_callBox = _ConfSettings2.default.callBox + ' ' + _ConfSettings2.default.bgTransition;
				var cls_action = '' + _ConfSettings2.default.actionBlock;
				if (this.props && this.props.value) {
					var listItem = this.props.value;
					var imgsrc = "/images/profile-pics/default-user.png";
					if (listItem.profile && listItem.profile.profileImage) {
						imgsrc = "/uploads/" + listItem.profile.profileImage;
					}
					return _jsx('li', {}, void 0, this.props.uid == this.props.adminid && listItem._id != this.props.adminid ? _jsx('div', {
						className: cls_action
					}, void 0, _jsx('span', {
						className: _ConfSettings2.default.actionButtonBox,
						id: listItem._id,
						onClick: this.sendUserId,
						title: 'Remove'
					}, void 0, _ref2)) : null, _jsx('a', {
						className: 'clearfix',
						onClick: this.viewUser.bind(this),
						title: this.props.intl.messages.viewprofile
					}, void 0, _jsx('img', {
						src: imgsrc
					}), _jsx('h3', {}, void 0, listItem.firstname ? listItem.firstname : "-", ' ', listItem.lastname ? listItem.lastname : "", _jsx('p', {
						className: _Admin2.default.onlineColor
					}, void 0, listItem._id == this.props.adminid ? 'Admin' : ''))));
				}
			}
		}]);
	
		return MembersList;
	}(_react.Component);
	
	exports.default = (0, _reactIntl.injectIntl)(MembersList);

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.ShowContact = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Admin = {
		"form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
		"progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
		"progress": "_32kzRKjl47M7AcFAivyyho",
		"progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
		"progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
		"backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
		"containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
		"googleContainer": "_1G8DyX--1Xskim3uSHbxil",
		"googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
		"googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
		"header": "_2xHja59x-eRkfv95koY1ce",
		"hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
		"body": "_1wybmROxdPMB2DSkLyTGGx",
		"navRight": "_2fWAne55trxpJYagJCezpL",
		"navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
		"active": "_1mqL1x9MCLjw6_Ok5T24oF",
		"midContainer": "_1oKiSeTflL6v2wZC13o7oC",
		"formField": "P8wcycRRhQUOqnf0qytj0",
		"profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
		"fullname": "m8-V01m5JYGd00wGYRCbo",
		"position": "aCZ3mMjMPWmB1Xr4poVi_",
		"txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
		"plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
		"inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
		"inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
		"inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
		"inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
		"labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
		"viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
		"avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
		"avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
		"imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
		"avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
		"profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
		"avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
		"avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
		"whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
		"whiteTile": "KCFNekbG6kNm7QCCmxcOC",
		"customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
		"mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
		"infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
		"headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
		"headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
		"headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
		"actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
		"headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
		"headingTxt": "IA7VynD7jO_xLZWz7aACg",
		"userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
		"userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
		"userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
		"userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
		"searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
		"searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
		"searchBox": "_79ROL_K6mHBW5o2LSPYyD",
		"whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
		"whiteIconSearch": "_8753oABxDX3rcNGmogytj",
		"chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
		"chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
		"whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
		"whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
		"whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
		"userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
		"modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
		"invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
		"brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
		"imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
		"fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
		"checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
		"fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
		"inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
		"accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
		"accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
		"roomLink": "_3GAUEPkkabqWlcSfevhUau",
		"multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
		"inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
		"gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
		"gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
		"gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
		"gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
		"gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
		"groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
		"groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
		"avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
		"avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
		"removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
		"locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
		"locationContainer": "GqFlk81qWkoM8pg8rM9mT",
		"locationHeader": "mgZJ5PYIcU3xilagy40bF",
		"deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
		"locationBody": "_9tu9wEbJADVdffughhYgF",
		"remove": "_2qTNEmDNBxEEHjfsZx6jUU",
		"viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
		"studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
		"addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
		"removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
		"studentblock": "_1npAxnK_u_EjOeG19x_gPa",
		"studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
		"participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
		"tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
		"tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
		"thStyle": "_253KYsN6UeeVvx_kTT0FTG",
		"hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
		"removeStyle": "XmJHLhTym-EGI-3dZGbWc",
		"attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
		"highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
		"highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
		"lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
		"lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
		"removePdng": "j5wasHyxigllgK3-KBNZp",
		"endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
		"dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
		"dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
		"applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
		"filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
		"gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
		"facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
		"btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
		"btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
		"fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
		"fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
		"googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
		"inLine": "_3SKSHSNT9quu0AEumeGTQT",
		"inputGrade": "_2Q0ilim6NermuOEyggbVkC",
		"flexContainer": "_3ELNW3V19Qpndrzsv3951F",
		"actionRightAbs": "_1uuENocETyaOc2rRiwior5",
		"closebtn": "_2GrTt3NBt2HkOlxHF614-3",
		"editClosebtn": "wpV9V72-_ceslWX8JrnXB",
		"first": "_35E4iHqMVJmbMgmzKL6Tv5",
		"headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
		"flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
		"formH5": "_23XBDJVodLOklMKND6BFwz",
		"qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
		"editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
		"formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
		"blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
		"blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
		"btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
		"btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
		"blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
		"btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
		"btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
		"btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
		"blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
		"btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
		"btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
		"inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
		"diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
		"gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
		"gTextg": "_1SEMPATJm2_wne7kQlcG10",
		"gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
		"errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
		"mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
		"rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
		"seprator": "_2UGm2z7pTnp444hmFIFOIp",
		"checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
		"inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
		"localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
		"localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
		"nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
		"allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
		"proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
		"popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
		"textCapAll": "dmP3hNbZiWb10oxof-KKb",
		"stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
		"stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
		"topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
		"emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
		"txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
		"addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
		"addStudPop2": "pJUMNDAuP9bGHel-6ESf",
		"addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
		"addStudText": "bfDwzSKIRHVbJQpazT_Il",
		"changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
		"fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
		"fdInfo": "jkgczk2IOaooUA2sdYQcY",
		"fdName": "_1GOg26hVpb9pUXFN9I9y75",
		"fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
		"fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
		"fdAns": "_25xB1C18_oF2MVuf5cn3zq",
		"errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
		"qleditor": "_17N2ULf7_DBC-wvog56baS",
		"txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
		"addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
		"progress-bar": "A2ftBZ69PzksWTqo3GY0k",
		"formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
		"mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
		"innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
		"loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _ConfSettings = {
		"contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
		"attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
		"groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
		"indiChatFixed": "_121x6wkYY9bMxq2znilpes",
		"settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
		"openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
		"openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
		"openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
		"onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
		"onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
		"tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
		"tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
		"tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
		"modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
		"modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
		"modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
		"block50": "_3KEUbD9sh-5efPnOe48KQu",
		"nohover": "m7jTOV3afDX3KYXfpJDuW",
		"fileUpload": "_1Ta80WwlyVY6khGgoelZff",
		"modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
		"active": "_3wgRcJQgpFwV1Tze6eaYAL",
		"modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
		"noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
		"modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
		"navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
		"backSearch": "w7BGjmEiChPoMYjET5k8R",
		"subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
		"topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
		"modContactList": "_1zmiGIPb92yNtOu845RHyM",
		"chatBox": "_2taDr3sNLvZl64o7TkBTEg",
		"callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
		"midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
		"modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
		"contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
		"avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
		"contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
		"listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
		"onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
		"busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
		"bgOffline": "jL-R5aQBwO_2EmgAsiay1",
		"bgOnline": "_3TEYblB_gY5codKEtLqX7q",
		"adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
		"addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
		"formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
		"inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
		"btn": "_27VXnOss6C0tcmiXDJyEQY",
		"btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
		"topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
		"modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
		"addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
		"btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
		"btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
		"contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
		"asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
		"modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
		"headerText": "_2POMQ33JzpZXRKNQwhKTpK",
		"optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
		"settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
		"click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
		"radio": "_1YNHku8cDP1FxyBn3XkUJY",
		"modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
		"modChatContainer": "_21msPTbxn87ey3RWsSt_35",
		"selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
		"avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
		"messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
		"downloadFile": "_33q4w5biPTOCecW_SwRklY",
		"downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
		"textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
		"otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
		"chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
		"modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
		"chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
		"formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
		"sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
		"avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
		"setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
		"iconBlock": "_1llySoPNa1j3k655fl2PNS",
		"passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
		"meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
		"meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
		"inputError": "_30zq1PCjl9v2jnkrDEFjSK",
		"formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
		"calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
		"endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
		"schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
		"schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
		"schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
		"onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
		"repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
		"repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
		"schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
		"schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
		"inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
		"setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
		"dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
		"actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
		"actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
		"indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
		"alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
		"centerBlock": "HLVHVZhqp-7yopt3Ah073",
		"btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
		"transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
		"btnTransport": "szHYW92cM7tgGZoXatQyg",
		"helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
		"sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
		"scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
		"scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
		"sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
		"sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
		"sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
		"popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
		"btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
		"emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
		"formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
		"formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
		"colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
		"colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
		"endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
		"toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ShowContact = exports.ShowContact = function (_Component) {
		_inherits(ShowContact, _Component);
	
		function ShowContact() {
			_classCallCheck(this, ShowContact);
	
			return _possibleConstructorReturn(this, (ShowContact.__proto__ || Object.getPrototypeOf(ShowContact)).apply(this, arguments));
		}
	
		_createClass(ShowContact, [{
			key: 'sendUserId',
			value: function sendUserId(e) {
				var userId = e.target.id;
				// console.log(userId);
				if (userId && userId != 'undefined') this.props.getUserId(userId);
			}
		}, {
			key: 'viewUser',
			value: function viewUser() {
				_reactRouter.browserHistory.push('/profile/' + this.props.value._id);
			}
		}, {
			key: 'render',
			value: function render() {
				// console.log("ListItem--", props);
				if (this.props && this.props.value) {
					var listItem = this.props.value;
					var imgsrc = "/images/profile-pics/default-user.png";
					if (listItem.profile && listItem.profile.profileImage) imgsrc = "/uploads/" + listItem.profile.profileImage;
					return _jsx('li', {}, void 0, _jsx('div', {
						className: 'clearfix'
					}, void 0, _jsx('img', {
						src: imgsrc,
						className: 'pull-left',
						onClick: this.viewUser.bind(this)
					}), _jsx('h4', {
						className: 'pull-left'
					}, void 0, listItem.firstname ? listItem.firstname : "-", ' ', listItem.lastname ? listItem.lastname : "-", _jsx('p', {}, void 0, listItem.email ? listItem.email : "-")), _jsx('div', {
						className: _ConfSettings2.default.actionBlock,
						title: 'add'
					}, void 0, _jsx(_reactFontawesome2.default, {
						name: 'plus',
						id: listItem._id,
						onClick: this.sendUserId.bind(this)
					}))));
				}
			}
		}]);
	
		return ShowContact;
	}(_react.Component);
	
	exports.default = ShowContact;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AdminLayout = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _LeftMenu = __webpack_require__(186);
	
	var _LeftMenu2 = _interopRequireDefault(_LeftMenu);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AdminLayout = {
	  "container": "_1MiGdY_VMpVF_0xAJN4Fs8",
	  "mixStream": "_3xLSl37HmH_ydjjrtiqTKC",
	  "hideObject": "_3uCGjyeQPAn7m709pouhhA",
	  "videoBackButton": "Zv5pQ0wIy-RBcDmorVGMb"
	};
	
	var _AdminLayout2 = _interopRequireDefault(_AdminLayout);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _LoginActions = __webpack_require__(21);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _AppReducer = __webpack_require__(97);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _reactDom = __webpack_require__(64);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reactDraggable = __webpack_require__(166);
	
	var _reactDraggable2 = _interopRequireDefault(_reactDraggable);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _roles = __webpack_require__(46);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	// Import Style
	
	
	var _ref = _jsx('video', {
	  className: 'handle',
	  id: 'objMixVideo',
	  autoPlay: true
	});
	
	var _ref2 = _jsx('img', {
	  src: '/images/white-icons/white-expand.png'
	});
	
	var AdminLayout = exports.AdminLayout = function (_Component) {
	  _inherits(AdminLayout, _Component);
	
	  function AdminLayout(props) {
	    _classCallCheck(this, AdminLayout);
	
	    var _this = _possibleConstructorReturn(this, (AdminLayout.__proto__ || Object.getPrototypeOf(AdminLayout)).call(this, props));
	
	    _this.confObject = new _WoogeenManager2.default();
	    _this.state = {
	      role: 0,
	      mixStream: false,
	      activeDrags: 0
	    };
	    _this.onStart = _this.onStart.bind(_this);
	    _this.onStop = _this.onStop.bind(_this);
	    return _this;
	  }
	
	  _createClass(AdminLayout, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      //this.props.dispatch(isLoggedIn(AuthClient.getSession(), '')).then(res => this.setdata(res));
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setState({ role: this.props.loggedInData.data.role });
	
	      //Check till conference is going on not!
	      if (this.confObject.getConnectionStatus()) {
	        var that = this;
	        //Subscribe Mix Stream
	        this.confObject.trySubscribeMixStream(function (stream) {
	          console.log("Mix Stream Got", stream);
	          that.setState({ mixStream: true });
	          that.showVideo(stream);
	        });
	      }
	    }
	  }, {
	    key: 'showVideo',
	    value: function showVideo(stream) {
	      var _video = document.getElementById("objMixVideo");
	      if (_video) {
	        //Create URL
	        var _streamURL = (window.URL || webkitURL).createObjectURL(stream.mediaStream);
	        _video.src = _streamURL;
	        // _video.volume = 0;
	      }
	    }
	  }, {
	    key: 'setdata',
	    value: function setdata(result) {
	      if (result && result.data && result.data.role) {
	        this.setState({ role: result.data.role });
	      }
	    }
	  }, {
	    key: 'navigateBack',
	    value: function navigateBack() {
	      _reactRouter.browserHistory.push("/conf/" + this.confObject.getRoomKey());
	    }
	  }, {
	    key: 'onStart',
	    value: function onStart() {
	      this.setState({ activeDrags: ++this.state.activeDrags });
	    }
	  }, {
	    key: 'onStop',
	    value: function onStop() {
	      this.setState({ activeDrags: --this.state.activeDrags });
	    }
	
	    // background-color: #00aafa;
	
	  }, {
	    key: 'render',
	    value: function render() {
	      var cls_mixStream = _AdminLayout2.default.mixStream + ' ' + _AdminLayout2.default.hideObject;
	      if (this.state.mixStream) {
	        cls_mixStream = '' + _AdminLayout2.default.mixStream;
	      }
	      var clsContainer = _AdminLayout2.default.container + ' clearfix';
	      var dragHandlers = { onStart: this.onStart, onStop: this.onStop };
	
	      return _jsx('div', {}, void 0, _jsx('section', {
	        className: clsContainer
	      }, void 0, this.props.routes[2].path === "/profile/:uid" || this.props.routes[2].path === "/access-denied" ? null : _jsx(_LeftMenu2.default, {
	        isVisible: this.props.isLeftOnOff,
	        role: this.state.role,
	        confRoom: this.props.workDashboardData.roomKey,
	        urlLink: location.pathname
	      }), this.props.children), this.props.loggedInData.data.role != _roles.Roles.Student ? _react2.default.createElement(
	        _reactDraggable2.default,
	        _extends({ handle: '.handle' }, dragHandlers),
	        _jsx('div', {
	          className: cls_mixStream,
	          title: this.props.intl.messages.drag
	        }, void 0, _ref, _jsx('span', {
	          id: 'videoBackBtn',
	          className: _AdminLayout2.default.videoBackButton,
	          onClick: this.navigateBack.bind(this),
	          title: this.props.intl.messages.back
	        }, void 0, _ref2))
	      ) : null);
	    }
	  }]);
	
	  return AdminLayout;
	}(_react.Component);
	
	// Retrieve data from store as props
	function mapStateToProps(store) {
	  return {
	    intl: store.intl,
	    loggedInData: (0, _LoginReducer.loggedInData)(store),
	    isLeftOnOff: (0, _AppReducer.leftMenuToggle)(store),
	    workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(store)
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(AdminLayout);

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DashLayout = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactRouter = __webpack_require__(3);
	
	var _RightBar = __webpack_require__(209);
	
	var _RightBar2 = _interopRequireDefault(_RightBar);
	
	var _ConfSettings = __webpack_require__(194);
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _ConfContacts = __webpack_require__(193);
	
	var _ConfContacts2 = _interopRequireDefault(_ConfContacts);
	
	var _GroupView = __webpack_require__(204);
	
	var _GroupView2 = _interopRequireDefault(_GroupView);
	
	var _ConfGroups = __webpack_require__(201);
	
	var _ConfGroups2 = _interopRequireDefault(_ConfGroups);
	
	var _ConfChats = __webpack_require__(192);
	
	var _ConfChats2 = _interopRequireDefault(_ConfChats);
	
	var _ChatReducer = __webpack_require__(39);
	
	var _ChatActions = __webpack_require__(30);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _ConferenceActions = __webpack_require__(38);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _BroadcastActions = __webpack_require__(90);
	
	var _BroadcastReducer = __webpack_require__(92);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _RightBarReducer = __webpack_require__(69);
	
	var _RightBarActions = __webpack_require__(67);
	
	var _DashLayout = {
	  "container": "_3MDDAV5-6IWoiIUW_vk7CC",
	  "elasticWrapper": "R8LqGT-AW4U3mBKJ1MFvQ",
	  "minimize": "_21MnHEkmOnrX-W0YKg26By",
	  "footerFixed": "RdcUT5Wsmg6NbDJAwL0Md",
	  "minimizeFooterFixed": "gbOmycGmduK-Yg4TTsE33",
	  "elasticSideBar": "PPajvO_MDBlpK2G4OYyA8",
	  "slideElasticSideBar": "_35chDIcwDNW7Nw5j2d-Zyx",
	  "mobConf": "Kk9_BVy3rj24cvtuu_ns7"
	};
	
	var _DashLayout2 = _interopRequireDefault(_DashLayout);
	
	var _LoginReducer = __webpack_require__(20);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// import SocketHandler from '../../Communication/SocketHandler';
	var _ = __webpack_require__(7);
	// Import Style
	
	
	var callOnce = false;
	var ConfObject;
	
	var DashLayout = exports.DashLayout = function (_Component) {
	  _inherits(DashLayout, _Component);
	
	  function DashLayout(props) {
	    _classCallCheck(this, DashLayout);
	
	    var _this = _possibleConstructorReturn(this, (DashLayout.__proto__ || Object.getPrototypeOf(DashLayout)).call(this, props));
	    // console.log("Am once");
	
	
	    _this.setActiveTab = function (objEntity) {
	      //console.log("objEntity", objEntity);
	      if (_this.props.rightBar && _this.props.rightBar.current && _this.props.rightBar.current == objEntity.current) {
	        _this.hideCallback();
	      } else {
	        _this.props.dispatch((0, _RightBarActions.setRightBar)(objEntity));
	      }
	    };
	
	    _this.hideCallback = function () {
	      var obj = { current: null };
	      _this.props.dispatch((0, _RightBarActions.setRightBar)(obj));
	    };
	
	    _this.handleArrow = function () {
	      var obj = { arrow: !_this.props.rightBar.arrow };
	      // console.log("obj ==== ",obj);
	      _this.props.dispatch((0, _RightBarActions.setRightBar)(obj));
	    };
	
	    _this.confObject = new _WoogeenManager2.default();
	    _this.state = {
	      groups: false,
	      showgroup: false,
	      groupdata: null,
	      isRecording: false
	    };
	    _this.fullCalendar = false;
	    _this.broadCast = false;
	
	    _this.handleConferenceStatus = _this.handleConferenceStatus.bind(_this);
	    _this.confObject.handleDashConfStatusListener(_this.handleConferenceStatus);
	
	    _this.handleRoomChat = _this.handleRoomChat.bind(_this);
	    _this.confObject.handleRoomChatListener(_this.handleRoomChat);
	
	    _this.getRoomNotification = _this.getRoomNotification.bind(_this);
	    _this.confObject.RoomNotificationListener(_this.getRoomNotification);
	    // console.log(this.props.loggedInData.status);
	    return _this;
	  }
	
	  _createClass(DashLayout, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // if(this.props.loggedInData.status && this.props.loggedInData.socketServer){
	      //     if(!callOnce){
	      //       callOnce = true;
	      //       SocketHandler.connectServer(this.props.loggedInData.data._id, this.props.loggedInData.socketServer, this.props.loggedInData.iceServers);
	      //     }
	      // } 
	      // if(nextProps.chatData.total){
	      //   this.setState({ indChatCount : nextProps.chatData.total });
	      // }   
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;
	
	      if (!this.confObject.getConnectionStatus()) {}
	
	      if (this.props.conferenceDetails.isRecording) this.setRecording(this.props.conferenceDetails.isRecording);
	
	      (0, _apiCaller2.default)('config-settings', 'get').then(function (res) {
	        _this2.broadCast = res.broadCast;
	        _this2.fullCalendar = res.fullCalendar;
	      });
	      this.props.dispatch((0, _ChatActions.chatNotifications)({ chatType: 'Indi' }));
	      this.props.dispatch((0, _BroadcastActions.broadcastNotifications)());
	    }
	  }, {
	    key: 'myGroups',
	    value: function myGroups(e) {
	      this.setState({
	        groups: !this.state.groups,
	        showgroup: false
	      });
	    }
	  }, {
	    key: 'groupView',
	    value: function groupView(e) {
	      this.setState({
	        groups: !this.state.groups,
	        showgroup: !this.state.showgroup,
	        groupdata: null
	      });
	    }
	  }, {
	    key: 'showGroup',
	    value: function showGroup(data) {
	      this.setState({
	        groups: !this.state.groups,
	        showgroup: !this.state.showgroup,
	        groupdata: data
	      });
	    }
	  }, {
	    key: 'setLayoutStatus',
	    value: function setLayoutStatus(status) {
	      // this.props.dispatch(SetConfStatus(status));
	      // console.log(status);
	      var route = this.props.location.pathname.split('/');
	      var pathname = route[1];
	
	      if (this.props.workDashboardData.sync == true && this.props && this.props.conferenceDetails && this.props.conferenceDetails.imHost == true) {
	        var obj = {
	          command: 'SYNC-CONF-STATUS',
	          content: { data: { status: status, from: "Dashboard" } },
	          type: 'OBJECT'
	        };
	        this.confObject.sendMessage(obj, 0);
	      } else {
	        this.props.dispatch((0, _ConferenceActions.SetConfStatus)(status));
	        if (pathname != 'conf') {
	          _reactRouter.browserHistory.push("/conf/" + this.confObject.getRoomKey());
	        }
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.hideCallback();
	    }
	  }, {
	    key: 'setRoomChat',
	    value: function setRoomChat() {
	      if (this.props.workDashboardData && this.props.workDashboardData.sync == true && this.props && this.props.conferenceDetails && this.props.conferenceDetails.imHost == true) {
	        var obj = {
	          command: 'CHAT-CHANGE-REQ',
	          content: {},
	          type: 'OBJECT'
	        };
	        this.confObject.sendMessage(obj, 0);
	      } else {
	        this.handleRoomChat();
	        /*let route = this.props.location.pathname.split('/');
	        let pathname = route[1];
	        this.props.dispatch(SetConfStatus(1));
	        this.props.dispatch(setWorkDashboard({current : 'roomchat', roomKey : this.confObject.getRoomKey(), roomCount: 0, uid: this.props.loggedInData.data._id }));
	        if (pathname != 'conf') {
	          browserHistory.push("/conf/" + this.confObject.getRoomKey());
	        }*/
	      }
	    }
	  }, {
	    key: 'handleRoomChat',
	    value: function handleRoomChat() {
	      var route = this.props.location.pathname.split('/');
	      var pathname = route[1];
	      this.props.dispatch((0, _ConferenceActions.SetConfStatus)(1));
	      this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: 'roomchat', roomKey: this.confObject.getRoomKey(), roomCount: 0, uid: this.props.loggedInData.data._id }));
	      if (pathname != 'conf') {
	        _reactRouter.browserHistory.push("/conf/" + this.confObject.getRoomKey());
	      }
	    }
	  }, {
	    key: 'setRecording',
	    value: function setRecording(flag) {
	      this.setState({ isRecording: flag });
	    }
	
	    // http://minutemailer.github.io/react-popup/
	
	  }, {
	    key: 'render',
	    value: function render() {
	
	      //console.log(this.props)
	      var clsContainer = _DashLayout2.default.container + ' clearfix';
	      var cls_Elastic = '' + _DashLayout2.default.elasticWrapper;
	      if (this.props && this.props.loggedInData && this.props.loggedInData.headerFlag) {
	        cls_Elastic = _DashLayout2.default.elasticWrapper + ' ' + _DashLayout2.default.mobConf;
	      };
	
	      if (this.props.rightBar && this.props.rightBar.current != null) {
	        cls_Elastic = _DashLayout2.default.elasticWrapper + ' ' + _DashLayout2.default.minimize;
	      }
	      var route = this.props.location.pathname.split('/');
	      var pathname = route[1];
	      var isGuest = this.props.loggedInData.data.guest ? this.props.loggedInData.data.guest : false;
	      return _jsx('div', {}, void 0, this.props.loggedInData.data.guest != true ? _jsx(_RightBar2.default, {
	        handleMenu: this.setActiveTab,
	        myGroups: this.myGroups.bind(this),
	        individualCount: this.props.chatData.total,
	        menuData: this.props.rightBar,
	        intl: this.props.intl,
	        role: this.props.loggedInData.data.role,
	        guest: isGuest,
	        headerFlag: this.props.loggedInData.headerFlag,
	        conferenceDetails: this.props.conferenceDetails,
	        setLayoutStatus: this.setLayoutStatus.bind(this),
	        broadcastCount: this.props.broadcastData.total,
	        handleArrow: this.handleArrow,
	        fullCalendar: this.fullCalendar,
	        broadCast: this.broadCast,
	        setRoomChat: this.setRoomChat.bind(this),
	        isRecording: this.state.isRecording,
	        setrecording: this.setRecording.bind(this),
	        roomChatCount: this.props.workDashboardData.roomCount
	      }) : null, _jsx('section', {
	        className: cls_Elastic,
	        style: isGuest ? { "width": "calc(100% - 0px)" } : {}
	      }, void 0, this.props.rightBar && this.props.rightBar.current == 'settings' ? _jsx(_ConfSettings2.default, {
	        hideCallback: this.hideCallback,
	        pathname: pathname
	      }) : null, this.props.rightBar && this.props.rightBar.current == 'contacts' ? _jsx(_ConfContacts2.default, {
	        handleMenu: this.setActiveTab,
	        hideCallback: this.hideCallback
	      }) : null, this.props.rightBar && this.props.rightBar.current == 'chats' ? _jsx(_ConfChats2.default, {
	        handleMenu: this.setActiveTab
	      }) : null, this.props.rightBar && this.props.rightBar.current == 'groups' ? _jsx(_ConfGroups2.default, {
	        currentState: this.state,
	        hideCallback: this.myGroups.bind(this),
	        callBack: this.showGroup.bind(this)
	      }) : null, _jsx(_GroupView2.default, {
	        currentState: this.state,
	        hideCallback: this.groupView.bind(this)
	      }), _jsx(_reactBootstrap.Grid, {
	        fluid: true
	      }, void 0, this.props.children)));
	    }
	  }, {
	    key: 'handleConferenceStatus',
	    value: function handleConferenceStatus(obj) {
	      var route = this.props.location.pathname.split('/');
	      var pathname = route[1];
	      this.props.dispatch((0, _ConferenceActions.SetConfStatus)(obj.status));
	      if (pathname != 'conf') {
	        _reactRouter.browserHistory.push("/conf/" + this.confObject.getRoomKey());
	      }
	    }
	
	    //////////////////////////
	
	  }, {
	    key: 'getRoomNotification',
	    value: function getRoomNotification(obj) {
	      var route = this.props.location.pathname.split('/');
	      var pathname = route[1];
	      if (this.props.workDashboardData.current != 'roomchat' || pathname != 'conf' || this.props.conferenceDetails.confStatus != 1) {
	        this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ roomCount: this.props.workDashboardData.roomCount + 1 }));
	      }
	    }
	    /////////////////////////
	
	  }]);
	
	  return DashLayout;
	}(_react.Component);
	
	// Retrieve data from store as props
	function mapStateToProps(store) {
	  return {
	    intl: store.intl,
	    loggedInData: (0, _LoginReducer.loggedInData)(store),
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(store),
	    chatData: (0, _ChatReducer.chatData)(store),
	    rightBar: (0, _RightBarReducer.rightBar)(store),
	    workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(store),
	    broadcastData: (0, _BroadcastReducer.broadcastData)(store)
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(DashLayout);

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	exports.RightBar = RightBar;
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _RightBar = {
	  "navRightFixed": "_3wCRW5hfH2CyoquoUiPGFL",
	  "subNavBars": "_3w35Qikrl2Lsw-BLlBkyqs",
	  "modVerticalNav": "CuK5TKZIMtvS2Jo-rDAKQ",
	  "btmVerticalNav": "_3wMpUmXzOSTb-SMahYWQs3",
	  "active": "_3u_DyrFv5_gBuaU4W_L62U",
	  "chatNotification": "_3TsmkssAKk76l0I1j1TYq1",
	  "chatNotiConf": "_2G7dhup_NSkMZGd3pGL_cz",
	  "confNavMobile": "_2SZXyyz_M4PmKE5gUlPDDX",
	  "conf": "_3TTAxLGNabd_Jq8aVXYjn0",
	  "hide": "_2RYDiWtPdx02CEr7xkcgFa",
	  "show": "_3weHFP4oKES1TNT4WxP3H5",
	  "presenterAdjust": "_3cuLiXfUxNntzUECWgCay0",
	  "mobSlide": "_2pz11ggJoSARQL5siteNFQ"
	};
	
	var _RightBar2 = _interopRequireDefault(_RightBar);
	
	var _roles = __webpack_require__(46);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _RightBarReducer = __webpack_require__(69);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _LoginActions = __webpack_require__(21);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ref = _jsx('img', {
	  src: '/images/white-icons/white-dashboard.png'
	});
	
	var _ref2 = _jsx('img', {
	  src: '/images/white-icons/my-contacts-white.png'
	});
	
	var _ref3 = _jsx('img', {
	  src: '/images/white-icons/white-news-feed.png'
	});
	
	var _ref4 = _jsx('img', {
	  src: '/images/white-icons/white-settings.png'
	});
	
	var _ref5 = _jsx('img', {
	  src: '/images/white-icons/white-calendar.png'
	});
	
	var _ref6 = _jsx('img', {
	  src: '/images/white-icons/white-chat.png'
	});
	
	var _ref7 = _jsx('img', {
	  src: '/images/white-icons/presenter-whtie.png'
	});
	
	var _ref8 = _jsx('img', {
	  src: '/images/white-icons/conference-white.png'
	});
	
	var _ref9 = _jsx('img', {
	  src: '/images/white-icons/white-recording.png'
	});
	
	var _ref10 = _jsx('img', {
	  src: '/images/white-icons/white-chat.png'
	});
	
	var _ref11 = _jsx('img', {
	  src: '/images/white-icons/presenter-whtie.png'
	});
	
	var _ref12 = _jsx('img', {
	  src: '/images/white-icons/conference-white.png'
	});
	
	var _ref13 = _jsx('img', {
	  src: '/images/white-icons/white-recording.png'
	});
	
	var _ref14 = _jsx('img', {
	  src: '/images/white-icons/red-stop.png'
	});
	
	var _ref15 = _jsx('img', {
	  src: '/images/white-icons/white-list-items.png'
	});
	
	var _ref16 = _jsx('img', {
	  src: '/images/white-icons/white-presenter-conference.png'
	});
	
	function RightBar(props, context) {
	  var btmVerticalNav = _RightBar2.default.btmVerticalNav + ' hidden-xs hidden-sm';
	  var presenterActive = '';
	  var conferenceActive = '';
	  var teleActive = '';
	  var cls_hideShow = _RightBar2.default.mobSlide + ' hidden-lg hidden-md';
	
	  var rightNave = '' + _RightBar2.default.navRightFixed;
	  if (props && props.headerFlag) {
	    // console.log("Inside conf nav-------------------");
	    rightNave = '' + _RightBar2.default.confNavMobile;
	  };
	
	  var rightNave_css = {};
	  if (props.conferenceDetails.confStatus > 0 && props.menuData.arrow) {
	    // rightNave = `${styles.navRightFixed} ${styles.hide}`;
	    rightNave_css = {
	      transition: "all 0.4s ease",
	      height: "106px !important"
	    };
	  }
	
	  if (props.loggedInData && props.loggedInData.showHeaderFlag && props.conferenceDetails.confStatus == 2) {
	    // console.log("Inside conf layout-------TRUE------------", props.loggedInData.showHeaderFlag);
	    rightNave = _RightBar2.default.navRightFixed + ' ' + _RightBar2.default.show;
	    // setTimeout(function(){
	    //   console.log("1234567890---------------------------------")
	    //   props.dispatch(setHeaderFlag(true, false));
	    //   // rightNave = `${styles.navRightFixed} ${styles.hide}`;
	    // }, 2500);
	  } else if (props.loggedInData && !props.loggedInData.showHeaderFlag && props.conferenceDetails.confStatus == 2) {
	    // console.log("Inside conf layout---------FALSE----------", props.loggedInData.showHeaderFlag);
	    rightNave = _RightBar2.default.navRightFixed + ' ' + _RightBar2.default.hide;
	  }
	
	  if (props.conferenceDetails.confStatus == 1 && props.conferenceDetails.confData && props.conferenceDetails.confData.businessType == 'LMS') {
	    presenterActive = '' + _RightBar2.default.active;
	    conferenceActive = '';
	  } else if (props.conferenceDetails.confStatus == 2 && props.conferenceDetails.confData.businessType == 'Conference') {
	    presenterActive = '';
	    conferenceActive = '' + _RightBar2.default.active;
	  } else if (props.conferenceDetails.confStatus == 1) {
	    presenterActive = '' + _RightBar2.default.active;
	    conferenceActive = '';
	    teleActive = '';
	  } else if (props.conferenceDetails.confStatus == 2) {
	    presenterActive = '';
	    conferenceActive = '' + _RightBar2.default.active;
	    teleActive = '';
	  } else if (props.conferenceDetails.confStatus == 3) {
	    presenterActive = '';
	    conferenceActive = '';
	    teleActive = '' + _RightBar2.default.active;
	  }
	
	  function handleMenu(event) {
	    //console.log("handleMEnu", event.currentTarget);
	    var obj = {
	      current: event.currentTarget.id
	    };
	    if (obj.current == "contacts") {
	      obj['indChatCount'] = null;
	      props.handleMenu(obj);
	    } else if (obj.current == "settings") {
	      props.handleMenu(obj);
	    } else if (obj.current == "broadcast") {
	      obj['newsCount'] = null;
	      obj['current'] = null;
	      props.handleMenu(obj);
	    } else {
	      props.handleMenu({ current: null });
	    }
	  }
	
	  var WoogeenObject = new _WoogeenManager2.default();
	
	  var ul_css = _RightBar2.default.presenterAdjust + ' clearfix';
	  // let ul_css = props.conferenceDetails.confStatus == 1 ? `${styles.presenterAdjust} clearfix` : `clearfix` ;
	  var noConference = false;
	  if (props.conferenceDetails.confStatus == 1 && props.conferenceDetails.confData && props.conferenceDetails.confData.enableLive != true) {
	    ul_css = 'clearfix';
	    noConference = true;
	  } else if ((props.role == _roles.Roles.Student || props.role == _roles.Roles.Attendee) && props.conferenceDetails.confStatus == 1 && props.conferenceDetails.confData && props.conferenceDetails.confData.haveSchedule != true) {
	    ul_css = 'clearfix';
	    noConference = true;
	  } else if (props.conferenceDetails.confStatus == 1) {
	    ul_css = 'clearfix';
	    noConference = true;
	  } else if (!WoogeenObject.getConnectionStatus()) {
	    ul_css = 'clearfix';
	    noConference = true;
	  }
	
	  function startRecord(event) {
	    console.log('start recording');
	    WoogeenObject.recordConference();
	    props.setrecording(true);
	  }
	
	  function stopRecord(event) {
	    console.log('stop recording');
	    WoogeenObject.stopRecord();
	    props.setrecording(false);
	  }
	
	  // console.log("props.menuData.current", props.menuData.current);
	  // console.log(" confStatus === ", props.conferenceDetails.confStatus);
	  var route = location.pathname.split('/');
	  var pathname = route[1];
	
	  if (!WoogeenObject.getConnectionStatus() && props.isRecording) props.setrecording(false);
	  return _jsx('div', {
	    className: rightNave,
	    style: rightNave_css
	  }, void 0, _jsx('div', {
	    className: _RightBar2.default.modVerticalNav
	  }, void 0, _jsx('ul', {
	    className: ul_css
	  }, void 0, _jsx('li', {
	    id: 'dashboard',
	    onClick: handleMenu
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.dashboard,
	    className: location.pathname == "/dashboard" ? props.rightBar.current == null ? _RightBar2.default.active : '' : '',
	    to: '/dashboard'
	  }, void 0, _ref)), _jsx('li', {
	    id: 'contacts',
	    onClick: handleMenu
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.my_contacts,
	    className: props.rightBar.current == "contacts" ? _RightBar2.default.active : ''
	  }, void 0, _ref2, props.menuData.current != 'contacts' && props.individualCount > 0 ? _jsx('span', {
	    className: _RightBar2.default.chatNotification
	  }, void 0, ' ', props.individualCount, ' ') : null)), props.broadCast ? _jsx('li', {
	    id: 'broadcast',
	    onClick: handleMenu
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.broadcast,
	    className: location.pathname == "/broadcast-news" ? props.rightBar.current == null ? _RightBar2.default.active : '' : '',
	    to: '/broadcast-news'
	  }, void 0, _ref3, location.pathname != "/broadcast-news" && props.broadcastCount > 0 ? _jsx('span', {
	    className: _RightBar2.default.chatNotification
	  }, void 0, ' ', props.broadcastCount, ' ') : null)) : null, _jsx('li', {
	    id: 'settings',
	    onClick: handleMenu
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.settings,
	    className: props.rightBar.current == "settings" ? _RightBar2.default.active : ''
	  }, void 0, _ref4)), props.fullCalendar ? _jsx('li', {
	    id: 'fullcalender',
	    onClick: handleMenu
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.fullcalender,
	    className: location.pathname == "/full-calendar" ? props.rightBar.current == null ? _RightBar2.default.active : '' : '',
	    to: '/full-calendar'
	  }, void 0, _ref5)) : null, WoogeenObject.getConnectionStatus() && (pathname != 'conf' || props.conferenceDetails.confStatus == 2) ? _jsx('li', {
	    id: 'openRoomChat',
	    className: 'hidden-lg hidden-md'
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.room_chat,
	    onClick: props.setRoomChat.bind(this)
	  }, void 0, props.roomChatCount > 0 ? _jsx('span', {
	    className: _RightBar2.default.chatNotiConf
	  }, void 0, props.roomChatCount) : null, _ref6)) : null, WoogeenObject.getConnectionStatus() ? _jsx('li', {
	    id: 'openPresenter',
	    className: 'hidden-lg hidden-md',
	    onClick: props.setLayoutStatus.bind(this, 1)
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.presenter,
	    className: presenterActive
	  }, void 0, _ref7)) : null, WoogeenObject.getConnectionStatus() && props.conferenceDetails && props.conferenceDetails.confData && props.conferenceDetails.confData.packageData && props.conferenceDetails.confData.packageData.features.indexOf("Video Conference") != -1 && props.role != _roles.Roles.Student ? _jsx('li', {
	    id: 'openConference',
	    className: 'hidden-lg hidden-md',
	    onClick: props.setLayoutStatus.bind(this, 2)
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.conference,
	    id: 'openMyGroups',
	    className: conferenceActive
	  }, void 0, _ref8)) : null, WoogeenObject.getConnectionStatus() && props.conferenceDetails && props.conferenceDetails.imHost == true && props.conferenceDetails.confData && props.conferenceDetails.confData.packageData && props.conferenceDetails.confData.packageData.features.indexOf("Server Recording") != -1 && props.isRecording == false ? _jsx('li', {
	    id: 'btnRecord',
	    className: 'hidden-lg hidden-md',
	    onClick: startRecord
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.record
	  }, void 0, _ref9)) : null)), _jsx('div', {
	    className: btmVerticalNav
	  }, void 0, _jsx('ul', {
	    className: 'clearfix'
	  }, void 0, WoogeenObject.getConnectionStatus() && (pathname != 'conf' || props.conferenceDetails.confStatus == 2) ? _jsx('li', {
	    id: 'openRoomChat'
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.room_chat,
	    onClick: props.setRoomChat.bind(this)
	  }, void 0, props.roomChatCount > 0 ? _jsx('span', {
	    className: _RightBar2.default.chatNotiConf
	  }, void 0, props.roomChatCount) : null, _ref10)) : null, WoogeenObject.getConnectionStatus() ? _jsx('li', {
	    id: 'openPresenter',
	    onClick: props.setLayoutStatus.bind(this, 1)
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.presenter,
	    className: presenterActive
	  }, void 0, _ref11)) : null, WoogeenObject.getConnectionStatus() && props.conferenceDetails && props.conferenceDetails.confData && props.conferenceDetails.confData.packageData && props.conferenceDetails.confData.packageData.features.indexOf("Video Conference") != -1 && props.role != _roles.Roles.Student ? _jsx('li', {
	    id: 'openConference',
	    onClick: props.setLayoutStatus.bind(this, 2)
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.conference,
	    id: 'openMyGroups',
	    className: conferenceActive
	  }, void 0, _ref12)) : null, WoogeenObject.getConnectionStatus() && props.conferenceDetails && props.conferenceDetails.imHost == true && props.conferenceDetails.confData && props.conferenceDetails.confData.packageData && props.conferenceDetails.confData.packageData.features.indexOf("Server Recording") != -1 && props.isRecording == false ? _jsx('li', {
	    id: 'btnRecord',
	    onClick: startRecord
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.record
	  }, void 0, _ref13)) : null, WoogeenObject.getConnectionStatus() && props.conferenceDetails && props.conferenceDetails.imHost == true && props.conferenceDetails.confData && props.conferenceDetails.confData.packageData && props.conferenceDetails.confData.packageData.features.indexOf("Server Recording") != -1 && props.isRecording ? _jsx('li', {
	    id: 'btnRecord',
	    onClick: stopRecord
	  }, void 0, _jsx(_reactRouter.Link, {
	    title: props.intl.messages.record
	  }, void 0, _ref14)) : null)), WoogeenObject.getConnectionStatus() && props.conferenceDetails.confStatus != 2 ? _jsx('div', {
	    className: cls_hideShow
	  }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
	    id: 'hideShow',
	    onClick: props.handleArrow
	  }, void 0, props.menuData.arrow ? _ref15 : _ref16)))) : null);
	}
	
	// Retrieve data from store as props
	function mapStateToProps(store) {
	  return {
	    loggedInData: (0, _LoginReducer.loggedInData)(store),
	    rightBar: (0, _RightBarReducer.rightBar)(store)
	  };
	}
	
	RightBar.contextTypes = {
	  router: _react2.default.PropTypes.object
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(RightBar);

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HomeLayout = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _HomeLayout = {
	  "container": "_2Y86N_cjZpZMjO8g4lVnhv",
	  "loginBlock": "_1uk9E41HQKcobHiWbxQaHm"
	};
	
	var _HomeLayout2 = _interopRequireDefault(_HomeLayout);
	
	var _LoginReducer = __webpack_require__(20);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// Import Style
	
	
	var HomeLayout = exports.HomeLayout = function (_Component) {
	  _inherits(HomeLayout, _Component);
	
	  function HomeLayout(props) {
	    _classCallCheck(this, HomeLayout);
	
	    return _possibleConstructorReturn(this, (HomeLayout.__proto__ || Object.getPrototypeOf(HomeLayout)).call(this, props));
	  }
	
	  // background-color: #00aafa;
	
	
	  _createClass(HomeLayout, [{
	    key: 'render',
	    value: function render() {
	      return _jsx('div', {}, void 0, _jsx('section', {
	        className: _HomeLayout2.default.loginBlock
	      }, void 0, _jsx(_reactBootstrap.Grid, {
	        fluid: true
	      }, void 0, _jsx(_reactBootstrap.Row, {}, void 0, this.props.children))));
	    }
	  }]);
	
	  return HomeLayout;
	}(_react.Component);
	
	// Retrieve data from store as props
	function mapStateToProps(store) {
	  return {
	    intl: store.intl,
	    loggedInData: (0, _LoginReducer.loggedInData)(store)
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(HomeLayout);

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HAS_IMAGE = exports.FILE_UPLOAD_PROGRESS = exports.FILE_UPLOAD_MULTIPLE_FILE_UPLOAD = exports.FILE_UPLOAD_COMPLETE = exports.FILE_UPLOAD_ERROR = exports.FILE_UPLOAD_ADD_UPLOADING_IMAGES_SUCCESS = exports.FILE_UPLOAD_ADD_UPLOADING_IMAGES = exports.FILE_UPLOAD_DOCUMENTS_SUCCESS = exports.FILE_UPLOAD_ADD_UPLOADING_DOCUMENTS = exports.THUMBNAIL_HEIGHT = exports.THUMBNAIL_WIDTH = undefined;
	exports.addUploadingImages = addUploadingImages;
	exports.addUploadingDocs = addUploadingDocs;
	exports.uploadFiles = uploadFiles;
	exports.fileProgress = fileProgress;
	exports.fileComplete = fileComplete;
	
	var _detectNode = __webpack_require__(87);
	
	var _detectNode2 = _interopRequireDefault(_detectNode);
	
	var _bluebird = __webpack_require__(40);
	
	var _bluebird2 = _interopRequireDefault(_bluebird);
	
	var _helpers = __webpack_require__(215);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _LoginActions = __webpack_require__(21);
	
	var _redux = __webpack_require__(81);
	
	var _store = __webpack_require__(83);
	
	var _store2 = _interopRequireDefault(_store);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*var store = configureStore();
	*/
	var FileAPI = !_detectNode2.default ? __webpack_require__(89) : null;
	
	var THUMBNAIL_WIDTH = exports.THUMBNAIL_WIDTH = 200;
	var THUMBNAIL_HEIGHT = exports.THUMBNAIL_HEIGHT = 200;
	
	var FILE_UPLOAD_ADD_UPLOADING_DOCUMENTS = exports.FILE_UPLOAD_ADD_UPLOADING_DOCUMENTS = 'FILE_UPLOAD_ADD_UPLOADING_DOCUMENTS';
	var FILE_UPLOAD_DOCUMENTS_SUCCESS = exports.FILE_UPLOAD_DOCUMENTS_SUCCESS = 'FILE_UPLOAD_DOCUMENTS_SUCCESS';
	var FILE_UPLOAD_ADD_UPLOADING_IMAGES = exports.FILE_UPLOAD_ADD_UPLOADING_IMAGES = 'FILE_UPLOAD_ADD_UPLOADING_IMAGES';
	var FILE_UPLOAD_ADD_UPLOADING_IMAGES_SUCCESS = exports.FILE_UPLOAD_ADD_UPLOADING_IMAGES_SUCCESS = 'FILE_UPLOAD_ADD_UPLOADING_IMAGES_SUCCESS';
	var FILE_UPLOAD_ERROR = exports.FILE_UPLOAD_ERROR = 'FILE_UPLOAD_ERROR';
	var FILE_UPLOAD_COMPLETE = exports.FILE_UPLOAD_COMPLETE = 'FILE_UPLOAD_COMPLETE';
	var FILE_UPLOAD_MULTIPLE_FILE_UPLOAD = exports.FILE_UPLOAD_MULTIPLE_FILE_UPLOAD = 'FILE_UPLOAD_MULTIPLE_FILE_UPLOAD';
	var FILE_UPLOAD_PROGRESS = exports.FILE_UPLOAD_PROGRESS = 'FILE_UPLOAD_PROGRESS';
	var HAS_IMAGE = exports.HAS_IMAGE = 'HAS_IMAGE';
	
	function getThumbnails(imageFiles) {
	  return _bluebird2.default.all(imageFiles.map(getImageThumbnail));
	}
	
	function getImageThumbnail(imageFile) {
	  return new _bluebird2.default(function (resolve, reject) {
	    FileAPI.Image(imageFile).preview(THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT).get(function (err, canvas) {
	      if (err) reject(err);
	
	      resolve({
	        dataURL: canvas.toDataURL(),
	        file: imageFile
	      });
	    });
	  });
	}
	
	function addUploadingImages(identificator, imageFiles) {
	  return {
	    type: FILE_UPLOAD_ADD_UPLOADING_IMAGES,
	    payload: {
	      promise: getThumbnails(imageFiles)
	    },
	    meta: {
	      identificator: identificator
	    }
	  };
	}
	
	function addUploadingDocs(identificator, docFiles) {
	  var documentPromise = _bluebird2.default.all(docFiles);
	
	  return {
	    type: FILE_UPLOAD_ADD_UPLOADING_DOCUMENTS,
	    payload: {
	      promise: documentPromise
	    },
	    meta: {
	      identificator: identificator
	    }
	  };
	}
	
	function uploadFile(dispatch, url, identificator, file, data) {
	
	  return new _bluebird2.default(function (resolve) {
	    FileAPI.upload({
	      data: data,
	      files: {
	        file: file
	
	      },
	      complete: resolve,
	      fileprogress: function fileprogress() {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }
	
	        return dispatch(fileProgress.apply(undefined, [identificator].concat(args)));
	      },
	      filecomplete: function filecomplete() {
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          args[_key2] = arguments[_key2];
	        }
	
	        return dispatch(fileComplete.apply(undefined, [identificator, data].concat(args)));
	      },
	      url: url
	    });
	  });
	}
	
	function uploadFiles(identificator, url, files, type, data) {
	  var concurrency = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;
	
	  return function (params) {
	    var dispatch = typeof params === 'function' ? params : params.dispatch;
	    var uploadFilePromise = _bluebird2.default.map(files, function (file) {
	      return uploadFile(dispatch, url, identificator, file, data);
	    }, { concurrency: concurrency });
	
	    return {
	      type: FILE_UPLOAD_MULTIPLE_FILE_UPLOAD,
	      payload: {
	        promise: uploadFilePromise
	      }
	    };
	  };
	}
	
	function fileProgress(identificator, event, file, fileType) {
	  var progress = event.loaded / event.total * 100;
	
	  return {
	    type: FILE_UPLOAD_PROGRESS,
	    payload: {
	      identificator: identificator,
	      file: file,
	      fileType: fileType,
	      progress: progress,
	      isImage: (0, _helpers.isImage)(file),
	      isDoc: (0, _helpers.isDoc)(file)
	    }
	  };
	}
	
	function fileComplete(identificator, data, err, xhr, file) {
	
	  if (err) {
	    return {
	      type: FILE_UPLOAD_ERROR,
	      payload: {
	        identificator: identificator,
	        file: file,
	        err: err,
	        isImage: (0, _helpers.isImage)(file),
	        isDoc: (0, _helpers.isDoc)(file) }
	    };
	  }
	  // const { photo } = JSON.parse(xhr.response);
	
	
	  var image = (0, _helpers.isImage)(file);
	
	  if (image) {
	    if (data.type == "profileImage") {
	
	      //tried to import store here
	
	      /* store.dispatch(getProfileImage({ uid: data.userId })).then(res => {
	         console.log("profileImage updated");
	       })*/
	    }
	    return {
	      type: FILE_UPLOAD_ADD_UPLOADING_IMAGES_SUCCESS,
	      payload: {
	        file: file.name,
	        identificator: identificator
	      }
	    };
	  } else {
	    return {
	      type: FILE_UPLOAD_DOCUMENTS_SUCCESS,
	      payload: {
	        file: file,
	        identificator: identificator
	      }
	    };
	  }
	}

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = fileUploadReducer;
	
	var _UploadActions = __webpack_require__(211);
	
	var actions = _interopRequireWildcard(_UploadActions);
	
	var _UploadingDocument = __webpack_require__(213);
	
	var _UploadingDocument2 = _interopRequireDefault(_UploadingDocument);
	
	var _UploadingImage = __webpack_require__(214);
	
	var _UploadingImage2 = _interopRequireDefault(_UploadingImage);
	
	var _immutable = __webpack_require__(80);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var InitialState = (0, _immutable.Record)({
	  documents: (0, _immutable.Map)(),
	  images: (0, _immutable.Map)()
	});
	var initialState = new InitialState();
	
	function revive() {
	  return initialState.merge({});
	}
	
	function fileUploadReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];
	
	  if (!(state instanceof InitialState)) return revive(state);
	
	  switch (action.type) {
	
	    case actions.FILE_UPLOAD_ADD_UPLOADING_IMAGES_SUCCESS:
	      {
	        var _action$payload = action.payload,
	            file = _action$payload.file,
	            identificator = _action$payload.identificator;
	
	        /*var arrayUploads =[];
	        action.payload.forEach(function(value) {
	           arrayUploads.push(value);
	        })*/
	
	        /*const newUploadingImages = arrayUploads.map(
	         uploadingImage => new UploadingImage(uploadingImage)
	         ); */
	
	        var newUploadingImages = new _UploadingImage2.default(action.payload);
	
	        return state.updateIn(['images', identificator], function (images) {
	          return (0, _immutable.List)(images).concat((0, _immutable.List)(newUploadingImages));
	        });
	      }
	
	    case actions.FILE_UPLOAD_DOCUMENTS_SUCCESS:
	      {
	        var _action$payload2 = action.payload,
	            _file = _action$payload2.file,
	            _identificator = _action$payload2.identificator;
	
	
	        console.log('file', _file);
	
	        // const newUploadingDocument = action.payload.map(
	        //   uploadingDocument => new UploadingDocument({ file: uploadingDocument })
	        // );
	
	        var newUploadingDocument = new _UploadingDocument2.default({
	          file: _file,
	          fileName: _file.name
	        });
	
	        return state.updateIn(['documents', _identificator], function (documents) {
	          return (0, _immutable.List)(documents).concat((0, _immutable.List)(newUploadingDocument));
	        });
	      }
	
	    case actions.FILE_UPLOAD_PROGRESS:
	      {
	        var _action$payload3 = action.payload,
	            _identificator2 = _action$payload3.identificator,
	            _file2 = _action$payload3.file,
	            progress = _action$payload3.progress,
	            isImage = _action$payload3.isImage,
	            isDoc = _action$payload3.isDoc;
	
	
	        if (isImage) {
	          return updateUploadingImage(state, _identificator2, _file2, function (uploadingImage) {
	            return uploadingImage.set('progress', Math.round(progress));
	          });
	        }
	        if (isDoc) {
	          console.log('case matched..calling updateUploadingDocument');
	          return updateUploadingDocument(state, _identificator2, _file2, function (uploadingDocument) {
	            uploadingDocument.set('progress', Math.round(progress));
	          });
	        }
	        return state;
	      }
	
	    case actions.FILE_UPLOAD_ERROR:
	      {
	        var _action$payload4 = action.payload,
	            _identificator3 = _action$payload4.identificator,
	            _file3 = _action$payload4.file,
	            error = _action$payload4.error,
	            _isImage = _action$payload4.isImage,
	            _isDoc = _action$payload4.isDoc;
	
	        if (_isImage) return updateUploadingImage(state, _identificator3, _file3, function (uploadingImage) {
	          return uploadingImage.set('error', error);
	        });
	        if (_isDoc) return updateUploadingDocument(state, _identificator3, _file3, function (uploadingDocument) {
	          return uploadingDocument.set('error', error);
	        });
	        return state;
	      }
	
	  }
	
	  return state;
	}
	
	function updateUploadingImage(state, identificator, file, updater) {
	  return state.updateIn(['images', identificator], function (images) {
	    return (0, _immutable.List)(images).map(function (uploadingImage) {
	      return (// eslint-disable-line no-confusing-arrow
	        uploadingImage.file === file ? updater(uploadingImage) : uploadingImage
	      );
	    });
	  });
	}
	
	function updateUploadingDocument(state, identificator, file, updater) {
	
	  console.log('state', state);
	  console.log('identificator', identificator);
	  console.log('file', file);
	  console.log('updater', updater);
	
	  return state.updateIn(['documents', identificator], function (documents) {
	    return (0, _immutable.List)(documents).map(function (uploadingDocument) {
	      return uploadingDocument.file === file ? updater(uploadingDocument) : uploadingDocument;
	    });
	  });
	}

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _immutable = __webpack_require__(80);
	
	var UploadingDocument = (0, _immutable.Record)({
	  error: null,
	  file: null,
	  fileName: null,
	  progress: 0
	});
	
	exports.default = UploadingDocument;

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _immutable = __webpack_require__(80);
	
	var UploadingImage = (0, _immutable.Record)({
	  dataUrl: null,
	  error: null,
	  file: null,
	  photo: null,
	  progress: 0
	});
	
	exports.default = UploadingImage;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isImage = isImage;
	exports.isDoc = isDoc;
	exports.filterImageFiles = filterImageFiles;
	exports.filterDocFiles = filterDocFiles;
	exports.filterAllowedFiles = filterAllowedFiles;
	
	var _bluebird = __webpack_require__(40);
	
	var _bluebird2 = _interopRequireDefault(_bluebird);
	
	var _detectNode = __webpack_require__(87);
	
	var _detectNode2 = _interopRequireDefault(_detectNode);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// const FileApi = process.env.IS_BROWSER ? require('fileapi') : null;
	// const FileApi = require('fileapi');
	var FileApi = !_detectNode2.default ? __webpack_require__(89) : null;
	
	var IMAGE_TYPES = /^image\/(jpe?g|png|gif|jf?if|tiff?)$/i;
	
	function isImage(file) {
	  return IMAGE_TYPES.test(file.type);
	}
	
	function isDoc(file) {
	  return !isImage(file.type);
	}
	
	function filterImageFiles(payload) {
	  return new _bluebird2.default(function (resolve) {
	    if (payload instanceof Event) {
	      FileApi.getFiles(payload, isImage, resolve);
	    } else {
	      FileApi.filterFiles(payload, isImage, resolve);
	    }
	  });
	}
	
	function filterDocFiles(payload) {
	  return new _bluebird2.default(function (resolve) {
	    if (payload instanceof Event) {
	      FileApi.getFiles(payload, isDoc, resolve);
	    } else {
	      FileApi.filterFiles(payload, isDoc, resolve);
	    }
	  });
	}
	
	/*
	  @summary filters uploaded files 
	  @params payload(event) allowedFileTypes(array)
	  @returns promise 
	*/
	function filterAllowedFiles(payload, allowedFileTypes) {
	
	  //creates a regex from the allowed file extensions
	  var allowedFilter = new RegExp('' + allowedFileTypes.join('|'), 'i');
	
	  return new _bluebird2.default(function (resolve) {
	
	    //check if payload object is instance of React Synthetic Event
	    if (payload instanceof Event) {
	
	      //get the list of files
	      FileApi.getFiles(payload, function (file) {
	        return allowedFilter.test(file.type);
	      }, resolve);
	    } else {
	
	      //filter the files
	      FileApi.filterFiles(payload, function (file) {
	        return allowedFilter.test(file.type);
	      }, resolve);
	    }
	  });
	}

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redux = __webpack_require__(81);
	
	var _AppReducer = __webpack_require__(97);
	
	var _AppReducer2 = _interopRequireDefault(_AppReducer);
	
	var _IntlReducer = __webpack_require__(141);
	
	var _IntlReducer2 = _interopRequireDefault(_IntlReducer);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _LoginReducer2 = _interopRequireDefault(_LoginReducer);
	
	var _ProfileReducer = __webpack_require__(146);
	
	var _ProfileReducer2 = _interopRequireDefault(_ProfileReducer);
	
	var _UsersReducer = __webpack_require__(153);
	
	var _UsersReducer2 = _interopRequireDefault(_UsersReducer);
	
	var _UploadReducer = __webpack_require__(212);
	
	var _UploadReducer2 = _interopRequireDefault(_UploadReducer);
	
	var _RoomReducer = __webpack_require__(143);
	
	var _RoomReducer2 = _interopRequireDefault(_RoomReducer);
	
	var _CorporateReducer = __webpack_require__(158);
	
	var _CorporateReducer2 = _interopRequireDefault(_CorporateReducer);
	
	var _SettingsReducer = __webpack_require__(176);
	
	var _SettingsReducer2 = _interopRequireDefault(_SettingsReducer);
	
	var _LDAPSettingsReducer = __webpack_require__(170);
	
	var _LDAPSettingsReducer2 = _interopRequireDefault(_LDAPSettingsReducer);
	
	var _PackageReducer = __webpack_require__(162);
	
	var _PackageReducer2 = _interopRequireDefault(_PackageReducer);
	
	var _UserDashboardReducer = __webpack_require__(88);
	
	var _UserDashboardReducer2 = _interopRequireDefault(_UserDashboardReducer);
	
	var _CategoryReducer = __webpack_require__(156);
	
	var _CategoryReducer2 = _interopRequireDefault(_CategoryReducer);
	
	var _QuestionnaireReducer = __webpack_require__(147);
	
	var _QuestionnaireReducer2 = _interopRequireDefault(_QuestionnaireReducer);
	
	var _RightBarReducer = __webpack_require__(69);
	
	var _RightBarReducer2 = _interopRequireDefault(_RightBarReducer);
	
	var _ProfessionalProfileReducer = __webpack_require__(172);
	
	var _ProfessionalProfileReducer2 = _interopRequireDefault(_ProfessionalProfileReducer);
	
	var _ReportsReducer = __webpack_require__(151);
	
	var _ReportsReducer2 = _interopRequireDefault(_ReportsReducer);
	
	var _StudentReducer = __webpack_require__(173);
	
	var _StudentReducer2 = _interopRequireDefault(_StudentReducer);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _ConferenceReducer2 = _interopRequireDefault(_ConferenceReducer);
	
	var _StatsReducer = __webpack_require__(165);
	
	var _StatsReducer2 = _interopRequireDefault(_StatsReducer);
	
	var _ChatReducer = __webpack_require__(39);
	
	var _ChatReducer2 = _interopRequireDefault(_ChatReducer);
	
	var _FeedbackReducer = __webpack_require__(164);
	
	var _FeedbackReducer2 = _interopRequireDefault(_FeedbackReducer);
	
	var _LocationReducer = __webpack_require__(160);
	
	var _LocationReducer2 = _interopRequireDefault(_LocationReducer);
	
	var _ParticipantsGroupReducer = __webpack_require__(163);
	
	var _ParticipantsGroupReducer2 = _interopRequireDefault(_ParticipantsGroupReducer);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardReducer2 = _interopRequireDefault(_WorkDashboardReducer);
	
	var _FullCalendarReducer = __webpack_require__(168);
	
	var _FullCalendarReducer2 = _interopRequireDefault(_FullCalendarReducer);
	
	var _BroadcastReducer = __webpack_require__(92);
	
	var _BroadcastReducer2 = _interopRequireDefault(_BroadcastReducer);
	
	var _WorkDashboardReloadReducer = __webpack_require__(154);
	
	var _WorkDashboardReloadReducer2 = _interopRequireDefault(_WorkDashboardReloadReducer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Import Reducers
	var _ = __webpack_require__(7);
	
	// Combine all reducers into one root reducer
	
	//import feedback from './modules/Admin/Feedback/FeedbackReducer';
	
	/**
	 * Root Reducer
	 */
	var appReducer = (0, _redux.combineReducers)({
	  app: _AppReducer2.default,
	  intl: _IntlReducer2.default,
	  login: _LoginReducer2.default,
	  profile: _ProfileReducer2.default,
	  users: _UsersReducer2.default,
	  room: _RoomReducer2.default,
	  uploads: _UploadReducer2.default,
	  corporate: _CorporateReducer2.default,
	  settings: _SettingsReducer2.default,
	  ldapSettings: _LDAPSettingsReducer2.default,
	  packages: _PackageReducer2.default,
	  dashboard: _UserDashboardReducer2.default,
	  category: _CategoryReducer2.default,
	  questionnaire: _QuestionnaireReducer2.default,
	  student: _StudentReducer2.default,
	  conference: _ConferenceReducer2.default,
	  stats: _StatsReducer2.default,
	  chat: _ChatReducer2.default,
	  feedback: _FeedbackReducer2.default,
	  location: _LocationReducer2.default,
	  ParticipantsGroup: _ParticipantsGroupReducer2.default,
	  workDashboard: _WorkDashboardReducer2.default,
	  rightBar: _RightBarReducer2.default,
	  professionalprofile: _ProfessionalProfileReducer2.default,
	  reports: _ReportsReducer2.default,
	  fullCalendarEvents: _FullCalendarReducer2.default,
	  broadcast: _BroadcastReducer2.default,
	  workDashboardReload: _WorkDashboardReloadReducer2.default
	});
	
	var rootReducer = function rootReducer(state, action) {
	  if (action.type === 'LOGOUT_USER') {
	    var intlState = _.pick(state, ['intl']);
	    state = intlState;
	  }
	  return appReducer(state, action);
	};
	
	exports.default = rootReducer;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Saveportaluser = Saveportaluser;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _corporate = __webpack_require__(102);
	
	var _admin = __webpack_require__(54);
	
	var _package = __webpack_require__(103);
	
	var _adminUser = __webpack_require__(13);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	
	function Saveportaluser(req, res) {
	
	    try {
	        if (!req.body || req.body && !req.body.data) {
	            res.json({ status: false, error: "Invalid request" });
	        } else {
	            var obj = req.body.data;
	            if (obj.businessId && obj.businessId != "" && obj.businessName && obj.businessName != "" && obj.phoneNo && obj.phoneNo != "" && obj.name && obj.name != "" && obj.email && obj.email != "" && obj.businessType && obj.businessType != "" && obj.address && obj.address.country && obj.address.country != "" && obj.address.district && obj.address.district != "" && obj.address.pincode && obj.address.pincode != "" && obj.address.state && obj.address.state != "" && obj.address.street && obj.address.street != "" && obj.continuousPresence && obj.continuousPresence != "" && obj.features && obj.features.length > 0 && obj.packageName && obj.packageName != "" && obj.packageValidity && obj.packageValidity != "" && obj.roomCount && obj.roomCount != "" && obj.serverLocation && obj.serverLocation != "" && obj.userCount && obj.userCount != "") {
	                //Query for checking if user is present with same email in database
	                // console.log('User Create');
	                _users2.default.findOne({
	                    email: obj.email
	                }, function (err, doc) {
	                    if (err) {
	                        cb(err, null);
	                    } else if (doc) {
	                        //If present send the error
	                        res.json({ status: false, error: "Email already exists." });
	                    } else {
	                        _users2.default.findOne({
	                            role: _adminUser.Roles.Superadmin
	                        }, function (err, doc) {
	                            var corporateObj = {
	                                businessId: obj.businessId,
	                                businessName: obj.businessName,
	                                phoneNo: obj.phoneNo,
	                                companyStatus: "Active",
	                                scheduleType: "Calendar",
	                                contactDetails: {
	                                    name: obj.name,
	                                    email: obj.email,
	                                    phoneNo: obj.phoneNo
	                                },
	                                address: {
	                                    country: obj.address.country,
	                                    district: obj.address.district,
	                                    pincode: obj.address.pincode,
	                                    state: obj.address.state,
	                                    street: obj.address.street
	                                },
	                                businessType: obj.businessType
	                            };
	                            (0, _corporate.createCorporateCallback)(corporateObj, function (crrerror, corporateData) {
	                                if (corporateData) {
	                                    var userObj = {
	                                        firstname: obj.name,
	                                        email: obj.email,
	                                        lastname: "",
	                                        password: obj.name.trim().slice(0, 5) + "1234",
	                                        profile: {
	                                            companyid: corporateData.id,
	                                            dept: "",
	                                            phone: obj.phoneNo
	                                        },
	                                        role: _adminUser.Roles.Admin,
	                                        uid: doc._id
	                                    };
	
	                                    (0, _admin.createUserCallback)(userObj, _adminUser.Roles.Superadmin, function (usererr, userData) {
	                                        if (userData) {
	
	                                            var packageObj = {
	                                                assignedTo: mongoose.Types.ObjectId(userData.id),
	                                                continuousPresence: obj.continuousPresence,
	                                                features: obj.features,
	                                                packageName: obj.packageName,
	                                                packageValidity: obj.packageValidity,
	                                                roomCount: obj.roomCount,
	                                                serverLocation: obj.serverLocation,
	                                                uid: doc._id,
	                                                userCount: obj.userCount
	                                            };
	                                            (0, _package.createPackageCallback)(packageObj, function (packageerr, packageData) {
	                                                if (packageData) {
	                                                    res.json({ status: true, data: "created successfully" });
	                                                } else if (packageerr) {
	                                                    res.json({ status: false, error: packageerr });
	                                                } else {
	                                                    res.json({ status: false, error: "Internal server error, Please try again" });
	                                                }
	                                            });
	                                        } else if (usererr) {
	                                            res.json({ status: false, error: usererr });
	                                        } else {
	                                            res.json({ status: false, error: "Internal server error, Please try again" });
	                                        }
	                                    });
	                                } else if (crrerror) {
	                                    res.json({ status: false, error: crrerror });
	                                } else {
	                                    res.json({ status: false, error: "Internal server error, Please try again" });
	                                }
	                            });
	                        });
	                    }
	                });
	            } else {
	                res.json({ status: false, error: "Please enter all fields." });
	            }
	        }
	    } catch (e) {
	        console.log('error in newUser', e);
	        res.json({ status: false, error: "Internal server error, Please try again" });
	    }
	}
	
	//   let data = {
	//       businessId:"psdjjfd",
	//       businessName:"astrdda",
	//       phoneNo: "9999999999",
	//       name: "namedd",
	//       email: "prandhseesxi@gmail.com",
	//       address: {
	//           country: "Country",
	//           district: "district",
	//           pincode: "500054",
	//           state: "State",
	//           street: "Street"
	//       },
	//       businessType:"LMS",
	//       continuousPresence: 10,
	//       features:["User Presence", "Whiteboard", "Screen Share", "Q&A", "Video Conference", "Topics"],
	//       packageName:"package name",
	//       packageValidity:moment().add(1,'years').endOf('day'),
	//       roomCount:10,
	//       serverLocation:"https://localmcu.instavc.com",
	//       userCount:10
	//     }

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.getEvents = getEvents;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _authorization = __webpack_require__(10);
	
	var _schedule = __webpack_require__(57);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// console.log("scheduleRoomSelector ", scheduleRoomSelector);
	
	
	/**
	*  @Function name : getEvents
	*  @Purpose : To fetcht the events to show on calendar
	*  @Request Object : userdata :  { uid : "user id" } 
	*  @Response Object : Success - Success message, events data, Failure - Error message
	*  @Author : "Madhusudhan Reddy"
	*/
	
	function getEvents(req, res) {
		// console.log("req.query ", req.query);
		(0, _authorization.checkValidRequest)(req.headers, function (user) {
			try {
				if (user == null) {
					// Verify requested user
					res.json({ status: false, error: "Require User Authentication" });
				} else {
					var obj = {
						uid: user['_id'],
						role: user['role'],
						cid: user['profile']['companyid']
					};
					(0, _schedule.scheduleRoomSelector)(obj, function (selector, instructorIds) {
						if (selector && selector['corporateId']) {
							_room2.default.find({ corporateId: selector['corporateId'] }, { _id: 1 }, function (error, rooms) {
								// console.log("rooms " ,rooms);
							});
						} else {
							console.log("can't find rooms");
						}
						// console.log("selector ", selector);
						// console.log("instructorIds ", instructorIds);						
					});
					var data = { name: "Madhusudhan Reddy", events: [{ startTime: "", endTime: "" }] };
					res.json({ status: true, error: null, data: data });
				}
			} catch (e) {
				console.log('error in getEvents', e);
				res.json({ status: false, error: 'Internal Server Error', data: null });
			}
		});
	};

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.sendMessage = sendMessage;
	exports.getMsgData = getMsgData;
	exports.getChatNotification = getChatNotification;
	exports.indChatNotifications = indChatNotifications;
	exports.roomChatNotifications = roomChatNotifications;
	exports.clearRoomChat = clearRoomChat;
	exports.deleteFilesFromDest = deleteFilesFromDest;
	exports.exportRoomChat = exportRoomChat;
	exports.exportUsersData = exportUsersData;
	
	var _chat = __webpack_require__(233);
	
	var _chat2 = _interopRequireDefault(_chat);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _mobile = __webpack_require__(56);
	
	var _randomstring = __webpack_require__(35);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	var _room3 = __webpack_require__(73);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// var _ = require('lodash');
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	var multer = __webpack_require__(50);
	var fs = __webpack_require__(23);
	
	var _ = __webpack_require__(7);
	
	var request = __webpack_require__(51);
	
	var async = __webpack_require__(44);
	var exportToExcel = __webpack_require__(110);
	
	
	/**
	* @Function Name: "sendMessage",
	* @Purpose: "To send and save the message.",
	* @Request Object: chatObj : {sentTo, message, chatType, messageType, roomKey},
	* @Response Object: Success- {status : true, data, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function sendMessage(req, res) {
	
		// console.log("req.body.chatObj", req.body.chatObj);
		// Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person == null) {
					res.json({ status: false, error: "Invalid request.", errorCode: 208 });
				} else if (person != null && req.body.chatObj) {
					var msgData = req.body.chatObj;
	
					// insert sentby and status values
					msgData['sentBy'] = person._id;
					msgData['status'] = [person._id];
					msgData['createdOn'] = moment().utc().toDate();
	
					//code changed by - Najib, Desc - Setting variable for type file and using this variable subsiquently 	
					var isFileType = false;
					if (msgData.messageType != 'TXT' && msgData.messageType != 'YOUTUBE' && msgData.messageType != 'VIMEO' && msgData.messageType != 'URL') {
						isFileType = true;
					}
	
					// check type of chat
					if (msgData.chatType == 'Room') {
	
						var fileFormat = '';
						var length = '';
						var typeOfFile = '';
						var allowedFormats = '';
	
						if (isFileType) {
							fileFormat = msgData.message.split(".");
							length = fileFormat.length;
							typeOfFile = _.trim(fileFormat[length - 1]);
							allowedFormats = _.map(['xlsx', 'xls', 'doc', 'docx', 'ppt', 'pptx', 'txt', 'pdf', 'odp', 'odt', 'ods', 'png', 'jpeg', 'jpg', 'gif', 'wav', 'mp3', 'wmv', 'mp4', 'mkv', 'avi'], _.trim);
						}
	
						if (msgData.fileSize > 20971520 && isFileType) {
							console.log("Indi Chat upload - File Size exceeded");
							res.json({ status: false, error: "File Size should be less than 20MB." });
						} else if (!allowedFormats.includes(typeOfFile) && isFileType) {
							console.log("Indi Chat upload - File Type not supported!");
							res.json({ status: false, error: "Invalid File Extension!" });
						} else {
							// get and check valid room or not
							_room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(msgData.roomKey) }).exec(function (roomErr, roomRes) {
								if (roomErr) {
									res.json({ status: false, error: roomErr.message });
								} else if (roomRes) {
	
									// insert room id and delete room key
									msgData['sentToRoom'] = roomRes._id;
									delete msgData['roomKey'];
	
									// check type of message
									if (isFileType) {
										multer({
											dest: process.env.PWD + "/uploads/",
											limits: { fieldSize: 60 * 1024 * 1024 }
										}).single('upl');
	
										var imageBuffer = new Buffer(msgData.file, "base64");
										var randomstring = '';
	
										//Function call for creating randomstring
										(0, _randomstring.createRandomString)(function (data) {
											randomstring = data;
											var dest = process.env.PWD + "/uploads/" + randomstring + "_" + msgData.message;
											fs.writeFile(dest, imageBuffer, 'base64', function (uploadFailed, uploaded) {
												if (uploadFailed) {
													res.json({ status: false, error: uploadFailed });
												} else {
													delete msgData['file'];
													msgData['message'] = randomstring + "_" + msgData.message;
													saveMsg(msgData, function (cbErr, cbRess) {
														if (cbErr) {
															res.json({ status: false, error: cbErr.message });
														} else if (cbRess) {
															res.json({ status: true, data: cbRess });
														} else res.json({ status: false, error: "Internal server error" });
													});
												}
											});
										});
									} else if (msgData.messageType == 'YOUTUBE') {
										videoAPIcall(msgData, function (cbErr, cbRess) {
											if (cbErr) {
												msgData['messageType'] = "URL";
												saveMsg(msgData, function (cbErr, cbRess) {
													if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
												});
											} else if (!cbErr) {
												msgData['title'] = cbRess.title;
												msgData['duration'] = cbRess.duration;
												saveMsg(msgData, function (cbErr, cbRess) {
													if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
												});
											}
										});
									} else if (msgData.messageType == 'VIMEO') {
										videoAPIcall(msgData, function (cbErr, cbRess) {
											if (cbErr) {
												msgData['messageType'] = "URL";
												saveMsg(msgData, function (cbErr, cbRess) {
													if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
												});
											} else if (!cbErr) {
												//console.log("cbRess", cbRess);
												msgData['title'] = cbRess.title;
												msgData['duration'] = cbRess.duration;
												msgData['vimeoThumbnail'] = cbRess.vimeoThumbnail;
												saveMsg(msgData, function (cbErr, cbRess) {
													if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
												});
											}
										});
									} else if (msgData.messageType == 'URL') {
										saveMsg(msgData, function (cbErr, cbRess) {
											console.log("msgData---", msgData);
											if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
										});
									} else {
										saveMsg(msgData, function (cbErr, cbRess) {
											if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
										});
									}
								} else res.json({ status: false, error: "Invalid room." });
							});
						}
					} else {
						if (isFileType) {
							// console.log("msg object --- ", msgData);
	
							var _fileFormat = msgData.message.split(".");
							var _length = _fileFormat.length;
							var _typeOfFile = _.trim(_fileFormat[_length - 1]);
							var _allowedFormats = _.map(['xlsx', 'xls', 'doc', 'docx', 'ppt', 'pptx', 'txt', 'pdf', 'odp', 'odt', 'ods', 'png', 'jpeg', 'jpg', 'gif', 'wav', 'mp3', 'wmv', 'mp4', 'mkv', 'avi'], _.trim);
	
							if (msgData.fileSize > 20971520) {
								console.log("Indi Chat upload - File Size exceeded");
								res.json({
									status: false,
									error: "File Size should be less than 20MB."
								});
							} else if (!_allowedFormats.includes(_typeOfFile)) {
								console.log("Indi Chat upload - File Type not supported!");
								res.json({ status: false, error: "Invalid File Extension!" });
							} else {
								multer({
									dest: process.env.PWD + "/uploads/",
									limits: { fieldSize: 5 * 1024 * 1024 }
								}).single('upl');
	
								var imageBuffer = new Buffer(msgData.file, "base64");
								var randomstring = '';
	
								//Function call for creating randomstring
								(0, _randomstring.createRandomString)(function (data) {
									randomstring = data;
									var dest = process.env.PWD + "/uploads/" + randomstring + "_" + msgData.message;
									fs.writeFile(dest, imageBuffer, 'base64', function (uploadFailed, uploaded) {
										if (uploadFailed) {
											res.json({ status: false, error: uploadFailed });
										} else {
											delete msgData['file'];
											msgData['message'] = randomstring + "_" + msgData.message;
											saveMsg(msgData, function (cbErr, cbRess) {
												if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
											});
										}
									});
								});
							}
						} else if (msgData.messageType == 'YOUTUBE') {
							//console.log("Inside youtube", msgData);
							videoAPIcall(msgData, function (cbErr, cbRess) {
								if (cbErr) {
									msgData['messageType'] = "URL";
									saveMsg(msgData, function (cbErr, cbRess) {
										if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
									});
								} else if (!cbErr) {
									msgData['title'] = cbRess.title;
									msgData['duration'] = cbRess.duration;
									saveMsg(msgData, function (cbErr, cbRess) {
										if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
									});
								}
							});
						} else if (msgData.messageType == 'VIMEO') {
							videoAPIcall(msgData, function (cbErr, cbRess) {
								if (cbErr) {
									msgData['messageType'] = "URL";
									saveMsg(msgData, function (cbErr, cbRess) {
										if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
									});
								} else if (!cbErr) {
									msgData['title'] = cbRess.title;
									msgData['duration'] = cbRess.duration;
									msgData['vimeoThumbnail'] = cbRess.vimeoThumbnail;
									saveMsg(msgData, function (cbErr, cbRess) {
										if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
									});
								}
							});
						} else if (msgData.messageType == 'URL') {
							saveMsg(msgData, function (cbErr, cbRess) {
								if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
							});
						} else {
							saveMsg(msgData, function (cbErr, cbRess) {
								if (cbErr) res.json({ status: false, error: cbErr.message });else if (cbRess) res.json({ status: true, data: cbRess });else res.json({ status: false, error: "Internal server error" });
							});
						}
					}
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				console.log("eror in sendMessage === ", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	function videoAPIcall(msgData, callback) {
		try {
			//console.log("Inside callback", msgData);
			if (msgData && msgData != '') {
				//console.log("At calling function", msgData);
				//Options for calling youtube api
	
				if (msgData.messageType == "YOUTUBE") {
					var options = {
						url: 'https://www.googleapis.com/youtube/v3/videos?id=' + msgData.fileName + '&key=AIzaSyD9fyjCqrqlYWvqSVCm-pzoAe6OjpBJYLU&part=snippet,contentDetails',
						headers: {
							'Content-Type': 'application/json'
						}
					};
					//Call the youtube api
					request.get(options, function (error, response, body) {
						if (!response.error) {
	
							//Parse the body
							var videodata = JSON.parse(body);
							var items = videodata.items;
							var mData = {};
							//console.log("items---", items);
							if (items && items[0] && items[0].id) {
								//If title is there in body set the title for youtube video
								if (items[0] && items[0].snippet && items[0].snippet.title) mData['title'] = items[0].snippet.title;
	
								//If duration is there in body set the duration for youtube video
								if (items[0] && items[0].contentDetails && items[0].contentDetails.duration) {
									var str = items[0].contentDetails.duration;
									mData['duration'] = str;
								}
								callback(null, mData);
							} else {
								//console.log("Invalid you tube link");
								callback("Invalid youtube Link", null);
							}
						}
					});
				} else if (msgData.messageType == "VIMEO") {
	
					//Call the vimeo api
	
					request.get('http://www.vimeo.com/api/v2/video/' + msgData.fileName + '.json', function (error, response) {
						if (!error) {
							var newObj = response.body;
							var subStr = newObj.includes("not found");
							if (!subStr) {
	
								//Parse the body
								var videodata = JSON.parse(newObj);
								var mData = {};
	
								//If title is there in body set the title for youtube video
								if (videodata && videodata[0].title) {
									mData['title'] = videodata[0].title;
								}
								//If duration is there in body set the duration for youtube video
								if (videodata && videodata[0].duration) {
									var str = videodata[0].duration;
									mData['duration'] = str;
								}
								if (videodata && videodata[0].thumbnail_small) {
									var imageLink = videodata[0].thumbnail_small;
									mData['vimeoThumbnail'] = imageLink;
								}
	
								callback(null, mData);
							} else {
								callback("Invalid URL", null);
							}
						} else {
							callback("Invalid URL", null);
						}
					});
				}
			}
		} catch (e) {
			console.log("error in videoAPIcall", e);
			res.json({ status: false, error: "Internal server error." });
		}
	}
	
	function saveMsg(msgData, callback) {
		// console.log("msgData---",msgData);
		try {
			var objEntity = new _chat2.default(msgData);
			objEntity.save(function (err, doc) {
				if (err) {
					callback(err, null);
				} else {
					if (msgData.chatType == 'Indi') {
						var query = _chat2.default.find({ $or: [{ sentBy: msgData.sentBy, sentTo: msgData.sentTo }, { sentTo: msgData.sentBy, sentBy: msgData.sentTo }] });
						query.populate('sentBy sentTo', 'firstname lastname email profile.profileImage').sort({ createdOn: 1 }).exec(function (e, doc1) {
							if (e) {
								callback(e, null);
							} else if (doc1) {
								callback(null, doc1);
								_users2.default.findOne({ _id: mongoose.Types.ObjectId(msgData.sentTo) }).populate('profile.companyid', 'businessType').exec(function (err, person) {
									if (person && person.deviceType == 'IOS') {
										(0, _mobile.sendPushNotificationIos)("INDI-CHAT", msgData.message, person.deviceId, msgData.sentBy, msgData.sentTo, person.profile.companyid.businessType);
									} else if (person && person.deviceType == 'ANDROID') {
										(0, _mobile.sendPushNotificationAndroid)("INDI-CHAT", msgData.message, person.deviceId, msgData.sentBy, msgData.sentTo);
									}
								});
							} else callback(null, null);
						});
					} else if (msgData.chatType == 'Group') {
						var query = _chat2.default.find({ sentToGroup: msgData.sentToGroup });
						query.populate('sentBy', 'firstname lastname email profile.profileImage').populate('sentToGroup', 'groupName members').sort({ createdOn: 1 }).exec(function (e, doc1) {
							if (e) {
								callback(e, null);
							} else if (doc1) {
								callback(null, doc1);
								_users2.default.findOne({ _id: mongoose.Types.ObjectId(msgData.sentTo) }).populate('profile.companyid', 'businessType').exec(function (err, person) {
									if (person && person.deviceType == 'IOS') {
										(0, _mobile.sendPushNotificationIos)("GROUP-CHAT", msgData.message, person.deviceId, msgData.sentBy, msgData.sentTo, person.profile.companyid.businessType);
									} else if (person && person.deviceType == 'ANDROID') {
										(0, _mobile.sendPushNotificationAndroid)("GROUP-CHAT", msgData.message, person.deviceId, msgData.sentBy, msgData.sentTo);
									}
								});
							} else callback(null, null);
						});
					} else if (msgData.chatType == 'Room') {
						var query = _chat2.default.find({ sentToRoom: msgData.sentToRoom });
						query.populate('sentBy', 'firstname lastname email profile.profileImage').sort({ createdOn: 1 }).exec(function (e, doc1) {
							if (e) {
								callback(e, null);
							} else if (doc1) {
								callback(null, doc1);
								/* Room chat push notifications + DSS
	       ** Get the users from the room and then send notification to every user who has logged in on 
	       ** Android or iOS*/
	
								_room2.default.findOne({ _id: mongoose.Types.ObjectId(msgData.sentToRoom) }).populate('corporateId', 'businessType').exec(function (err, roomData) {
									if (roomData && roomData.users && roomData.users.length > 0) {
										(0, _room3.getRoomUsersData)(roomData.users, roomData._id, function (error, roomUsers) {
											if (roomUsers != null) {
												if (roomUsers && roomUsers.length > 0) {
													_users2.default.find({ _id: { $in: roomUsers } }).select('deviceType deviceId').exec(function (err, userData) {
														if (userData && userData.length > 0) {
															for (var i = 0; i <= userData.length - 1; i++) {
																if (userData[i].deviceType == 'ANDROID' && msgData.sentBy.toString() != userData[i]._id.toString()) {
																	(0, _mobile.sendPushNotificationAndroid)("ROOM-CHAT", msgData.message, userData[i].deviceId, msgData.sentBy, msgData.sentTo);
																} else if (userData[i].deviceType == 'IOS' && roomData.corporateId && roomData.corporateId.businessType && msgData.sentBy.toString() != userData[i]._id.toString()) {
																	(0, _mobile.sendPushNotificationIos)("ROOM-CHAT", msgData.message, userData[i].deviceId, msgData.sentBy, msgData.sentTo, roomData.corporateId.businessType);
																}
															}
														}
													});
												}
											}
										});
									}
								});
								/* Room chat push notifications - DSS*/
							} else callback(null, null);
						});
					}
				}
			});
		} catch (e) {
			console.log("error in saveMsg ", e);
			callback(null, null);
		}
	}
	
	/**
	* @Function Name: "getMsgData",
	* @Purpose: "To send and save the message.",
	* @Request Object: query : {type, sentTo},
	* @Response Object: Success- {status : true, data, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function getMsgData(req, res) {
	
		// Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person == null) {
					res.json({ status: false, error: "Invalid request.", errorCode: 208 });
				} else if (person != null && req.query.type && req.query.sentTo) {
					// let sentTo = mongoose.Types.ObjectId(req.query.sentTo);
	
					// for invidual chat data
					if (req.query.type == 'Indi') {
	
						// fetch sentBy me or sentTo me
						var query = _chat2.default.find({ $or: [{ sentBy: person._id, sentTo: req.query.sentTo }, { sentTo: person._id, sentBy: req.query.sentTo }] });
						query.populate('sentBy sentTo', 'firstname lastname email profile.profileImage').sort({ createdOn: 1 }).exec(function (e, doc1) {
							// console.log("GetIndi---",doc1);
							if (e) {
								res.json({ status: false, error: e.message });
							} else if (doc1 && doc1.length > 0) {
								res.json({ status: true, data: doc1 });
	
								// update the status as read
								_chat2.default.update({ sentTo: person._id, sentBy: req.query.sentTo }, { $addToSet: { status: person._id } }, { multi: true }).exec(function (updateerr, updated) {
									/*console.log("updateerr === ", updateerr);
	        console.log("updated === ",updated);*/
								});
							} else res.json({ status: true, data: [] });
						});
					} else if (req.query.type == 'Group') {
	
						// for group chat data
						var _query = _chat2.default.find({ sentToGroup: req.query.sentTo });
						_query.populate('sentBy', 'firstname lastname email profile.profileImage').populate('sentToGroup', 'groupName members').sort({ createdOn: 1 }).exec(function (e, doc1) {
							if (e) {
								res.json({ status: false, error: e.message });
							} else if (doc1 && doc1.length > 0) {
								// console.log("GetGroup---",doc1);
								res.json({ status: true, data: doc1 });
							} else res.json({ status: true, data: [] });
						});
					} else if (req.query.type == 'Room') {
	
						// for room chat data
						_room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(req.query.sentTo) }).exec(function (roomErr, roomRes) {
							if (roomErr) {
								res.json({ status: false, error: roomErr.message });
							} else if (roomRes && roomRes._id) {
								var _query2 = _chat2.default.find({ sentToRoom: roomRes._id });
								_query2.populate('sentBy', 'firstname lastname email profile.profileImage').sort({ createdOn: 1 }).exec(function (e, doc1) {
									if (e) {
										res.json({ status: false, error: e.message });
									} else if (doc1 && doc1.length > 0) {
										// console.log("GetGroup---",doc1);
										res.json({ status: true, data: doc1 });
										_chat2.default.update({ sentToRoom: roomRes._id }, { $addToSet: { status: person._id } }, { multi: true }).exec(function (updateerr, updated) {
											/*console.log("updateerr === ", updateerr);
	          console.log("updated === ",updated);*/
										});
									} else res.json({ status: true, data: [] });
								});
							} else res.json({ status: false, error: "Invalid room" });
						});
					} else res.json({ status: false, error: "Invalid request, Please try again." });
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				console.log("error in getMsgData", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	function getChatNotification(req, res) {
		try {
			if (!req.body && !req.body.chatObj) {
				res.json({ status: false, error: "Invalid request" });
			} else {
				var msgData = req.body.chatObj;
				// console.log("msgData === ",msgData);
				var selector = {};
				if (msgData.chatType == 'Indi') selector['sentTo'] = msgData.sentTo;else if (msgData.chatType == 'Group') selector['sentToGroup'] = msgData.sentTo;else if (msgData.chatType == 'Room') selector['sentToRoom'] = msgData.sentTo;
				selector['status'] = { $nin: [msgData.sentTo] };
				selector['sentBy'] = msgData.sentBy;
				_chat2.default.count(selector).exec(function (err, count) {
					var data = {
						id: msgData.sentBy,
						count: count
					};
					res.json({ status: true, data: data });
				});
			}
		} catch (e) {
			console.log("error in getChatNotification", e);
			res.json({ status: false, error: "Internal server error." });
		}
	}
	
	/**
	* @Function Name: "indChatNotifications",
	* @Purpose: "To get the individual chat notitfication.",
	* @Request Object: {},
	* @Response Object: Success- {status : true, total, notifications }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function indChatNotifications(req, res) {
	
		// Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null) {
					if (person.contacts) {
	
						// fetch unread message records
						var query = _chat2.default.find({ sentTo: person._id, status: { $nin: [person._id] } });
						query.exec(function (error, result) {
							// console.log("result === ",result);
							if (error) {
								console.log("error in getChatNotifications === ", error);
								res.json({ status: true, total: 0, notifications: {} });
							} else if (result && result.length > 0) {
	
								var total = 0;
	
								// individual count and total calcutations
								var response = _.countBy(result, function (chat) {
									return chat.sentBy;
								});
								_.each(response, function (count) {
									total += count;
								});
								res.json({ status: true, total: total, notifications: response });
							} else res.json({ status: true, total: 0, notifications: {} });
						});
					} else res.json({ status: true, total: 0, notifications: {} });
				} else res.json({ status: true, total: 0, notifications: {} });
			} catch (e) {
				console.log("error in getChatNotifications", e);
				res.json({ status: true, total: 0, notifications: {} });
			}
		});
	
		/*if (!req.body && !req.body.chatObj) {
	    	res.json({status: false, error : "Invalid request"});
	 } else {
	 	let msgData = req.body.chatObj;
	 	// console.log("msgData === ",msgData);
	 	let selector = {};
	 	if(msgData.chatType == 'Indi')
	 		selector['sentTo'] = msgData.sentTo;
	 	else if(msgData.chatType == 'Group')
	 		selector['sentToGroup'] = msgData.sentTo;
	 	else if(msgData.chatType == 'Room')
	 		selector['sentToRoom'] = msgData.sentTo;
	 	selector['status'] = { $nin : [msgData.sentTo]};
	 	selector['sentBy'] = msgData.sentBy;
	 	Chat.count(selector).exec(function(err, count){
	 		let data = {
	 			id : msgData.sentBy,
	 			count : count
	 		}
	 		res.json({ status: true, data: data });
	 	});
	 	}*/
	}
	
	/**
	* @Function Name: "roomChatNotifications",
	* @Purpose: "To get the room chat notitfication.",
	* @Request Object: {},
	* @Response Object: Success- {status : true, notifications }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function roomChatNotifications(req, res) {
	
		// Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.params.roomKey) {
					_room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(req.params.roomKey) }).exec(function (roomErr, roomRes) {
						try {
							if (roomErr) {
								res.json({ status: false, error: roomErr.message });
							} else if (roomRes && roomRes._id) {
								_chat2.default.count({ sentToRoom: roomRes._id, status: { $nin: [person._id] } }).exec(function (err, count) {
									/*console.log("err === ",err);
	        console.log("count === ",count);*/
									if (err) res.json({ status: true, notifications: 0 });else res.json({ status: true, notifications: count });
								});
							} else res.json({ status: true, notifications: 0 });
						} catch (e) {
							console.log("e in roomChatNotifications inner === ", e);
							res.json({ status: false, error: "Internal server error." });
						}
					});
				} else if (person == null) {
					res.json({ status: false, error: "Invalid request.", errorCode: 208 });
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				console.log("error in roomChatNotifications", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	/**
	* @Function Name: "clearRoomChat",
	* @Purpose: "To delete the room chat data.",
	* @Request roomKey: roomKey,
	* @Response Object: Success- {status : true, message }, Failure- {status : false, error},
	* @Author: "Pradeep Yadav"
	*/
	function clearRoomChat(req, res) {
		// Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.body.roomKey) {
					_room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(req.body.roomKey) }).exec(function (roomErr, roomRes) {
						try {
							if (roomErr) {
								res.json({ status: false, error: roomErr.message });
							} else if (roomRes && roomRes._id) {
	
								_chat2.default.find({ sentToRoom: roomRes._id }).exec(function (chatErr, chatData) {
									if (chatErr) res.json({ status: false, error: chatErr.message });else {
										//Async.forEachOf iteratee to each item in chatData, parallel
										async.forEachOf(chatData, function (data, key, callback) {
											if (data.messageType != 'IMG' || data.messageType != 'VIDEO' || data.messageType != 'FILE') {
												callback();
											} else {
												//Function calling for deleting files from uploads folder
												deleteFilesFromDest(data, function (delErr, delRes) {
													if (delErr) callback(delErr);else callback();
												});
											}
										}, function (err) {
											if (err) {
												console.log("err-- ", err);
												res.json({
													status: false,
													error: err
												});
											} else {
												_chat2.default.remove({ sentToRoom: roomRes._id }).exec(function (err, count) {
													if (err) res.json({ status: false, error: err.message });else {
														_chat2.default.find({ sentToRoom: roomRes._id }).exec(function (chatErr, chatData) {
															if (chatErr) {
																res.json({ status: false, error: chatErr.message });
															} else {
																res.json({ status: true, data: chatData, message: "Room Chat cleared successfully." });
															}
														});
													}
												});
											}
										});
									}
								});
							} else res.json({ status: false, error: "Invalid room!" });
						} catch (e) {
							console.log("e in roomChatNotifications inner === ", e);
							res.json({ status: false, error: "Internal server error." });
						}
					});
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				console.log("error in roomChatNotifications", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	function deleteFilesFromDest(doc, callback) {
		try {
			// console.log("doc---", doc);
			var status = false;
	
			//Verifying if document has fileType link or not
			var path = process.env.PWD + "/uploads/";
	
			//Path for original file
			var dest = path + doc.fileName;
	
			var fileExist = fs.existsSync(dest);
	
			if (fileExist == true) {
	
				//Remove the original uploaded file
				fs.unlink(dest, function (err, result) {
					if (err) {
						console.log("Error in original file deletion", err);
						status = false;
						callback(err);
					} else {
						status = true;
	
						//For finding extension of filename
						var ext = doc.fileName.substr(doc.fileName.lastIndexOf(".") + 1);
	
						//Verifying if extension is pdf or not
						if (ext != "pdf" && ext != "gif" && ext != "wav" && ext != 'mp3' && ext != 'wmv' && ext != 'mp4' && ext != 'mkv' && ext != 'zip') {
	
							//Filename for file converted to pdf
							var pdfFileName = doc.fileName.substring(0, doc.fileName.lastIndexOf(".")) + ".pdf";
	
							//Path for converted file
							var _dest = path + pdfFileName;
	
							var _fileExist = fs.existsSync(_dest);
	
							if (_fileExist == true) {
	
								//Remove the converted upload file
								fs.unlink(_dest, function (err, result) {
									if (err) {
										console.log("Error in converted file deletion", err);
										status = false;
										callback(err);
									} else {
										status = true;
										callback();
									}
								});
							} else {
								status = true;
								callback();
							}
						} else {
							callback(err);
						}
					}
				});
			} else {
				status = true;
				callback();
			}
		} catch (e) {
			console.log("error in deleteFilesFromDest", e);
			res.json({ status: false, error: "Internal server error." });
		}
	}
	
	function exportRoomChat(req, res) {
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				// for room chat data
				_room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(req.params.roomkey) }).exec(function (roomErr, roomRes) {
					if (roomErr) {
						res.json({ status: false, error: roomErr.message });
					} else if (roomRes && roomRes._id) {
						var query = _chat2.default.find({ sentToRoom: roomRes._id }, { 'sentBy.firstname': 1, messageType: 1, message: 1, createdOn: 1 });
						query.populate('sentBy', 'firstname lastname email profile.profileImage').sort({ createdOn: 1 }).exec(function (e, doc1) {
							if (e) {
								res.json({ status: false, error: e.message });
							} else if (doc1 && doc1.length > 0) {
								var inputArray = [];
								doc1.forEach(function (item) {
									if (item.messageType === 'FILE') item.message = '<attachment>';
									var localTime = moment(item.createdOn, "x").tz(_config2.default.mail_timezone.zone).format("YYYY-MM-DD hh:mm A");
									//console.log("createdOn", localTime);
									var obj = {
										message: item.message,
										sentBy: item.sentBy.firstname + ' ' + item.sentBy.lastname,
										createdOn: localTime + ' (' + _config2.default.mail_timezone.code + ') '
									};
									inputArray.push(obj);
								});
								exportUsersData(inputArray, function (error, filename) {
									if (filename != null) {
										res.json({
											status: true,
											fileName: filename
										});
									} else {
										res.json({
											status: false,
											error: error
										});
									}
								});
								// console.log('result',inputArray);
								// 	res.json({ status: true, data: inputArray });
							} else res.json({ status: true, data: [] });
						});
					} else res.json({ status: false, error: "Invalid room" });
				});
			} catch (e) {
				console.log("error in export room chat", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	function exportUsersData(exportData, callback) {
	
		try {
			var timeStamp = new Date().getTime();
			var invertedRole = _.invert();
			var gender = "profile.gender";
			//For converting exportData to excel using export-to-excel package and creating unique filenames accoriding to timestamp
			var fileName = exportToExcel.exportXLSX({
				filename: 'RoomChat' + '_' + timeStamp,
				sheetname: 'Sheet1',
				title: [{
					"fieldName": "sentBy",
					"displayName": "Sender",
					"cellWidth": 30
				}, {
					"fieldName": "message",
					"displayName": "Message",
					"cellWidth": 50
				}, {
					"fieldName": "createdOn",
					"displayName": "Sent At",
					"cellWidth": 50
				}],
				data: exportData
			});
	
			//Default destination of exported excel sheet i.e root
			var dest = process.env.PWD + "/" + fileName;
	
			//New destination for exported excel sheet i.e public
			var newDest = process.env.PWD + "/public/" + fileName;
	
			//For copying exported excel sheet from default destination to new destination
			fs.createReadStream(dest).pipe(fs.createWriteStream(newDest));
	
			//Deleting exported excel sheet from default destination
			fs.unlink(dest, function (err, result) {
				if (err) {
					callback(err.message, null);
					// res.json({ status: false, error: err.message });
				} else {
	
					callback(null, fileName);
					// }
				}
			});
		} catch (e) {
			console.log('error in exportRoomChat', e);
			callback("Internal server error.", null);
		}
	}

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
			value: true
	});
	exports.contactRequest = undefined;
	exports.addContact = addContact;
	exports.contactResponse = contactResponse;
	exports.getMyContacts = getMyContacts;
	exports.fetchMatchedUsers = fetchMatchedUsers;
	exports.sendRequest = sendRequest;
	exports.getContacts = getContacts;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7);
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	var validator = __webpack_require__(12);
	
	
	/**
	* @Object Name: "contactRequest",
	* @Purpose: "Maintain the contacts status.",
	* @Author: "Prudhvi"
	*/
	var contactRequest = exports.contactRequest = {
			Requested: 0,
			Accept: 1,
			Request: 2,
			Reject: 3
	
			/**
	  * @Function Name: "addContact",
	  * @Purpose: "Add new user to my contacts.",
	  * @Request Object: data : { userId },
	  * @Response Object: Success- {status : true, data : contacts, message }, Failure- {status : false, error},
	  * @Author: "Prudhvi"
	  */
	};function addContact(req, res) {
	
			// Varifying request is valid or not
			(0, _authorization.checkValidRequest)(req.headers, function (person) {
					try {
							if (person != null && req.body.data && req.body.data.userId && mongoose.Types.ObjectId.isValid(req.body.data.userId)) {
									var objEntity = {
											uid: req.body.data.userId,
											userId: person._id,
											status: contactRequest.Requested
									};
	
									// add myid(current user) into userId contacts with status Requested
									sendRequest(objEntity, function (err, result) {
											if (err != null) res.json({ status: false, error: err });else if (result == 'SENT') {
	
													// Request sent successfully
													var obj = {
															uid: person._id,
															userId: req.body.data.userId,
															status: contactRequest.Request
													};
	
													// add userId into my(current user) contacts with status Request
													sendRequest(obj, function (error, response) {
															if (error != null) res.json({ status: false, error: error });else if (response == 'SENT') {
																	if (req.body.data.from && req.body.data.from == "PERSONAL") {
																			_users2.default.findOne({ _id: person._id }, function (usererr, user) {
																					if (user) res.json({ status: true, data: user, message: "Request sent successfully." });else res.json({ status: false });
																			});
																	} else {
																			// Request sent successfully
																			getContacts(person._id, function (contacterr, contactdoc) {
																					if (contacterr) res.json({ status: false });else res.json({ status: true, data: contactdoc, message: "Request sent successfully." });
																			});
																	}
															} else if (response == 'EXIST') {
																	if (req.body.data.from && req.body.data.from == "PERSONAL") {
																			_users2.default.findOne({ _id: person._id }, function (usererr, user) {
																					if (user) res.json({ status: true, data: user, message: "Request sent successfully." });else res.json({ status: false });
																			});
																	} else {
																			// Request sent user already in contacts list
																			getContacts(person._id, function (contacterr, contactdoc) {
																					if (contacterr) res.json({ status: false });else res.json({ status: true, data: contactdoc, message: "Already in contact list." });
																			});
																	}
															}
													});
											} else if (result == 'EXIST') {
													if (req.body.data.from && req.body.data.from == "PERSONAL") {
															_users2.default.findOne({ _id: person._id }, function (usererr, user) {
																	if (user) res.json({ status: true, data: user, message: "Request sent successfully." });else res.json({ status: false });
															});
													} else {
	
															// Request sent user already in contacts list
															getContacts(person._id, function (contacterr, contactdoc) {
																	if (contacterr) res.json({ status: false });else res.json({ status: true, data: contactdoc, message: "Already in contact list." });
															});
													}
											}
									});
							} else res.json({ status: false, error: "Invalid request." });
					} catch (e) {
							console.log("error in addContact ", e);
							res.json({ status: false, error: "Internal server error." });
					}
			});
	}
	
	/**
	* @Function Name: "contactResponse",
	* @Purpose: "Accept or reject the contact request.",
	* @Request Object: data : { userId, response },
	* @Response Object: Success- {status : true, data : contacts, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function contactResponse(req, res) {
			var header = req.headers;
	
			// Varifying request is valid or not
			(0, _authorization.checkValidRequest)(header, function (person) {
					try {
							if (person != null && req.body.data && req.body.data.userId && mongoose.Types.ObjectId.isValid(req.body.data.userId)) {
									var query = null;
									var userQuery = null;
									var message = void 0;
									var obj = req.body.data;
	
									// if user accept the request
									if (obj.response == contactRequest.Accept) {
											query = _users2.default.update({ _id: mongoose.Types.ObjectId(person._id), "contacts._id": mongoose.Types.ObjectId(obj.userId) }, { $set: { "contacts.$.status": obj.response } });
											userQuery = _users2.default.update({ _id: mongoose.Types.ObjectId(obj.userId), "contacts._id": mongoose.Types.ObjectId(person._id) }, { $set: { "contacts.$.status": obj.response } });
											message = 'Request Accepted successfully.';
									} else if (obj.response == contactRequest.Reject) {
	
											// if user reject the request
											query = _users2.default.update({ _id: mongoose.Types.ObjectId(person._id) }, { $pull: { "contacts": { _id: obj.userId } } });
											userQuery = _users2.default.update({ _id: mongoose.Types.ObjectId(obj.userId) }, { $pull: { "contacts": { _id: person._id } } });
											message = 'Request Rejected successfully.';
									}
									if (query != null) {
											query.exec(function (err, response) {
													if (err) {
															console.log("err === ", err);
															res.json({ status: false, error: err });
													} else {
															userQuery.exec(function (error, result) {
																	if (req.body.data.from && req.body.data.from == "PERSONAL") {
																			_users2.default.findOne({ _id: person._id }, function (usererr, user) {
																					if (user) res.json({ status: true, data: user, message: message });else res.json({ status: false });
																			});
																	} else {
	
																			// get all my contacts
																			getContacts(person._id, function (contacterr, contactdoc) {
																					if (contacterr) {
																							console.log("contacterr === ", contacterr);
																							res.json({ status: false });
																					} else res.json({ status: true, data: contactdoc, message: message });
																			});
																	}
															});
													}
											});
									} else res.json({ status: false, error: "Invalid request." });
							} else res.json({ status: false, error: "Invalid request." });
					} catch (e) {
							console.log("error in contactResponse", e);
							res.json({ status: false, error: "Internal server error." });
					}
			});
	}
	
	/**
	* @Function Name: "getMyContacts",
	* @Purpose: "Accept or reject the contact request.",
	* @Request Object: null,
	* @Response Object: Success- {status : true, data : contacts, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function getMyContacts(req, res) {
			var header = req.headers;
	
			// Varifying request is valid or not
			(0, _authorization.checkValidRequest)(header, function (person) {
					try {
							if (person != null) {
	
									// fetch my contacts
									getContacts(person._id, function (contacterr, contactdoc) {
											if (contacterr) {
													res.json({ status: false, error: contacterr });
											} else {
													res.json({ status: true, data: contactdoc });
											}
									});
							} else res.json({ status: false, error: "Invalid request." });
					} catch (e) {
							console.log("error in getMyContacts", e);
							res.json({ status: false, error: "Internal server error." });
					}
			});
	}
	
	/**
	* @Function Name: "fetchMatchedUsers",
	* @Purpose: "Accept or reject the contact request.",
	* @Request Object: null,
	* @Response Object: Success- {status : true, data : user_record }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function fetchMatchedUsers(req, res) {
			var header = req.headers;
	
			// Varifying request is valid or not
			(0, _authorization.checkValidRequest)(header, function (person) {
					try {
							if (person != null && req.params.input) {
									// fetch matched user record
									var query = _users2.default.findOne({ _id: { $ne: person._id }, email: (0, _slashesActions.addSlash)(req.params.input), userStatus: 'Active' });
									query.select('firstname lastname email profile.profileImage').exec(function (err, result) {
											if (err) {
													console.log("error--", err);
													res.json({ status: false, error: "Unauthorized user." });
											} else if (result && result._id) res.json({ status: true, data: [result] });else res.json({ status: false, error: "No user found." });
									});
							} else res.json({ status: false, error: "Invalid request." });
					} catch (e) {
							console.log("error in getMyContacts", e);
							res.json({ status: false, error: "Internal server error." });
					}
			});
	}
	
	/*---------------------  contacts callback functions ----------------------*/
	
	/**
	* @Function Name: "sendRequest",
	* @Purpose: "update contacts field in user record.",
	* @Request Object: data : { uid, userId, status },
	* @Response Object: Success- { null, EXIST/SENT }, Failure- { error, null},
	* @Author: "Prudhvi"
	*/
	function sendRequest(obj, cb) {
	
			try {
	
					// get user contacts
					var findQuery = _users2.default.findOne({ _id: mongoose.Types.ObjectId(obj.uid) }).select('contacts');
					findQuery.exec(function (err, doc) {
							if (err) cb(err, null);
	
							// check user have contacts or not if he have go inside else insert into contacts
							else if (doc && doc.contacts && doc.contacts.length > 0) {
	
											/*check user already is there in contacts list 
	          if already have send response as "EXIST" else add it to contacts*/
											var index = _.findIndex(doc.contacts, function (o) {
													return o._id == obj.userId;
											});
											if (index < 0) {
													_users2.default.update({ _id: mongoose.Types.ObjectId(obj.uid) }, { $push: { contacts: { _id: mongoose.Types.ObjectId(obj.userId), status: obj.status } } }, { runValidators: true }, function (savederr, saveddoc) {
															if (savederr) cb(savederr, null);else cb(null, 'SENT');
													});
											} else cb(null, 'EXIST');
									} else {
	
											// first add contact
											_users2.default.update({ _id: mongoose.Types.ObjectId(obj.uid) }, { $set: { contacts: [{ _id: mongoose.Types.ObjectId(obj.userId), status: obj.status }] } }, { runValidators: true }, function (savederr, saveddoc) {
													if (savederr) cb(savederr, null);else cb(null, 'SENT');
											});
									}
					});
			} catch (e) {
					console.log("error in sendRequest", e);
					cb("Internal server error.", null);
			}
	}
	
	/**
	* @Function Name: "getContacts",
	* @Purpose: "update contacts field in user record.",
	* @Request Object: id,
	* @Response Object: Success- { null, contacts }, Failure- { error, null},
	* @Author: "Prudhvi"
	*/
	function getContacts(id, cb) {
			try {
					// fetch all my contacts with first name, last name, email and profile image
					var query = _users2.default.findOne({ _id: mongoose.Types.ObjectId(id) }).populate('contacts._id', 'firstname lastname email profile.profileImage', { userStatus: 'Active' });
					query.exec(function (err, doc) {
							if (err) {
									cb(err, null);
							} else {
									doc.contacts.sort(function (u1, u2) {
											return u1.status - u2.status;
									});
									cb(null, doc.contacts);
							}
					});
			} catch (e) {
					console.log("error in getContacts ", e);
					cb("Internal server error.", null);
			}
	}

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
			value: true
	});
	exports.createHandraise = createHandraise;
	exports.updateHandraise = updateHandraise;
	exports.fetchHandraiseData = fetchHandraiseData;
	exports.getHandraiseQues = getHandraiseQues;
	exports.deleteHandraise = deleteHandraise;
	exports.saveHandraiseAnswer = saveHandraiseAnswer;
	exports.getAnswers = getAnswers;
	exports.saveReply = saveReply;
	exports.getReplies = getReplies;
	exports.fetchHandraiseQue = fetchHandraiseQue;
	exports.fetchAnswers = fetchAnswers;
	exports.fetchReplies = fetchReplies;
	
	var _handraise = __webpack_require__(106);
	
	var _handraise2 = _interopRequireDefault(_handraise);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var _ = __webpack_require__(7);
	
	/**
	* @Function Name: "createHandraise",
	* @Purpose: "To create new package.",
	* @Request Object: data : { question, roomKey },
	* @Response Object: Success- {status : true, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function createHandraise(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.body.data && req.body.data.roomKey) {
											var obj = req.body.data;
	
											// valid room or not
											var roomQuery = _room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(obj.roomKey) });
											roomQuery.exec(function (roomerr, room) {
													if (roomerr) {
															res.json({ status: false, error: "Invalid room." });
													} else if (room) {
															obj["roomId"] = room._id;
															obj["author"] = person._id;
															obj["createdAt"] = moment().utc().toDate();
															obj["modifiedAt"] = moment().utc().toDate();
															delete obj['roomKey'];
	
															// create new handraise question
															var objEntity = new _handraise2.default(obj);
															objEntity.save(function (err, doc) {
																	if (err) {
																			console.log("err === ", err);
																			res.json({ status: false, error: err });
																	} else if (doc) res.json({ status: true, message: "Posted successfully" });else res.json({ status: false, error: "Internal server error." });
															});
													} else res.json({ status: false, error: "Invalid room" });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in createHandraise inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in createHandraise ", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	* @Function Name: "updateHandraise",
	* @Purpose: "To create new package.",
	* @Request Object: params : id, data : { question, roomKey },
	* @Response Object: Success- {status : true, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function updateHandraise(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.body.data && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
											var obj = req.body.data;
	
											// valid room or not
											var roomQuery = _room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(obj.roomKey) });
											roomQuery.exec(function (roomerr, room) {
													if (roomerr) {
															res.json({ status: false, error: "Invalid room." });
													} else if (room) {
															delete obj['roomKey'];
	
															var recordId = mongoose.Types.ObjectId(req.params.id);
	
															// check valid handraise or not
															var handQuery = _handraise2.default.findOne({ _id: recordId });
															handQuery.exec(function (handerr, question) {
																	if (handerr) {
																			console.log("handerr ==== ", handerr);
																			res.json({ status: false, error: handerr });
																	} else if (question) {
	
																			// check created by current user or not
																			if (person._id.str == question.author.str) {
																					obj['modifiedAt'] = moment().utc().toDate();
	
																					_handraise2.default.update({ _id: recordId }, { $set: obj }, { runValidators: true }, function (err, doc) {
																							if (err) res.json({ status: false, error: err });else if (doc) res.json({ status: true, message: "Posted successfully" });else res.json({ status: false, error: "Internal server error." });
																					});
																			} else res.json({ status: false, error: "Access denied." });
																	} else res.json({ status: false, error: "Invalid handraise." });
															});
													} else res.json({ status: false, error: "Invalid room" });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("error in updateHandraise inner ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in updateHandraise", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : fetchHandraiseData
	*  @Purpose : Fetch the list of questions with auther name
	*  @Request Object : params : { key: 'room key', limit: 'count'}
	*  @Response Object : Success - Success message, List data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function fetchHandraiseData(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.key && req.params.limit) {
	
											//gets the document of room based on roomKey
											var roomQuery = _room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(req.params.key) });
											roomQuery.exec(function (roomerr, room) {
													if (roomerr) {
															//console.log("roomerr ==== ",roomerr);
															res.json({ status: false, error: "Invalid room." });
													} else if (room) {
	
															//question list object
															var objEntity = {
																	roomId: room._id,
																	limit: Number(req.params.limit)
	
																	//function with object and call back as its parameter to get question list
															};fetchHandraiseQue(objEntity, function (getError, getData, count) {
																	if (getError == null) {
	
																			//successfull response if error is null
																			res.json({ status: true, data: getData, count: count });
																	} else {
	
																			//failed response if call back returns any query error
																			res.json({ status: false, error: getError });
																	}
															});
													} else res.json({ status: false, error: "Invalid room." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in fetchHandraiseData inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in fetchHandraiseData", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : getHandraiseQues
	*  @Purpose : Fetch the question based on Id
	*  @Request Object : params : { id : handraise Id}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function getHandraiseQues(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
	
											//find the question and auther details based on _id
											var query = _handraise2.default.findOne({ _id: req.params.id }).populate('author', '_id firstname lastname profile.profileImage');
	
											query.lean().exec(function (err, doc) {
													if (err) {
															res.json({ status: false });
													} else if (doc) {
															doc['anscount'] = doc.answers ? doc.answers.length : 0;
															delete doc['answers'];
															res.json({ status: true, data: doc });
													} else res.json({ status: false });
											});
									} else res.json({ status: false });
							} catch (e) {
									console.log("e in getHandraiseQues inner === ", e);
									res.json({ status: false });
							}
					});
			} catch (e) {
					console.log("error in getHandraiseQues", e);
					res.json({ status: false });
			}
	}
	
	/**
	*  @Function name : deleteHandraise
	*  @Purpose : Function deletes question based on rocordId
	*  @Request Object : param : { id: 'handraise Id' }
	*  @Response Object : Success - Message, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function deleteHandraise(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
											var recordId = mongoose.Types.ObjectId(req.params.id);
	
											//check for user Id in collection
											var handQuery = _handraise2.default.findOne({ _id: recordId });
											handQuery.exec(function (handerr, question) {
													if (handerr) res.json({ status: false, error: "Invalid Question." });else if (question) {
															if (question.author.str == person._id.str) {
	
																	//remove question from colletion based on recordId
																	var removeQuery = _handraise2.default.remove({ _id: recordId });
																	removeQuery.exec(function (err, doc) {
																			if (err) res.json({ status: false, error: err });else {
	
																					//successfull resposne
																					res.json({ status: true });
																			}
																	});
															} else res.json({ status: false, error: "Access denied." });
													} else res.json({ status: false, error: "Invalid handraise." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in deleteQuestion inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in deleteHandraise", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : saveHandraiseAnswer
	*  @Purpose : Function saves the answer against a question
	*  @Request Object : params : {id}, data : { }
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function saveHandraiseAnswer(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id) {
											var recordId = mongoose.Types.ObjectId(req.params.id);
	
											//query to validate Id
											var handQuery = _handraise2.default.findOne({ _id: recordId });
											handQuery.exec(function (handerr, question) {
													if (handerr) res.json({ status: false, error: "Invalid Question." });else if (question) {
															var updateQuery = null;
															var obj = req.body.data;
															obj['author'] = person._id;
															obj['answerAt'] = moment().utc().toDate();
	
															//if array has data then add in existing array 
															if (question.answers && question.answers.length > 0) {
																	updateQuery = _handraise2.default.update({ _id: recordId }, { $push: { answers: obj } }, { runValidators: true });
															} else {
																	updateQuery = _handraise2.default.update({ _id: recordId }, { $set: { answers: [obj] } }, { runValidators: true });
															}
															if (updateQuery != null) {
																	updateQuery.exec(function (err, doc) {
																			if (err) res.json({ status: false, error: err });else if (doc) {
	
																					// updated succesfully
																					res.json({ status: true });
																			} else res({ status: false, error: "Internal server error, Please try again." });
																	});
															} else res.json({ status: false, error: "Internal server error." });
													} else res.json({ status: false, error: "Invalid Question." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in saveHandraiseAnswer inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in saveHandraiseAnswer", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : getAnswers
	*  @Purpose : Fetch the answers based on Handraise Id and count of answers
	*  @Request Object : data : { _Id: 'handraise Id', limit: no of answers}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function getAnswers(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id && req.params.limit) {
											var obj = {
													_id: req.params.id,
													limit: Number(req.params.limit)
											};
	
											// a function send an obj and callback as its parameters to get answers data
											fetchAnswers(obj, function (geterr, getdata, count) {
													if (getdata) {
	
															// response data
															res.json({ status: true, data: getdata, count: count });
													} else res.json({ status: false, error: "Invalid request." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in getAnswers inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in getAnswers", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : saveReply
	*  @Purpose : Function saves reply on answers as per "replyOn" Id
	*  @Request Object : params : id, data : { comment:'comment on answer', replyOn : 'answer Id'}
	*  @Response Object : Success - Message, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function saveReply(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id) {
											var recordId = mongoose.Types.ObjectId(req.params.id);
											var obj = req.body.data;
											obj['author'] = person._id;
											obj['replyAt'] = moment().utc().toDate();
											//query to validate Id
											var handQuery = _handraise2.default.findOne({ _id: recordId });
											handQuery.exec(function (handerr, question) {
													if (handerr) res.json({ status: false, error: "Invalid Question." });else if (question) {
															var updateQuery = null;
	
															//if array has value then add in the array
															if (question.replies && question.replies.length > 0) {
																	updateQuery = _handraise2.default.update({ _id: recordId }, { $push: { replies: obj } }, { runValidators: true });
															} else {
																	updateQuery = _handraise2.default.update({ _id: recordId }, { $set: { replies: [obj] } }, { runValidators: true });
															}
															updateQuery.exec(function (err, doc) {
																	if (err) {
																			res.json({ status: false, error: err });
																	} else {
	
																			//successfull response
																			res.json({ status: true });
																	}
															});
													} else res.json({ status: false, error: "Invalid Question." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in saveReply inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in saveReply", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/**
	*  @Function name : getReplies
	*  @Purpose : Fetch replies on particular answer
	*  @Request Object : data : { _Id: 'handraise Id', comment:'comment on answer' author : 'user Id', replyOn : 'answer Id'}
	*  @Response Object : Success - Message, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function getReplies(req, res) {
			try {
	
					// Varifying request is valid or not
					(0, _authorization.checkValidRequest)(req.headers, function (person) {
							try {
									if (person != null && req.params.id && req.params.replyOn && mongoose.Types.ObjectId.isValid(req.params.id)) {
											var obj = {
													_id: req.params.id,
													replyOn: req.params.replyOn
											};
	
											//inner function to get replies and count as callback params 
											fetchReplies(obj, function (geterr, getdata, count) {
													if (getdata) {
	
															//response data
															res.json({ status: true, data: getdata, count: count });
													} else res.json({ status: false, error: "Invalid request." });
											});
									} else res.json({ status: false, error: "Invalid request." });
							} catch (e) {
									console.log("e in getReplies inner === ", e);
									res.json({ status: false, error: "Internal server error." });
							}
					});
			} catch (e) {
					console.log("error in getReplies", e);
					res.json({ status: false, error: "Internal server error." });
			}
	}
	
	/*-------------------------- callback functions -------------------------*/
	
	/**
	*  @Function name : fetchHandraiseQue
	*  @Purpose : Fetch the question based on Id
	*  @Request Object : data : { roomId: 'room Id', limit: 'no of questions'}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function fetchHandraiseQue(obj, cb) {
			try {
					var _c = 0;
					if (obj.roomId && obj.roomId != '') {
	
							//based on room Id author info gets populated
							var query = _handraise2.default.find({ roomId: obj.roomId }).populate('author', '_id firstname lastname profile.profileImage').sort({ 'createdAt': -1 }).limit(obj.limit);
							query.lean().exec(function (err, doc) {
									if (err) {
											console.log("err ======= ", err);
											cb(err, null, _c);
									} else {
	
											//loop for submitted answers under questions 
											_.each(doc, function (data) {
													data['anscount'] = data && data.answers ? data.answers.length : 0;
											});
	
											//count of questions
											_handraise2.default.count({ roomId: obj.roomId }).exec(function (err, count) {
													delete doc['answers'];
	
													//callback returning parameters
													cb(null, doc, count);
											});
									}
							});
					} else {
							cb(null, null, _c);
					}
			} catch (e) {
					console.log("error in fetchHandraiseQue", e);
					cb(null, null, c);
			}
	}
	
	/**
	*  @Function name : fetchAnswers
	*  @Purpose : Fetch the answers based on Id as parameters of callback function
	*  @Request Object : obj : { _id: 'question id', limit: no of answers}
	*  @Response Object : Success - data, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function fetchAnswers(obj, cb) {
			var c = 0;
	
			try {
					//based on Id get the details of answers author
					var query = _handraise2.default.findOne({ _id: obj._id }).populate('answers.author', '_id firstname lastname profile.profileImage').populate('replies.author', '_id firstname lastname profile.profileImage');
					query.lean().exec(function (err, doc) {
							if (err) {
									console.log("err ======= ", err);
									cb(err, null, c);
							} else if (doc) {
									var count = doc.answers ? doc.answers.length : 0;
									//var data = doc.toObject();
	
									//set the start value from where answers should be shown  
									var start = count <= obj.limit ? 0 : count - obj.limit;
	
									//sorting of answers based on submitted time
									doc.answers.sort(function (m1, m2) {
											return m1.answerAt - m2.answerAt;
									});
	
									//_.slice returns an array of answers upto index that count value holds   
									var newData = _.slice(doc.answers, start, count);
	
									if (newData && newData.length > 0) {
											var processReplies = function processReplies() {
													var item = newData[_c2 - 1];
													//returns array of reply that matches replyOn(answer) Id
													var replies = _.remove(doc.replies, function (n) {
															return n.replyOn._str == item._id._str;
													});
	
													//total number of count 
													var replycount = replies && replies.length > 0 ? replies.length : 0;
	
													//sorting of replies based on submission time(date)
													replies.sort(function (m1, m2) {
															return m1.replyAt - m2.replyAt;
													});
													item['replies'] = replies;
													item['replycount'] = replycount;
													withreplies.push(item);
													_c2 = _c2 - 1;
													if (_c2 > 0) {
															processReplies();
													} else {
															// done
															cb(null, withreplies, count);
													}
											};
	
											var withreplies = [];
											var _c2 = newData.length;
	
											processReplies();
									} else {
											cb(null, newData, count);
									}
							}
					});
			} catch (e) {
					console.log("error in fetchAnswers", e);
					cb(null, null, c);
			}
	}
	
	/**
	*  @Function name : fetchReplies
	*  @Purpose : Fetch replies on particular answer
	*  @Request Object : obj : { _Id: 'handraise Id', limit'}, callback : cb
	*  @Response Object : Success - Message, Failure - Error message
	*  @Author : Najib Hasnain
	*/
	function fetchReplies(obj, cb) {
			var c = 0;
			try {
					if (obj._id && obj._id != '') {
	
							var query = _handraise2.default.findOne({ _id: obj._id }).populate('replies.author', '_id firstname lastname profile.profileImage');
							query.lean().exec(function (err, doc) {
									if (err) {
											console.log("err ======= ", err);
											cb(err, null, c);
									} else if (doc) {
	
											//returns array of reply that matches replyOn(answer) Id
											var replies = _.remove(doc.replies, function (n) {
													return n.replyOn == obj.replyOn;
											});
	
											//total number of count 
											var count = replies && replies.length > 0 ? replies.length : 0;
	
											//sorting of replies based on submission time(date)
											replies.sort(function (m1, m2) {
													return m1.replyAt - m2.replyAt;
											});
	
											//reply data as callback params
											cb(null, replies, count);
									}
							});
					} else {
							cb(null, null, c);
					}
			} catch (e) {
					console.log("error in fetchReplies", e);
					cb(null, null, c);
			}
	}

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.saveLDAPSettings = saveLDAPSettings;
	exports.getLDAPSettings = getLDAPSettings;
	exports.deleteLdapSettings = deleteLdapSettings;
	
	var _settings = __webpack_require__(107);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	
	/**
	* @Function Name: "saveLDAPSettings",
	* @Purpose: "To save ldap settings into settings document.",
	* @Request Object: LDAPSettingsData : { uid : "userID"},
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function saveLDAPSettings(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.body.LDAPSettingsData && req.body.LDAPSettingsData.data) {
	        if (person.role == _adminUser.Roles.Superadmin) {
	          var reqObj = req.body.LDAPSettingsData.data;
	          if (!reqObj.domain || validator.isEmpty(reqObj.domain)) {
	            res.json({ status: false, error: "Domain name required." });
	          } else if (!reqObj.baseDn || validator.isEmpty(reqObj.baseDn)) {
	            res.json({ status: false, error: "Base DN is required." });
	          } else if (!reqObj.url || validator.isEmpty(reqObj.url)) {
	            res.json({ status: false, error: "Url is required." });
	          } else if (!reqObj.bindCn || validator.isEmpty(reqObj.bindCn)) {
	            res.json({ status: false, error: "Bind CN is required." });
	          } else {
	            var obj = {
	              ldapSettings: {
	                domain: reqObj.domain,
	                baseDn: reqObj.baseDn,
	                url: reqObj.url,
	                bindCn: reqObj.bindCn,
	                bindPassword: reqObj.bindPassword,
	                forceLogin: reqObj.forceLogin
	              }
	            };
	            // let logObj = {
	            //   logType : 'LDAP Settings',
	            //   actionType : 'Updated',
	            //   actionTime : moment().utc().toDate(),
	            //   uid : person._id,
	            //   details : {
	            //     remoteAddress : req.connection.remoteAddress,
	            //     userAgent : req.headers['user-agent']
	            //   }
	            // }
	
	            //Fetching the details of ldapsettings
	            _settings2.default.findOne({ "createdBy": person._id }, function (error, result) {
	              if (error) {
	                res.json({ status: false, error: error.message });
	              } else if (result) {
	                obj.ldapSettings['modifiedAt'] = moment().utc().toDate();
	
	                // Update Ldap settings if settings document already exist in the settings collection
	                _settings2.default.update({ "createdBy": person._id }, { $set: obj }, { runValidators: true }, function (err, response) {
	                  if (err) {
	                    res.json({ staus: false, error: err.message });
	                  } else {
	                    res.json({ status: true, data: obj.ldapSettings, message: "Updated successfully." });
	                    // createLog(logObj, function(status) {
	                    //   if(status) {
	                    //     // console.log(status);
	                    //   }
	                    // });
	                  }
	                });
	              } else {
	                obj['createdBy'] = person._id;
	                var objSettings = new _settings2.default(obj);
	
	                //Create Ldap settings in the settings collection
	                objSettings.save(function (err, response) {
	                  if (err) {
	                    console.log("err === ", err);
	                    res.json({
	                      status: false,
	                      error: err.message
	                    });
	                  } else if (response) {
	                    res.json({
	                      status: true,
	                      data: obj.ldapSettings,
	                      message: "Created successfully."
	                    });
	                    // createLog(logObj, function(status) {
	                    //   if(status) {
	                    //     // console.log(status);
	                    //   }
	                    // });
	                  } else res.json({ status: false, error: "Internal server error" });
	                });
	              }
	            });
	          }
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid Request." });
	    } catch (e) {
	      console.log("error in ldapSettings", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "getLDAPSettings",
	* @Purpose: "To Fetch ldap settings into settings document.",
	* @Request Object: : { uid : "userID"},
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function getLDAPSettings(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin) {
	
	          //Fectch SMTP settings from the settings collection
	          _settings2.default.findOne({ "createdBy": person._id, ldapSettings: {
	              $exists: true
	            }
	          }, function (error, result) {
	            if (error) {
	              res.json({ status: false, error: error.message });
	            } else if (result) {
	              res.json({ status: true, data: result.ldapSettings });
	            } else {
	              res.json({ status: false });
	            }
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid Request." });
	    } catch (e) {
	      console.log("error in getldapsettings", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "deleteLdapSettings",
	* @Purpose: "To delete ldap settings into settings collection.",
	* @Request Object: null,
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function deleteLdapSettings(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	
	        //Delete ldap settings from the settings collection
	        _settings2.default.update({
	          "createdBy": person._id
	        }, {
	          $set: {
	            "ldapSettings": {}
	          }
	        }, function (err, deletedData) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else if (deletedData) {
	            res.json({
	              status: true,
	              message: "Deleted successfully"
	            });
	          } else res.json({ status: true, message: "Internal server error, Please try again." });
	        });
	      } else res.json({ status: true, message: "Invalid request" });
	    } catch (e) {
	      console.log("error in deleteLdapSettings", e.message);
	      res.json({
	        status: false,
	        error: "Internal server error"
	      });
	    }
	  });
	}

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.saveLocation = saveLocation;
	exports.updateLocation = updateLocation;
	exports.checkLocationsNameExistance = checkLocationsNameExistance;
	exports.listLocation = listLocation;
	exports.fetchLocation = fetchLocation;
	exports.deleteLocation = deleteLocation;
	
	var _location = __webpack_require__(75);
	
	var _location2 = _interopRequireDefault(_location);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	
	
	/**
	* @Function Name: "saveLocation",
	* @Purpose: "To save location data into location document.",
	* @Request Object: locationData : { uid : "userID", locationId : "locationId"},
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function saveLocation(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.body || !req.body.locationData) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.locationData;
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        //If user have a valid role
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	          obj['corporateId'] = bussinessID;
	          obj['createdBy'] = mongoose.Types.ObjectId(person._id);
	          delete obj["uid"];
	
	          //check for location name existance
	          checkLocationsNameExistance(obj.corporateId, obj.locationName, undefined, function (err, locationStatus) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err
	              });
	            } else if (locationStatus == true) {
	
	              //Create new location
	              _location2.default.create(obj, function (err, doc) {
	                if (err) {
	                  res.json({ status: false, error: err.message });
	                } else if (doc) {
	                  res.json({ status: true, data: doc, message: "Created successfully." });
	
	                  //Log obj which need to be inserted in logger collection
	                  // let logObj = {
	                  //   logType : 'Location',
	                  //   actionType : 'Created',
	                  //   actionTime : moment().utc().toDate(),
	                  //   uid : obj.createdBy,
	                  //   details : {
	                  //     name : obj.locationName,
	                  //     remoteAddress : req.connection.remoteAddress,
	                  //     userAgent : req.headers['user-agent']
	                  //   }
	                  // } 
	
	                  // //Function for creating log on successful creation of location
	                  // createLog(logObj, function(status) {
	                  //   if(status) {
	                  //     // console.log(status);
	                  //   }
	                  // });
	                } else {
	                  res.json({ status: false, error: "Internal server error." });
	                }
	              });
	            }
	          });
	        } else {
	          res.json({ status: false, error: "Access denied." });
	        }
	      }
	    } catch (e) {
	      console.log("Error in save Location", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	*  @Function name : updateLocation
	*  @Purpose : For updating location
	*  @Request Object : locationData : { data : { uid : "user id", corporateId : "corporateId", categoryName: "categoryName", categoryDesc: "categoryDesc", _id: "category id" } }
	*  @Response Object : Success - Success message, location data, Failure - Error message
	*  @Author : "Jyothi"
	*/
	
	function updateLocation(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id) || !req.body || !req.body.locationData) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.locationData;
	
	        //If user has a valid role
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          var locationId = mongoose.Types.ObjectId(req.params.id);
	          obj['updatedBy'] = mongoose.Types.ObjectId(person._id);
	          obj['updatedAt'] = moment().utc().toDate();
	
	          //Fetching the details of location
	          var data = _location2.default.findOne({
	            _id: locationId
	          }).exec(function (err, locationData) {
	
	            //Verifying is data is present or not
	            if (locationData) {
	              if (locationData.createdBy == person._id) {
	
	                //check for location name existance
	                checkLocationsNameExistance(locationData.corporateId, obj.locationName, locationData.createdAt, function (err, locationStatus) {
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: err
	                    });
	                  } else if (locationStatus == true) {
	                    //If data is present then update the location
	                    _location2.default.update({
	                      _id: locationId
	                    }, {
	                      $set: obj
	                    }, function (err, response) {
	                      if (err) {
	                        res.json({
	                          status: false,
	                          error: err.message
	                        });
	                      } else {
	
	                        //Query for sending the updated record to the client
	                        var query = _location2.default.findOne({
	                          _id: locationId
	                        });
	                        query.exec(function (err, doc) {
	                          if (err) {
	                            res.json({
	                              status: false
	                            });
	                          } else {
	                            res.json({
	                              status: true,
	                              data: doc,
	                              message: "Updated successfully."
	                            });
	                          }
	                        });
	                      }
	                    });
	                  }
	                });
	              } else res.json({ status: false, error: "No Such Location Found to update." });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid Location"
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in update location", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : checkLocationsNameExistance
	*  @Purpose : For checking whether the location already exists in db.
	*  @Request Object : cid : corporateId, locationName : locationName, cb
	*  @Response Object : Success - true, Failure - Error message
	*  @Author : Prateek
	*/
	
	function checkLocationsNameExistance(cid, locationName, locationDate1, cb) {
	  try {
	    var slash_search = (0, _slashesActions.addSlash)(locationName);
	    var searchKey = new RegExp(["^", slash_search, "$"].join(""), 'i');
	    var selector = {};
	    selector['corporateId'] = cid;
	    selector['locationName'] = searchKey;
	    _location2.default.find(selector, function (err, locationData) {
	      if (err) {
	        cb(err.message, null);
	      } else {
	        if (!locationData || locationData.length < 1) {
	          cb(null, true);
	        } else if (locationData && locationData.length == 1 && locationDate1 != undefined) {
	          var toBeUpdatedFielddate1 = locationDate1.toString();
	          var locationDate2 = locationData[0].createdAt.toString();
	          if (toBeUpdatedFielddate1 == locationDate2) {
	            cb(null, true);
	          } else {
	            cb('Location already exists with same name, Please try again', null);
	          }
	        } else {
	          cb('Location already exists with same name, Please try again', null);
	        }
	      }
	    });
	  } catch (e) {
	    console.log('error in checkLocationsNameExistance', e);
	    cb("Internal server error, Please try again", null);
	  }
	}
	
	/**
	* @Function Name: "listLocation",
	* @Purpose: "To get location list details based on the userID.",
	* @Request Object: data : { uid : "userID"},
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function listLocation(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page) {
	        res.json({
	          status: false,
	          error: "Invalid request"
	        });
	      } else {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.CRMadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          var queryData = req.query;
	          var selector = person.role == _adminUser.Roles.Superadmin ? {} : { corporateId: bussinessID };
	
	          //If searchKeyword is not empty then create RegExp
	          if (queryData.search && queryData.search != '') {
	            var slash_search = (0, _slashesActions.addSlash)(queryData.search);
	            var searchKey = RegExp(slash_search, 'i');
	            selector['$or'] = [{ 'locationName': { $regex: searchKey } }, { 'description': { $regex: searchKey } }];
	          }
	
	          //Query for fetching complete location data based on selector and skip items based on itemsPerPage on previous page
	          var query = _location2.default.find(selector).limit(Number(queryData.items)).select('corporateId locationName description').skip(Number(queryData.items) * (Number(queryData.page) - 1)).sort({
	            modifiedAt: -1
	          });
	
	          query.populate('corporateId', 'businessName -_id').exec(function (err, result) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              //Query for counting complete location data based on selector
	              _location2.default.count(selector).exec(function (error, count) {
	                // console.log("location data", result);
	                res.json({
	                  status: true,
	                  data: result,
	                  count: count
	                });
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied"
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in list location", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	* @Function Name: "fetchLocation",
	* @Purpose: "To Fetch location details based on the userID.",
	* @Request Object: params : { id : "LocationID"},
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function fetchLocation(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        //Query for finding the location data based on location id
	        var query = _location2.default.findOne({
	          _id: mongoose.Types.ObjectId(req.params.id)
	        });
	        query.populate('corporateId', 'businessName -_id').exec(function (error, doc) {
	          if (error) {
	            res.json({
	              status: false,
	              error: error.message
	            });
	          } else if (doc) {
	            res.json({
	              status: true,
	              data: doc
	            });
	          } else {
	            res.json({
	              status: false,
	              error: "Invalid Location"
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in fetch location", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	* @Function Name: "deleteLocation",
	* @Purpose: "To Delete location details based on the userID.",
	* @Request Object: params : { id: "location id" }
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	function deleteLocation(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying request is valid or not
	      if (person == null || !req.params.id || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	
	          var query = _location2.default.findOne({
	            _id: req.params.id
	          });
	          query.exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              //Delete location from the location document based on locationId
	              var innerQuery = _location2.default.remove({
	                _id: req.params.id
	              });
	              innerQuery.exec(function (err, response) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    message: "Deleted Successfully"
	                  });
	
	                  //Delete location from room collection based on location Id.
	                  var roomLocationQuery = _room2.default.update({}, {
	                    $pull: {
	                      locations: {
	                        locationId: mongoose.Types.ObjectId(req.params.id)
	                      }
	                    }
	                  }, {
	                    multi: true
	                  });
	                  roomLocationQuery.exec(function (err, deleted) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        err: err.message
	                      });
	                    }
	                  });
	                  // let logObj = {
	                  //   logType : 'Location',
	                  //   actionType : 'Deleted',
	                  //   actionTime : moment().utc().toDate(),
	                  //   uid : doc.createdBy,
	                  //   details : {
	                  //     name : doc.locationName,
	                  //     remoteAddress : req.connection.remoteAddress,
	                  //     userAgent : req.headers['user-agent']
	                  //   }
	                  // }  
	                  // createLog(logObj, function(status) {
	                  //   if (status) {
	                  //     // console.log(status);
	                  //   }
	                  // });
	                }
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied"
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in delete location", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.websitePackageSelection = websitePackageSelection;
	exports.websiteEmailValidation = websiteEmailValidation;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _package = __webpack_require__(25);
	
	var _package2 = _interopRequireDefault(_package);
	
	var _cuid = __webpack_require__(26);
	
	var _cuid2 = _interopRequireDefault(_cuid);
	
	var _limax = __webpack_require__(27);
	
	var _limax2 = _interopRequireDefault(_limax);
	
	var _sanitizeHtml = __webpack_require__(28);
	
	var _sanitizeHtml2 = _interopRequireDefault(_sanitizeHtml);
	
	var _md = __webpack_require__(31);
	
	var _md2 = _interopRequireDefault(_md);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForCorporateCreation = _interopRequireWildcard(_emailFunctions);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7);
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	var validator = __webpack_require__(12);
	function websitePackageSelection(req, res) {
		try {
			if (!req.body) {
				res.json({ status: false, error: "Invalid request" });
			} else {
	
				var savingUserObject = {};
				var savingPackageObject = {};
				if (validator.isEmpty(req.body.email)) {
					res.json({ status: false, error: "InValid user." });
				} else {
					_users2.default.findOne({ email: (0, _slashesActions.addSlash)(req.body.email) }, function (errorinFind, alreadyExists) {
						if (errorinFind) {
							res.json({ status: false, error: errorinFind });
						} else if (alreadyExists) {
							res.json({ status: false, error: "Email already existed" });
						} else {
	
							savingUserObject["modifiedAt"] = moment().utc().toDate();
							savingUserObject["dateAdded"] = moment().utc().toDate();
							savingUserObject["password"] = (0, _md2.default)(req.body.password);
							savingUserObject["firstname"] = req.body.firstname;
							savingUserObject["lastname"] = req.body.lastname;
							savingUserObject["email"] = req.body.email;
							savingUserObject["profile.phone"] = req.body.phone;
							savingUserObject["profile.companyid"] = '';
							savingUserObject["profile.position"] = '';
							savingUserObject["profile.dept"] = '';
							savingUserObject["profile.roomid"] = '';
							savingUserObject["modifiedby"] = 'self';
							savingUserObject["createdby"] = 'self';
							savingUserObject['role'] = 2;
	
							var objUser = new _users2.default(savingUserObject);
							_users2.default.create([objUser], function (error, data) {
								if (!error) {
									_users2.default.findOne({ _id: data[0]._id }, function (saveError, doc) {
										if (saveError) {
											//console.log(error);
											res.json({ status: false, error: saveError });
										} else {
											doc.modifiedby = mongoose.Types.ObjectId(doc._id);
											doc.createdby = mongoose.Types.ObjectId(doc._id);
											doc.save();
	
											savingPackageObject['createdBy'] = mongoose.Types.ObjectId(doc._id);
											savingPackageObject['modifiedBy'] = mongoose.Types.ObjectId(doc._id);
											savingPackageObject['createdAt'] = moment().utc().toDate();
											savingPackageObject['modifiedAt'] = moment().utc().toDate();
											savingPackageObject['packageValidity'] = req.body.validity;
											savingPackageObject['packageName'] = req.body.packageName;
											savingPackageObject['packagePrice'] = req.body.packagePrice;
											savingPackageObject['userCount'] = req.body.userCount;
											savingPackageObject['userPresence'] = req.body.userPresence;
											savingPackageObject['serverLocation'] = req.body.serverLocation;
											savingPackageObject['assignedTo'] = mongoose.Types.ObjectId(doc._id);
	
											savingPackageObject['payment_details.order_id'] = req.body.order_id;
											savingPackageObject['payment_details.tracking_id'] = req.body.tracking_id;
											savingPackageObject['payment_details.bank_ref_no'] = req.body.bank_ref_no;
											savingPackageObject['payment_details.order_status'] = req.body.order_status;
											savingPackageObject['payment_details.failure_message'] = req.body.failure_message;
											savingPackageObject['payment_details.card_name'] = req.body.card_name;
											savingPackageObject['payment_details.status_code'] = req.body.status_code;
											savingPackageObject['payment_details.status_message'] = req.body.status_message;
											savingPackageObject['payment_details.currency'] = req.body.currency;
											savingPackageObject['payment_details.card_type'] = req.body.card_type;
											savingPackageObject['payment_details.data_accept'] = req.body.data_accept;
											savingPackageObject['payment_details.card_number'] = req.body.card_number;
											savingPackageObject['payment_details.expiry_month'] = req.body.expiry_month;
											savingPackageObject['payment_details.expiry_year'] = req.body.expiry_year;
											savingPackageObject['payment_details.cvv_number'] = req.body.cvv_number;
											savingPackageObject['payment_details.issuing_bank'] = req.body.issuing_bank;
											savingPackageObject['payment_details.mm_id'] = req.body.mm_id;
											savingPackageObject['payment_details.promo_code'] = req.body.promo_code;
	
											var objEntity = new _package2.default(savingPackageObject);
											objEntity.save(function (err, documents) {
												if (err) {
													res.json({ status: false, error: err });
												} else {
	
													_users2.default.findOne({ _id: mongoose.Types.ObjectId(documents.createdBy) }, function (errinFind, name) {
														if (errinFind) {
															res.json({ status: false, error: errinFind });
														} else {
	
															if (name && name.email) {
																// var exchangeData = {
																//   to : name.email,
																//   whoCreated :name.email,
																//   subject : 'Package Purchased !! Get details',
																//   body : 'Package has been created with '+name.firstname+'. Your order number is '+req.body.order_id +' and password '+req.body.password+'. Kindly Login to your profile and change password.'
																// }
																var exchangeData = {
																	to: name.email,
																	whoCreated: name.email,
																	subject: 'Package Purchased !! Get details',
																	firstname: name.firstname,
																	order_id: req.body.order_id,
																	password: req.body.password
																};
																EmailForCorporateCreation.createCorporateMail(exchangeData);
																res.json({ status: true, message: "Check your mail for detail" });
															} else {
	
																res.json({ status: false, error: "Data saved but Email not sent" });
															}
														}
													});
													//res.json({ status : true, message : "Created successfully." });
												}
											});
											//res.json({ status: true, message : "Updated successfully." });
										}
									});
								} else {
									res.json({ status: false, error: error, message: 'User not created' });
								}
							});
						}
					});
				}
			}
		} catch (error) {
			console.log('error in websitePackageSelection', e);
			res.json({ status: false, error: 'Internal server error' });
		}
	}
	
	function websiteEmailValidation(req, res) {
		try {
			_users2.default.findOne({ email: req.body.email }, function (err, doc) {
				if (doc) {
					res.json({ status: false, error: "Email already existed" });
				} else {
					res.json({ status: true, error: "no error" });
				}
			});
		} catch (e) {
			console.log('error in websiteEmailValidation', e);
			res.json({
				status: false,
				error: 'Internal server error'
			});
		}
	}

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.saveQuestionnaire = saveQuestionnaire;
	exports.updateQuestionnaire = updateQuestionnaire;
	exports.saveQuestion = saveQuestion;
	exports.listQuestionnaire = listQuestionnaire;
	exports.fetchQuestionnaire = fetchQuestionnaire;
	exports.fetchQuestionnaireResult = fetchQuestionnaireResult;
	exports.deleteQuestionnaire = deleteQuestionnaire;
	exports.confirmDeleteQuestionnaire = confirmDeleteQuestionnaire;
	exports.deleteQuestion = deleteQuestion;
	exports.confirmedDeleteQuestion = confirmedDeleteQuestion;
	exports.saveQuestionnaireGrades = saveQuestionnaireGrades;
	exports.getQuestionnaireGrades = getQuestionnaireGrades;
	exports.fetchQuestionnairesData = fetchQuestionnairesData;
	exports.fetchCloneQuestionnaire = fetchCloneQuestionnaire;
	
	var _questionnaire = __webpack_require__(42);
	
	var _questionnaire2 = _interopRequireDefault(_questionnaire);
	
	var _gradeconfiguration = __webpack_require__(74);
	
	var _gradeconfiguration2 = _interopRequireDefault(_gradeconfiguration);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _topic = __webpack_require__(34);
	
	var _topic2 = _interopRequireDefault(_topic);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _result = __webpack_require__(77);
	
	var _result2 = _interopRequireDefault(_result);
	
	var _cuid = __webpack_require__(26);
	
	var _cuid2 = _interopRequireDefault(_cuid);
	
	var _limax = __webpack_require__(27);
	
	var _limax2 = _interopRequireDefault(_limax);
	
	var _sanitizeHtml = __webpack_require__(28);
	
	var _sanitizeHtml2 = _interopRequireDefault(_sanitizeHtml);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForCorporateCreation = _interopRequireWildcard(_emailFunctions);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	var _reflect = __webpack_require__(61);
	
	var _reflect2 = _interopRequireDefault(_reflect);
	
	var _parallel = __webpack_require__(60);
	
	var _parallel2 = _interopRequireDefault(_parallel);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7);
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	var async = __webpack_require__(44);
	
	
	/**
	*  @Function name : saveQuestionnaire
	*  @Purpose : For creating questionnaire
	*  @Request Object : questionnaireData : { data : {  questionnaireName: 'questionnaire name', description: 'description', uid: 'user id'  } }
	*  @Response Object : Success - Success message, Questionnaire data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveQuestionnaire(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.body.questionnaireData || !req.body.questionnaireData.data) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	        var obj = req.body.questionnaireData.data;
	
	        //If user has a valid role for creating questionnaire
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Presenter) {
	          getCloneQuestions(obj, function (questions) {
	            if (questions != null && questions.length <= 0) {
	              res.json({
	                status: false,
	                error: "No questions in questionnaire."
	              });
	            } else {
	              if (questions != null && questions.length > 0) {
	                questions.forEach(function (v) {
	                  delete v._id;
	                });
	                obj['questions'] = questions;
	              }
	              var corporateId = bussinessID;
	              obj['corporateId'] = bussinessID;
	              obj['createdBy'] = mongoose.Types.ObjectId(person._id);
	              obj['modifiedBy'] = mongoose.Types.ObjectId(person._id);
	              obj['createdAt'] = moment().utc().toDate();
	              obj['modifiedAt'] = moment().utc().toDate();
	
	              delete obj["uid"];
	
	              //Create questionnaire
	              var objEntity = new _questionnaire2.default(obj);
	              objEntity.save(function (err, doc) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    data: doc,
	                    message: "Created successfully."
	                  });
	                  var now = moment().utc().toDate();
	
	                  //Log obj which need to be inserted in logger collection
	                  // let logObj = {
	                  //   logType : 'Questionnaire',
	                  //   actionType : 'Created',
	                  //   actionTime : now,
	                  //   uid : obj.createdBy,
	                  //   details : {
	                  //     name : obj.questionnaireName,
	                  //     corporateId : obj.corporateId,
	                  //     remoteAddress : req.connection.remoteAddress,
	                  //     userAgent : req.headers['user-agent']
	                  //   }
	                  // }  
	
	                  // //Function for creating log on successful creation of questionnaire
	                  // createLog(logObj, function(status) {
	                  //   if(status) {
	                  //     // console.log(status);
	                  //   }
	                  // });
	                }
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in save questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	function getCloneQuestions(data, callback) {
	  if (data.qId && data.qId != "") {
	    _questionnaire2.default.findOne({ _id: mongoose.Types.ObjectId(data.qId) }).select('questions').lean().exec(function (err, cloneData) {
	      if (err) {
	        callback(null);
	      } else {
	        callback(cloneData.questions);
	      }
	    });
	  } else {
	    callback(null);
	  }
	}
	
	/**
	*  @Function name : updateQuestionnaire
	*  @Purpose : For updating Questionnaire
	*  @Request Object : questionnaireData : { data : {  questionnaireName: 'questionnaire name', description: 'description', uid: 'user id'  } }
	*  @Response Object : Success - Success message, Questionnaire data, Failure - Error message
	*  @Author : Prateek Pathak
	*/
	
	function updateQuestionnaire(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.body.questionnaireData || !req.body.questionnaireData.data) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.questionnaireData.data;
	
	        var recordId = mongoose.Types.ObjectId(obj._id);
	        obj['modifiedBy'] = mongoose.Types.ObjectId(person._id);
	        obj['modifiedAt'] = moment().utc().toDate();
	        delete obj["uid"];
	        delete obj["_id"];
	
	        //Fetching the details of questionnaire
	        _questionnaire2.default.findOne({
	          _id: recordId
	        }).exec(function (err, data) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else if (data) {
	            //If user has a valid for updating questionnaire
	            if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Presenter) {
	              getCloneQuestions(obj, function (questions) {
	                if (questions != null && questions.length == 0 && obj.qId) {
	                  res.json({
	                    status: false,
	                    error: 'No questions in questionnaire'
	                  });
	                } else {
	                  if (questions != null && data.questions && data.questions.length > 0) {
	                    var cloneQuestions = data.questions.concat(questions);
	                    cloneQuestions.forEach(function (v) {
	                      delete v._id;
	                    });
	                    obj['questions'] = cloneQuestions;
	                  } else if (questions != null && data.questions.length <= 0) {
	                    obj['questions'] = questions;
	                  }
	
	                  //Query for finding if the questionnaire is assigned to some topic
	                  _topic2.default.find({
	                    "questionnaire.questionnaireId": recordId
	                  }, {
	                    "questionnaire.$": 1
	                  }).exec(function (err, timedoc) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err.message
	                      });
	
	                      //If document is present check for time conflicts else update the questionnaire
	                    } else if (timedoc) {
	                      var now = moment().seconds(0).utc();
	
	                      //Logic for checking whether the questionnaire open time is undefined or less than the curent time
	
	                      var index = _.findIndex(timedoc, function (o) {
	
	                        var openFrom = o.questionnaire[0].openFrom != undefined || o.questionnaire[0].openFrom != null ? moment(o.questionnaire[0].openFrom).seconds(0).utc() : undefined;
	
	                        return openFrom <= now || openFrom == undefined;
	                      });
	
	                      if (index == -1) {
	
	                        //Query for updating the questionnaire
	                        _questionnaire2.default.update({
	                          _id: recordId
	                        }, {
	                          $set: obj
	                        }, {
	                          runValidators: true
	                        }, function (err, doc) {
	                          // console.log("update err == ",err);
	                          // console.log("update doc == ",doc);
	                          if (err) {
	                            res.json({
	                              status: false,
	                              error: err.message
	                            });
	                          } else {
	
	                            //Query for sending the updated record to the client
	                            var query = _questionnaire2.default.findOne({
	                              _id: recordId
	                            });
	                            query.exec(function (err, doc) {
	                              if (err) {
	                                res.json({
	                                  status: false
	                                });
	                              } else {
	                                res.json({
	                                  status: true,
	                                  data: doc,
	                                  message: "Updated successfully."
	                                });
	                              }
	                            });
	                          }
	                        });
	                      } else {
	
	                        var dbOpenFrom = timedoc[index].questionnaire[0].openFrom != undefined || timedoc[index].questionnaire[0].openFrom != null ? moment(timedoc[index].questionnaire[0].openFrom) : undefined;
	
	                        var dbCloseFrom = timedoc[index].questionnaire[0].closeFrom != undefined || timedoc[index].questionnaire[0].closeFrom != null ? moment(timedoc[index].questionnaire[0].closeFrom) : undefined;
	
	                        res.json({
	                          status: false,
	                          error: 409,
	                          openFrom: dbOpenFrom,
	                          closeFrom: dbCloseFrom
	                        });
	                      }
	                    } else {
	
	                      //Query for updating the questionnaire
	                      _questionnaire2.default.update({
	                        _id: recordId
	                      }, {
	                        $set: obj
	                      }, {
	                        runValidators: true
	                      }, function (err, doc) {
	                        // console.log("update err == ",err);
	                        // console.log("update doc == ",doc);
	                        if (err) {
	                          res.json({
	                            status: false,
	                            error: err.message
	                          });
	                        } else {
	
	                          //Query for sending the updated record to the client
	                          var query = _questionnaire2.default.findOne({
	                            _id: recordId
	                          });
	                          query.exec(function (err, doc) {
	                            if (err) {
	                              res.json({
	                                status: false
	                              });
	                            } else {
	                              res.json({
	                                status: true,
	                                data: doc,
	                                message: "Updated successfully."
	                              });
	                            }
	                          });
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Access denied."
	              });
	            }
	          } else {
	            res.json({
	              status: false,
	              error: "Invalid Questionnaire"
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in update questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : saveQuestion
	*  @Purpose : For updating question into questionnaire
	*  @Request Object : questionnaireData : { data : { question: { question: 'question name', questionType: 'Radio', options: [Object], answers: [Object], uid: 'user id', _id: 'questionnaire id', questionId: 'question id', swots: [] } } }
	*  @Response Object : Success - Success message, Questionnaire data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function saveQuestion(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null || !req.body.questionnaireData || !req.body.questionnaireData.data || !req.params.id) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	        var obj = req.body.questionnaireData.data.question;
	
	        //If user has a valid role
	        if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor) {
	
	          //If questionnaire id is there then update data else create data
	          if (req.params.id && (req.params.id != "" || req.params.id != undefined) && mongoose.Types.ObjectId.isValid(req.params.id)) {
	            var recordId = mongoose.Types.ObjectId(req.params.id);
	            obj['modifiedBy'] = mongoose.Types.ObjectId(person._id);
	            obj['modifiedAt'] = moment().utc().toDate();
	            delete obj["uid"];
	
	            //Fetching the details of questionnaire
	            var data = _questionnaire2.default.findOne({
	              _id: recordId
	            });
	
	            //Verifying is data is present or not
	            if (data) {
	
	              //If question object is there and have empty question id then push question into questionnaire else update questionnaire
	              if (req.body.questionnaireData.data.question && req.body.questionnaireData.data.question.questionId == '') {
	
	                //Push questions object in questionnaire
	                _questionnaire2.default.update({
	                  _id: recordId
	                }, {
	                  $push: {
	                    "questions": obj
	                  }
	                }, { runValidators: true }, function (err, doc) {
	                  // console.log("update err == ",err);
	                  // console.log("update doc == ",doc);
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: err.message
	                    });
	                  } else {
	
	                    //Query for sending the updated record to the client
	                    var query = _questionnaire2.default.findOne({
	                      _id: recordId
	                    });
	                    query.exec(function (err, doc) {
	                      if (err) {
	                        res.json({
	                          status: false
	                        });
	                      } else {
	                        res.json({
	                          status: true,
	                          data: doc,
	                          message: "Added successfully."
	                        });
	                      }
	                    });
	                  }
	                });
	
	                //If question object is there and question id is not empty then update question into questionnaire
	              } else if (req.body.questionnaireData.data.question && req.body.questionnaireData.data.question.questionId != '') {
	
	                //Update questions object in questionnaire
	                _questionnaire2.default.update({
	                  _id: recordId,
	                  "questions._id": obj.questionId
	                }, {
	                  $set: {
	                    "questions.$.question": obj.question,
	                    "questions.$.questionType": obj.questionType,
	                    "questions.$.options": obj.options,
	                    "questions.$.answers": obj.answers,
	                    "questions.$.swots": obj.swots,
	                    "questions.$.marks": obj.marks
	                  }
	                }, {
	                  runValidators: true
	                }, function (err, doc) {
	                  // console.log("update err == ",err);
	                  // console.log("update doc == ",doc);
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: err.message
	                    });
	                  } else {
	
	                    //Query for sending the updated record to the client
	                    var query = _questionnaire2.default.findOne({
	                      _id: recordId
	                    });
	                    query.exec(function (err, doc) {
	                      if (err) {
	                        res.json({
	                          status: false
	                        });
	                      } else {
	                        res.json({
	                          status: true,
	                          data: doc,
	                          message: "Updated successfully."
	                        });
	                      }
	                    });
	                  }
	                });
	              }
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid Questionnaire"
	              });
	            }
	          } else {
	            res.json({
	              status: false,
	              error: "Invalid Questionnaire Id"
	            });
	          }
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      }
	    } catch (e) {
	      console.log("error in save question", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listQuestionnaire
	*  @Purpose : For fetching complete questionnaire data
	*  @Request Object : query : { page, items, search }
	*  @Response Object : Success - Questionnaire data and count, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function listQuestionnaire(req, res) {
	  //console.log("QuestionnaireList Req --", req.body.questionnaireData);
	
	  //Verifying if user is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person != null && req.query.items && req.query.page) {
	        var queryData = req.query;
	        var selector = {};
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        //Search selector based on user role
	        if (person.role == _adminUser.Roles.Superadmin) {
	          selector = {};
	        } else if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Presenter) {
	          selector = {
	            corporateId: bussinessID
	          };
	        }
	
	        //If searchKeyword is not empty then create RegExp
	        if (queryData.search && queryData.search != '') {
	          var slash_search = (0, _slashesActions.addSlash)(queryData.search);
	          var searchKey = RegExp(slash_search, 'i');
	          selector['$or'] = [{ 'questionnaireName': { $regex: searchKey } }, { 'description': { $regex: searchKey } }];
	        }
	
	        //Query for fetching complete questionnaire data based on selector and skip items based on itemsPerPage on previous page
	        var query = _questionnaire2.default.find(selector).limit(Number(queryData.items)).select('questionnaireName description corporateId').skip(Number(queryData.items) * (Number(queryData.page) - 1));
	        if (req.query.sort == 'undefined' || req.query.sort == undefined) {
	          query.sort({ modifiedAt: -1 });
	        } else {
	          // console.log("sort === ", req.query.sort);
	          query.sort(JSON.parse(req.query.sort));
	        }
	        if (query) {
	          query.exec(function (err, result) {
	            if (err) {
	              // console.log("ERROR===", err);
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	
	              //Query for counting complete questionnaire data based on selector
	              _questionnaire2.default.count(selector).exec(function (error, count) {
	                res.json({
	                  status: true,
	                  data: result,
	                  count: count
	                });
	              });
	            }
	          });
	        } else {
	          res.json({
	            status: false,
	            error: "Access denied."
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("error in list questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchQuestionnaire
	*  @Purpose : For fetching particular questionnaire data
	*  @Request Object : params : { id: "questionnaire id" }
	*  @Response Object : Success - Questionnaire data, Failure - Error message
	*  @Author : Aniket Gupta
	*/
	
	function fetchQuestionnaire(req, res) {
	
	  //Verifying if request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params.id) {
	
	        //Validating if questionnaire id is valid or not
	        if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid questionnaire"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	          //console.log("recordId == ",recordId);
	
	          //Query for finding the questionnaire data based on questionnaire id
	          var query = _questionnaire2.default.findOne({
	            _id: req.params.id
	          }).exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (doc) {
	              //console.log("DATA===", doc);
	              res.json({
	                status: true,
	                data: doc
	              });
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid Questionnaire."
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("error in fetch questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchQuestionnaireResult
	*  @Purpose : For fetching particular questionnaire submitted result data
	*  @Request Object : params : { id: "questionnaire id" }
	*  @Response Object : Success - Questionnaire submitted data, Failure - Error message
	*  @Author : gaddam pranathi
	*/
	
	function fetchQuestionnaireResult(req, res) {
	
	  //Verifying if request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params.id) {
	
	        //Validating if questionnaire id is valid or not
	        if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid questionnaire"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	          //console.log("recordId == ",recordId);
	
	          //Query for finding the questionnaire data based on questionnaire id
	          _result2.default.find({ questionnaireId: req.params.id }).exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (doc) {
	              if (doc.length == 0) {
	                res.json({
	                  status: true,
	                  data: doc,
	                  submittedFlag: true
	                });
	              } else {
	                res.json({
	                  status: true,
	                  data: doc,
	                  submittedFlag: false
	                });
	              }
	            } else {
	              res.json({
	                status: false,
	                error: "Invalid Questionnaire."
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("error in fetch questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteQuestionnaire
	*  @Purpose : For deleting particular questionnaire data
	*  @Request Object : params : { id: "questionnaire id" }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Prateek 
	*/
	
	function deleteQuestionnaire(req, res) {
	
	  //Verifying if request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params.id) {
	
	        //Validating if requested questionnaire id is valid or not
	        if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid Questionnnaire"
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Query for checking if the questionnaire id is present in database
	          var query = _questionnaire2.default.findOne({
	            _id: recordId
	          });
	          query.exec(function (err, doc) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (doc) {
	
	              //Checking whether there is any submission respective to questionnaire Id
	
	              _result2.default.findOne({
	                questionnaireId: recordId
	              }).exec(function (err, resultDoc) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else if (resultDoc) {
	                  res.json({
	                    status: false,
	                    error: "Questionnaire can't be deleted as questions has been attempted based on questionnaire questions"
	                  });
	                } else {
	
	                  async.parallel([async.reflect(function (callback) {
	                    _topic2.default.findOne({
	                      "questionnaire.questionnaireId": recordId
	                    }, {
	                      topicName: 1,
	                      "questionnaire.$": 1
	                    }).exec(function (err, topicData) {
	                      if (err) {
	                        callback(err.message, null);
	                      } else {
	                        callback(null, topicData);
	                      }
	                    });
	                  }), async.reflect(function (callback) {
	                    _room2.default.findOne({
	                      'roomConfiguration.feedback.questionnaireId': recordId
	                    }).exec(function (err, roomData) {
	                      if (err) {
	                        callback(err.message, null);
	                      } else {
	                        callback(null, roomData);
	                      }
	                    });
	                  })],
	                  // optional callback
	                  function (err, results) {
	                    if (err) {
	                      res.json({
	                        status: false,
	                        error: err
	                      });
	                    } else {
	                      if (results[0].value == null && results[1].value != null) {
	                        res.json({
	                          status: false,
	                          error: 'Are you sure you want to delete questionnaire as questionnaire has been assigned to room configuration as a feedback?',
	                          httpstatuscode: 409,
	                          dependency: 'ROOM'
	                        });
	                      } else if (results[0].value != null && results[1].value == null) {
	                        res.json({
	                          status: false,
	                          error: 'Are you sure you want to delete questionnaire as questionnaire has been  already assigned to some topic?',
	                          httpstatuscode: 409,
	                          dependency: 'TOPIC'
	                        });
	                      } else if (results[0].value != null && results[1].value != null) {
	                        res.json({
	                          status: false,
	                          error: 'Are you sure you want to delete questionnaire as questionnaire has been  already assigned to some topic and to room configuration as a feedback?',
	                          httpstatuscode: 409,
	                          dependency: 'BOTH'
	                        });
	                      } else {
	
	                        //Remove Questionnaire 
	
	                        _questionnaire2.default.remove({
	                          _id: recordId
	                        }).exec(function (error, response) {
	                          if (error) {
	                            res.json({
	                              status: false,
	                              error: error.message
	                            });
	                          } else {
	                            res.json({
	                              status: true,
	                              message: "Deleted successfully."
	                            });
	                          }
	                        });
	                      }
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: 'Questionnaire not found'
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("error in delete questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : confirmDeleteQuestionnaire
	*  @Purpose : For deleting particular questionnaire data based on confirmation given by user 
	*  @Request Object : params : { id: "questionnaire id" }
	*  @Response Object : Success - Success message, Failure - Error message
	*  @Author : Prateek 
	*/
	
	function confirmDeleteQuestionnaire(req, res) {
	
	  //Verifying if request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params.id && req.params.dependency) {
	
	        //Validating if requested questionnaire id is valid or not
	        if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          res.json({
	            status: false,
	            error: "Invalid Question."
	          });
	        } else {
	          var recordId = mongoose.Types.ObjectId(req.params.id);
	
	          //Removing all questionnaires based on dependency
	
	          if (req.params.dependency == 'ROOM') {
	
	            //Removing all questionnaires based on dependency 'ROOM'
	
	            _room2.default.update({
	              'roomConfiguration.feedback.questionnaireId': recordId
	            }, {
	              $set: {
	                'roomConfiguration.feedback': {
	                  "feedbackType": "Default"
	                }
	              }
	            }, {
	              multi: true
	            }).exec(function (err, roomUpdated) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else if (roomUpdated) {
	
	                //Remove Questionnaire 
	                _questionnaire2.default.remove({
	                  _id: recordId
	                }).exec(function (error, response) {
	                  if (error) {
	                    res.json({
	                      status: false,
	                      error: error.message
	                    });
	                  } else {
	                    res.json({
	                      status: true,
	                      message: "Deleted successfully."
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: 'Room Configuration not found'
	                });
	              }
	            });
	          } else if (req.params.dependency == 'TOPIC') {
	
	            //Removing all questionnaires based on dependency 'TOPIC'
	
	            _topic2.default.update({
	              'questionnaire.questionnaireId': recordId
	            }, {
	              $pull: {
	                "questionnaire": {
	                  "questionnaireId": recordId
	                }
	              }
	            }, { multi: true }).exec(function (err, topicUpdated) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else if (topicUpdated) {
	
	                //Remove Questionnaire 
	                _questionnaire2.default.remove({
	                  _id: recordId
	                }).exec(function (error, response) {
	                  if (error) {
	                    res.json({
	                      status: false,
	                      error: error.message
	                    });
	                  } else {
	                    res.json({
	                      status: true,
	                      message: "Deleted successfully."
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: 'Invalid Topic'
	                });
	              }
	            });
	          } else if (req.params.dependency == 'BOTH') {
	
	            //Removing all questionnaires based on dependency 'BOTH'
	
	            _topic2.default.update({
	              'questionnaire.questionnaireId': recordId
	            }, {
	              $pull: {
	                "questionnaire": {
	                  "questionnaireId": recordId
	                }
	              }
	            }, { multi: true }).exec(function (err, topicUpdated) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else if (topicUpdated) {
	
	                //Removing all questionnaires assigned to room configuration in room collection
	
	                _room2.default.update({
	                  'roomConfiguration.feedback.questionnaireId': recordId
	                }, {
	                  $set: {
	                    'roomConfiguration.feedback': {
	                      "feedbackType": "Default"
	                    }
	                  }
	                }, {
	                  multi: true
	                }).exec(function (err, roomUpdated) {
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: err.message
	                    });
	                  } else if (roomUpdated) {
	
	                    //Remove Questionnaire 
	                    _questionnaire2.default.remove({
	                      _id: recordId
	                    }).exec(function (error, response) {
	                      if (error) {
	                        res.json({
	                          status: false,
	                          error: error.message
	                        });
	                      } else {
	                        res.json({
	                          status: true,
	                          message: "Deleted successfully."
	                        });
	                      }
	                    });
	                  } else {
	                    res.json({
	                      status: false,
	                      error: 'Room Configuration not found'
	                    });
	                  }
	                });
	              } else {
	                res.json({
	                  status: false,
	                  error: 'Invalid Topic'
	                });
	              }
	            });
	          } else {
	
	            //Remove Questionnaire 
	
	            _questionnaire2.default.remove({
	              _id: recordId
	            }).exec(function (error, response) {
	              if (error) {
	                res.json({
	                  status: false,
	                  error: error.message
	                });
	              } else {
	                res.json({
	                  status: true,
	                  message: "Deleted successfully."
	                });
	              }
	            });
	          }
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      console.log("error in delete questionnaire", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : deleteQuestion
	*  @Purpose : For deleting particular question data from questionnaire
	*  @Request Object : params : { qid: "questionnaire id", id: 'question id' }
	*  @Response Object : Success - Success message, Questionnaire data, Failure - Error message
	*  @Author : Prateek
	*/
	//Chnaged by prateek for delete questions bug#2924
	function deleteQuestion(req, res) {
	
	  //Verifying if request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params.qid && req.params.id) {
	
	        //Validating if requested questionnaire id and question id is valid or not
	        if (!req.params.qid || validator.isEmpty(req.params.qid) || !mongoose.Types.ObjectId.isValid(req.params.qid)) {
	          // console.log("Invalid Question");
	          res.json({
	            status: false,
	            error: "Invalid Questionnaire."
	          });
	        } else if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          // console.log("Invalid questionId");
	          res.json({
	            status: false,
	            error: "Invalid questionId."
	          });
	        } else {
	
	          //Query for checking if the questionnaire id is present in database
	          var query = _questionnaire2.default.findOne({
	            _id: mongoose.Types.ObjectId(req.params.qid)
	          });
	          query.exec(function (err, docs) {
	            if (err) {
	              // console.log("Error", error.message);
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else if (docs) {
	              var questionId = req.params.id;
	
	              _result2.default.findOne({
	                questionnaireId: docs._id
	              }).exec(function (err, result) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else if (result) {
	                  res.json({
	                    status: false,
	                    error: "Are you want to delete question from questionnaire as there are results based on question?",
	                    httpStatusCode: 409
	                  });
	                } else {
	
	                  //Query for removing the question from questionnaire
	                  _questionnaire2.default.update({
	                    _id: mongoose.Types.ObjectId(req.params.qid)
	                  }, {
	                    $pull: {
	                      "questions": {
	                        "_id": questionId
	                      }
	                    }
	                  }, function (error, result) {
	                    if (error) {
	                      // console.log("Error", error.message);
	                      res.json({
	                        status: false,
	                        error: error.message,
	                        message: "Question not present in current questionnaire."
	                      });
	                    } else {
	
	                      //Query for sending the updated record to the client
	                      var query = _questionnaire2.default.findOne({
	                        _id: mongoose.Types.ObjectId(req.params.qid)
	                      }).exec(function (e, doc) {
	                        if (e) {
	                          // console.log("Error", err.message);
	                          res.json({
	                            status: false,
	                            error: e.message,
	                            message: "Error while retriving question data."
	                          });
	                        } else {
	                          res.json({
	                            status: true,
	                            data: doc,
	                            message: "Question removed successfully."
	                          });
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: 'Questionnaire not found'
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("error in delete question", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : confirmedDeleteQuestion
	*  @Purpose : For deleting particular question data from questionnaire after taking confirmation from user
	*  @Request Object : params : { qid: "questionnaire id", id: 'question id' }
	*  @Response Object : Success - Success message, Questionnaire data, Failure - Error message
	*  @Author : Prateek
	*/
	//Chnaged by prateek for delete questions bug#2924
	function confirmedDeleteQuestion(req, res) {
	
	  //Verifying if request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.params.qid && req.params.id) {
	
	        //Validating if requested questionnaire id and question id is valid or not
	        if (!req.params.qid || validator.isEmpty(req.params.qid) || !mongoose.Types.ObjectId.isValid(req.params.qid)) {
	          // console.log("Invalid Question");
	          res.json({
	            status: false,
	            error: "Invalid Questionnaire."
	          });
	        } else if (!req.params.id || validator.isEmpty(req.params.id) || !mongoose.Types.ObjectId.isValid(req.params.id)) {
	          // console.log("Invalid questionId");
	          res.json({
	            status: false,
	            error: "Invalid questionId."
	          });
	        } else {
	          var questionId = req.params.id;
	
	          //Query for removing the question from questionnaire
	          _questionnaire2.default.update({
	            _id: mongoose.Types.ObjectId(req.params.qid)
	          }, {
	            $pull: {
	              "questions": {
	                "_id": questionId
	              }
	            }
	          }, function (error, result) {
	            if (error) {
	              // console.log("Error", error.message);
	              res.json({
	                status: false,
	                error: error.message,
	                message: "Question not present in current questionnaire."
	              });
	            } else {
	
	              //Query for sending the updated record to the client
	              var query = _questionnaire2.default.findOne({
	                _id: mongoose.Types.ObjectId(req.params.qid)
	              }).exec(function (e, doc) {
	                if (e) {
	                  // console.log("Error", err.message);
	                  res.json({
	                    status: false,
	                    error: e.message,
	                    message: "Error while retriving question data."
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    data: doc,
	                    message: "Question removed successfully."
	                  });
	                }
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "InValid Request"
	        });
	      }
	    } catch (e) {
	      console.log("error in delete question", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : saveQuestionnaireGrades
	*  @Purpose : For creating grades in questionnaire at corporate level
	*  @Request Object : data : {grades}
	*  @Response Object : Success - Success message, Questionnaire data, Failure - Error message
	*  @Author : Prateek
	*/
	
	function saveQuestionnaireGrades(req, res) {
	
	  //Validation on user authentication status
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null && !req.body.data) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        var gradeInfo = req.body.data;
	        _gradeconfiguration2.default.findOne({
	          companyid: bussinessID
	        }).exec(function (err, gradeResult) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else if (_.isEmpty(gradeResult) == false) {
	            _gradeconfiguration2.default.update({
	              companyid: bussinessID,
	              grades: gradeInfo
	            }).exec(function (err, updated) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else {
	
	                _gradeconfiguration2.default.findOne({
	                  companyid: bussinessID
	                }).exec(function (err, gradeResult) {
	                  if (err) {
	                    res.json({
	                      status: false,
	                      error: err.message
	                    });
	                  } else {
	                    res.json({
	                      status: true,
	                      message: 'Updated Successfully.',
	                      data: gradeResult.grades
	                    });
	                  }
	                });
	              }
	            });
	          } else if (_.isEmpty(gradeResult) == true) {
	
	            var obj = {};
	            obj['grades'] = gradeInfo;
	            obj['companyid'] = bussinessID;
	            obj['createdBy'] = person._id;
	
	            var objEntity = new _gradeconfiguration2.default(obj);
	            objEntity.save(function (err, doc) {
	              if (err) {
	                res.json({
	                  status: false,
	                  error: err.message
	                });
	              } else {
	                res.json({
	                  status: true,
	                  data: doc.grades,
	                  message: "Updated Successfully."
	                });
	              }
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log('error in saveQuestionnaireGrades', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : getQuestionnaireGrades
	*  @Purpose : For getting grades in questionnaire at corporate level
	*  @Response Object : Success - Success message, Questionnaire data, Failure - Error message
	*  @Author : Prateek
	*/
	
	function getQuestionnaireGrades(req, res) {
	
	  //Validation on user authentication status
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null && !req.body.data) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        _gradeconfiguration2.default.findOne({
	          companyid: bussinessID
	        }).exec(function (err, gradeResult) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else {
	            if (_.isEmpty(gradeResult) == true) {
	              res.json({
	                status: true,
	                data: [{
	                  from: 70,
	                  to: 100,
	                  result: 'DISTINCTION',
	                  grade: 'A'
	                }, {
	                  from: 35,
	                  to: 69,
	                  result: 'PASS',
	                  grade: 'B'
	                }, {
	                  from: 0,
	                  to: 34,
	                  result: 'FAIL',
	                  grade: 'C'
	                }]
	              });
	            } else {
	              res.json({
	                status: true,
	                data: gradeResult.grades
	              });
	            }
	          }
	        });
	      }
	    } catch (e) {
	      console.log('error in getQuestionnaireGrades', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchQuestionnaire
	*  @Purpose : For fetching questionnaire data
	*  @Response Object : Success - Questionnaire data, Failure - Error message
	*  @Author : gaddam pranathi
	*/
	
	function fetchQuestionnairesData(req, res) {
	  //Validation on user authentication status
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	
	    try {
	      //Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	        var resData = [['', 'Select Questionnaire']];
	        _questionnaire2.default.find({ corporateId: bussinessID }).exec(function (err, quesitonnaireData) {
	          if (err) {
	            console.log("err in fetchQuestionnairesData === ", err);
	            res.json({
	              status: true,
	              data: resData
	            });
	          } else if (quesitonnaireData && quesitonnaireData.length > 0) {
	
	            for (var i in quesitonnaireData) {
	              resData.push([quesitonnaireData[i]._id, quesitonnaireData[i].questionnaireName]);
	            }
	            // console.log('resData',resData);
	
	            res.json({
	              status: true,
	              data: resData
	            });
	          } else {
	            res.json({
	              status: true,
	              data: resData
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log('error in fetchQuestionnaire', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : fetchCloneQuestionnaire
	*  @Purpose : For fetching questionnaire data
	*  @Response Object : Success - Questionnaire data, Failure - Error message
	*  @Author : gaddam pranathi
	*/
	
	function fetchCloneQuestionnaire(req, res) {
	  //Validation on user authentication status
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	
	    try {
	      //Verifying if request is valid or not
	      if (person == null && !req.params.id) {
	        res.json({
	          status: false,
	          error: "InValid request."
	        });
	      } else {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	        var resData = [['', 'Select Questionnaire']];
	        _questionnaire2.default.find({ corporateId: bussinessID, _id: { $ne: mongoose.Types.ObjectId(req.params.id) } }).exec(function (err, quesitonnaireData) {
	          if (err) {
	            console.log("err in fetchCloneQuestionnaire === ", err);
	            res.json({
	              status: true,
	              data: resData
	            });
	          } else if (quesitonnaireData && quesitonnaireData.length > 0) {
	
	            for (var i in quesitonnaireData) {
	              resData.push([quesitonnaireData[i]._id, quesitonnaireData[i].questionnaireName]);
	            }
	            // console.log('resData',resData);
	
	            res.json({
	              status: true,
	              data: resData
	            });
	          } else {
	            res.json({
	              status: true,
	              data: resData
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log('error in fetchQuestionnaire', e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.searchCorporate = searchCorporate;
	exports.saveRegistData = saveRegistData;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _corporate = __webpack_require__(41);
	
	var _corporate2 = _interopRequireDefault(_corporate);
	
	var _adminUser = __webpack_require__(13);
	
	var _md = __webpack_require__(31);
	
	var _md2 = _interopRequireDefault(_md);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForUserCreation = _interopRequireWildcard(_emailFunctions);
	
	var _imageDownloader = __webpack_require__(244);
	
	var _imageDownloader2 = _interopRequireDefault(_imageDownloader);
	
	var _randomstring = __webpack_require__(35);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	function searchCorporate(req, res) {
		try {
			//console.log("req.body.searchData", req.body.searchData);
			// let obj = req.body.searchData;
			if (req.params.input || req.params.input.trim() != '') {
				var selector = {
					businessName: {
						"$regex": (0, _slashesActions.addSlash)(req.params.input),
						"$options": "i"
					}
				};
				if (_config2.default.bussinessType && _config2.default.bussinessType != '') {
					selector["businessType"] = _config2.default.bussinessType;
				}
				var query = _corporate2.default.find(selector).select('_id businessName');
				query.exec(function (err, corp) {
					if (err) {
						//console.log("error while Searching", err);
						res.json({ status: false, error: err });
					} else {
						// console.log("corporate name", corp);
						res.json({ status: true, data: corp });
					}
				});
			} else {
				res.json({ status: false, error: "Invalid Request" });
			}
		} catch (e) {
			console.log('error in searchCorporate', e);
			res.json({
				status: false,
				error: 'Internal server error'
			});
		}
	}
	
	function saveRegistData(req, res) {
		// console.log("save data", req.body.data);
		try {
			if (req.body.data && req.body.data && req.body.data['profile.companyid'] && mongoose.Types.ObjectId.isValid(req.body.data['profile.companyid'])) {
				var obj = req.body.data;
				// console.log("save data", obj);
				// console.log("save data companyid", obj.companyid);
				// console.log("password", obj.userPassword);
				var corporatequery = _corporate2.default.findOne({ _id: obj['profile.companyid'] }).select('businessType');
				corporatequery.exec(function (corperr, company) {
					if (company) {
						var checkrole = _adminUser.Roles.Admin;
						var role = _adminUser.Roles.User;
						if (company.businessType == 'Conference') {
							checkrole = _adminUser.Roles.Admin;
							role = _adminUser.Roles.User;
						} else if (company.businessType == 'LMS') {
							checkrole = _adminUser.Roles.Lmsadmin;
							role = _adminUser.Roles.Student;
						} else if (company.businessType == 'Presenter') {
							checkrole = _adminUser.Roles.Presenteradmin;
							role = _adminUser.Roles.Attendee;
						} else if (company.businessType == 'CRM') {
							checkrole = _adminUser.Roles.CRMadmin;
							role = _adminUser.Roles.CRMuser;
						}
						var slash_email = (0, _slashesActions.addSlash)(obj.email);
						var chkUser = _users2.default.findOne({ $or: [{ email: slash_email }, { gmail: slash_email }, { faceboookMail: slash_email }] });
						chkUser.exec(function (chkError, personExists) {
							if (chkError) {
								res.json({ status: false, error: chkError });
							} else if (personExists == null) {
								var userQuery = _users2.default.findOne({ "profile.companyid": company._id, "role": checkrole });
								userQuery.exec(function (personErr, person) {
									if (personErr) {
										// console.log("personErr", personErr);
										res.json({ status: false, error: personErr });
									} else if (person) {
										if (obj['loginType'] === 'Google' && obj['googleId'] || obj['loginType'] === 'Facebook' && obj['facebookId']) {
											// console.log(1,"Application signup")		
	
	
										} else {
											var slashsPassword = (0, _slashesActions.addSlash)(obj.userPassword);
											obj["password"] = (0, _md2.default)(slashsPassword);
											obj['loginType'] = 'Application';
											var dob = obj['dateofbirth'];
											//Verifying if requestedUserDateOfBirthData is there or not
											if (dob) var dob = (0, _moment2.default)(dob, "DD/MM/YYYY");else dob = '';
											obj["profile.dateofbirth"] = dob;
										}
										obj["role"] = role;
										obj["dateAdded"] = (0, _moment2.default)().utc().toDate();
										obj["createdby"] = mongoose.Types.ObjectId(person._id);
										obj["modifiedby"] = mongoose.Types.ObjectId(person._id);
										obj["userStatus"] = 'Registered';
	
										var randomstring = '';
	
										//Function call for creating randomstring
										(0, _randomstring.createRandomString)(function (data) {
											randomstring = data;
										});
										// console.log(obj['profile']['profileImage'])
										//options for save image from google 
	
										var createUserFunction = function createUserFunction(obj) {
											var dob = obj.dateofbirth;
											//Verifying if requestedUserDateOfBirthData is there or not
											if (dob) {
												var dob = (0, _moment2.default)(dob, "DD/MM/YYYY");
											} else {
												dob = '';
											}
											obj["profile.dateofbirth"] = dob;
											obj["role"] = role;
											obj["dateAdded"] = (0, _moment2.default)().utc().toDate();
											obj["createdby"] = mongoose.Types.ObjectId(person._id);
											obj["modifiedby"] = mongoose.Types.ObjectId(person._id);
	
											//  console.log(obj['profile']['profileImage'])
	
											//var stuObj = new Users(obj);
											_users2.default.create([obj], function (err, corp) {
												if (err) {
													console.log("error while Creating", err);
													res.json({ status: false, error: err.message });
												} else if (corp) {
													// console.log("corp data", corp);
	
													var exchangeData = {
														to: person.email,
														whoCreated: obj.email,
														subject: 'New Student Registered',
														body: 'Student with name ' + obj.firstname + ' has been registered'
	
														//Email will be sent to user after creating user successfully
													};EmailForUserCreation.createUserMail(exchangeData, function (emailerror, emailsuccess) {
														//console.log(emailerror.status)
														if (emailerror.status == false) {
															console.log("Email not sent");
														} else {
															console.log('email sent');
															res.json({ status: true, message: "Registered successfully" });
														}
													});
												}
											});
										};
	
										if (!(obj['loginType'] === 'Google' && obj['googleId'] || obj['loginType'] === 'Facebook' && obj['facebookId'])) {
											var _slashsPassword = (0, _slashesActions.addSlash)(obj.userPassword);
											obj["password"] = (0, _md2.default)(_slashsPassword);
											obj['loginType'] = 'Application';
											createUserFunction(obj);
										} else {
											var options = {
												url: obj['profileImage'],
												dest: process.env.PWD + '/uploads/' + randomstring + '.jpg'
											};
											_imageDownloader2.default.image(options).then(function (_ref) {
												var filename = _ref.filename,
												    image = _ref.image;
	
												filename = filename.replace(process.env.PWD + '/uploads/', '');
												obj['profile'] = {};
												obj['profile']['profileImage'] = filename;
												obj['profile']['dateofbirth'] = obj['dateofbirth'];
												createUserFunction(obj);
											}).catch(function (err) {
												console.log(err);
												createUserFunction(obj);
												throw err;
											});
										}
									} else if (person == null) {
										//console.log("person undifined", person);
										res.json({ status: false, error: "Admin does not exist. Please contact your institute" });
									}
								});
							} else {
								// console.log("Email Id already exists")
								res.json({ status: false, error: "Email Id already exists" });
							}
						});
					} else {
						res.json({ status: false, error: "Invalid institute" });
					}
				});
			} else {
				res.json({ status: false, error: "Invalid Request" });
			}
		} catch (e) {
			console.log('error in saveRegistData', e);
			res.json({ status: false, error: "Internal server error" });
		}
	}

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.studentCourseList = studentCourseList;
	exports.activeUsers = activeUsers;
	exports.listActiveUsers = listActiveUsers;
	exports.courseAttendance = courseAttendance;
	exports.individualAttendance = individualAttendance;
	exports.listIndividualAttendance = listIndividualAttendance;
	exports.listTotalSchedules = listTotalSchedules;
	exports.courseTopics = courseTopics;
	exports.courseUsers = courseUsers;
	exports.topicViewedUsers = topicViewedUsers;
	exports.listTopicViewedUsers = listTopicViewedUsers;
	exports.userViewedTopics = userViewedTopics;
	exports.listCourseTopics = listCourseTopics;
	exports.listUserViewedAllTopics = listUserViewedAllTopics;
	exports.studentTopics = studentTopics;
	exports.studentAssignmentList = studentAssignmentList;
	exports.studentAssignmentResultData = studentAssignmentResultData;
	exports.checkCertificteEligibility = checkCertificteEligibility;
	exports.generateCertificate = generateCertificate;
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _corporate = __webpack_require__(41);
	
	var _corporate2 = _interopRequireDefault(_corporate);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _topic = __webpack_require__(34);
	
	var _topic2 = _interopRequireDefault(_topic);
	
	var _package = __webpack_require__(25);
	
	var _package2 = _interopRequireDefault(_package);
	
	var _questionnaire = __webpack_require__(42);
	
	var _questionnaire2 = _interopRequireDefault(_questionnaire);
	
	var _students = __webpack_require__(33);
	
	var _students2 = _interopRequireDefault(_students);
	
	var _schedule = __webpack_require__(43);
	
	var _schedule2 = _interopRequireDefault(_schedule);
	
	var _category = __webpack_require__(59);
	
	var _category2 = _interopRequireDefault(_category);
	
	var _assignment = __webpack_require__(58);
	
	var _assignment2 = _interopRequireDefault(_assignment);
	
	var _logger = __webpack_require__(49);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _datalog = __webpack_require__(48);
	
	var _datalog2 = _interopRequireDefault(_datalog);
	
	var _cuid = __webpack_require__(26);
	
	var _cuid2 = _interopRequireDefault(_cuid);
	
	var _limax = __webpack_require__(27);
	
	var _limax2 = _interopRequireDefault(_limax);
	
	var _sanitizeHtml = __webpack_require__(28);
	
	var _sanitizeHtml2 = _interopRequireDefault(_sanitizeHtml);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	var _reflect = __webpack_require__(61);
	
	var _reflect2 = _interopRequireDefault(_reflect);
	
	var _parallel = __webpack_require__(60);
	
	var _parallel2 = _interopRequireDefault(_parallel);
	
	var _eachOf = __webpack_require__(79);
	
	var _eachOf2 = _interopRequireDefault(_eachOf);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	var _ = __webpack_require__(7);
	var async = __webpack_require__(44);
	
	var multer = __webpack_require__(50);
	var fs = __webpack_require__(23);
	var shell = __webpack_require__(82);
	var path = __webpack_require__(62);
	var htmlPdf = __webpack_require__(242);
	
	/**
	*  @Function name : studentSubmissionAssignments
	*  @Purpose : For fetching  student submission assignments Report
	*  @Request Object : params : { rid: "room id" }
	*  @Response Object : Success - assignment report data, Failure - Error message
	*  @Author : pranathi
	*/
	
	// export function studentSubmissionAssignments(req, res) {
	//   checkValidRequest(req.headers, function(person) {
	
	//     try {
	
	//       //Verifying if request is valid or not
	//       if (person == null || !req.params.rid) {
	//         res.json({
	//           status: false, 
	//           error : "Invalid request."  
	//         });
	//       } else {
	
	//         //Validating if room id is valid or not
	//         if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	//           res.json({
	//             status: false, 
	//             error : "Invalid room"
	//           });
	//         } else {
	//           var recordId = req.params.rid;
	
	//           // For finding int id  based on room id and student id
	//           var query = Student.find({ 
	//             roomId : recordId,
	//             students : { $in :[person._id] }
	//           });
	
	//           query.select('instId')
	//           .exec(function (insErr, insDoc) {
	//             if (insErr) { 
	//               res.json({ 
	//                 status: false, 
	//                 error : insErr.message, 
	//                 message : "Error while retriving instructor data." 
	//               });
	//             } 
	//             if (insDoc.length > 0) {
	
	//               var TotalAssignments = 0;
	//               var SubmittedAssignments = 0;
	
	//               var instId = insDoc.map(function(d){ return d.instId });
	
	//               let selector = {
	//                 roomId : recordId,
	//                 createdBy : { $in :instId} 
	//               }
	
	//               Assignment.count(selector).exec(function(error, count) {
	//                 if (error) {
	//                   res.json({ 
	//                     status : false, 
	//                     error : error.message
	//                   });
	//                 } else {
	
	//                   Assignment.find(
	//                   {
	//                     roomId : recordId,
	//                     createdBy : { $in :instId} ,
	//                     $and:[ {submissions: { $exists: true, $ne: [] }}, { submissions: { $elemMatch: { studentId: person._id } } }]
	//                   })
	//                   .select('submissions._id')
	//                   .exec(function (assignErr, assignData) {
	//                     if (assignErr) {
	//                       res.json({ 
	//                         status: false, 
	//                         error: assignErr.message, 
	//                       });
	//                     }
	//                     if (_.isEmpty(assignData)) {
	//                       res.json({ 
	//                         status: false, 
	//                         error: 'No data', 
	//                       });
	//                     } else {
	
	//                       SubmittedAssignments += assignData.length;
	//                       TotalAssignments = count;
	//                       var NotSubmittedAssignments = TotalAssignments - SubmittedAssignments;
	
	//                       let obj = {
	//                         notSubmittedAssignments : (NotSubmittedAssignments/TotalAssignments)*100,
	//                         submittedAssignments : (SubmittedAssignments/TotalAssignments)*100,
	//                         totalAssignments : (TotalAssignments/TotalAssignments)*100
	//                       }
	
	//                       res.json({ 
	//                         status: true, 
	//                         data: obj, 
	//                       });
	//                     }
	//                   }); 
	//                 }
	//               });
	//             } else {
	//               res.json({ 
	//                 status: false, 
	//                 data: 'No Instructors', 
	//               });
	//             }
	//           })
	//         }
	//       }
	//     } catch(e) {
	//       console.log("Error in fetch student submission assignments ", e);
	//       res.json({
	//         status : false, 
	//         error : "Internal server error."
	//       });
	//     }
	//   });
	// }
	
	/**
	*  @Function name : studentCourseList
	*  @Purpose : For fetching complete course data in student side
	*  @Request Object : query : { page, items, search }
	*  @Response Object : Success - course data and count, Failure - Error message
	*  @Author : pranathi
	*/
	
	function studentCourseList(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      // Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        var room_selector = {
	          corporateId: person.profile.companyid._id
	        };
	
	        if (req.query.search && req.query.search != '') {
	          var slash_search = (0, _slashesActions.addSlash)(req.query.search);
	          var searchKey = RegExp(slash_search, 'i');
	          room_selector['roomName'] = searchKey;
	        }
	
	        _room2.default.find(room_selector).select('_id').exec(function (roomIdErr, roomIdsData) {
	          if (roomIdErr) {
	            res.json({ status: false, error: roomIdErr.message });
	          } else if (roomIdsData && roomIdsData.length > 0) {
	            var roomIds = roomIdsData.map(function (d) {
	              return d._id;
	            });
	
	            var listroom = req.query;
	            var find_query = _students2.default.aggregate([{ $match: {
	                students: { $in: [person._id] },
	                roomId: { $in: roomIds }
	              }
	            }, {
	              $group: { _id: '$roomId' }
	            }, {
	              $skip: Number(listroom.items) * (Number(listroom.page) - 1)
	            }, {
	              $limit: Number(listroom.items)
	            }, {
	              $sort: { createdOn: -1 }
	            }]);
	
	            var count_query = _students2.default.aggregate([{ $match: {
	                students: { $in: [person._id] },
	                roomId: { $in: roomIds }
	              }
	            }, {
	              $group: { _id: '$roomId' }
	            }]);
	
	            find_query.exec(function (err, result) {
	              if (err) {
	                res.json({ status: false, error: err.message });
	              } else if (result && result.length > 0) {
	
	                //function for populate roomName rommType from Room collection
	                var processResult = function processResult() {
	                  var data = result[len - 1];
	
	                  _room2.default.findOne({ _id: data._id }, { roomName: 1, roomType: 1, createdOn: 1, expiryDate: 1 }, function (roomerr, room) {
	                    if (roomerr) {
	                      res.json({ status: false, error: roomerr.message });
	                    } else if (room) {
	                      data['roomId'] = room;
	                      len = len - 1;
	                      if (len > 0) {
	                        processResult();
	                      } else {
	                        count_query.exec(function (error, countData) {
	                          var count = countData ? countData.length : 0;
	                          res.json({ status: true, data: result, count: count });
	                        });
	                      }
	                    }
	                  });
	                };
	
	                var len = result.length;
	                processResult();
	              } else {
	                res.json({ status: true, data: [], count: 0 });
	              }
	            });
	          } else {
	            res.json({ status: false, error: 'No Room Data' });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in student course list", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : studentsSubmissionAssignment
	*  @Purpose : For fetching particular assignment submitted sudents count 
	*  @Request Object : params : { rid: "room id", id: 'assignment id' }
	*  @Response Object : Success - assignment report data, Failure - Error message
	*  @Author : pranathi
	*/
	
	// export function studentsSubmissionAssignment(req, res) {
	//   checkValidRequest(req.headers, function(person) {
	
	//     try {
	
	//       //Verifying if request is valid or not
	//       if (person == null || !req.params.id || !req.params.rid) {
	//         res.json({
	//           status: false, 
	//           error : "Invalid request."  
	//         });
	//       } else {
	
	//         //Validating if room id is valid or not
	//         if (!req.params.rid || validator.isEmpty(req.params.rid) || !mongoose.Types.ObjectId.isValid(req.params.rid)) {
	//           res.json({
	//             status: false, 
	//             error : "Invalid room"
	//           });
	//         } else {
	//           var recordId = req.params.rid;
	//           var assignmentId = mongoose.Types.ObjectId(req.params.id);
	
	//           //For finding student data based on room id and inst id
	//           var query = Student.findOne({ 
	//             roomId : recordId,
	//             instId : person._id
	//           });
	
	//           query.select('students')
	//           .exec(function (stuErr, stuDoc) {
	//             if (stuErr){ 
	//               res.json({ 
	//                 status: false, 
	//                 error : stuErr.message, 
	//                 message : "Error while retriving student data." 
	//               });
	//             } 
	//             if (stuDoc) {
	//               var totalStudents = 0;
	//               var assignmentSubmittedStudents = 0;
	
	//               //Verifying if student array length is greater than zero or not
	//               if (stuDoc.students.length > 0) {
	//                 totalStudents += stuDoc.students.length
	
	//                 //Query for finding  students data for those students who have submitted assignment
	//                 let selector = {
	//                   roomId : recordId,
	//                   createdBy : person._id, 
	//                   _id:assignmentId
	//                 }
	
	//                 Assignment.findOne(selector)
	//                 .select('submissions')
	//                 .exec(function (assignErr, assignData) {
	//                   if (assignErr) {
	//                     res.json({ 
	//                       status: false, 
	//                       error: assignErr.message, 
	//                     });
	//                   }
	//                   if (_.isEmpty(assignData.submissions)) {
	//                     res.json({ 
	//                       status: false, 
	//                       error: 'No data', 
	//                     });
	//                   } else {
	//                     assignmentSubmittedStudents += assignData.submissions.length;
	//                     var assignmentNotSubmittedStudents = totalStudents - assignmentSubmittedStudents;
	
	//                     let obj = {
	//                       notSubmittedStudents : (assignmentNotSubmittedStudents/totalStudents)*100,
	//                       submittedStudents : (assignmentSubmittedStudents/totalStudents)*100,
	//                       totalRecords : (totalStudents/totalStudents)*100
	//                     }
	
	//                     res.json({ 
	//                       status: true, 
	//                       data: obj, 
	//                     });
	//                   }
	//                 });
	//               }
	
	//             } else {
	//               res.json({ 
	//                 status: false, 
	//                 data: 'No students', 
	//               });
	//             }
	//           })
	//         }
	//       }
	//     } catch(e) {
	//       console.log("Error in students submission assignment", e);
	//       res.json({
	//         status : false, 
	//         error : "Internal server error."
	//       });
	//     }
	//   });
	// }
	
	/**
	*  @Function name : activeUsers
	*  @Purpose : For fetching login users report 
	*  @Request Object : query : { companyId, fromDate ,toDate }
	*  @Response Object : Success - obj , Failure - Error message
	*  @Author : pranathi
	*/
	
	function activeUsers(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	
	    try {
	      //Verifying if request is valid or not
	      if (person == null || !req.query.companyId || !mongoose.Types.ObjectId.isValid(req.query.companyId)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        var selector = {};
	        if (person.role == _adminUser.Roles.Superadmin) {
	          selector = {
	            _id: { $ne: person._id },
	            'guest': false,
	            'userStatus': 'Active'
	          };
	        } else if (person.role == _adminUser.Roles.Admin || person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Presenteradmin) {
	          selector = {
	            _id: { $ne: person._id },
	            'profile.companyid': req.query.companyId,
	            'guest': false,
	            'userStatus': 'Active'
	          };
	        }
	
	        //finding corporate users id's  based on corporateid or uId
	        _users2.default.find(selector).select('_id').exec(function (usersErr, usersData) {
	          if (usersErr) {
	            res.json({
	              status: false,
	              error: usersErr.message
	            });
	          } else if (usersData && usersData.length > 0) {
	
	            var userIds = usersData.map(function (d) {
	              return d._id.toString();
	            });
	            var obj = {};
	
	            _datalog2.default.find({
	              uid: { $in: userIds },
	              category: 'User',
	              action: 'Log_In',
	              'value.logged': true,
	              dateAdded: { $gte: req.query.fromDate, $lte: req.query.toDate }
	            }).distinct('uid').exec(function (loginUserErr, loginUserData) {
	              if (loginUserErr) {
	                res.json({
	                  status: false,
	                  error: loginUserErr.message
	                });
	              } else {
	                var activeUsersIds = [];
	                loginUserData.forEach(function (value) {
	                  activeUsersIds.push(value.toString());
	                });
	                obj['TotalUsersCount'] = userIds.length / userIds.length * 100;
	                obj['ActiveUsersCount'] = loginUserData.length / userIds.length * 100;
	
	                var inactiveUsersIds = _.difference(userIds, activeUsersIds);
	                obj['InactiveUsersCount'] = inactiveUsersIds.length / userIds.length * 100;
	                obj['ActiveUsersIds'] = activeUsersIds;
	                obj['InactiveUsersIds'] = inactiveUsersIds;
	                obj['TotalUserIds'] = userIds;
	
	                res.json({
	                  status: true,
	                  data: obj
	                });
	              }
	            });
	          } else {
	            res.json({
	              status: true,
	              data: null
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in activeUsers", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listActiveUsers
	*  @Purpose : For fetching login users list data 
	*  @Request Object : usersData : { usersData }
	*  @Response Object : Success - active users  data and count, Failure - Error message
	*  @Author : pranathi
	*/
	
	function listActiveUsers(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      var usersData = req.body.usersData;
	      // Verifying if request is valid or not
	      if (person == null || !usersData.itemsPerPage || !usersData.currentPage || !usersData.listIds) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        var selector = {
	          _id: { $in: usersData.listIds }
	        };
	
	        //If search is not empty then create RegExp
	
	        if (usersData.searchKeyword && usersData.searchKeyword != '') {
	          var slash_search = (0, _slashesActions.addSlash)(usersData.searchKeyword);
	          var searchKey = RegExp(slash_search, 'i');
	
	          selector['$or'] = [{ 'firstname': { $regex: searchKey } }, { 'lastname': { $regex: searchKey } }];
	        }
	
	        var query = _users2.default.find(selector).select('firstname lastname email role profile').populate('profile.companyid', 'businessId _id').limit(Number(usersData.itemsPerPage)).skip(Number(usersData.itemsPerPage) * (Number(usersData.currentPage) - 1)).sort({ createdOn: -1 });
	
	        //Query for counting complete active users data based on selector
	        var usersCount = _users2.default.count(selector);
	
	        query.exec(function (err, result) {
	          if (err) {
	            res.json({ status: false, error: err.message });
	          } else {
	            usersCount.exec(function (error, count) {
	              res.json({ status: true, data: result, count: count });
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in listActiveUsers", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : courseAttendance
	*  @Purpose : For fetching course users attendance report 
	*  @Request Object : query : { rId, fromDate ,toDate }
	*  @Response Object : Success - obj , Failure - Error message
	*  @Author : pranathi
	*/
	
	function courseAttendance(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      // Verifying if request is valid or not
	      if (person == null || !req.query.rId || !mongoose.Types.ObjectId.isValid(req.query.rId) || !req.query.fromDate || !req.query.toDate) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        var fromDate = moment(req.query.fromDate, "x").utc().toDate();
	        var toDate = moment(req.query.toDate, "x").utc().toDate();
	
	        //fetching room users based on roomId
	        _room2.default.findOne({ _id: req.query.rId }).select('users').populate('users', '_id role', { guest: false }).exec(function (courseErr, courseUsers) {
	          if (courseErr) {
	            res.json({
	              status: false,
	              error: courseErr.message
	            });
	          } else if (courseUsers && courseUsers.users && courseUsers.users.length > 0) {
	            var obj = {};
	
	            //based on role showing reports 
	            if (_adminUser.Roles.Lmsadmin == person.role) {
	              var totalInstructorIds = [];
	              var stringTotalInsIds = [];
	
	              //seperating instructor ids from total users 
	              courseUsers.users.forEach(function (user) {
	                if (_adminUser.Roles.Instructor == user.role) {
	                  totalInstructorIds.push(user._id);
	                  stringTotalInsIds.push(user._id.toString());
	                }
	              });
	
	              if (totalInstructorIds.length > 0) {
	                var InsQuery = _datalog2.default.aggregate([{
	                  $match: {
	                    uid: { $in: totalInstructorIds },
	                    category: 'Attendance',
	                    action: 'CheckIn',
	                    'value.courseId': req.query.rId,
	                    dateAdded: { $gte: fromDate, $lte: toDate }
	                  }
	                }, {
	                  $group: { _id: '$uid' }
	                }]);
	                // fetching attended ins unique ids from dataLogs
	                InsQuery.exec(function (insErr, insData) {
	                  if (insErr) {
	                    res.json({
	                      status: false,
	                      error: insErr.message
	                    });
	                  } else {
	                    var presnetInsIds = insData.map(function (d) {
	                      return d._id.toString();
	                    });
	                    var absentInsIds = _.difference(stringTotalInsIds, presnetInsIds);
	
	                    obj['presentInsCount'] = insData.length / totalInstructorIds.length * 100;
	                    obj['presentInsIds'] = presnetInsIds;
	                    obj['absentInsCount'] = absentInsIds.length / totalInstructorIds.length * 100;
	                    obj['absentInsIds'] = absentInsIds;
	
	                    //fetching course students ids
	                    studentAttendance(req.query.rId, fromDate, toDate, function (err, studentData) {
	                      if (studentData == null) {
	                        obj['presentStuCount'] = 0;
	                        obj['absentStuCount'] = 0;
	                        res.json({
	                          status: true,
	                          data: obj
	                        });
	                      } else if (studentData != null) {
	                        var absentStudents = _.difference(studentData.totalStuIds, studentData.presentStuIds);
	                        obj['presentStuCount'] = studentData.presentStuIds.length / studentData.totalStuIds.length * 100;
	                        obj['presentStuIds'] = studentData.presentStuIds;
	                        obj['absentStuCount'] = absentStudents.length / studentData.totalStuIds.length * 100;
	                        obj['absentStuIds'] = absentStudents;
	
	                        res.json({ status: true, data: obj });
	                      } else {
	                        res.json({
	                          status: false,
	                          error: err
	                        });
	                      }
	                    });
	                  }
	                });
	              } else {
	                obj['presentInsCount'] = 0;
	                obj['absentInsCount'] = 0;
	                obj['presentStuCount'] = 0;
	                obj['absentStuCount'] = 0;
	
	                res.json({ status: true, data: obj });
	              }
	            } else if (_adminUser.Roles.Instructor == person.role) {
	              studentAttendance(req.query.rId, fromDate, toDate, function (err, studentData) {
	                if (studentData == null) {
	                  obj['presentStuCount'] = 0;
	                  obj['absentStuCount'] = 0;
	                  res.json({
	                    status: true,
	                    data: obj
	                  });
	                } else if (studentData != null) {
	                  var absentStudents = _.difference(studentData.totalStuIds, studentData.presentStuIds);
	                  obj['presentStuCount'] = studentData.presentStuIds.length / studentData.totalStuIds.length * 100;
	                  obj['presentStuIds'] = studentData.presentStuIds;
	                  obj['absentStuCount'] = absentStudents.length / studentData.totalStuIds.length * 100;
	                  obj['absentStuIds'] = absentStudents;
	
	                  res.json({ status: true, data: obj });
	                } else {
	                  res.json({
	                    status: false,
	                    error: err
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: false,
	                error: 'access denied'
	              });
	            }
	          } else {
	            res.json({
	              status: true,
	              data: null
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in Course Attendance ", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	function studentAttendance(rId, fromDate, toDate, callBack) {
	
	  _students2.default.find({ roomId: rId }, { '_id': 0, 'students': 1 }).populate('students', '_id', { guest: false }).lean().exec(function (stuErr, stuData) {
	    if (stuErr) {
	      callBack(stuErr.message, null);
	    } else if (stuData && stuData.length > 0) {
	
	      //changeBy : pranathi, disc: removing guest users from stuData
	      //pushing multiple array ids in to one array
	      var studentDupArrayIds = [];
	      stuData.forEach(function (data) {
	        studentDupArrayIds = _.unionBy(data.students, studentDupArrayIds);
	      });
	      var studentDupIds = studentDupArrayIds.map(function (d) {
	        return d._id;
	      });
	
	      //getting unique student ids from stuData
	      if (studentDupIds.length > 0) {
	        //seperating unique studentIds from studentDupIds
	        var stuIdObjData = void 0;
	        stuIdObjData = new Set(studentDupIds.toString().split(","));
	
	        var studentArrayData = Array.from(stuIdObjData);
	        var studentIds = [];
	        for (var i = 0; i < studentArrayData.length; i++) {
	          studentIds.push(mongoose.Types.ObjectId(studentArrayData[i]));
	        }
	
	        var StuQuery = _datalog2.default.aggregate([{
	          $match: {
	            uid: { $in: studentIds },
	            category: 'Attendance',
	            action: 'CheckIn',
	            'value.courseId': rId,
	            dateAdded: { $gte: fromDate, $lte: toDate }
	          }
	        }, {
	          $group: { _id: '$uid' }
	        }]);
	        // fetching attended students unique ids from dataLogs
	        StuQuery.exec(function (presentStuErr, presentStuData) {
	          if (presentStuErr) {
	            callBack(AttdStuErr.message, null);
	          } else if (presentStuData && presentStuData.length > 0) {
	            var presentStuIds = presentStuData.map(function (d) {
	              return d._id.toString();
	            });
	            callBack(null, { "presentStuCount": presentStuIds.length, "presentStuIds": presentStuIds, "totalStuCount": studentIds.length, "totalStuIds": studentArrayData });
	          } else {
	            callBack(null, { "presentStuCount": 0, "presentStuIds": [], "totalStuCount": studentIds.length, "totalStuIds": studentArrayData });
	          }
	        });
	      } else {
	        callBack(null, null);
	      }
	    } else {
	      // callBack(null,{"presentStuCount":0, "totalStuCount":0});  
	      callBack(null, null);
	    }
	  });
	}
	
	/**
	*  @Function name : individualAttendance
	*  @Purpose : For fetching individual attendance data 
	*  @Request Object : query : { rId, uId, fromDate, toDate }
	*  @Response Object : Success - attendance data , Failure - Error message
	*  @Author : pranathi
	*/
	
	function individualAttendance(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      //Verifying if request is valid or not
	      if (person == null && !req.query.rId && !req.query.uId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        //Validating if room id is valid or not
	        if (!req.query.rId || validator.isEmpty(req.query.rId) || !mongoose.Types.ObjectId.isValid(req.query.rId)) {
	          res.json({
	            status: false,
	            error: "Invalid room"
	          });
	        } else {
	
	          var obj = {};
	
	          var fromDate = moment(req.query.fromDate, "x").utc().toDate();
	          var toDate = moment(req.query.toDate, "x").utc().toDate();
	
	          var offlineVisitsSelector = {
	            uid: mongoose.Types.ObjectId(req.query.uId),
	            category: 'Attendance',
	            action: 'CheckIn',
	            'value.courseId': req.query.rId,
	            $or: [{ 'value.schedule': false }, { 'value.schedule': 'false' }],
	            dateAdded: { $gte: fromDate, $lte: toDate }
	          };
	
	          var onlineVisitsSelector = {
	            uid: mongoose.Types.ObjectId(req.query.uId),
	            category: 'Attendance',
	            action: 'CheckIn',
	            'value.courseId': req.query.rId,
	            $or: [{ 'value.schedule': true }, { 'value.schedule': 'true' }],
	            dateAdded: { $gte: fromDate, $lte: toDate }
	            //fetching offline attended room users in dataLog
	          };_datalog2.default.find(offlineVisitsSelector).select('_id').lean().exec(function (offlineVisitErr, offlineVisitRes) {
	            if (offlineVisitErr) {
	              res.json({
	                error: offlineVisitErr.message,
	                status: false
	              });
	            } else {
	              obj['offlineVisitsCount'] = offlineVisitRes.length;
	              obj['offlineVisitsIds'] = offlineVisitRes.map(function (d) {
	                return d._id.toString();
	              });
	              //fetching conference attended users in datalog
	              _datalog2.default.find(onlineVisitsSelector).distinct('value.slotId').lean().exec(function (onlineVisitErr, onlineVisitRes) {
	                if (onlineVisitErr) {
	                  res.json({
	                    error: onlineVisitErr.message,
	                    status: false
	                  });
	                } else {
	                  obj['onlineVisitsCount'] = onlineVisitRes.length;
	
	                  //fetching users multiple times attednded slot ids 
	                  _datalog2.default.find(onlineVisitsSelector).select('value.slotId').lean().exec(function (onlineIdsErr, onlineIdsRes) {
	                    if (onlineIdsErr) {
	                      res.json({ error: onlineIdsErr.message, status: false });
	                    } else {
	                      obj['onlineVisitsIds'] = onlineIdsRes.map(function (d) {
	                        return d._id.toString();
	                      });
	
	                      var totalQuery = _schedule2.default.aggregate([{
	                        $unwind: '$dates'
	                      }, {
	                        $match: {
	                          'dates.startTime': { $gte: Number(req.query.fromDate), $lte: Number(req.query.toDate) },
	                          roomId: mongoose.Types.ObjectId(req.query.rId)
	                        }
	                      }, {
	                        $group: { _id: '$dates._id' }
	                      }]);
	                      //fetching total schedules 
	                      totalQuery.exec(function (totalSchedulesErr, totalSchedulesData) {
	                        if (totalSchedulesErr) {
	                          res.json({
	                            error: totalSchedulesErr.message,
	                            status: false
	                          });
	                        } else {
	                          var TotalSchedulesIds = totalSchedulesData.map(function (d) {
	                            return d._id.toString();
	                          });
	                          obj['totalVisitsCount'] = totalSchedulesData.length;
	                          obj['totalVisitsIds'] = totalSchedulesData.map(function (d) {
	                            return d._id.toString();
	                          });
	
	                          obj['absentSchedulesCount'] = totalSchedulesData.length - obj.onlineVisitsCount;
	                          obj['absentSchedulesIds'] = _.difference(TotalSchedulesIds, onlineVisitRes);
	                          if (obj.offlineVisitsCount != 0 || obj.onlineVisitsCount != 0 || obj.totalVisitsCount != 0 || obj.absentSchedulesCount != 0) {
	                            res.json({
	                              status: true,
	                              data: obj
	                            });
	                          } else {
	                            res.json({
	                              status: true,
	                              data: null
	                            });
	                          }
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error in Individual Attendance ", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listIndividualAttendance
	*  @Purpose : For fetching individual attendance list data 
	*  @Request Object : attendanceData : { attendanceData }
	*  @Response Object : Success - attendance data and count, Failure - Error message
	*  @Author : pranathi
	*/
	
	function listIndividualAttendance(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      var attendanceData = req.body.attendanceData;
	
	      // Verifying if request is valid or not
	      if (person == null || !attendanceData.itemsPerPage || !attendanceData.currentPage || !attendanceData.listIds) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var selector = {
	          _id: { $in: attendanceData.listIds }
	
	          //Query for fetching checkInTime checkOutTime dates from dataLogs 
	        };var query = _datalog2.default.find(selector).select('dateAdded value.checkOutTime').limit(Number(attendanceData.itemsPerPage)).skip(Number(attendanceData.itemsPerPage) * (Number(attendanceData.currentPage) - 1)).sort({ dateAdded: -1 });
	
	        //Query for counting attendance data from dataLogs 
	        var countQuery = _datalog2.default.count(selector);
	        query.exec(function (err, result) {
	          if (err) {
	            res.json({
	              error: err.message,
	              status: false
	            });
	          } else {
	            countQuery.exec(function (countErr, countData) {
	              res.json({ status: true, data: result, count: countData });
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in List Individual Attendance ", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listTotalSchedules
	*  @Purpose : For fetching Total Schedules list data 
	*  @Request Object : scheduleData : { scheduleData }
	*  @Response Object : Success - schedule data and count, Failure - Error message
	*  @Author : pranathi
	*/
	
	function listTotalSchedules(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      var scheduleData = req.body.scheduleData;
	
	      // Verifying if request is valid or not
	      if (person == null || !scheduleData.itemsPerPage || !scheduleData.currentPage || !scheduleData.listIds) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var listIds = [];
	        scheduleData.listIds.forEach(function (value) {
	          listIds.push(mongoose.Types.ObjectId(value));
	        });
	
	        //Query for fetching complete schedules 
	        var ScheduleQuery = _schedule2.default.aggregate([{
	          $unwind: '$dates'
	        }, {
	          $match: {
	            'dates._id': { $in: listIds }
	          }
	        }, {
	          $group: {
	            _id: {
	              startTime: '$dates.startTime',
	              endTime: '$dates.endTime'
	            }
	          }
	        }, {
	          $skip: Number(scheduleData.itemsPerPage) * (Number(scheduleData.currentPage) - 1)
	        }, {
	          $limit: Number(scheduleData.itemsPerPage)
	        }, {
	          $sort: { createdAt: -1 }
	        }]);
	
	        //Query for counting complete schedules  
	        var ScheduleCount = _schedule2.default.aggregate([{
	          $unwind: '$dates'
	        }, {
	          $match: {
	            'dates._id': { $in: listIds }
	          }
	        }, {
	          $group: { _id: '$dates._id' }
	        }]);
	
	        ScheduleQuery.exec(function (scheduleErr, scheduleData) {
	          if (scheduleErr) {
	            res.json({
	              status: false,
	              error: scheduleErr.message
	            });
	          } else {
	            ScheduleCount.exec(function (countErr, countData) {
	              var count = countData ? countData.length : 0;
	              res.json({ status: true, data: scheduleData, count: count });
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in List TotalSchedules ", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : courseTopics
	*  @Purpose : For fetching course topics  data 
	*  @Request Object : params : rId
	*  @Response Object : Success - topics data , Failure - Error message
	*  @Author : pranathi
	*/
	function courseTopics(req, res) {
	
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      // Verifying if request is valid or not
	      if (person == null || !req.params.rId || !mongoose.Types.ObjectId.isValid(req.params.rId)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        //fetching topic names based on the courseId and topicEnable
	        _topic2.default.find({ roomId: req.params.rId, topicEnable: true }).select('_id topicName').exec(function (topicErr, topicData) {
	          if (topicErr) {
	            res.json({
	              status: false,
	              error: topicErr.message
	            });
	          } else {
	            res.json({
	              status: true,
	              data: topicData
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in Course Topics ", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : courseUsers
	*  @Purpose : For fetching course Users  data 
	*  @Request Object:params : rId
	*  @Response Object : Success - users data , Failure - Error message
	*  @Author : Rajesh Goriga
	*/
	function courseUsers(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      // Verifying if request is valid or not
	      if (person == null || !req.params.rId || !mongoose.Types.ObjectId.isValid(req.params.rId)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var obj = {
	          uid: person._id,
	          role: person.role,
	          rid: req.params.rId
	        };
	        var selector = null;
	        if (obj.role == _adminUser.Roles.Lmsadmin) {
	          selector = {
	            roomId: mongoose.Types.ObjectId(obj.rid)
	          };
	        } else if (obj.role == _adminUser.Roles.Instructor) {
	          selector = {
	            roomId: mongoose.Types.ObjectId(obj.rid),
	            instId: mongoose.Types.ObjectId(obj.uid)
	          };
	        }
	
	        if (selector != null) {
	          var query = _students2.default.aggregate([{ $unwind: "$students" }, { $match: selector }, { $group: { _id: null, stds: { $addToSet: "$students" } } }, { $project: { _id: 0, students: "$stds" } }]);
	          query.exec(function (stuErr, stuData) {
	            if (stuErr) res.json({ status: false, error: stuErr.message });else if (stuData && stuData.length > 0) {
	              _users2.default.find({ _id: { $in: stuData[0].students }, "guest": false }, { firstname: 1 }, function (err, students) {
	                if (err) {
	                  res.json({ status: false, error: err.message });
	                } else {
	                  res.json({ status: true, data: students });
	                }
	              });
	            } else {
	              res.json({ status: false, error: 'users not found' });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : topicViewedUsers
	*  @Purpose : For fetching topic Viewed Users Data
	*  @Request Object : query : { topicId,rId}
	*  @Response Object : Success -  obj , Failure - Error message
	*  @Author : pranathi
	*/
	function topicViewedUsers(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      //Verifying if request is valid or not
	      if (person == null && !req.query.topicId && !req.query.rId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        var objEntity = {
	          uid: person._id,
	          role: person.role,
	          rid: req.query.rId
	        };
	
	        //fetching students ids based on role
	        getStudentsList(objEntity, function (studenterr, students) {
	          if (students != null) {
	
	            var obj = {};
	
	            //checking whether req is  ALL topics  or individula topics based on topicId
	            if (req.query.topicId == 'ALL') {
	
	              //fetching all topic ids based on roomId and topicEnable
	              _topic2.default.find({ roomId: objEntity.rid, topicEnable: true }).select('_id').exec(function (topicErr, topicData) {
	                if (topicErr) {
	                  res.json({
	                    status: false,
	                    error: topicErr.message
	                  });
	                } else if (topicData && topicData.length > 0) {
	
	                  var topicIds = topicData.map(function (d) {
	                    return d._id.toString();
	                  });
	
	                  var viewedTopicsSelector = _datalog2.default.aggregate([{
	                    $match: {
	                      uid: { $in: students.studentIds },
	                      category: 'Topic_Status',
	                      'value.roomId': objEntity.rid,
	                      'value.topicId': { $in: topicIds }
	                    }
	                  }, {
	                    $group: {
	                      _id: '$value.topicId'
	                    }
	                  }]);
	
	                  //fetching unique viewed topic ids from dataLog
	                  viewedTopicsSelector.exec(function (viewedTopicsErr, viewedTopicsIds) {
	                    if (viewedTopicsErr) {
	                      res.json({ status: false, error: viewedTopicsErr.error });
	                    } else if (viewedTopicsIds && viewedTopicsIds.length > 0) {
	                      var ViewedTopicsIds = viewedTopicsIds.map(function (d) {
	                        return d._id.toString();
	                      });
	
	                      var completedTopicsSelector = {
	                        uid: { $in: students.studentIds },
	                        category: 'Topic_Status',
	                        'value.status': 2,
	                        'value.roomId': objEntity.rid,
	                        'value.topicId': { $in: topicIds }
	
	                        //finding the completely viewed topics users data
	                      };_datalog2.default.find(completedTopicsSelector).select('uid value.topicId').exec(function (completedTopicsErr, completedTopicsIds) {
	                        if (completedTopicsErr) {
	                          res.json({ status: false, error: completedTopicsErr.error });
	                        } else if (completedTopicsIds && completedTopicsIds.length > 0) {
	
	                          var tpIds = {};
	
	                          //creating object topic id with users
	                          for (var i in completedTopicsIds) {
	                            var id = completedTopicsIds[i].value.topicId;
	                            var uid = completedTopicsIds[i].uid;
	                            if (tpIds[id]) {
	                              var index = tpIds[id].indexOf(uid);
	                              if (index <= -1) {
	                                tpIds[id].push(uid);
	                              }
	                            } else {
	                              tpIds[id] = [uid];
	                            }
	                          }
	
	                          var completedIds = [];
	
	                          //checking completely viewed topics ids with student ids
	                          for (var key in tpIds) {
	                            if (tpIds.hasOwnProperty(key)) {
	                              var value = tpIds[key];
	                              if (value.length == students.studentIds.length) {
	                                completedIds.push(key);
	                              }
	                            }
	                          }
	
	                          var inprogressTopicsIds = _.difference(ViewedTopicsIds, completedIds);
	                          var notAtAllViewedTopicsIds = _.difference(topicIds, ViewedTopicsIds);
	
	                          obj['notAtAllViewedTopicsCount'] = (topicIds.length - ViewedTopicsIds.length) / topicIds.length * 100;
	                          obj['notAtAllViewedTopicsIds'] = notAtAllViewedTopicsIds;
	
	                          obj['inprogressTopicsCount'] = inprogressTopicsIds.length / topicIds.length * 100;
	                          obj['inprogressTopicsIds'] = inprogressTopicsIds;
	
	                          obj['completedTopicsCount'] = completedIds.length / topicIds.length * 100;
	                          obj['completedTopicsIds'] = completedIds;
	
	                          res.json({ status: true, data: obj });
	                        } else {
	                          var _notAtAllViewedTopicsIds = _.difference(topicIds, ViewedTopicsIds);
	                          obj['notAtAllViewedTopicsCount'] = (topicIds.length - ViewedTopicsIds.length) / topicIds.length * 100;
	                          obj['notAtAllViewedTopicsIds'] = _notAtAllViewedTopicsIds;
	
	                          obj['inprogressTopicsCount'] = ViewedTopicsIds.length / topicIds.length * 100;
	                          obj['inprogressTopicsIds'] = ViewedTopicsIds;
	
	                          obj['completedTopicsCount'] = 0;
	
	                          res.json({ status: true, data: obj });
	                        }
	                      });
	                    } else {
	                      obj['notAtAllViewedTopicsCount'] = topicIds.length / topicIds.length * 100;
	                      obj['notAtAllViewedTopicsIds'] = topicIds;
	                      obj['inprogressTopicsCount'] = 0;
	                      obj['completedTopicsCount'] = 0;
	
	                      res.json({ status: true, data: obj });
	                    }
	                  });
	                } else {
	                  res.json({
	                    status: true,
	                    data: null
	                  });
	                }
	              });
	            } else {
	
	              var completedTopicSelector = {
	                uid: { $in: students.stringStudentIds },
	                category: 'Topic_Status',
	                'value.status': 2,
	                'value.roomId': objEntity.rid,
	                'value.topicId': req.query.topicId
	              };
	              var inprogressTopicSelector = {
	                uid: { $in: students.stringStudentIds },
	                category: 'Topic_Status',
	                'value.status': 1,
	                'value.roomId': objEntity.rid,
	                'value.topicId': req.query.topicId
	              };
	              var notAtAllViewedTopicSelector = {
	                uid: { $in: students.stringStudentIds },
	                category: 'Topic_Status',
	                'value.roomId': objEntity.rid,
	                'value.topicId': req.query.topicId
	
	                //fetching the completly viewed topic users data 
	              };_datalog2.default.find(completedTopicSelector).select('uid').exec(function (completedTopicUserIdsErr, completedTopicUserIds) {
	                if (completedTopicUserIdsErr) {
	                  res.json({ status: false, error: completedTopicUserIdsErr.message });
	                } else {
	
	                  //fetching the inprogress topic viewed users data
	                  _datalog2.default.find(inprogressTopicSelector).select('uid').exec(function (inprogressTopicUserIdsErr, inprogressTopicUserIds) {
	                    if (inprogressTopicUserIdsErr) {
	                      res.json({ status: false, error: inprogressTopicUserIdsErr.message });
	                    } else {
	
	                      //fetching the not at all viewed topic users data
	                      _datalog2.default.find(notAtAllViewedTopicSelector).select('uid').exec(function (notAtAllViewedTopicUsersErr, notAtAllViewedTopicUsersData) {
	                        if (notAtAllViewedTopicUsersErr) {
	                          res.json({ status: false, error: notAtAllViewedTopicUsersErr.message });
	                        } else {
	
	                          var ViewedUserIds = notAtAllViewedTopicUsersData.map(function (d) {
	                            return d.uid.toString();
	                          });
	                          var CompletedUserIds = completedTopicUserIds.map(function (d) {
	                            return d.uid.toString();
	                          });
	                          var InprogressUserIds = inprogressTopicUserIds.map(function (d) {
	                            return d.uid.toString();
	                          });
	
	                          var notAtAllViewedUsers = _.difference(students.stringStudentIds, ViewedUserIds);
	
	                          obj['completedTopicUsersCount'] = CompletedUserIds.length;
	                          obj['completedTopicUsersIds'] = CompletedUserIds;
	
	                          obj['inprogressTopicUsersCount'] = InprogressUserIds.length;
	                          obj['inprogressTopicUsersIds'] = InprogressUserIds;
	
	                          obj['notAtAllViewedTopicUsersCount'] = notAtAllViewedUsers.length;
	                          obj['notAtAllViewedTopicUsersIds'] = notAtAllViewedUsers;
	
	                          res.json({ status: true, data: obj });
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            }
	          } else if (students == null) {
	            res.json({
	              status: true,
	              data: null
	            });
	          } else {
	            res.json({
	              status: false,
	              error: studenterr
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in Topic Viewed Users", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	function getStudentsList(obj, callback) {
	  var selector = null;
	
	  //based on role fetching studentIds
	  if (obj.role == _adminUser.Roles.Lmsadmin) {
	    selector = {
	      roomId: obj.rid
	    };
	  } else if (obj.role == _adminUser.Roles.Instructor) {
	    selector = {
	      roomId: obj.rid,
	      instId: obj.uid
	    };
	  }
	
	  if (selector != null) {
	    _students2.default.find(selector, { '_id': 0, 'students': 1 }).populate('students', '_id', { guest: false }).lean().exec(function (stuErr, stuData) {
	      if (stuErr) {
	        callback(stuErr.message, null);
	      } else if (stuData && stuData.length > 0) {
	        //pushing multiple array ids in to one array
	        var studentDupArrayIds = [];
	        stuData.forEach(function (data) {
	          studentDupArrayIds = _.unionBy(data.students, studentDupArrayIds);
	        });
	
	        var studentDupIds = studentDupArrayIds.map(function (d) {
	          return d._id;
	        });
	
	        if (studentDupIds.length > 0) {
	          //seperating unique studentIds from studentDupIds array
	          var stuIdObjData = new Set(studentDupIds.toString().split(","));
	          var studentArrayData = Array.from(stuIdObjData);
	          var studentIds = [];
	          var stringStudentIds = [];
	          for (var i = 0; i < studentArrayData.length; i++) {
	            studentIds.push(mongoose.Types.ObjectId(studentArrayData[i]));
	            stringStudentIds.push(studentArrayData[i]);
	          }
	
	          callback(null, { "studentIds": studentIds, "stringStudentIds": stringStudentIds });
	        } else {
	          callback(null, null);
	        }
	      } else {
	        callback(null, null);
	      }
	    });
	  }
	}
	
	/**
	*  @Function name : listTopicViewedUsers
	*  @Purpose : For fetching  topic viewed  users data list 
	*  @Request Object : topicViewedUsersData : { topicViewedUsersData }
	*  @Response Object : Success -  viewed topics list and count, Failure - Error message
	*  @Author : pranathi
	*/
	function listTopicViewedUsers(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      var data = req.body.topicViewedUsersData;
	
	      // Verifying if request is valid or not
	      if (person == null || !data.itemsPerPage || !data.currentPage || !data.listIds) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var selector = {
	          _id: { $in: data.listIds }
	
	        };
	        //If search is not empty then create RegExp
	        if (data.searchKeyword && data.searchKeyword != '') {
	          var searchKey = RegExp(data.searchKeyword, 'i');
	          selector['$or'] = [{ 'firstname': { $regex: searchKey } }, { 'lastname': { $regex: searchKey } }];
	        }
	
	        var usersQuery = _users2.default.find(selector).select('firstname lastname email').limit(Number(data.itemsPerPage)).skip(Number(data.itemsPerPage) * (Number(data.currentPage) - 1)).sort({ dateAdded: -1 });
	
	        //Query for counting complete active users data based on selector
	        var usersCount = _users2.default.count(selector);
	
	        usersQuery.exec(function (err, result) {
	          if (err) {
	            res.json({ status: false, error: err.message });
	          } else {
	            usersCount.exec(function (error, count) {
	              res.json({ status: true, data: result, count: count });
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in List Topic Viewed Users", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : userViewedTopics
	*  @Purpose : For fetching  Users Viewed   data 
	*  @Request Object : query : { uId, rId, fromDate, toDate }
	*  @Response Object : Success - users data , Failure - Error message
	*  @Author : Rajesh Goriga
	*/
	
	function userViewedTopics(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person == null && !req.query.rId && !req.qury.fromDate && !req.query.toDate) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        if (req.query.uId == "ALL") {
	          var objEntity = {
	            uid: person._id,
	            role: person.role,
	            rid: req.query.rId
	          };
	          getStudentsList(objEntity, function (studenterr, students) {
	            if (students != null) {
	              var obj = {};
	              _topic2.default.find({ roomId: objEntity.rid, topicEnable: true }).select('_id').exec(function (topicErr, topicData) {
	                if (topicErr) {
	                  res.json({
	                    status: false,
	                    error: topicErr.message
	                  });
	                } else {
	                  if (topicData && topicData.length > 0) {
	                    var totalTopicsIds = topicData.map(function (d) {
	                      return d._id.toString();
	                    });
	                    var stdId = students.studentIds;
	                    var query = _datalog2.default.aggregate([{
	                      $match: {
	                        category: "Topic_Status",
	                        uid: {
	                          $in: stdId
	                        },
	                        'value.topicId': { $in: totalTopicsIds }
	                      }
	                    }, {
	                      $group: {
	                        '_id': {
	                          'userId': '$uid',
	                          'status': '$value.status',
	                          'topicId': '$value.topicId'
	                        }
	                      }
	                    }]);
	                    query.exec(function (error, CmTpc) {
	                      if (error) {
	                        res.json({
	                          status: false,
	                          error: error.message
	                        });
	                      } else {
	                        _users2.default.populate(CmTpc, {
	                          path: '_id.userId', select: 'firstname' }, function (err, populatedTransactions) {
	                          if (err) {
	                            res.json({ status: false, error: err.message });
	                          } else if (populatedTransactions && populatedTransactions.length > 0) {
	                            var TopicsArray = populatedTransactions.map(function (d) {
	                              return d._id;
	                            });
	                            var topicViewedUserIds = TopicsArray.map(function (d) {
	                              return d.userId._id.toString();
	                            });
	                            var topicViewedUserUniqIds = [].concat(_toConsumableArray(new Set(topicViewedUserIds)));
	
	                            var notAtAllViewedUsers = _.difference(students.stringStudentIds, topicViewedUserUniqIds);
	                            var viewedUsersObj = arrangeResults(TopicsArray);
	
	                            var notAtllViewedUsersObj = arrangeNotViewedUsers(notAtAllViewedUsers, function (err, data) {
	
	                              if (data && data.length > 0) {
	                                data.forEach(function (item) {
	                                  viewedUsersObj.array.push(item);
	                                });
	                              }
	
	                              obj['AllUsersResult'] = viewedUsersObj.array;
	                              obj['totalTopicsCount'] = totalTopicsIds.length;
	
	                              res.json({
	                                status: true,
	                                data: obj
	                              });
	                            });
	                          } else {
	                            _users2.default.find({ _id: { $in: students.studentIds } }).select('firstname').exec(function (stuErr, stuData) {
	                              if (stuErr) {
	                                res.json({ status: false, error: stuErr.message });
	                              } else {
	
	                                var newArray = [];
	                                for (var index in stuData) {
	                                  var object = {};
	                                  object['userId'] = stuData[index]['_id'].toString();
	                                  object['values'] = [];
	                                  object['username'] = stuData[index]['firstname'];
	                                  object['countOfCompleted'] = 0;
	                                  object['countOfInProgress'] = 0;
	                                  newArray.push(object);
	                                }
	                                obj['AllUsersResult'] = newArray;
	                                obj['totalTopicsCount'] = totalTopicsIds.length;
	
	                                res.json({
	                                  status: true,
	                                  data: obj
	                                });
	                              }
	                            });
	                          }
	                        });
	                      }
	                    });
	                  } else {
	                    res.json({
	                      status: true,
	                      data: null
	                    });
	                  }
	                }
	              });
	            } else if (students == null) {
	              res.json({
	                status: true,
	                data: null
	              });
	            } else {
	              res.json({
	                status: false,
	                error: studenterr
	              });
	            }
	          });
	        } else {
	          //changeBy: pranathi, disc: topics are empty sending data as null      
	          var _objEntity = {
	            courseId: req.query.rId,
	            uid: mongoose.Types.ObjectId(req.query.uId)
	          };
	
	          var obj = {};
	
	          var topicsQuery = _topic2.default.find({ roomId: _objEntity.courseId, topicEnable: true }, { _id: 1 });
	          topicsQuery.exec(function (topicsErr, topicsData) {
	            if (topicsErr) {
	              res.json({ status: false, error: topicsErr.message });
	            } else if (topicsData && topicsData.length > 0) {
	              var totalTopics = topicsData.map(function (d) {
	                return d._id.toString();
	              });
	
	              var completedTopicsSelector = _datalog2.default.find({
	                uid: _objEntity.uid, category: 'Topic_Status', 'value.roomId': _objEntity.courseId, 'value.status': 2, 'value.topicId': { $in: totalTopics }
	              }, {
	                _id: 0, "value.topicId": 1
	              });
	              completedTopicsSelector.exec(function (completedTopicsErr, completedTopicsData) {
	                if (completedTopicsErr) {
	                  res.json({ status: false, error: completedTopicsErr.message });
	                } else {
	                  var CompletedTopics = completedTopicsData.map(function (d) {
	                    return d.value.topicId;
	                  });
	                  obj['CompletedTopics'] = CompletedTopics;
	                  obj['CompletedTopicsCount'] = obj['CompletedTopics'].length;
	
	                  var inprogressTopicsSelector = _datalog2.default.find({
	                    uid: _objEntity.uid, category: 'Topic_Status', 'value.roomId': _objEntity.courseId, 'value.status': 1, 'value.topicId': { $in: totalTopics }
	                  }, {
	                    _id: 0, "value.topicId": 1
	                  });
	
	                  inprogressTopicsSelector.exec(function (inPrograssTopicsErr, inPrograssTopicsData) {
	                    if (inPrograssTopicsErr) {
	                      res.json({ status: false, error: inPrograssTopicsErr.message });
	                    } else {
	                      var InPrograssTopics = inPrograssTopicsData.map(function (d) {
	                        return d.value.topicId;
	                      });
	                      obj['InPrograssTopics'] = InPrograssTopics;
	                      obj['InPrograssTopicsCount'] = obj['InPrograssTopics'].length;
	
	                      var visitedTopicsSelector = _datalog2.default.find({
	                        uid: _objEntity.uid, category: 'Topic_Status', 'value.roomId': _objEntity.courseId, 'value.topicId': { $in: totalTopics }
	                      }, {
	                        _id: 0, "value.topicId": 1
	                      });
	
	                      visitedTopicsSelector.exec(function (visitedTopicsErr, visitedTopicsData) {
	                        if (visitedTopicsErr) {
	                          res.json({ status: false, error: visitedTopicsErr.message });
	                        } else {
	                          var VisitedTopics = visitedTopicsData.map(function (d) {
	                            return d.value.topicId;
	                          });
	
	                          obj['NotAtAllVisitedTopics'] = _.difference(totalTopics, VisitedTopics);
	                          obj['NotAtAllVisitedTopicsCount'] = obj['NotAtAllVisitedTopics'].length;
	                          res.json({
	                            status: true,
	                            data: obj
	                          });
	                        }
	                      });
	                    };
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: true,
	                data: null
	              });
	            }
	          });
	        }
	      }
	    } catch (e) {
	      console.log("Error   List Viewed Topic Users", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : arrangeResults
	*  @Purpose : For Arrrange array values
	*  @Author : Rajesh Goriga
	*/
	function arrangeResults(results, users) {
	  var newArray = [];
	  for (var index in results) {
	    var object = {};
	    object['userId'] = results[index]['userId']['_id'].toString();
	    object['values'] = [];
	    object['viewedTopicIds'] = [];
	    object['username'] = results[index]['userId']['firstname'];
	    if (!isThisUserIdExistsInNewArray(newArray, results[index]['userId']['_id'])) {
	      for (var j in results) {
	        if (results[j]['userId']['_id'] == object['userId']) {
	          object['values'].push(results[j]['status']);
	          object['viewedTopicIds'].push(results[j]['topicId']);
	        }
	      }
	      newArray.push(object);
	    }
	  };
	  return formatData(newArray);
	}
	
	/**
	*  @Function name : isThisUserIdExistsInNewArray
	*  @Purpose : For Check user exists or not
	*  @Author : Rajesh Goriga
	*/
	function isThisUserIdExistsInNewArray(array, value) {
	  for (var index in array) {
	    if (value == array[index]['userId']) return true;
	  }
	
	  return false;
	};
	/**
	*  @Function name : formatData
	*  @Purpose : For Format users data 
	*  @Author : Rajesh Goriga
	*/
	
	function formatData(array) {
	  var users = [];
	
	  for (var index in array) {
	    users.push(array[index]['userId']);
	
	    var countOfCompleted = 0;
	    array[index]['values'].forEach(function (item) {
	      if (item == 2) countOfCompleted++;
	    });
	    array[index]['countOfCompleted'] = countOfCompleted;
	
	    var countOfInProgress = 0;
	    array[index]['values'].forEach(function (item) {
	      if (item == 1) countOfInProgress++;
	    });
	    array[index]['countOfInProgress'] = countOfInProgress;
	
	    var countOfNotTouched = array[index]['values'].length - (countOfCompleted + countOfInProgress);
	  };
	  return {
	    array: array,
	    users: users
	
	  };
	}
	
	function arrangeNotViewedUsers(users, callBack) {
	  var array = [];
	  if (users && users.length > 0) {
	
	    _users2.default.find({ _id: { $in: users } }).select('firstname').exec(function (userErr, userData) {
	      if (userErr) {
	        callBack(userErr.message, null);
	      } else {
	        array = userData.map(function (d) {
	          return {
	            'userId': d._id,
	            'values': [],
	            'username': d.firstname,
	            'countOfCompleted': 0,
	            'countOfInProgress': 0
	
	          };
	        });
	        callBack(null, array);
	      }
	    });
	  } else {
	    callBack(null, array);
	  }
	}
	
	/**
	*  @Function name : listCourseTopics
	*  @Purpose : For fetching viewed topics list data 
	*  @Request Object : topicsData : { topicsData }
	*  @Response Object : Success -  viewed topics list and count, Failure - Error message
	*  @Author : pranathi
	*/
	function listCourseTopics(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      var topicsData = req.body.topicsData;
	
	      // Verifying if request is valid or not
	      if (person == null || !topicsData.itemsPerPage || !topicsData.currentPage || !topicsData.listIds || !topicsData.rId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	
	        var selector = {
	          _id: { $in: topicsData.listIds },
	          roomId: topicsData.rId,
	          topicEnable: true
	        };
	
	        // If search is not empty then create RegExp
	        if (topicsData.searchKeyword && topicsData.searchKeyword != '') {
	          var searchKey = RegExp(topicsData.searchKeyword, 'i');
	          selector['topicName'] = { $regex: searchKey };
	        }
	
	        var topicsQuery = _topic2.default.find(selector).select('topicName description').limit(Number(topicsData.itemsPerPage)).skip(Number(topicsData.itemsPerPage) * (Number(topicsData.currentPage) - 1)).sort({ dateAdded: -1 });
	
	        //Query for counting complete active users data based on selector
	        var topicsCount = _topic2.default.count(selector);
	
	        topicsQuery.exec(function (err, result) {
	          if (err) {
	            res.json({ status: false, error: err.message });
	          } else {
	            topicsCount.exec(function (error, count) {
	              res.json({ status: true, data: result, count: count });
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in List Viewed Topic Users", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : listUserViewedAllTopics
	*  @Purpose : For fetching user viewed topic list data 
	*  @Request Object : query : { rId,uId,items,page }
	*  @Response Object : Success -  viewed topics list and count, Failure - Error message
	*  @Author : pranathi
	*/
	
	function listUserViewedAllTopics(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      // Verifying if request is valid or not
	      var topicsData = req.body.topicsData;
	      if (person == null || !topicsData.rId || !topicsData.uId || !topicsData.itemsPerPage || !topicsData.currentPage) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var selector = {
	          category: "Topic_Status",
	          uid: topicsData.uId,
	          'value.roomId': topicsData.rId,
	          'value.topicId': { $in: topicsData.listIds }
	        };
	
	        var query = _datalog2.default.find(selector).select('value.status value.topicId').limit(Number(topicsData.itemsPerPage)).skip(Number(topicsData.itemsPerPage) * (Number(topicsData.currentPage) - 1)).sort({ dateAdded: -1 });
	
	        var count_query = _datalog2.default.count(selector);
	
	        query.exec(function (error, topicData) {
	          if (error) {
	            res.json({
	              status: false,
	              error: error.message
	            });
	          } else {
	            _topic2.default.populate(topicData, { path: 'value.topicId', select: 'topicName' }, function (err, result) {
	              count_query.exec(function (error, countData) {
	                res.json({ status: true, data: result, count: countData });
	              });
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in List User Viewed AllTopics", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    };
	  });
	}
	
	/**
	*  @Function name : topicsReport
	*  @Purpose : For fetching topicsReport data 
	*  @Request Object : query : { rId }
	*  @Response Object : Success -  obj, Failure - Error message
	*  @Author : pranathi
	*/
	function studentTopics(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      // Verifying if request is valid or not
	      if (person == null || !req.query.rId || !mongoose.Types.ObjectId.isValid(req.query.rId)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        //fetcing total topics ids 
	        _topic2.default.find({ roomId: req.query.rId, topicEnable: true }).select('_id').exec(function (topicsErr, topicsData) {
	          if (topicsErr) {
	            res.json({
	              status: false,
	              error: topicsErr.message
	            });
	          } else if (topicsData && topicsData.length > 0) {
	            var topicIds = topicsData.map(function (d) {
	              return d._id.toString();
	            });
	            var obj = {};
	
	            var viewedTopics = {
	              uid: mongoose.Types.ObjectId(person._id),
	              category: 'Topic_Status',
	              'value.roomId': req.query.rId,
	              'value.topicId': { $in: topicIds }
	            };
	
	            var completedTopicSelector = {
	              uid: mongoose.Types.ObjectId(person._id),
	              category: 'Topic_Status',
	              'value.status': 2,
	              'value.roomId': req.query.rId,
	              'value.topicId': { $in: topicIds }
	            };
	
	            var inprogressTopicSelector = {
	              uid: mongoose.Types.ObjectId(person._id),
	              category: 'Topic_Status',
	              'value.status': 1,
	              'value.roomId': req.query.rId,
	              'value.topicId': { $in: topicIds }
	
	              //fetching total viewed topics ids from datalogs
	            };_datalog2.default.find(viewedTopics, { _id: 0, "value.topicId": 1 }).exec(function (viewedTopicErr, viewedTopicData) {
	              if (viewedTopicErr) {
	                res.json({
	                  status: false,
	                  error: viewedTopicErr.message
	                });
	              } else if (viewedTopicData && viewedTopicData.length > 0) {
	                var viewedTopicsIds = viewedTopicData.map(function (d) {
	                  return d.value.topicId;
	                });
	
	                //fetching completely viewed topics ids from datalogs
	                _datalog2.default.find(completedTopicSelector, { _id: 0, "value.topicId": 1 }).select('value.TopicId').exec(function (completedTopicErr, completedTopicData) {
	                  if (completedTopicErr) {
	                    res.json({
	                      status: false,
	                      error: completedTopicErr.message
	                    });
	                  } else {
	                    var completedTopics = completedTopicData.map(function (d) {
	                      return d.value.topicId;
	                    });
	                    obj['completelyViewedTopicsCount'] = completedTopics.length / topicIds.length * 100;
	                    obj['completelyViewedTopicsIds'] = completedTopics;
	
	                    //fetching inprogress viewed topcis ids from datalogs
	                    _datalog2.default.find(inprogressTopicSelector, { _id: 0, "value.topicId": 1 }).select('value.TopicId').exec(function (inprogErr, inprogData) {
	                      if (inprogErr) {
	                        res.json({
	                          status: false,
	                          error: inprogErr.message
	                        });
	                      } else {
	                        var inprogressTopicsIds = inprogData.map(function (d) {
	                          return d.value.topicId;
	                        });
	                        var notAtAllViewedTopicsIds = _.difference(topicIds, viewedTopicsIds);
	
	                        obj['InPrograssTopicsCount'] = inprogressTopicsIds.length / topicIds.length * 100;
	                        obj['inprogressTopicsIds'] = inprogressTopicsIds;
	
	                        obj['notAtAllViewedTopicsCount'] = notAtAllViewedTopicsIds.length / topicIds.length * 100;
	                        obj['notAtAllViewedTopicsIds'] = notAtAllViewedTopicsIds;
	
	                        res.json({
	                          status: true,
	                          data: obj
	                        });
	                      }
	                    });
	                  }
	                });
	              } else {
	                obj['notAtAllViewedTopicsCount'] = topicIds.length;
	                obj['notAtAllViewedTopicsIds'] = topicIds;
	
	                obj['inprogressTopicsCount'] = 0;
	                obj['completedTopcisCount'] = 0;
	
	                res.json({
	                  status: true,
	                  data: obj
	                });
	              }
	            });
	          } else {
	            res.json({
	              status: true,
	              data: null
	            });
	          }
	        });
	      }
	    } catch (e) {
	      console.log("Error in topics Report ", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    };
	  });
	}
	
	/**
	*  @Function name : studentAssignmentList
	*  @Purpose : For fetching complete course data in student side
	*  @Request Object : query : { page, items, search }
	*  @Response Object : Success - course data and count, Failure - Error message
	*  @Author : prateek
	*/
	
	function studentAssignmentList(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      // Verifying if request is valid or not
	      if (person == null || !req.query.items || !req.query.page) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var listAssignment = req.query;
	
	        var selector = {
	          'submissions.studentId': person._id,
	          roomId: listAssignment.roomId
	        };
	        if (req.query.search) {
	          var slash_search = (0, _slashesActions.addSlash)(req.query.search);
	          var searchKey = new RegExp(slash_search, 'i');
	          selector['assignmentName'] = searchKey;
	        }
	
	        var query = _assignment2.default.find(selector, {
	          'submissions.$': 1,
	          'assignmentName': 1
	        }).limit(Number(listAssignment.items)).skip(Number(listAssignment.items) * (Number(listAssignment.page) - 1)).sort({ 'submissions.$.submittedAt': -1 }).populate('roomId', 'roomName').exec(function (err, assignmentData) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else if (assignmentData && assignmentData.length > 0) {
	
	            _assignment2.default.count({
	              'submissions.studentId': person._id,
	              roomId: listAssignment.roomId
	            }).exec(function (err, count) {
	              res.json({
	                status: true,
	                data: assignmentData,
	                count: count
	              });
	            });
	          } else {
	            res.json({
	              status: true,
	              data: [],
	              count: 0
	            });
	          }
	        });
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : studentAssignmentResultData
	*  @Purpose : For fetching assingment result at student side
	*  @Request Object : query : {assingmentId}
	*  @Response Object : Success - assignment Data, Failure - Error message
	*  @Author : Prateek
	*/
	
	function studentAssignmentResultData(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	
	      // Verifying if request is valid or not
	      if (person == null || !req.query.assignmentId) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        var assignmentId = req.query.assignmentId;
	
	        _assignment2.default.findOne({
	          _id: assignmentId,
	          'submissions.studentId': person._id
	        }, {
	          'submissions.$': 1,
	          'roomId': 1,
	          'assignmentName': 1
	        }).populate('submissions.evaluatedBy', 'firstname lastname profile.profileImage email').exec(function (err, assignmentData) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else if (assignmentData) {
	            res.json({
	              status: true,
	              data: assignmentData
	            });
	          } else {
	            res.json({
	              status: false,
	              error: 'Assingment Not Found'
	            });
	          }
	        });
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/**
	*  @Function name : checkCertificateEligibility
	*  @Purpose : For checking if student is allowed to download certificate for a course
	*  @Request Object : NA
	*  @Response Object : Success - iseligible : true/false, Failure - Error message
	*  @Author : Shantanu Paul
	*/
	
	function checkCertificteEligibility(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      // Verifying if request is valid or not
	      if (person == null) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        _students2.default.find({ certificateEligible: person.id }).select('roomId').exec(function (err, roomIds) {
	          if (err) throw err;
	
	          res.json({
	            status: true,
	            roomIds: roomIds
	          });
	        });
	      }
	    } catch (e) {
	      console.log("Error in student check certificate eligibility", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	};
	
	/**
	*  @Function name : generateCertificate
	*  @Purpose : For dynamically generating course completion certificate
	*  @Request Object : query : {roomId}
	*  @Response Object : Success - PDF file as binary Buffer, Failure - Error message
	*  @Author : Shantanu Paul
	*/
	
	function generateCertificate(req, res) {
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      // Verifying if request is valid or not
	      if (person == null || !req.query.rId || !mongoose.Types.ObjectId.isValid(req.query.rId)) {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      } else {
	        _room2.default.findOne({ _id: req.query.rId }).select('roomName corporateId').exec(function (err, roomData) {
	          if (err) throw err;
	
	          _corporate2.default.findOne({ _id: roomData.corporateId }).select('businessName').exec(function (err, businessData) {
	            if (err) throw err;
	
	            fs.readFile(process.env.PWD + '/public/CERT_TEMPLATE/certificate.html', 'utf-8', function (err, file) {
	              if (err) throw err;
	
	              file = file.replace('[CORPORATE_NAME]', businessData.businessName);
	              file = file.replace('[COURSE_NAME]', roomData.roomName);
	              file = file.replace('[CANDIDATE_NAME]', person.firstname + ' ' + person.lastname);
	              file = file.replace('[CORPORATE_NAME]', businessData.businessName);
	              file = file.replace('[COURSE_NAME]', roomData.roomName);
	              file = file.replace('[COMPLETION_DATE]', moment().utc().format('DD/MM/YYYY'));
	              file = file.replace('[EXPIRY_DATE]', moment().add(1, 'years').utc().format('DD/MM/YYYY'));
	
	              var options = {
	                format: 'A4',
	                orientation: "landscape",
	                base: 'file://' + path.join(process.env.PWD) + '/public/CERT_TEMPLATE/'
	              };
	              htmlPdf.create(file, options).toBuffer(function (err, fileBuffer) {
	                res.json({ body: fileBuffer });
	              });
	            });
	          });
	        });
	      }
	    } catch (e) {
	      console.log("Error in student download certificate", e);
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.fetchToken = fetchToken;
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _package = __webpack_require__(25);
	
	var _package2 = _interopRequireDefault(_package);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var _ = __webpack_require__(7);
	var request = __webpack_require__(51);
	
	
	function createToken(room, userName, role, selPackage, callback) {
	  var validPackage = false;
	  var packageData = {};
	  _package2.default.findOne({ _id: mongoose.Types.ObjectId(selPackage) }).exec(function (pkgErr, pkgRes) {
	    if (!pkgErr) {
	      var now = moment().utc().toDate();
	      var currentDate = moment();
	      var pkgValidity = moment(pkgRes.packageValidity);
	      if (+pkgValidity >= +currentDate) {
	        validPackage = true;
	        packageData = {
	          packageName: pkgRes.packageName,
	          packagePrice: pkgRes.packagePrice,
	          userCount: pkgRes.userCount,
	          userPresence: pkgRes.userPresence,
	          serverLocation: pkgRes.serverLocation,
	          features: pkgRes.features
	        };
	        var options = {
	          url: pkgRes.serverLocation + '/createToken/',
	          headers: {
	            'Content-Type': 'application/json'
	          },
	          form: {
	            room: room,
	            username: userName,
	            role: 'admin'
	          }
	        };
	        request.post(options, function (error, response, body) {
	          // console.log("token response - ", body);
	          if (!error) {
	            if (response.errno) {
	              var obj = {
	                validPackage: validPackage,
	                packageData: packageData,
	                response: response.errno
	              };
	              callback(false, obj);
	            } else {
	              var _obj = {
	                validPackage: validPackage,
	                packageData: packageData,
	                response: response.body
	              };
	              callback(true, _obj);
	            }
	          } else {
	            var _obj2 = {
	              validPackage: validPackage,
	              packageData: packageData,
	              response: error
	            };
	            callback(false, _obj2);
	          }
	          return;
	        });
	      } else {
	        callback(false, "Package is expired.");
	      }
	    } else {
	      callback(false, "Error while fatching serverLocation.");
	    }
	  });
	}
	
	function fetchToken(req, res) {
	  // console.log("REQ", req.body.userdata);
	  var resConfObj = {
	    validRoom: false,
	    roomType: null,
	    validPackage: false,
	    token: null,
	    error: null,
	    codec: null,
	    enableLive: null,
	    businessType: 'LMS'
	  };
	
	  var obj = req.body.userdata.data;
	  var uname = obj.username;
	
	  _room2.default.findOne({ roomKey: obj.key }).populate('corporateId', 'businessType -_id').exec(function (err, room) {
	    if (err) {
	      resConfObj['error'] = "Error fetching Room Data.";
	      res.json({ status: false, data: resConfObj });
	    } else if (room && room.roomid) {
	      resConfObj['validRoom'] = true;
	      resConfObj['roomType'] = room.roomType;
	      resConfObj['roomPassword'] = room.roomPassword;
	      resConfObj['hostPassword'] = room.hostPassword;
	      resConfObj['codec'] = room.roomConfiguration.codecType;
	      resConfObj['enableLive'] = room.roomConfiguration.enableLive;
	      if (room.corporateId && room.corporateId.businessType) {
	        resConfObj['businessType'] = room.corporateId.businessType;
	      }
	
	      createToken(room.roomid, uname, "Guest", room.selPackage, function (status, token) {
	        if (status) {
	          resConfObj['token'] = token.response;
	          resConfObj['validPackage'] = token.validPackage;
	          resConfObj['packageData'] = token.packageData;
	          res.json({ status: true, data: resConfObj });
	        } else {
	          resConfObj['error'] = token.response;
	          resConfObj['validPackage'] = token.validPackage;
	          resConfObj['packageData'] = token.packageData;
	          res.json({ status: false, data: resConfObj });
	        }
	      });
	    } else {
	      resConfObj['error'] = "Missing Room or Key.";
	      res.json({ status: false, data: resConfObj });
	    }
	  });
	}

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.saveSMTPSettings = saveSMTPSettings;
	exports.getSettings = getSettings;
	exports.deleteSMTPSettings = deleteSMTPSettings;
	
	var _settings = __webpack_require__(107);
	
	var _settings2 = _interopRequireDefault(_settings);
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var moment = __webpack_require__(1);
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	
	/**
	* @Function Name: "saveSettings",
	* @Purpose: "To save SMTP settings into settings document.",
	* @Request Object: settingsData : { uid : "userID"},
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function saveSMTPSettings(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null || req.body.settingsData || req.body.settingsData.data) {
	        if (person.role == _adminUser.Roles.Superadmin) {
	          var reqObj = req.body.settingsData.data;
	          if (!reqObj.apiKey || validator.isEmpty(reqObj.apiKey)) {
	            res.json({ status: false, error: "Api key is required." });
	          } else if (!reqObj.domain || validator.isEmpty(reqObj.domain)) {
	            res.json({ status: false, error: "Domain is required." });
	          } else if (!reqObj.username || validator.isEmpty(reqObj.username)) {
	            res.json({ status: false, error: "username is required." });
	          } else if (!reqObj.password || validator.isEmpty(reqObj.password)) {
	            res.json({ status: false, error: "password is required." });
	          } else if (!reqObj.server || validator.isEmpty(reqObj.server)) {
	            res.json({ status: false, error: "password is required." });
	          } else {
	            var obj = {
	              smtpSettings: {
	                apiKey: reqObj.apiKey,
	                domain: reqObj.domain,
	                username: reqObj.username,
	                password: reqObj.password,
	                server: reqObj.server
	              }
	            };
	
	            // let logObj = {
	            //   logType : 'SMTP Settings',
	            //   actionType : 'Updated',
	            //   actionTime : moment().utc().toDate(),
	            //   uid : reqObj.uid,
	            //   details : {
	            //     remoteAddress : req.connection.remoteAddress,
	            //     userAgent : req.headers['user-agent']
	            //   }
	            // }
	
	            //Fetching the details of SMTPSettings
	            _settings2.default.findOne({ "createdBy": person._id }, function (error, result) {
	              if (error) {
	                res.json({ status: false, error: error.message });
	              } else if (result) {
	                obj.smtpSettings['modifiedAt'] = moment().utc().toDate();
	
	                // Update SMTP settings if settings document already exist in the settings collection
	                _settings2.default.update({ "createdBy": person._id }, { $set: obj }, { runValidators: true }, function (err, response) {
	                  if (err) {
	                    res.json({ staus: false, error: err.message });
	                  } else {
	                    res.json({ status: true, data: obj.smtpSettings, message: "Updated successfully." });
	                    // createLog(logObj, function(status) {
	                    //   if(status) {
	                    //     // console.log(status);
	                    //   }
	                    // });
	                  }
	                });
	              } else {
	                obj['createdBy'] = person._id;
	                var objSettings = new _settings2.default(obj);
	
	                //Create SMTP settings in the settings collection
	                objSettings.save(function (err, response) {
	                  if (err) {
	                    console.log("err === ", err);
	                    res.json({
	                      status: false,
	                      error: err.message
	                    });
	                  } else if (response) {
	                    res.json({
	                      status: true,
	                      data: obj.smtpSettings,
	                      message: "Created successfully."
	                    });
	                    // createLog(logObj, function(status) {
	                    //   if(status) {
	                    //     // console.log(status);
	                    //   }
	                    // });
	                  } else {
	                    res.json({
	                      status: false,
	                      error: "Internal server error"
	                    });
	                  }
	                });
	              }
	            });
	          }
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid Request." });
	    } catch (e) {
	      console.log("e in addContact === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "getSettings",
	* @Purpose: "To Fetch SMTP settings into settings collection.",
	* @Request Object: { uid : "userID"},
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function getSettings(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	        if (person.role == _adminUser.Roles.Superadmin || person.role == _adminUser.Roles.Admin) {
	
	          //Fectch SMTP settings from the settings collection
	          _settings2.default.findOne({ "createdBy": person._id, smtpSettings: {
	              $exists: true
	            }
	          }, function (error, result) {
	            if (error) {
	              res.json({ status: false, error: error.message });
	            } else if (result) {
	              res.json({ status: true, data: result.smtpSettings });
	            } else {
	              res.json({ status: false });
	            }
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid Request." });
	    } catch (e) {
	      console.log("e in addContact === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "deleteSMTPSettings",
	* @Purpose: "To delete SMTP settings into settings collection.",
	* @Request Object: null,
	* @Response Object: Success- User Data, Failure- Error message,
	* @Author: "Jyothi"
	*/
	
	function deleteSMTPSettings(req, res) {
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	        if (person.role == _adminUser.Roles.Superadmin) {
	
	          //Delete SMTP settings from the settings collection
	          _settings2.default.update({
	            "createdBy": person._id
	          }, {
	            $set: {
	              "smtpSettings": {}
	            }
	          }, function (err, deletedData) {
	            if (err) {
	              res.json({
	                status: false,
	                error: err.message
	              });
	            } else {
	              res.json({
	                status: true,
	                message: "Deleted successfully"
	              });
	            }
	          });
	        } else res.json({ status: false, error: "Access denied." });
	      } else res.json({ status: false, error: "Invalid Request." });
	    } catch (e) {
	      console.log("e in addContact === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.searchGroupStudents = searchGroupStudents;
	exports.saveStudentsGroup = saveStudentsGroup;
	exports.updateStudentsGroup = updateStudentsGroup;
	exports.getParticipantsList = getParticipantsList;
	exports.listStudentsGroup = listStudentsGroup;
	exports.fetchGroupStudents = fetchGroupStudents;
	exports.deleteStudentsGroup = deleteStudentsGroup;
	exports.deleteStudentInGroup = deleteStudentInGroup;
	exports.getStudentRecords = getStudentRecords;
	exports.updateGroupName = updateGroupName;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _participantsgroup = __webpack_require__(76);
	
	var _participantsgroup2 = _interopRequireDefault(_participantsgroup);
	
	var _adminUser = __webpack_require__(13);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7); /** 
	                           * @Author: "Najib Hasnain",
	                           * @Purpose: "Methods under this file handle user's requests under "Add participants" module and generate appropriate response such as students list based on search criteria, adding, deleting and updating students or group. Methods receive user information and related requseted data in request object. Post validating user, who initiated the request and his/her role, methods return appropriate response with data/success message/error message based on query's call back response."
	                           */
	
	var mongoose = __webpack_require__(2);
	var validator = __webpack_require__(12);
	var moment = __webpack_require__(1);
	
	
	/**
	* @Function Name: "searchGroupStudents",
	* @Purpose: "Returns students/participants list based on user's search criteria",
	* @Request Object: searchData : { input : e.target.value, uid : uid },
	* @Response Object: Success- students/participants list Data, Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function searchGroupStudents(req, res) {
	
		// Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			try {
				if (person != null && req.query.input) {
					var selector = {};
	
					//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
					var bussinessID = null;
					if (person.profile.companyid && person.profile.companyid._id) {
						bussinessID = person.profile.companyid._id;
					}
	
					//Search selector based on user role
					if (person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Instructor) {
						selector = {
							_id: { $ne: person._id },
							"profile.companyid": bussinessID
						};
					}
	
					//If searchKeyword is not empty then create RegExp
					if (req.query.input && req.query.input.trim() != '') {
						var search = (0, _slashesActions.addSlash)(req.query.input.trim());
						var searchKey = RegExp(search, 'i');
						selector['$or'] = [{ 'firstname': { $regex: searchKey } }, { 'lastname': { $regex: searchKey } }, { 'email': { $regex: searchKey } }];
					}
					selector['userStatus'] = 'Active';
					selector['guest'] = false;
					selector['role'] = _adminUser.Roles.Student;
					//Query for fetching complete user data based on selector and skip items based on itemsPerPage on previous page
					var fetchquery = _users2.default.find(selector).select('firstname lastname email profile.profileImage role');
					//let t1 = new Date();
					fetchquery.exec(function (error, result) {
						if (error) {
							console.log(error);
							res.json({
								status: false,
								error: error
							});
						} else {
							//console.log("controller result", result);
							// let t2 = new Date();
							// console.log("time: " + (t2 - t1) + "ms");
							res.json({
								status: true,
								data: result
							});
						}
					});
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				console.log("e in listPackage === ", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	/**
	* @Function Name: "saveStudentsGroup",
	* @Purpose: "Save/update participants group. Method receives students Ids and group name in requested object and save in collection after validation.",
	* @Request Object: data : { uid : uid, groupName : groupName ,studentIdArray : studentIdArray },
	* @Response Object: Success- Success message , Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function saveStudentsGroup(req, res) {
		//console.log("request data", req.body.data);
	
		var reqObj = req.body.data;
		//Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			//console.log("person details", person);
			try {
				if (person != null || req.body.data) {
	
					//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
					var bussinessID = null;
					if (person.profile.companyid && person.profile.companyid._id) {
						bussinessID = person.profile.companyid._id;
					}
	
					// query checks if group name exists under same company Id
					_participantsgroup2.default.findOne({ groupName: reqObj.groupName }, { companyid: bussinessID }, function (groupErr, group) {
						if (groupErr) {
							//console.log("groupErr", personErr);
							res.json({ status: false, error: "Invalid Data" });
						} else if (group) {
							res.json({ status: false, error: "Group name already exits" });
						} else {
							//console.log("request object", reqObj);
							//console.log("student array in save", reqObj.studentIdArray);
							reqObj['participants'] = reqObj.studentIdArray;
							reqObj['createdOn'] = moment().utc().toDate();
							reqObj['createdBy'] = person._id;
							reqObj['companyid'] = bussinessID;
							var studentsObj = new _participantsgroup2.default(reqObj);
							//console.log("server obj", reqObj);
							studentsObj.save(function (err, saved) {
								if (err) {
									//console.log("error while saving student data", err);
									res.json({ status: false, error: err });
								} else if (saved) {
									var obj = {
										companyid: bussinessID,
										role: person.role,
										itemsPerPage: 5,
										currentPage: 1
	
										//After saving data, a call back function request the updated list of students
									};getParticipantsList(obj, function (err, result, count) {
										if (err) {
											res.json({ status: false, error: err });
										} else if (result) {
											//console.log("stu result data", result);
											res.json({
												status: true,
												message: "Group saved successfully",
												data: result,
												count: count
											});
										} else {
											res.json({ status: false, error: "Internal server error" });
										}
									});
								} else {
									res.json({ status: false });
								}
							});
						}
					});
				} else res.json({
					status: false,
					error: "Invalid request."
				});
			} catch (e) {
				//console.log("e in listPackage === ",e);
				res.json({
					status: false,
					error: "Internal server error."
				});
			}
		});
	}
	
	/**
	* @Function Name: "updateStudentsGroup",
	* @Purpose: "Save/update participants group. Method receives students Ids and group name in requested object and save in collection after validation.",
	* @Request Object: data : { uid : uid, groupName : groupName ,studentIdArray : studentIdArray },
	* @Response Object: Success- Success message , Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function updateStudentsGroup(req, res) {
		//console.log("my users server params = ", req.params.id);
	
		//Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			//console.log("person details", person);
			try {
				if (person != null && req.body.data && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
					var id = req.params.id;
					var reqObj = req.body.data;
					//console.log("req data", req.body.data)
	
					//Query checks group Id already present in the collection, returns document if present.
					_participantsgroup2.default.findOne({ _id: { $ne: mongoose.Types.ObjectId(id) } }, function (groupErr, group) {
						if (groupErr) {
							res.json({
								status: false,
								error: "Invalid Data"
							});
						} else {
	
							//if student array has data it insert ids in participants array in collection											
							if (reqObj.studentIdArray && reqObj.studentIdArray.length > 0) {
								//console.log("Inside push query");
								var query = _participantsgroup2.default.update({ _id: mongoose.Types.ObjectId(id) }, { $push: { participants: { $each: reqObj.studentIdArray } } });
							} else {
								var query = _participantsgroup2.default.update({ _id: mongoose.Types.ObjectId(id) }, { $set: { participants: reqObj.studentIdArray } });
							}
							//console.log("reqObj.studentIdArray", reqObj.studentIdArray);
							query.exec(function (err, saved) {
								if (err) {
									res.json({
										status: false,
										error: err
									});
								} else if (saved) {
									getStudentRecords(id, function (err, result) {
										if (err) {
											res.json({ status: false, error: err });
										} else if (result) {
											//console.log("stu result data", result);
											res.json({
												status: true,
												message: "Group updated successfully",
												data: result
											});
										}
									});
								}
							});
						}
					});
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				//console.log("e in listPackage === ",e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	/**
	* @Function Name: "getParticipantsList",
	* @Purpose: "Returns participants list based on object data it receives as parameter",
	* @Request Object: data : { companyid : person.profile.companyid, role : person.role, itemsPerPage : 5, currentPage : 1 },
	* @Response Object: Success- result, count , Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function getParticipantsList(obj, cb) {
		if (obj != null) {
			var selector = null;
			if (obj.role == _adminUser.Roles.Superadmin) {
				selector = {};
	
				//condition checks for allowed roles
			} else if (obj.role == _adminUser.Roles.Lmsadmin || obj.role == _adminUser.Roles.Instructor || obj.role == _adminUser.Roles.Presenteradmin || obj.role == _adminUser.Roles.Presenter) {
				selector = { companyid: obj.companyid };
			}
	
			// query selects group data from participants collection and user data from users table
			if (selector != null) {
				var query = _participantsgroup2.default.find(selector).limit(obj.itemsPerPage).select('groupName createdBy participants').populate('createdBy', 'firstname lastname').skip(obj.itemsPerPage * (obj.currentPage - 1)).sort({
					createdOn: -1
				});
				if (query) {
					query.exec(function (err, result) {
						if (err) {
							cb(err, null);
						} else if (result) {
							_participantsgroup2.default.count(selector).exec(function (error, count) {
								cb(null, result, count);
							});
						}
					});
				}
			}
		}
	}
	
	/**
	* @Function Name: "listStudentsGroup",
	* @Purpose: "Returns participants list based on object data it receives as request",
	* @Request Object: data : { companyid : person.profile.companyid, role : person.role, itemsPerPage : 5, currentPage : 1 },
	* @Response Object: Success- result, count , Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function listStudentsGroup(req, res) {
		//console.log("my users server params = ", req.query);
	
		//Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			//console.log("person details", person);
			try {
				if (person != null && req.query.itemsPerPage && req.query.currentPage) {
					var itemsPerPage = req.query.itemsPerPage;
					var currentPage = req.query.currentPage;
					var selector = null;
	
					//code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
					var bussinessID = null;
					if (person.profile.companyid && person.profile.companyid._id) {
						bussinessID = person.profile.companyid._id;
					}
	
					// Condition checks user role and assign selector based on role 
					if (person.role == _adminUser.Roles.Superadmin) {
						selector = {};
					} else if (person.role == _adminUser.Roles.Lmsadmin || person.role == _adminUser.Roles.Instructor || person.role == _adminUser.Roles.Presenteradmin || person.role == _adminUser.Roles.Presenter) {
						selector = { companyid: bussinessID };
					}
	
					//If searchKeyword is not empty then create RegExp
					if (req.query.search && req.query.search != '') {
						var slash_search = (0, _slashesActions.addSlash)(req.query.search);
						var searchKey = RegExp(req.query.search, 'i');
						selector = {
							'groupName': {
								$regex: searchKey
							}
						};
					}
	
					if (selector != null) {
	
						//query returns group name and name of user who created the group
						var query = _participantsgroup2.default.find(selector).limit(Number(itemsPerPage)).select('groupName createdBy participants').populate('createdBy', 'firstname lastname').populate('participants', 'firstname', { userStatus: "Active", role: _adminUser.Roles.Student }).skip(Number(itemsPerPage) * (Number(currentPage) - 1)).sort({
							createdOn: -1
						});
						query.exec(function (err, result) {
							if (err) {
								res.json({
									status: false,
									error: err
								});
							} else if (result) {
	
								//query returns number of group counts under a company Id
								_participantsgroup2.default.count(selector).exec(function (error, count) {
	
									//Success response with list data and count
									res.json({
										status: true,
										data: result,
										count: count
									});
								});
							}
						});
					} else {
						res.json({
							status: false,
							error: "Access denied"
						});
					}
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				//console.log("e in listPackage === ",e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	/**
	* @Function Name: "fetchGroupStudents",
	* @Purpose: "Fetch group details based on requested uid",
	* @Request Object: data : { uid : uid },
	* @Response Object: Success- result, count , Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function fetchGroupStudents(req, res) {
		//console.log("requested body", req.query);
	
		//Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			//console.log("person details", person);
			try {
				if (person != null && req.query.id && mongoose.Types.ObjectId.isValid(req.query.id)) {
					var id = req.query.id;
					var searchedData = [];
	
					// query selects group data from participants collection and user data from users table
					var query = _participantsgroup2.default.findOne({ _id: mongoose.Types.ObjectId(id) }).select('groupName participants createdBy').populate('participants', 'firstname lastname email profile.profileImage', { userStatus: "Active", role: _adminUser.Roles.Student }).populate('createdBy', 'firstname lastname email profile.profileImage').sort({
						createdOn: -1
					});
					query.exec(function (err, result) {
						if (err) {
							res.json({ status: false, error: err });
						} else if (result) {
							if (req.query.search && req.query.search != '') {
								var slash_search = (0, _slashesActions.addSlash)(req.query.search);
								var searchKey = RegExp(slash_search, 'i');
								_.forEach(result.participants, function (participantsData) {
									if (searchKey.test(participantsData.firstname) || searchKey.test(participantsData.lastname) || searchKey.test(participantsData.email)) {
										searchedData.push(participantsData);
									} else {}
								});
	
								if (searchedData && searchedData.length <= 0) {
	
									//Code changed by - Najib, Desc - Setting participants data to null incase no search data based on search string
									result['participants'] = null;
									res.json({
										status: true,
										data: result
									});
								} else {
									result['participants'] = searchedData;
									res.json({
										status: true,
										data: result
									});
								}
							} else {
								//successfull response						
								res.json({
									status: true,
									data: result
								});
							}
						} else {
							res.json({ status: false, error: "Internal server error." });
						}
					});
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				//console.log("e in listPackage === ",e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	// /**
	// * @Function Name: "editStudentsGroup",
	// * @Purpose: "Update the group name based on request data group Id and group name ",
	// * @Request Object: data : { uid : uid, groupName : groupName },
	// * @Response Object: Success- result, count , Failure- Error message,
	// * @Author: "Najib Hasnain"
	// */
	
	// export function editStudentsGroup(req, res) {
	// 	if (!req.body.data) {
	// 		res.json({
	// 			status: false,
	// 			error: "Invalid Request"
	// 		});
	// 	} else {
	// 		var reqObj = req.body.data;
	// 		// check if query is null or empty and uid is of type mongoose
	// 		if (!reqObj.uid || validator.isEmpty(reqObj.uid) || !mongoose.Types.ObjectId.isValid(reqObj.uid)) {
	// 			res.json({status: false, error: "Invalid User"});
	// 		} else if (!reqObj.groupName) {
	// 			res.json({
	// 				status: false, 
	// 				error: "Please provide a group name"
	// 			});
	// 		} else {
	// 			let uid = mongoose.Types.ObjectId(reqObj.uid);
	
	// 			//query to check user uid and user role in allowed role 
	// 			Users.findOne({_id : reqObj.uid, role : {$in : [Roles.Lmsadmin, Roles.Instructor, Roles.Presenteradmin, Roles.Presenter]}}, function(personErr, person) {
	// 				if(personErr) {
	// 					res.json({
	// 						status: false,
	// 						error: "Invalid User"
	// 					});
	// 				} else if (person) {
	// 					if (reqObj._id) {
	
	// 						//query to check if group id already present in collection
	// 						ParticipantsGroup.findOne({_id : {$ne : mongoose.Types.ObjectId(reqObj._id) }}, {groupName : reqObj.groupName}, function (groupErr, group) {
	// 							if (groupErr) {
	// 								res.json({
	// 									status: false,
	// 									error: "Invalid Data"
	// 								});
	// 							} else if (group) {
	// 								res.json({
	// 									status: false, 
	// 									error: "Group name already exits"
	// 								});
	// 							} else {
	// 								reqObj['modifiedOn'] = moment().utc().toDate();
	// 								var stuObj = new ParticipantsGroup(reqObj);
	
	// 								//query to update group name 									 
	// 								studentsObj.update({_id : mongoose.Types.ObjectId.isValid(reqObj._id)}, {$set : {groupName : reqObj.groupName}}, function(err, saved) {
	// 									if (err) {
	// 										res.json({
	// 											status: false, 
	// 											error: err
	// 										});
	// 									} else if(saved) {
	
	// 										//successfull response
	// 										res.json({
	// 											status : true, 
	// 											message : "Group updated successfully"
	// 										});
	// 									}
	// 								});
	// 							}
	// 						})
	// 					} else {
	
	// 						//error response if group Id does not match with participant Id
	// 						res.json({
	// 							status : false, 
	// 							error : "Invalid group"
	// 						})
	// 					}
	// 				} else {
	
	// 					//error response if user Id does not match with users Id
	// 					res.json({
	// 						status : false, 
	// 						error : "Access Denied"
	// 					})
	// 				}
	// 			})
	// 		}		
	// 	}
	// }
	
	// /**
	// * @Function Name: "addStudentsInGroup",
	// * @Purpose: "Add student in group after creating it based on req obj data that contain user ID and student array",
	// * @Request Object: data : { uid : uid, groupName : groupName },
	// * @Response Object: Success- result, count , Failure- Error message,
	// * @Author: "Najib Hasnain"
	// */
	
	// export function addStudentsInGroup(req, res) {
	// 	console.log("Inside add student In group", req.body.data)
	// 	if (!req.body.data) {
	// 		res.json({
	// 			status: false,
	// 			error: "Invalid Request"
	// 		});
	// 	} else {
	// 		var reqObj = req.body.data;
	// 		if(!reqObj.uid || validator.isEmpty(reqObj.uid) || !mongoose.Types.ObjectId.isValid(reqObj.uid)) {
	// 			res.json({
	// 				status: false,
	// 				error: "Invalid User"
	// 			});
	// 		} else {
	// 			//console.log("Inside else function");
	// 			let uid = mongoose.Types.ObjectId(reqObj.uid);
	
	// 			//query to check user uid and user role in allowed role 
	// 			Users.findOne({_id : reqObj.uid, role : {$in : [Roles.Lmsadmin, Roles.Instructor, Roles.Presenteradmin, Roles.Presenter]}}, function(personErr, person) {
	// 				if (personErr) {
	// 					res.json({
	// 						status: false,
	// 						error: "Invalid User"
	// 					});
	// 				} else if (person) {
	// 					if (reqObj._id) {
	// 						console.log("Inside reqObj");
	
	// 						//check if group Id matches with request obj Id
	// 						ParticipantsGroup.findOne({_id : {$ne : mongoose.Types.ObjectId(reqObj._id) }}, function(groupErr, group) {
	// 							if (groupErr) {
	// 								res.json({
	// 									status: false,
	// 									error: "Invalid Data"
	// 								});
	// 							} else {
	// 								reqObj['modifiedOn'] = moment().utc().toDate();
	// 								var stuObj = new ParticipantsGroup(reqObj);	
	
	// 								//Add participants in group									 
	// 								studentsObj.update({_id : mongoose.Types.ObjectId(reqObj._id)}, {$set : {participants : reqObj.participants}}, function(err, saved) {
	// 									if (err) {
	// 										//console.log("error while saving", err.message);
	// 										res.json({
	// 											status: false,
	// 											error: err
	// 										});
	// 									} else if (saved) {
	// 										//console.log("saved Successfully");
	
	// 										//sucessfull response
	// 										res.json({
	// 											status : true,
	// 											message : "Successfully Added"
	// 										});
	// 									}
	// 								});
	// 							}
	// 						})
	
	// 					//response if group id does not match with collection ids	
	// 					} else {
	// 						res.json({status : false, error : "Invalid group"})
	// 					}
	
	// 				//respose if user Id does not match with user collection Id	
	// 				} else {
	// 					res.json({status : false, error : "Access Denied"})
	// 				}
	// 			})
	// 		}		
	// 	}
	// }
	
	/**
	* @Function Name: "deleteStudentsGroup",
	* @Purpose: "Delete students group based on user ID and group Id",
	* @Request Object: data : { uid : uid, groupName : groupName },
	* @Response Object: Success- result, count , Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function deleteStudentsGroup(req, res) {
		//console.log("my users server params = ", req.params.id);
	
		//Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			//console.log("person details", person);
			try {
				if (person != null && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
					var id = req.params.id;
	
					//query to check group Id in the collection
					_participantsgroup2.default.findOne({ _id: mongoose.Types.ObjectId(id) }, function (groupErr, group) {
						if (groupErr) {
							//console.log("groupErr", groupErr);
							res.json({
								status: false,
								error: "Invalid Data"
							});
						} else if (group) {
	
							//remove group from collection based on request obj Id			 
							_participantsgroup2.default.remove({ _id: mongoose.Types.ObjectId(id) }, function (err, saved) {
								if (err) {
									//console.log("Err", err);
									res.json({
										status: false,
										error: err
									});
								} else if (saved) {
	
									//sucessfull response
									res.json({
										status: true,
										message: "Group deleted successfully"
									});
								}
							});
						} else {
							res.json({
								status: false,
								error: "Invalid Group"
							});
						}
					});
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				//console.log("e in listPackage === ",e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	/**
	* @Function Name: "deleteStudentInGroup",
	* @Purpose: "Delete individual student from group based on student Id received in request object",
	* @Request Object: data : { uid : uid, _id : studentId },
	* @Response Object: Success- result, count , Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function deleteStudentInGroup(req, res) {
		//console.log("my users server params = ", req.query.id);
	
		//Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			//console.log("person details", person);
			try {
				if (person != null && req.query.id && mongoose.Types.ObjectId.isValid(req.query.id) && req.query.sid && mongoose.Types.ObjectId.isValid(req.query.sid)) {
					var id = req.query.id;
					var sid = req.query.sid;
					//console.log("req.query.sid", req.query.sid);
	
					//query checks if id is present in the student group collection
					_participantsgroup2.default.findOne({ _id: mongoose.Types.ObjectId(id) }, function (groupErr, group) {
						if (groupErr) {
							res.json({
								status: false,
								error: "Invalid Data"
							});
						} else {
	
							//query checks if id is present in the student group collection	 
							_participantsgroup2.default.update({ _id: mongoose.Types.ObjectId(id) }, { $pull: { participants: { $in: [mongoose.Types.ObjectId(sid)] } } }, function (error, saved) {
								if (error) {
									res.json({
										status: false,
										error: error
									});
								} else if (saved) {
	
									//call back function to update student under a participants group
									getStudentRecords(id, function (err, result) {
										if (err) {
											res.json({
												status: false,
												error: err
											});
										} else if (result) {
											//console.log("stu result data", result);
	
											//sucessfull response
											res.json({
												status: true,
												message: "Successfully Removed",
												data: result
											});
										}
									});
								}
							});
						}
					});
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				console.log("e in deleteStudentInGroup === ", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}
	
	/**
	* @Function Name: "getStudentRecords",
	* @Purpose: "Function to get updated student list based on group ID received as parameter",
	* @Request Object: data : { id, callback },
	* @Response Object: Success- result, count , Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function getStudentRecords(id, cb) {
		try {
			//console.log("inside student call back function1", id);
			if (id && id != '') {
				//console.log("inside student call back function2", id);
	
				//get the students list based on group Id
				var query = _participantsgroup2.default.findOne({ _id: mongoose.Types.ObjectId(id) }).select('groupName participants createdBy').populate('participants', 'firstname lastname email profile.profileImage', { userStatus: "Active", role: _adminUser.Roles.Student }).populate('createdBy', 'firstname lastname email profile.profileImage');
				query.exec(function (err, result) {
					if (err) {
						//console.log("err--", err);
						cb(err, null);
					} else if (result) {
						//console.log("result:", result);
	
						//call back response as result
						cb(null, result);
					} else {
						cb("Invalid Group", null);
					}
				});
			}
		} catch (e) {
			console.log('error in getStudentRecords ', e);
			cb('Internal server error', null);
		}
	}
	
	/**
	* @Function Name: "updateGroupName",
	* @Purpose: "Update group name based on group Id and new group name",
	* @Request Object: data : { uid : uid, groupName : groupName },
	* @Response Object: Success- Message, data , count , Failure- Error message,
	* @Author: "Najib Hasnain"
	*/
	
	function updateGroupName(req, res) {
		//console.log("inside save groupName", req.body.data.groupName);
	
		//Varifying request is valid or not
		(0, _authorization.checkValidRequest)(req.headers, function (person) {
			//console.log("person details", person);
			try {
	
				if (person != null && req.body.data && req.params.id && mongoose.Types.ObjectId.isValid(req.params.id)) {
					var id = req.params.id;
					var groupName = req.body.data.groupName;
					//console.log("inside if condition", id);
	
					//check if group Id is present in the participants collection
					_participantsgroup2.default.findOne({ _id: mongoose.Types.ObjectId(id) }, function (groupErr, group) {
						if (groupErr) {
	
							//console.log("groupErr", groupErr)
							res.json({ status: false, error: groupErr });
						} else if (group) {
							_participantsgroup2.default.findOne({ groupName: groupName }, function (grNameErr, grName) {
								if (grNameErr) {
									res.json({ status: false, error: grNameErr });
								} else if (grName != null) {
									res.json({ status: false, error: "Group name already exists" });
								} else if (grName == null) {
									//update student group name based on id received in req object
									_participantsgroup2.default.update({ _id: mongoose.Types.ObjectId(id) }, { $set: { groupName: groupName } }, function (saveErr, save) {
										if (saveErr) {
	
											//console.log("saveErr", saveErr)
											res.json({ status: false, error: saveErr });
										} else if (save) {
											getStudentRecords(id, function (err, result) {
												if (err) {
													//console.log("err", err)
													res.json({ status: false, error: err });
												} else if (result) {
													//console.log("stu result data", result);
	
													//sucessfull response
													res.json({ status: true, message: "Updated successfully", data: result });
												}
											});
										}
									});
								}
							});
						} else {
							res.json({ status: false, error: "Invalid Group" });
						}
					});
	
					// response if group Id does not match with participants collection ID	
				} else res.json({ status: false, error: "Invalid request." });
			} catch (e) {
				console.log("e in updateGroupName === ", e);
				res.json({ status: false, error: "Internal server error." });
			}
		});
	}

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.testApi = testApi;
	exports.fetchMyRooms = fetchMyRooms;
	exports.searchMyRooms = searchMyRooms;
	exports.shareLink = shareLink;
	exports.regenerateLink = regenerateLink;
	exports.conformRegenarate = conformRegenarate;
	exports.executeRoomQuery = executeRoomQuery;
	exports.sendConfLinkEmail = sendConfLinkEmail;
	exports.checkRoomUpcommingSch = checkRoomUpcommingSch;
	exports.randomKey = randomKey;
	exports.createGroup = createGroup;
	exports.getmygroups = getmygroups;
	exports.fetchGroup = fetchGroup;
	exports.getMyGroups = getMyGroups;
	exports.memberstoGroup = memberstoGroup;
	exports.getMachedContacts = getMachedContacts;
	exports.deleteGroup = deleteGroup;
	exports.fetchFeedbackType = fetchFeedbackType;
	exports.saveGoogleID = saveGoogleID;
	exports.removeSocailMedia = removeSocailMedia;
	exports.configApi = configApi;
	exports.fetchRoomDetails = fetchRoomDetails;
	
	var _users = __webpack_require__(6);
	
	var _users2 = _interopRequireDefault(_users);
	
	var _schedule = __webpack_require__(43);
	
	var _schedule2 = _interopRequireDefault(_schedule);
	
	var _topic = __webpack_require__(34);
	
	var _topic2 = _interopRequireDefault(_topic);
	
	var _room = __webpack_require__(17);
	
	var _room2 = _interopRequireDefault(_room);
	
	var _adminUser = __webpack_require__(13);
	
	var _emailFunctions = __webpack_require__(22);
	
	var EmailForUserCreation = _interopRequireWildcard(_emailFunctions);
	
	var _group = __webpack_require__(105);
	
	var _group2 = _interopRequireDefault(_group);
	
	var _students = __webpack_require__(33);
	
	var _students2 = _interopRequireDefault(_students);
	
	var _questionnaire = __webpack_require__(42);
	
	var _questionnaire2 = _interopRequireDefault(_questionnaire);
	
	var _authorization = __webpack_require__(10);
	
	var _slashesActions = __webpack_require__(4);
	
	var _schedule3 = __webpack_require__(57);
	
	var _config = __webpack_require__(18);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ = __webpack_require__(7);
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(249);
	var validator = __webpack_require__(12);
	function testApi(req, res) {
	  console.log("body === ", req);
	  res.json({ error: null });
	}
	/**
	* @Function Name: "fetchMyRooms",
	* @Purpose: "Fetch current user room for dashboard.",
	* @Request Object: null,
	* @Response Object: Success- {status : true, data : rooms }, Failure- {status : false},
	* @Author: "Prudhvi"
	*/
	function fetchMyRooms(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null) {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        var objEntity = {
	          uid: person._id,
	          role: person.role,
	          cid: bussinessID
	          // get selector for fetch rooms according to role
	        };(0, _schedule3.fetchRoomSelector)(objEntity, function (selector, instructorIds) {
	          if (selector != null) {
	            var query = _room2.default.find(selector).populate('selPackage', 'packageValidity features').populate('corporateId', 'businessType');
	            executeRoomQuery(query, function (err, doc) {
	              if (doc != null) {
	                res.json({ status: true, data: doc });
	              } else res.json({ status: false });
	            });
	          } else res.json({ status: false });
	        });
	      } else res.json({ status: false /*, error : "Invalid request."*/ });
	    } catch (e) {
	      console.log("e in fetchMyRooms === ", e);
	      res.json({ status: false /*, error : "Internal server error."*/ });
	    }
	  });
	}
	
	/**
	* @Function Name: "searchMyRooms",
	* @Purpose: "Fetch current user room with matched input value for dashboard.",
	* @Request Object: params : { input },
	* @Response Object: Success- {status : true, data : rooms }, Failure- {status : true, data : []},
	* @Author: "Prudhvi"
	*/
	function searchMyRooms(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null) {
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	        var objEntity = {
	          uid: person._id,
	          role: person.role,
	          cid: bussinessID
	          // get selector for fetch rooms according to role
	        };(0, _schedule3.fetchRoomSelector)(objEntity, function (selector, instructorIds) {
	          if (selector != null) {
	            if (req.params.input != '') {
	              var slash_search = (0, _slashesActions.addSlash)(req.params.input);
	              selector['roomName'] = { "$regex": slash_search, $options: "i" };
	            }
	            var query = _room2.default.find(selector).populate('selPackage', 'packageValidity features').populate('corporateId', 'businessType');
	
	            // fetch rooms only matched with input value
	            executeRoomQuery(query, function (err, doc) {
	              if (doc != null) res.json({ status: true, data: doc });else res.json({ status: true, data: [] });
	            });
	          } else res.json({ status: true, data: [] });
	        });
	      } else res.json({ status: true, data: [] });
	    } catch (e) {
	      console.log("e in searchMyRooms === ", e);
	      res.json({ status: true, data: [] });
	    }
	  });
	}
	
	/**
	* @Function Name: "shareLink",
	* @Purpose: "Fetch current user room with matched input value for dashboard.",
	* @Request Object: data : { mails, scheduleId, link },
	* @Response Object: Success- {status : true, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function shareLink(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null && person.email && req.body.data) {
	        var obj = req.body.data;
	        // console.log("obj ==== ", obj);
	        if (!obj.mails || obj.mails.length <= 0) res.json({ status: false, error: "Invalid Mail ids." });else if (!obj.link || validator.isEmpty(obj.link)) res.json({ status: false, error: "Invalid conference link." });else if (obj.scheduleId != null && obj.scheduleId != '') {
	
	          // share conference link from schedule
	          if (validator.isEmpty(obj.scheduleId) || !mongoose.Types.ObjectId.isValid(obj.scheduleId)) res.json({ status: false, error: "Invalid schedule." });else {
	            var schQuery = _schedule2.default.findOne({ _id: mongoose.Types.ObjectId(obj.scheduleId), dates: { $elemMatch: { _id: mongoose.Types.ObjectId(obj.slotId) } } }, { "dates.$._id": 1, createdBy: 1 });
	            schQuery.exec(function (scherr, schedule) {
	              // console.log("schedule === ", schedule);
	              if (scherr) res.json({ status: false, error: "Invalid schedule." });else if (schedule && schedule.createdBy._str == person._id._str) {
	
	                // schedule created user only can share the link
	                sendConfLinkEmail(obj.mails, obj.link, person.email, schedule.dates[0], person.firstname + " " + person.lastname);
	                res.json({ status: true, message: "Sent successfully." });
	              } else res.json({ status: false, error: "Access denied." });
	            });
	          }
	        } else {
	          // if (obj.roomId) {
	
	          // share conference link from room
	          // if (validator.isEmpty(obj.roomId) || !mongoose.Types.ObjectId.isValid(obj.roomId))
	          //   res.json({ status : false, error : "Invalid room." });
	          // else {
	          // var roomquery = Room.findOne({ _id : mongoose.Types.ObjectId(obj.roomId) });
	          // roomquery.exec(function (roomerr, room) {
	          //   if (roomerr) res.json({ status: false, error : "Room is not existed." });
	          //   if (room && room.createdBy._str == person._id._str) {
	
	          // room created user only can share the link
	          sendConfLinkEmail(obj.mails, obj.link, person.email, null, person.firstname + " " + person.lastname);
	          res.json({ status: true, message: "Sent successfully." });
	          // } else res.json({ status : false, error : "Access denied." });
	          // });
	        }
	        // } else
	        //   res.json({ status: false, error : "Internal server error." });
	      } else res.json({ status: false, error: "Invalid Request." });
	    } catch (e) {
	      console.log("e in shareLink === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "generateLink",
	* @Purpose: "For update roomkey.",
	* @Request Object: data : { roomId, date },
	* @Response Object: Success- {status : true, data, key, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function regenerateLink(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null && req.body.data && req.body.data.roomId && mongoose.Types.ObjectId.isValid(req.body.data.roomId)) {
	        var obj = req.body.data;
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	        // check valid room or not
	        var roomquery = _room2.default.findOne({ _id: mongoose.Types.ObjectId(obj.roomId) });
	        roomquery.exec(function (error, doc) {
	          if (error) res.json({ status: false, error: "Room is not existed." });
	          if (doc) {
	
	            // check that room have any upcomming schedules or not
	            checkRoomUpcommingSch(obj.roomId, obj.date, function (result) {
	              if (result == true) {
	
	                // generate new random and unique key
	                randomKey(10, function (response) {
	
	                  // update the roomkey with new key
	                  _room2.default.update({ _id: mongoose.Types.ObjectId(obj.roomId) }, { $set: { roomKey: response } }, { runValidators: true }, function (e, data) {
	                    if (e) res.json({ status: false, error: error });else {
	                      var objEntity = {
	                        uid: person._id,
	                        role: person.role,
	                        cid: bussinessID
	
	                        // fetch rooms with fresh data
	                      };(0, _schedule3.fetchRoomSelector)(objEntity, function (selector, instructorIds) {
	                        if (selector != null) {
	                          var query = _room2.default.find(selector).populate('selPackage', 'packageValidity');
	                          query.exec(function (roomError, roomsData) {
	                            if (roomsData) {
	                              _.each(roomsData, function (data) {
	                                if (!_.includes(data.roomKey, 'conf/')) {
	                                  var key = 'conf/' + data.roomKey;
	                                  data['roomKey'] = _config2.default.confLink.concat(key);
	                                }
	                              });
	                              var msg = "Regenerated successfully.";
	                              var link = 'conf/' + response;
	                              link = _config2.default.confLink.concat(link);
	                              res.json({ status: true, data: roomsData, key: response, link: link, message: msg });
	                            }
	                          });
	                        } else res.json({ status: false });
	                      });
	                    }
	                  });
	                });
	              } else if (result == false) res.json({ status: false, errorCode: 810 });else res.json({ status: false, error: result });
	            });
	          } else {
	            res.json({ status: false, error: "Room is not existed." });
	          }
	        });
	      } else res.json({ status: false, error: "Invalid Request." });
	    } catch (e) {
	      console.log("e in regenerateLink === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/**
	* @Function Name: "conformRegenarate",
	* @Purpose: "For update roomkey.",
	* @Request Object: data : { roomId, date },
	* @Response Object: Success- {status : true, data, key, message }, Failure- {status : false, error},
	* @Author: "Prudhvi"
	*/
	function conformRegenarate(req, res) {
	  var header = req.headers;
	
	  // Varifying request is valid or not
	  (0, _authorization.checkValidRequest)(header, function (person) {
	    try {
	      if (person != null && req.body.data && req.body.data.roomId && mongoose.Types.ObjectId.isValid(req.body.data.roomId)) {
	        var obj = req.body.data;
	
	        //code added by - Najib, Desc - Checking company Id is set or not as per change made in "checkValidRequest"
	        var bussinessID = null;
	        if (person.profile.companyid && person.profile.companyid._id) {
	          bussinessID = person.profile.companyid._id;
	        }
	
	        // generate new random and unique key
	        randomKey(10, function (response) {
	          if (response != null) {
	
	            // update the roomkey with new key
	            _room2.default.update({ _id: mongoose.Types.ObjectId(obj.roomId) }, { $set: { roomKey: response } }, { runValidators: true }, function (e, data) {
	              if (e) res.json({ status: false, error: error });else {
	                var objEntity = {
	                  uid: person._id,
	                  role: person.role,
	                  cid: bussinessID
	
	                  // fetch rooms with fresh data
	                };(0, _schedule3.fetchRoomSelector)(objEntity, function (selector, instructorIds) {
	                  if (selector != null) {
	                    var query = _room2.default.find(selector).populate('selPackage', 'packageValidity');
	                    query.exec(function (roomError, roomsData) {
	                      if (roomsData) {
	                        _.each(roomsData, function (data) {
	                          if (!_.includes(data.roomKey, 'conf/')) {
	                            var key = 'conf/' + data.roomKey;
	                            data['roomKey'] = _config2.default.confLink.concat(key);
	                          }
	                        });
	                        var link = 'conf/' + response;
	                        link = _config2.default.confLink.concat(link);
	                        res.json({ status: true, data: roomsData, key: response, link: link, message: "Regenerated successfully, You should have to invite people again." });
	                      } else {
	                        res.json({ status: true });
	                      }
	                    });
	                  } else res.json({ status: true });
	                });
	              }
	            });
	          } else res.json({ status: false, error: "Internal server error." });
	        });
	      } else res.json({ status: false, error: "Invalid Request." });
	    } catch (e) {
	      console.log("e in conformRegenarate === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}
	
	/* ------------------  callback functions -------------------------- */
	
	/**
	* @Function Name: "fetchRoomSelector",
	* @Purpose: "create selector for fetch room based on role.",
	* @Request Object: {role, uid, cid}, cb
	* @Response: selector object,
	* @Author: "Prudhvi"
	*/
	/*export function fetchRoomSelector(obj, cb){
	  try{
	    let selector = {}
	    if (obj.role == Roles.Student || obj.role == Roles.Attendee) {
	      let studentquery = Student.find({ students : {$in : [obj.uid]}});
	      studentquery.lean().exec( function(studenterr, student){
	        let roomIds = [];
	        _.each(student, function(stu){
	          roomIds.push(stu.roomId);
	        });
	        selector = { _id : {$in : roomIds }};
	        cb(null, selector);
	      });
	    } else {
	      selector = {$or : [ { createdBy : obj.uid },{ users : { $in :[obj.uid] } } ]};
	      if (obj.role == Roles.Superadmin)
	        selector = {};
	      else if (obj.role == Roles.Admin || obj.role == Roles.Lmsadmin || obj.role == Roles.CRMadmin || obj.role == Roles.Presenteradmin )
	        selector = { corporateId : obj.cid };
	      cb(null, selector);
	    }
	  } catch(e) {
	    console.log("e in fetchRoomSelector === ",e);
	    cb("Internal server error", null);
	  }
	}*/
	
	/**
	* @Function Name: "executeRoomQuery",
	* @Purpose: "execute the query, update roomkey.",
	* @Request Object: query, cb
	* @Response Object: Success- {null, docs, ids }, Failure- {error, null, null},
	* @Author: "Prudhvi"
	*/
	function executeRoomQuery(query, cb) {
	  try {
	    query.lean().exec(function (err, doc) {
	      if (err) cb(err, null);else if (doc) {
	        var ids = [];
	        _.each(doc, function (data) {
	          if (!_.includes(data.roomKey, 'conf/')) {
	            var key = 'conf/' + data.roomKey;
	            data['roomKey'] = _config2.default.confLink.concat(key);
	          }
	        });
	        cb(null, doc);
	      } else {
	        cb("Internal server error", null);
	      }
	    });
	  } catch (e) {
	    console.log("e in executeRoomQuery === ", e);
	    cb("Internal server error", null);
	  }
	}
	
	/**
	* @Function Name: "sendConfLinkEmail",
	* @Purpose: "send the conference link.",
	* @Request Object: mails, link, email
	* @Response Object: ,
	* @Author: "Prudhvi"
	*/
	function sendConfLinkEmail(mails, link, email, dates, senderName) {
	  var body = 'Dear User,<br /><br />We would like to Invite you to Join a Video Conference with us by following the below link., <br /><br /><a href="' + link + '">' + link + '</a><br /><br />';
	  if (dates != null) {
	    if (_config2.default && _config2.default.mail_timezone) {
	      body += 'Access mentioned link from ' + moment(dates.startTime, "x").tz(_config2.default.mail_timezone.zone).format("YYYY-MM-DD hh:mm A") + ' (' + _config2.default.mail_timezone.code + ') to ' + moment(dates.endTime, "x").tz(_config2.default.mail_timezone.zone).format("YYYY-MM-DD hh:mm A") + ' (' + _config2.default.mail_timezone.code + ') <br /><br />';
	    } else {
	      body += 'Access mentioned link from ' + moment(dates.startTime, "x").utc().format("YYYY-MM-DD hh:mm A") + ' (UTC) to ' + moment(dates.endTime, "x").utc().format("YYYY-MM-DD hh:mm A") + ' (UTC) <br /><br />';
	    }
	  }
	  body += 'Please follow the below set of rules before selecting the Link:<br /><br /> 1. Default browser should be Latest version Google chrome set or Mozilla Firefox.<br /><br /> 2.  Please connect the Camera and a Head Set with Mic to Join the VC with us.<br /><br /><br /><br />Thanks,<br />' + senderName + '<br />' + _config2.default.mail_signature;
	
	  var exchangeData = {
	    to: mails,
	    whoCreated: email,
	    subject: 'Conference Link',
	    body: body
	  };
	  EmailForUserCreation.createUserMail(exchangeData, function (status) {});
	}
	
	/**
	* @Function Name: "checkRoomUpcommingSch",
	* @Purpose: " fetch upcomming schedules of particular room.",
	* @Request: rid, date, cb
	* @Response: true/false/error,
	* @Author: "Prudhvi"
	*/
	function checkRoomUpcommingSch(rid, date, cb) {
	  try {
	
	    // fetch upcomming schedules of rid
	    var query = _schedule2.default.find({ roomId: rid, endDate: { $gt: date } });
	    query.exec(function (err, doc) {
	      // console.log("doc === ",doc);
	      if (doc && doc.length > 0) cb(false);else cb(true);
	    });
	  } catch (e) {
	    console.log("e in checkRoomUpcommingSch === ", e);
	    cb("Internal server error");
	  }
	}
	
	/**
	* @Function Name: "randomKey",
	* @Purpose: " generate random and unique string .",
	* @Request: length, cb
	* @Response: string/null,
	* @Author: "Prudhvi"
	*/
	function randomKey(length, cb) {
	  try {
	    var str = "";
	    var ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	
	    for (var i = 0; i < length; i++) {
	      str += ch.charAt(Math.floor(Math.random() * ch.length));
	    }var query = _room2.default.findOne({ roomKey: str });
	    query.exec(function (err, doc) {
	      if (doc) {
	        randomKey(10, function (data) {
	          cb(data);
	        });
	      } else {
	        cb(str);
	      }
	    });
	  } catch (e) {
	    console.log("e in randomKey === ", e);
	    cb(null);
	  }
	}
	
	/*--------------------------------END----------------------------------*/
	
	function createGroup(req, res) {
	  if (!req.body.groupObj) {
	    res.json({ status: false, error: "Invalid Request" });
	  } else {
	    var reqObj = req.body.groupObj;
	    if (!reqObj.uid || validator.isEmpty(reqObj.uid) || !mongoose.Types.ObjectId.isValid(reqObj.uid)) {
	      res.json({ status: false, error: "Invalid User" });
	    } else if (!reqObj.groupName) {
	      res.json({ status: false, error: "Please provide group name" });
	    } else {
	      var uid = mongoose.Types.ObjectId(reqObj.uid);
	      _users2.default.findOne({ _id: uid }, function (userError, person) {
	        if (userError) {
	          res.json({ status: false, error: "Invalid Data" });
	        } else if (person) {
	          if (reqObj._id) {
	            _group2.default.findOne({ _id: { $ne: mongoose.Types.ObjectId(reqObj._id) }, groupName: reqObj.groupName }, function (groupError, groupDoc) {
	              if (groupDoc) {
	                res.json({ status: false, error: "Group name already exists" });
	              } else {
	                _group2.default.update({ _id: mongoose.Types.ObjectId(reqObj._id) }, { $set: { groupName: reqObj.groupName } }, function (err, saved) {
	                  if (err) {
	                    console.log("err ======= ", err);
	                    res.json({ status: false, error: err });
	                  } else {
	                    getmygroups(uid, function (geterr, data) {
	                      if (geterr != null) {
	                        res.json({ status: false, error: geterr });
	                      } else {
	                        res.json({ status: true, data: data });
	                      }
	                    });
	                  }
	                });
	              }
	            });
	          } else {
	            _group2.default.findOne({ groupName: reqObj.groupName }, function (grouperror, group) {
	              if (group) {
	                res.json({ status: false, error: "Group name already exists" });
	              } else {
	                reqObj['createdOn'] = moment().utc().toDate();
	                reqObj['createdBy'] = uid;
	                reqObj['members'] = [uid];
	                delete reqObj['uid'];
	                var groupObj = new _group2.default(reqObj);
	                groupObj.save(function (err, saved) {
	                  if (err) {
	                    console.log("err ======= ", err);
	                    res.json({ status: false, error: err });
	                  } else {
	                    // console.log("saved ======= ", saved);
	                    getmygroups(uid, function (geterr, data) {
	                      if (geterr != null) {
	                        res.json({ status: false, error: geterr });
	                      } else {
	                        res.json({ status: true, data: data });
	                      }
	                    });
	                  }
	                });
	              }
	            });
	          }
	        }
	      });
	    }
	  }
	}
	
	function getmygroups(uid, cb) {
	  if (uid && uid != '') {
	    var query = _group2.default.find({ members: { $in: [uid] } }).populate('members', 'firstname lastname profile.profileImage').sort({ createdOn: -1 });
	    query.exec(function (err, doc) {
	      if (err) cb(err, null);else cb(null, doc);
	    });
	  } else {
	    cd(null, null);
	  }
	};
	
	function fetchGroup(req, res) {
	  if (!req.body.reqObj) {
	    res.json({ status: false, error: "Invalid data" });
	  } else if (!reqObj.uid || validator.isEmpty(reqObj.uid) || !mongoose.Types.ObjectId.isValid(reqObj.uid)) {
	    res.json({ status: false, error: "Invalid Data" });
	  } else {
	    _group2.default.findOne({ _id: mongoose.Types.ObjectId(reqObj._id) }, function (error, result) {
	      if (error) {
	        res.json({ status: false, error: "Invalid data" });
	      } else if (result) {
	        res.json({ status: true, data: result });
	      }
	    });
	  }
	}
	
	function getMyGroups(req, res) {
	  if (!req.body.uid) {
	    res.json({ status: false, error: "Invalid Request" });
	  } else {
	    if (validator.isEmpty(req.body.uid) || !mongoose.Types.ObjectId.isValid(req.body.uid)) {
	      res.json({ status: false, error: "Invalid User" });
	    } else {
	      var uid = mongoose.Types.ObjectId(req.body.uid);
	      getmygroups(uid, function (geterr, data) {
	        if (geterr != null) {
	          res.json({ status: false, error: geterr });
	        } else {
	          res.json({ status: true, data: data });
	        }
	      });
	    }
	  }
	}
	
	function memberstoGroup(req, res) {
	  try {
	    if (!req.body.reqObj) {
	      res.json({ status: false, error: "Invalid Data" });
	    } else {
	      var _reqObj = req.body.reqObj;
	      // console.log("reqObj === ",reqObj);
	      if (!_reqObj._id || validator.isEmpty(_reqObj._id) || !mongoose.Types.ObjectId.isValid(_reqObj._id)) {
	        res.json({ status: false, error: "Invalid Group id" });
	      } else if (!_reqObj.uid || validator.isEmpty(_reqObj.uid) || !mongoose.Types.ObjectId.isValid(_reqObj.uid)) {
	        res.json({ status: false, error: "Invalid User id" });
	      } else if (!_reqObj.mid || validator.isEmpty(_reqObj.mid) || !mongoose.Types.ObjectId.isValid(_reqObj.mid)) {
	        res.json({ status: false, error: "Invalid member id" });
	      } else {
	        var groupId = mongoose.Types.ObjectId(_reqObj._id);
	        var query = _group2.default.findOne({ _id: groupId });
	        query.exec(function (groupError, group) {
	          if (groupError) {
	            res.json({ status: false, error: "Invalid Group" });
	          } else if (group) {
	            var mid = mongoose.Types.ObjectId(_reqObj.mid);
	            if (_reqObj.status == true) {
	              var checkquery = _group2.default.findOne({ _id: groupId, members: { $in: [mid] } });
	              checkquery.exec(function (checkerr, check) {
	                if (check) res.json({ status: false, error: "Member already exists" });else {
	                  var addMemeberQuery = _group2.default.update({ _id: groupId }, { $push: { members: mid } });
	                  addMemeberQuery.exec(function (err, saved) {
	                    if (err) {
	                      res.json({ status: false, error: err });
	                    } else if (saved) {
	                      getmygroups(_reqObj.uid, function (geterr, data) {
	                        if (geterr != null) {
	                          res.json({ status: false, error: geterr });
	                        } else {
	                          res.json({ status: true, data: data, message: "Added successfully" });
	                        }
	                      });
	                    }
	                  });
	                }
	              });
	            } else {
	              if (group.createdBy == _reqObj.uid) {
	                var memeberQuery = _group2.default.update({ _id: groupId }, { $pull: { members: _reqObj.mid } });
	                memeberQuery.exec(function (err, saved) {
	                  if (err) {
	                    res.json({ status: false, error: err });
	                  } else if (saved) {
	                    getmygroups(_reqObj.uid, function (geterr, data) {
	                      if (geterr != null) {
	                        res.json({ status: false, error: geterr });
	                      } else {
	                        res.json({ status: true, data: data, message: "Removed successfully" });
	                      }
	                    });
	                  }
	                });
	              } else {
	                res.json({ status: false, error: "Access denied." });
	              }
	            }
	          }
	        });
	      }
	    }
	  } catch (e) {
	    console.log('error in memberstoGroup', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	function getMachedContacts(req, res) {
	  try {
	
	    if (req.body.searchData) {
	      var obj = req.body.searchData;
	      if (!obj.uid || validator.isEmpty(obj.uid) || !mongoose.Types.ObjectId.isValid(obj.uid)) {
	        res.json({ status: false, error: "Invalid User id." });
	      } else if (!obj.gid || validator.isEmpty(obj.gid) || !mongoose.Types.ObjectId.isValid(obj.gid)) {
	        res.json({ status: false, error: "Invalid group id." });
	      } else {
	        var userquery = _users2.default.findOne({ _id: obj.uid });
	        var groupquery = _group2.default.findOne({ _id: obj.gid });
	        userquery.exec(function (usererr, person) {
	          if (usererr) res.json({ status: false, error: "Invalid User." });else if (person) {
	            var ids = [];
	            groupquery.exec(function (grouperr, group) {
	              if (grouperr) res.json({ status: false, error: "Invalid group." });else if (group) {
	                _.each(person.contacts, function (doc) {
	                  if (doc.status == contactRequest.Accept) {
	                    var index = _.indexOf(group.members, doc._id);
	                    if (index <= -1) ids.push(doc._id);
	                  }
	                });
	                /*let filterIds = _.difference(ids, group.members);
	                console.log("filterIds === ",filterIds);*/
	                var query = _users2.default.find({ _id: { $in: ids }, $or: [{ "email": { "$regex": obj.input, $options: "i" } }, { "firstname": { "$regex": obj.input, $options: "i" } }, { "lastname": { "$regex": obj.input, $options: "i" } }] });
	                query.select('firstname lastname email profile.profileImage').exec(function (err, result) {
	                  if (err) {
	                    console.log("error--", err);
	                    res.json({ status: false, error: "Unauthorized user." });
	                  } else if (result && result.length > 0) {
	                    res.json({ status: true, data: result });
	                  } else {
	                    res.json({ status: true, data: [] });
	                  }
	                });
	              }
	            });
	          }
	        });
	      }
	    }
	  } catch (e) {
	    console.log('error in getMachedContacts', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	function deleteGroup(req, res) {
	  try {
	    if (!req.body.reqObj) {
	      res.json({ status: false, error: "Invalid data" });
	    } else {
	      var _reqObj2 = req.body.reqObj;
	      if (!_reqObj2.uid || validator.isEmpty(_reqObj2.uid) || !mongoose.Types.ObjectId.isValid(_reqObj2.uid)) {
	        res.json({ status: false, error: "Invalid user id" });
	      } else if (!_reqObj2._id || validator.isEmpty(_reqObj2._id) || !mongoose.Types.ObjectId.isValid(_reqObj2._id)) {
	        res.json({ status: false, error: "Invalid group id" });
	      } else {
	        var groupId = mongoose.Types.ObjectId(_reqObj2._id);
	        var groupquery = _group2.default.findOne({ _id: groupId });
	        groupquery.exec(function (grouperr, group) {
	          if (grouperr) {
	            res.json({ status: false, error: "Invalid group" });
	          } else if (group) {
	            if (group.createdBy == _reqObj2.uid) {
	              var query = _group2.default.remove({ _id: groupId });
	              query.exec(function (err, result) {
	                if (err) {
	                  res.json({ status: false, error: err });
	                } else {
	                  getmygroups(_reqObj2.uid, function (geterr, data) {
	                    if (geterr != null) {
	                      res.json({ status: false, error: geterr });
	                    } else {
	                      res.json({ status: true, data: data });
	                    }
	                  });
	                }
	              });
	            } else {
	              res.json({ status: false, error: "Access denied" });
	            }
	          }
	        });
	      }
	    }
	  } catch (e) {
	    console.log('error in deleteGroup', e);
	    res.json({
	      status: false,
	      error: 'Internal server error'
	    });
	  }
	}
	
	/*
	@Function Name : fetchFeedbackType
	@Purpose : "To fetch the feedbacktype"
	@Request Object : query:{rid}
	@Response Object : Success-data, Failure-error 
	@Author : Prateek
	*/
	
	function fetchFeedbackType(req, res) {
	
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null && req.query.rid) {
	        var obj = req.query;
	
	        //Firing a query to fetch the FeedbackType from room document
	        _room2.default.findOne({ roomKey: obj.rid }).select('roomConfiguration').exec(function (err, roomData) {
	          if (err) {
	            res.json({
	              status: false,
	              error: err.message
	            });
	          } else if (roomData) {
	            if (roomData.roomConfiguration.feedback.feedbackType == 'Customize') {
	
	              //Changes made by Prateek for code optimization and performance
	              //Date : 15/09/2017
	
	              //Firing an query to fetch the questionanaire question based on questionnaire Id
	              _questionnaire2.default.findOne({ _id: roomData.roomConfiguration.feedback.questionnaireId }).select('questions').exec(function (err, questionnaireData) {
	                if (err) {
	                  res.json({
	                    status: false,
	                    error: err.message
	                  });
	                } else if (questionnaireData) {
	                  res.json({
	                    status: true,
	                    data: roomData,
	                    questionnaireData: questionnaireData
	                  });
	                } else {
	                  res.json({
	                    status: false,
	                    error: "Invalid questionanaire"
	                  });
	                }
	              });
	            } else {
	              res.json({
	                status: true,
	                data: roomData,
	                questionnaireData: {}
	              });
	            }
	          } else {
	            res.json({
	              status: false,
	              error: "Invalid room"
	            });
	          }
	        });
	      } else {
	        res.json({
	          status: false,
	          error: "Invalid request."
	        });
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : saveGoogleID
	@Purpose : "Update The GoogleId for users connect with google"
	@Request Object : userAddressData: { _id : "user id", googleId: 'googleId' } }
	@Response Object : Success-data, Failure-error 
	@Author : Rajesh Goriga
	*/
	
	function saveGoogleID(req, res) {
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	        //console.log("Inside Save User Address Controller", req.body.userAddressData);
	        var userGoogleObject = req.body.data;
	        var requestedUserId = person._id;
	
	        //Verifying if userAddressObject is there or not
	        if (!userGoogleObject && (!userGoogleObject.gmail || !userGoogleObject.facebookMail)) {
	          res.json({
	            status: false,
	            error: "Invalid Request"
	          });
	        } else {
	          var query = { $or: [{ $and: [{ gmail: { $exists: true } }, { gmail: userGoogleObject.gmail }] }, { email: userGoogleObject.gmail }, { email: userGoogleObject.facebookMail }, { $and: [{ facebookMail: { $exists: true } }, { facebookMail: userGoogleObject.facebookMail }] }] };
	          _users2.default.findOne(query, function (error, user) {
	            // console.log(user)            
	            if (error) {
	              console.log(error);
	              res.json({
	                status: false,
	                error: "Internal server error"
	              });
	            } else if (user != null && (person.email == userGoogleObject.gmail || person.email == userGoogleObject.facebookMail)) {
	              var updateObj = {};
	              if (userGoogleObject.googleId) {
	                updateObj = {
	                  "googleId": userGoogleObject.googleId,
	                  "gmail": userGoogleObject.gmail
	                };
	              } else {
	                updateObj = {
	                  "facebookId": userGoogleObject.facebookId,
	                  "facebookMail": userGoogleObject.facebookMail
	                };
	              }
	
	              //Query for updating user profile with contact data based on user id
	              _users2.default.update({
	                _id: mongoose.Types.ObjectId(requestedUserId)
	              }, {
	                $set: updateObj
	              }, function (error, result) {
	                if (error) {
	                  console.log("Error while saving data", error.message);
	                  res.json({
	                    status: false,
	                    error: "Id not updated"
	                  });
	                } else if (result) {
	                  _users2.default.findOne({ _id: mongoose.Types.ObjectId(requestedUserId) }).populate('profile.companyid', 'businessType _id').exec(function (error, userData) {
	                    if (error) res.json({ status: false, error: error });else res.json({ status: true, data: userData, message: "Connected successfully" });
	                  });
	                }
	              });
	            } else if (user == null) {
	              var updateObj = {};
	              if (userGoogleObject.googleId) {
	                updateObj = {
	                  "googleId": userGoogleObject.googleId,
	                  "gmail": userGoogleObject.gmail
	                };
	              } else {
	                updateObj = {
	                  "facebookId": userGoogleObject.facebookId,
	                  "facebookMail": userGoogleObject.facebookMail
	                };
	              }
	              _users2.default.update({
	                _id: mongoose.Types.ObjectId(requestedUserId)
	              }, {
	                $set: updateObj
	              }, function (error, result) {
	                if (error) {
	                  console.log("Error while saving data", error.message);
	                  res.json({
	                    status: false,
	                    error: "Something went wrong while connecting"
	                  });
	                } else if (result) {
	                  _users2.default.findOne({ _id: mongoose.Types.ObjectId(requestedUserId) }).populate('profile.companyid', 'businessType _id').exec(function (error, userData) {
	                    if (error) res.json({ status: false, error: error });else res.json({ status: true, data: userData, message: "Connected successfully" });
	                  });
	                }
	              });
	            } else if (user != null && (person.email != userGoogleObject.gmail || person.email != userGoogleObject.facebookMail)) res.json({
	              status: false,
	              error: "This Account is  already connected to another account"
	            });else res.json({
	              status: false,
	              error: "Something went wrong while connecting"
	            });
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Athentication Failed"
	        });
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : removeGoogleId
	@Purpose : "Remove The GoogleId for users Disconnect with google"
	@Request Object : data: { _id : "user id" } }
	@Response Object : Success-data, Failure-error 
	@Author : Rajesh Goriga
	*/
	
	function removeSocailMedia(req, res) {
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person) {
	        //console.log("Inside Save User Address Controller", req.body.userAddressData);
	        var requestedUserId = person._id;
	        var type = req.body.data.type;
	
	        //Verifying if userAddressObject is there or not
	        if (!requestedUserId) {
	          res.json({
	            status: false,
	            error: "Invalid Data"
	          });
	        } else {
	          var unsetQuery = '';
	          if (type == 'Google') unsetQuery = { $unset: { googleId: 1, gmail: 1 } };else unsetQuery = { $unset: { facebookId: 1, facebookMail: 1 }
	
	            // let updateObj = {
	            //   "googleId": undefined,
	            //   "gmail": undefined
	            // }
	          };_users2.default.update({
	            _id: mongoose.Types.ObjectId(requestedUserId)
	          }, unsetQuery, function (error, result) {
	            if (error) {
	              console.log("Error while updating data", error.message);
	              res.json({
	                status: false,
	                error: "Disconnection Failed"
	              });
	            } else if (result) {
	              _users2.default.findOne({
	                _id: mongoose.Types.ObjectId(requestedUserId)
	              }).populate('profile.companyid', 'businessType _id').exec(function (error, user) {
	                if (error) res.json({ status: false, error: error });else res.json({ status: true, data: user, message: "Disconnected Successfully" });
	              });
	            }
	          });
	        }
	      } else {
	        res.json({
	          status: false,
	          error: "Athentication Failed"
	        });
	      }
	    } catch (e) {
	      res.json({
	        status: false,
	        error: "Internal server error."
	      });
	    }
	  });
	}
	
	/*
	@Function Name : configApi
	@Purpose : "Getting config settings from sever"
	@Request Object : null 
	@Response Object : config-data, Failure-error 
	@Author : Rajesh Goriga
	*/
	
	function configApi(req, res) {
	  res.json({ fullCalendar: _config2.default.fullCalendar, broadCast: _config2.default.broadCast });
	}
	
	function fetchRoomDetails(req, res) {
	  // Verifying request is valid or not
	  (0, _authorization.checkValidRequest)(req.headers, function (person) {
	    try {
	      if (person != null) {
	        _room2.default.findOne({ roomKey: (0, _slashesActions.addSlash)(req.params.roomKey) }).exec(function (err, room) {
	          if (err) {
	            resConfObj['error'] = "Error fetching Room Data.";
	            res.json({ status: false, data: resConfObj });
	          } else if (room) {
	            res.json({ status: true, data: { _id: room._id, roomName: room.roomName } });
	          }
	        });
	      } else {
	        res.json({ status: false, error: "Invalid request.", errorCode: 208 });
	      }
	    } catch (e) {
	      console.log("e in listPackage === ", e);
	      res.json({ status: false, error: "Internal server error." });
	    }
	  });
	}

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _slashesActions = __webpack_require__(4);
	
	var mongoose = __webpack_require__(2);
	var moment = __webpack_require__(1);
	
	
	var schema = new mongoose.Schema({
	
	  broadcast: {
	    type: String,
	    trim: true,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  author: {
	    type: mongoose.Schema.Types.ObjectId,
	    ref: 'Users'
	  },
	  companyid: {
	    type: mongoose.Schema.Types.ObjectId,
	    ref: 'Corporate'
	  },
	  student: {
	    type: mongoose.Schema.Types.ObjectId,
	    ref: 'Student'
	  },
	  status: {
	    type: [String],
	    ref: 'Users'
	  },
	  comments: [{
	    _id: {
	      type: mongoose.Schema.Types.ObjectId,
	      auto: true
	    },
	    author: {
	      type: mongoose.Schema.Types.ObjectId,
	      ref: 'Users'
	    },
	    comment: {
	      type: String,
	      trim: true,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    commentAt: {
	      type: Date,
	      default: moment().utc().toDate()
	    }
	  }],
	  likes: [{
	    _id: {
	      type: mongoose.Schema.Types.ObjectId,
	      auto: true
	    },
	    likedBy: {
	      type: mongoose.Schema.Types.ObjectId,
	      ref: 'Users'
	    },
	    likedAt: {
	      type: Date,
	      default: moment().utc().toDate()
	    }
	  }],
	  replies: [{
	    _id: {
	      type: mongoose.Schema.Types.ObjectId,
	      auto: true
	    },
	    author: {
	      type: mongoose.Schema.Types.ObjectId,
	      ref: 'Users'
	    },
	    replyOn: {
	      type: mongoose.Schema.Types.ObjectId
	    },
	    reply: {
	      type: String,
	      trim: true,
	      maxlength: [150, 'Reply length should be maximum of 150 characters'],
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    },
	    replyAt: {
	      type: Date,
	      default: moment().utc().toDate()
	    }
	  }],
	  createdAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  },
	  modifiedAt: {
	    type: Date,
	    default: moment().utc().toDate()
	  }
	}, {
	  toObject: { getters: true },
	  toJSON: { getters: true }
	});
	var Broadcast = mongoose.model('broadcast', schema);
	exports.default = Broadcast;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ChatSchema = new _mongoose2.default.Schema({
		sentBy: {
			type: _mongoose2.default.Schema.Types.ObjectId,
			ref: 'Users',
			required: true
		},
		sentTo: {
			type: _mongoose2.default.Schema.Types.ObjectId,
			ref: 'Users'
		},
		sentToGroup: {
			type: _mongoose2.default.Schema.Types.ObjectId,
			ref: 'Group'
		},
		sentToRoom: {
			type: _mongoose2.default.Schema.Types.ObjectId,
			ref: 'Room'
		},
		status: {
			type: [String]
		},
		chatType: {
			type: 'String',
			enum: ['Indi', 'Group', 'Room'],
			required: true
		},
		messageType: {
			type: 'String',
			enum: ['TXT', 'IMG', 'FILE', 'LINK', 'VIDEO', 'MEDIA', 'YOUTUBE', 'URL', 'VIMEO'],
			required: true
		},
		message: {
			type: 'String',
			required: true,
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		fileName: {
			type: 'String',
			set: _slashesActions.addSlash,
			get: _slashesActions.stripSlash
		},
		duration: {
			type: 'String',
			required: false
		},
		title: {
			type: 'String',
			required: false
		},
		vimeoThumbnail: {
			type: 'String',
			required: false
		},
		deletedBY: [{
			type: _mongoose2.default.Schema.Types.ObjectId,
			ref: 'Users'
		}],
		createdOn: {
			type: Date,
			default: (0, _moment2.default)().utc().toDate(),
			required: true
		}
	}, {
		toObject: { getters: true },
		toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('Chat', ChatSchema);

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _mongoose = __webpack_require__(2);
	
	var _mongoose2 = _interopRequireDefault(_mongoose);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _slashesActions = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Schema = _mongoose2.default.Schema;
	
	
	var pollSchema = new Schema({
	  roomId: {
	    type: String
	  },
	  question: {
	    type: String,
	    maxlength: [300, "Question length should be maximum of 300 characters"],
	    trim: true,
	    set: _slashesActions.addSlash,
	    get: _slashesActions.stripSlash
	  },
	  options: {
	    type: Array
	  },
	  submissions: [{
	    submittedBy: {
	      type: _mongoose2.default.Schema.Types.ObjectId,
	      ref: 'Users'
	    },
	    answer: {
	      type: String,
	      trim: true,
	      set: _slashesActions.addSlash,
	      get: _slashesActions.stripSlash
	    }
	  }],
	  publish: {
	    type: Boolean
	  },
	  createdBy: {
	    type: _mongoose2.default.Schema.Types.ObjectId,
	    ref: 'Users'
	  },
	  modifiedBy: {
	    type: _mongoose2.default.Schema.Types.ObjectId
	  },
	  createdAt: {
	    type: Date,
	    default: (0, _moment2.default)().utc().toDate()
	  },
	  modifiedAt: {
	    type: Date,
	    default: (0, _moment2.default)().utc().toDate()
	  }
	}, {
	  toObject: { getters: true },
	  toJSON: { getters: true }
	});
	
	exports.default = _mongoose2.default.model('Poll', pollSchema);

/***/ },
/* 235 */
/***/ function(module, exports) {

	"use strict";
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.sequence = sequence;
	/**
	 * Throw an array to it and a function which can generate promises
	 * and it will call them sequentially, one after another
	 */
	function sequence(items, consumer) {
	  var results = [];
	  var runner = function runner() {
	    var item = items.shift();
	    if (item) {
	      return consumer(item).then(function (result) {
	        results.push(result);
	      }).then(runner);
	    }
	
	    return Promise.resolve(results);
	  };
	
	  return runner();
	}

/***/ },
/* 236 */
/***/ function(module, exports) {

	module.exports = require("apn");

/***/ },
/* 237 */
/***/ function(module, exports) {

	module.exports = require("classnames");

/***/ },
/* 238 */
/***/ function(module, exports) {

	module.exports = require("crypto");

/***/ },
/* 239 */
/***/ function(module, exports) {

	module.exports = require("detect-browser");

/***/ },
/* 240 */
/***/ function(module, exports) {

	module.exports = require("element-class");

/***/ },
/* 241 */
/***/ function(module, exports) {

	module.exports = require("express-fileupload");

/***/ },
/* 242 */
/***/ function(module, exports) {

	module.exports = require("html-pdf");

/***/ },
/* 243 */
/***/ function(module, exports) {

	module.exports = require("https");

/***/ },
/* 244 */
/***/ function(module, exports) {

	module.exports = require("image-downloader");

/***/ },
/* 245 */
/***/ function(module, exports) {

	module.exports = require("intl");

/***/ },
/* 246 */
/***/ function(module, exports) {

	module.exports = require("intl/locale-data/jsonp/en");

/***/ },
/* 247 */
/***/ function(module, exports) {

	module.exports = require("intl/locale-data/jsonp/hi");

/***/ },
/* 248 */
/***/ function(module, exports) {

	module.exports = require("isomorphic-fetch");

/***/ },
/* 249 */
/***/ function(module, exports) {

	module.exports = require("moment-timezone");

/***/ },
/* 250 */
/***/ function(module, exports) {

	module.exports = require("node-excel-to-json");

/***/ },
/* 251 */
/***/ function(module, exports) {

	module.exports = require("node-gcm");

/***/ },
/* 252 */
/***/ function(module, exports) {

	module.exports = require("nodemailer");

/***/ },
/* 253 */
/***/ function(module, exports) {

	module.exports = require("plagiarism-checker");

/***/ },
/* 254 */
/***/ function(module, exports) {

	module.exports = require("postcss-cssnext");

/***/ },
/* 255 */
/***/ function(module, exports) {

	module.exports = require("postcss-focus");

/***/ },
/* 256 */
/***/ function(module, exports) {

	module.exports = require("postcss-reporter");

/***/ },
/* 257 */
/***/ function(module, exports) {

	module.exports = require("react-ga");

/***/ },
/* 258 */
/***/ function(module, exports) {

	module.exports = require("react-intl/locale-data/en");

/***/ },
/* 259 */
/***/ function(module, exports) {

	module.exports = require("react-intl/locale-data/hi");

/***/ },
/* 260 */
/***/ function(module, exports) {

	module.exports = require("react/lib/ReactTransitionEvents");

/***/ },
/* 261 */
/***/ function(module, exports) {

	module.exports = require("redux-devtools");

/***/ },
/* 262 */
/***/ function(module, exports) {

	module.exports = require("redux-devtools-dock-monitor");

/***/ },
/* 263 */
/***/ function(module, exports) {

	module.exports = require("redux-devtools-log-monitor");

/***/ },
/* 264 */
/***/ function(module, exports) {

	module.exports = require("redux-thunk");

/***/ },
/* 265 */
/***/ function(module, exports) {

	module.exports = require("slashes");

/***/ },
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */
/***/ function(module, exports) {

	module.exports = require("react-telephone-input");

/***/ },
/* 379 */
/***/ function(module, exports) {

	module.exports = require("react-telephone-input/lib/withStyles");

/***/ },
/* 380 */,
/* 381 */
/***/ function(module, exports) {

	module.exports = require("pagination-object");

/***/ },
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */
/***/ function(module, exports) {

	module.exports = require("highcharts");

/***/ },
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */
/***/ function(module, exports) {

	module.exports = require("react-facebook-login");

/***/ },
/* 420 */
/***/ function(module, exports) {

	module.exports = require("react-google-login");

/***/ },
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */
/***/ function(module, exports) {

	module.exports = require("react-avatar-cropper");

/***/ },
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */
/***/ function(module, exports) {

	module.exports = require("react-bootstrap/lib/Carousel");

/***/ },
/* 524 */
/***/ function(module, exports) {

	module.exports = require("react-pdf-js");

/***/ },
/* 525 */
/***/ function(module, exports) {

	module.exports = require("highcharts/modules/exporting");

/***/ },
/* 526 */
/***/ function(module, exports) {

	module.exports = require("react-copy-to-clipboard");

/***/ },
/* 527 */
/***/ function(module, exports) {

	module.exports = require("react-daterange-picker");

/***/ },
/* 528 */
/***/ function(module, exports) {

	module.exports = require("react-popup");

/***/ },
/* 529 */
/***/ function(module, exports) {

	module.exports = require("react-recaptcha");

/***/ },
/* 530 */
/***/ function(module, exports) {

	module.exports = require("underscore");

/***/ }
/******/ ]);