exports.ids = [4];
exports.modules = {

/***/ 348:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Conference = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(64);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _LoginActions = __webpack_require__(21);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _ConferenceActions = __webpack_require__(38);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _WorkDashboard = __webpack_require__(512);
	
	var _WorkDashboard2 = _interopRequireDefault(_WorkDashboard);
	
	var _SchedulePassword = __webpack_require__(502);
	
	var _SchedulePassword2 = _interopRequireDefault(_SchedulePassword);
	
	var _PresenterConf = __webpack_require__(497);
	
	var _PresenterConf2 = _interopRequireDefault(_PresenterConf);
	
	var _ScrollConf = __webpack_require__(504);
	
	var _ScrollConf2 = _interopRequireDefault(_ScrollConf);
	
	var _Hangout = __webpack_require__(491);
	
	var _Hangout2 = _interopRequireDefault(_Hangout);
	
	var _AttendeesList = __webpack_require__(488);
	
	var _AttendeesList2 = _interopRequireDefault(_AttendeesList);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _Analytics = __webpack_require__(66);
	
	var _Analytics2 = _interopRequireDefault(_Analytics);
	
	var _roles = __webpack_require__(46);
	
	var _Loading = __webpack_require__(142);
	
	var _Loading2 = _interopRequireDefault(_Loading);
	
	var _ErrorMessage = __webpack_require__(482);
	
	var _ErrorMessage2 = _interopRequireDefault(_ErrorMessage);
	
	var _IntlActions = __webpack_require__(37);
	
	var _IntlReducer = __webpack_require__(141);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_ErrorMessage2.default, {
	  message: 'unautharized_request'
	});
	
	var _ref2 = _jsx(_ErrorMessage2.default, {
	  message: 'invalid_user'
	});
	
	var _ref3 = _jsx(_ErrorMessage2.default, {
	  message: 'invalid_room'
	});
	
	var _ref4 = _jsx(_ErrorMessage2.default, {
	  message: 'invalid_or_expire_room'
	});
	
	var _ref5 = _jsx(_ErrorMessage2.default, {
	  message: 'invalid_or_expire_package'
	});
	
	var _ref6 = _jsx('div', {
	  className: 'col-md-12'
	}, void 0, _jsx('br', {}));
	
	var _ref7 = _jsx('div', {
	  className: 'col-md-12 text-center'
	}, void 0, _jsx(_reactFontawesome2.default, {
	  name: 'ban',
	  size: '5x'
	}));
	
	var _ref8 = _jsx('div', {
	  className: 'col-md-6'
	}, void 0, _jsx('h3', {}, void 0, "If you're having a problem with your camera:"), _jsx('br', {}), _jsx('ul', {}, void 0, _jsx('li', {}, void 0, 'Close any open applications that use a camera or microphone, such as other video-calling or chat programs.'), _jsx('li', {}, void 0, 'Make sure your camera is compatible with your computer.'), _jsx('li', {}, void 0, 'Download the most recent drivers for your camera from the manufacturer\'s website.'), _jsx('li', {}, void 0, 'Try restarting your browser.')));
	
	var _ref9 = _jsx('div', {
	  className: 'col-md-6'
	}, void 0, _jsx('h3', {}, void 0, 'Having a problem with your video call\'s sound?'), _jsx('br', {}), _jsx('ul', {}, void 0, _jsx('li', {}, void 0, 'If you have an external microphone or speakers, make sure they\'re plugged into the correct sockets on your computer.'), _jsx('li', {}, void 0, 'Check that your microphone isn\'t on mute. Some microphones have buttons to mute or un-mute. If you\'re using a headset, it may have a mute switch on the side of the headset or on the cable that connects to your computer.'), _jsx('li', {}, void 0, 'Close any open applications that use a camera or microphone. For example, other video calling or chat programs.'), _jsx('li', {}, void 0, 'Make sure your friend has their microphone set up correctly.')));
	
	var _ref10 = _jsx('div', {
	  className: 'col-md-12'
	}, void 0, 'If you\'re still experiencing a problem after trying the suggestions above, Please contact us at hotech@peoplelinkvc.com');
	
	var _ref11 = _jsx('div', {
	  className: 'col-md-12'
	}, void 0, _jsx('br', {}), _jsx('br', {}), _jsx('hr', {}));
	
	var _ref12 = _jsx('div', {
	  className: 'col-md-9'
	}, void 0, '\xA0');
	
	var _ref13 = _jsx('div', {}, void 0, _jsx(_Loading2.default, {}));
	
	var _ref14 = _jsx('div', {}, void 0, _jsx(_Loading2.default, {}));
	
	var _ref15 = _jsx(_ErrorMessage2.default, {
	  message: 'invalid_or_expire_package'
	});
	
	var _ref16 = _jsx(_ErrorMessage2.default, {
	  message: 'continous_user_presence_exceeded'
	});
	
	var _ref17 = _jsx('div', {}, void 0, _jsx(_Loading2.default, {}));
	
	var _ref18 = _jsx('div', {}, void 0, _jsx(_Loading2.default, {}));
	
	var Conference = exports.Conference = function (_Component) {
	  _inherits(Conference, _Component);
	
	  function Conference(props) {
	    _classCallCheck(this, Conference);
	
	    var _this = _possibleConstructorReturn(this, (Conference.__proto__ || Object.getPrototypeOf(Conference)).call(this, props));
	
	    _this.setResponse = function (response) {
	      if (response.roomSuccess) {
	        var _objAnalytics = new _Analytics2.default();
	        var that = _this;
	        _objAnalytics.LogAttendance(response.data.haveSchedule, response.data.roomDBId, function (logId) {
	          that.logId = logId;
	          that.setState({ currentAttendance: logId });
	        });
	      }
	      if (!response.status) {
	        _this.setState({ error: response.error });
	      } else {}
	      // conferenceDetails.confData.haveSchedule
	      // console.log("Conf Data Test", response);
	
	      // }
	    };
	
	    _this.onBackButtonEvent = function (e) {
	      e.preventDefault();
	      history.go(1);
	    };
	
	    _this.scheduleCallback = function () {
	      _this.checkSchedule = true;
	      _this.setState({ schedulePasswordModel: false });
	    };
	
	    _this.confObject = new _WoogeenManager2.default();
	    _this.logId = null, _this.state = {
	      ready: false,
	      streamList: null,
	      confObject: _this.confObject,
	      error: null,
	      currentAttendance: null,
	      schedulePasswordModel: true
	    };
	    _this.checkSchedule = false;
	    _this.handleConferenceStatus = _this.handleConferenceStatus.bind(_this);
	
	    _this.beforeUnload = _this.beforeUnload.bind(_this);
	    return _this;
	  }
	
	  _createClass(Conference, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;
	
	      var roomKey = this.props.params.rid;
	      if (!this.confObject.getConnectionStatus()) {
	        console.log(this.props.loggedInData.data._id, "Connection Status");
	        this.props.dispatch((0, _IntlActions.loginLanguage)(this.props.loggedInData.data, this.props.intlData.setlocale));
	        this.props.dispatch((0, _UserDashboardActions.requestToken)(roomKey, this.props.loggedInData.data._id)).then(function (res) {
	          return _this2.setResponse(res);
	        });
	        this.confObject.setRoomKey(roomKey);
	        this.confObject.handleConfStatusListener(this.handleConferenceStatus);
	        // this.props.dispatch(requestIceServer());
	        // history.pushState(null, null, location.href);
	        // window.onpopstate = this.onBackButtonEvent;
	      } else {}
	      window.addEventListener("beforeunload", this.beforeUnload);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      // var _objAnalytics = new Analytics();
	      // _objAnalytics.UpdateAttendance(this.logId);
	      window.removeEventListener("beforeunload", this.beforeUnload);
	    }
	  }, {
	    key: 'receiveStreams',
	    value: function receiveStreams(streams) {
	      this.setState({ streamList: streams });
	    }
	  }, {
	    key: 'endCallBack',
	    value: function endCallBack() {
	      var _this3 = this;
	
	      this.props.dispatch((0, _WorkDashboardActions.clearWorkDashboard)());
	      if (this.props.loggedInData.data.guest) {
	        this.props.dispatch((0, _ConferenceActions.clearGuestAccount)(this.props.params.rid)).then(function (res) {
	          return _this3.logOut(res);
	        });
	      };
	    }
	  }, {
	    key: 'logOut',
	    value: function logOut(res) {
	      if (res.status) {
	        _Analytics2.default.destroyObj();
	        store.dispatch((0, _LoginActions.ClearImage)());
	        _AuthController2.default.deleteSession();
	        _reactRouter.browserHistory.push('/');
	      } else {
	        console.log("Failed to remove guest.");
	      }
	    }
	  }, {
	    key: 'closeSchedulePassword',
	    value: function closeSchedulePassword() {
	      this.setState({ schedulePasswordModel: false });
	    }
	  }, {
	    key: 'hideHeader',
	    value: function hideHeader(headerFlag, showHeaderFlag) {
	      this.props.dispatch((0, _LoginActions.setHeaderFlag)(headerFlag, showHeaderFlag));
	    }
	  }, {
	    key: 'hideFeedbackConf',
	    value: function hideFeedbackConf() {
	      this.props.dispatch((0, _ConferenceActions.showOrHideConfFeedback)(0));
	    }
	  }, {
	    key: 'restartConference',
	    value: function restartConference() {
	      this.state.confObject.endConference(this.props.params.rid, true);
	      this.endCallBack();
	    }
	  }, {
	    key: 'beforeUnload',
	    value: function beforeUnload() {
	      // var res = confirm("Do you really want to exit!");
	      // if (res == true) {
	      (0, _apiCaller2.default)('remove-guest-room', 'put', {
	        data: { roomKey: this.props.params.rid }
	      });
	      if (this.state.currentAttendance != null) {
	        var _objAnalytics = new _Analytics2.default();
	        _objAnalytics.UpdateAttendance(this.state.currentAttendance);
	      }
	      return true;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      // console.log("Inside conf render");
	      var cls_confMain = _Dashboard2.default.confMain + ' clearfix';
	      var cls_videoTwoLayout = _Dashboard2.default.videoTwoLayout + ' pull-left';
	      var cls_rightPane = 'pull-right ' + _Dashboard2.default.block480;
	      var cls_hideObject = '';
	      var conferenceDetails = this.props.conferenceDetails;
	      var _noConference = false;
	      // if password autharized then go to conference 
	
	      var videoLayout = _jsx('div', {
	        className: _Dashboard2.default.tableBox
	      }, void 0, _jsx(_AttendeesList2.default, {
	        uid: this.props.loggedInData.data._id
	      }));
	      if (conferenceDetails /*&& conferenceDetails.iceServers*/) {
	          // console.log("Wow Ice here", conferenceDetails.iceServers)
	          var hostId = '';
	          var userRole = '';
	          var businessType = false;
	          var streamCount = 0;
	          var features = [];
	          var scheduleId = '';
	          var confHostId = '';
	          var slotId = '';
	
	          if (conferenceDetails && conferenceDetails.roomSuccess && conferenceDetails.confData && conferenceDetails.confData.token) {
	            scheduleId = conferenceDetails.confData.scheduleData ? conferenceDetails.confData.scheduleData._id : '';
	            slotId = conferenceDetails.confData.scheduleData ? conferenceDetails.confData.scheduleData.slotId : '';
	            hostId = conferenceDetails.confData.hostId;
	            userRole = this.props.loggedInData.data.role;
	            businessType = conferenceDetails.confData.businessType;
	            streamCount = conferenceDetails.streams.length;
	            features = conferenceDetails.confData.packageData && conferenceDetails.confData.packageData.features ? conferenceDetails.confData.packageData.features : [];
	            confHostId = conferenceDetails.hostId ? conferenceDetails.hostId : '';
	            if (conferenceDetails.confData.autharized == undefined || conferenceDetails.confData.autharized == false) {
	              return _ref;
	            } else if (conferenceDetails.confData.validUser == undefined || conferenceDetails.confData.validUser == false) {
	              return _ref2;
	            } else if (conferenceDetails.confData.validRoom == undefined || conferenceDetails.confData.validRoom == false) {
	              return _ref3;
	            } else if (conferenceDetails.confData.isExpiredRoom == undefined || conferenceDetails.confData.isExpiredRoom == true) {
	              return _ref4;
	            } else if (conferenceDetails.confData.validPackage == undefined || conferenceDetails.confData.validPackage == false) {
	              return _ref5;
	            } else if (!this.confObject.getConnectionStatus() && conferenceDetails.confData.haveSchedule && !this.checkSchedule && conferenceDetails.confData.scheduleData && conferenceDetails.confData.scheduleData.password) {
	              console.log("this.confObject.getConnectionStatus() ==== ", this.confObject.getConnectionStatus());
	              return _jsx(_SchedulePassword2.default, {
	                showModal: this.state.schedulePasswordModel,
	                scheduleId: scheduleId,
	                closeSchedulePassword: this.closeSchedulePassword.bind(this),
	                callback: this.scheduleCallback,
	                guest: this.props.loggedInData.data.guest
	              });
	            } else if (conferenceDetails.confStatus == 1 && businessType) {
	              if (conferenceDetails && conferenceDetails.roomSuccess && conferenceDetails.confData && conferenceDetails.confData.token) {
	                //Logic
	                /*
	                  if Role is Student 
	                  videoParm = false
	                  else 
	                  videoParm = true
	                           resolutionParm = Selected val
	                           Host_ID = 'from Object - host id' | if null keey host id as ''
	                           If ConfType = LMS
	                    mode = 'presenter'
	                  else  ConfType = TELEPRESENCE
	                    mode = 'telepresence'
	                  else ConfType = 'Conference'
	                    mode = conference
	                */
	                //          
	                // console.log("hostId-- ", hostId, "  --userRole-- ", userRole, "  ---businessType--- ", businessType);
	                if (conferenceDetails.confData.enableLive != true) {
	                  videoLayout = null;
	                  _noConference = true;
	                  console.log("enableLive is false!");
	                } else if ((userRole == _roles.Roles.Student || userRole == _roles.Roles.Attendee) && conferenceDetails.confData.haveSchedule != true) {
	                  videoLayout = null;
	                  _noConference = true;
	                  console.log("Student without Schedule");
	                } else if (userRole == _roles.Roles.Student || userRole == _roles.Roles.Attendee) {
	                  videoLayout = _jsx('div', {
	                    className: _Dashboard2.default.tableBox
	                  }, void 0, _jsx(_PresenterConf2.default, {
	                    role: userRole,
	                    logId: this.state.currentAttendance,
	                    users: conferenceDetails.confData.users,
	                    presenterId: conferenceDetails.presenter,
	                    speakerId: conferenceDetails.speaker,
	                    roomKey: this.props.params.rid,
	                    iceServers: conferenceDetails.iceServers,
	                    videoResolution: conferenceDetails.videoResolution,
	                    imHost: conferenceDetails.imHost,
	                    selfVideo: false,
	                    noScrollConf: true,
	                    selfAudio: false,
	                    codec: conferenceDetails.codec,
	                    transport: conferenceDetails.transport,
	                    myid: this.props.loggedInData.data._id,
	                    hosticon: false,
	                    publishVideo: false,
	                    sendStreams: this.receiveStreams.bind(this),
	                    onlyPresenter: conferenceDetails.onlyPresenter,
	                    attendees: conferenceDetails.attendees,
	                    streams: conferenceDetails.streams,
	                    confObject: this.state.confObject,
	                    token: conferenceDetails.confData.token,
	                    endCallBack: this.endCallBack.bind(this),
	                    hostId: hostId,
	                    confHostId: confHostId,
	                    scheduleId: scheduleId,
	                    confFeedback: conferenceDetails.confStatusMessage,
	                    roomType: conferenceDetails.confData.roomType,
	                    shareicon: false
	                  }), _jsx(_AttendeesList2.default, {
	                    uid: this.props.loggedInData.data._id,
	                    confObject: this.state.confObject
	                  }));
	                } else {
	                  videoLayout = _jsx('div', {
	                    className: _Dashboard2.default.tableBox
	                  }, void 0, _jsx(_PresenterConf2.default, {
	                    role: userRole,
	                    logId: this.state.currentAttendance,
	                    users: conferenceDetails.confData.users,
	                    presenterId: conferenceDetails.presenter,
	                    speakerId: conferenceDetails.speaker,
	                    roomKey: this.props.params.rid,
	                    iceServers: conferenceDetails.iceServers,
	                    transport: conferenceDetails.transport,
	                    videoResolution: conferenceDetails.videoResolution,
	                    imHost: conferenceDetails.imHost,
	                    selfVideo: true,
	                    codec: conferenceDetails.codec,
	                    myid: this.props.loggedInData.data._id,
	                    hosticon: this.props.loggedInData.data.guest ? false : true,
	                    publishVideo: true,
	                    sendStreams: this.receiveStreams.bind(this),
	                    onlyPresenter: conferenceDetails.onlyPresenter,
	                    attendees: conferenceDetails.attendees,
	                    streams: conferenceDetails.streams,
	                    confObject: this.state.confObject,
	                    token: conferenceDetails.confData.token,
	                    endCallBack: this.endCallBack.bind(this),
	                    roomType: conferenceDetails.confData.roomType,
	                    hostId: hostId,
	                    confHostId: confHostId,
	                    scheduleId: scheduleId,
	                    slotId: slotId,
	                    confFeedback: conferenceDetails.confStatusMessage,
	                    shareicon: this.props.loggedInData.data.guest ? false : true
	                  }), _jsx(_AttendeesList2.default, {
	                    uid: this.props.loggedInData.data._id,
	                    confObject: this.state.confObject
	                  }));
	                }
	              }
	
	              return _jsx(_reactBootstrap.Row, {
	                className: 'clearfix'
	              }, void 0, conferenceDetails.feedbackBlock == 2 ? _jsx('div', {
	                id: 'feedbackBlocker',
	                className: _Dashboard2.default.feedbackBlocker
	              }, void 0, _jsx('div', {
	                className: 'container'
	              }, void 0, _jsx('div', {
	                className: 'row'
	              }, void 0, _ref6, _ref7, _jsx('div', {
	                className: 'col-md-12'
	              }, void 0, _jsx('h1', {}, void 0, conferenceDetails.confStatusMessage)), _ref8, _ref9, _ref10, _ref11), _jsx('div', {
	                className: 'row'
	              }, void 0, _ref12, _jsx('div', {
	                className: 'col-md-1'
	              }, void 0, _jsx('button', {
	                type: 'button',
	                className: 'btn btn-warning pull-right',
	                onClick: this.hideFeedbackConf.bind(this)
	              }, void 0, 'Skip')), _jsx('div', {
	                className: 'col-md-2'
	              }, void 0, _jsx('button', {
	                type: 'button',
	                className: 'btn btn-success pull-left',
	                onClick: this.restartConference.bind(this)
	              }, void 0, 'Restart Conference'))))) : '', _jsx(_WorkDashboard2.default, {
	                screenStream: conferenceDetails.screenStream,
	                logId: this.state.currentAttendance,
	                confObject: this.state.confObject,
	                noConference: _noConference,
	                roomKey: this.props.params.rid,
	                uid: this.props.loggedInData.data._id,
	                role: this.props.loggedInData.data.role,
	                features: features,
	                isGuest: this.props.loggedInData.data.guest
	              }), _noConference ? null : _jsx('div', {
	                className: cls_rightPane
	              }, void 0, videoLayout));
	            } else if (conferenceDetails.confStatus == 2 && businessType) {
	              if (conferenceDetails && conferenceDetails.roomSuccess && conferenceDetails.confData && conferenceDetails.confData.token) {
	                return _jsx(_Hangout2.default, {
	                  roomKey: this.props.params.rid,
	                  logId: this.state.currentAttendance,
	                  users: conferenceDetails.confData.users,
	                  transport: conferenceDetails.transport,
	                  hosticon: userRole == _roles.Roles.Student || userRole == _roles.Roles.Attendee ? false : true,
	                  videoResolution: conferenceDetails.videoResolution,
	                  iceServers: conferenceDetails.iceServers,
	                  streams: conferenceDetails.streams,
	                  codec: conferenceDetails.codec,
	                  confObject: this.state.confObject,
	                  token: conferenceDetails.confData.token,
	                  streamCount: streamCount,
	                  imHost: conferenceDetails.imHost,
	                  sendStreams: this.receiveStreams.bind(this),
	                  myid: this.props.loggedInData.data._id,
	                  hostId: hostId,
	                  confHostId: confHostId,
	                  scheduleId: scheduleId,
	                  slotId: slotId,
	                  roomType: conferenceDetails.confData.roomType,
	                  isGuest: this.props.loggedInData.data.guest,
	                  hideHeader: this.hideHeader.bind(this),
	                  confFeedback: conferenceDetails.confStatusMessage,
	                  confFeedbackBlock: conferenceDetails.feedbackBlock,
	                  shareicon: userRole == _roles.Roles.Student || userRole == _roles.Roles.Attendee ? false : true,
	                  endCallBack: this.endCallBack.bind(this)
	                });
	              } else {
	                return _ref13;
	              }
	            } else {
	              return _jsx('div', {}, void 0, _ref14);
	            }
	          } else if (conferenceDetails.confData && conferenceDetails.confData.validPackage != undefined && conferenceDetails.confData.validPackage == false) {
	            return _ref15;
	          } else if (conferenceDetails.confData && conferenceDetails.confData.validCPLimit != undefined && conferenceDetails.confData.validCPLimit == false) {
	            return _ref16;
	          } else {
	            return _ref17;
	          }
	        } else {
	        return _ref18;
	      }
	    }
	  }, {
	    key: 'handleConferenceStatus',
	    value: function handleConferenceStatus(obj) {
	      this.props.dispatch((0, _ConferenceActions.SetConfStatus)(obj.status));
	    }
	  }]);
	
	  return Conference;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    intl: state.intl,
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state),
	    loggedInData: (0, _LoginReducer.loggedInData)(state),
	    intlData: (0, _IntlReducer.intlData)(state)
	  };
	}
	
	Conference.contextTypes = {
	  router: _react2.default.PropTypes.object
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(Conference);

/***/ },

/***/ 387:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _Admin = {
		"form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
		"progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
		"progress": "_32kzRKjl47M7AcFAivyyho",
		"progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
		"progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
		"backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
		"containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
		"googleContainer": "_1G8DyX--1Xskim3uSHbxil",
		"googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
		"googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
		"header": "_2xHja59x-eRkfv95koY1ce",
		"hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
		"body": "_1wybmROxdPMB2DSkLyTGGx",
		"navRight": "_2fWAne55trxpJYagJCezpL",
		"navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
		"active": "_1mqL1x9MCLjw6_Ok5T24oF",
		"midContainer": "_1oKiSeTflL6v2wZC13o7oC",
		"formField": "P8wcycRRhQUOqnf0qytj0",
		"profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
		"fullname": "m8-V01m5JYGd00wGYRCbo",
		"position": "aCZ3mMjMPWmB1Xr4poVi_",
		"txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
		"plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
		"inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
		"inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
		"inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
		"inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
		"labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
		"viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
		"avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
		"avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
		"imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
		"avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
		"profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
		"avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
		"avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
		"whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
		"whiteTile": "KCFNekbG6kNm7QCCmxcOC",
		"customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
		"mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
		"infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
		"headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
		"headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
		"headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
		"actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
		"headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
		"headingTxt": "IA7VynD7jO_xLZWz7aACg",
		"userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
		"userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
		"userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
		"userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
		"searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
		"searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
		"searchBox": "_79ROL_K6mHBW5o2LSPYyD",
		"whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
		"whiteIconSearch": "_8753oABxDX3rcNGmogytj",
		"chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
		"chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
		"whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
		"whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
		"whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
		"userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
		"modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
		"invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
		"brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
		"imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
		"fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
		"checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
		"fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
		"inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
		"accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
		"accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
		"roomLink": "_3GAUEPkkabqWlcSfevhUau",
		"multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
		"inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
		"gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
		"gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
		"gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
		"gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
		"gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
		"groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
		"groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
		"avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
		"avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
		"removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
		"locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
		"locationContainer": "GqFlk81qWkoM8pg8rM9mT",
		"locationHeader": "mgZJ5PYIcU3xilagy40bF",
		"deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
		"locationBody": "_9tu9wEbJADVdffughhYgF",
		"remove": "_2qTNEmDNBxEEHjfsZx6jUU",
		"viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
		"studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
		"addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
		"removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
		"studentblock": "_1npAxnK_u_EjOeG19x_gPa",
		"studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
		"participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
		"tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
		"tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
		"thStyle": "_253KYsN6UeeVvx_kTT0FTG",
		"hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
		"removeStyle": "XmJHLhTym-EGI-3dZGbWc",
		"attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
		"highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
		"highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
		"lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
		"lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
		"removePdng": "j5wasHyxigllgK3-KBNZp",
		"endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
		"dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
		"dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
		"applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
		"filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
		"gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
		"facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
		"btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
		"btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
		"fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
		"fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
		"googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
		"inLine": "_3SKSHSNT9quu0AEumeGTQT",
		"inputGrade": "_2Q0ilim6NermuOEyggbVkC",
		"flexContainer": "_3ELNW3V19Qpndrzsv3951F",
		"actionRightAbs": "_1uuENocETyaOc2rRiwior5",
		"closebtn": "_2GrTt3NBt2HkOlxHF614-3",
		"editClosebtn": "wpV9V72-_ceslWX8JrnXB",
		"first": "_35E4iHqMVJmbMgmzKL6Tv5",
		"headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
		"flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
		"formH5": "_23XBDJVodLOklMKND6BFwz",
		"qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
		"editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
		"formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
		"blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
		"blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
		"btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
		"btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
		"blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
		"btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
		"btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
		"btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
		"blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
		"btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
		"btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
		"inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
		"diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
		"gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
		"gTextg": "_1SEMPATJm2_wne7kQlcG10",
		"gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
		"errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
		"mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
		"rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
		"seprator": "_2UGm2z7pTnp444hmFIFOIp",
		"checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
		"inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
		"localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
		"localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
		"nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
		"allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
		"proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
		"popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
		"textCapAll": "dmP3hNbZiWb10oxof-KKb",
		"stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
		"stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
		"topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
		"emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
		"txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
		"addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
		"addStudPop2": "pJUMNDAuP9bGHel-6ESf",
		"addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
		"addStudText": "bfDwzSKIRHVbJQpazT_Il",
		"changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
		"fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
		"fdInfo": "jkgczk2IOaooUA2sdYQcY",
		"fdName": "_1GOg26hVpb9pUXFN9I9y75",
		"fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
		"fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
		"fdAns": "_25xB1C18_oF2MVuf5cn3zq",
		"errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
		"qleditor": "_17N2ULf7_DBC-wvog56baS",
		"txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
		"addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
		"progress-bar": "A2ftBZ69PzksWTqo3GY0k",
		"formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
		"mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
		"innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
		"loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RenderQuestions = function (_Component) {
		_inherits(RenderQuestions, _Component);
	
		function RenderQuestions(props) {
			_classCallCheck(this, RenderQuestions);
	
			var _this = _possibleConstructorReturn(this, (RenderQuestions.__proto__ || Object.getPrototypeOf(RenderQuestions)).call(this, props));
	
			_this.quill = null;
			return _this;
		}
	
		_createClass(RenderQuestions, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				this.quill = new Quill(this.refs.editor, {
					readOnly: true,
					theme: 'bubble'
				});
				var question = this.props.question;
				if (question && typeof question[0] === "string") {
					question = [{
						"insert": this.props.question[0]
					}];
				}
				this.quill.setContents(question);
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				var question = nextProps.question;
				if (question && typeof question[0] === "string") {
					question = [{
						"insert": nextProps.question[0]
					}];
				}
				if (this.quill) {
					this.quill.setContents(question);
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var cls_editor = _Admin2.default.qleditor + ' form-control';
				return _react2.default.createElement('div', { ref: 'editor', className: cls_editor });
			}
		}]);
	
		return RenderQuestions;
	}(_react.Component);
	
	exports.default = RenderQuestions;

/***/ },

/***/ 401:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.InviteBox = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrapDatetimepicker = __webpack_require__(86);
	
	var _reactBootstrapDatetimepicker2 = _interopRequireDefault(_reactBootstrapDatetimepicker);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _validator = __webpack_require__(12);
	
	var _validator2 = _interopRequireDefault(_validator);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Modal = __webpack_require__(52);
	
	var _ConfSettings = {
	  "contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
	  "attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
	  "groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
	  "indiChatFixed": "_121x6wkYY9bMxq2znilpes",
	  "settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
	  "openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
	  "openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
	  "openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
	  "onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
	  "onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
	  "tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
	  "tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
	  "tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
	  "modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
	  "modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
	  "modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
	  "block50": "_3KEUbD9sh-5efPnOe48KQu",
	  "nohover": "m7jTOV3afDX3KYXfpJDuW",
	  "fileUpload": "_1Ta80WwlyVY6khGgoelZff",
	  "modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
	  "active": "_3wgRcJQgpFwV1Tze6eaYAL",
	  "modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
	  "noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
	  "modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
	  "navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
	  "backSearch": "w7BGjmEiChPoMYjET5k8R",
	  "subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
	  "topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
	  "modContactList": "_1zmiGIPb92yNtOu845RHyM",
	  "chatBox": "_2taDr3sNLvZl64o7TkBTEg",
	  "callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
	  "midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
	  "modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
	  "contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
	  "avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
	  "contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
	  "listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
	  "onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
	  "busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
	  "bgOffline": "jL-R5aQBwO_2EmgAsiay1",
	  "bgOnline": "_3TEYblB_gY5codKEtLqX7q",
	  "adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
	  "addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
	  "formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
	  "inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
	  "btn": "_27VXnOss6C0tcmiXDJyEQY",
	  "btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
	  "topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
	  "modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
	  "addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
	  "btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
	  "btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
	  "contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
	  "asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
	  "modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
	  "headerText": "_2POMQ33JzpZXRKNQwhKTpK",
	  "optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
	  "settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
	  "click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
	  "radio": "_1YNHku8cDP1FxyBn3XkUJY",
	  "modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
	  "modChatContainer": "_21msPTbxn87ey3RWsSt_35",
	  "selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
	  "avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
	  "messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
	  "downloadFile": "_33q4w5biPTOCecW_SwRklY",
	  "downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
	  "textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
	  "otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
	  "chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
	  "modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
	  "chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
	  "formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
	  "sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
	  "avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
	  "setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
	  "iconBlock": "_1llySoPNa1j3k655fl2PNS",
	  "passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
	  "meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
	  "meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
	  "inputError": "_30zq1PCjl9v2jnkrDEFjSK",
	  "formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
	  "calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
	  "endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
	  "schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
	  "schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
	  "schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
	  "onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
	  "repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
	  "repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
	  "schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
	  "schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
	  "inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
	  "setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
	  "dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
	  "actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
	  "actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
	  "indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
	  "alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
	  "centerBlock": "HLVHVZhqp-7yopt3Ah073",
	  "btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
	  "transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
	  "btnTransport": "szHYW92cM7tgGZoXatQyg",
	  "helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
	  "sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
	  "scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
	  "scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
	  "sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
	  "sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
	  "sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
	  "popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
	  "btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
	  "emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
	  "formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
	  "formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
	  "colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
	  "colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
	  "endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
	  "toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _Admin = {
	  "form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
	  "progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
	  "progress": "_32kzRKjl47M7AcFAivyyho",
	  "progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
	  "progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
	  "backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
	  "containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
	  "googleContainer": "_1G8DyX--1Xskim3uSHbxil",
	  "googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
	  "googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
	  "header": "_2xHja59x-eRkfv95koY1ce",
	  "hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
	  "body": "_1wybmROxdPMB2DSkLyTGGx",
	  "navRight": "_2fWAne55trxpJYagJCezpL",
	  "navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
	  "active": "_1mqL1x9MCLjw6_Ok5T24oF",
	  "midContainer": "_1oKiSeTflL6v2wZC13o7oC",
	  "formField": "P8wcycRRhQUOqnf0qytj0",
	  "profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
	  "fullname": "m8-V01m5JYGd00wGYRCbo",
	  "position": "aCZ3mMjMPWmB1Xr4poVi_",
	  "txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
	  "plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
	  "inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
	  "inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
	  "inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
	  "inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
	  "labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
	  "viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
	  "avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
	  "avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
	  "imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
	  "avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
	  "profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
	  "avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
	  "avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
	  "whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
	  "whiteTile": "KCFNekbG6kNm7QCCmxcOC",
	  "customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
	  "mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
	  "infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
	  "headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
	  "headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
	  "headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
	  "actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
	  "headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
	  "headingTxt": "IA7VynD7jO_xLZWz7aACg",
	  "userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
	  "userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
	  "userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
	  "userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
	  "searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
	  "searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
	  "searchBox": "_79ROL_K6mHBW5o2LSPYyD",
	  "whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
	  "whiteIconSearch": "_8753oABxDX3rcNGmogytj",
	  "chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
	  "chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
	  "whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
	  "whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
	  "whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
	  "userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
	  "modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
	  "invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
	  "brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
	  "imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
	  "fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
	  "checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
	  "fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
	  "inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
	  "accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
	  "accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
	  "roomLink": "_3GAUEPkkabqWlcSfevhUau",
	  "multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
	  "inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
	  "gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
	  "gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
	  "gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
	  "gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
	  "gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
	  "groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
	  "groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
	  "avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
	  "avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
	  "removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
	  "locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
	  "locationContainer": "GqFlk81qWkoM8pg8rM9mT",
	  "locationHeader": "mgZJ5PYIcU3xilagy40bF",
	  "deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
	  "locationBody": "_9tu9wEbJADVdffughhYgF",
	  "remove": "_2qTNEmDNBxEEHjfsZx6jUU",
	  "viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
	  "studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
	  "addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
	  "removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
	  "studentblock": "_1npAxnK_u_EjOeG19x_gPa",
	  "studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
	  "participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
	  "tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
	  "tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
	  "thStyle": "_253KYsN6UeeVvx_kTT0FTG",
	  "hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
	  "removeStyle": "XmJHLhTym-EGI-3dZGbWc",
	  "attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
	  "highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
	  "highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
	  "lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
	  "lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
	  "removePdng": "j5wasHyxigllgK3-KBNZp",
	  "endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
	  "dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
	  "dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
	  "applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
	  "filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
	  "gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
	  "facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
	  "btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
	  "btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
	  "fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
	  "fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
	  "googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
	  "inLine": "_3SKSHSNT9quu0AEumeGTQT",
	  "inputGrade": "_2Q0ilim6NermuOEyggbVkC",
	  "flexContainer": "_3ELNW3V19Qpndrzsv3951F",
	  "actionRightAbs": "_1uuENocETyaOc2rRiwior5",
	  "closebtn": "_2GrTt3NBt2HkOlxHF614-3",
	  "editClosebtn": "wpV9V72-_ceslWX8JrnXB",
	  "first": "_35E4iHqMVJmbMgmzKL6Tv5",
	  "headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
	  "flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
	  "formH5": "_23XBDJVodLOklMKND6BFwz",
	  "qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
	  "editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
	  "formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
	  "blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
	  "blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
	  "btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
	  "btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
	  "blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
	  "btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
	  "btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
	  "btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
	  "blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
	  "btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
	  "btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
	  "inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
	  "diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
	  "gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
	  "gTextg": "_1SEMPATJm2_wne7kQlcG10",
	  "gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
	  "errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
	  "mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
	  "rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
	  "seprator": "_2UGm2z7pTnp444hmFIFOIp",
	  "checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
	  "inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
	  "localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
	  "localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
	  "nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
	  "allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
	  "proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
	  "popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
	  "textCapAll": "dmP3hNbZiWb10oxof-KKb",
	  "stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
	  "stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
	  "topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
	  "emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
	  "txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
	  "addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
	  "addStudPop2": "pJUMNDAuP9bGHel-6ESf",
	  "addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
	  "addStudText": "bfDwzSKIRHVbJQpazT_Il",
	  "changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
	  "fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
	  "fdInfo": "jkgczk2IOaooUA2sdYQcY",
	  "fdName": "_1GOg26hVpb9pUXFN9I9y75",
	  "fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
	  "fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
	  "fdAns": "_25xB1C18_oF2MVuf5cn3zq",
	  "errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
	  "qleditor": "_17N2ULf7_DBC-wvog56baS",
	  "txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
	  "addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
	  "progress-bar": "A2ftBZ69PzksWTqo3GY0k",
	  "formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
	  "mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
	  "innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
	  "loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _component = {
	  "form-control": "QmIrbtmLmFNpHdWMqFMWS",
	  "innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
	  "colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
	  "error": "_3jAfmA6J7YmNDyB2VfsCxP",
	  "mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
	  "dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
	  "iElement": "_2crZNiFs8z8oNhzPDC1qOE",
	  "oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
	  "iLabel": "_3Pyvct_srCoSvJCgGG41jw",
	  "oLabel": "NsxWZpxBqBX8wky_O477_",
	  "iForm": "_3IlToa7pigrSS8KWut_dJ8",
	  "oForm": "_3N0YNUcfI5U02VSmBEbYot",
	  "iFormField": "_12yKSn29WLZIE6fvGQfcrN",
	  "oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
	  "iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
	  "oFormGroup": "_386CxczA49XX2-ejr3Qe55",
	  "formNext": "ccTxjcG6_GZO9OgzW33HT",
	  "iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
	  "oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
	  "iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
	  "oContainer": "_2tEAAtqgoutuOUU96rNvv1",
	  "iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
	  "oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
	  "iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
	  "iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
	  "whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
	  "iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
	  "active": "_2fF1Q9nO2O_1B8Ldb4RM52",
	  "scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
	  "errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
	  "errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
	  "whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
	  "greyCard": "_34l9W17Mt1koxHLd1yUqgk",
	  "reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
	  "countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
	  "react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
	  "ad": "N3bKXyhfwvWT3eAEC9Nno",
	  "ae": "taXUT8yfjgRMeSH3rMNxy",
	  "af": "_2vH4qShCgBPBO4GR8BdNvd",
	  "ag": "n8QfWtvpZLMpatCUqX2Td",
	  "ai": "_3fPX_RcpesOPxFsmsaygCE",
	  "al": "_1T12tbcC6990b-fIMG5LYW",
	  "am": "_31HdarMDfXvAgjizVUoeHk",
	  "ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
	  "ar": "_2qJleMgRbIErIrx3kQF57O",
	  "as": "_2ZPVYL8Vjn-vdWZToCEhjN",
	  "at": "_1hWilvnrVbANEHRyLGlF-m",
	  "au": "_2zJE4K6o-ftWqhb3exXZgk",
	  "aw": "_1UroMxX5JHt9bjGdHwa1OY",
	  "az": "_-Y2xueZ_1mEtB9YDOqEGB",
	  "ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
	  "bb": "_34600Kl8Wac9Hx7S3-3U6b",
	  "bd": "_3WBX90V5VJXA7-vSUfEWCh",
	  "be": "BcK33edOPcbYdkxxvOApy",
	  "bf": "ShN64-J7UZdswoQjkf7L_",
	  "bg": "_2A9PgkQEF5_KbvHvDf6_lY",
	  "bh": "_10p3rxNRYOhv8-BtZuq1w8",
	  "bi": "_6MzP1qXXDFAZVL7nBmRiH",
	  "bj": "_2U8H1sji9LfDEW706KyKvF",
	  "bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
	  "bn": "PgMDvF79WHl3kaklOmhw3",
	  "bo": "_7MheGVInaTi-QLxw5PiUi",
	  "br": "_1BDNUyT0cHDlbCBFgrrLkJ",
	  "bs": "_3vcASZB5bu7mJAzTzaRkWe",
	  "bt": "esu4pvyd9ZFWrf-etnrva",
	  "bw": "_2Hbv1I361RJFK3Ph2xPlu_",
	  "by": "_2tbYam6Og8RAicMhX9SXvI",
	  "bz": "_3xB704PIgqFnU2zTG-JZFN",
	  "ca": "_36FyK29nkNl9Ez7yWh04AS",
	  "cd": "_9PnHTqK1pSn_GIAbBtPT2",
	  "cf": "_2LgMF7o1A3a2cgw5jkpvZV",
	  "cg": "_3hYc9Y3UdCphltZKe2vJWk",
	  "ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
	  "ci": "FoSGkvvMDFAVcvsZBWX-Z",
	  "ck": "_1742IgEaHW3SZU7h_-nkwr",
	  "cl": "_36IaMt7ntEwUsH4lwN4tW-",
	  "cm": "_1N8krqbPtlsEVsh6SaCetm",
	  "cn": "IfkD3fwbUSx9FZflX6iIU",
	  "co": "_3Y7u7ONzxyZVjZYzS1OHTr",
	  "cr": "Gw5Qz4qBNZjPDmpQmi-d2",
	  "cu": "ZuHtEp_knwZcbwTTJkRgI",
	  "cv": "o6BzJCyjRH1pOsf_HpbQ6",
	  "cw": "hRElJCQXyNIITDZ6UQVut",
	  "cy": "_2cHKWrINPNO6L8BEOdtJCG",
	  "cz": "nS617LE8Qcckdv9HJTWpt",
	  "de": "fqJD93WBywDPs0lrLEXLT",
	  "dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
	  "dk": "_3fpBLMtuUi0kowy3ziMRYd",
	  "dm": "_3gMwGkQW-OGFx1U7vd7VMD",
	  "do": "G9EZGjpXLJUyQuREesyGO",
	  "dz": "_3Nka0vwv6nZpeugyuqYQIJ",
	  "ec": "_18t83SdIOs8EY6iF0zV0CZ",
	  "ee": "_1miCbYr55XmBKvcUu6XetR",
	  "eg": "_1T55wMh1svM7M5QGxFM2ex",
	  "er": "c0Ab9spCQ4VnXr_6xijnD",
	  "es": "_1lutiEL9tJpdNgKmnTT6Ld",
	  "et": "_2GGXIPO2kOV6CUsu65V4Z3",
	  "fi": "_1I-g5oWpQznT5QZuBfQ8A",
	  "fj": "_3oeTP_GhC_XzsjzHW86oDc",
	  "fk": "_3-_BjK4NArHS0nyf0DLc4F",
	  "fm": "_1WQYGDC-zTatxog3SIwE80",
	  "fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
	  "fr": "_3-mqatBXfaTfex8LWjnIDA",
	  "bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
	  "mf": "_34f4ya9mcbpIcQPgHJ4I6c",
	  "ga": "_15_iO4CJaXbX7PySxoldPF",
	  "gb": "_1vZuFSSey59_ixozre-0L_",
	  "gd": "_26Ub0jcjDpVD4nwM7m5n4e",
	  "ge": "_27ctDR0Hf6HO15MgHS8wyh",
	  "gf": "_2S6C39D4wNBuVSqzYM5Ldy",
	  "gh": "_3vjGi6-umA-RzwxRFaTfNN",
	  "gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
	  "gl": "_1OTvyS4D4UOkymKuDLxUdx",
	  "gm": "_3-0gezNOVCHKzaLYGUySo2",
	  "gn": "_8f6uadrEfnS9IX8DEIpKO",
	  "gp": "_36yEj9UcEbZcI0WJvgmk0B",
	  "gq": "xHX18x9xk7PhDBlgsvnad",
	  "gr": "HTk_eFej1VrCiBuKBIfLT",
	  "gt": "hgmUbzxaHNZNL6frPhPeb",
	  "gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
	  "gw": "_36JwaXqhh4gBrIvAy4c1KO",
	  "gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
	  "hk": "_1mT74O5OVtonPLmYnVVOu7",
	  "hn": "_1ze0KI-TYxTrDcXlMOu24s",
	  "hr": "ZIDUSRfcbDCZTyhqWGPob",
	  "ht": "Y65Ad5pf3z7ufcknP0vhk",
	  "hu": "_3EHKICvcensXt5hEu8Nkfs",
	  "id": "_3oZE8uvxIFK7M9DCEtsSCD",
	  "ie": "_2RNmpg94YYioQp2fWyz_xn",
	  "il": "_2Mq_no7KYxPp2NSLGS1Tcs",
	  "in": "_1UlEZ269GihRa58c5mCEBN",
	  "io": "_3ovelrc7S_DdmXxL-8uuwk",
	  "iq": "_3VSlK6DYHrBgKbkE2Rng2N",
	  "ir": "NRX2sFBmuPSJ9EOigyuEP",
	  "is": "_25HaTNE7x74CJO9S1mnm4I",
	  "it": "_1-LmlhbrcpKN-xjESmR_sO",
	  "jm": "VsvDBply-4FtMoJhi8Cvu",
	  "jo": "yEE3hbkzWK8CSCrCJibCo",
	  "jp": "_3oxjjz1uD2cX2QsoSToLgz",
	  "ke": "_1ksOT6KMPd99EWuWCXPga_",
	  "kg": "_2CMnR3yv5DGwDc8p3uoOjp",
	  "kh": "_927b1QnaSWnN35i3bVewJ",
	  "ki": "_2CuDp55lqYTpFp68D4IWep",
	  "km": "_3tvMTeZYZMzBB9bGn9lV9E",
	  "kn": "_6kbCvwc22pJX0tNv3HToQ",
	  "kp": "_3tIPOe5PNrHH-bgCGaZTJj",
	  "kr": "_2653rpVUuy3ETaw1mogdnF",
	  "kw": "_1SKg_lTe0ShbPSOl44eKjp",
	  "ky": "tgj8SOv7bYoF7qfbbQWNG",
	  "kz": "bchn50J152EdQa0zf3k5u",
	  "la": "mu9oycLgpKX8_yLLkR5b9",
	  "lb": "_2TcAFbagIrNyc6mgzRVNW0",
	  "lc": "_2IFItnUNT-albvpN-ksxd2",
	  "li": "_3_E6nQspv6zJQLQI24puaS",
	  "lk": "_2M2wq3qQhGeUegbBTs7ilH",
	  "lr": "L4o4xOg0s6QbasyIRPgyF",
	  "ls": "LhBB6SRin61WSFtUwaEfe",
	  "lt": "ITDUphrnMkKItKGMVHZf8",
	  "lu": "_1mVW30sc4i-1M8tDPCQlL",
	  "lv": "_3rq6vE2IagAsGI6iESAcJq",
	  "ly": "_3se_Nzm1WQrEN3VZYiJJrv",
	  "ma": "_fSDiNxp_jjfqkQcWffDM",
	  "mc": "_2hRTRZeBtDGN4mNeWBZVgB",
	  "md": "_26jDl0skadEwmUYDGmEzST",
	  "me": "_388lJj_7sQdyd9HL7pMrar",
	  "mg": "_3aFoqVWcvG3p47Vwa6UuoE",
	  "mh": "_1YHi6OtXmKfP15ZNbwYGgy",
	  "mk": "_9QVyhHcp8yH762J8fWXhC",
	  "ml": "yYD99PoyhgFI4912_qoyJ",
	  "mm": "URzk8-j7LcySpGUMJf_Qk",
	  "mn": "_1J-lktQUTK0rydBz3foJGF",
	  "mo": "_1sbL0zhHof-KbfGWu2qjqF",
	  "mp": "_1tJjJlSjRw5AnqcXXmGwCI",
	  "mq": "fHob9sxaJrTuqSc0xL744",
	  "mr": "t-Bmj7a31aA-IwcRcL0ua",
	  "ms": "_2xyT54DQP62zWDySH7-Kdy",
	  "mt": "_1Ul_OlGODc8S0QplVq94PV",
	  "mu": "_1yIBERRJqnV33pTq2VpKRc",
	  "mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
	  "mw": "_3i8n-5-htdGNJLgn96O21",
	  "mx": "_16-6zoyiVzSGB1O72cUTzV",
	  "my": "_3W2P0D9eTN4BQoOcThOsaM",
	  "mz": "wJ8icX7Asp3dSImkXOdTM",
	  "na": "_1qt_F94mybbX5kr0ArtN-Z",
	  "nc": "h82AMIuCGdKf69Hc_nM6D",
	  "ne": "_2mVa5nGsijzD93WRl8dk64",
	  "nf": "_3XQ9oUH_84SsdZLjpVRuqT",
	  "ng": "_1uyyH1GZjsEk3YpaUSmmG6",
	  "ni": "_22_3H6UeFo26o3fSavtQaX",
	  "nl": "_93asfBYgR8C7bEDucZO8l",
	  "bq": "_37A1nwIz7Z3obwUjmliw4s",
	  "no": "_2-sVmkWiLn_ogTikc0c0Eg",
	  "np": "_1PqZSwf5cuMNmbE7bpKe67",
	  "nr": "_9q5Rg9Xn0G2buivFSGySP",
	  "nu": "RLhVdyjL9Cex8ekaJqirU",
	  "nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
	  "om": "_9mZYNhgBLiQg-j1FeVprJ",
	  "pa": "_3S7TrzxJIEYVghUMVHB6E7",
	  "pe": "_3V5sP7VvdGOFqApj7POYl2",
	  "pf": "_1YzdrkyHO-eCcEFF-hjZl7",
	  "pg": "ddWAanlQJPlB0QDWO6dAF",
	  "ph": "_2TGbmCcqHlJFCssz78MxOs",
	  "pk": "_2JerTABYGCUN8FLjpnDzKy",
	  "pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
	  "pm": "_29Hoo7EsoSHtvRFvlVg2cD",
	  "pr": "_3_pkwz60KLoYcbKwaRvIsS",
	  "ps": "_3jenITZ_yUYS7kU1HwFEHj",
	  "pt": "_1vz8ABWy5Yd43_JhaTWq9u",
	  "pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
	  "py": "_1_W41pJLcGMRhLdU997clv",
	  "qa": "Z0tjAakoNSOs14KuenmRi",
	  "re": "_3k5KF4jzE7HUitQw9MQKnp",
	  "ro": "_2b8XhT3-7NgjAC8gJJkpis",
	  "rs": "_2MUJr9MQbiKRTd_g0TaRQr",
	  "ru": "HjzPW2CxxNMSGZw1ugFW7",
	  "rw": "_23TGIOoPmB9QYqIPG6W3tA",
	  "sa": "_34WM8rSonfayW0vJ3koqJS",
	  "sb": "_3486rZNsCjvTmIoHbjK8mG",
	  "sc": "_3meAM_iQCU6MyfPQJTN3yl",
	  "sd": "_2x6XeHNF__4s9VVfFXCJhO",
	  "se": "_66VDclGQXxpdUR8uE3ZFa",
	  "sg": "tv3I_hfLcUJ_8i9ewVcUz",
	  "sh": "_1syDbbhbumwMwwD7Dwkb1V",
	  "si": "_3jsffwJjGr2sMEofSTTGkG",
	  "sk": "_1EpYAUcQLCqbYB48Auixqb",
	  "sl": "_3STJQv9nY5mol4cW82D2ci",
	  "sm": "_9aTR-AZMTaYHRmDVAyFTM",
	  "sn": "_3mTatYTWeJQQACfV7xzRhi",
	  "so": "_1LnWon2slwLMqAHzhkRT4c",
	  "sr": "_1GSedFwSsf5isgOi3p0x6U",
	  "ss": "_1sq99LOjKKgery3luOXOFn",
	  "st": "_1O6vYx_NaXFBAs1qYxgwaB",
	  "sv": "_10D9RGnRzUv14bYWQaC23c",
	  "sx": "KonDEEzH2JzIWsVUBzFdY",
	  "sy": "_1ZAnqGYeixOJVFwwt6hNIo",
	  "sz": "_3FeOFkec3sXYbvQhWDdIM7",
	  "tc": "_1FZvldKEV-vz12TyyNfEf",
	  "td": "_31fysfDRtTWVKcX_UjX0ty",
	  "tg": "H60Kyr6MsF6nvRz5l7EfN",
	  "th": "SHZkbUz1c_H_zDOfxLc4",
	  "tj": "_2MRI0fA4OLgepXVooYMu9H",
	  "tk": "_1W959S9LHLCKhz3xi4MpHe",
	  "tl": "_1lMF_0nwQXTyBRRzRj7hBF",
	  "tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
	  "tn": "_2MeGi_bqLVuCaRtJzs3QqA",
	  "to": "_3egwC_50WENVPaap_uwXr8",
	  "tr": "_2KiPy3o6m7JCKQWPY2fI1d",
	  "tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
	  "tv": "_2D9VWSmHkhgNemAaIKF_cp",
	  "tw": "_2J7nVAh1zEa7kV5Ba51CLV",
	  "tz": "_2acF96LLqMjlbfMX1oiAjT",
	  "ua": "_2rr3Tyr8dP6vDvE0khEDKT",
	  "ug": "D7gjzKmlr78rNWXXw90np",
	  "us": "_1l5RtWI_acgLVeCd5fjgHG",
	  "uy": "_1zX6hTsIa2TtL6dgR47eQ9",
	  "uz": "_29NUL3VtwK1_RWUyPsY2ei",
	  "va": "_39kTgRBkhqqGVLUTJvK_67",
	  "vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
	  "ve": "_3Lk2Svkm2NTAVpUfiY_No5",
	  "vg": "_3SiYuGrNzW9DNkXwTZugyj",
	  "vi": "_2BiiERObu5xcE6P1SZxLdj",
	  "vn": "_3kSg6iW0KLoUpJ0g70fckK",
	  "vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
	  "wf": "Arz0xEqJcbKbLmPz_tXTS",
	  "ws": "_3oTaxcmbTriEd90-cXNqD8",
	  "ye": "gxtmCiQO2ao4JTQXuRUIJ",
	  "za": "_25HyrYKmQQAteF_LwADnIt",
	  "zm": "Kui2u7hZHcNBqlzbqR-vQ",
	  "zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
	  "hide": "_2kO_U0LXcg71jJA6RSia2e",
	  "v-hide": "_2HBc009zwTsSlkh8P8tH10",
	  "invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
	  "flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
	  "open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
	  "selected-flag": "_10c169vRt8V92_nQ_S0KtR",
	  "flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
	  "arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
	  "up": "_2ykRnfq4f2nlmZGfvzrn92",
	  "country-list": "UlTusogWL2urjgGgLNpcD",
	  "divider": "_2zMaTbM3nSdE07wOs7YYRt",
	  "country": "uL848pHFWhb_G94Ak-KX5",
	  "dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
	  "highlight": "BLa_2aA2PkYD2PsO2fvNC",
	  "country-name": "_3ih_ovRiGmAkpjxuz63nhk",
	  "uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
	  "fileUpload": "_2WENukerx3mNXkTyu0UXQf",
	  "uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
	  "upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
	  "blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
	  "feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
	  "errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
	  "gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
	  "red": "_3wj0AXV9gqX9YG1nk-2u9J",
	  "green": "_3KPVxc3su8ewtuKZgu8TGv",
	  "orange": "_3cLlE5QI9XJwY6e7jO5bLg",
	  "capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
	  "importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
	  "importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
	  "importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
	  "icon": "_12rnwIUewKT2PdtWMnNyD5",
	  "importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
	  "broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
	  "broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
	  "btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
	  "textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
	  "spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
	  "pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
	  "lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
	  "removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
	  "inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
	  "popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
	  "dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
	  "dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
	  "applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
	  "filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
	  "btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
	  "assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
	  "pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
	  "assTab": "y4LW63OuadI0JWTQBnbJ1",
	  "heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
	  "radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
	  "wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
	  "leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
	  "rightBox": "DP21PoKxwKk_vJyOuQTcr",
	  "gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
	  "actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
	  "gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
	  "actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
	  "gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
	  "morePref": "JBm94eKPIFI8vfiroATJ6",
	  "tile": "_1Ssp2zTovh7AwJWuRkgnge",
	  "tileItems": "_3cDqgy8AedDYzhy8Euosis",
	  "tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
	  "tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
	  "category": "_2Ow56TBY2Y24yY5SjVRU4l",
	  "innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
	  "maxScore": "_3uL97t2vemfuAs83cAFhjE",
	  "maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
	  "scored": "_12gGWK_s69JBGzOAX7ClkT",
	  "scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
	  "remTile": "_3vgBsvWRGVVRwIEDn1TquO",
	  "tileBody": "dF1WC_PeNjG87K2XGMIcS",
	  "tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
	  "gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
	  "gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
	  "assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
	  "blue": "K7acjAQMroOGGtUqqojYy",
	  "yellow": "G7N-PGOIbGO_ZkaqBu2mx",
	  "txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
	  "txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
	  "txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
	  "txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
	  "txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
	  "txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
	  "addTile": "lCw_kxhsAPcuM3yFAqvpF",
	  "addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
	  "addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
	  "commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
	  "totalScore": "FDG4LAia-7JDDtxb7R4Kb",
	  "totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
	  "textBox": "_13VdIFmMegxz_eR8VIXN_M",
	  "totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
	  "totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
	  "resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
	  "resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
	  "resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
	  "headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
	  "scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
	  "resultBody": "N6kKlySaRGbRcB4bBmpZ0",
	  "resGroup": "_2byM-_1N3yjHb2dpmlikdf",
	  "resTile": "DZeuj4DKkdAPKCgYd76RK",
	  "resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
	  "resRating": "R7j9mxFZmdmLgC7bPXpyN",
	  "txtSize": "_977ldMQMMiHQ0YG_61T3g",
	  "txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
	  "resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
	  "resInput": "_14gsxA36f-uYOfxGDvr_gi",
	  "activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
	  "feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
	  "fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
	  "feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
	  "profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
	  "profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
	  "profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
	  "name": "_25-6SxUiv8zhOMEVTRrg8w",
	  "commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
	  "addpdng": "_6rQH8tivz8ELIWszpbahs",
	  "good": "_3lOxcxDfxhPcuhLBJHo4Ur",
	  "vGood": "l_IAfocpDxfvpU316U0EI",
	  "fair": "_3I3YapUnBVxgs-ZsGf3Poh",
	  "poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _lib = __webpack_require__(45);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ToastMessageFactory = _react2.default.createFactory(_lib.ToastMessage.animation);
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
	  id: 'invalid_mail_id'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'please_enter'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'invalid_mail_id'
	});
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'please_enter'
	});
	
	var _ref5 = _jsx('h4', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'join_meeting'
	}), '.');
	
	var _ref6 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'conference_room_url'
	});
	
	var _ref7 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'cancel'
	});
	
	var _ref8 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'invite'
	});
	
	var InviteBox = exports.InviteBox = function (_Component) {
	  _inherits(InviteBox, _Component);
	
	  function InviteBox(props) {
	    _classCallCheck(this, InviteBox);
	
	    var _this = _possibleConstructorReturn(this, (InviteBox.__proto__ || Object.getPrototypeOf(InviteBox)).call(this, props));
	
	    _this.handleChange = function (e) {
	      if (e.target.value != ',' && e.target.value != ' ') {
	        _this.setState({ value: e.target.value });
	      }
	    };
	
	    _this.handleKeyPress = function (e) {
	      if (e.key === 'Enter' || e.key === ' ' || e.key === ',') {
	        var mail = e.target.value.trim();
	        if (mail != '') {
	          if (!_validator2.default.isEmail(mail)) {
	            _this.setState({ error: _ref });
	          } else {
	            var mails = _this.state.mailsList;
	            mails.push(mail.toLowerCase());
	            _this.setState({ mailsList: mails, value: '', error: '' });
	          }
	        } else {
	          _this.setState({ error: _ref2 });
	        }
	      }
	    };
	
	    _this.regenerateLink = function () {
	      if (_this.props.roomId) {
	        var obj = {
	          roomId: _this.props.roomId,
	          date: (0, _moment2.default)().utc().toDate()
	        };
	        (0, _UserDashboardActions.RegenerateLink)(obj).then(function (res) {
	          if (res.status) {
	            _this.setState({ link: res.link });
	            _this.props.getNewRooms(res);
	            _this.refs.invite_container.success(res.message, '');
	          } else {
	            console.log("error == ", res.error);
	            if (res.errorCode == 810) {
	              var props = _this.props;
	              var response = _this.setResponse;
	              alertify.confirm(_this.props.intl.messages.warning, _this.props.intl.messages.generate_meeting_alert, function (result) {
	                if (result) {
	                  (0, _UserDashboardActions.ConformRegenarate)(obj).then(function (res) {
	                    return response(res);
	                  });
	                }
	              }, function () {}).setting('labels', { 'ok': _this.props.intl.messages.ok, 'cancel': _this.props.intl.messages.cancel });
	            } else _this.refs.invite_container.error(res.error, '');
	          }
	        });
	      }
	    };
	
	    _this.setResponse = function (response) {
	      if (response.status) {
	        _this.setState({ link: response.link });
	        _this.props.getNewRooms(response);
	        _this.refs.invite_container.success(response.message, '');
	      } else {
	        console.log("error === ", response.error);
	        _this.refs.invite_container.error(response.error, '');
	      }
	    };
	
	    _this.hideModal = function () {
	      _this.setState({ error: '', mailsList: [], value: '' });
	      _this.props.hidecallback();
	    };
	
	    _this.state = {
	      mailsList: [],
	      value: '',
	      error: ''
	    };
	    _this.guestUrl = 'No link';
	    return _this;
	  }
	
	  _createClass(InviteBox, [{
	    key: 'invitePeople',
	    value: function invitePeople() {
	      var _this2 = this;
	
	      var mail = this.state.value.trim();
	      var mails = this.state.mailsList;
	      if (mail != '') {
	        if (!_validator2.default.isEmail(mail)) {
	          this.setState({ error: _ref3 });
	        } else {
	          mails.push(mail.toLowerCase());
	        }
	      }
	      if (mails.length > 0) {
	
	        var obj = {
	          mails: mails,
	          link: this.guestUrl,
	          scheduleId: this.props.scheduleId,
	          slotId: this.props.slotId
	          // roomId : this.props.roomId
	        };
	        (0, _UserDashboardActions.sendInviteLink)(obj).then(function (res) {
	          if (res.status) {
	            _this2.props.hidecallback();
	            //changeBy: pranathi, disc: onclick of sharelink button, changed  error  state to  empty 
	            _this2.setState({ mailsList: [], value: '', error: '' });
	          }
	          _this2.props.errorCallback(res);
	        });
	      } else {
	        this.setState({ error: _ref4 });
	      }
	    }
	  }, {
	    key: 'removemail',
	    value: function removemail(e) {
	      var mails = this.state.mailsList;
	      var index = mails.indexOf(e.target.id.toLowerCase());
	      if (index > -1) {
	        mails.splice(index, 1);
	      }
	      this.setState({ mailsList: mails });
	    }
	
	    //Chnages made by prateek for handling bug#2999
	
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;
	
	      // console.log("room id === ",this.props);
	      var cls_btnSaveEdit = ' ' + _Admin2.default.btnSaveAssign + ' ';
	      var cls_invitationInfoBlock = '' + _Admin2.default.invitationInfoBlock;
	      var cls_table = '' + _Dashboard2.default.GS;
	      var cls_td = '' + _Dashboard2.default.eV;
	      var cls_mailsList = '' + _Dashboard2.default.oj;
	      var cls_mailsDiv = _Dashboard2.default.wO + ' ' + _Dashboard2.default.nr + ' ' + _Dashboard2.default.l1;
	      var cls_hiddenInput = '' + _Dashboard2.default.wA;
	      var cls_input = '' + _Dashboard2.default.vO;
	      var cls_vr = '' + _Dashboard2.default.vR;
	      var cls_email = _Dashboard2.default.vN + ' ' + _Dashboard2.default.bfK + ' ' + _Dashboard2.default.a3q;
	      var cls_vt = '' + _Dashboard2.default.vT;
	      var cls_vm = '' + _Dashboard2.default.vM;
	      var cls_errcls = '' + _component2.default.error;
	      var cls_imgRefreshMain = _Dashboard2.default.imgRefreshMain + ' ' + _Dashboard2.default.actionIcon;
	
	      var mails = '';
	
	      var guestUrl = this.props.roomKey.split("/conf/");
	      // console.log("guestUrl---- ", guestUrl);
	      if (this.props.slotId) {
	        guestUrl[1] = "/conf/guestScheduled/";
	        guestUrl[2] = this.props.slotId;
	      } else {
	        var tmpRoomKey = guestUrl[1];
	        guestUrl[1] = "/conf/guest/";
	        guestUrl[2] = tmpRoomKey;
	      }
	      this.guestUrl = guestUrl.join("") ? guestUrl.join("") : "No link";
	
	      if (this.state.mailsList && this.state.mailsList.length > 0) {
	        var docs = this.state.mailsList;
	        var count = 10;
	        mails = docs.map(function (doc) {
	          return _jsx('div', {
	            className: cls_vr
	          }, count++, _jsx('span', {
	            className: cls_email
	          }, void 0, _jsx('div', {
	            className: cls_vt
	          }, void 0, doc), _jsx('div', {
	            className: cls_vm,
	            id: doc,
	            onClick: _this3.removemail.bind(_this3)
	          })), _jsx('input', {
	            name: 'to',
	            type: 'hidden',
	            value: doc
	          }));
	        });
	      }
	      return _jsx(_reactBootstrap.Modal, {
	        show: this.props.showModal,
	        onHide: this.hideModal
	      }, void 0, _react2.default.createElement(_lib.ToastContainer, {
	        toastMessageFactory: ToastMessageFactory,
	        ref: 'invite_container',
	        className: 'toast-top-right'
	      }), _jsx(_Modal.Header, {
	        closeButton: true
	      }, void 0, _jsx(_Modal.Title, {
	        className: _Admin2.default.popHeadingAll
	      }, void 0, this.props.intl.messages.invite_people, ' ')), _jsx(_Modal.Body, {}, void 0, _jsx('div', {
	        className: _Admin2.default.modInvitation
	      }, void 0, _jsx('div', {
	        className: cls_invitationInfoBlock
	      }, void 0, _ref5, _jsx(_reactBootstrap.Row, {
	        className: _Dashboard2.default.blockInvit
	      }, void 0, _jsx(_reactBootstrap.Col, {
	        md: 3
	      }, void 0, _jsx('p', {
	        className: _Admin2.default.inviteBlockTxt
	      }, void 0, _ref6, ':')), _jsx(_reactBootstrap.Col, {
	        md: 7
	      }, void 0, _jsx('div', {
	        className: _Admin2.default.roomLink
	      }, void 0, _jsx('p', {
	        style: { "color": "#008abc" }
	      }, void 0, this.guestUrl))), !this.props.confFlag ? !this.props.slotId ? _jsx(_reactBootstrap.Col, {
	        md: 2
	      }, void 0, _jsx(_reactRouter.Link, {
	        id: 'regenerateLink',
	        title: this.props.intl.messages.regenerate,
	        onClick: this.regenerateLink
	      }, void 0, _jsx('div', {
	        className: cls_imgRefreshMain
	      }, void 0, _jsx('img', {
	        className: _Dashboard2.default.imgRefresh,
	        src: '/images/black-icons/black-regenerate.png',
	        alt: 'regenerate-icon'
	      })))) : null : null)), _jsx('div', {
	        className: cls_invitationInfoBlock
	      }, void 0, _jsx('div', {
	        className: _Admin2.default.multipleValInput
	      }, void 0, _jsx('table', {
	        className: cls_table
	      }, void 0, _jsx('tbody', {}, void 0, _jsx('tr', {}, void 0, _jsx('td', {
	        className: cls_td
	      }, void 0, _jsx('div', {
	        id: 'mailsList',
	        className: cls_mailsList
	      }, void 0, _jsx('div', {
	        className: cls_mailsDiv
	      }, void 0, _jsx('input', {
	        className: cls_hiddenInput,
	        'aria-hidden': 'true'
	      }), mails, _jsx('input', {
	        id: 'email',
	        type: 'text',
	        placeholder: this.props.intl.messages.enter_email,
	        className: cls_input,
	        onKeyPress: this.handleKeyPress.bind(this),
	        onChange: this.handleChange.bind(this),
	        value: this.state.value,
	        autoFocus: 'true'
	      }))))))), _jsx('label', {
	        className: cls_errcls
	      }, void 0, this.state.error))))), _jsx(_Modal.Footer, {
	        className: _Admin2.default.mainSaveAssign
	      }, void 0, _jsx('div', {
	        className: _Admin2.default.blockSaveAssign
	      }, void 0, _jsx('button', {
	        id: 'cancel',
	        onClick: this.hideModal
	      }, void 0, _ref7), _jsx('button', {
	        id: 'inviteSubmitBtn',
	        className: cls_btnSaveEdit,
	        onClick: this.invitePeople.bind(this)
	      }, void 0, _ref8))));
	    }
	  }]);
	
	  return InviteBox;
	}(_react.Component);
	
	InviteBox.contextTypes = {
	  router: _react2.default.PropTypes.object
	};
	
	InviteBox.defaultProps = { showModal: false };
	
	exports.default = (0, _reactIntl.injectIntl)(InviteBox);

/***/ },

/***/ 411:
/***/ function(module, exports) {

	"use strict";
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var layout_16 = exports.layout_16 = [{ //1
		region: [{ left: 0, top: 0, relativeSize: 1, gap: 0, tgap: 1 }]
	}, { //2
		region: [{ left: 0, top: 0, relativeSize: 0.5, gap: 0, tgap: 0.5 }, { left: 0.5, top: 0, relativeSize: 0.5, gap: 0, tgap: 0.5 }]
	}, { //3
		region: [{ left: 0, top: 0, relativeSize: 0.667, gap: 0, tgap: 0.667 }, { left: 0.667, top: 0, relativeSize: 0.333, gap: 0, tgap: 0.667 }, { left: 0.667, top: 1, relativeSize: 0.333, gap: 0, tgap: 0.667 }]
	}, { //4
		region: [{ left: 0, top: 0, relativeSize: 0.75, gap: 0, tgap: 0.75 }, { left: 0.75, top: 0, relativeSize: 0.25, gap: 0, tgap: 0.75 }, { left: 0.75, top: 1, relativeSize: 0.25, gap: 0, tgap: 0.75 }, { left: 0.75, top: 2, relativeSize: 0.25, gap: 0, tgap: 0.75 }]
	}, { //5
		region: [{ left: 0, top: 0, relativeSize: 0.80, gap: 0, tgap: 0.80 }, { left: 0.80, top: 0, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.80, top: 1, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.80, top: 2, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.80, top: 3, relativeSize: 0.20, gap: 0, tgap: 0.80 }]
	}, { //6
		region: [{ left: 0, top: 0, relativeSize: 0.667, gap: 0, tgap: 1 }, { left: 0.667, top: 0, relativeSize: 0.333, gap: 0, tgap: 1 }, { left: 0.667, top: 1, relativeSize: 0.333, gap: 0, tgap: 1 }, { left: 0, top: 2, relativeSize: 0.333, gap: 0, tgap: 1 }, { left: 0.333, top: 2, relativeSize: 0.333, gap: 0, tgap: 1 }, { left: 0.667, top: 2, relativeSize: 0.333, gap: 0, tgap: 1 }]
	}, { //7
		region: [{ left: 0, top: 0, relativeSize: 0.667, gap: 0, tgap: 0.917 }, { left: 0.667, top: 0, relativeSize: 0.333, gap: 0, tgap: 0.917 }, { left: 0.667, top: 1, relativeSize: 0.333, gap: 0, tgap: 0.917 }, { left: 0, top: 2.668, relativeSize: 0.25, gap: 0, tgap: 0.917 }, { left: 0.25, top: 2.668, relativeSize: 0.25, gap: 0, tgap: 0.917 }, { left: 0.50, top: 2.668, relativeSize: 0.25, gap: 0, tgap: 0.917 }, { left: 0.75, top: 2.668, relativeSize: 0.25, gap: 0, tgap: 0.917 }]
	}, { //8
		region: [{ left: 0, top: 0, relativeSize: 0.75, gap: 0, tgap: 1 }, { left: 0.75, top: 0, relativeSize: 0.25, gap: 0, tgap: 1 }, { left: 0.75, top: 1, relativeSize: 0.25, gap: 0, tgap: 1 }, { left: 0.75, top: 2, relativeSize: 0.25, gap: 0, tgap: 1 }, { left: 0, top: 3, relativeSize: 0.25, gap: 0, tgap: 1 }, { left: 0.25, top: 3, relativeSize: 0.25, gap: 0, tgap: 1 }, { left: 0.50, top: 3, relativeSize: 0.25, gap: 0, tgap: 1 }, { left: 0.75, top: 3, relativeSize: 0.25, gap: 0, tgap: 1 }]
	}, { //9
		region: [{ left: 0.25, top: 0, relativeSize: 0.50, gap: 0, tgap: 0.75 }, { left: 0, top: 0, relativeSize: 0.25, gap: 0, tgap: 0.75 }, { left: 0, top: 1, relativeSize: 0.25, gap: 0, tgap: 0.75 }, { left: 0.75, top: 0, relativeSize: 0.25, gap: 0, tgap: 0.75 }, { left: 0.75, top: 1, relativeSize: 0.25, gap: 0, tgap: 0.75 }, { left: 0, top: 2, relativeSize: 0.25, gap: 0, tgap: 0.75 }, { left: 0.25, top: 2, relativeSize: 0.25, gap: 0, tgap: 0.75 }, { left: 0.50, top: 2, relativeSize: 0.25, gap: 0, tgap: 0.75 }, { left: 0.75, top: 2, relativeSize: 0.25, gap: 0, tgap: 0.75 }]
	}, { //10
		region: [{ left: 0, top: 0, relativeSize: 0.80, gap: 0, tgap: 1 }, { left: 0.80, top: 0, relativeSize: 0.20, gap: 0, tgap: 1 }, { left: 0.80, top: 1, relativeSize: 0.20, gap: 0, tgap: 1 }, { left: 0.80, top: 2, relativeSize: 0.20, gap: 0, tgap: 1 }, { left: 0.80, top: 3, relativeSize: 0.20, gap: 0, tgap: 1 }, { left: 0, top: 4, relativeSize: 0.20, gap: 0, tgap: 1 }, { left: 0.20, top: 4, relativeSize: 0.20, gap: 0, tgap: 1 }, { left: 0.40, top: 4, relativeSize: 0.20, gap: 0, tgap: 1 }, { left: 0.60, top: 4, relativeSize: 0.20, gap: 0, tgap: 1 }, { left: 0.80, top: 4, relativeSize: 0.20, gap: 0, tgap: 1 }]
	}, { //11
		region: [{ left: 0, top: 0, relativeSize: 0.8, gap: 0, tgap: 0.967 }, { left: 0.80, top: 0, relativeSize: 0.20, gap: 0, tgap: 0.967 }, { left: 0.80, top: 1, relativeSize: 0.20, gap: 0, tgap: 0.967 }, { left: 0.80, top: 2, relativeSize: 0.20, gap: 0, tgap: 0.967 }, { left: 0.80, top: 3, relativeSize: 0.20, gap: 0, tgap: 0.967 }, { left: 0, top: 4.7, relativeSize: 0.167, gap: 0, tgap: 0.967 }, { left: 0.167, top: 4.7, relativeSize: 0.167, gap: 0, tgap: 0.967 }, { left: 0.334, top: 4.7, relativeSize: 0.167, gap: 0, tgap: 0.967 }, { left: 0.501, top: 4.7, relativeSize: 0.167, gap: 0, tgap: 0.967 }, { left: 0.667, top: 4.7, relativeSize: 0.167, gap: 0, tgap: 0.967 }, { left: 0.833, top: 4.7, relativeSize: 0.167, gap: 0, tgap: 0.967 }]
	}, { //12
		region: [{ left: 0.2, top: 0, relativeSize: 0.60, gap: 0, tgap: 0.80 }, { left: 0, top: 0, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0, top: 1, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0, top: 2, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.80, top: 0, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.80, top: 1, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.80, top: 2, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0, top: 3, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.20, top: 3, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.40, top: 3, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.60, top: 3, relativeSize: 0.20, gap: 0, tgap: 0.80 }, { left: 0.80, top: 3, relativeSize: 0.20, gap: 0, tgap: 0.80 }]
	}, { //13
		region: [{ left: 0.2, top: 0, relativeSize: 0.60, gap: 0, tgap: 0.767 }, { left: 0, top: 0, relativeSize: 0.20, gap: 0, tgap: 0.767 }, { left: 0, top: 1, relativeSize: 0.20, gap: 0, tgap: 0.767 }, { left: 0, top: 2, relativeSize: 0.20, gap: 0, tgap: 0.767 }, { left: 0.80, top: 0, relativeSize: 0.20, gap: 0, tgap: 0.767 }, { left: 0.80, top: 1, relativeSize: 0.20, gap: 0, tgap: 0.767 }, { left: 0.80, top: 2, relativeSize: 0.20, gap: 0, tgap: 0.767 }, { left: 0, top: 3.59, relativeSize: 0.167, gap: 0, tgap: 0.767 }, { left: 0.167, top: 3.59, relativeSize: 0.167, gap: 0, tgap: 0.767 }, { left: 0.333, top: 3.59, relativeSize: 0.167, gap: 0, tgap: 0.767 }, { left: 0.500, top: 3.59, relativeSize: 0.167, gap: 0, tgap: 0.767 }, { left: 0.667, top: 3.59, relativeSize: 0.167, gap: 0, tgap: 0.767 }, { left: 0.832, top: 3.59, relativeSize: 0.167, gap: 0, tgap: 0.767 }]
	}, { //14
		region: [{ left: 0.174, top: 0, relativeSize: 0.652, gap: 0, tgap: 0.87 }, { left: 0, top: 0, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0, top: 1, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0, top: 2, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0, top: 3, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0, top: 4, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0.826, top: 0, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0.826, top: 1, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0.826, top: 2, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0.826, top: 3, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0.826, top: 4, relativeSize: 0.174, gap: 0, tgap: 0.87 }, { left: 0.174, top: 3, relativeSize: 0.217, gap: 0, tgap: 0.87 }, { left: 0.391, top: 3, relativeSize: 0.217, gap: 0, tgap: 0.87 }, { left: 0.608, top: 3, relativeSize: 0.217, gap: 0, tgap: 0.87 }]
	}, { //15
		region: [{ left: 0.167, top: 0, relativeSize: 0.667, gap: 0, tgap: 0.834 }, { left: 0, top: 0, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0, top: 1, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0, top: 2, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0, top: 3, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0.833, top: 0, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0.833, top: 1, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0.833, top: 2, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0.833, top: 3, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0, top: 3.9, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0.167, top: 3.9, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0.334, top: 3.9, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0.501, top: 3.9, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0.667, top: 3.9, relativeSize: 0.167, gap: 0, tgap: 0.834 }, { left: 0.833, top: 3.9, relativeSize: 0.167, gap: 0, tgap: 0.834 }]
	}, { //16
		region: [{ left: 0.143, top: 0, relativeSize: 0.714, gap: 0, tgap: 0.915 }, { left: 0, top: 0, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0, top: 1, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0, top: 2, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0, top: 3, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0, top: 4, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0.857, top: 0, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0.857, top: 1, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0.857, top: 2, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0.857, top: 3, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0.857, top: 4, relativeSize: 0.143, gap: 0, tgap: 0.915 }, { left: 0, top: 3.575, relativeSize: 0.20, gap: 0, tgap: 0.915 }, { left: 0.20, top: 3.575, relativeSize: 0.20, gap: 0, tgap: 0.915 }, { left: 0.40, top: 3.575, relativeSize: 0.20, gap: 0, tgap: 0.915 }, { left: 0.60, top: 3.575, relativeSize: 0.20, gap: 0, tgap: 0.915 }, { left: 0.80, top: 3.575, relativeSize: 0.20, gap: 0, tgap: 0.915 }]
	}, { //17
		region: [{ left: 0.143, top: 0, relativeSize: 0.714, gap: 0, tgap: 0.882 }, { left: 0, top: 0, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0, top: 1, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0, top: 2, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0, top: 3, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0, top: 4, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0.857, top: 0, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0.857, top: 1, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0.857, top: 2, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0.857, top: 3, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0.857, top: 4, relativeSize: 0.143, gap: 0, tgap: 0.882 }, { left: 0, top: 4.281, relativeSize: 0.167, gap: 0, tgap: 0.882 }, { left: 0.167, top: 4.281, relativeSize: 0.167, gap: 0, tgap: 0.882 }, { left: 0.333, top: 4.281, relativeSize: 0.167, gap: 0, tgap: 0.882 }, { left: 0.500, top: 4.281, relativeSize: 0.167, gap: 0, tgap: 0.882 }, { left: 0.667, top: 4.281, relativeSize: 0.167, gap: 0, tgap: 0.882 }, { left: 0.833, top: 4.281, relativeSize: 0.167, gap: 0, tgap: 0.882 }]
	}, { //18
		region: [{ left: 0, top: 0, relativeSize: 0.714, gap: 0, tgap: 0.857 }, { left: 0.714, top: 0, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.714, top: 1, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.714, top: 2, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.714, top: 3, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.714, top: 4, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.857, top: 0, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.857, top: 1, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.857, top: 2, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.857, top: 3, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.857, top: 4, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0, top: 4.993, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.143, top: 4.993, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.286, top: 4.993, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.429, top: 4.993, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.572, top: 4.993, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.714, top: 4.993, relativeSize: 0.143, gap: 0, tgap: 0.857 }, { left: 0.857, top: 4.993, relativeSize: 0.143, gap: 0, tgap: 0.857 }]
	}, { //19
		region: [{ left: 0.156, top: 0.2992, relativeSize: 0.625, gap: 0.065, tgap: 1 }, { left: 0, top: 0, relativeSize: 0.187, gap: 0.065, tgap: 1 }, { left: 0.187, top: 0, relativeSize: 0.187, gap: 0.065, tgap: 1 }, { left: 0.374, top: 0, relativeSize: 0.187, gap: 0.065, tgap: 1 }, { left: 0.561, top: 0, relativeSize: 0.187, gap: 0.065, tgap: 1 }, { left: 0.748, top: 0, relativeSize: 0.187, gap: 0.065, tgap: 1 }, { left: 0, top: 1.198, relativeSize: 0.156, gap: 0.065, tgap: 1 }, { left: 0, top: 2.198, relativeSize: 0.156, gap: 0.065, tgap: 1 }, { left: 0, top: 3.198, relativeSize: 0.156, gap: 0.065, tgap: 1 }, { left: 0, top: 4.198, relativeSize: 0.156, gap: 0.065, tgap: 1 }, { left: 0.781, top: 1.198, relativeSize: 0.156, gap: 0.065, tgap: 1 }, { left: 0.781, top: 2.198, relativeSize: 0.156, gap: 0.065, tgap: 1 }, { left: 0.781, top: 3.198, relativeSize: 0.156, gap: 0.065, tgap: 1 }, { left: 0.781, top: 4.198, relativeSize: 0.156, gap: 0.065, tgap: 1 }, { left: 0, top: 4.342, relativeSize: 0.187, gap: 0.065, tgap: 1 }, { left: 0.187, top: 4.342, relativeSize: 0.187, gap: 0.065, tgap: 1 }, { left: 0.374, top: 4.342, relativeSize: 0.187, gap: 0.065, tgap: 1 }, { left: 0.562, top: 4.342, relativeSize: 0.187, gap: 0.065, tgap: 1 }, { left: 0.749, top: 4.342, relativeSize: 0.187, gap: 0.065, tgap: 1 }]
	}, { //20
		region: [{ left: 0.161, top: 0.249, relativeSize: 0.645, gap: 0.033, tgap: 1 }, { left: 0, top: 0, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0.161, top: 0, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0.322, top: 0, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0.483, top: 0, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0.644, top: 0, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0.805, top: 0, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0, top: 1, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0, top: 2, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0, top: 3, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0, top: 4, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0.806, top: 1, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0.806, top: 2, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0.806, top: 3, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0.806, top: 4, relativeSize: 0.161, gap: 0.033, tgap: 1 }, { left: 0, top: 4.154, relativeSize: 0.194, gap: 0.033, tgap: 1 }, { left: 0.194, top: 4.154, relativeSize: 0.194, gap: 0.033, tgap: 1 }, { left: 0.388, top: 4.154, relativeSize: 0.194, gap: 0.033, tgap: 1 }, { left: 0.581, top: 4.154, relativeSize: 0.194, gap: 0.033, tgap: 1 }, { left: 0.774, top: 4.154, relativeSize: 0.194, gap: 0.033, tgap: 1 }]
	}, { //21
		region: [{ left: 0, top: 0, relativeSize: 0.667, gap: 0, tgap: 1 }, { left: 0.667, top: 0, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.667, top: 1, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.667, top: 2, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.667, top: 3, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.834, top: 0, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.834, top: 1, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.834, top: 2, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.834, top: 3, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0, top: 3.99, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.167, top: 3.99, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.334, top: 3.99, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.501, top: 3.99, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.668, top: 3.99, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.835, top: 3.99, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0, top: 4.991, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.167, top: 4.991, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.334, top: 4.991, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.501, top: 4.991, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.668, top: 4.991, relativeSize: 0.167, gap: 0, tgap: 1 }, { left: 0.835, top: 4.991, relativeSize: 0.167, gap: 0, tgap: 1 }]
	}, { //22
		region: [{ left: 0.167, top: 0.250, relativeSize: 0.667, gap: 0, tgap: 0.977 }, { left: 0, top: 0, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0.167, top: 0, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0.334, top: 0, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0.501, top: 0, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0.668, top: 0, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0.835, top: 0, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0, top: 1, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0, top: 2, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0, top: 3, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0, top: 4, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0.834, top: 1, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0.834, top: 2, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0.834, top: 3, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0.834, top: 4, relativeSize: 0.167, gap: 0, tgap: 0.977 }, { left: 0, top: 5.83, relativeSize: 0.143, gap: 0, tgap: 0.977 }, { left: 0.143, top: 5.83, relativeSize: 0.143, gap: 0, tgap: 0.977 }, { left: 0.286, top: 5.83, relativeSize: 0.143, gap: 0, tgap: 0.977 }, { left: 0.429, top: 5.83, relativeSize: 0.143, gap: 0, tgap: 0.977 }, { left: 0.572, top: 5.83, relativeSize: 0.143, gap: 0, tgap: 0.977 }, { left: 0.715, top: 5.83, relativeSize: 0.143, gap: 0, tgap: 0.977 }, { left: 0.858, top: 5.83, relativeSize: 0.143, gap: 0, tgap: 0.977 }]
	}, { //23
		region: [{ left: 0.136, top: 0.233, relativeSize: 0.682, gap: 0.046, tgap: 1 }, { left: 0, top: 0, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.159, top: 0, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.318, top: 0, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.477, top: 0, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.636, top: 0, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.795, top: 0, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0, top: 1.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0, top: 2.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0, top: 3.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0, top: 4.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0, top: 5.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0.818, top: 1.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0.818, top: 2.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0.818, top: 3.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0.818, top: 4.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0.818, top: 5.169, relativeSize: 0.136, gap: 0.046, tgap: 1 }, { left: 0, top: 5.28, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.159, top: 5.28, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.318, top: 5.28, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.477, top: 5.28, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.636, top: 5.28, relativeSize: 0.159, gap: 0.046, tgap: 1 }, { left: 0.795, top: 5.28, relativeSize: 0.159, gap: 0.046, tgap: 1 }]
	}, { //24
		region: [{ left: 0.14, top: 0.200, relativeSize: 0.698, gap: 0.022, tgap: 1 }, { left: 0, top: 0, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.14, top: 0, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.28, top: 0, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.42, top: 0, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.56, top: 0, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.70, top: 0, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.838, top: 0, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0, top: 1, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0, top: 2, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0, top: 3, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0, top: 4, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0, top: 5, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.838, top: 1, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.838, top: 2, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.838, top: 3, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.838, top: 4, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0.838, top: 5, relativeSize: 0.14, gap: 0.022, tgap: 1 }, { left: 0, top: 5.14, relativeSize: 0.163, gap: 0.022, tgap: 1 }, { left: 0.163, top: 5.14, relativeSize: 0.163, gap: 0.022, tgap: 1 }, { left: 0.326, top: 5.14, relativeSize: 0.163, gap: 0.022, tgap: 1 }, { left: 0.489, top: 5.14, relativeSize: 0.163, gap: 0.022, tgap: 1 }, { left: 0.652, top: 5.14, relativeSize: 0.163, gap: 0.022, tgap: 1 }, { left: 0.815, top: 5.14, relativeSize: 0.163, gap: 0.022, tgap: 1 }]
	}, { //25
		region: [{ left: 0, top: 0, relativeSize: 0.714, gap: 0, tgap: 1 }, { left: 0.714, top: 0, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.714, top: 1, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.714, top: 2, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.714, top: 3, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.714, top: 4, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.857, top: 0, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.857, top: 1, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.857, top: 2, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.857, top: 3, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.857, top: 4, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0, top: 4.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.143, top: 4.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.286, top: 4.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.429, top: 4.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.572, top: 4.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.714, top: 4.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.857, top: 4.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0, top: 5.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.143, top: 5.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.286, top: 5.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.429, top: 5.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.572, top: 5.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.714, top: 5.99, relativeSize: 0.143, gap: 0, tgap: 1 }, { left: 0.857, top: 5.99, relativeSize: 0.143, gap: 0, tgap: 1 }]
	}];

/***/ },

/***/ 412:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _RenderQuestions = __webpack_require__(387);
	
	var _RenderQuestions2 = _interopRequireDefault(_RenderQuestions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	var correctAns = null;
	var swotWithoutAns = null;
	
	var _ref = _jsx(_reactFontawesome2.default, {
	  name: 'question'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'multiple_choice_answers'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'Marks'
	});
	
	var _ref4 = _jsx('img', {
	  src: '/images/icons/green-check.png'
	});
	
	var _ref5 = _jsx('img', {
	  src: '/images/icons/red-cross.png'
	});
	
	var _ref6 = _jsx('span', {}, void 0, 'N/A');
	
	var MultipleChoice = function (_Component) {
	  _inherits(MultipleChoice, _Component);
	
	  function MultipleChoice(props) {
	    _classCallCheck(this, MultipleChoice);
	
	    return _possibleConstructorReturn(this, (MultipleChoice.__proto__ || Object.getPrototypeOf(MultipleChoice)).call(this, props));
	  }
	
	  _createClass(MultipleChoice, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var cls_formInline = _Dashboard2.default.formInline + ' form-inline';
	      var cls_marksInline = _Dashboard2.default.marksCss + ' pull-right';
	      return _jsx('li', {}, this.props.data._id, _jsx('div', {
	        className: _Dashboard2.default.questionBlock
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.questionHeading
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.questionIconCircle
	      }, void 0, _ref), _jsx(_RenderQuestions2.default, {
	        question: this.props.data.question
	      })), _jsx('div', {
	        className: _Dashboard2.default.chooseAnswerBlock
	      }, void 0, _jsx('p', {}, void 0, _ref2, this.props.data.marks != undefined || this.props.data.marks != null ? _jsx('span', {
	        className: cls_marksInline
	      }, void 0, _ref3, ':', this.props.data.marks) : null), _jsx('form', {
	        className: cls_formInline
	      }, void 0, _jsx('div', {
	        className: 'radio'
	      }, void 0, this.props.wrong || this.props.correct ? this.props.data.options.map(function (item, index) {
	
	        var wrongAnsArr = null;
	        for (var i = 0; i < _this2.props.wrong.length; i++) {
	          if (_this2.props.wrong[i].questionId == _this2.props.data._id) {
	            var data = _this2.props.wrong[i];
	            wrongAnsArr = data.answers;
	            swotWithoutAns = data.swotWithoutAns;
	          }
	        }
	
	        var correctAnsArr = null;
	        for (var i = 0; i < _this2.props.correct.length; i++) {
	          if (_this2.props.correct[i].questionId == _this2.props.data._id) {
	            var data = _this2.props.correct[i];
	            correctAnsArr = data.answers;
	            swotWithoutAns = data.swotWithoutAns;
	          }
	        }
	
	        if (correctAnsArr != null) {
	          var correctStatus = _.includes(correctAnsArr, item);
	          correctAns = true;
	        } else if (wrongAnsArr != null) {
	          var wrongStatus = _.includes(wrongAnsArr, item);
	          correctAns = false;
	        } else {
	          correctAns = false;
	        }
	
	        if (_this2.props.data.answers != null) {
	          var answersArray = _.map(_this2.props.data.answers, _.trim);
	          var itemElement = _.trim(item);
	          var correctLabel = _.includes(answersArray, itemElement);
	        }
	
	        if (correctStatus == true) {
	          var checked = true;
	        } else if (wrongStatus == true) {
	          var checked = true;
	        } else {
	          var checked = false;
	        }
	
	        var number = index + 1;
	        return _jsx('label', {
	          className: 'radio-inline'
	        }, index, _this2.props.showResult != undefined ? correctLabel == true ? _jsx('span', {
	          className: _Dashboard2.default.rightAns
	        }) : null : null, _jsx('input', {
	          id: 'optradio',
	          type: 'radio',
	          name: 'optradio',
	          value: item,
	          checked: checked,
	          disabled: true
	        }), _jsx('span', {}, void 0, number, ')'), ' ', item);
	      }) : this.props.data.options.map(function (item, index) {
	        if (item == '' && _this2.props.checked[_this2.props.data._id] == '') {
	          var checked = false;
	        } else {
	          if (_this2.props.checked[_this2.props.data._id] == item) {
	            var checked = true;
	          } else {
	            var checked = false;
	          }
	        }
	        var number = index + 1;
	        return _jsx('label', {
	          className: 'radio-inline'
	        }, index, _jsx('input', {
	          id: 'optradio',
	          type: 'radio',
	          name: 'optradio',
	          value: item,
	          checked: checked,
	          onChange: _this2.props.answer
	        }), _jsx('span', {}, void 0, number, ')'), ' ', item);
	      })), this.props.showResult != undefined ? this.props.wrong || this.props.correct ? correctAns == true ? _jsx('div', {
	        className: _Dashboard2.default.answerStatus
	      }, void 0, _ref4) : _jsx('div', {
	        className: _Dashboard2.default.answerStatus
	      }, void 0, _ref5) : null : null, swotWithoutAns == true ? _jsx('div', {
	        className: _Dashboard2.default.answerStatus
	      }, void 0, _ref6) : null))));
	    }
	  }]);
	
	  return MultipleChoice;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {};
	}
	
	MultipleChoice.contextTypes = {
	  intl: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(MultipleChoice);

/***/ },

/***/ 413:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _RenderQuestions = __webpack_require__(387);
	
	var _RenderQuestions2 = _interopRequireDefault(_RenderQuestions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var correctAns = null;
	var swotWithoutAns = null;
	
	var _ref = _jsx(_reactFontawesome2.default, {
	  name: 'question'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'multiple_responsive_answers'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'Marks'
	});
	
	var _ref4 = _jsx('img', {
	  src: '/images/icons/green-check.png'
	});
	
	var _ref5 = _jsx('img', {
	  src: '/images/icons/red-cross.png'
	});
	
	var _ref6 = _jsx('span', {}, void 0, 'N/A');
	
	var MultipleResponsive = function (_Component) {
	  _inherits(MultipleResponsive, _Component);
	
	  function MultipleResponsive(props) {
	    _classCallCheck(this, MultipleResponsive);
	
	    return _possibleConstructorReturn(this, (MultipleResponsive.__proto__ || Object.getPrototypeOf(MultipleResponsive)).call(this, props));
	  }
	
	  _createClass(MultipleResponsive, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var cls_formInline = _Dashboard2.default.formInline + ' form-inline';
	      var cls_marksInline = _Dashboard2.default.marksCss + ' pull-right';
	
	      return _jsx('li', {}, this.props.data._id, _jsx('div', {
	        className: _Dashboard2.default.questionBlock
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.questionHeading
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.questionIconCircle
	      }, void 0, _ref), _jsx(_RenderQuestions2.default, {
	        question: this.props.data.question
	      })), _jsx('div', {
	        className: _Dashboard2.default.chooseAnswerBlock
	      }, void 0, _jsx('p', {}, void 0, _ref2, this.props.data.marks != undefined || this.props.data.marks != null ? _jsx('span', {
	        className: cls_marksInline
	      }, void 0, _ref3, ':', this.props.data.marks) : null), _jsx('form', {
	        className: cls_formInline
	      }, void 0, _jsx('div', {
	        className: 'checkbox'
	      }, void 0, this.props.wrong || this.props.correct ? this.props.data.options.map(function (item, index) {
	
	        var wrongAnsArr = null;
	
	        for (var i = 0; i < _this2.props.wrong.length; i++) {
	          if (_this2.props.wrong[i].questionId == _this2.props.data._id) {
	            var data = _this2.props.wrong[i];
	            wrongAnsArr = data.answers;
	            swotWithoutAns = data.swotWithoutAns;
	          }
	        }
	
	        var correctAnsArr = null;
	        for (var i = 0; i < _this2.props.correct.length; i++) {
	          if (_this2.props.correct[i].questionId == _this2.props.data._id) {
	            var data = _this2.props.correct[i];
	            correctAnsArr = data.answers;
	            swotWithoutAns = data.swotWithoutAns;
	          }
	        }
	
	        if (correctAnsArr != null) {
	          var correctStatus = _.includes(correctAnsArr, item);
	          correctAns = true;
	        } else if (wrongAnsArr != null) {
	          var wrongStatus = _.includes(wrongAnsArr, item);
	          correctAns = false;
	        } else {
	          correctAns = false;
	        }
	
	        if (_this2.props.data.answers != null) {
	          var answersArray = _.map(_this2.props.data.answers, _.trim);
	          var itemElement = _.trim(item);
	          var correctLabel = _.includes(answersArray, itemElement);
	        }
	
	        if (correctStatus == true) {
	          var checked = true;
	        } else if (wrongStatus == true) {
	          var checked = true;
	        } else {
	          var checked = false;
	        }
	
	        var number = index + 1;
	        return _jsx('label', {
	          className: 'checkbox-inline'
	        }, index, _this2.props.showResult != undefined ? correctLabel == true ? _jsx('span', {
	          className: _Dashboard2.default.rightAns
	        }) : null : null, _jsx('input', {
	          id: 'optcheckbox',
	          type: 'checkbox',
	          name: 'optcheckbox',
	          value: item,
	          checked: checked,
	          disabled: true
	        }), _jsx('span', {}, void 0, number, ')'), ' ', item);
	      }) : this.props.data.options.map(function (item, index) {
	        var number = index + 1;
	        return _jsx('label', {
	          className: 'checkbox-inline'
	        }, index, _jsx('input', {
	          id: 'optcheckbox',
	          type: 'checkbox',
	          name: 'optcheckbox',
	          value: [item, index],
	          onChange: _this2.props.answer
	        }), _jsx('span', {}, void 0, number, ')'), ' ', item);
	      })), this.props.showResult != undefined ? this.props.wrong || this.props.correct ? correctAns == true ? _jsx('div', {
	        className: _Dashboard2.default.answerStatus
	      }, void 0, _ref4) : _jsx('div', {
	        className: _Dashboard2.default.answerStatus
	      }, void 0, _ref5) : null : null, swotWithoutAns == true ? _jsx('div', {
	        className: _Dashboard2.default.answerStatus
	      }, void 0, _ref6) : null))));
	    }
	  }]);
	
	  return MultipleResponsive;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {};
	}
	
	MultipleResponsive.contextTypes = {
	  intl: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(MultipleResponsive);

/***/ },

/***/ 414:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(64);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _reactRedux = __webpack_require__(16);
	
	var _UserDashboardReducer = __webpack_require__(88);
	
	var _TopicList = __webpack_require__(415);
	
	var _TopicList2 = _interopRequireDefault(_TopicList);
	
	var _ConductQuestion = __webpack_require__(422);
	
	var _ConductQuestion2 = _interopRequireDefault(_ConductQuestion);
	
	var _Modal = __webpack_require__(52);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _roles = __webpack_require__(46);
	
	var _Analytics = __webpack_require__(66);
	
	var _Analytics2 = _interopRequireDefault(_Analytics);
	
	var _AnalyticsAction = __webpack_require__(177);
	
	var _WorkDashboardReloadReducer = __webpack_require__(154);
	
	var _Loading = __webpack_require__(142);
	
	var _Loading2 = _interopRequireDefault(_Loading);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _WorkDashboardReloadActions = __webpack_require__(91);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_Modal.Footer, {}, void 0);
	
	var _ref2 = _jsx(_Modal.Footer, {}, void 0);
	
	var _ref3 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref4 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'topics_list'
	}));
	
	var _ref5 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref6 = _jsx('img', {
		src: '/images/black-icons/black-topics.png',
		alt: 'manage-topics-icon'
	});
	
	var _ref7 = _jsx('img', {
		src: '/images/black-icons/black-questionnaire.png',
		alt: 'manage-questionnaire-icon'
	});
	
	var _ref8 = _jsx('img', {
		src: '/images/black-icons/black-assignments.png',
		alt: 'manage-assignments-icon'
	});
	
	var _ref9 = _jsx(_reactIntl.FormattedMessage, {
		id: 'author'
	});
	
	var _ref10 = _jsx('h3', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'description'
	}));
	
	var _ref11 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'media_resources'
	}));
	
	var _ref12 = _jsx('p', {}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_files_yet'
	}), '...'));
	
	var _ref13 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'documents'
	}));
	
	var _ref14 = _jsx('li', {}, void 0, _jsx('p', {}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_files_yet'
	}), '...')));
	
	var _ref15 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'questionnaires'
	}));
	
	var _ref16 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_time_limitations'
	}));
	
	var _ref17 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'start_time'
	}), ': \xA0 ');
	
	var _ref18 = _jsx(_reactFontawesome2.default, {
		name: 'calendar'
	}, void 0, ' ');
	
	var _ref19 = _jsx(_reactFontawesome2.default, {
		name: 'clock-o'
	}, void 0, ' ');
	
	var _ref20 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'end_time'
	}), ': \xA0 ');
	
	var _ref21 = _jsx(_reactFontawesome2.default, {
		name: 'calendar'
	}, void 0, ' ');
	
	var _ref22 = _jsx(_reactFontawesome2.default, {
		name: 'clock-o'
	}, void 0, ' ');
	
	var _ref23 = _jsx('p', {}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_questionnaires_yet'
	}), '...'));
	
	var _ref24 = _jsx(_reactIntl.FormattedMessage, {
		id: 'i_have_completed_this_topic'
	});
	
	var _ref25 = _jsx(_Loading2.default, {
		loadType: 'list'
	});
	
	var TopicContent = function (_Component) {
		_inherits(TopicContent, _Component);
	
		function TopicContent(props) {
			_classCallCheck(this, TopicContent);
	
			var _this = _possibleConstructorReturn(this, (TopicContent.__proto__ || Object.getPrototypeOf(TopicContent)).call(this, props));
	
			_this.setResponse = function (data) {
				_this.setState({
					loading: true
				});
				_this.quill = new Quill(_reactDom2.default.findDOMNode(_this.refs.editor), {
					modules: {
						toolbar: [[{ 'header': [1, 2, 3, 4, 5, 6, false] }], ['bold', 'italic', 'underline', 'link', 'video'], ['image', 'code-block'], ['formula'], [{ 'size': ['small', false, 'large', 'huge'] }], [{ 'list': 'ordered' }, { 'list': 'bullet' }], [{ 'script': 'sub' }, { 'script': 'super' }], [{ 'color': [] }, { 'background': [] }], [{ 'align': [] }]],
						formula: true
					},
					placeholder: _this.props.intl.messages.no_data_yet,
					readOnly: true,
					theme: 'bubble'
	
				});
				if (!_.isEmpty(_this.props.workDashboardData.topicContentDataDetails)) {
					var topicObj = {
						topicId: _this.props.workDashboardData.tid,
						roomId: _this.props.roomId
					};
					(0, _AnalyticsAction.getTopicStatus)(topicObj).then(function (res) {
						if (res.status && res.data && res.data.value) {
							res.data.value.status == 2 ? _this.setState({ complete: true }) : _this.setState({ complete: false });
						}
					});
				}
				_this.quill.setContents(_this.props.workDashboardData.topicContentDataDetails.content);
			};
	
			_this.handleWorkDashboard = function (obj) {
				_this.props.imHost == true && _this.props.workDashboardData.sync == true ? _this.props.syncCallback(obj) : _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			};
	
			_this.handleTopicContSelSync = function (objEntity) {
				var obj = {
					command: 'TOPIC-CONT-SEL-SYNC',
					content: { data: objEntity },
					type: 'OBJECT'
				};
				_this.props.confObject.sendMessage(obj, 0);
			};
	
			_this.quill = false;
			_this.state = {
				showImageModal: false,
				showAudioModal: false,
				fileName: null,
				fileType: null,
				displayName: '',
				complete: false,
				topicContentData: [],
				loading: false,
				disablePrevBtn: false,
				disableNextBtn: false
			};
			_this.topiclistData = [], _this.handleSelection = _this.handleSelection.bind(_this);
			_this.props.confObject.TopicContentSelectListener(_this.handleSelection);
			return _this;
		}
	
		_createClass(TopicContent, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var _this2 = this;
	
				//changeBy: pranathi, fetching questionnaire data
				var obj = {
					roomId: this.props.roomId,
					topicId: this.props.workDashboardData.tid
				};
				this.props.dispatch((0, _WorkDashboardActions.getfiles)(obj));
				this.props.dispatch((0, _WorkDashboardActions.getConferenceTopicContentData)(obj)).then(function (res) {
					return _this2.setResponse(res);
				});
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				var _this3 = this;
	
				if (this.props.workDashboardReload.topicContent != nextProps.workDashboardReload.topicContent) {
					var obj = {
						roomId: this.props.roomId,
						topicId: this.props.workDashboardData.tid
					};
					this.props.dispatch((0, _WorkDashboardActions.getfiles)(obj));
					this.props.dispatch((0, _WorkDashboardActions.getConferenceTopicContentData)(obj)).then(function (res) {
						return _this3.setResponse(res);
					});
				}
	
				if (this.props.workDashboardData.tid != nextProps.workDashboardData.tid) {
					this.props.dispatch((0, _WorkDashboardReloadActions.reloadTopicContent)());
				}
	
				if (this.props.workDashboardData && this.props.workDashboardData.topiclistData && this.props.workDashboardData.topiclistData.length > 0) {
					var currentIndex = this.topiclistData.indexOf(this.props.workDashboardData.tid);
					if (currentIndex == 0 && this.topiclistData.length != 1) {
						this.setState({
							disablePrevBtn: true,
							disableNextBtn: false
						});
					} else if (currentIndex + 1 >= this.topiclistData.length && this.topiclistData.length != 1) {
						this.setState({
							disablePrevBtn: false,
							disableNextBtn: true
						});
					} else if (currentIndex == 0 && this.topiclistData.length == 1) {
						this.setState({
							disablePrevBtn: true,
							disableNextBtn: true
						});
					} else {
						this.setState({
							disablePrevBtn: false,
							disableNextBtn: false
						});
					}
				}
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				var _objAnalytics = new _Analytics2.default();
				var topicId = this.props.workDashboardData.tid;
				var marked = false;
				var unmount = true;
				_objAnalytics.UpdateTopicComplete(topicId, marked, this.props.roomId, unmount);
			}
		}, {
			key: 'handleTopicList',
			value: function handleTopicList() {
				var _obj;
	
				this.props.topicListCallback();
				var obj = (_obj = { current: 'topicList', topicContent: false, topicList: true, conductQuestion: false }, _defineProperty(_obj, 'conductQuestion', false), _defineProperty(_obj, 'pdfView', false), _defineProperty(_obj, 'topicPdfFileData', null), _defineProperty(_obj, 'tid', ''), _obj);
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'handleQuestionnaire',
			value: function handleQuestionnaire(data) {
				var obj = { current: 'topicList', topicContent: false, topicList: false, conductQuestion: true, questionnaireId: data.questionnaireId._id, questionnaireName: data.questionnaireId.questionnaireName, pdfView: false, topicPdfFileData: null };
				if (data.openFrom == undefined && data.closeFrom == undefined || data.openFrom == null && data.closeFrom == null) {
					this.handleWorkDashboard(obj);
				} else {
					var openFrom = (0, _moment2.default)(data.openFrom);
					var now = (0, _moment2.default)();
					if (+openFrom > +now) {
						alertify.alert(this.props.intl.messages.warning, this.props.intl.messages.questionnaire_alert, function () {}).setting({ 'label': this.props.intl.messages.ok });
					} else {
						this.handleWorkDashboard(obj);
					}
				}
			}
		}, {
			key: 'handleImage',
			value: function handleImage(imageData, fileType) {
				this.setState({
					showImageModal: true,
					fileName: imageData.fileName,
					fileType: fileType.fileType,
					displayName: imageData.displayName
				});
			}
		}, {
			key: 'handleAudioImage',
			value: function handleAudioImage(imageData, fileType) {
				this.setState({
					showAudioModal: true,
					fileName: imageData.fileName,
					fileType: fileType.fileType,
					displayName: imageData.displayName
				});
			}
		}, {
			key: 'hideImageModal',
			value: function hideImageModal() {
				this.setState({
					showImageModal: false,
					showAudioModal: false,
					fileName: null,
					fileType: null,
					displayName: ''
				});
			}
		}, {
			key: 'setSelector',
			value: function setSelector() {
				if (this.quill != null) {
					var obj = null;
					if (this.props.workDashboardData.sync == true && this.props.imHost == true) {
						if (window.getSelection) {
							var range = window.getSelection().getRangeAt(0);
							var preSelectionRange = range.cloneRange();
							preSelectionRange.selectNodeContents(this.refs.editor);
							preSelectionRange.setEnd(range.startContainer, range.startOffset);
							var start = preSelectionRange.toString().length;
	
							obj = {
								start: start,
								end: start + range.toString().length,
								uid: this.props.workDashboardData.uid
							};
						} else if (document.selection && document.selection.type != "Control") {
							var selectedTextRange = document.selection.createRange();
							var preSelectionTextRange = document.body.createTextRange();
							preSelectionTextRange.moveToElementText(this.refs.editor);
							preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
							var _start = preSelectionTextRange.text.length;
	
							obj = {
								start: _start,
								end: _start + selectedTextRange.text.length,
								uid: this.props.workDashboardData.uid
							};
						}
						this.handleTopicContSelSync(obj);
					}
				}
			}
		}, {
			key: 'selectHandler',
			value: function selectHandler() {
				this.setSelector();
			}
		}, {
			key: 'handlePdfView',
			value: function handlePdfView(data) {
				var obj = { current: 'topicList', topicContent: false, topicList: false, conductQuestion: false, pdfView: true, fileId: data.fileId };
				this.handleWorkDashboard(obj);
			}
	
			//Code changed by - Najib, Desc - routing is called only for non-guest users
	
		}, {
			key: 'viewUser',
			value: function viewUser() {
				if (!this.props.isGuest) {
					_reactRouter.browserHistory.push('/profile/' + this.props.workDashboardData.topicContentData.createdBy._id);
				}
			}
		}, {
			key: 'handleMarkComplete',
			value: function handleMarkComplete(e) {
				var _objAnalytics = new _Analytics2.default();
				var topicId = this.props.workDashboardData.tid;
				var marked = e.currentTarget.value == "true" ? false : true;
				var unmount = false;
				this.setState({
					complete: marked
				});
				_objAnalytics.UpdateTopicComplete(topicId, marked, this.props.roomId, unmount);
			}
		}, {
			key: 'handleTopicChange',
			value: function handleTopicChange(e) {
				var obj = { tid: e.target.value };
				this.handleWorkDashboard(obj);
	
				var currentIndex = this.topiclistData.indexOf(e.target.value);
	
				if (currentIndex == 0) {
	
					this.setState({
						disablePrevBtn: true,
						disableNextBtn: false
					});
				} else if (this.topiclistData.length == currentIndex + 1) {
					this.setState({
						disablePrevBtn: false,
						disableNextBtn: true
					});
				} else {
					this.setState({
						disablePrevBtn: false,
						disableNextBtn: false
					});
				}
			}
		}, {
			key: 'handlePreviousTopic',
			value: function handlePreviousTopic(e) {
				var currentIndex = this.topiclistData.indexOf(this.props.workDashboardData.tid);
				var previousIndex = currentIndex - 1;
	
				// console.log('previousIndex',previousIndex);
				// if(previousIndex < 0 &&  this.topiclistData.length == 1) {
				// 	this.setState({
				// 		disablePrevBtn : true,
				// 		disableNextBtn : true
				// 	});
				// }
	
	
				if (previousIndex < 0) {
					this.setState({
						disablePrevBtn: true,
						disableNextBtn: false
					});
				} else {
					this.setState({
						disablePrevBtn: false,
						disableNextBtn: false
					});
					var obj = { tid: this.topiclistData[previousIndex] };
					this.handleWorkDashboard(obj);
				}
			}
		}, {
			key: 'handleNextTopic',
			value: function handleNextTopic(e) {
				var currentIndex = this.topiclistData.indexOf(this.props.workDashboardData.tid);
				var nextIndex = currentIndex + 1;
	
				// console.log('handleNextTopic',nextIndex);
				// if(nextIndex < 0 &&  this.topiclistData.length == 1) {
				// 	this.setState({
				// 		disablePrevBtn : true,
				// 		disableNextBtn : true
				// 	});
				// }
	
				if (nextIndex >= this.topiclistData.length) {
					this.setState({
						disableNextBtn: true,
						disablePrevBtn: false
					});
				} else {
					this.setState({
						disableNextBtn: false,
						disablePrevBtn: false
					});
					var obj = { tid: this.topiclistData[nextIndex] };
					this.handleWorkDashboard(obj);
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _this4 = this;
	
				var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_topicAuthorGuest = 'clearfix ' + _Dashboard2.default.topicAuthorGuest;
				var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
				var cmnToggle = _Dashboard2.default.cmnToggle + ' ' + _Dashboard2.default.cmnToggleRound;
	
				var topicId = this.props.workDashboardData && this.props.workDashboardData.tid ? this.props.workDashboardData.tid : null;
				var topicLink = '/admin/room/viewtopic/' + topicId + '/' + this.props.roomId;
				var assignmentLink = '/admin/room/assignments/' + this.props.roomId;
				var questionnaireLink = '/admin/room/questionnaire/' + topicId + '/' + this.props.roomId;
				var cls_optionBlock = '' + _Dashboard2.default.radioTopic;
				var cls_settingsOptions = _Dashboard2.default.settingsOptionInput + ' ' + _Dashboard2.default.radio;
	
				var video = {
					"verticalAlign": "middle"
				};
	
				var topiclistData = [];
	
				this.props.workDashboardData.topiclistData.forEach(function (data) {
					topiclistData.push(data._id);
				});
	
				this.topiclistData = topiclistData;
	
				var fileURL = "/uploads/" + this.state.fileName;
				var link = "https://www.youtube.com/embed/" + this.state.fileName;
				var showImageModal = this.state.showImageModal ? _jsx('div', {}, void 0, _jsx(_reactBootstrap.Modal, {
					show: this.state.showImageModal,
					onHide: this.hideImageModal.bind(this)
				}, void 0, _jsx(_Modal.Header, {
					closeButton: true
				}, void 0, _jsx(_Modal.Title, {
					className: _Dashboard2.default.popHeadingAll
				}, void 0, this.state.fileType == "link" ? "https://www.youtube.com/watch?v=" + this.state.fileName : this.state.displayName)), _jsx(_Modal.Body, {}, void 0, this.state.fileType == "video" ? _jsx('div', {
					className: _Dashboard2.default.videoWrapper
				}, void 0, _jsx('video', {
					src: fileURL,
					controls: true
				})) : this.state.fileType == "link" ? _jsx('div', {
					className: _Dashboard2.default.videoWrapper
				}, void 0, _jsx('iframe', {
					src: link
				})) : _jsx('div', {
					className: _Dashboard2.default.mediaView
				}, void 0, _jsx('img', {
					src: fileURL
				}))), _ref)) : null;
	
				var showAudioModal = this.state.showAudioModal ? _jsx('div', {}, void 0, _jsx(_reactBootstrap.Modal, {
					show: this.state.showAudioModal,
					onHide: this.hideImageModal.bind(this)
				}, void 0, _jsx(_Modal.Header, {
					closeButton: true
				}, void 0, _jsx(_Modal.Title, {
					className: _Dashboard2.default.popHeadingAll
				}, void 0, this.state.displayName)), _jsx(_Modal.Body, {}, void 0, this.state.fileType == "audio" ? _jsx('div', {
					className: _Dashboard2.default.audioWrapper
				}, void 0, _jsx('audio', {
					src: fileURL,
					type: 'audio/mpeg',
					controls: true,
					className: _Dashboard2.default.audioWidth
				})) : null), _ref2)) : null;
	
				var data = this.props.workDashboardData.topicContentDataDetails;
				var profileImage = data ? data.createdBy ? data.createdBy.profile ? data.createdBy.profile.profileImage : '' : '' : '';
				if (profileImage == '' || profileImage == undefined || profileImage == null) {
					var imagePath = '/images/profile-pics/defaultStudent.jpg';
				} else {
					var imagePath = '/uploads/' + profileImage;
				}
	
				var name = this.props.workDashboardData.topicContentDataDetails && this.props.workDashboardData.topicContentDataDetails.createdBy && this.props.workDashboardData.topicContentDataDetails.createdBy.firstname ? this.props.workDashboardData.topicContentDataDetails.createdBy.firstname : '';
				name += this.props.workDashboardData.topicContentDataDetails && this.props.workDashboardData.topicContentDataDetails.createdBy && this.props.workDashboardData.topicContentDataDetails.createdBy.lastname ? ' ' + this.props.workDashboardData.topicContentDataDetails.createdBy.lastname : '';
	
				if (this.state.loading) {
					return _jsx('div', {}, void 0, _jsx('div', {
						className: _Dashboard2.default.whiteCard
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.breadCrum
					}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {}, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref3, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
						id: 'topicList',
						onClick: this.handleTopicList.bind(this)
					}, void 0, _ref4)), _ref5, _jsx('li', {}, void 0, _jsx('span', {
						title: this.props.workDashboardData.topicContentDataDetails.topicName
					}, void 0, this.props.workDashboardData.topicContentDataDetails.topicName.length > 20 ? this.props.workDashboardData.topicContentDataDetails.topicName.substring(0, 20) + '...' : this.props.workDashboardData.topicContentDataDetails.topicName))), this.props.role == _roles.Roles.Lmsadmin || this.props.role == _roles.Roles.Instructor ? _jsx('div', {
						className: _Dashboard2.default.absoluteRightActionBlock
					}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
						id: 'manageTopic',
						to: topicLink,
						title: this.props.intl.messages.add_topics
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.iconBox
					}, void 0, _ref6))), _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
						id: 'manageQuestionnaire',
						to: questionnaireLink,
						title: this.props.intl.messages.manage_questionnaire
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.iconBox
					}, void 0, _ref7))), _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
						id: 'manageAssignments',
						to: assignmentLink,
						title: this.props.intl.messages.manage_assignments
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.iconBox
					}, void 0, _ref8))))) : null), _jsx('div', {
						className: _Dashboard2.default.topicListBar
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.dropdownBar
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.pastTopic
					}, void 0, _jsx('button', {
						disabled: this.state.disablePrevBtn,
						onClick: this.handlePreviousTopic.bind(this)
					}, void 0, _jsx(_reactFontawesome2.default, {
						className: _Dashboard2.default.faIcons,
						name: 'chevron-left',
						size: 'lg',
						style: this.state.disablePrevBtn == true ? { cursor: "not-allowed", color: "rgba(0,0,0,0.28)" } : { cursor: "pointer", color: "rgba(0,0,0,0.54)" }
					}))), _jsx('div', {
						className: _Dashboard2.default.dropdownList
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.selectStyle
					}, void 0, _jsx('select', {
						onChange: this.handleTopicChange.bind(this),
						value: this.props.workDashboardData.tid
					}, void 0, this.props.workDashboardData.topiclistData.map(function (data, i) {
						return _jsx('option', {
							value: data._id
						}, i, ' ', data.topicName, ' ');
					})))), _jsx('div', {
						className: _Dashboard2.default.nextTopic
					}, void 0, _jsx('button', {
						disabled: this.state.disableNextBtn,
						onClick: this.handleNextTopic.bind(this)
					}, void 0, _jsx(_reactFontawesome2.default, {
						style: this.state.disableNextBtn == true ? { cursor: "not-allowed", color: "rgba(0,0,0,0.28)" } : { cursor: "pointer", color: "rgba(0,0,0,0.54)" },
						className: _Dashboard2.default.faIcons,
						name: 'chevron-right',
						size: 'lg'
					}))))), _jsx('div', {
						className: _Dashboard2.default.topicViewheader
					}, void 0, _jsx('h1', {
						className: _Dashboard2.default.mainHeadingTxt
					}, void 0, this.props.workDashboardData.topicContentDataDetails.topicName)), _jsx('div', {
						className: _Dashboard2.default.topicsListBody
					}, void 0, _jsx('div', {
						className: cls_authorsBox
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.hrzlList
					}, void 0, _jsx('div', {
						className: this.props.isGuest ? cls_topicAuthorGuest : cls_topicAuthor
					}, void 0, _jsx('img', {
						id: 'viewprofile',
						src: imagePath,
						onClick: this.viewUser.bind(this),
						title: this.props.intl.messages.viewprofile
					}), _jsx('div', {
						className: _Dashboard2.default.authorInfo
					}, void 0, _jsx('p', {
						className: _Dashboard2.default.authorName
					}, void 0, name), _jsx('p', {
						className: _Dashboard2.default.authorDisg
					}, void 0, _ref9))))), _jsx('div', {
						className: _Dashboard2.default.fullDottedBlock
					}, void 0, _ref10, _react2.default.createElement('div', { ref: 'editor', onMouseUp: this.selectHandler.bind(this) })), _jsx('div', {
						className: _Dashboard2.default.fullDottedBlock
					}, void 0, _ref11, _jsx('div', {
						className: _Dashboard2.default.mediaListBlock
					}, void 0, _jsx('ul', {}, void 0, this.props.workDashboardData && this.props.workDashboardData.topicFileData && this.props.workDashboardData.topicFileData.length > 0 ? this.props.workDashboardData.topicFileData.map(function (data) {
						var fileType = data.fileType;
						var fileName = data.fileName;
						var displayName = void 0;
						if (data.description == undefined) {
							displayName = data.fileName.substring(data.fileName.indexOf("_") + 1);
						} else {
							displayName = data.description;
						}
						if (fileType == 'image') {
							var src = "/uploads/" + fileName;
							return _jsx('li', {}, data._id, _jsx(_reactRouter.Link, {}, void 0, _jsx('div', {
								className: _Dashboard2.default.videoThubBox
							}, void 0, _jsx('img', {
								id: 'Image',
								src: src,
								width: '100',
								height: '100',
								onClick: _this4.handleImage.bind(_this4, { fileName: fileName, displayName: displayName }, { fileType: fileType }),
								title: displayName
							}, fileName))), _jsx('label', {
								title: displayName
							}, void 0, displayName));
						} else if (fileType == 'video') {
							var _src = "/uploads/" + fileName;
							return _jsx('li', {}, data._id, _jsx(_reactRouter.Link, {}, void 0, _jsx('div', {
								className: _Dashboard2.default.videoThubBox
							}, void 0, _jsx('video', {
								id: 'video',
								src: _src,
								width: '100',
								height: '100',
								style: video,
								onClick: _this4.handleImage.bind(_this4, { fileName: fileName, displayName: displayName }, { fileType: fileType }),
								title: displayName
							}, fileName))), _jsx('label', {
								title: displayName
							}, void 0, displayName));
						} else if (fileType == 'audio') {
							//let src = "/uploads/"+fileName;
							return _jsx('li', {}, data._id, _jsx(_reactRouter.Link, {}, void 0, _jsx('div', {
								className: _Dashboard2.default.videoThubBox
							}, void 0, _jsx('img', {
								id: 'audioImage',
								src: '/images/black-icons/audio-file.png',
								onClick: _this4.handleAudioImage.bind(_this4, { fileName: fileName, displayName: displayName }, { fileType: fileType }),
								title: displayName
							}, fileName))), _jsx('label', {
								title: displayName
							}, void 0, displayName));
						} else if (fileType == 'link') {
							var _src2 = "http://img.youtube.com/vi/" + data.fileName + "/1.jpg";
							var title = data.title ? data.title : 'No Name';
							return _jsx('li', {}, data._id, _jsx(_reactRouter.Link, {}, void 0, _jsx('div', {
								className: _Dashboard2.default.videoThubBox
							}, void 0, _jsx('div', {
								className: _Dashboard2.default.timeDisplay
							}, void 0, _jsx('p', {}, void 0, data.duration ? _moment2.default.duration(data.duration).minutes() + ":" + _moment2.default.duration(data.duration).seconds() : null)), _jsx('img', {
								id: 'image',
								src: _src2,
								width: '100',
								height: '100',
								onClick: _this4.handleImage.bind(_this4, { fileName: fileName }, { fileType: fileType }),
								title: title
							}, fileName))), _jsx('label', {
								title: title
							}, void 0, title));
						}
	
						// else {
						// 	return <p key={data._id}>
						//      <span>No Files Yet!...</span>
						//    </p>
						// }
					}) : _ref12))), _jsx('div', {
						className: _Dashboard2.default.fullDottedBlock
					}, void 0, _ref13, _jsx('div', {
						className: _Dashboard2.default.resourceList
					}, void 0, _jsx('ul', {}, void 0, this.props.workDashboardData && this.props.workDashboardData.topicFileData && this.props.workDashboardData.topicFileData.length > 0 ? this.props.workDashboardData.topicFileData.map(function (data) {
						var fileName = data.fileName;
						var displayName = void 0;
						if (data.description == undefined) {
							displayName = data.fileName.substring(data.fileName.indexOf("_") + 1);
						} else {
							displayName = data.description;
						}
						var fileType = data.fileType;
						var ext = fileName.split('.').pop();
						var path;
						if (fileType == 'application') {
							var _link = "/uploads/" + data.fileName;
							var src = "/images/icons/" + ext + ".png";
							return _jsx('li', {}, data._id, _jsx(_reactRouter.Link, {
								id: 'pdfView',
								className: _Dashboard2.default.fileUploadBreakWord,
								onClick: _this4.handlePdfView.bind(_this4, { fileId: data._id, fileName: fileName, displayName: displayName })
							}, void 0, _jsx('img', {
								src: src
							}), _jsx('span', {}, void 0, displayName)));
						} else if (fileType == 'text') {
							var _link2 = "/uploads/" + data.fileName;
							var _src3 = "/images/icons/" + ext + ".png";
							return _jsx('li', {}, data._id, _jsx(_reactRouter.Link, {
								id: 'pdfView',
								className: _Dashboard2.default.fileUploadBreakWord,
								onClick: _this4.handlePdfView.bind(_this4, { fileId: data._id, fileName: fileName, displayName: displayName })
							}, void 0, _jsx('img', {
								src: _src3
							}), _jsx('span', {}, void 0, displayName)));
						}
						// else {
						// 	return <p key={data._id}>
						//      <span><FormattedMessage id = 'no_files_yet'/>...</span>
						//    </p>
						// }
					}) : _ref14))), _jsx('div', {
						className: _Dashboard2.default.fullDottedBlock
					}, void 0, _ref15, _jsx('div', {
						className: _Dashboard2.default.resourceList
					}, void 0, _jsx('ul', {}, void 0, this.props.workDashboardData && this.props.workDashboardData.topicContentDataDetails && this.props.workDashboardData.topicContentDataDetails.questionnaire && this.props.workDashboardData.topicContentDataDetails.questionnaire.length > 0 ? this.props.workDashboardData.topicContentDataDetails.questionnaire.map(function (data) {
						return _jsx('li', {}, data._id, _jsx(_reactRouter.Link, {
							id: 'questionnaire',
							onClick: _this4.handleQuestionnaire.bind(_this4, data)
						}, void 0, _jsx('div', {}, void 0, _jsx('span', {
							className: _Dashboard2.default.questionCircleSmall
						}, void 0, '?'), _jsx('span', {}, void 0, data.questionnaireId.questionnaireName)), data.openFrom == undefined && data.closeFrom == undefined || data.openFrom == null && data.closeFrom == null ? _jsx('div', {
							className: _Dashboard2.default.dateTimeBlock
						}, void 0, _jsx('span', {
							className: _Dashboard2.default.dateTime
						}, void 0, ' ', _ref16, ' ')) : _jsx('div', {
							className: _Dashboard2.default.dateTimeBlock
						}, void 0, _jsx('span', {
							className: _Dashboard2.default.dateTime
						}, void 0, ' ', _ref17, ' ', _jsx('span', {}, void 0, _ref18, ' ', (0, _moment2.default)(data.openFrom).format("DD/MM/YYYY")), ' ', _jsx('span', {
							className: _Dashboard2.default.timeMrg
						}, void 0, ' ', _ref19, ' ', (0, _moment2.default)(data.openFrom).format("hh:mm A")), ' '), _jsx('span', {
							className: _Dashboard2.default.dateTime
						}, void 0, ' ', _ref20, ' ', _jsx('span', {}, void 0, _ref21, ' ', (0, _moment2.default)(data.closeFrom).format("DD/MM/YYYY")), ' ', _jsx('span', {
							className: _Dashboard2.default.timeMrg
						}, void 0, ' ', _ref22, ' ', (0, _moment2.default)(data.closeFrom).format("hh:mm A")), ' '))));
					}) : _ref23))), this.props.loggedInData && this.props.loggedInData.data && this.props.loggedInData.data.profile && this.props.loggedInData.data.profile.companyid && this.props.loggedInData.data.profile.companyid.businessType && this.props.loggedInData.data.profile.companyid.businessType == 'LMS' && this.props.workDashboardData && this.props.workDashboardData.topicContentDataDetails && this.props.workDashboardData.topicContentDataDetails._id ? _jsx('div', {
						className: _Dashboard2.default.topicCompleteDiv
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.checkboxDiv
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.checkboxText
					}, void 0, _ref24), _jsx('span', {
						className: cls_optionBlock
					}, void 0, _jsx('label', {}, void 0, _jsx('input', {
						type: 'checkbox',
						id: 'switchCheckbox',
						className: cls_settingsOptions,
						name: 'onOffSwitch',
						value: this.state.complete,
						onClick: this.handleMarkComplete.bind(this),
						checked: this.state.complete
					}))))) : null, _jsx('div', {
						className: _Dashboard2.default.topicListBar
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.dropdownBar
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.pastTopic
					}, void 0, _jsx('button', {
						type: 'button',
						disabled: this.state.disablePrevBtn,
						onClick: this.handlePreviousTopic.bind(this)
					}, void 0, _jsx(_reactFontawesome2.default, {
						className: _Dashboard2.default.faIcons,
						name: 'chevron-left',
						size: 'lg',
						style: this.state.disablePrevBtn == true ? { cursor: "not-allowed", color: "rgba(0,0,0,0.28)" } : { cursor: "pointer", color: "rgba(0,0,0,0.54)" }
					}))), _jsx('div', {
						className: _Dashboard2.default.dropdownList
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.selectStyle
					}, void 0, _jsx('select', {
						onChange: this.handleTopicChange.bind(this),
						value: this.props.workDashboardData.tid
					}, void 0, this.props.workDashboardData.topiclistData.map(function (data, i) {
						return _jsx('option', {
							value: data._id
						}, i, ' ', data.topicName, ' ');
					})))), _jsx('div', {
						className: _Dashboard2.default.nextTopic
					}, void 0, _jsx('button', {
						type: 'button',
						disabled: this.state.disableNextBtn,
						onClick: this.handleNextTopic.bind(this)
					}, void 0, _jsx(_reactFontawesome2.default, {
						className: _Dashboard2.default.faIcons,
						name: 'chevron-right',
						size: 'lg',
						style: this.state.disableNextBtn == true ? { cursor: "not-allowed", color: "rgba(0,0,0,0.28)" } : { cursor: "pointer", color: "rgba(0,0,0,0.54)" }
					}))))))), showImageModal, showAudioModal);
				} else {
					return _ref25;
				}
			}
	
			///////////////////////
	
		}, {
			key: 'handleSelection',
	
	
			/////////////////////////
			value: function handleSelection(obj) {
				if (obj.uid != this.props.workDashboardData.uid) {
					if (document.createRange) {
						var charIndex = 0,
						    range = document.createRange();
						range.setStart(this.refs.editor, 0);
						range.collapse(true);
						var nodeStack = [this.refs.editor],
						    node = void 0,
						    foundStart = false,
						    stop = false;
						while (!stop && (node = nodeStack.pop())) {
							if (node.nodeType == 3) {
								var nextCharIndex = charIndex + node.length;
								if (!foundStart && obj.start >= charIndex && obj.start <= nextCharIndex) {
									range.setStart(node, obj.start - charIndex);
									foundStart = true;
								}
								if (foundStart && obj.end >= charIndex && obj.end <= nextCharIndex) {
									range.setEnd(node, obj.end - charIndex);
									stop = true;
								}
								charIndex = nextCharIndex;
							} else {
								var i = node.childNodes.length;
								while (i--) {
									nodeStack.push(node.childNodes[i]);
								}
							}
						}
						var sel = window.getSelection();
						sel.removeAllRanges();
						sel.addRange(range);
					} else if (document.body.createTextRange) {
						var textRange = document.body.createTextRange();
						textRange.moveToElementText(this.refs.editor);
						textRange.collapse(true);
						textRange.moveEnd("character", obj.end);
						textRange.moveStart("character", obj.start);
						textRange.select();
					}
				}
			}
		}]);
	
		return TopicContent;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			dashboardData: (0, _UserDashboardReducer.dashboardData)(state),
			intl: state.intl,
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
			workDashboardReload: (0, _WorkDashboardReloadReducer.workDashboardReload)(state),
			loggedInData: (0, _LoginReducer.loggedInData)(state)
		};
	}
	
	TopicContent.contextTypes = {
		intl: _react2.default.PropTypes.object.isRequired
	
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(TopicContent);
	
	/*<small className={styles.smallTxt}>Uncompleted</small>
										<input id="comTog" className={cmnToggle} type="checkbox" value={this.state.complete} onChange={this.handleMarkComplete.bind(this)} checked={this.state.complete}/>
										<label htmlFor="comTog"></label>
									<small className={styles.smallTxt}>Completed</small>*/

/***/ },

/***/ 415:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _TopicContent = __webpack_require__(414);
	
	var _TopicContent2 = _interopRequireDefault(_TopicContent);
	
	var _TopicData = __webpack_require__(509);
	
	var _TopicData2 = _interopRequireDefault(_TopicData);
	
	var _ConductQuestion = __webpack_require__(422);
	
	var _ConductQuestion2 = _interopRequireDefault(_ConductQuestion);
	
	var _PdfView = __webpack_require__(425);
	
	var _PdfView2 = _interopRequireDefault(_PdfView);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _WorkDashboardReloadReducer = __webpack_require__(154);
	
	var _roles = __webpack_require__(46);
	
	var _Analytics = __webpack_require__(66);
	
	var _Analytics2 = _interopRequireDefault(_Analytics);
	
	var _QuestionnaireReducer = __webpack_require__(147);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref2 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'topics_list'
	})));
	
	var _ref3 = _jsx('img', {
		src: '/images/black-icons/black-topics.png',
		alt: 'manage-topics-icon'
	});
	
	var _ref4 = _jsx('img', {
		src: '/images/black-icons/black-questionnaire.png',
		alt: 'manage-questionnaire-icon'
	});
	
	var _ref5 = _jsx('img', {
		src: '/images/black-icons/black-assignments.png',
		alt: 'manage-assignments-icon'
	});
	
	var _ref6 = _jsx(_reactIntl.FormattedMessage, {
		id: 'welcome_room'
	});
	
	var _ref7 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'list_topics'
	}));
	
	var _ref8 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_topics_yet'
	}), ' ');
	
	var TopicList = function (_Component) {
		_inherits(TopicList, _Component);
	
		function TopicList(props) {
			_classCallCheck(this, TopicList);
	
			var _this = _possibleConstructorReturn(this, (TopicList.__proto__ || Object.getPrototypeOf(TopicList)).call(this, props));
	
			_this.handleWorkDashboard = function (obj) {
				_this.props.imHost == true && _this.props.workDashboardData.sync == true ? _this.props.syncCallback(obj) : _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			};
	
			return _this;
		}
	
		_createClass(TopicList, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var obj = {
					roomKey: this.props.roomKey
				};
				this.props.dispatch((0, _WorkDashboardActions.getConferenceTopicsList)(obj));
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (this.props.workDashboardReload.topicList != nextProps.workDashboardReload.topicList) {
					var obj = {
						roomKey: this.props.roomKey
					};
					this.props.dispatch((0, _WorkDashboardActions.getConferenceTopicsList)(obj));
				}
			}
		}, {
			key: 'handleFullTopic',
			value: function handleFullTopic(data) {
				var obj = { current: 'topicList', topicContent: true, topicList: false, tid: data._id, conductQuestion: false, questionData: null, pdfView: false, topicPdfFileData: null };
				var _objAnalytics = new _Analytics2.default();
				var logObj = {
					topicId: data._id,
					roomId: this.props.roomId
				};
	
				_objAnalytics.UpdateLog(logObj);
	
				// console.log("topic-data", TopicObj);
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'handleList',
			value: function handleList() {
				var _obj;
	
				var obj = (_obj = { current: 'topicList', topicContent: false, topicList: true, conductQuestion: false }, _defineProperty(_obj, 'conductQuestion', false), _defineProperty(_obj, 'questionData', null), _defineProperty(_obj, 'pdfView', false), _defineProperty(_obj, 'topicPdfFileData', null), _obj);
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'syncCallback',
			value: function syncCallback(obj) {
				this.props.syncCallback(obj);
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;
	
				var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
				var topicLink = '/admin/room/listtopic/' + this.props.roomId;
				var assignmentLink = '/admin/room/assignments/' + this.props.roomId;
				var questionnaireLink = '/admin/questionnaire/list';
	
				var topicList = this.props.workDashboardData.topicList ? _jsx('div', {
					className: _Dashboard2.default.whiteCard
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.breadCrum
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {}, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref, _ref2), this.props.role == _roles.Roles.Lmsadmin || this.props.role == _roles.Roles.Instructor ? _jsx('div', {
					className: _Dashboard2.default.absoluteRightActionBlock
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					to: topicLink,
					title: this.props.intl.messages.add_topics
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _ref3))), _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					to: questionnaireLink,
					title: this.props.intl.messages.manage_questionnaire
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _ref4))), _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					to: assignmentLink,
					title: this.props.intl.messages.manage_assignments
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _ref5))))) : null), _jsx('div', {
					className: _Dashboard2.default.topicsListheader
				}, void 0, _jsx('h2', {
					className: _Dashboard2.default.headingTxt
				}, void 0, _ref6, _jsx('span', {}, void 0, this.props.roomName)), _ref7), _jsx('div', {
					className: _Dashboard2.default.topicsListBody
				}, void 0, _jsx('ul', {}, void 0, this.props.workDashboardData.topiclistData.length > 0 ? this.props.workDashboardData.topiclistData.map(function (data) {
					return _jsx(_TopicData2.default, {
						data: data,
						contantCallback: _this2.handleFullTopic.bind(_this2),
						sync: _this2.props.workDashboardData.sync,
						imHost: _this2.props.imHost,
						confObject: _this2.props.confObject,
						isGuest: _this2.props.isGuest
					}, data._id);
				}) : _jsx('li', {}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
					className: _Dashboard2.default.listTitle
				}, void 0, _ref8)))))) : null;
	
				return _jsx('div', {}, void 0, topicList, this.props.workDashboardData.topicContent ? _jsx(_TopicContent2.default, {
					roomId: this.props.roomId,
					roomName: this.props.roomName,
					confObject: this.props.confObject,
					imHost: this.props.imHost,
					syncCallback: this.syncCallback.bind(this),
					topicListCallback: this.handleList.bind(this),
					role: this.props.role,
					isGuest: this.props.isGuest
				}) : null, this.props.workDashboardData.conductQuestion && this.props.questionnaireData && this.props.questionnaireData.gradeData || this.props.workDashboardData.conductQuestion && this.props.questionnaireData && this.props.questionnaireData.gradeData == null ? _jsx(_ConductQuestion2.default, {
					roomId: this.props.roomId,
					roomName: this.props.roomName,
					topicListCallback: this.handleList.bind(this),
					contantCallback: this.handleFullTopic.bind(this),
					gradesData: this.props.questionnaireData.gradeData
				}) : null, this.props.workDashboardData.pdfView ? _jsx(_PdfView2.default, {
					roomName: this.props.roomName,
					imHost: this.props.imHost,
					topicListCallback: this.handleList.bind(this),
					contantCallback: this.handleFullTopic.bind(this),
					confObject: this.props.confObject
				}) : null);
			}
		}]);
	
		return TopicList;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			intl: state.intl,
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
			questionnaireData: (0, _QuestionnaireReducer.questionnaireData)(state),
			workDashboardReload: (0, _WorkDashboardReloadReducer.workDashboardReload)(state)
		};
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(TopicList);

/***/ },

/***/ 416:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _RenderQuestions = __webpack_require__(387);
	
	var _RenderQuestions2 = _interopRequireDefault(_RenderQuestions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var correctAns = null;
	var swotWithoutAns = null;
	
	var _ref = _jsx(_reactFontawesome2.default, {
	  name: 'question'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'true_false'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'Marks'
	});
	
	var _ref4 = _jsx('img', {
	  src: '/images/icons/green-check.png'
	});
	
	var _ref5 = _jsx('img', {
	  src: '/images/icons/red-cross.png'
	});
	
	var _ref6 = _jsx('span', {}, void 0, 'N/A');
	
	var TrueFalse = function (_Component) {
	  _inherits(TrueFalse, _Component);
	
	  function TrueFalse(props) {
	    _classCallCheck(this, TrueFalse);
	
	    return _possibleConstructorReturn(this, (TrueFalse.__proto__ || Object.getPrototypeOf(TrueFalse)).call(this, props));
	  }
	
	  _createClass(TrueFalse, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var cls_formInline = _Dashboard2.default.formInline + ' form-inline';
	      var cls_marksInline = _Dashboard2.default.marksCss + ' pull-right';
	
	      return _jsx('li', {}, this.props.data._id, _jsx('div', {
	        className: _Dashboard2.default.questionBlock
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.questionHeading
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.questionIconCircle
	      }, void 0, _ref), _jsx(_RenderQuestions2.default, {
	        question: this.props.data.question
	      })), _jsx('div', {
	        className: _Dashboard2.default.chooseAnswerBlock
	      }, void 0, _jsx('p', {}, void 0, _ref2, this.props.data.marks != undefined || this.props.data.marks != null ? _jsx('span', {
	        className: cls_marksInline
	      }, void 0, _ref3, ':', this.props.data.marks) : null), _jsx('form', {
	        className: cls_formInline
	      }, void 0, _jsx('div', {
	        className: 'radio'
	      }, void 0, this.props.wrong || this.props.correct ? this.props.data.options.map(function (item, index) {
	
	        var wrongAnsArr = null;
	
	        for (var i = 0; i < _this2.props.wrong.length; i++) {
	          if (_this2.props.wrong[i].questionId == _this2.props.data._id) {
	            var data = _this2.props.wrong[i];
	            wrongAnsArr = data.answers;
	            swotWithoutAns = data.swotWithoutAns;
	          }
	        }
	
	        var correctAnsArr = null;
	        for (var i = 0; i < _this2.props.correct.length; i++) {
	          if (_this2.props.correct[i].questionId == _this2.props.data._id) {
	            var data = _this2.props.correct[i];
	            correctAnsArr = data.answers;
	            swotWithoutAns = data.swotWithoutAns;
	          }
	        }
	
	        if (correctAnsArr != null) {
	          var correctStatus = _.includes(correctAnsArr, item);
	          correctAns = true;
	        } else if (wrongAnsArr != null) {
	          var wrongStatus = _.includes(wrongAnsArr, item);
	          correctAns = false;
	        } else {
	          correctAns = false;
	        }
	
	        if (_this2.props.data.answers != null) {
	          var answersArray = _.map(_this2.props.data.answers, _.trim);
	          var itemElement = _.trim(item);
	          var correctLabel = _.includes(answersArray, itemElement);
	        }
	
	        if (correctStatus == true) {
	          var checked = true;
	        } else if (wrongStatus == true) {
	          var checked = true;
	        } else {
	          var checked = false;
	        }
	
	        var number = index + 1;
	        return _jsx('label', {
	          className: 'radio-inline'
	        }, index, _this2.props.showResult != undefined ? correctLabel == true ? _jsx('span', {
	          className: _Dashboard2.default.rightAns
	        }) : null : null, _jsx('input', {
	          id: 'optradio',
	          type: 'radio',
	          name: 'optradio',
	          value: item,
	          checked: checked,
	          disabled: true
	        }), _jsx('span', {}, void 0, number, ')'), ' ', item);
	      }) : this.props.data.options.map(function (item, index) {
	        if (item == '' && _this2.props.checked[_this2.props.data._id] == '') {
	          var checked = false;
	        } else {
	          if (_this2.props.checked[_this2.props.data._id] == item) {
	            var checked = true;
	          } else {
	            var checked = false;
	          }
	        }
	        var number = index + 1;
	        return _jsx('label', {
	          className: 'radio-inline'
	        }, index, _jsx('input', {
	          id: 'optradio',
	          type: 'radio',
	          name: 'optradio',
	          value: item,
	          checked: checked,
	          onChange: _this2.props.answer
	        }), _jsx('span', {}, void 0, number, ')'), ' ', item);
	      })), this.props.showResult != undefined ? this.props.wrong || this.props.correct ? correctAns == true ? _jsx('div', {
	        className: _Dashboard2.default.answerStatus
	      }, void 0, _ref4) : _jsx('div', {
	        className: _Dashboard2.default.answerStatus
	      }, void 0, _ref5) : null : null, swotWithoutAns == true ? _jsx('div', {
	        className: _Dashboard2.default.answerStatus
	      }, void 0, _ref6) : null))));
	    }
	  }]);
	
	  return TrueFalse;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {};
	}
	
	TrueFalse.contextTypes = {
	  intl: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(TrueFalse);

/***/ },

/***/ 417:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.saveQuestionRequest = saveQuestionRequest;
	exports.getHandraiseData = getHandraiseData;
	exports.getHandraiseQues = getHandraiseQues;
	exports.sendAnswer = sendAnswer;
	exports.getAnswers = getAnswers;
	exports.deleteQuestion = deleteQuestion;
	exports.saveReply = saveReply;
	exports.getReplies = getReplies;
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// export const HANDRAISE_SUBMITTED = 'HANDRAISE_SUBMITTED';
	
	function saveQuestionRequest(data) {
	  if (data._id) {
	    var id = data._id;
	    delete data['_id'];
	    return (0, _apiCaller2.default)('handraise/' + id, 'put', {
	      data: data
	    });
	  } else {
	    return (0, _apiCaller2.default)('handraise', 'post', {
	      data: data
	    });
	  }
	}
	
	function getHandraiseData(data) {
	  return (0, _apiCaller2.default)('handraise-question/' + data.roomKey + '/' + data.limit, 'get');
	}
	
	function getHandraiseQues(recordId) {
	  return (0, _apiCaller2.default)('handraise-question/' + recordId, 'get');
	}
	
	function sendAnswer(id, answer) {
	  return (0, _apiCaller2.default)('handraise-question-answer/' + id, 'put', {
	    data: { answer: answer }
	  });
	}
	
	function getAnswers(data) {
	  return (0, _apiCaller2.default)('handraise-answers/' + data._id + '/' + data.limit, 'get');
	}
	
	function deleteQuestion(recordId) {
	  return (0, _apiCaller2.default)('handraise-question/' + recordId, 'delete');
	}
	
	function saveReply(data, qid) {
	  return (0, _apiCaller2.default)('handraise-answer-reply/' + qid, 'put', {
	    data: data
	  });
	}
	
	function getReplies(data) {
	  return (0, _apiCaller2.default)('answer-replies/' + data._id + '/' + data.replyOn, 'get');
	}

/***/ },

/***/ 421:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ImageSliderHoc = __webpack_require__(430);
	
	var _ImageSliderHoc2 = _interopRequireDefault(_ImageSliderHoc);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Slider = function (_React$Component) {
	  _inherits(Slider, _React$Component);
	
	  function Slider(props) {
	    _classCallCheck(this, Slider);
	
	    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));
	
	    _this.scrollLeft = _this.scrollLeft.bind(_this);
	    _this.scrollRight = _this.scrollRight.bind(_this);
	    _this.updatePosition = _this.updatePosition.bind(_this);
	    _this.setVisibleItems = _this.setVisibleItems.bind(_this);
	    _this.sliderStyle = _this.sliderStyle.bind(_this);
	    _this.isOpaque = _this.isOpaque.bind(_this);
	    _this.animate = _this.animate.bind(_this);
	    _this.forceUpdateHandler = _this.forceUpdateHandler(_this);
	    _this.state = {
	      images: [],
	      currentPosition: 0,
	      interval: null
	    };
	    return _this;
	  }
	
	  _createClass(Slider, [{
	    key: 'forceUpdateHandler',
	    value: function forceUpdateHandler() {
	      //this.forceUpdate()
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setVisibleItems(this.props.visibleItems);
	      window.addEventListener('resize', this.setVisibleItems.bind(this, this.props.visibleItems));
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.clearAnimate();
	      window.removeEventListener('resize', this.setVisibleItems.bind(this, this.props.visibleItems));
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (this.state.currentPosition !== nextState.currentPosition) {
	        // this.animate();
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {}
	  }, {
	    key: 'scrollLeft',
	    value: function scrollLeft() {
	      var currentPosition = this.updatePosition(this.state.currentPosition - 1);
	      this.setState({ currentPosition: currentPosition });
	    }
	  }, {
	    key: 'scrollRight',
	    value: function scrollRight() {
	      var currentPosition = this.updatePosition(this.state.currentPosition + 1);
	      this.setState({ currentPosition: currentPosition });
	    }
	  }, {
	    key: 'setVisibleItems',
	    value: function setVisibleItems(currentVisibleItems) {
	      var container = document.querySelector('.rsc-slider');
	      var visibleItems = container && container.offsetWidth < 720 ? 1 : currentVisibleItems;
	      this.setState({ visibleItems: visibleItems });
	    }
	  }, {
	    key: 'sliderStyle',
	    value: function sliderStyle(classname) {
	      var items = document.querySelector(classname);
	      var itemWidth = items ? items.offsetWidth : 0;
	      var shift = itemWidth * this.state.currentPosition;
	      return { transform: 'translateX(-' + shift + 'px)' };
	    }
	  }, {
	    key: 'isOpaque',
	    value: function isOpaque(key) {
	      var nextPosition = this.state.visibleItems + this.state.currentPosition;
	      var opaque = this.props.children.slice(this.state.currentPosition, nextPosition);
	      return opaque.indexOf(this.props.children[key]) !== -1;
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      if (this.state.interval) {
	        window.clearInterval(this.state.interval);
	      }
	      if (!this.props.delay) {
	        return false;
	      }
	      var interval = window.setInterval(this.scrollRight, this.props.delay);
	      this.setState({ interval: interval });
	    }
	  }, {
	    key: 'clearAnimate',
	    value: function clearAnimate() {
	      if (this.state.interval) {
	        clearInterval(this.state.interval);
	        this.setState({ interval: null });
	      }
	    }
	  }, {
	    key: 'updatePosition',
	    value: function updatePosition(nextPosition) {
	      var _state = this.state,
	          visibleItems = _state.visibleItems,
	          currentPosition = _state.currentPosition;
	
	      var skipScrollIfEnd = this.props.calculator.skipScrollIfEnd(visibleItems, currentPosition, nextPosition);
	      var skipScrollIfNonInfinite = this.props.calculator.skipScrollIfNonInfinite(visibleItems, currentPosition, nextPosition);
	      var scrollIfInfinite = this.props.calculator.scrollIfInfinite(visibleItems, currentPosition, nextPosition);
	      var scrollToBeginningIfEnd = this.props.calculator.scrollToBeginningIfEnd(visibleItems, currentPosition, nextPosition);
	      if (skipScrollIfEnd !== undefined) {
	        return skipScrollIfEnd;
	      }
	      if (skipScrollIfNonInfinite !== undefined) {
	        return skipScrollIfNonInfinite;
	      }
	      if (scrollIfInfinite !== undefined) {
	        return scrollIfInfinite;
	      }
	      if (scrollToBeginningIfEnd !== undefined) {
	        return scrollToBeginningIfEnd;
	      }
	      return nextPosition;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var sliderStyle = this.sliderStyle('.rsc-slider-item');
	      var imgWidth = 100 / this.state.visibleItems;
	      var images = this.props.children.map(function (item, key) {
	        return {
	          itemClass: _this2.isOpaque(key) ? 'rsc-slider-item' : 'rsc-slider-item rsc-slider-item_transparent',
	          src: item
	        };
	      });
	
	      /*<div className={item.itemClass} key={key} style={{'flex': `0 0 ${imgWidth}%`}}>
	                <div className="rsc-slider-item-img">{item.src}</div>
	              </div>*/
	      return _jsx('div', {
	        className: 'rsc-container'
	      }, void 0, _jsx('div', {
	        id: this.props.id,
	        className: 'rsc-slider',
	        style: sliderStyle
	      }, void 0, this.props.children), images.length > this.state.visibleItems ? _jsx('div', {}, void 0, _jsx('div', {
	        className: 'rsc-navigation rsc-navigation_left rsc-arrow_left',
	        onClick: this.scrollLeft
	      }), _jsx('div', {
	        className: 'rsc-navigation rsc-navigation_right rsc-arrow_right',
	        onClick: this.scrollRight
	      })) : null);
	    }
	  }]);
	
	  return Slider;
	}(_react2.default.Component);
	
	exports.default = (0, _ImageSliderHoc2.default)(Slider);

/***/ },

/***/ 422:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactIntl = __webpack_require__(11);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _UserDashboardReducer = __webpack_require__(88);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _roles = __webpack_require__(46);
	
	var _TopicList = __webpack_require__(415);
	
	var _TopicList2 = _interopRequireDefault(_TopicList);
	
	var _TopicContent = __webpack_require__(414);
	
	var _TopicContent2 = _interopRequireDefault(_TopicContent);
	
	var _MultipleChoice = __webpack_require__(412);
	
	var _MultipleChoice2 = _interopRequireDefault(_MultipleChoice);
	
	var _TrueFalse = __webpack_require__(416);
	
	var _TrueFalse2 = _interopRequireDefault(_TrueFalse);
	
	var _Subjective = __webpack_require__(507);
	
	var _Subjective2 = _interopRequireDefault(_Subjective);
	
	var _MultipleResponsive = __webpack_require__(413);
	
	var _MultipleResponsive2 = _interopRequireDefault(_MultipleResponsive);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _component = {
		"form-control": "QmIrbtmLmFNpHdWMqFMWS",
		"innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
		"colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
		"error": "_3jAfmA6J7YmNDyB2VfsCxP",
		"mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
		"dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
		"iElement": "_2crZNiFs8z8oNhzPDC1qOE",
		"oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
		"iLabel": "_3Pyvct_srCoSvJCgGG41jw",
		"oLabel": "NsxWZpxBqBX8wky_O477_",
		"iForm": "_3IlToa7pigrSS8KWut_dJ8",
		"oForm": "_3N0YNUcfI5U02VSmBEbYot",
		"iFormField": "_12yKSn29WLZIE6fvGQfcrN",
		"oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
		"iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
		"oFormGroup": "_386CxczA49XX2-ejr3Qe55",
		"formNext": "ccTxjcG6_GZO9OgzW33HT",
		"iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
		"oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
		"iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
		"oContainer": "_2tEAAtqgoutuOUU96rNvv1",
		"iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
		"oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
		"iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
		"iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
		"whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
		"iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
		"active": "_2fF1Q9nO2O_1B8Ldb4RM52",
		"scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
		"errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
		"errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
		"whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
		"greyCard": "_34l9W17Mt1koxHLd1yUqgk",
		"reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
		"countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
		"react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
		"ad": "N3bKXyhfwvWT3eAEC9Nno",
		"ae": "taXUT8yfjgRMeSH3rMNxy",
		"af": "_2vH4qShCgBPBO4GR8BdNvd",
		"ag": "n8QfWtvpZLMpatCUqX2Td",
		"ai": "_3fPX_RcpesOPxFsmsaygCE",
		"al": "_1T12tbcC6990b-fIMG5LYW",
		"am": "_31HdarMDfXvAgjizVUoeHk",
		"ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
		"ar": "_2qJleMgRbIErIrx3kQF57O",
		"as": "_2ZPVYL8Vjn-vdWZToCEhjN",
		"at": "_1hWilvnrVbANEHRyLGlF-m",
		"au": "_2zJE4K6o-ftWqhb3exXZgk",
		"aw": "_1UroMxX5JHt9bjGdHwa1OY",
		"az": "_-Y2xueZ_1mEtB9YDOqEGB",
		"ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
		"bb": "_34600Kl8Wac9Hx7S3-3U6b",
		"bd": "_3WBX90V5VJXA7-vSUfEWCh",
		"be": "BcK33edOPcbYdkxxvOApy",
		"bf": "ShN64-J7UZdswoQjkf7L_",
		"bg": "_2A9PgkQEF5_KbvHvDf6_lY",
		"bh": "_10p3rxNRYOhv8-BtZuq1w8",
		"bi": "_6MzP1qXXDFAZVL7nBmRiH",
		"bj": "_2U8H1sji9LfDEW706KyKvF",
		"bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
		"bn": "PgMDvF79WHl3kaklOmhw3",
		"bo": "_7MheGVInaTi-QLxw5PiUi",
		"br": "_1BDNUyT0cHDlbCBFgrrLkJ",
		"bs": "_3vcASZB5bu7mJAzTzaRkWe",
		"bt": "esu4pvyd9ZFWrf-etnrva",
		"bw": "_2Hbv1I361RJFK3Ph2xPlu_",
		"by": "_2tbYam6Og8RAicMhX9SXvI",
		"bz": "_3xB704PIgqFnU2zTG-JZFN",
		"ca": "_36FyK29nkNl9Ez7yWh04AS",
		"cd": "_9PnHTqK1pSn_GIAbBtPT2",
		"cf": "_2LgMF7o1A3a2cgw5jkpvZV",
		"cg": "_3hYc9Y3UdCphltZKe2vJWk",
		"ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
		"ci": "FoSGkvvMDFAVcvsZBWX-Z",
		"ck": "_1742IgEaHW3SZU7h_-nkwr",
		"cl": "_36IaMt7ntEwUsH4lwN4tW-",
		"cm": "_1N8krqbPtlsEVsh6SaCetm",
		"cn": "IfkD3fwbUSx9FZflX6iIU",
		"co": "_3Y7u7ONzxyZVjZYzS1OHTr",
		"cr": "Gw5Qz4qBNZjPDmpQmi-d2",
		"cu": "ZuHtEp_knwZcbwTTJkRgI",
		"cv": "o6BzJCyjRH1pOsf_HpbQ6",
		"cw": "hRElJCQXyNIITDZ6UQVut",
		"cy": "_2cHKWrINPNO6L8BEOdtJCG",
		"cz": "nS617LE8Qcckdv9HJTWpt",
		"de": "fqJD93WBywDPs0lrLEXLT",
		"dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
		"dk": "_3fpBLMtuUi0kowy3ziMRYd",
		"dm": "_3gMwGkQW-OGFx1U7vd7VMD",
		"do": "G9EZGjpXLJUyQuREesyGO",
		"dz": "_3Nka0vwv6nZpeugyuqYQIJ",
		"ec": "_18t83SdIOs8EY6iF0zV0CZ",
		"ee": "_1miCbYr55XmBKvcUu6XetR",
		"eg": "_1T55wMh1svM7M5QGxFM2ex",
		"er": "c0Ab9spCQ4VnXr_6xijnD",
		"es": "_1lutiEL9tJpdNgKmnTT6Ld",
		"et": "_2GGXIPO2kOV6CUsu65V4Z3",
		"fi": "_1I-g5oWpQznT5QZuBfQ8A",
		"fj": "_3oeTP_GhC_XzsjzHW86oDc",
		"fk": "_3-_BjK4NArHS0nyf0DLc4F",
		"fm": "_1WQYGDC-zTatxog3SIwE80",
		"fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
		"fr": "_3-mqatBXfaTfex8LWjnIDA",
		"bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
		"mf": "_34f4ya9mcbpIcQPgHJ4I6c",
		"ga": "_15_iO4CJaXbX7PySxoldPF",
		"gb": "_1vZuFSSey59_ixozre-0L_",
		"gd": "_26Ub0jcjDpVD4nwM7m5n4e",
		"ge": "_27ctDR0Hf6HO15MgHS8wyh",
		"gf": "_2S6C39D4wNBuVSqzYM5Ldy",
		"gh": "_3vjGi6-umA-RzwxRFaTfNN",
		"gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
		"gl": "_1OTvyS4D4UOkymKuDLxUdx",
		"gm": "_3-0gezNOVCHKzaLYGUySo2",
		"gn": "_8f6uadrEfnS9IX8DEIpKO",
		"gp": "_36yEj9UcEbZcI0WJvgmk0B",
		"gq": "xHX18x9xk7PhDBlgsvnad",
		"gr": "HTk_eFej1VrCiBuKBIfLT",
		"gt": "hgmUbzxaHNZNL6frPhPeb",
		"gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
		"gw": "_36JwaXqhh4gBrIvAy4c1KO",
		"gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
		"hk": "_1mT74O5OVtonPLmYnVVOu7",
		"hn": "_1ze0KI-TYxTrDcXlMOu24s",
		"hr": "ZIDUSRfcbDCZTyhqWGPob",
		"ht": "Y65Ad5pf3z7ufcknP0vhk",
		"hu": "_3EHKICvcensXt5hEu8Nkfs",
		"id": "_3oZE8uvxIFK7M9DCEtsSCD",
		"ie": "_2RNmpg94YYioQp2fWyz_xn",
		"il": "_2Mq_no7KYxPp2NSLGS1Tcs",
		"in": "_1UlEZ269GihRa58c5mCEBN",
		"io": "_3ovelrc7S_DdmXxL-8uuwk",
		"iq": "_3VSlK6DYHrBgKbkE2Rng2N",
		"ir": "NRX2sFBmuPSJ9EOigyuEP",
		"is": "_25HaTNE7x74CJO9S1mnm4I",
		"it": "_1-LmlhbrcpKN-xjESmR_sO",
		"jm": "VsvDBply-4FtMoJhi8Cvu",
		"jo": "yEE3hbkzWK8CSCrCJibCo",
		"jp": "_3oxjjz1uD2cX2QsoSToLgz",
		"ke": "_1ksOT6KMPd99EWuWCXPga_",
		"kg": "_2CMnR3yv5DGwDc8p3uoOjp",
		"kh": "_927b1QnaSWnN35i3bVewJ",
		"ki": "_2CuDp55lqYTpFp68D4IWep",
		"km": "_3tvMTeZYZMzBB9bGn9lV9E",
		"kn": "_6kbCvwc22pJX0tNv3HToQ",
		"kp": "_3tIPOe5PNrHH-bgCGaZTJj",
		"kr": "_2653rpVUuy3ETaw1mogdnF",
		"kw": "_1SKg_lTe0ShbPSOl44eKjp",
		"ky": "tgj8SOv7bYoF7qfbbQWNG",
		"kz": "bchn50J152EdQa0zf3k5u",
		"la": "mu9oycLgpKX8_yLLkR5b9",
		"lb": "_2TcAFbagIrNyc6mgzRVNW0",
		"lc": "_2IFItnUNT-albvpN-ksxd2",
		"li": "_3_E6nQspv6zJQLQI24puaS",
		"lk": "_2M2wq3qQhGeUegbBTs7ilH",
		"lr": "L4o4xOg0s6QbasyIRPgyF",
		"ls": "LhBB6SRin61WSFtUwaEfe",
		"lt": "ITDUphrnMkKItKGMVHZf8",
		"lu": "_1mVW30sc4i-1M8tDPCQlL",
		"lv": "_3rq6vE2IagAsGI6iESAcJq",
		"ly": "_3se_Nzm1WQrEN3VZYiJJrv",
		"ma": "_fSDiNxp_jjfqkQcWffDM",
		"mc": "_2hRTRZeBtDGN4mNeWBZVgB",
		"md": "_26jDl0skadEwmUYDGmEzST",
		"me": "_388lJj_7sQdyd9HL7pMrar",
		"mg": "_3aFoqVWcvG3p47Vwa6UuoE",
		"mh": "_1YHi6OtXmKfP15ZNbwYGgy",
		"mk": "_9QVyhHcp8yH762J8fWXhC",
		"ml": "yYD99PoyhgFI4912_qoyJ",
		"mm": "URzk8-j7LcySpGUMJf_Qk",
		"mn": "_1J-lktQUTK0rydBz3foJGF",
		"mo": "_1sbL0zhHof-KbfGWu2qjqF",
		"mp": "_1tJjJlSjRw5AnqcXXmGwCI",
		"mq": "fHob9sxaJrTuqSc0xL744",
		"mr": "t-Bmj7a31aA-IwcRcL0ua",
		"ms": "_2xyT54DQP62zWDySH7-Kdy",
		"mt": "_1Ul_OlGODc8S0QplVq94PV",
		"mu": "_1yIBERRJqnV33pTq2VpKRc",
		"mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
		"mw": "_3i8n-5-htdGNJLgn96O21",
		"mx": "_16-6zoyiVzSGB1O72cUTzV",
		"my": "_3W2P0D9eTN4BQoOcThOsaM",
		"mz": "wJ8icX7Asp3dSImkXOdTM",
		"na": "_1qt_F94mybbX5kr0ArtN-Z",
		"nc": "h82AMIuCGdKf69Hc_nM6D",
		"ne": "_2mVa5nGsijzD93WRl8dk64",
		"nf": "_3XQ9oUH_84SsdZLjpVRuqT",
		"ng": "_1uyyH1GZjsEk3YpaUSmmG6",
		"ni": "_22_3H6UeFo26o3fSavtQaX",
		"nl": "_93asfBYgR8C7bEDucZO8l",
		"bq": "_37A1nwIz7Z3obwUjmliw4s",
		"no": "_2-sVmkWiLn_ogTikc0c0Eg",
		"np": "_1PqZSwf5cuMNmbE7bpKe67",
		"nr": "_9q5Rg9Xn0G2buivFSGySP",
		"nu": "RLhVdyjL9Cex8ekaJqirU",
		"nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
		"om": "_9mZYNhgBLiQg-j1FeVprJ",
		"pa": "_3S7TrzxJIEYVghUMVHB6E7",
		"pe": "_3V5sP7VvdGOFqApj7POYl2",
		"pf": "_1YzdrkyHO-eCcEFF-hjZl7",
		"pg": "ddWAanlQJPlB0QDWO6dAF",
		"ph": "_2TGbmCcqHlJFCssz78MxOs",
		"pk": "_2JerTABYGCUN8FLjpnDzKy",
		"pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
		"pm": "_29Hoo7EsoSHtvRFvlVg2cD",
		"pr": "_3_pkwz60KLoYcbKwaRvIsS",
		"ps": "_3jenITZ_yUYS7kU1HwFEHj",
		"pt": "_1vz8ABWy5Yd43_JhaTWq9u",
		"pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
		"py": "_1_W41pJLcGMRhLdU997clv",
		"qa": "Z0tjAakoNSOs14KuenmRi",
		"re": "_3k5KF4jzE7HUitQw9MQKnp",
		"ro": "_2b8XhT3-7NgjAC8gJJkpis",
		"rs": "_2MUJr9MQbiKRTd_g0TaRQr",
		"ru": "HjzPW2CxxNMSGZw1ugFW7",
		"rw": "_23TGIOoPmB9QYqIPG6W3tA",
		"sa": "_34WM8rSonfayW0vJ3koqJS",
		"sb": "_3486rZNsCjvTmIoHbjK8mG",
		"sc": "_3meAM_iQCU6MyfPQJTN3yl",
		"sd": "_2x6XeHNF__4s9VVfFXCJhO",
		"se": "_66VDclGQXxpdUR8uE3ZFa",
		"sg": "tv3I_hfLcUJ_8i9ewVcUz",
		"sh": "_1syDbbhbumwMwwD7Dwkb1V",
		"si": "_3jsffwJjGr2sMEofSTTGkG",
		"sk": "_1EpYAUcQLCqbYB48Auixqb",
		"sl": "_3STJQv9nY5mol4cW82D2ci",
		"sm": "_9aTR-AZMTaYHRmDVAyFTM",
		"sn": "_3mTatYTWeJQQACfV7xzRhi",
		"so": "_1LnWon2slwLMqAHzhkRT4c",
		"sr": "_1GSedFwSsf5isgOi3p0x6U",
		"ss": "_1sq99LOjKKgery3luOXOFn",
		"st": "_1O6vYx_NaXFBAs1qYxgwaB",
		"sv": "_10D9RGnRzUv14bYWQaC23c",
		"sx": "KonDEEzH2JzIWsVUBzFdY",
		"sy": "_1ZAnqGYeixOJVFwwt6hNIo",
		"sz": "_3FeOFkec3sXYbvQhWDdIM7",
		"tc": "_1FZvldKEV-vz12TyyNfEf",
		"td": "_31fysfDRtTWVKcX_UjX0ty",
		"tg": "H60Kyr6MsF6nvRz5l7EfN",
		"th": "SHZkbUz1c_H_zDOfxLc4",
		"tj": "_2MRI0fA4OLgepXVooYMu9H",
		"tk": "_1W959S9LHLCKhz3xi4MpHe",
		"tl": "_1lMF_0nwQXTyBRRzRj7hBF",
		"tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
		"tn": "_2MeGi_bqLVuCaRtJzs3QqA",
		"to": "_3egwC_50WENVPaap_uwXr8",
		"tr": "_2KiPy3o6m7JCKQWPY2fI1d",
		"tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
		"tv": "_2D9VWSmHkhgNemAaIKF_cp",
		"tw": "_2J7nVAh1zEa7kV5Ba51CLV",
		"tz": "_2acF96LLqMjlbfMX1oiAjT",
		"ua": "_2rr3Tyr8dP6vDvE0khEDKT",
		"ug": "D7gjzKmlr78rNWXXw90np",
		"us": "_1l5RtWI_acgLVeCd5fjgHG",
		"uy": "_1zX6hTsIa2TtL6dgR47eQ9",
		"uz": "_29NUL3VtwK1_RWUyPsY2ei",
		"va": "_39kTgRBkhqqGVLUTJvK_67",
		"vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
		"ve": "_3Lk2Svkm2NTAVpUfiY_No5",
		"vg": "_3SiYuGrNzW9DNkXwTZugyj",
		"vi": "_2BiiERObu5xcE6P1SZxLdj",
		"vn": "_3kSg6iW0KLoUpJ0g70fckK",
		"vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
		"wf": "Arz0xEqJcbKbLmPz_tXTS",
		"ws": "_3oTaxcmbTriEd90-cXNqD8",
		"ye": "gxtmCiQO2ao4JTQXuRUIJ",
		"za": "_25HyrYKmQQAteF_LwADnIt",
		"zm": "Kui2u7hZHcNBqlzbqR-vQ",
		"zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
		"hide": "_2kO_U0LXcg71jJA6RSia2e",
		"v-hide": "_2HBc009zwTsSlkh8P8tH10",
		"invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
		"flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
		"open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
		"selected-flag": "_10c169vRt8V92_nQ_S0KtR",
		"flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
		"arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
		"up": "_2ykRnfq4f2nlmZGfvzrn92",
		"country-list": "UlTusogWL2urjgGgLNpcD",
		"divider": "_2zMaTbM3nSdE07wOs7YYRt",
		"country": "uL848pHFWhb_G94Ak-KX5",
		"dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
		"highlight": "BLa_2aA2PkYD2PsO2fvNC",
		"country-name": "_3ih_ovRiGmAkpjxuz63nhk",
		"uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
		"fileUpload": "_2WENukerx3mNXkTyu0UXQf",
		"uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
		"upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
		"blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
		"feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
		"errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
		"gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
		"red": "_3wj0AXV9gqX9YG1nk-2u9J",
		"green": "_3KPVxc3su8ewtuKZgu8TGv",
		"orange": "_3cLlE5QI9XJwY6e7jO5bLg",
		"capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
		"importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
		"importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
		"importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
		"icon": "_12rnwIUewKT2PdtWMnNyD5",
		"importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
		"broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
		"broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
		"btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
		"textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
		"spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
		"pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
		"lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
		"removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
		"inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
		"popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
		"dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
		"dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
		"applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
		"filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
		"btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
		"assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
		"pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
		"assTab": "y4LW63OuadI0JWTQBnbJ1",
		"heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
		"radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
		"wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
		"leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
		"rightBox": "DP21PoKxwKk_vJyOuQTcr",
		"gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
		"actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
		"gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
		"actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
		"gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
		"morePref": "JBm94eKPIFI8vfiroATJ6",
		"tile": "_1Ssp2zTovh7AwJWuRkgnge",
		"tileItems": "_3cDqgy8AedDYzhy8Euosis",
		"tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
		"tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
		"category": "_2Ow56TBY2Y24yY5SjVRU4l",
		"innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
		"maxScore": "_3uL97t2vemfuAs83cAFhjE",
		"maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
		"scored": "_12gGWK_s69JBGzOAX7ClkT",
		"scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
		"remTile": "_3vgBsvWRGVVRwIEDn1TquO",
		"tileBody": "dF1WC_PeNjG87K2XGMIcS",
		"tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
		"gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
		"gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
		"assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
		"blue": "K7acjAQMroOGGtUqqojYy",
		"yellow": "G7N-PGOIbGO_ZkaqBu2mx",
		"txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
		"txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
		"txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
		"txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
		"txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
		"txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
		"addTile": "lCw_kxhsAPcuM3yFAqvpF",
		"addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
		"addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
		"commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
		"totalScore": "FDG4LAia-7JDDtxb7R4Kb",
		"totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
		"textBox": "_13VdIFmMegxz_eR8VIXN_M",
		"totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
		"totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
		"resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
		"resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
		"resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
		"headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
		"scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
		"resultBody": "N6kKlySaRGbRcB4bBmpZ0",
		"resGroup": "_2byM-_1N3yjHb2dpmlikdf",
		"resTile": "DZeuj4DKkdAPKCgYd76RK",
		"resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
		"resRating": "R7j9mxFZmdmLgC7bPXpyN",
		"txtSize": "_977ldMQMMiHQ0YG_61T3g",
		"txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
		"resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
		"resInput": "_14gsxA36f-uYOfxGDvr_gi",
		"activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
		"feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
		"fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
		"feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
		"profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
		"profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
		"profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
		"name": "_25-6SxUiv8zhOMEVTRrg8w",
		"commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
		"addpdng": "_6rQH8tivz8ELIWszpbahs",
		"good": "_3lOxcxDfxhPcuhLBJHo4Ur",
		"vGood": "l_IAfocpDxfvpU316U0EI",
		"fair": "_3I3YapUnBVxgs-ZsGf3Poh",
		"poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _Loading = __webpack_require__(142);
	
	var _Loading2 = _interopRequireDefault(_Loading);
	
	var _DataTable = {
		"pagination": "TYVzvPvnVhHwh2cU0hA4A",
		"current": "g_uiyu9x1FtjxSP7SG8ZE",
		"table": "MT1wq7GO1NFQY49F82EQ7",
		"headerRow": "_25DfSs-Nwm51luhPR-2j-T",
		"col": "_2AskW4twyvDT4DurTsqR8L",
		"row": "_2WqrTHsuiMmLB0IEBY1vgS",
		"responsivetable": "_31nKaPaXXLrfOOGeGa9GTs",
		"whiteCard": "ryCbWg89OoNEh8LdzqXon",
		"noDataBox": "XRJX9QsZKouxzWnXKoUUp",
		"infoTxt": "_1NZmMey1sQV0aCxxqVtPDu",
		"mainSpinBlock": "_3BEgVxQ9PDQKlEjIHevKr5",
		"innerSpinBlock": "_2Ot9A0ys89IJntrdA5WyyE"
	};
	
	var _DataTable2 = _interopRequireDefault(_DataTable);
	
	var _WorkDashboardReloadReducer = __webpack_require__(154);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	//All changes - Prateek
	
	var _ref = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref2 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'topics_list'
	}));
	
	var _ref3 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref4 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref5 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_time_limitations'
	}));
	
	var _ref6 = _jsx(_reactIntl.FormattedMessage, {
		id: 'Marks'
	});
	
	var _ref7 = _jsx(_reactIntl.FormattedMessage, {
		id: 'grade'
	});
	
	var _ref8 = _jsx(_reactIntl.FormattedMessage, {
		id: 'questionnaire_result'
	});
	
	var _ref9 = _jsx('span', {}, void 0, '%');
	
	var _ref10 = _jsx(_reactIntl.FormattedMessage, {
		id: 'total_marks'
	});
	
	var _ref11 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'choose_question_answers'
	}));
	
	var _ref12 = _jsx(_reactIntl.FormattedMessage, {
		id: 'start_date'
	});
	
	var _ref13 = _jsx(_reactIntl.FormattedMessage, {
		id: 'end_date'
	});
	
	var _ref14 = _jsx(_reactIntl.FormattedMessage, {
		id: 'Marks'
	});
	
	var _ref15 = _jsx(_reactIntl.FormattedMessage, {
		id: 'grade'
	});
	
	var _ref16 = _jsx(_reactIntl.FormattedMessage, {
		id: 'questionnaire_result'
	});
	
	var _ref17 = _jsx('span', {}, void 0, '%');
	
	var _ref18 = _jsx(_reactIntl.FormattedMessage, {
		id: 'total_marks'
	});
	
	var _ref19 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'choose_question_answers'
	}));
	
	var _ref20 = _jsx('h2', {}, void 0, _jsx(_reactFontawesome2.default, {
		name: 'frown-o'
	}));
	
	var _ref21 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_questions_yet'
	}));
	
	var _ref22 = _jsx('h2', {}, void 0, _jsx(_reactFontawesome2.default, {
		name: 'frown-o'
	}));
	
	var _ref23 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'not_attempted'
	}));
	
	var _ref24 = _jsx(_reactFontawesome2.default, {
		name: 'fa-paper-plane'
	});
	
	var _ref25 = _jsx(_reactIntl.FormattedMessage, {
		id: 'submit'
	});
	
	var _ref26 = _jsx('h2', {}, void 0, _jsx(_reactFontawesome2.default, {
		name: 'frown-o'
	}));
	
	var _ref27 = _jsx(_Loading2.default, {
		loadType: 'list'
	});
	
	var ConductQuestion = function (_Component) {
		_inherits(ConductQuestion, _Component);
	
		function ConductQuestion(props) {
			_classCallCheck(this, ConductQuestion);
	
			var _this = _possibleConstructorReturn(this, (ConductQuestion.__proto__ || Object.getPrototypeOf(ConductQuestion)).call(this, props));
	
			_this.setServerResponse = function (res) {
				if (res.status) {
					_this.setState({
						loading: false
					});
				} else {
					if (res.error[0] == 'Questionnaire not yet started') {
						_this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ topicContent: true, conductQuestion: false, questionnaireId: '', questionnaireName: '' }));
					} else {
						_this.setState({ error: res.error[0] == 'Result not found' ? 'not_attempted' : 'no_data_yet' });
					}
				}
			};
	
			_this.submitAnswers = function () {
				var questionnaireId = _this.props.workDashboardData.questionnaireId;
				var topicId = _this.props.workDashboardData.tid;
				var roomId = _this.props.roomId;
				var uid = _this.props.workDashboardData.uid;
				var response = _this.setResponse;
				var self = _this;
	
				alertify.confirm(_this.props.intl.messages.warning, _this.props.intl.messages.confirm_submit_alert, function (result) {
					if (result) {
						self.setState({
							submitted: true,
							loading: true,
							error: ''
						});
						var obj = {
							questionnaireId: questionnaireId,
							submittedBy: uid,
							topicId: topicId,
							roomId: roomId,
							answers: self.state.answers,
							totalMarks: self.state.totalMarks
						};
						self.props.dispatch((0, _WorkDashboardActions.SaveAnswersRequest)(obj)).then(function (res) {
							return self.setResponse(res);
						});
					}
				}, function () {}).setting('labels', { 'ok': _this.props.intl.messages.ok, 'cancel': _this.props.intl.messages.cancel });
			};
	
			_this.state = {
				answers: {},
				submitted: false,
				totalMarks: 0,
				loading: true,
				error: ''
			};
			return _this;
		}
	
		_createClass(ConductQuestion, [{
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				var _this2 = this;
	
				if (this.props.workDashboardReload.conductQuestion != nextProps.workDashboardReload.conductQuestion) {
					var _questionnaireId = this.props.workDashboardData.questionnaireId;
					var topicId = this.props.workDashboardData.tid;
					var uid = this.props.workDashboardData.uid;
					this.props.dispatch((0, _WorkDashboardActions.getQuestions)({ questionnaireId: _questionnaireId, topicId: topicId })).then(function (res) {
						return _this2.setServerResponse(res);
					});
				}
	
				var questionData = nextProps.workDashboardData && nextProps.workDashboardData.questionsData && nextProps.workDashboardData.questionsData.questions && nextProps.workDashboardData.questionsData.questions != null ? nextProps.workDashboardData.questionsData.questions : [];
				var submittedBy = nextProps.workDashboardData.submittedData ? nextProps.workDashboardData.submittedData.submittedBy : null;
				var submittedData = nextProps.workDashboardData.submittedData;
				var answerData = nextProps.workDashboardData.submittedData ? nextProps.workDashboardData.submittedData.answers : null;
	
				if (_.isEmpty(submittedData) && submittedBy == undefined || submittedData == undefined && submittedBy == null && _.isEmpty(questionData)) {
					this.setState({
						submitted: true
					});
				}
				if (submittedData && submittedData.submittedBy) {
					this.setState({
						submitted: true
					});
				}
				if (submittedData == undefined && submittedBy == null && _.isEmpty(questionData) == false) {
					this.setState({
						submitted: false
					});
				}
	
				var questionnaireId = this.props.workDashboardData.questionnaireId;
				var topicData = this.props.workDashboardData.topicContentDataDetails;
				var questionnaireIndex = _.findIndex(topicData.questionnaire, function (o) {
					return o.questionnaireId._id == questionnaireId;
				});
	
				var marks = 0;
				if (questionData != undefined) {
					questionData.forEach(function (eachQuestion) {
						if (eachQuestion.marks != undefined) {
							marks += eachQuestion.marks;
						}
					});
				}
				this.setState({
					totalMarks: marks
				});
			}
		}, {
			key: 'componentDidMount',
			value: function componentDidMount() {
				var _this3 = this;
	
				var questionnaireId = this.props.workDashboardData.questionnaireId;
				var topicId = this.props.workDashboardData.tid;
				var uid = this.props.workDashboardData.uid;
				this.props.dispatch((0, _WorkDashboardActions.getQuestions)({ questionnaireId: questionnaireId, topicId: topicId })).then(function (res) {
					return _this3.setServerResponse(res);
				});
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this.props.dispatch((0, _UserDashboardActions.setDashboard)({ questionData: '', answerData: '', message: '' }));
			}
		}, {
			key: 'handleTopicList',
			value: function handleTopicList() {
				this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ /*topicContent: false,*/topicList: true, conductQuestion: false, questionData: null, questionnaireId: '', questionnaireName: '' }));
				this.props.topicListCallback();
			}
		}, {
			key: 'handleTopicName',
			value: function handleTopicName() {
				this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ topicContent: true, conductQuestion: false, questionData: null, questionnaireId: '', questionnaireName: '' }));
				this.props.contantCallback(this.props.workDashboardData.topicContentDataDetails);
			}
		}, {
			key: 'handleRadioAnswer',
			value: function handleRadioAnswer(data, e) {
				var oldState = this.state.answers;
				oldState[data._id] = [];
				oldState[data._id].push(e.target.value);
				this.setState({ answers: oldState });
			}
		}, {
			key: 'handleCheckboxAnswer',
			value: function handleCheckboxAnswer(data, e) {
				var value = e.target.value.split(',')[0];
				var index = e.target.value.split(',')[1];
				var oldState = this.state.answers;
	
				if (oldState[data._id] !== undefined) {
					if (_.includes(oldState[data._id], value)) {
						oldState[data._id].pop(value);
					} else {
						oldState[data._id].splice(index, 0, value);
					}
				} else {
					oldState[data._id] = [];
					oldState[data._id].push(value);
				}
				this.setState({ answers: oldState });
			}
		}, {
			key: 'setResponse',
			value: function setResponse(res) {
				var _this4 = this;
	
				var questionnaireId = this.props.workDashboardData.questionnaireId;
				var topicId = this.props.workDashboardData.tid;
				this.props.dispatch((0, _WorkDashboardActions.getQuestions)({ questionnaireId: questionnaireId, topicId: topicId })).then(function (res) {
					return _this4.setServerResponse(res);
				});
				if (res.status) {
					if (res.status && res.message == 'Your answers will not be considered as questionnaire end time has been completed') {
						alertify.alert(res.message);
					}
					this.setState({
						loading: false
					});
				} else {
					this.setState({
						error: 'no_data_yet'
					});
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _this5 = this;
	
				var cls_marksInlineCss = _Dashboard2.default.marksCss + ' pull-right';
				var cls_resultsUserName = _Dashboard2.default.resultsUserName + ' text-center';
	
				if (this.props.workDashboardData.questionsData) {
					return _jsx('div', {}, void 0, _jsx('div', {
						className: _Dashboard2.default.whiteCard
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.breadCrum
					}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
						id: 'roomName'
					}, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
						id: 'TopicList',
						onClick: this.handleTopicList.bind(this)
					}, void 0, _ref2)), _ref3, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
						id: 'TopicName',
						onClick: this.handleTopicName.bind(this)
					}, void 0, _jsx('span', {}, void 0, this.props.workDashboardData && this.props.workDashboardData.topicContentDataDetails && this.props.workDashboardData.topicContentDataDetails.topicName ? this.props.workDashboardData.topicContentDataDetails.topicName : null))), _ref4, _jsx('li', {}, void 0, _jsx('span', {}, void 0, this.props.workDashboardData.questionnaireName)))), !this.state.loading ? _jsx('div', {}, void 0, this.props.workDashboardData.questionsData.openFrom == undefined && this.props.workDashboardData.questionsData.closeFrom == undefined ? _jsx('div', {
						className: _Dashboard2.default.topicViewheader
					}, void 0, _jsx('h3', {
						className: _Dashboard2.default.mainHeadingTxt
					}, void 0, this.props.workDashboardData.questionsData.questionnaireName), _ref5, _jsx('div', {
						className: _Dashboard2.default.studentHeaderMarksInfo
					}, void 0, this.state.totalMarks != 0 ? _jsx(_reactBootstrap.Row, {}, void 0, !_.isEmpty(this.props.workDashboardData.submittedData) && this.props.workDashboardData.submittedData.result != undefined ? _jsx('div', {}, void 0, _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.resultUserDetails
					}, void 0, _jsx('h2', {
						className: cls_resultsUserName
					}, void 0, _ref6), _jsx('div', {
						className: _Dashboard2.default.gradeVal
					}, void 0, _jsx('h2', {}, void 0, _jsx('span', {}, void 0, this.props.workDashboardData.submittedData.obtainedMarks), ' / ', _jsx('span', {
						className: _Dashboard2.default.optainMarks
					}, void 0, this.props.workDashboardData.submittedData.totalMarks))))), _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.resultUserDetails
					}, void 0, _jsx('h2', {
						className: cls_resultsUserName
					}, void 0, _ref7), _jsx('div', {
						className: _Dashboard2.default.gradeVal
					}, void 0, _jsx('h2', {}, void 0, this.props.workDashboardData.submittedData.grade)))), _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.resultUserDetails
					}, void 0, _jsx('h2', {
						className: cls_resultsUserName
					}, void 0, _ref8), _jsx('div', {
						className: _Dashboard2.default.precentageVal
					}, void 0, _jsx('h2', {}, void 0, this.props.workDashboardData.submittedData.questionnairePercentage, _ref9)), _jsx('div', {
						className: _Dashboard2.default.resultBg
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.resultTxt
					}, void 0, this.props.workDashboardData.submittedData.result))))) : _jsx('div', {}, void 0, _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.resultUserDetails
					}, void 0, _jsx('h2', {
						className: cls_resultsUserName
					}, void 0, _ref10), _jsx('div', {
						className: _Dashboard2.default.gradeVal
					}, void 0, _jsx('h2', {}, void 0, this.state.totalMarks)))))) : null), _.isEmpty(this.props.workDashboardData.submittedData) ? _ref11 : null) : _jsx('div', {
						className: _Dashboard2.default.topicViewheader
					}, void 0, _jsx('h1', {
						className: _Dashboard2.default.mainHeadingTxt
					}, void 0, this.props.workDashboardData.questionsData.questionnaireName), _jsx('p', {}, void 0, _ref12, ' : ', (0, _moment2.default)(this.props.workDashboardData.questionsData.openFrom).format('DD/MM/YYYY hh:mm A')), _jsx('p', {}, void 0, _ref13, ' : ', (0, _moment2.default)(this.props.workDashboardData.questionsData.closeFrom).format('DD/MM/YYYY hh:mm A')), _jsx('div', {
						className: _Dashboard2.default.studentHeaderMarksInfo
					}, void 0, this.state.totalMarks != 0 ? _jsx(_reactBootstrap.Row, {}, void 0, !_.isEmpty(this.props.workDashboardData.submittedData) && this.props.workDashboardData.submittedData.result != undefined ? _jsx('div', {}, void 0, _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.resultUserDetails
					}, void 0, _jsx('h2', {
						className: cls_resultsUserName
					}, void 0, _ref14), _jsx('div', {
						className: _Dashboard2.default.gradeVal
					}, void 0, _jsx('h2', {}, void 0, _jsx('span', {}, void 0, this.props.workDashboardData.submittedData.obtainedMarks), ' / ', _jsx('span', {
						className: _Dashboard2.default.optainMarks
					}, void 0, this.props.workDashboardData.submittedData.totalMarks))))), _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.resultUserDetails
					}, void 0, _jsx('h2', {
						className: cls_resultsUserName
					}, void 0, _ref15), _jsx('div', {
						className: _Dashboard2.default.gradeVal
					}, void 0, _jsx('h2', {}, void 0, this.props.workDashboardData.submittedData.grade)))), _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.resultUserDetails
					}, void 0, _jsx('h2', {
						className: cls_resultsUserName
					}, void 0, _ref16), _jsx('div', {
						className: _Dashboard2.default.precentageVal
					}, void 0, _jsx('h2', {}, void 0, this.props.workDashboardData.submittedData.questionnairePercentage, _ref17)), _jsx('div', {
						className: _Dashboard2.default.resultBg
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.resultTxt
					}, void 0, this.props.workDashboardData.submittedData.result))))) : _jsx('div', {}, void 0, _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.resultUserDetails
					}, void 0, _jsx('h2', {
						className: cls_resultsUserName
					}, void 0, _ref18), _jsx('div', {
						className: _Dashboard2.default.gradeVal
					}, void 0, _jsx('h2', {}, void 0, this.state.totalMarks)))))) : null), _.isEmpty(this.props.workDashboardData.submittedData) ? _ref19 : null), _jsx('div', {
						className: _Dashboard2.default.topicsListBody
					}, void 0, _jsx('ul', {}, void 0, this.props.workDashboardData.questionsData.questions ? this.props.workDashboardData.questionsData.questions.length > 0 ? !_.isEmpty(this.props.workDashboardData.submittedData) ? this.props.workDashboardData.questionsData.questions.map(function (data, index) {
						var indexQuestion = index;
						if (data.questionType == "Radio") {
							return _jsx(_MultipleChoice2.default, {
								data: data,
								wrong: _this5.props.workDashboardData.submittedData.wrongAns,
								correct: _this5.props.workDashboardData.submittedData.correctAns,
								showResult: _this5.props.workDashboardData.submittedData.result
							}, indexQuestion);
						} else if (data.questionType == "Checkbox") {
							return _jsx(_MultipleResponsive2.default, {
								data: data,
								wrong: _this5.props.workDashboardData.submittedData.wrongAns,
								correct: _this5.props.workDashboardData.submittedData.correctAns,
								showResult: _this5.props.workDashboardData.submittedData.result
							}, indexQuestion);
						} else if (data.questionType == "TF") {
							return _jsx(_TrueFalse2.default, {
								data: data,
								wrong: _this5.props.workDashboardData.submittedData.wrongAns,
								correct: _this5.props.workDashboardData.submittedData.correctAns,
								showResult: _this5.props.workDashboardData.submittedData.result
							}, indexQuestion);
						} else if (data.questionType == "Subjective") {
							// return <Subjective data = {data} key={indexQuestion} answer={this.handleRadioAnswer.bind(this, data)} />
						}
					}) : this.props.workDashboardData.questionsData.questions.map(function (data, index) {
						var indexQuestion = index;
						if (data.questionType == "Radio") {
							return _jsx(_MultipleChoice2.default, {
								data: data,
								checked: _this5.state.answers,
								answer: _this5.handleRadioAnswer.bind(_this5, data)
							}, indexQuestion);
						} else if (data.questionType == "Checkbox") {
							return _jsx(_MultipleResponsive2.default, {
								data: data,
								answer: _this5.handleCheckboxAnswer.bind(_this5, data)
							}, indexQuestion);
						} else if (data.questionType == "TF") {
							return _jsx(_TrueFalse2.default, {
								data: data,
								checked: _this5.state.answers,
								answer: _this5.handleRadioAnswer.bind(_this5, data)
							}, indexQuestion);
						} else if (data.questionType == "Subjective") {
							return _jsx(_Subjective2.default, {
								data: data,
								answer: _this5.handleRadioAnswer.bind(_this5, data)
							}, indexQuestion);
						}
					}) : _jsx('div', {
						className: _DataTable2.default.noDataBox
					}, void 0, _ref20, _ref21) : _jsx('div', {
						className: _DataTable2.default.noDataBox
					}, void 0, _ref22, _ref23)), this.state.submitted != true ? _jsx('div', {
						className: _Dashboard2.default.submitBtnBlock
					}, void 0, _jsx('div', {
						className: 'pull-right'
					}, void 0, _jsx('button', {
						id: 'submitAnswers',
						type: 'submit',
						className: _Dashboard2.default.btnApplyAll,
						onClick: this.submitAnswers
					}, void 0, _ref24, ' ', _ref25))) : null)) : this.state.error != '' ? _jsx('div', {
						className: _DataTable2.default.noDataBox
					}, void 0, _ref26, _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
						id: this.state.error
					}))) : _ref27));
				} else {
					return null;
				}
			}
		}]);
	
		return ConductQuestion;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			loggedInData: (0, _LoginReducer.loggedInData)(state),
			dashboardData: (0, _UserDashboardReducer.dashboardData)(state),
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
			intl: state.intl,
			workDashboardReload: (0, _WorkDashboardReloadReducer.workDashboardReload)(state)
		};
	}
	
	ConductQuestion.contextTypes = {};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(ConductQuestion);

/***/ },

/***/ 423:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ControlVideo = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrapDatetimepicker = __webpack_require__(86);
	
	var _reactBootstrapDatetimepicker2 = _interopRequireDefault(_reactBootstrapDatetimepicker);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Modal = __webpack_require__(52);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
	// import RTChart from 'react-rt-chart';
	
	//var LineChart = require("react-chartjs").Line;
	
	var _ref = _jsx('h3', {}, void 0, 'Control Volume');
	
	var _ref2 = _jsx('span', {}, void 0, _jsx('img', {
	  src: '/images/black-icons/novolume.png'
	}));
	
	var _ref3 = _jsx('input', {
	  id: 'range',
	  type: 'range'
	});
	
	var _ref4 = _jsx('span', {}, void 0, _jsx('img', {
	  src: '/images/black-icons/highvolume.png'
	}));
	
	var _ref5 = _jsx('h3', {}, void 0, 'Mute / Unmute');
	
	var _ref6 = _jsx('span', {}, void 0, _jsx('img', {
	  src: '/images/black-icons/mute.png'
	}));
	
	var _ref7 = _jsx('span', {}, void 0, _jsx('img', {
	  src: '/images/black-icons/unmute.png'
	}));
	
	var _ref8 = _jsx('h3', {}, void 0, 'Remove this user');
	
	var _ref9 = _jsx('img', {
	  src: '/images/profile-pics/beautiful.jpg'
	});
	
	var _ref10 = _jsx('li', {}, void 0, _jsx('button', {
	  id: 'removeUser',
	  className: 'btn btn-sm btn-danger'
	}, void 0, 'Remove User'));
	
	var _ref11 = _jsx(_reactFontawesome2.default, {
	  name: 'caret-up'
	});
	
	var _ref12 = _jsx(_reactFontawesome2.default, {
	  name: 'caret-down'
	});
	
	var _ref13 = _jsx(_reactFontawesome2.default, {
	  name: 'caret-up'
	});
	
	var _ref14 = _jsx(_reactFontawesome2.default, {
	  name: 'caret-down'
	});
	
	var _ref15 = _jsx('div', {});
	
	var ControlVideo = exports.ControlVideo = function (_Component) {
	  _inherits(ControlVideo, _Component);
	
	  function ControlVideo(props) {
	    _classCallCheck(this, ControlVideo);
	
	    var _this = _possibleConstructorReturn(this, (ControlVideo.__proto__ || Object.getPrototypeOf(ControlVideo)).call(this, props));
	
	    _this.execute = true;
	    _this.bytessent = 0;
	    _this.bytespersec = 0;
	    Date.prototype.timeNow = function () {
	      return (this.getHours() < 10 ? "0" : "") + this.getHours() + ":" + (this.getMinutes() < 10 ? "0" : "") + this.getMinutes() + ":" + (this.getSeconds() < 10 ? "0" : "") + this.getSeconds();
	    };
	
	    _this.state = {
	      showStats: 0
	    };
	    return _this;
	  }
	
	  _createClass(ControlVideo, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {}
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {}
	    // if(nextProps.showModal){
	    //   if(this.props.stream && this.props.stream.showing && this.execute){
	    //     this.execute = false;
	    //     this.getStats(this.props.stream);
	    //   }  
	    // }
	
	
	    // getStats(stream){
	    //   // console.log("Stats", stream);
	    //   this.props.confObject.getStreamReport(stream, function(obj, status){
	    //     if(status){
	    //       ///Report Received
	    //       console.log("Stats", obj);
	    //     }else{
	    //       ///Error Received
	    //       console.log("ERROR STATS", obj);
	    //     }
	    //   });
	    // }
	
	  }, {
	    key: 'setStatPage',
	    value: function setStatPage(page) {
	      this.setState({ showStats: page });
	    }
	
	    //for schedule
	
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this.props.showModal) {
	        // console.log(this.props.stats);
	        var bytes = this.props.stats.ssrc_audio_send.bytes_sent;
	        var packets = this.props.stats.ssrc_audio_send.packets_sent;
	        var codec_name = this.props.stats.ssrc_audio_send.codec_name;
	        // console.log("Bytes and Packets", bytes, packets );
	        if (bytes > 0 && this.bytessent != bytes) {
	          this.bytespersec = bytes - this.bytessent;
	          this.bytessent = bytes;
	        }
	
	        console.log("Bytes Sent ", this.bytespersec);
	        var chart = {
	          point: {
	            show: false
	          },
	          data: {
	            names: {
	              Bytes: 'KBytes'
	            }
	          },
	          axis: {
	            x: {
	              type: 'timeseries'
	            }
	          }
	        };
	        var flow = {
	          duration: 20000
	        };
	
	        var data = {
	          date: new Date() /*.timeNow()*/
	          , Bytes: this.bytespersec /*(bytes) ? (bytes/1024) : 0 ,*/
	          /*Packets: (packets) ? packets : 0,*/
	        };
	
	        var cls_chooseInput = _Dashboard2.default.chooseInput + ' ' + _Dashboard2.default.chooseInput.radio;
	        var cls_inputMargin = _Dashboard2.default.inputMargin + ' ' + _Dashboard2.default.chooseInput + ' ' + _Dashboard2.default.chooseInput.radio;
	        var cls_deleteUser = _Dashboard2.default.removeUserUl + ' clearfix';
	        return _jsx(_reactBootstrap.Modal, {
	          show: this.props.showModal,
	          onHide: this.props.closeControl
	        }, void 0, _jsx(_Modal.Header, {
	          closeButton: true
	        }, void 0, _jsx(_Modal.Title, {
	          className: _Dashboard2.default.popHeadingAll
	        }, void 0, 'Control this video')), _jsx(_Modal.Body, {}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
	          md: 4
	        }, void 0, _jsx('div', {
	          className: _Dashboard2.default.currentVideoControllers
	        }, void 0, _jsx('div', {
	          className: _Dashboard2.default.popupCurrentVideo
	        }, void 0), _jsx('div', {
	          className: _Dashboard2.default.volumeControllerBlock
	        }, void 0, _ref, _jsx('div', {
	          className: _Dashboard2.default.contolItems
	        }, void 0, _ref2, _jsx('div', {
	          className: _Dashboard2.default.rangeBlock
	        }, void 0, _ref3), _ref4)), _jsx('div', {
	          className: _Dashboard2.default.volumeControllerBlock
	        }, void 0, _ref5, _jsx('div', {
	          className: _Dashboard2.default.contolItems
	        }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _ref6, _jsx('input', {
	          id: 'radioMute',
	          type: 'radio',
	          name: 'muteunmute',
	          className: cls_inputMargin
	        }), _ref7, _jsx('input', {
	          id: 'radioUnmute',
	          type: 'radio',
	          name: 'muteunmute',
	          className: cls_chooseInput
	        }))))), _jsx('div', {
	          className: _Dashboard2.default.volumeControllerBlock
	        }, void 0, _ref8, _jsx('div', {
	          className: _Dashboard2.default.contolItems
	        }, void 0, _jsx('div', {
	          className: _Dashboard2.default.removeUserBlock
	        }, void 0, _jsx('ul', {
	          className: 'clearfix'
	        }, void 0, _jsx('li', {}, void 0, _jsx('div', {
	          className: _Dashboard2.default.removeThisUser
	        }, void 0, _ref9)), _ref10)))))), _jsx(_reactBootstrap.Col, {
	          md: 8
	        }, void 0, _jsx('div', {
	          className: _Dashboard2.default.statsBlock
	        }, void 0, _jsx('div', {
	          className: _Dashboard2.default.statsHeader
	        }, void 0, _jsx('input', {
	          id: 'RadioAudioSent',
	          type: 'radio',
	          name: 'stats',
	          value: 'AudioSent',
	          defaultChecked: 'checked',
	          onClick: this.setStatPage.bind(this, 0)
	        }), ' ', _ref11, 'Audio \xA0', _jsx('input', {
	          id: 'RadioAudioRec',
	          type: 'radio',
	          name: 'stats',
	          value: 'AudioRec',
	          onClick: this.setStatPage.bind(this, 1)
	        }), ' ', _ref12, 'Audio \xA0', _jsx('input', {
	          id: 'RadioVideoSent',
	          type: 'radio',
	          name: 'stats',
	          value: 'VideoSent',
	          onClick: this.setStatPage.bind(this, 2)
	        }), ' ', _ref13, 'Video \xA0', _jsx('input', {
	          id: 'RadioVideoRec',
	          type: 'radio',
	          name: 'stats',
	          value: 'VideoRec',
	          onClick: this.setStatPage.bind(this, 3)
	        }), ' ', _ref14, 'Video \xA0'), this.state.showStats == 0 ? _jsx('div', {
	          className: _Dashboard2.default.statsBody
	        }, void 0, _jsx('p', {}, void 0, 'Codec: ', codec_name), _jsx('p', {}, void 0, 'Packets Sent ', packets)) : this.state.showStats == 1 ? _jsx('div', {
	          className: _Dashboard2.default.statsBody
	        }, void 0, 'Aduio Received') : this.state.showStats == 2 ? _jsx('div', {
	          className: _Dashboard2.default.statsBody
	        }, void 0, 'Video Sent') : this.state.showStats == 3 ? _jsx('div', {
	          className: _Dashboard2.default.statsBody
	        }, void 0, 'Video Received') : _jsx('div', {
	          className: _Dashboard2.default.statsBody
	        }, void 0, 'BW Stats'))))));
	      } else {
	        return _ref15;
	      }
	    }
	  }]);
	
	  return ControlVideo;
	}(_react.Component);
	
	ControlVideo.contextTypes = {
	  router: _react2.default.PropTypes.object
	};
	
	ControlVideo.defaultProps = { showModal: false };
	
	exports.default = (0, _reactIntl.injectIntl)(ControlVideo);
	
	//https://www.npmjs.com/package/react-rt-chart

/***/ },

/***/ 424:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HostControl = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Modal = __webpack_require__(52);
	
	var _ConfSettings = {
	  "contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
	  "attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
	  "groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
	  "indiChatFixed": "_121x6wkYY9bMxq2znilpes",
	  "settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
	  "openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
	  "openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
	  "openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
	  "onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
	  "onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
	  "tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
	  "tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
	  "tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
	  "modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
	  "modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
	  "modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
	  "block50": "_3KEUbD9sh-5efPnOe48KQu",
	  "nohover": "m7jTOV3afDX3KYXfpJDuW",
	  "fileUpload": "_1Ta80WwlyVY6khGgoelZff",
	  "modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
	  "active": "_3wgRcJQgpFwV1Tze6eaYAL",
	  "modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
	  "noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
	  "modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
	  "navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
	  "backSearch": "w7BGjmEiChPoMYjET5k8R",
	  "subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
	  "topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
	  "modContactList": "_1zmiGIPb92yNtOu845RHyM",
	  "chatBox": "_2taDr3sNLvZl64o7TkBTEg",
	  "callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
	  "midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
	  "modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
	  "contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
	  "avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
	  "contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
	  "listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
	  "onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
	  "busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
	  "bgOffline": "jL-R5aQBwO_2EmgAsiay1",
	  "bgOnline": "_3TEYblB_gY5codKEtLqX7q",
	  "adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
	  "addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
	  "formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
	  "inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
	  "btn": "_27VXnOss6C0tcmiXDJyEQY",
	  "btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
	  "topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
	  "modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
	  "addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
	  "btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
	  "btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
	  "contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
	  "asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
	  "modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
	  "headerText": "_2POMQ33JzpZXRKNQwhKTpK",
	  "optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
	  "settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
	  "click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
	  "radio": "_1YNHku8cDP1FxyBn3XkUJY",
	  "modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
	  "modChatContainer": "_21msPTbxn87ey3RWsSt_35",
	  "selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
	  "avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
	  "messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
	  "downloadFile": "_33q4w5biPTOCecW_SwRklY",
	  "downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
	  "textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
	  "otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
	  "chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
	  "modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
	  "chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
	  "formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
	  "sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
	  "avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
	  "setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
	  "iconBlock": "_1llySoPNa1j3k655fl2PNS",
	  "passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
	  "meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
	  "meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
	  "inputError": "_30zq1PCjl9v2jnkrDEFjSK",
	  "formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
	  "calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
	  "endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
	  "schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
	  "schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
	  "schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
	  "onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
	  "repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
	  "repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
	  "schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
	  "schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
	  "inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
	  "setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
	  "dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
	  "actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
	  "actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
	  "indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
	  "alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
	  "centerBlock": "HLVHVZhqp-7yopt3Ah073",
	  "btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
	  "transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
	  "btnTransport": "szHYW92cM7tgGZoXatQyg",
	  "helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
	  "sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
	  "scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
	  "scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
	  "sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
	  "sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
	  "sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
	  "popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
	  "btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
	  "emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
	  "formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
	  "formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
	  "colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
	  "colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
	  "endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
	  "toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _component = {
	  "form-control": "QmIrbtmLmFNpHdWMqFMWS",
	  "innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
	  "colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
	  "error": "_3jAfmA6J7YmNDyB2VfsCxP",
	  "mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
	  "dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
	  "iElement": "_2crZNiFs8z8oNhzPDC1qOE",
	  "oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
	  "iLabel": "_3Pyvct_srCoSvJCgGG41jw",
	  "oLabel": "NsxWZpxBqBX8wky_O477_",
	  "iForm": "_3IlToa7pigrSS8KWut_dJ8",
	  "oForm": "_3N0YNUcfI5U02VSmBEbYot",
	  "iFormField": "_12yKSn29WLZIE6fvGQfcrN",
	  "oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
	  "iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
	  "oFormGroup": "_386CxczA49XX2-ejr3Qe55",
	  "formNext": "ccTxjcG6_GZO9OgzW33HT",
	  "iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
	  "oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
	  "iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
	  "oContainer": "_2tEAAtqgoutuOUU96rNvv1",
	  "iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
	  "oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
	  "iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
	  "iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
	  "whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
	  "iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
	  "active": "_2fF1Q9nO2O_1B8Ldb4RM52",
	  "scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
	  "errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
	  "errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
	  "whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
	  "greyCard": "_34l9W17Mt1koxHLd1yUqgk",
	  "reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
	  "countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
	  "react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
	  "ad": "N3bKXyhfwvWT3eAEC9Nno",
	  "ae": "taXUT8yfjgRMeSH3rMNxy",
	  "af": "_2vH4qShCgBPBO4GR8BdNvd",
	  "ag": "n8QfWtvpZLMpatCUqX2Td",
	  "ai": "_3fPX_RcpesOPxFsmsaygCE",
	  "al": "_1T12tbcC6990b-fIMG5LYW",
	  "am": "_31HdarMDfXvAgjizVUoeHk",
	  "ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
	  "ar": "_2qJleMgRbIErIrx3kQF57O",
	  "as": "_2ZPVYL8Vjn-vdWZToCEhjN",
	  "at": "_1hWilvnrVbANEHRyLGlF-m",
	  "au": "_2zJE4K6o-ftWqhb3exXZgk",
	  "aw": "_1UroMxX5JHt9bjGdHwa1OY",
	  "az": "_-Y2xueZ_1mEtB9YDOqEGB",
	  "ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
	  "bb": "_34600Kl8Wac9Hx7S3-3U6b",
	  "bd": "_3WBX90V5VJXA7-vSUfEWCh",
	  "be": "BcK33edOPcbYdkxxvOApy",
	  "bf": "ShN64-J7UZdswoQjkf7L_",
	  "bg": "_2A9PgkQEF5_KbvHvDf6_lY",
	  "bh": "_10p3rxNRYOhv8-BtZuq1w8",
	  "bi": "_6MzP1qXXDFAZVL7nBmRiH",
	  "bj": "_2U8H1sji9LfDEW706KyKvF",
	  "bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
	  "bn": "PgMDvF79WHl3kaklOmhw3",
	  "bo": "_7MheGVInaTi-QLxw5PiUi",
	  "br": "_1BDNUyT0cHDlbCBFgrrLkJ",
	  "bs": "_3vcASZB5bu7mJAzTzaRkWe",
	  "bt": "esu4pvyd9ZFWrf-etnrva",
	  "bw": "_2Hbv1I361RJFK3Ph2xPlu_",
	  "by": "_2tbYam6Og8RAicMhX9SXvI",
	  "bz": "_3xB704PIgqFnU2zTG-JZFN",
	  "ca": "_36FyK29nkNl9Ez7yWh04AS",
	  "cd": "_9PnHTqK1pSn_GIAbBtPT2",
	  "cf": "_2LgMF7o1A3a2cgw5jkpvZV",
	  "cg": "_3hYc9Y3UdCphltZKe2vJWk",
	  "ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
	  "ci": "FoSGkvvMDFAVcvsZBWX-Z",
	  "ck": "_1742IgEaHW3SZU7h_-nkwr",
	  "cl": "_36IaMt7ntEwUsH4lwN4tW-",
	  "cm": "_1N8krqbPtlsEVsh6SaCetm",
	  "cn": "IfkD3fwbUSx9FZflX6iIU",
	  "co": "_3Y7u7ONzxyZVjZYzS1OHTr",
	  "cr": "Gw5Qz4qBNZjPDmpQmi-d2",
	  "cu": "ZuHtEp_knwZcbwTTJkRgI",
	  "cv": "o6BzJCyjRH1pOsf_HpbQ6",
	  "cw": "hRElJCQXyNIITDZ6UQVut",
	  "cy": "_2cHKWrINPNO6L8BEOdtJCG",
	  "cz": "nS617LE8Qcckdv9HJTWpt",
	  "de": "fqJD93WBywDPs0lrLEXLT",
	  "dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
	  "dk": "_3fpBLMtuUi0kowy3ziMRYd",
	  "dm": "_3gMwGkQW-OGFx1U7vd7VMD",
	  "do": "G9EZGjpXLJUyQuREesyGO",
	  "dz": "_3Nka0vwv6nZpeugyuqYQIJ",
	  "ec": "_18t83SdIOs8EY6iF0zV0CZ",
	  "ee": "_1miCbYr55XmBKvcUu6XetR",
	  "eg": "_1T55wMh1svM7M5QGxFM2ex",
	  "er": "c0Ab9spCQ4VnXr_6xijnD",
	  "es": "_1lutiEL9tJpdNgKmnTT6Ld",
	  "et": "_2GGXIPO2kOV6CUsu65V4Z3",
	  "fi": "_1I-g5oWpQznT5QZuBfQ8A",
	  "fj": "_3oeTP_GhC_XzsjzHW86oDc",
	  "fk": "_3-_BjK4NArHS0nyf0DLc4F",
	  "fm": "_1WQYGDC-zTatxog3SIwE80",
	  "fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
	  "fr": "_3-mqatBXfaTfex8LWjnIDA",
	  "bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
	  "mf": "_34f4ya9mcbpIcQPgHJ4I6c",
	  "ga": "_15_iO4CJaXbX7PySxoldPF",
	  "gb": "_1vZuFSSey59_ixozre-0L_",
	  "gd": "_26Ub0jcjDpVD4nwM7m5n4e",
	  "ge": "_27ctDR0Hf6HO15MgHS8wyh",
	  "gf": "_2S6C39D4wNBuVSqzYM5Ldy",
	  "gh": "_3vjGi6-umA-RzwxRFaTfNN",
	  "gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
	  "gl": "_1OTvyS4D4UOkymKuDLxUdx",
	  "gm": "_3-0gezNOVCHKzaLYGUySo2",
	  "gn": "_8f6uadrEfnS9IX8DEIpKO",
	  "gp": "_36yEj9UcEbZcI0WJvgmk0B",
	  "gq": "xHX18x9xk7PhDBlgsvnad",
	  "gr": "HTk_eFej1VrCiBuKBIfLT",
	  "gt": "hgmUbzxaHNZNL6frPhPeb",
	  "gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
	  "gw": "_36JwaXqhh4gBrIvAy4c1KO",
	  "gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
	  "hk": "_1mT74O5OVtonPLmYnVVOu7",
	  "hn": "_1ze0KI-TYxTrDcXlMOu24s",
	  "hr": "ZIDUSRfcbDCZTyhqWGPob",
	  "ht": "Y65Ad5pf3z7ufcknP0vhk",
	  "hu": "_3EHKICvcensXt5hEu8Nkfs",
	  "id": "_3oZE8uvxIFK7M9DCEtsSCD",
	  "ie": "_2RNmpg94YYioQp2fWyz_xn",
	  "il": "_2Mq_no7KYxPp2NSLGS1Tcs",
	  "in": "_1UlEZ269GihRa58c5mCEBN",
	  "io": "_3ovelrc7S_DdmXxL-8uuwk",
	  "iq": "_3VSlK6DYHrBgKbkE2Rng2N",
	  "ir": "NRX2sFBmuPSJ9EOigyuEP",
	  "is": "_25HaTNE7x74CJO9S1mnm4I",
	  "it": "_1-LmlhbrcpKN-xjESmR_sO",
	  "jm": "VsvDBply-4FtMoJhi8Cvu",
	  "jo": "yEE3hbkzWK8CSCrCJibCo",
	  "jp": "_3oxjjz1uD2cX2QsoSToLgz",
	  "ke": "_1ksOT6KMPd99EWuWCXPga_",
	  "kg": "_2CMnR3yv5DGwDc8p3uoOjp",
	  "kh": "_927b1QnaSWnN35i3bVewJ",
	  "ki": "_2CuDp55lqYTpFp68D4IWep",
	  "km": "_3tvMTeZYZMzBB9bGn9lV9E",
	  "kn": "_6kbCvwc22pJX0tNv3HToQ",
	  "kp": "_3tIPOe5PNrHH-bgCGaZTJj",
	  "kr": "_2653rpVUuy3ETaw1mogdnF",
	  "kw": "_1SKg_lTe0ShbPSOl44eKjp",
	  "ky": "tgj8SOv7bYoF7qfbbQWNG",
	  "kz": "bchn50J152EdQa0zf3k5u",
	  "la": "mu9oycLgpKX8_yLLkR5b9",
	  "lb": "_2TcAFbagIrNyc6mgzRVNW0",
	  "lc": "_2IFItnUNT-albvpN-ksxd2",
	  "li": "_3_E6nQspv6zJQLQI24puaS",
	  "lk": "_2M2wq3qQhGeUegbBTs7ilH",
	  "lr": "L4o4xOg0s6QbasyIRPgyF",
	  "ls": "LhBB6SRin61WSFtUwaEfe",
	  "lt": "ITDUphrnMkKItKGMVHZf8",
	  "lu": "_1mVW30sc4i-1M8tDPCQlL",
	  "lv": "_3rq6vE2IagAsGI6iESAcJq",
	  "ly": "_3se_Nzm1WQrEN3VZYiJJrv",
	  "ma": "_fSDiNxp_jjfqkQcWffDM",
	  "mc": "_2hRTRZeBtDGN4mNeWBZVgB",
	  "md": "_26jDl0skadEwmUYDGmEzST",
	  "me": "_388lJj_7sQdyd9HL7pMrar",
	  "mg": "_3aFoqVWcvG3p47Vwa6UuoE",
	  "mh": "_1YHi6OtXmKfP15ZNbwYGgy",
	  "mk": "_9QVyhHcp8yH762J8fWXhC",
	  "ml": "yYD99PoyhgFI4912_qoyJ",
	  "mm": "URzk8-j7LcySpGUMJf_Qk",
	  "mn": "_1J-lktQUTK0rydBz3foJGF",
	  "mo": "_1sbL0zhHof-KbfGWu2qjqF",
	  "mp": "_1tJjJlSjRw5AnqcXXmGwCI",
	  "mq": "fHob9sxaJrTuqSc0xL744",
	  "mr": "t-Bmj7a31aA-IwcRcL0ua",
	  "ms": "_2xyT54DQP62zWDySH7-Kdy",
	  "mt": "_1Ul_OlGODc8S0QplVq94PV",
	  "mu": "_1yIBERRJqnV33pTq2VpKRc",
	  "mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
	  "mw": "_3i8n-5-htdGNJLgn96O21",
	  "mx": "_16-6zoyiVzSGB1O72cUTzV",
	  "my": "_3W2P0D9eTN4BQoOcThOsaM",
	  "mz": "wJ8icX7Asp3dSImkXOdTM",
	  "na": "_1qt_F94mybbX5kr0ArtN-Z",
	  "nc": "h82AMIuCGdKf69Hc_nM6D",
	  "ne": "_2mVa5nGsijzD93WRl8dk64",
	  "nf": "_3XQ9oUH_84SsdZLjpVRuqT",
	  "ng": "_1uyyH1GZjsEk3YpaUSmmG6",
	  "ni": "_22_3H6UeFo26o3fSavtQaX",
	  "nl": "_93asfBYgR8C7bEDucZO8l",
	  "bq": "_37A1nwIz7Z3obwUjmliw4s",
	  "no": "_2-sVmkWiLn_ogTikc0c0Eg",
	  "np": "_1PqZSwf5cuMNmbE7bpKe67",
	  "nr": "_9q5Rg9Xn0G2buivFSGySP",
	  "nu": "RLhVdyjL9Cex8ekaJqirU",
	  "nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
	  "om": "_9mZYNhgBLiQg-j1FeVprJ",
	  "pa": "_3S7TrzxJIEYVghUMVHB6E7",
	  "pe": "_3V5sP7VvdGOFqApj7POYl2",
	  "pf": "_1YzdrkyHO-eCcEFF-hjZl7",
	  "pg": "ddWAanlQJPlB0QDWO6dAF",
	  "ph": "_2TGbmCcqHlJFCssz78MxOs",
	  "pk": "_2JerTABYGCUN8FLjpnDzKy",
	  "pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
	  "pm": "_29Hoo7EsoSHtvRFvlVg2cD",
	  "pr": "_3_pkwz60KLoYcbKwaRvIsS",
	  "ps": "_3jenITZ_yUYS7kU1HwFEHj",
	  "pt": "_1vz8ABWy5Yd43_JhaTWq9u",
	  "pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
	  "py": "_1_W41pJLcGMRhLdU997clv",
	  "qa": "Z0tjAakoNSOs14KuenmRi",
	  "re": "_3k5KF4jzE7HUitQw9MQKnp",
	  "ro": "_2b8XhT3-7NgjAC8gJJkpis",
	  "rs": "_2MUJr9MQbiKRTd_g0TaRQr",
	  "ru": "HjzPW2CxxNMSGZw1ugFW7",
	  "rw": "_23TGIOoPmB9QYqIPG6W3tA",
	  "sa": "_34WM8rSonfayW0vJ3koqJS",
	  "sb": "_3486rZNsCjvTmIoHbjK8mG",
	  "sc": "_3meAM_iQCU6MyfPQJTN3yl",
	  "sd": "_2x6XeHNF__4s9VVfFXCJhO",
	  "se": "_66VDclGQXxpdUR8uE3ZFa",
	  "sg": "tv3I_hfLcUJ_8i9ewVcUz",
	  "sh": "_1syDbbhbumwMwwD7Dwkb1V",
	  "si": "_3jsffwJjGr2sMEofSTTGkG",
	  "sk": "_1EpYAUcQLCqbYB48Auixqb",
	  "sl": "_3STJQv9nY5mol4cW82D2ci",
	  "sm": "_9aTR-AZMTaYHRmDVAyFTM",
	  "sn": "_3mTatYTWeJQQACfV7xzRhi",
	  "so": "_1LnWon2slwLMqAHzhkRT4c",
	  "sr": "_1GSedFwSsf5isgOi3p0x6U",
	  "ss": "_1sq99LOjKKgery3luOXOFn",
	  "st": "_1O6vYx_NaXFBAs1qYxgwaB",
	  "sv": "_10D9RGnRzUv14bYWQaC23c",
	  "sx": "KonDEEzH2JzIWsVUBzFdY",
	  "sy": "_1ZAnqGYeixOJVFwwt6hNIo",
	  "sz": "_3FeOFkec3sXYbvQhWDdIM7",
	  "tc": "_1FZvldKEV-vz12TyyNfEf",
	  "td": "_31fysfDRtTWVKcX_UjX0ty",
	  "tg": "H60Kyr6MsF6nvRz5l7EfN",
	  "th": "SHZkbUz1c_H_zDOfxLc4",
	  "tj": "_2MRI0fA4OLgepXVooYMu9H",
	  "tk": "_1W959S9LHLCKhz3xi4MpHe",
	  "tl": "_1lMF_0nwQXTyBRRzRj7hBF",
	  "tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
	  "tn": "_2MeGi_bqLVuCaRtJzs3QqA",
	  "to": "_3egwC_50WENVPaap_uwXr8",
	  "tr": "_2KiPy3o6m7JCKQWPY2fI1d",
	  "tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
	  "tv": "_2D9VWSmHkhgNemAaIKF_cp",
	  "tw": "_2J7nVAh1zEa7kV5Ba51CLV",
	  "tz": "_2acF96LLqMjlbfMX1oiAjT",
	  "ua": "_2rr3Tyr8dP6vDvE0khEDKT",
	  "ug": "D7gjzKmlr78rNWXXw90np",
	  "us": "_1l5RtWI_acgLVeCd5fjgHG",
	  "uy": "_1zX6hTsIa2TtL6dgR47eQ9",
	  "uz": "_29NUL3VtwK1_RWUyPsY2ei",
	  "va": "_39kTgRBkhqqGVLUTJvK_67",
	  "vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
	  "ve": "_3Lk2Svkm2NTAVpUfiY_No5",
	  "vg": "_3SiYuGrNzW9DNkXwTZugyj",
	  "vi": "_2BiiERObu5xcE6P1SZxLdj",
	  "vn": "_3kSg6iW0KLoUpJ0g70fckK",
	  "vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
	  "wf": "Arz0xEqJcbKbLmPz_tXTS",
	  "ws": "_3oTaxcmbTriEd90-cXNqD8",
	  "ye": "gxtmCiQO2ao4JTQXuRUIJ",
	  "za": "_25HyrYKmQQAteF_LwADnIt",
	  "zm": "Kui2u7hZHcNBqlzbqR-vQ",
	  "zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
	  "hide": "_2kO_U0LXcg71jJA6RSia2e",
	  "v-hide": "_2HBc009zwTsSlkh8P8tH10",
	  "invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
	  "flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
	  "open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
	  "selected-flag": "_10c169vRt8V92_nQ_S0KtR",
	  "flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
	  "arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
	  "up": "_2ykRnfq4f2nlmZGfvzrn92",
	  "country-list": "UlTusogWL2urjgGgLNpcD",
	  "divider": "_2zMaTbM3nSdE07wOs7YYRt",
	  "country": "uL848pHFWhb_G94Ak-KX5",
	  "dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
	  "highlight": "BLa_2aA2PkYD2PsO2fvNC",
	  "country-name": "_3ih_ovRiGmAkpjxuz63nhk",
	  "uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
	  "fileUpload": "_2WENukerx3mNXkTyu0UXQf",
	  "uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
	  "upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
	  "blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
	  "feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
	  "errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
	  "gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
	  "red": "_3wj0AXV9gqX9YG1nk-2u9J",
	  "green": "_3KPVxc3su8ewtuKZgu8TGv",
	  "orange": "_3cLlE5QI9XJwY6e7jO5bLg",
	  "capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
	  "importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
	  "importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
	  "importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
	  "icon": "_12rnwIUewKT2PdtWMnNyD5",
	  "importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
	  "broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
	  "broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
	  "btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
	  "textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
	  "spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
	  "pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
	  "lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
	  "removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
	  "inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
	  "popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
	  "dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
	  "dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
	  "applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
	  "filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
	  "btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
	  "assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
	  "pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
	  "assTab": "y4LW63OuadI0JWTQBnbJ1",
	  "heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
	  "radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
	  "wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
	  "leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
	  "rightBox": "DP21PoKxwKk_vJyOuQTcr",
	  "gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
	  "actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
	  "gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
	  "actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
	  "gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
	  "morePref": "JBm94eKPIFI8vfiroATJ6",
	  "tile": "_1Ssp2zTovh7AwJWuRkgnge",
	  "tileItems": "_3cDqgy8AedDYzhy8Euosis",
	  "tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
	  "tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
	  "category": "_2Ow56TBY2Y24yY5SjVRU4l",
	  "innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
	  "maxScore": "_3uL97t2vemfuAs83cAFhjE",
	  "maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
	  "scored": "_12gGWK_s69JBGzOAX7ClkT",
	  "scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
	  "remTile": "_3vgBsvWRGVVRwIEDn1TquO",
	  "tileBody": "dF1WC_PeNjG87K2XGMIcS",
	  "tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
	  "gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
	  "gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
	  "assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
	  "blue": "K7acjAQMroOGGtUqqojYy",
	  "yellow": "G7N-PGOIbGO_ZkaqBu2mx",
	  "txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
	  "txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
	  "txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
	  "txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
	  "txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
	  "txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
	  "addTile": "lCw_kxhsAPcuM3yFAqvpF",
	  "addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
	  "addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
	  "commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
	  "totalScore": "FDG4LAia-7JDDtxb7R4Kb",
	  "totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
	  "textBox": "_13VdIFmMegxz_eR8VIXN_M",
	  "totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
	  "totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
	  "resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
	  "resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
	  "resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
	  "headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
	  "scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
	  "resultBody": "N6kKlySaRGbRcB4bBmpZ0",
	  "resGroup": "_2byM-_1N3yjHb2dpmlikdf",
	  "resTile": "DZeuj4DKkdAPKCgYd76RK",
	  "resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
	  "resRating": "R7j9mxFZmdmLgC7bPXpyN",
	  "txtSize": "_977ldMQMMiHQ0YG_61T3g",
	  "txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
	  "resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
	  "resInput": "_14gsxA36f-uYOfxGDvr_gi",
	  "activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
	  "feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
	  "fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
	  "feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
	  "profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
	  "profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
	  "profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
	  "name": "_25-6SxUiv8zhOMEVTRrg8w",
	  "commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
	  "addpdng": "_6rQH8tivz8ELIWszpbahs",
	  "good": "_3lOxcxDfxhPcuhLBJHo4Ur",
	  "vGood": "l_IAfocpDxfvpU316U0EI",
	  "fair": "_3I3YapUnBVxgs-ZsGf3Poh",
	  "poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
	  id: 'revoke'
	});
	
	var _ref2 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'revoke_error'
	}));
	
	var _ref3 = _jsx('img', {
	  src: '/images/black-icons/black-lock.png'
	});
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'become_host'
	});
	
	var _ref5 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'enter_host_password'
	}));
	
	var _ref6 = _jsx('img', {
	  src: '/images/black-icons/black-lock.png'
	});
	
	var _ref7 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'host_access'
	});
	
	var HostControl = exports.HostControl = function (_Component) {
	  _inherits(HostControl, _Component);
	
	  function HostControl(props) {
	    _classCallCheck(this, HostControl);
	
	    var _this = _possibleConstructorReturn(this, (HostControl.__proto__ || Object.getPrototypeOf(HostControl)).call(this, props));
	
	    _this.handlePasswordChange = function (e) {
	      if (e.target.value == '') {
	        _this.setState({
	          error: '',
	          password: ''
	        });
	      } else {
	        _this.setState({ password: e.target.value });
	      }
	    };
	
	    _this.confObject = new _WoogeenManager2.default();
	    _this.cls_btnSaveEdit = 'btn btn-success btn-icon btn-sm';
	    _this.cls_errcls = '' + _component2.default.error;
	    _this.setHostPwd = null;
	    _this.state = {
	      error: '',
	      password: '',
	      setHostPwd: null,
	      imHost: false
	    };
	    return _this;
	  }
	
	  _createClass(HostControl, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setHostPassword(this.props.conferenceDetails);
	    }
	  }, {
	    key: 'closeModal',
	    value: function closeModal() {
	      this.setState({
	        error: '',
	        password: ''
	      });
	      this.props.closeHost();
	    }
	  }, {
	    key: 'setHostPassword',
	    value: function setHostPassword(conferenceDetails) {
	      if (conferenceDetails && conferenceDetails.confData && conferenceDetails.confData.hostPassword) {
	        this.setState({ setHostPwd: conferenceDetails.confData.hostPassword });
	        this.setState({ imHost: conferenceDetails.imHost });
	      }
	    }
	  }, {
	    key: 'handleSave',
	    value: function handleSave(e) {
	      e.preventDefault();
	      if (this.props.conferenceDetails && this.props.conferenceDetails.imHost == false && this.props.conferenceDetails.hostId && this.props.conferenceDetails.hostId != '') {
	        alertify.alert('Access Denied', 'Host already exist, at a time one host is allowed.', function () {});
	      } else if (this.state.imHost) {
	        this.confObject.offPresenter();
	        this.confObject.offSpeaker();
	        this.confObject.setHostPassword(false);
	        this.props.closeHost();
	        this.setState({ imHost: false, password: '' });
	      } else {
	        var password = this.state.password;
	        if (password != this.state.setHostPwd) {
	          this.setState({ error: this.props.intl.messages.host_error });
	          // } else if(conferenceDetails && conferenceDetails.confData && conferenceDetails.confData.host){
	          //multi-host won't allowed case
	        } else {
	          // Change By - pranathi, Desc - updating the state error as empty
	          this.confObject.setHostPassword(true);
	          this.setState({ imHost: true, password: '', error: '' });
	          this.props.presenterfunc();
	          this.props.closeHost();
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var bodyData = null;
	      var buttonLabel = null;
	      if (this.state.imHost) {
	        buttonLabel = _ref;
	        bodyData = _jsx('div', {
	          className: _ConfSettings2.default.setConfPassword
	        }, void 0, _ref2, _jsx('div', {
	          className: _ConfSettings2.default.iconBlock
	        }, void 0, _ref3));
	      } else {
	        buttonLabel = _ref4;
	        bodyData = _jsx('div', {
	          className: _ConfSettings2.default.setConfPassword
	        }, void 0, _ref5, _jsx('div', {
	          className: _ConfSettings2.default.iconBlock
	        }, void 0, _ref6), _jsx('div', {
	          className: _ConfSettings2.default.passWordBlock
	        }, void 0, _jsx('input', {
	          id: 'password',
	          type: 'password',
	          name: 'password',
	          value: this.state.password,
	          onChange: this.handlePasswordChange,
	          autoFocus: 'autofocus',
	          maxLength: 15
	        })));
	      }
	      return _jsx(_reactBootstrap.Modal, {
	        show: this.props.showModal,
	        onHide: this.closeModal.bind(this)
	      }, void 0, _jsx(_Modal.Header, {
	        closeButton: true
	      }, void 0, _jsx(_Modal.Title, {
	        className: _ConfSettings2.default.popHeadingAll
	      }, void 0, _ref7)), _jsx('form', {}, void 0, _jsx(_Modal.Body, {}, void 0, bodyData), _jsx(_Modal.Footer, {}, void 0, _jsx('label', {
	        className: this.cls_errcls
	      }, void 0, this.state.error), _jsx('button', {
	        id: 'saveSubmit',
	        type: 'submit',
	        className: _ConfSettings2.default.btnApplyAll,
	        onClick: this.handleSave.bind(this)
	      }, void 0, buttonLabel))));
	    }
	  }]);
	
	  return HostControl;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    intl: state.intl,
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state)
	  };
	}
	
	HostControl.contextTypes = {
	  router: _react2.default.PropTypes.object,
	  intl: _react2.default.PropTypes.object.isRequired
	};
	
	HostControl.defaultProps = { showModal: false };
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(HostControl);

/***/ },

/***/ 425:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _reactPdfJs = __webpack_require__(524);
	
	var _reactPdfJs2 = _interopRequireDefault(_reactPdfJs);
	
	var _reactRedux = __webpack_require__(16);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _component = {
	  "form-control": "QmIrbtmLmFNpHdWMqFMWS",
	  "innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
	  "colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
	  "error": "_3jAfmA6J7YmNDyB2VfsCxP",
	  "mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
	  "dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
	  "iElement": "_2crZNiFs8z8oNhzPDC1qOE",
	  "oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
	  "iLabel": "_3Pyvct_srCoSvJCgGG41jw",
	  "oLabel": "NsxWZpxBqBX8wky_O477_",
	  "iForm": "_3IlToa7pigrSS8KWut_dJ8",
	  "oForm": "_3N0YNUcfI5U02VSmBEbYot",
	  "iFormField": "_12yKSn29WLZIE6fvGQfcrN",
	  "oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
	  "iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
	  "oFormGroup": "_386CxczA49XX2-ejr3Qe55",
	  "formNext": "ccTxjcG6_GZO9OgzW33HT",
	  "iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
	  "oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
	  "iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
	  "oContainer": "_2tEAAtqgoutuOUU96rNvv1",
	  "iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
	  "oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
	  "iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
	  "iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
	  "whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
	  "iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
	  "active": "_2fF1Q9nO2O_1B8Ldb4RM52",
	  "scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
	  "errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
	  "errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
	  "whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
	  "greyCard": "_34l9W17Mt1koxHLd1yUqgk",
	  "reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
	  "countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
	  "react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
	  "ad": "N3bKXyhfwvWT3eAEC9Nno",
	  "ae": "taXUT8yfjgRMeSH3rMNxy",
	  "af": "_2vH4qShCgBPBO4GR8BdNvd",
	  "ag": "n8QfWtvpZLMpatCUqX2Td",
	  "ai": "_3fPX_RcpesOPxFsmsaygCE",
	  "al": "_1T12tbcC6990b-fIMG5LYW",
	  "am": "_31HdarMDfXvAgjizVUoeHk",
	  "ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
	  "ar": "_2qJleMgRbIErIrx3kQF57O",
	  "as": "_2ZPVYL8Vjn-vdWZToCEhjN",
	  "at": "_1hWilvnrVbANEHRyLGlF-m",
	  "au": "_2zJE4K6o-ftWqhb3exXZgk",
	  "aw": "_1UroMxX5JHt9bjGdHwa1OY",
	  "az": "_-Y2xueZ_1mEtB9YDOqEGB",
	  "ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
	  "bb": "_34600Kl8Wac9Hx7S3-3U6b",
	  "bd": "_3WBX90V5VJXA7-vSUfEWCh",
	  "be": "BcK33edOPcbYdkxxvOApy",
	  "bf": "ShN64-J7UZdswoQjkf7L_",
	  "bg": "_2A9PgkQEF5_KbvHvDf6_lY",
	  "bh": "_10p3rxNRYOhv8-BtZuq1w8",
	  "bi": "_6MzP1qXXDFAZVL7nBmRiH",
	  "bj": "_2U8H1sji9LfDEW706KyKvF",
	  "bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
	  "bn": "PgMDvF79WHl3kaklOmhw3",
	  "bo": "_7MheGVInaTi-QLxw5PiUi",
	  "br": "_1BDNUyT0cHDlbCBFgrrLkJ",
	  "bs": "_3vcASZB5bu7mJAzTzaRkWe",
	  "bt": "esu4pvyd9ZFWrf-etnrva",
	  "bw": "_2Hbv1I361RJFK3Ph2xPlu_",
	  "by": "_2tbYam6Og8RAicMhX9SXvI",
	  "bz": "_3xB704PIgqFnU2zTG-JZFN",
	  "ca": "_36FyK29nkNl9Ez7yWh04AS",
	  "cd": "_9PnHTqK1pSn_GIAbBtPT2",
	  "cf": "_2LgMF7o1A3a2cgw5jkpvZV",
	  "cg": "_3hYc9Y3UdCphltZKe2vJWk",
	  "ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
	  "ci": "FoSGkvvMDFAVcvsZBWX-Z",
	  "ck": "_1742IgEaHW3SZU7h_-nkwr",
	  "cl": "_36IaMt7ntEwUsH4lwN4tW-",
	  "cm": "_1N8krqbPtlsEVsh6SaCetm",
	  "cn": "IfkD3fwbUSx9FZflX6iIU",
	  "co": "_3Y7u7ONzxyZVjZYzS1OHTr",
	  "cr": "Gw5Qz4qBNZjPDmpQmi-d2",
	  "cu": "ZuHtEp_knwZcbwTTJkRgI",
	  "cv": "o6BzJCyjRH1pOsf_HpbQ6",
	  "cw": "hRElJCQXyNIITDZ6UQVut",
	  "cy": "_2cHKWrINPNO6L8BEOdtJCG",
	  "cz": "nS617LE8Qcckdv9HJTWpt",
	  "de": "fqJD93WBywDPs0lrLEXLT",
	  "dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
	  "dk": "_3fpBLMtuUi0kowy3ziMRYd",
	  "dm": "_3gMwGkQW-OGFx1U7vd7VMD",
	  "do": "G9EZGjpXLJUyQuREesyGO",
	  "dz": "_3Nka0vwv6nZpeugyuqYQIJ",
	  "ec": "_18t83SdIOs8EY6iF0zV0CZ",
	  "ee": "_1miCbYr55XmBKvcUu6XetR",
	  "eg": "_1T55wMh1svM7M5QGxFM2ex",
	  "er": "c0Ab9spCQ4VnXr_6xijnD",
	  "es": "_1lutiEL9tJpdNgKmnTT6Ld",
	  "et": "_2GGXIPO2kOV6CUsu65V4Z3",
	  "fi": "_1I-g5oWpQznT5QZuBfQ8A",
	  "fj": "_3oeTP_GhC_XzsjzHW86oDc",
	  "fk": "_3-_BjK4NArHS0nyf0DLc4F",
	  "fm": "_1WQYGDC-zTatxog3SIwE80",
	  "fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
	  "fr": "_3-mqatBXfaTfex8LWjnIDA",
	  "bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
	  "mf": "_34f4ya9mcbpIcQPgHJ4I6c",
	  "ga": "_15_iO4CJaXbX7PySxoldPF",
	  "gb": "_1vZuFSSey59_ixozre-0L_",
	  "gd": "_26Ub0jcjDpVD4nwM7m5n4e",
	  "ge": "_27ctDR0Hf6HO15MgHS8wyh",
	  "gf": "_2S6C39D4wNBuVSqzYM5Ldy",
	  "gh": "_3vjGi6-umA-RzwxRFaTfNN",
	  "gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
	  "gl": "_1OTvyS4D4UOkymKuDLxUdx",
	  "gm": "_3-0gezNOVCHKzaLYGUySo2",
	  "gn": "_8f6uadrEfnS9IX8DEIpKO",
	  "gp": "_36yEj9UcEbZcI0WJvgmk0B",
	  "gq": "xHX18x9xk7PhDBlgsvnad",
	  "gr": "HTk_eFej1VrCiBuKBIfLT",
	  "gt": "hgmUbzxaHNZNL6frPhPeb",
	  "gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
	  "gw": "_36JwaXqhh4gBrIvAy4c1KO",
	  "gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
	  "hk": "_1mT74O5OVtonPLmYnVVOu7",
	  "hn": "_1ze0KI-TYxTrDcXlMOu24s",
	  "hr": "ZIDUSRfcbDCZTyhqWGPob",
	  "ht": "Y65Ad5pf3z7ufcknP0vhk",
	  "hu": "_3EHKICvcensXt5hEu8Nkfs",
	  "id": "_3oZE8uvxIFK7M9DCEtsSCD",
	  "ie": "_2RNmpg94YYioQp2fWyz_xn",
	  "il": "_2Mq_no7KYxPp2NSLGS1Tcs",
	  "in": "_1UlEZ269GihRa58c5mCEBN",
	  "io": "_3ovelrc7S_DdmXxL-8uuwk",
	  "iq": "_3VSlK6DYHrBgKbkE2Rng2N",
	  "ir": "NRX2sFBmuPSJ9EOigyuEP",
	  "is": "_25HaTNE7x74CJO9S1mnm4I",
	  "it": "_1-LmlhbrcpKN-xjESmR_sO",
	  "jm": "VsvDBply-4FtMoJhi8Cvu",
	  "jo": "yEE3hbkzWK8CSCrCJibCo",
	  "jp": "_3oxjjz1uD2cX2QsoSToLgz",
	  "ke": "_1ksOT6KMPd99EWuWCXPga_",
	  "kg": "_2CMnR3yv5DGwDc8p3uoOjp",
	  "kh": "_927b1QnaSWnN35i3bVewJ",
	  "ki": "_2CuDp55lqYTpFp68D4IWep",
	  "km": "_3tvMTeZYZMzBB9bGn9lV9E",
	  "kn": "_6kbCvwc22pJX0tNv3HToQ",
	  "kp": "_3tIPOe5PNrHH-bgCGaZTJj",
	  "kr": "_2653rpVUuy3ETaw1mogdnF",
	  "kw": "_1SKg_lTe0ShbPSOl44eKjp",
	  "ky": "tgj8SOv7bYoF7qfbbQWNG",
	  "kz": "bchn50J152EdQa0zf3k5u",
	  "la": "mu9oycLgpKX8_yLLkR5b9",
	  "lb": "_2TcAFbagIrNyc6mgzRVNW0",
	  "lc": "_2IFItnUNT-albvpN-ksxd2",
	  "li": "_3_E6nQspv6zJQLQI24puaS",
	  "lk": "_2M2wq3qQhGeUegbBTs7ilH",
	  "lr": "L4o4xOg0s6QbasyIRPgyF",
	  "ls": "LhBB6SRin61WSFtUwaEfe",
	  "lt": "ITDUphrnMkKItKGMVHZf8",
	  "lu": "_1mVW30sc4i-1M8tDPCQlL",
	  "lv": "_3rq6vE2IagAsGI6iESAcJq",
	  "ly": "_3se_Nzm1WQrEN3VZYiJJrv",
	  "ma": "_fSDiNxp_jjfqkQcWffDM",
	  "mc": "_2hRTRZeBtDGN4mNeWBZVgB",
	  "md": "_26jDl0skadEwmUYDGmEzST",
	  "me": "_388lJj_7sQdyd9HL7pMrar",
	  "mg": "_3aFoqVWcvG3p47Vwa6UuoE",
	  "mh": "_1YHi6OtXmKfP15ZNbwYGgy",
	  "mk": "_9QVyhHcp8yH762J8fWXhC",
	  "ml": "yYD99PoyhgFI4912_qoyJ",
	  "mm": "URzk8-j7LcySpGUMJf_Qk",
	  "mn": "_1J-lktQUTK0rydBz3foJGF",
	  "mo": "_1sbL0zhHof-KbfGWu2qjqF",
	  "mp": "_1tJjJlSjRw5AnqcXXmGwCI",
	  "mq": "fHob9sxaJrTuqSc0xL744",
	  "mr": "t-Bmj7a31aA-IwcRcL0ua",
	  "ms": "_2xyT54DQP62zWDySH7-Kdy",
	  "mt": "_1Ul_OlGODc8S0QplVq94PV",
	  "mu": "_1yIBERRJqnV33pTq2VpKRc",
	  "mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
	  "mw": "_3i8n-5-htdGNJLgn96O21",
	  "mx": "_16-6zoyiVzSGB1O72cUTzV",
	  "my": "_3W2P0D9eTN4BQoOcThOsaM",
	  "mz": "wJ8icX7Asp3dSImkXOdTM",
	  "na": "_1qt_F94mybbX5kr0ArtN-Z",
	  "nc": "h82AMIuCGdKf69Hc_nM6D",
	  "ne": "_2mVa5nGsijzD93WRl8dk64",
	  "nf": "_3XQ9oUH_84SsdZLjpVRuqT",
	  "ng": "_1uyyH1GZjsEk3YpaUSmmG6",
	  "ni": "_22_3H6UeFo26o3fSavtQaX",
	  "nl": "_93asfBYgR8C7bEDucZO8l",
	  "bq": "_37A1nwIz7Z3obwUjmliw4s",
	  "no": "_2-sVmkWiLn_ogTikc0c0Eg",
	  "np": "_1PqZSwf5cuMNmbE7bpKe67",
	  "nr": "_9q5Rg9Xn0G2buivFSGySP",
	  "nu": "RLhVdyjL9Cex8ekaJqirU",
	  "nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
	  "om": "_9mZYNhgBLiQg-j1FeVprJ",
	  "pa": "_3S7TrzxJIEYVghUMVHB6E7",
	  "pe": "_3V5sP7VvdGOFqApj7POYl2",
	  "pf": "_1YzdrkyHO-eCcEFF-hjZl7",
	  "pg": "ddWAanlQJPlB0QDWO6dAF",
	  "ph": "_2TGbmCcqHlJFCssz78MxOs",
	  "pk": "_2JerTABYGCUN8FLjpnDzKy",
	  "pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
	  "pm": "_29Hoo7EsoSHtvRFvlVg2cD",
	  "pr": "_3_pkwz60KLoYcbKwaRvIsS",
	  "ps": "_3jenITZ_yUYS7kU1HwFEHj",
	  "pt": "_1vz8ABWy5Yd43_JhaTWq9u",
	  "pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
	  "py": "_1_W41pJLcGMRhLdU997clv",
	  "qa": "Z0tjAakoNSOs14KuenmRi",
	  "re": "_3k5KF4jzE7HUitQw9MQKnp",
	  "ro": "_2b8XhT3-7NgjAC8gJJkpis",
	  "rs": "_2MUJr9MQbiKRTd_g0TaRQr",
	  "ru": "HjzPW2CxxNMSGZw1ugFW7",
	  "rw": "_23TGIOoPmB9QYqIPG6W3tA",
	  "sa": "_34WM8rSonfayW0vJ3koqJS",
	  "sb": "_3486rZNsCjvTmIoHbjK8mG",
	  "sc": "_3meAM_iQCU6MyfPQJTN3yl",
	  "sd": "_2x6XeHNF__4s9VVfFXCJhO",
	  "se": "_66VDclGQXxpdUR8uE3ZFa",
	  "sg": "tv3I_hfLcUJ_8i9ewVcUz",
	  "sh": "_1syDbbhbumwMwwD7Dwkb1V",
	  "si": "_3jsffwJjGr2sMEofSTTGkG",
	  "sk": "_1EpYAUcQLCqbYB48Auixqb",
	  "sl": "_3STJQv9nY5mol4cW82D2ci",
	  "sm": "_9aTR-AZMTaYHRmDVAyFTM",
	  "sn": "_3mTatYTWeJQQACfV7xzRhi",
	  "so": "_1LnWon2slwLMqAHzhkRT4c",
	  "sr": "_1GSedFwSsf5isgOi3p0x6U",
	  "ss": "_1sq99LOjKKgery3luOXOFn",
	  "st": "_1O6vYx_NaXFBAs1qYxgwaB",
	  "sv": "_10D9RGnRzUv14bYWQaC23c",
	  "sx": "KonDEEzH2JzIWsVUBzFdY",
	  "sy": "_1ZAnqGYeixOJVFwwt6hNIo",
	  "sz": "_3FeOFkec3sXYbvQhWDdIM7",
	  "tc": "_1FZvldKEV-vz12TyyNfEf",
	  "td": "_31fysfDRtTWVKcX_UjX0ty",
	  "tg": "H60Kyr6MsF6nvRz5l7EfN",
	  "th": "SHZkbUz1c_H_zDOfxLc4",
	  "tj": "_2MRI0fA4OLgepXVooYMu9H",
	  "tk": "_1W959S9LHLCKhz3xi4MpHe",
	  "tl": "_1lMF_0nwQXTyBRRzRj7hBF",
	  "tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
	  "tn": "_2MeGi_bqLVuCaRtJzs3QqA",
	  "to": "_3egwC_50WENVPaap_uwXr8",
	  "tr": "_2KiPy3o6m7JCKQWPY2fI1d",
	  "tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
	  "tv": "_2D9VWSmHkhgNemAaIKF_cp",
	  "tw": "_2J7nVAh1zEa7kV5Ba51CLV",
	  "tz": "_2acF96LLqMjlbfMX1oiAjT",
	  "ua": "_2rr3Tyr8dP6vDvE0khEDKT",
	  "ug": "D7gjzKmlr78rNWXXw90np",
	  "us": "_1l5RtWI_acgLVeCd5fjgHG",
	  "uy": "_1zX6hTsIa2TtL6dgR47eQ9",
	  "uz": "_29NUL3VtwK1_RWUyPsY2ei",
	  "va": "_39kTgRBkhqqGVLUTJvK_67",
	  "vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
	  "ve": "_3Lk2Svkm2NTAVpUfiY_No5",
	  "vg": "_3SiYuGrNzW9DNkXwTZugyj",
	  "vi": "_2BiiERObu5xcE6P1SZxLdj",
	  "vn": "_3kSg6iW0KLoUpJ0g70fckK",
	  "vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
	  "wf": "Arz0xEqJcbKbLmPz_tXTS",
	  "ws": "_3oTaxcmbTriEd90-cXNqD8",
	  "ye": "gxtmCiQO2ao4JTQXuRUIJ",
	  "za": "_25HyrYKmQQAteF_LwADnIt",
	  "zm": "Kui2u7hZHcNBqlzbqR-vQ",
	  "zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
	  "hide": "_2kO_U0LXcg71jJA6RSia2e",
	  "v-hide": "_2HBc009zwTsSlkh8P8tH10",
	  "invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
	  "flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
	  "open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
	  "selected-flag": "_10c169vRt8V92_nQ_S0KtR",
	  "flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
	  "arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
	  "up": "_2ykRnfq4f2nlmZGfvzrn92",
	  "country-list": "UlTusogWL2urjgGgLNpcD",
	  "divider": "_2zMaTbM3nSdE07wOs7YYRt",
	  "country": "uL848pHFWhb_G94Ak-KX5",
	  "dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
	  "highlight": "BLa_2aA2PkYD2PsO2fvNC",
	  "country-name": "_3ih_ovRiGmAkpjxuz63nhk",
	  "uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
	  "fileUpload": "_2WENukerx3mNXkTyu0UXQf",
	  "uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
	  "upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
	  "blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
	  "feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
	  "errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
	  "gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
	  "red": "_3wj0AXV9gqX9YG1nk-2u9J",
	  "green": "_3KPVxc3su8ewtuKZgu8TGv",
	  "orange": "_3cLlE5QI9XJwY6e7jO5bLg",
	  "capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
	  "importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
	  "importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
	  "importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
	  "icon": "_12rnwIUewKT2PdtWMnNyD5",
	  "importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
	  "broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
	  "broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
	  "btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
	  "textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
	  "spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
	  "pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
	  "lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
	  "removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
	  "inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
	  "popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
	  "dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
	  "dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
	  "applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
	  "filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
	  "btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
	  "assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
	  "pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
	  "assTab": "y4LW63OuadI0JWTQBnbJ1",
	  "heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
	  "radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
	  "wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
	  "leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
	  "rightBox": "DP21PoKxwKk_vJyOuQTcr",
	  "gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
	  "actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
	  "gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
	  "actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
	  "gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
	  "morePref": "JBm94eKPIFI8vfiroATJ6",
	  "tile": "_1Ssp2zTovh7AwJWuRkgnge",
	  "tileItems": "_3cDqgy8AedDYzhy8Euosis",
	  "tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
	  "tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
	  "category": "_2Ow56TBY2Y24yY5SjVRU4l",
	  "innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
	  "maxScore": "_3uL97t2vemfuAs83cAFhjE",
	  "maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
	  "scored": "_12gGWK_s69JBGzOAX7ClkT",
	  "scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
	  "remTile": "_3vgBsvWRGVVRwIEDn1TquO",
	  "tileBody": "dF1WC_PeNjG87K2XGMIcS",
	  "tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
	  "gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
	  "gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
	  "assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
	  "blue": "K7acjAQMroOGGtUqqojYy",
	  "yellow": "G7N-PGOIbGO_ZkaqBu2mx",
	  "txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
	  "txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
	  "txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
	  "txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
	  "txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
	  "txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
	  "addTile": "lCw_kxhsAPcuM3yFAqvpF",
	  "addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
	  "addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
	  "commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
	  "totalScore": "FDG4LAia-7JDDtxb7R4Kb",
	  "totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
	  "textBox": "_13VdIFmMegxz_eR8VIXN_M",
	  "totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
	  "totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
	  "resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
	  "resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
	  "resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
	  "headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
	  "scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
	  "resultBody": "N6kKlySaRGbRcB4bBmpZ0",
	  "resGroup": "_2byM-_1N3yjHb2dpmlikdf",
	  "resTile": "DZeuj4DKkdAPKCgYd76RK",
	  "resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
	  "resRating": "R7j9mxFZmdmLgC7bPXpyN",
	  "txtSize": "_977ldMQMMiHQ0YG_61T3g",
	  "txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
	  "resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
	  "resInput": "_14gsxA36f-uYOfxGDvr_gi",
	  "activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
	  "feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
	  "fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
	  "feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
	  "profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
	  "profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
	  "profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
	  "name": "_25-6SxUiv8zhOMEVTRrg8w",
	  "commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
	  "addpdng": "_6rQH8tivz8ELIWszpbahs",
	  "good": "_3lOxcxDfxhPcuhLBJHo4Ur",
	  "vGood": "l_IAfocpDxfvpU316U0EI",
	  "fair": "_3I3YapUnBVxgs-ZsGf3Poh",
	  "poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _WorkDashboardReloadReducer = __webpack_require__(154);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// for pdf annotation
	// import __pdfjs from 'pdfjs-dist/build/pdf';
	// import PDFJSAnnotate from 'pdfjs-annotate';
	// import MyStoreAdapter from './myStoreAdapter';
	// var PDFJS = require("pdf-annotate.js");
	
	var _ref = _jsx('a', {
	  href: '#'
	}, void 0, _jsx('i', {
	  className: 'fa fa-arrow-left'
	}), _jsx(_reactIntl.FormattedMessage, {
	  id: 'previous'
	}));
	
	var _ref2 = _jsx('li', {
	  className: 'previous disabled'
	}, void 0, _jsx('a', {
	  href: '#'
	}, void 0, _jsx('i', {
	  className: 'fa fa-arrow-left'
	}), _jsx(_reactIntl.FormattedMessage, {
	  id: 'previous'
	})));
	
	var _ref3 = _jsx('a', {
	  href: '#'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'next'
	}), ' ', _jsx('i', {
	  className: 'fa fa-arrow-right'
	}));
	
	var _ref4 = _jsx('li', {
	  className: 'next disabled'
	}, void 0, _jsx('a', {
	  href: '#'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'next'
	}), ' ', _jsx('i', {
	  className: 'fa fa-arrow-right'
	})));
	
	var _ref5 = _jsx('i', {
	  className: 'fa fa-search-plus'
	});
	
	var _ref6 = _jsx('i', {
	  className: 'fa fa-search-minus'
	});
	
	var _ref7 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref8 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'topics_list'
	}));
	
	var _ref9 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref10 = _jsx('li', {});
	
	var _ref11 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref12 = _jsx(_reactFontawesome2.default, {
	  name: 'arrows-alt'
	});
	
	var _ref13 = _jsx(_reactFontawesome2.default, {
	  name: 'times'
	});
	
	var _ref14 = _jsx(_reactFontawesome2.default, {
	  name: 'arrows-alt'
	});
	
	var _ref15 = _jsx(_reactFontawesome2.default, {
	  name: 'times'
	});
	
	var PdfView = function (_Component) {
	  _inherits(PdfView, _Component);
	
	  function PdfView(props) {
	    _classCallCheck(this, PdfView);
	
	    var _this = _possibleConstructorReturn(this, (PdfView.__proto__ || Object.getPrototypeOf(PdfView)).call(this, props));
	
	    _this.handleClose = function () {
	      var obj = { waitforview: false, ssPdfView: false, pdfFileName: '', ssUploadedby: '', fileName: _this.props.fileName };
	      _this.props.closeCallback(obj);
	    };
	
	    _this.handleZoomIn = function (e) {
	      e.preventDefault();
	      _this.setState({
	        scale: _this.state.scale + 0.25
	      });
	    };
	
	    _this.handleZoomOut = function (e) {
	      e.preventDefault();
	      if (_this.state.scale > 1) {
	        _this.setState({
	          scale: _this.state.scale - 0.25
	        });
	      }
	    };
	
	    _this.syncPdfPage = function (objEntity) {
	      var obj = {
	        command: 'SYNC-PDF-PAGE',
	        content: { data: objEntity },
	        type: 'OBJECT'
	      };
	      _this.props.confObject.sendMessage(obj, 0);
	    };
	
	    _this.onDocumentComplete = _this.onDocumentComplete.bind(_this);
	    _this.onPageComplete = _this.onPageComplete.bind(_this);
	    _this.handlePrevious = _this.handlePrevious.bind(_this);
	    _this.handleNext = _this.handleNext.bind(_this);
	    _this.state = { page: 1, pages: 1, scale: 0.9 };
	
	    _this.HandleSyncPdfPage = _this.HandleSyncPdfPage.bind(_this);
	    _this.props.confObject.SyncPdfPageListener(_this.HandleSyncPdfPage);
	
	    return _this;
	  }
	
	  _createClass(PdfView, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      //changeBy: pranathi, fetching questionnaire data
	      var obj = {
	        topicId: this.props.workDashboardData.tid,
	        fileId: this.props.workDashboardData.fileId
	      };
	      this.props.dispatch((0, _WorkDashboardActions.getPdfFileData)(obj));
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.workDashboardReload.pdfView != nextProps.workDashboardReload.pdfView) {
	        var obj = {
	          topicId: this.props.workDashboardData.tid,
	          fileId: this.props.workDashboardData.fileId
	        };
	        this.props.dispatch((0, _WorkDashboardActions.getPdfFileData)(obj));
	      }
	    }
	  }, {
	    key: 'onDocumentComplete',
	    value: function onDocumentComplete(pages) {
	      var obj = {
	        page: 1, pages: pages
	      };
	      if (this.props.imHost == true && this.props.workDashboardData.sync == true) this.syncPdfPage(obj);else this.setState(obj);
	    }
	  }, {
	    key: 'onPageComplete',
	    value: function onPageComplete(page) {
	      this.setState({ page: page });
	    }
	  }, {
	    key: 'handlePrevious',
	    value: function handlePrevious() {
	      var obj = {
	        page: this.state.page - 1
	      };
	      if (this.props.imHost == true && this.props.workDashboardData.sync == true) this.syncPdfPage(obj);else this.setState(obj);
	    }
	  }, {
	    key: 'handleNext',
	    value: function handleNext() {
	      var obj = {
	        page: this.state.page + 1
	      };
	      if (this.props.imHost == true && this.props.workDashboardData.sync == true) {
	        this.syncPdfPage(obj);
	      } else {
	        this.setState(obj);
	      }
	    }
	  }, {
	    key: 'handleTopicList',
	    value: function handleTopicList() {
	      this.props.topicListCallback();
	    }
	  }, {
	    key: 'handleTopicName',
	    value: function handleTopicName() {
	      this.props.contantCallback(this.props.workDashboardData.topicContentDataDetails);
	    }
	  }, {
	    key: 'renderPagination',
	    value: function renderPagination(page, pages) {
	      var previousButton = _jsx('li', {
	        id: 'previous',
	        className: 'previous',
	        onClick: this.handlePrevious
	      }, void 0, _ref);
	      if (page === 1) {
	        previousButton = _ref2;
	      }
	      var nextButton = _jsx('li', {
	        id: 'next',
	        className: 'next',
	        onClick: this.handleNext
	      }, void 0, _ref3);
	      if (page === pages) {
	        nextButton = _ref4;
	      }
	      return _jsx('nav', {}, void 0, _jsx('ul', {
	        className: 'pager'
	      }, void 0, previousButton, _jsx('li', {}, void 0, _jsx('a', {
	        id: 'zoomIn',
	        href: '#',
	        onClick: this.handleZoomIn
	      }, void 0, _ref5)), _jsx('li', {}, void 0, _jsx('a', {
	        id: 'zoomOut',
	        href: '#',
	        onClick: this.handleZoomOut
	      }, void 0, _ref6)), nextButton));
	    }
	  }, {
	    key: 'fullScreen',
	
	
	    //changeBy: pranathi, disc: added full screen functionality
	    value: function fullScreen() {
	      var elem = document.getElementById("docFullscreen");
	      if (elem.requestFullscreen) {
	        elem.requestFullscreen();
	      } else if (elem.msRequestFullscreen) {
	        elem.msRequestFullscreen();
	      } else if (elem.mozRequestFullScreen) {
	        elem.mozRequestFullScreen();
	      } else if (elem.webkitRequestFullscreen) {
	        elem.webkitRequestFullscreen();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
	      var pagination = null;
	      var cls_breadCrum = _Dashboard2.default.breadCrum + ' ' + _Dashboard2.default.flexHeader + ' ';
	
	      if (this.state.pages) {
	        pagination = this.renderPagination(this.state.page, this.state.pages);
	      }
	      var pdfFileName = null;
	      var pathURL = null;
	      var fileName = null;
	      if (this.props.fileName) {
	        pdfFileName = this.props.fileName.substring(0, this.props.fileName.lastIndexOf(".")) + ".pdf";
	        pathURL = "/uploads/sharing_docs/" + pdfFileName;
	        fileName = this.props.fileName.substring(this.props.fileName.indexOf("_") + 1);
	      } else if (!_.isEmpty(this.props.workDashboardData.topicPdfFileData)) {
	        pdfFileName = this.props.workDashboardData.topicPdfFileData.fileName.substring(0, this.props.workDashboardData.topicPdfFileData.fileName.lastIndexOf(".")) + ".pdf";
	        pathURL = "/uploads/" + pdfFileName;
	        fileName = this.props.workDashboardData.topicPdfFileData.fileName.substring(this.props.workDashboardData.topicPdfFileData.fileName.indexOf("_") + 1);
	      }
	
	      // const { UI } = PDFJSAnnotate;
	      // // const VIEWER = document.getElementById('viewer');
	      // const VIEWER = this.refs.viewer;
	      // const RENDER_OPTIONS = {
	      //   documentId: pathURL,
	      //   pdfDocument: null,
	      //   scale: 1,
	      //   rotate: 0
	      // };
	
	      // PDFJS.workerSrc = 'pdf.worker.js';
	      // // PDFJSAnnotate.setStoreAdapter(MyStoreAdapter);
	
	      // PDFJS.getDocument(RENDER_OPTIONS.documentId).then((pdf) => {
	      //   RENDER_OPTIONS.pdfDocument = pdf;
	      //   VIEWER.appendChild(UI.createPage(1));
	      //   UI.renderPage(1, RENDER_OPTIONS);
	      // });
	      if (pdfFileName != null && pathURL != null && fileName != null) {
	        return _jsx('div', {
	          className: _Dashboard2.default.whiteCard
	        }, void 0, !this.props.fileName ? _jsx('div', {
	          className: cls_breadCrum
	        }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
	          id: 'roomName'
	        }, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref7, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
	          id: 'topicList',
	          onClick: this.handleTopicList.bind(this)
	        }, void 0, _ref8)), _ref9, _ref10, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
	          id: 'topicName',
	          onClick: this.handleTopicName.bind(this)
	        }, void 0, _jsx('span', {
	          title: this.props.workDashboardData.topicContentDataDetails.topicName
	        }, void 0, this.props.workDashboardData && this.props.workDashboardData.topicContentDataDetails && this.props.workDashboardData.topicContentDataDetails.topicName && this.props.workDashboardData.topicContentDataDetails.topicName.length > 20 ? this.props.workDashboardData.topicContentDataDetails.topicName.substring(0, 20) + '...' : this.props.workDashboardData.topicContentDataDetails.topicName))), _ref11, _jsx('li', {}, void 0, _jsx('span', {}, void 0, fileName)))) : this.props.imHost == true ? _jsx('div', {
	          className: cls_breadCrum
	        }, void 0, _jsx('div', {
	          className: _Dashboard2.default.pdfViewheader
	        }, void 0, _jsx('h1', {
	          title: fileName,
	          className: _Dashboard2.default.mainHeadingTxt
	        }, void 0, fileName)), _jsx('div', {
	          className: _Dashboard2.default.flexRightAction
	        }, void 0, _jsx('div', {
	          className: _Dashboard2.default.flexActionList
	        }, void 0, _jsx('span', {
	          id: 'fullScreen',
	          className: _Dashboard2.default.flexActionListSpan,
	          onClick: this.fullScreen.bind(this),
	          title: 'Full screen'
	        }, void 0, _ref12)), _jsx('div', {
	          className: _Dashboard2.default.flexActionList
	        }, void 0, _jsx('span', {
	          id: 'closePdf',
	          className: _Dashboard2.default.flexActionListSpan,
	          onClick: this.handleClose,
	          title: 'Close'
	        }, void 0, _ref13)))) : _jsx('div', {
	          className: cls_breadCrum
	        }, void 0, _jsx('div', {
	          className: _Dashboard2.default.pdfViewheader
	        }, void 0, _jsx('h1', {
	          className: _Dashboard2.default.mainHeadingTxt
	        }, void 0, fileName)), _jsx('div', {
	          className: _Dashboard2.default.flexRightAction
	        }, void 0, _jsx('div', {
	          className: _Dashboard2.default.flexActionList
	        }, void 0, _jsx('span', {
	          id: 'fullScreen',
	          className: _Dashboard2.default.flexActionListSpan,
	          onClick: this.fullScreen.bind(this),
	          title: 'Full screen'
	        }, void 0, _ref14)), this.props.workDashboardData.ssUploadedby == this.props.loggedInData.data._id ? _jsx('div', {
	          className: _Dashboard2.default.flexActionList
	        }, void 0, _jsx('span', {
	          id: 'closePdf',
	          className: _Dashboard2.default.flexActionListSpan,
	          onClick: this.handleClose,
	          title: 'Close'
	        }, void 0, _ref15)) : null)), _jsx(_reactBootstrap.Grid, {
	          fluid: true
	        }, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
	          md: 12
	        }, void 0, _jsx('div', {
	          id: 'docFullscreen'
	        }, void 0, _jsx('div', {
	          className: _component2.default.assTab
	        }, void 0, pagination), _jsx('div', {
	          className: _component2.default.pdfBlock
	        }, void 0, _jsx('div', {
	          className: _component2.default.assCanvas
	        }, void 0, _jsx(_reactPdfJs2.default, {
	          file: pathURL,
	          onDocumentComplete: this.onDocumentComplete,
	          onPageComplete: this.onPageComplete,
	          page: this.state.page,
	          scale: this.state.scale
	        }))))))));
	      } else {
	        return null;
	      }
	    }
	
	    //////////////////////////
	
	
	  }, {
	    key: 'HandleSyncPdfPage',
	
	    ///////////////////////////
	    value: function HandleSyncPdfPage(obj) {
	      this.setState(obj);
	    }
	  }]);
	
	  return PdfView;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
	    loggedInData: (0, _LoginReducer.loggedInData)(state),
	    workDashboardReload: (0, _WorkDashboardReloadReducer.workDashboardReload)(state)
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(PdfView);

/***/ },

/***/ 426:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _roles = __webpack_require__(46);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
		id: 'submitted_by'
	});
	
	var PollSubmissionData = function (_Component) {
		_inherits(PollSubmissionData, _Component);
	
		function PollSubmissionData(props) {
			_classCallCheck(this, PollSubmissionData);
	
			return _possibleConstructorReturn(this, (PollSubmissionData.__proto__ || Object.getPrototypeOf(PollSubmissionData)).call(this, props));
		}
	
		_createClass(PollSubmissionData, [{
			key: 'viewUser',
			value: function viewUser() {
				_reactRouter.browserHistory.push('/profile/' + this.props.data.submittedBy._id);
			}
		}, {
			key: 'render',
			value: function render() {
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var answerBlock = {
					marginLeft: '40px'
				};
				var answerLabel = {
					fontWeight: '600',
					color: 'rgba(0,0,0,0.54)'
				};
				var answer = {
					fontWeight: 'normal',
					color: 'rgba(0,0,0,0.87)'
				};
	
				var data = this.props.data;
				var profileImage = data ? data.submittedBy ? data.submittedBy.profile ? data.submittedBy.profile.profileImage : '' : '' : '';
				if (profileImage == '' || profileImage == undefined || profileImage == null) {
					var imagePath = '/images/profile-pics/defaultStudent.jpg';
				} else {
					var imagePath = '/uploads/' + profileImage;
				}
	
				if (this.props.data != null) {
					return _jsx('li', {}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
						md: 12
					}, void 0, _jsx('div', {
						className: cls_topicAuthor
					}, void 0, _jsx('img', {
						id: 'viewprofile',
						src: imagePath,
						onClick: this.viewUser.bind(this),
						title: this.props.intl.messages.viewprofile
					}), _jsx('div', {
						className: _Dashboard2.default.authorInfo
					}, void 0, _jsx('p', {
						className: _Dashboard2.default.authorName
					}, void 0, this.props.data.submittedBy.firstname, ' ', this.props.data.submittedBy.lastname), _jsx('p', {
						className: _Dashboard2.default.authorDisg
					}, void 0, _ref))), _jsx('p', {
						style: answerBlock
					}, void 0, _jsx('span', {
						style: answerLabel
					}, void 0, 'Answer : '), _jsx('span', {
						style: answer
					}, void 0, this.props.data.answer)))));
				} else return;
			}
		}]);
	
		return PollSubmissionData;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			intl: state.intl
		};
	}
	
	PollSubmissionData.contextTypes = {
		intl: _react2.default.PropTypes.object.isRequired
	
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(PollSubmissionData);

/***/ },

/***/ 427:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Sources = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(64);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _ControlVideo = __webpack_require__(423);
	
	var _ControlVideo2 = _interopRequireDefault(_ControlVideo);
	
	var _ConferenceActions = __webpack_require__(38);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _StatsReducer = __webpack_require__(165);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	var _ref = _jsx('input', {
		id: 'vc_source',
		type: 'radio',
		name: 'tabs',
		defaultChecked: true
	});
	
	var _ref2 = _jsx('label', {
		htmlFor: 'vc_source'
	}, void 0, _jsx('i', {
		className: 'fa fa-code'
	}), _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'sources'
	})));
	
	var _ref3 = _jsx('input', {
		id: 'vc_cr',
		type: 'radio',
		name: 'tabs'
	});
	
	var _ref4 = _jsx('label', {
		htmlFor: 'vc_cr'
	}, void 0, _jsx('i', {
		className: 'fa fa-video-camera'
	}), ' ', _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'resolutions'
	})));
	
	var _ref5 = _jsx(_reactIntl.FormattedMessage, {
		id: 'camera'
	});
	
	var _ref6 = _jsx(_reactIntl.FormattedMessage, {
		id: 'Audio_Inputs'
	});
	
	var _ref7 = _jsx('i', {
		className: 'fa fa-times'
	});
	
	var _ref8 = _jsx(_reactIntl.FormattedMessage, {
		id: 'close'
	});
	
	var _ref9 = _jsx('i', {
		className: 'fa fa-check'
	});
	
	var _ref10 = _jsx(_reactIntl.FormattedMessage, {
		id: 'apply'
	});
	
	var _ref11 = _jsx('i', {
		className: 'fa fa-plus'
	});
	
	var _ref12 = _jsx(_reactIntl.FormattedMessage, {
		id: 'add'
	});
	
	var _ref13 = _jsx('h3', {}, void 0, 'SIF - (320 x 240)', _jsx('p', {}, void 0, 'For SIF Video Resolution'));
	
	var _ref14 = _jsx('h3', {}, void 0, 'VGA - (640x480)', _jsx('p', {}, void 0, 'For Video Graphics Array (VGA) Video Resolution'));
	
	var _ref15 = _jsx('h3', {}, void 0, 'HD720p - (1280x720)', _jsx('p', {}, void 0, 'For HD Video Resolution'));
	
	var _ref16 = _jsx('h3', {}, void 0, 'HD1080p - (1920x1080)', _jsx('p', {}, void 0, 'For Full HD Video Resolution'));
	
	var _ref17 = _jsx('i', {
		className: 'fa fa-times'
	});
	
	var _ref18 = _jsx(_reactIntl.FormattedMessage, {
		id: 'close'
	});
	
	var _ref19 = _jsx('i', {
		className: 'fa fa-check'
	});
	
	var _ref20 = _jsx(_reactIntl.FormattedMessage, {
		id: 'apply'
	});
	
	var _ref21 = _jsx('option', {
		value: 'auto'
	}, void 0, 'Auto');
	
	var _ref22 = _jsx('option', {
		value: '2000'
	}, void 0, '2000 kbps');
	
	var _ref23 = _jsx('option', {
		value: '1000'
	}, void 0, '1000 kbps');
	
	var _ref24 = _jsx('option', {
		value: '500'
	}, void 0, '500 kbps');
	
	var _ref25 = _jsx('option', {
		value: '250'
	}, void 0, '250 kbps');
	
	var _ref26 = _jsx('option', {
		value: '125'
	}, void 0, '125 kbps');
	
	var _ref27 = _jsx('button', {
		className: 'btn btn-xs btn-danger'
	}, void 0, _jsx('i', {
		className: 'fa fa-times'
	}), ' Cancle');
	
	var _ref28 = _jsx('button', {
		className: 'btn btn-xs btn-success'
	}, void 0, _jsx('i', {
		className: 'fa fa-check'
	}), ' Apply');
	
	var _ref29 = _jsx('h2', {}, void 0, 'Transport');
	
	var _ref30 = _jsx('h2', {}, void 0, 'Audio');
	
	var _ref31 = _jsx('h2', {}, void 0, 'Video');
	
	var _ref32 = _jsx('p', {}, void 0, 'You are Presenter Now!');
	
	var Sources = exports.Sources = function (_Component) {
		_inherits(Sources, _Component);
	
		function Sources(props) {
			_classCallCheck(this, Sources);
	
			var _this = _possibleConstructorReturn(this, (Sources.__proto__ || Object.getPrototypeOf(Sources)).call(this, props));
	
			_this.state = {
				resolution: 'vga'
			};
			return _this;
		}
	
		_createClass(Sources, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				this.setState({ resolution: this.props.conferenceDetails.videoResolution });
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (nextProps.conferenceDetails.videoResolution != this.state.resolution) {
					this.setState({ resolution: nextProps.conferenceDetails.videoResolution });
				}
			}
		}, {
			key: 'applydevice',
			value: function applydevice(e) {
				// console.log(e.currentTarget, e);
				var cameraId = _reactDom2.default.findDOMNode(this.refs["objCameraList"]).value;
	
				var audioId = _reactDom2.default.findDOMNode(this.refs["objAudioList"]).value;
	
				this.props.confObject.applyDevices({ camera: cameraId, audio: audioId });
	
				this.props.flipfunc();
			}
		}, {
			key: 'applyres',
			value: function applyres(res) {
				this.setState({ resolution: res });
				// console.log("Resolution", res);
			}
		}, {
			key: 'applyresolution',
			value: function applyresolution() {
				this.props.confObject.applyResolution(this.state.resolution);
				this.props.dispatch((0, _ConferenceActions.setVideoResolution)(this.state.resolution));
				this.props.flipfunc();
			}
		}, {
			key: 'addcamera',
			value: function addcamera() {
				var cameraId = _reactDom2.default.findDOMNode(this.refs["objCameraList"]).value;
	
				var audioId = _reactDom2.default.findDOMNode(this.refs["objAudioList"]).value;
	
				this.props.confObject.createAdditionalCamera(cameraId, audioId);
				this.props.flipfunc();
			}
		}, {
			key: 'cancelaction',
			value: function cancelaction() {
				this.props.flipfunc();
			}
		}, {
			key: 'render',
			value: function render() {
				console.log("DEVICES", this.props.cameraDevices, this.props.audioIn);
				var cls_camResolutionBlock = _Dashboard2.default.camResolutionBlock + ' clearfix';
				var cls_chooseInput = _Dashboard2.default.chooseInput + ' ' + _Dashboard2.default.radio;
				var cls_reportItems = _Dashboard2.default.reportItems + ' clearfix';
				return _jsx('div', {
					className: _Dashboard2.default.controllerBock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.tabContainer
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.emptyFill
				}), _ref, _ref2, _ref3, _ref4, _jsx('div', {
					className: _Dashboard2.default.tabContent + ' ' + _Dashboard2.default.contentSource,
					id: 'contentSource'
				}, void 0, _jsx('form', {
					className: _Dashboard2.default.controllerForm
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.formGroup
				}, void 0, _jsx('label', {
					className: _Dashboard2.default.formGroupLabel
				}, void 0, _ref5, ' : '), _react2.default.createElement(
					'select',
					{ ref: 'objCameraList', className: _Dashboard2.default.formControl },
					this.props.cameraDevices.map(function (devices) {
						return _jsx('option', {
							value: devices[0]
						}, devices[0], devices[1]);
					})
				)), _jsx('div', {
					className: _Dashboard2.default.formGroup
				}, void 0, _jsx('label', {
					className: _Dashboard2.default.formGroupLabel
				}, void 0, _ref6, ' : '), _react2.default.createElement(
					'select',
					{ ref: 'objAudioList', className: _Dashboard2.default.formControl },
					this.props.audioIn.map(function (devices) {
						return _jsx('option', {
							value: devices[0]
						}, devices[0], devices[1]);
					})
				)), _jsx('div', {
					className: _Dashboard2.default.formGropBottom
				}, void 0, _jsx('button', {
					type: 'button',
					onClick: this.cancelaction.bind(this),
					className: 'btn btn-xs btn-danger'
				}, void 0, _ref7, ' ', _ref8), '\xA0', _jsx('button', {
					type: 'button',
					className: 'btn btn-xs btn-success',
					onClick: this.applydevice.bind(this)
				}, void 0, _ref9, ' ', _ref10), '\xA0', this.props.imHost ? _jsx('button', {
					type: 'button',
					onClick: this.addcamera.bind(this),
					className: 'btn btn-xs btn-danger'
				}, void 0, _ref11, ' ', _ref12) : null))), _jsx('div', {
					className: _Dashboard2.default.tabContent + ' ' + _Dashboard2.default.contentCameraResolution,
					id: 'contentCameraResolution'
				}, void 0, _jsx('form', {
					className: _Dashboard2.default.controllerForm
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.cameraSettingBlock
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx('div', {
					className: cls_camResolutionBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.cameraInfo
				}, void 0, _ref13), _jsx('div', {
					className: _Dashboard2.default.selectRadioBlock
				}, void 0, _jsx('label', {}, void 0, _jsx('input', {
					onChange: this.applyres.bind(this, 'sif'),
					type: 'radio',
					className: cls_chooseInput,
					value: 'sif',
					name: 'objResolution',
					checked: this.state.resolution == 'sif' ? true : false
				}))))), _jsx('li', {}, void 0, _jsx('div', {
					className: cls_camResolutionBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.cameraInfo
				}, void 0, _ref14), _jsx('div', {
					className: _Dashboard2.default.selectRadioBlock
				}, void 0, _jsx('label', {}, void 0, _react2.default.createElement('input', { onChange: this.applyres.bind(this, 'vga'), ref: 'objResolution', type: 'radio', className: cls_chooseInput, value: 'vga', name: 'objResolution', checked: this.state.resolution == 'vga' ? true : false }))))), _jsx('li', {}, void 0, _jsx('div', {
					className: cls_camResolutionBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.cameraInfo
				}, void 0, _ref15), _jsx('div', {
					className: _Dashboard2.default.selectRadioBlock
				}, void 0, _jsx('label', {}, void 0, _react2.default.createElement('input', { onChange: this.applyres.bind(this, 'hd720p'), ref: 'objResolution', type: 'radio', className: cls_chooseInput, value: 'hd720p', name: 'objResolution', checked: this.state.resolution == 'hd720p' ? true : false }))))), _jsx('li', {}, void 0, _jsx('div', {
					className: cls_camResolutionBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.cameraInfo
				}, void 0, _ref16), _jsx('div', {
					className: _Dashboard2.default.selectRadioBlock
				}, void 0, _jsx('label', {}, void 0, _jsx('input', {
					onChange: this.applyres.bind(this, 'hd1080p'),
					type: 'radio',
					className: cls_chooseInput,
					value: 'hd1080p',
					name: 'objResolution',
					checked: this.state.resolution == 'hd1080p' ? true : false
				}))))))), _jsx('div', {
					className: _Dashboard2.default.formGropBottom
				}, void 0, _jsx('button', {
					type: 'button',
					className: 'btn btn-xs btn-danger',
					onClick: this.cancelaction.bind(this)
				}, void 0, _ref17, ' ', _ref18), '\xA0', _jsx('button', {
					type: 'button',
					className: 'btn btn-xs btn-success',
					onClick: this.applyresolution.bind(this)
				}, void 0, _ref19, ' ', _ref20)))), _jsx('div', {
					className: _Dashboard2.default.tabContent + ' ' + _Dashboard2.default.contentBandwidth,
					id: 'contentBandwidth'
				}, void 0, _jsx('form', {
					className: _Dashboard2.default.controllerForm
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.formGroup
				}, void 0, _jsx('label', {
					className: _Dashboard2.default.formGroupLabel
				}, void 0, 'Bit rate : '), _jsx('select', {
					id: 'objBitRate',
					className: _Dashboard2.default.formControl
				}, void 0, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26)), _jsx('div', {
					className: _Dashboard2.default.formGroup
				}, void 0, _jsx('label', {
					className: _Dashboard2.default.formGroupLabel
				}, void 0, 'Frame rate : '), _jsx('span', {
					className: _Dashboard2.default.lspanCgrl
				}, void 0, 'Auto'), _jsx('input', {
					type: 'range',
					defaultValue: '5',
					className: _Dashboard2.default.rangeSlider
				}), _jsx('span', {
					className: _Dashboard2.default.lspanCgrl
				}, void 0, 'Max: 60'), _jsx('div', {
					className: _Dashboard2.default.graphBox
				}, void 0)), _jsx('div', {
					className: _Dashboard2.default.formGropBottom
				}, void 0, _ref27, '\xA0', _ref28))), _jsx('div', {
					className: _Dashboard2.default.tabContent + ' ' + _Dashboard2.default.contentReports,
					id: 'contentReports'
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.reportBlock
				}, void 0, _jsx('ul', {
					className: _Dashboard2.default.clearfix
				}, void 0, _jsx('li', {}, void 0, _ref29, _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'protocol'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, 'udp')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'local IP'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '203.196.151.154')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'local port'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '42940')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'remote IP'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '94.23.86.78')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'remote port'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '40206')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'bytes sent'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '34752725')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'protocol'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '617516')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'RTT'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '711 ms')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'available bitrate'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '212 kbps')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'transmit bitrate'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '147 kbps'))), _jsx('li', {}, void 0, _ref30, _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'codec'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, 'opus')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'ssrc'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '3117143812')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'bytes sent'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, 'bytes sent')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'packets sent'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '186630')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'packets lost'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '4900'))), _jsx('li', {}, void 0, _ref31, _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'codec'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, 'VP8')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'ssrc'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '3417449744')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'bytes sent'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '125199148')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'packets sent'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '174366')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'packets los'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '169')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'frames encoded'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '116521')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'frame size'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '640 x 480')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'frame rate'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '30')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'NACK count'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '17677')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'PLI count'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '121')), _jsx('div', {
					className: cls_reportItems
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.itemsKey
				}, void 0, 'FIR count'), _jsx('div', {
					className: _Dashboard2.default.itemsValue
				}, void 0, '0'))))), _jsx('div', {
					className: _Dashboard2.default.yourPresenterInfo
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.circle24
				}, void 0), _jsx('div', {
					className: _Dashboard2.default.yourPresenterTxt
				}, void 0, _ref32)))));
			}
		}]);
	
		return Sources;
	}(_react.Component);
	
	function mapStateToProps(state) {
		return {
			conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state)
		};
	}
	
	Sources.defaultProps = {};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(Sources);

/***/ },

/***/ 428:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.VideoInScroller = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactRedux = __webpack_require__(16);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('img', {
	  src: '/images/white-icons/speaker-white.png'
	});
	
	var VideoInScroller = exports.VideoInScroller = function (_Component) {
	  _inherits(VideoInScroller, _Component);
	
	  function VideoInScroller(props) {
	    _classCallCheck(this, VideoInScroller);
	
	    var _this = _possibleConstructorReturn(this, (VideoInScroller.__proto__ || Object.getPrototypeOf(VideoInScroller)).call(this, props));
	
	    _this.stream = null;
	    _this.state = {
	      showing: false,
	      mute: props.stream.mute || false,
	      volume: props.stream.volume || false
	    };
	    return _this;
	  }
	
	  _createClass(VideoInScroller, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.stream) {
	        var that = this;
	        if (this.props.stream.mediaStream) {
	          this.stream = this.props.stream;
	          this.showVideo(this.stream);
	        } else {
	          this.props.confObject.trySubscribeStream(this.props.stream, function (stream) {
	            that.stream = stream;
	            that.showVideo(stream);
	          });
	        }
	      }
	    }
	  }, {
	    key: 'showVideo',
	    value: function showVideo(stream) {
	      var _video = document.getElementById(this.props.stream.id());
	      if (_video) {
	        //Create URL
	        // (window.URL || webkitURL).createObjectURL(that.stream);
	        var _streamURL = (window.URL || webkitURL).createObjectURL(stream.mediaStream);
	        _video.src = _streamURL;
	        // _video.srcObject = stream.mediaStream;
	        // _video.volume = 0;
	
	        this.setState({ showing: true });
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.stream.hide();
	    }
	  }, {
	    key: 'setSpeaker',
	    value: function setSpeaker() {
	      // alert(this.props.stream);
	      // this.props.speaker(this.props.stream);
	      this.props.confObject.setSpeakerOn(this.props.stream.from, this.props.stream.id());
	    }
	  }, {
	    key: 'requestFullScreen',
	    value: function requestFullScreen(e) {
	      var elem = document.getElementById(this.props.stream.id());
	      if (elem.mozRequestFullScreen) {
	        elem.mozRequestFullScreen();
	      } else if (elem.webkitEnterFullScreen) {
	        elem.webkitEnterFullScreen();
	      }
	      // e.currentTarget.requestFullscreen();
	    }
	  }, {
	    key: 'removeAddtional',
	    value: function removeAddtional(sid) {
	      console.log("Remove Index", sid);
	      this.props.confObject.removeAdditionalCamera(sid);
	    }
	  }, {
	    key: 'mute',
	    value: function mute() {
	      var _mute = this.props.confObject.MuteOrUnMute(this.props.stream);
	      this.setState({ mute: _mute });
	      // this.setState({volume: _mute});
	    }
	  }, {
	    key: 'mute_v',
	    value: function mute_v(blockval) {
	      if (blockval) {
	        return;
	      }
	      var _mute = this.props.confObject.volumeOnorOff(this.props.stream);
	      this.setState({ volume: _mute });
	      // this.setState({mute: _mute});
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      console.log("props imHost === ", this.props.conferenceDetails.imHost);
	      var scrlVID = 'scrlvid' + this.props.streamId;
	      var scrlStyle = {
	        flex: '0 0 100%'
	      };
	
	      var subVID = 'subvid' + this.props.streamId;
	      var subStyle = {
	        width: '160px',
	        height: '90px',
	        position: 'none'
	      };
	      /*<div id={scrlVID} className="rsc-slider-item" style={scrlStyle}>
	          <div id={subVID} className="rsc-slider-item-img rsc-slider-item_transparent" style={subStyle}>
	           </div>
	        </div> */
	      return _jsx('div', {
	        id: scrlVID,
	        className: 'rsc-slider-item',
	        style: scrlStyle
	      }, void 0, this.props.stream.additional ? _jsx('div', {
	        className: _Dashboard2.default.removeOption,
	        title: 'Remove Additional Camera!',
	        onClick: this.removeAddtional.bind(this, this.props.stream.sid)
	      }, void 0, 'x') : null, this.props.conferenceDetails.imHost ? _jsx('div', {
	        className: _Dashboard2.default.speakerRemote,
	        onClick: this.setSpeaker.bind(this),
	        title: this.props.intl.messages.become_speaker
	      }, void 0, _ref) : null, this.props.stream ? _jsx('div', {
	        className: _Dashboard2.default.nameVideo,
	        style: { maxWidth: "120px" }
	      }, void 0, this.props.stream.fname) : 'Loading...', _jsx('div', {
	        id: subVID,
	        className: 'rsc-slider-item-img rsc-slider-item_transparent',
	        style: subStyle
	      }, void 0, _jsx('video', {
	        onDoubleClick: this.requestFullScreen.bind(this),
	        id: this.props.stream.id(),
	        autoPlay: true
	      })), _jsx('div', {
	        className: _Dashboard2.default.controlBar
	      }, void 0, this.state.volume ? _jsx(_reactFontawesome2.default, {
	        name: 'volume-off',
	        title: this.props.intl.messages.volume_on_off,
	        onClick: this.mute_v.bind(this, false)
	      }) : _jsx(_reactFontawesome2.default, {
	        name: 'volume-up',
	        title: this.props.intl.messages.volume_on_off,
	        onClick: this.mute_v.bind(this, this.state.mute)
	      }), '\xA0\xA0', this.props.conferenceDetails.imHost ? this.props.stream && this.props.stream.mute ? !this.state.volume ? _jsx(_reactFontawesome2.default, {
	        title: this.props.intl.messages.remote_mute_unmute,
	        name: 'microphone-slash',
	        onClick: this.mute.bind(this)
	      }) : '' : _jsx(_reactFontawesome2.default, {
	        title: this.props.intl.messages.remote_mute_unmute,
	        name: 'microphone',
	        onClick: this.mute.bind(this)
	      }) : ''));
	    }
	  }]);
	
	  return VideoInScroller;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state)
	  };
	}
	
	VideoInScroller.contextTypes = {};
	
	VideoInScroller.defaultProps = {};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)((0, _reactIntl.injectIntl)(VideoInScroller));

/***/ },

/***/ 430:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.default = ImageSliderHoc;
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function ImageSliderHoc(Component) {
	  var WrapperComponent = function (_React$Component) {
	    _inherits(WrapperComponent, _React$Component);
	
	    function WrapperComponent(props) {
	      _classCallCheck(this, WrapperComponent);
	
	      return _possibleConstructorReturn(this, (WrapperComponent.__proto__ || Object.getPrototypeOf(WrapperComponent)).call(this, props));
	    }
	
	    _createClass(WrapperComponent, [{
	      key: 'renameImages',
	      value: function renameImages(images) {
	        var imagesArray = Array.isArray(images) ? images : [];
	        return imagesArray.map(function (image, count) {
	          return image + ('?rscver' + count);
	        });
	      }
	    }, {
	      key: 'positionCalculator',
	      value: function positionCalculator(options) {
	        var calculator = {
	          skipScrollIfNonInfinite: function skipScrollIfNonInfinite(visibleItems, currentPosition, nextPosition) {
	            if (!options.isInfinite && nextPosition < 0) {
	              return currentPosition;
	            }
	          },
	
	          scrollIfInfinite: function scrollIfInfinite(visibleItems, currentPosition, nextPosition) {
	            if (options.isInfinite && nextPosition < 0) {
	              return nextPosition + visibleItems;
	            }
	          },
	
	          scrollToBeginningIfEnd: function scrollToBeginningIfEnd(visibleItems, currentPosition, nextPosition) {
	            if (nextPosition + visibleItems > options.totalItems) {
	              return 0;
	            }
	          },
	
	          skipScrollIfEnd: function skipScrollIfEnd(visibleItems, currentPosition, nextPosition) {
	            if (!options.isInfinite && nextPosition + visibleItems > options.totalItems) {
	              return currentPosition;
	            }
	            if (!options.isInfinite && nextPosition < 0) {
	              return currentPosition;
	            }
	          }
	        };
	        return calculator;
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        // console.log(this.props.children.length, "Logical Refresh", this.props.length, );
	        // this.props.length
	        var images = this.renameImages(this.props.children);
	        var calculator = this.positionCalculator({
	          isInfinite: this.props.isInfinite,
	          totalItems: this.props.length /*this.props.children.length*/
	        });
	        return _react2.default.createElement(Component, _extends({}, this.props, {
	          images: images,
	          calculator: calculator
	        }));
	      }
	    }]);
	
	    return WrapperComponent;
	  }(_react2.default.Component);
	
	  WrapperComponent.defaultProps = {
	    isInfinite: true,
	    delay: 5000,
	    visibleItems: 4
	  };
	
	  return WrapperComponent;
	}

/***/ },

/***/ 482:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	exports.ErrorMessage = ErrorMessage;
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _App = {
		"container": "_4uEyKcd5WHob5qPzotT7",
		"goBackDash": "rVqW_eC3X5xdbAEEPWOTI",
		"goTextDash": "_3fNxAADkK9yWDbFAr6IeYF",
		"sectionMain": "COZIMIWpKavlm2062DfRs",
		"aligner": "FLVQcC2-9gssOnXND5deg",
		"centerAligner": "Es8zQdVtQLLTnTzA4bWD4",
		"errorIcon": "gR17NZJlxFmunqSl_VnUj",
		"paraVal": "_2v6sCMxw2Fiyrsc-9RaA4C"
	};
	
	var _App2 = _interopRequireDefault(_App);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _ref = _jsx('a', {
		href: '/dashboard'
	}, void 0, _jsx('button', {}, void 0, ' Back'));
	
	var _ref2 = _jsx('img', {
		src: '/images/invalid.png',
		alt: 'Invalid request'
	});
	
	function ErrorMessage(props, context) {
		var _message = _jsx(_reactIntl.FormattedMessage, {
			id: props.message
		});
		return _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
			md: 12
		}, void 0, _jsx('div', {
			className: _App2.default.aligner
		}, void 0, _jsx('div', {
			className: _App2.default.centerAligner
		}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
			md: 6
		}, void 0, _jsx('div', {
			className: _App2.default.goBackDash
		}, void 0, _ref), _jsx('div', {
			className: _App2.default.errorIcon
		}, void 0, _ref2)), _jsx(_reactBootstrap.Col, {
			md: 6
		}, void 0, _jsx('div', {
			className: _App2.default.goTextDash
		}, void 0, _jsx('h3', {}, void 0, 'Oops! ', _message, '.'), _jsx('p', {}, void 0, 'Description goes here. ', _message, '.'))))))));
	}
	
	exports.default = (0, _reactIntl.injectIntl)(ErrorMessage);

/***/ },

/***/ 484:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(64);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _reactRedux = __webpack_require__(16);
	
	var _Modal = __webpack_require__(52);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _Loading = __webpack_require__(142);
	
	var _Loading2 = _interopRequireDefault(_Loading);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	var _ref = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref2 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'assignment_list'
	}));
	
	var _ref3 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
		id: 'author'
	});
	
	var _ref5 = _jsx('h3', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'description'
	}));
	
	var _ref6 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'documents'
	}));
	
	var _ref7 = _jsx('li', {}, void 0, _jsx('p', {}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_files_yet'
	}), '...')));
	
	var _ref8 = _jsx('p', {}, void 0, 'Assignment Submitted');
	
	var _ref9 = _jsx(_reactFontawesome2.default, {
		name: 'times'
	});
	
	var AssignmentContent = function (_Component) {
		_inherits(AssignmentContent, _Component);
	
		function AssignmentContent(props) {
			_classCallCheck(this, AssignmentContent);
	
			var _this = _possibleConstructorReturn(this, (AssignmentContent.__proto__ || Object.getPrototypeOf(AssignmentContent)).call(this, props));
	
			_initialiseProps.call(_this);
	
			_this.imageData = {};
			_this.quill = false;
			_this.handleSelection = _this.handleSelection.bind(_this);
			_this.props.confObject.AssignmentContentSelectListener(_this.handleSelection);
			_this.setDeleteResponse = _this.setDeleteResponse.bind(_this);
			_this.state = {
				fileName: '',
				uploadFile: true,
				loading: false
			};
			_this.resultData = [];
			return _this;
		}
	
		_createClass(AssignmentContent, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				this.quill = new Quill(_reactDom2.default.findDOMNode(this.refs.editor), {
					modules: {
						toolbar: [[{ 'header': [1, 2, 3, 4, 5, 6, false] }], ['bold', 'italic', 'underline', 'link', 'video'], ['image', 'code-block'], ['formula'], [{ 'size': ['small', false, 'large', 'huge'] }], [{ 'list': 'ordered' }, { 'list': 'bullet' }], [{ 'script': 'sub' }, { 'script': 'super' }], [{ 'color': [] }, { 'background': [] }], [{ 'align': [] }]],
						formula: true
					},
					placeholder: this.props.intl.messages.no_data_yet,
					readOnly: true,
					theme: 'bubble'
				});
				this.quill.setContents(this.props.workDashboardData.assignmentContentData.content);
				if (this.props.workDashboardData.assignmentContentData && this.props.workDashboardData.assignmentContentData.submissions.length > 0) {
					var student = _.find(this.props.workDashboardData.assignmentContentData.submissions, ['studentId', this.props.workDashboardData.uid]);
					if (student != undefined) {
						//Changes made by prateek for bug#3111
						// this.resultData = this.props.workDashboardData.assignmentContentData.submissions[0].result;
						this.resultData = student.result;
						this.setState({
							// fileName : this.props.workDashboardData.assignmentContentData.submissions[0].fileName
							fileName: student.fileName,
							uploadFile: false
						});
					}
				}
			}
		}, {
			key: 'handleAssignmentList',
			value: function handleAssignmentList() {
				this.props.assignmentListCallback();
				var obj = { current: 'assignmentList', assignmentContent: false, assignmentList: true, assignmentContentData: null, assignmentContentIndex: null };
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'setSelector',
			value: function setSelector() {
				if (this.quill != null) {
					var obj = null;
					if (this.props.workDashboardData.sync == true && this.props.imHost == true) {
						if (window.getSelection) {
							var range = window.getSelection().getRangeAt(0);
							var preSelectionRange = range.cloneRange();
							preSelectionRange.selectNodeContents(this.refs.editor);
							preSelectionRange.setEnd(range.startContainer, range.startOffset);
							var start = preSelectionRange.toString().length;
	
							obj = {
								start: start,
								end: start + range.toString().length,
								uid: this.props.workDashboardData.uid
							};
						} else if (document.selection && document.selection.type != "Control") {
							var selectedTextRange = document.selection.createRange();
							var preSelectionTextRange = document.body.createTextRange();
							preSelectionTextRange.moveToElementText(this.refs.editor);
							preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
							var _start = preSelectionTextRange.text.length;
	
							obj = {
								start: _start,
								end: _start + selectedTextRange.text.length,
								uid: this.props.workDashboardData.uid
							};
						}
						this.handleAssignmentContSelSync(obj);
					}
				}
			}
		}, {
			key: 'selectHandler',
			value: function selectHandler() {
				this.setSelector();
			}
		}, {
			key: 'saveFile',
			value: function saveFile(obj) {
				obj['roomId'] = this.props.workDashboardData.assignmentContentData.roomId, obj['studentId'] = this.props.workDashboardData.uid, obj['assignmentId'] = this.props.workDashboardData.assignmentContentData._id;
	
				//code added by - Najib, set spinner while uploading file
				this.setState({ loading: true });
				var data = obj;
				// console.log("sent data -- ", data);
				var url = "/api/upload-assignment-submission";
				var self = this;
				FileAPI.upload({
					data: data,
					url: url,
					complete: function complete(err, res) {
						//console.log(err)
						var resData = JSON.parse(res.response);
						if (err) {
							console.log("err---", err);
							self.setState({ uploadFile: true });
							alertify.alert("Error", resData.error, function (result) {});
						} else {
							// console.log("res data --- ", res);
	
							if (resData.status) {
								var _obj = { current: 'assignmentList', assignmentContent: true, assignmentList: false, assignmentContentData: resData.data };
								self.handleWorkDashboard(_obj);
								var student = _.find(resData.data.submissions, ['studentId', self.props.workDashboardData.uid]);
								if (student != undefined) {
									self.setState({
										fileName: student.fileName,
										uploadFile: false
									});
								}
								var arr = self.props.workDashboardData.assignmentData;
	
								// Replace item at index using native splice
								arr.splice(self.props.workDashboardData.assignmentContentIndex, 1, resData.data);
								self.props.dispatch((0, _WorkDashboardActions.updateAssignmentData)(arr));
								self.setState({ loading: false });
							} else {
								// console.log("submittion failed---", resData.error);
	
								//code added by - Najib, un setting spinner when uploading done
								self.setState({ uploadFile: true, loading: false });
								alertify.alert("Error", resData.error, function (result) {});
							}
						}
					}
				});
			}
		}, {
			key: 'setDeleteResponse',
			value: function setDeleteResponse(res) {
				if (res.status == true) {
					this.setState({
						fileName: '',
						uploadFile: true
					});
					var obj = { current: 'assignmentList', assignmentContent: true, assignmentList: false, assignmentContentData: res.data };
					this.handleWorkDashboard(obj);
					var arr = this.props.workDashboardData.assignmentData;
	
					// Replace item at index using native splice
					arr.splice(this.props.workDashboardData.assignmentContentIndex, 1, res.data);
					this.props.dispatch((0, _WorkDashboardActions.updateAssignmentData)(arr));
				}
			}
		}, {
			key: 'handlePdfView',
			value: function handlePdfView() {}
		}, {
			key: 'viewUser',
			value: function viewUser() {
				if (!this.props.isGuest) {
					_reactRouter.browserHistory.push('/profile/' + this.props.workDashboardData.assignmentContentData.createdBy._id);
				}
			}
		}, {
			key: 'render',
			value: function render() {
	
				var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
				var cls_topicViewFlex = _Dashboard2.default.topicViewheader + ' ' + _Dashboard2.default.topicViewFlex;
	
				var link = "/uploads/" + this.state.fileName;
				if (this.props.workDashboardData && this.props.workDashboardData.assignmentContentData && this.props.workDashboardData.assignmentContentData.uploadData) {
					var fileName = this.props.workDashboardData.assignmentContentData.uploadData.fileName;
					var displayName;
					displayName = fileName.substring(fileName.indexOf("_") + 1);
					var fileType = this.props.workDashboardData.assignmentContentData.uploadData.fileType;
					var ext = fileName.split('.').pop();
					var src = "/images/icons/" + ext + ".png";
					var downloadLink = "/uploads/" + fileName;
				}
				var data = this.props.workDashboardData.assignmentContentData;
				var profileImage = data ? data.createdBy ? data.createdBy.profile ? data.createdBy.profile.profileImage : '' : '' : '';
				if (profileImage == '' || profileImage == undefined || profileImage == null) {
					var imagePath = '/images/profile-pics/defaultStudent.jpg';
				} else {
					var imagePath = '/uploads/' + profileImage;
				}
	
				var loadType = 'upload';
	
				return _jsx('div', {}, void 0, _jsx('div', {
					className: _Dashboard2.default.whiteCard
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.breadCrum
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'roomName'
				}, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'assignmentList',
					onClick: this.handleAssignmentList.bind(this)
				}, void 0, _ref2)), _ref3, _jsx('li', {}, void 0, _jsx('span', {}, void 0, this.props.workDashboardData.assignmentContentData.assignmentName)))), _jsx('div', {
					className: cls_topicViewFlex
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.AssignResult1
				}, void 0, _jsx('h1', {
					className: _Dashboard2.default.mainHeadingTxt,
					maxLength: 50
				}, void 0, this.props.workDashboardData.assignmentContentData.assignmentName)), this.resultData.length > 0 ? _jsx('div', {
					className: _Dashboard2.default.AssignResult2
				}, void 0, _jsx('button', {
					id: 'viewResult',
					className: _Dashboard2.default.btnApplyAll,
					onClick: this.handleResult
				}, void 0, 'View Result')) : null), _jsx('div', {
					className: _Dashboard2.default.topicsListBody
				}, void 0, _jsx('div', {
					className: cls_authorsBox
				}, void 0, _jsx('span', {
					className: _Dashboard2.default.hrzlList
				}, void 0, _jsx('div', {
					className: cls_topicAuthor
				}, void 0, _jsx('img', {
					id: 'viewprofile',
					src: imagePath,
					onClick: this.viewUser.bind(this),
					title: this.props.intl.messages.viewprofile
				}), _jsx('div', {
					className: _Dashboard2.default.authorInfo
				}, void 0, _jsx('p', {
					className: _Dashboard2.default.authorName
				}, void 0, this.props.workDashboardData.assignmentContentData.createdBy.firstname, ' ', this.props.workDashboardData.assignmentContentData.createdBy.lastname), _jsx('p', {
					className: _Dashboard2.default.authorDisg
				}, void 0, _ref4))))), _jsx('div', {
					className: _Dashboard2.default.fullDottedBlock
				}, void 0, _ref5, _react2.default.createElement('div', { ref: 'editor', onMouseUp: this.selectHandler.bind(this) })), _jsx('div', {
					className: _Dashboard2.default.fullDottedBlock
				}, void 0, _ref6, _jsx('div', {
					className: _Dashboard2.default.resourceList
				}, void 0, _jsx('ul', {}, void 0, this.props.workDashboardData.assignmentContentData.uploadData ? fileType != 'link' ? _jsx('li', {}, void 0, _jsx('a', {
					id: 'download',
					className: _Dashboard2.default.fileUploadBreakWord,
					href: downloadLink,
					download: true
				}, void 0, _jsx('img', {
					src: src
				}), _jsx('span', {}, void 0, displayName))) : null : _ref7))), this.state.loading ? _jsx(_Loading2.default, {
					loadType: loadType
				}) : _jsx('div', {
					className: _Dashboard2.default.fullDottedBlock
				}, void 0, this.state.uploadFile ? _jsx('div', {
					className: _Dashboard2.default.uploadAssignmentblock
				}, void 0, _jsx('label', {
					className: _Dashboard2.default.btnApplyAll
				}, void 0, _jsx('input', {
					id: 'uploadAssignment',
					type: 'file',
					accept: '.doc, .docx, .ppt, .pptx, .pdf',
					className: _Dashboard2.default.uploadAssignmentButton,
					onChange: this.handleUpload.bind(this),
					value: ''
				}), 'Upload Assignment'), _jsx('span', {
					className: _Dashboard2.default.msgFileTypes
				}, void 0, _jsx('span', {
					className: _Dashboard2.default.msgFileNote
				}, void 0, 'Note : '), ' Supported file types are .xlsx, .xls, .doc, .docx, .ppt, .pptx, .txt, .pdf, .odp, .ods')) : _jsx('div', {}, void 0, _ref8, _jsx('a', {
					id: 'downloadAssignment',
					className: _Dashboard2.default.fileUploadBreakWord,
					href: link,
					download: true
				}, void 0, this.state.fileName.substring(this.state.fileName.indexOf("_") + 1)), _jsx('span', {
					id: 'deleteAssignment',
					className: _Dashboard2.default.deleteAssignmentButton,
					onClick: this.deleteAssignment.bind(this)
				}, void 0, _ref9))))));
			}
	
			///////////////////////
	
		}, {
			key: 'handleSelection',
	
	
			/////////////////////////
			value: function handleSelection(obj) {
				if (obj.uid != this.props.workDashboardData.uid) {
					if (document.createRange) {
						var charIndex = 0,
						    range = document.createRange();
						range.setStart(this.refs.editor, 0);
						range.collapse(true);
						var nodeStack = [this.refs.editor],
						    node = void 0,
						    foundStart = false,
						    stop = false;
						while (!stop && (node = nodeStack.pop())) {
							if (node.nodeType == 3) {
								var nextCharIndex = charIndex + node.length;
								if (!foundStart && obj.start >= charIndex && obj.start <= nextCharIndex) {
									range.setStart(node, obj.start - charIndex);
									foundStart = true;
								}
								if (foundStart && obj.end >= charIndex && obj.end <= nextCharIndex) {
									range.setEnd(node, obj.end - charIndex);
									stop = true;
								}
								charIndex = nextCharIndex;
							} else {
								var i = node.childNodes.length;
								while (i--) {
									nodeStack.push(node.childNodes[i]);
								}
							}
						}
						var sel = window.getSelection();
						sel.removeAllRanges();
						sel.addRange(range);
					} else if (document.body.createTextRange) {
						var textRange = document.body.createTextRange();
						textRange.moveToElementText(this.refs.editor);
						textRange.collapse(true);
						textRange.moveEnd("character", obj.end);
						textRange.moveStart("character", obj.start);
						textRange.select();
					}
				}
			}
		}]);
	
		return AssignmentContent;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	var _initialiseProps = function _initialiseProps() {
		var _this2 = this;
	
		this.handleWorkDashboard = function (obj) {
			_this2.props.imHost == true && _this2.props.workDashboardData.sync == true ? _this2.props.syncCallback(obj) : _this2.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
		};
	
		this.handleUpload = function (e) {
			//console.log(e.target)
			var reader = new FileReader();
			var file = e.target.files[0];
			// console.log(file.type.substring(0, file.type.indexOf("/")) );
			if (!file) {
				return;
			} else if (file.size > 20971520) {
	
				alertify.alert(_this2.props.intl.messages.warning, _this2.props.intl.messages.topic_file_alert, function () {}).setting({ 'label': _this2.props.intl.messages.ok });
				return;
			} else if (file.type.substring(0, file.type.indexOf("/")) != 'application' && file.type.substring(0, file.type.indexOf("/")) != 'text') {
				alertify.alert(_this2.props.intl.messages.warning, _this2.props.intl.messages.invalid_file_format, function () {}).setting({ 'label': _this2.props.intl.messages.ok });
				return;
			}
			//console.log(file)
			var that = _this2;
			reader.onload = function (img) {
				//console.log(img)
				var dataURI = img.target.result;
				//console.log('dataURI')
				this.imageData["file"] = dataURI.split(',')[1];
				this.imageData["fileName"] = file.name;
				this.imageData["fileSize"] = file.size;
				// console.log(file.type)
				if (file.type == 'application/zip') {
					this.imageData["fileType"] = 'zip';
				} else {
					this.imageData["fileType"] = file.type.substring(0, file.type.indexOf("/"));
				}
				var data = this.imageData;
				this.saveFile(data);
			}.bind(_this2);
			reader.readAsDataURL(file);
		};
	
		this.deleteAssignment = function (e) {
			var id = e.currentTarget.id;
			var props = _this2.props;
			var response = _this2.setDeleteResponse;
	
			alertify.confirm(_this2.props.intl.messages.warning, _this2.props.intl.messages.delete_file_alert, function (result) {
				if (result) {
					var obj = {
						roomId: props.workDashboardData.assignmentContentData.roomId,
						assignmentId: props.workDashboardData.assignmentContentData._id
					};
					props.dispatch((0, _WorkDashboardActions.deleteAssignmentSubmittedFile)(obj)).then(function (res) {
						return response(res);
					});
				}
			}, function () {}).setting('labels', { 'ok': _this2.props.intl.messages.ok, 'cancel': _this2.props.intl.messages.cancel });
		};
	
		this.handleResult = function () {
			var roomId = _this2.props.workDashboardData.assignmentContentData.roomId;
			var assignmentId = _this2.props.workDashboardData.assignmentContentData._id;
			_reactRouter.browserHistory.push('/course/assignment-report-view/' + roomId + '/' + assignmentId);
		};
	
		this.handleAssignmentContSelSync = function (objEntity) {
			var obj = {
				command: 'ASSIGNMENT-CONT-SEL-SYNC',
				content: { data: objEntity },
				type: 'OBJECT'
			};
			_this2.props.confObject.sendMessage(obj, 0);
		};
	};
	
	function mapStateToProps(state) {
		return {
			intl: state.intl,
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state)
		};
	}
	
	AssignmentContent.contextTypes = {
		intl: _react2.default.PropTypes.object.isRequired
	
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(AssignmentContent);

/***/ },

/***/ 485:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
		id: 'author'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
		id: 'fulltopic'
	});
	
	var AssignmentData = function (_Component) {
		_inherits(AssignmentData, _Component);
	
		function AssignmentData(props) {
			_classCallCheck(this, AssignmentData);
	
			return _possibleConstructorReturn(this, (AssignmentData.__proto__ || Object.getPrototypeOf(AssignmentData)).call(this, props));
		}
	
		_createClass(AssignmentData, [{
			key: 'handleFullAssignment',
			value: function handleFullAssignment() {
				this.props.contantCallback(this.props.data);
			}
	
			//Code changed by - Najib, Desc - routing is called only for non-guest users
	
		}, {
			key: 'viewUser',
			value: function viewUser() {
				if (!this.props.isGuest) {
					_reactRouter.browserHistory.push('/profile/' + this.props.data.createdBy._id);
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var data = this.props.data;
				var profileImage = data ? data.createdBy ? data.createdBy.profile ? data.createdBy.profile.profileImage : '' : '' : '';
				if (profileImage == '' || profileImage == undefined || profileImage == null) {
					var imagePath = '/images/profile-pics/defaultStudent.jpg';
				} else {
					var imagePath = '/uploads/' + profileImage;
				}
				if (this.props.data != null) {
					return _jsx('li', {}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
						className: _Dashboard2.default.listTitle
					}, void 0, _jsx(_reactRouter.Link, {
						id: 'fullAssignment',
						onClick: this.handleFullAssignment.bind(this)
					}, void 0, this.props.data.assignmentName))), _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: cls_topicAuthor
					}, void 0, _jsx('img', {
						id: 'viewprofile',
						src: imagePath,
						onClick: this.viewUser.bind(this),
						title: this.props.intl.messages.viewprofile
					}), _jsx('div', {
						className: _Dashboard2.default.authorInfo
					}, void 0, _jsx('p', {
						className: _Dashboard2.default.authorName
					}, void 0, this.props.data.createdBy.firstname, ' ', this.props.data.createdBy.lastname), _jsx('p', {
						className: _Dashboard2.default.authorDisg
					}, void 0, _ref)))), _jsx(_reactBootstrap.Col, {
						md: 8
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.shortDecBlock
					}, void 0, _jsx('span', {
						id: 'fullTopic',
						className: _Dashboard2.default.fullTopic
					}, void 0, _jsx(_reactRouter.Link, {
						onClick: this.handleFullAssignment.bind(this)
					}, void 0, _ref2))))));
				} else return;
			}
		}]);
	
		return AssignmentData;
	}(_react.Component);
	
	exports.default = (0, _reactIntl.injectIntl)(AssignmentData);

/***/ },

/***/ 486:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _AssignmentContent = __webpack_require__(484);
	
	var _AssignmentContent2 = _interopRequireDefault(_AssignmentContent);
	
	var _AssignmentData = __webpack_require__(485);
	
	var _AssignmentData2 = _interopRequireDefault(_AssignmentData);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _UserDashboardReducer = __webpack_require__(88);
	
	var _LoginReducer = __webpack_require__(20);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref2 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'assignment_list'
	})));
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
		id: 'welcome_room'
	});
	
	var _ref4 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'list_assignments'
	}));
	
	var _ref5 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_assignments_yet'
	}), ' ');
	
	var AssignmentList = function (_Component) {
		_inherits(AssignmentList, _Component);
	
		function AssignmentList(props) {
			_classCallCheck(this, AssignmentList);
	
			var _this = _possibleConstructorReturn(this, (AssignmentList.__proto__ || Object.getPrototypeOf(AssignmentList)).call(this, props));
	
			_this.handleWorkDashboard = function (obj) {
				_this.props.imHost == true && _this.props.workDashboardData.sync == true ? _this.props.syncCallback(obj) : _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			};
	
			return _this;
		}
	
		_createClass(AssignmentList, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var obj = {
					roomKey: this.props.roomKey
				};
				this.props.dispatch((0, _WorkDashboardActions.getConferenceAssignmentData)(obj));
			}
		}, {
			key: 'handleFullAssignment',
			value: function handleFullAssignment(index, data) {
				var obj = { current: 'assignmentList', assignmentContent: true, assignmentList: false, assignmentContentData: data, assignmentContentIndex: index, uid: this.props.loggedInData.data._id };
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'handleList',
			value: function handleList() {
				var obj = { current: 'assignmentList', assignmentContent: false, assignmentList: true, assignmentContentData: null, assignmentContentIndex: null };
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'syncCallback',
			value: function syncCallback(obj) {
				this.props.syncCallback(obj);
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;
	
				var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
	
				var assignmentList = this.props.workDashboardData.assignmentList ? _jsx('div', {
					className: _Dashboard2.default.whiteCard
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.breadCrum
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'roomName'
				}, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref, _ref2)), _jsx('div', {
					className: _Dashboard2.default.topicsListheader
				}, void 0, _jsx('h2', {
					className: _Dashboard2.default.headingTxt
				}, void 0, _ref3, _jsx('span', {}, void 0, this.props.roomName)), _ref4), _jsx('div', {
					className: _Dashboard2.default.topicsListBody
				}, void 0, _jsx('ul', {}, void 0, this.props.workDashboardData && this.props.workDashboardData.assignmentData && this.props.workDashboardData.assignmentData.length > 0 ? this.props.workDashboardData.assignmentData.map(function (data, index) {
					return _jsx(_AssignmentData2.default, {
						data: data,
						contantCallback: _this2.handleFullAssignment.bind(_this2, index),
						sync: _this2.props.workDashboardData.sync,
						imHost: _this2.props.imHost,
						confObject: _this2.props.confObject,
						isGuest: _this2.props.isGuest
					}, data._id);
				}) : _jsx('li', {}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
					className: _Dashboard2.default.listTitle
				}, void 0, _ref5)))))) : null;
	
				return _jsx('div', {}, void 0, assignmentList, this.props.workDashboardData.assignmentContent ? _jsx(_AssignmentContent2.default, {
					roomName: this.props.roomName,
					confObject: this.props.confObject,
					imHost: this.props.imHost,
					syncCallback: this.syncCallback.bind(this),
					assignmentListCallback: this.handleList.bind(this),
					isGuest: this.props.isGuest
				}) : null);
			}
		}]);
	
		return AssignmentList;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
			loggedInData: (0, _LoginReducer.loggedInData)(state)
		};
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(AssignmentList);

/***/ },

/***/ 487:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Attendees = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _reactRedux = __webpack_require__(16);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _roles = __webpack_require__(46);
	
	var _reactRouter = __webpack_require__(3);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactFontawesome2.default, {
	  name: 'spinner',
	  spin: true,
	  size: '2x'
	});
	
	var _ref2 = _jsx('img', {
	  src: '/images/black-icons/black-video.png'
	});
	
	var _ref3 = _jsx(_reactFontawesome2.default, {
	  name: 'spinner',
	  spin: true,
	  size: '2x'
	});
	
	var Attendees = exports.Attendees = function (_Component) {
	  _inherits(Attendees, _Component);
	
	  function Attendees(props) {
	    _classCallCheck(this, Attendees);
	
	    var _this = _possibleConstructorReturn(this, (Attendees.__proto__ || Object.getPrototypeOf(Attendees)).call(this, props));
	
	    _this.requestVideo = function () {
	      _this.setState({ reqVideoStatus: true });
	      var obj = {
	        command: 'REQ-VIDEO',
	        content: { attendeesData: {} },
	        type: 'OBJECT'
	      };
	      var attendeesList = _this.props.conferenceDetails.attendees;
	      var indexId = _.findIndex(attendeesList, { 'name': _this.props.value._id });
	      _this.props.confObject.sendMessage(obj, attendeesList[indexId].id);
	    };
	
	    _this.unRequestVideo = function () {
	      // this.requestVideo();
	      _this.setState({ reqVideoStatus: true });
	      var obj = {
	        command: 'UN-REQ-VIDEO',
	        content: { attendeesData: {} },
	        type: 'OBJECT'
	      };
	      var attendeesList = _this.props.conferenceDetails.attendees;
	      var indexId = _.findIndex(attendeesList, { 'name': _this.props.value._id });
	      _this.props.confObject.sendMessage(obj, attendeesList[indexId].id);
	
	      var streamList = _this.props.conferenceDetails.streams;
	      indexId = _.findIndex(streamList, ['from', attendeesList[indexId].id]);
	
	      if (indexId > 0) {
	        if (streamList[indexId].presenter) {
	          _this.props.confObject.offPresenter();
	        }
	
	        if (streamList[indexId].speaker) {
	          _this.props.confObject.offSpeaker();
	        }
	      }
	    };
	
	    _this.handleScreenShare = function () {
	
	      console.log("closeScreenShare");
	      // console.log("sharedStudentId === ",this.props.workDashboardData.sharedStudentId);
	      // let id = this.props.workDashboardData.sharedStudentId;
	      var obj = {
	        command: 'UN-REQ-SHARE',
	        content: { id: _this.props.value._id },
	        type: 'OBJECT'
	      };
	      var attendeesList = _this.props.conferenceDetails.attendees;
	      var indexId = _.findIndex(attendeesList, { 'name': _this.props.value._id });
	      _this.props.confObject.sendMessage(obj, attendeesList[indexId].id);
	    };
	
	    _this.state = {
	      reqVideoStatus: false
	    };
	    return _this;
	  }
	
	  _createClass(Attendees, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState({ reqVideoStatus: false });
	    }
	  }, {
	    key: 'viewUser',
	    value: function viewUser() {
	
	      //code changed by -- Najib, link can be clickable for all users except guest   
	      if (!this.props.guestStatus) {
	        _reactRouter.browserHistory.push('/profile/' + this.props.value._id);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var cls_Online = _Dashboard2.default.listStatusCircle + ' ' + _Dashboard2.default.bgOnline;
	      var cls_Offline = _Dashboard2.default.listStatusCircle + ' ' + _Dashboard2.default.bgOffline;
	      var cls_guestStatus = _Dashboard2.default.guestStatus + ' clearfix';
	      var cls_clearfix = 'clearfix';
	      var imgsrc = "/images/profile-pics/default-user.png";
	      var listItem = '';
	      var stream_on = false;
	      var haveVideo = false;
	      var email = null;
	
	      var streamList = this.props.conferenceDetails.streams;
	      var attendeesList = this.props.conferenceDetails.attendees;
	      var subscriberList = this.props.conferenceDetails.subStreams;
	
	      if (this.props && this.props.value) {
	        listItem = this.props.value;
	        if (listItem.email) {
	          if (listItem.guest) {
	            var splitedEmail = listItem.email.split('guest_');
	            email = splitedEmail[1];
	          } else {
	            email = listItem.email;
	          }
	        } else {
	          email = '-';
	        }
	        if (listItem.profile && listItem.profile.profileImage) {
	          imgsrc = "/uploads/" + listItem.profile.profileImage;
	        }
	        // console.log("this.props.value.guest", this.props.value.guest); 
	        if (streamList && this.props.online >= 0 && streamList.length > 0 && attendeesList[this.props.online]) {
	
	          var defIndex = _.findIndex(streamList, ['from', attendeesList[this.props.online].id]);
	          // console.log("Stream before Found ATTENDEE LIST", attendeesList[this.props.online], streamList);
	
	          if (defIndex > 0) {
	            // console.log("Stream Found ATTENDEE LIST", listItem, streamList[defIndex], streamList[defIndex].hasVideo(), streamList[defIndex].showing);
	            var subIndex = _.findIndex(subscriberList, ['from', streamList[defIndex].from]);
	
	            if (subIndex >= 0) {
	              if (subscriberList[subIndex].hasVideo() /* && subscriberList[subIndex].showing*/) {
	                  haveVideo = true;
	                  stream_on = true;
	                } /*else if(subscriberList[subIndex].hasVideo() && (!subscriberList[subIndex].showing)){
	                   haveVideo = true;
	                   stream_on = false;
	                  }*/
	            } else if (streamList[defIndex].hasVideo()) {
	              haveVideo = true;
	              stream_on = false;
	            }
	
	            // Object.observe(streamList[defIndex], function(changes){
	            //     console.log("Changes Observed", changes);
	            // });
	            // console.log(haveVideo, stream_on);
	          } else {
	            if (listItem._id == this.props.uid) {
	              // console.log("ATT TEST",  streamList[0], streamList[0].hasVideo());
	              if (streamList[0] && streamList[0].hasVideo() /* && subscriberList[subIndex].showing*/) {
	                  haveVideo = true;
	                  stream_on = true;
	                }
	            }
	
	            //Check with Logged In UID /// Find it in list id == logged in id
	            //take 0 index of streamList and check hasVideo(), if yes haveVideo = true, stream_on = true; 
	          }
	        }
	      }
	      //let roleObj = _.invert(Roles);
	      // let OnlineStatus = this.props.online;
	      // console.log("OnlineStatus--", OnlineStatus, "userId- ", this.props.value._id);
	      var roleObj = _.invert(_roles.Roles);
	      var role = listItem.role;
	      var myRole = roleObj[role];
	      if (role == _roles.Roles.Lmsadmin || role == _roles.Roles.CRMadmin || role == _roles.Roles.Presenteradmin) {
	        myRole = roleObj[_roles.Roles.Admin];
	      } else if (role == _roles.Roles.CRMuser) {
	        myRole = roleObj[_roles.Roles.User];
	      } else if ((role == _roles.Roles.Student || role == _roles.Roles.User) && listItem.guest) {
	        myRole = 'Guest';
	      }
	      var imHost = this.props.conferenceDetails.imHost;
	      // console.log(imHost);
	      return _jsx('li', {
	        className: this.props.guestStatus ? cls_guestStatus : cls_clearfix
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.actionBox
	      }, void 0, imHost && this.props && this.props.value._id != this.props.uid ? _jsx('ul', {
	        className: 'clerafix'
	      }, void 0, this.props.conferenceDetails && this.props.conferenceDetails.confData && this.props.conferenceDetails.confData.roomType != 'Mix' ? _jsx('li', {}, void 0, haveVideo && stream_on ? this.state.reqVideoStatus ? _ref : _jsx('img', {
	        id: 'unRequestVideo',
	        src: '/images/black-icons/video_on.png',
	        onClick: this.unRequestVideo
	      }) : haveVideo ? _ref2 : this.props.online >= 0 ? this.state.reqVideoStatus ? _ref3 : _jsx('img', {
	        id: 'requestVideo',
	        src: '/images/black-icons/no-video.png',
	        onClick: this.requestVideo
	      }) : '') : null, this.props.online >= 0 && attendeesList[this.props.online].screenEnable && attendeesList[this.props.online].screenEnable == true ? _jsx('li', {}, void 0, _jsx('img', {
	        id: 'shareScreen',
	        src: '/images/black-icons/black-screen-share.png',
	        onClick: this.handleScreenShare,
	        title: 'Remove screen share access'
	      })) : null) : null), this.props.online >= 0 ? _jsx('div', {
	        className: cls_Online
	      }) : _jsx('div', {
	        className: cls_Offline
	      }), _jsx('img', {
	        id: 'viewprofile',
	        src: imgsrc,
	        onClick: this.viewUser.bind(this),
	        title: this.props.intl.messages.viewprofile
	      }), _jsx('span', {
	        id: 'viewprofile',
	        className: _Dashboard2.default.name,
	        onClick: this.viewUser.bind(this)
	      }, void 0, listItem.firstname ? listItem.firstname : "", ' ', listItem.lastname ? listItem.lastname : ""), _jsx('span', {
	        className: _Dashboard2.default.notficationName
	      }, void 0, email, ' (', myRole, ')'));
	    }
	  }]);
	
	  return Attendees;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state),
	    workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
	    intl: state.intl
	  };
	}
	
	Attendees.contextTypes = {
	  router: _react2.default.PropTypes.object
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(Attendees);
	// export default Attendees;

/***/ },

/***/ 488:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AttendeesList = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _reactRedux = __webpack_require__(16);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _Attendees = __webpack_require__(487);
	
	var _Attendees2 = _interopRequireDefault(_Attendees);
	
	var _LoginReducer = __webpack_require__(20);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	var _ref = _jsx('i', {
	  className: 'glyphicon glyphicon-search'
	});
	
	var AttendeesList = exports.AttendeesList = function (_Component) {
	  _inherits(AttendeesList, _Component);
	
	  function AttendeesList(props) {
	    _classCallCheck(this, AttendeesList);
	
	    var _this = _possibleConstructorReturn(this, (AttendeesList.__proto__ || Object.getPrototypeOf(AttendeesList)).call(this, props));
	
	    _this.state = {
	      attendeesData: []
	    };
	    return _this;
	  }
	
	  _createClass(AttendeesList, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setattendeesData(this.props.conferenceDetails);
	    }
	  }, {
	    key: 'setattendeesData',
	    value: function setattendeesData(conferenceDetails) {
	      if (conferenceDetails && conferenceDetails.confData && conferenceDetails.confData.users) {
	        this.setState({ attendeesData: conferenceDetails.confData.users });
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // console.log("component will receive -- - - ", nextProps);
	      if (nextProps.conferenceDetails && nextProps.conferenceDetails.confData.users) {
	        this.setState({ attendeesData: nextProps.conferenceDetails.confData.users });
	      };
	    }
	  }, {
	    key: 'searchAttendees',
	    value: function searchAttendees(e) {
	      var conferenceDetails = this.props.conferenceDetails;
	      if (conferenceDetails && conferenceDetails.confData && conferenceDetails.confData.users) {
	        var confUsers = conferenceDetails.confData.users;
	        var filterUsers = [];
	        var query = e.target.value;
	        if (query != '') {
	          query = query.toLowerCase();
	          for (var i = 0; i < confUsers.length; i++) {
	            var name = (confUsers[i].firstname + " " + confUsers[i].lastname).toLowerCase();
	            if (confUsers[i].email.toLowerCase().match(query) || name.match(query)) {
	              filterUsers.push(confUsers[i]);
	            }
	          }
	          this.setState({ attendeesData: filterUsers });
	        } else {
	          this.setState({ attendeesData: confUsers });
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var cls_navBar = 'navbar-form ' + _Dashboard2.default.navBar;
	      var cls_searchAddon = 'input-group ' + _Dashboard2.default.addon;
	      var cls_searchInput = 'form-control ' + _Dashboard2.default.formControlCustom;
	      var cls_btnSearch = 'btn ' + _Dashboard2.default.btnSearch + ' pull-right';
	
	      //code changed by - Najib, Desc - Checking guest user and setting status variable 
	      var guestStatus = false;
	      if (this.props.loggedInData && this.props.loggedInData.data && this.props.loggedInData.data.guest) {
	        guestStatus = true;
	      }
	
	      // let listAttendees = <FormattedMessage id = 'no_attendees_present'/>;
	      var conferenceDetails = this.props.conferenceDetails;
	      var onlineAttendees = null;
	      var offlineAttendees = null;
	      if (conferenceDetails && conferenceDetails.attendees && this.state.attendeesData && this.state.attendeesData.length > 0) {
	        var confUsers = this.state.attendeesData;
	        var attendList = conferenceDetails.attendees;
	        // console.log("confUsers---", confUsers)
	
	        onlineAttendees = confUsers.map(function (confUser) {
	          return _.findIndex(attendList, { 'name': confUser._id }) >= 0 ? _jsx(_Attendees2.default, {
	            value: confUser,
	            online: _.findIndex(attendList, { 'name': confUser._id }),
	            uid: _this2.props.uid,
	            confObject: _this2.props.confObject,
	            guestStatus: guestStatus
	          }, confUser._id) : null;
	        });
	        offlineAttendees = confUsers.map(function (confUser) {
	          return _.findIndex(attendList, { 'name': confUser._id }) < 0 ? _jsx(_Attendees2.default, {
	            value: confUser,
	            online: _.findIndex(attendList, { 'name': confUser._id }),
	            uid: _this2.props.uid,
	            confObject: _this2.props.confObject,
	            guestStatus: guestStatus
	          }, confUser._id) : null;
	        });
	      }
	      return _jsx('div', {
	        className: _Dashboard2.default.attendeesListBlock
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.searchAttendees
	      }, void 0, _jsx('div', {
	        className: cls_navBar
	      }, void 0, _jsx('div', {
	        className: cls_searchAddon
	      }, void 0, _jsx('input', {
	        id: 'searchAttendees',
	        type: 'text',
	        className: cls_searchInput,
	        placeholder: this.props.intl.messages.search_attendees,
	        onChange: this.searchAttendees.bind(this)
	      }), _jsx('div', {
	        className: 'input-group-btn'
	      }, void 0, _jsx('span', {
	        className: cls_btnSearch
	      }, void 0, _ref))))), _jsx('div', {
	        className: _Dashboard2.default.notificationBlock
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.notificationBody
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.notificationList
	      }, void 0, _jsx('ul', {}, void 0, onlineAttendees, offlineAttendees)))));
	    }
	  }]);
	
	  return AttendeesList;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    intl: state.intl,
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state),
	    loggedInData: (0, _LoginReducer.loggedInData)(state)
	  };
	}
	
	AttendeesList.contextTypes = {
	  router: _react2.default.PropTypes.object,
	  intl: _react.PropTypes.object,
	  uid: _react.PropTypes.string,
	  confObject: _react.PropTypes.object
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(AttendeesList);

/***/ },

/***/ 490:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(64);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _reactRedux = __webpack_require__(16);
	
	var _UserDashboardReducer = __webpack_require__(88);
	
	var _Modal = __webpack_require__(52);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _TextBox = __webpack_require__(508);
	
	var _TextBox2 = _interopRequireDefault(_TextBox);
	
	var _component = {
		"form-control": "QmIrbtmLmFNpHdWMqFMWS",
		"innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
		"colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
		"error": "_3jAfmA6J7YmNDyB2VfsCxP",
		"mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
		"dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
		"iElement": "_2crZNiFs8z8oNhzPDC1qOE",
		"oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
		"iLabel": "_3Pyvct_srCoSvJCgGG41jw",
		"oLabel": "NsxWZpxBqBX8wky_O477_",
		"iForm": "_3IlToa7pigrSS8KWut_dJ8",
		"oForm": "_3N0YNUcfI5U02VSmBEbYot",
		"iFormField": "_12yKSn29WLZIE6fvGQfcrN",
		"oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
		"iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
		"oFormGroup": "_386CxczA49XX2-ejr3Qe55",
		"formNext": "ccTxjcG6_GZO9OgzW33HT",
		"iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
		"oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
		"iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
		"oContainer": "_2tEAAtqgoutuOUU96rNvv1",
		"iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
		"oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
		"iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
		"iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
		"whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
		"iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
		"active": "_2fF1Q9nO2O_1B8Ldb4RM52",
		"scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
		"errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
		"errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
		"whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
		"greyCard": "_34l9W17Mt1koxHLd1yUqgk",
		"reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
		"countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
		"react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
		"ad": "N3bKXyhfwvWT3eAEC9Nno",
		"ae": "taXUT8yfjgRMeSH3rMNxy",
		"af": "_2vH4qShCgBPBO4GR8BdNvd",
		"ag": "n8QfWtvpZLMpatCUqX2Td",
		"ai": "_3fPX_RcpesOPxFsmsaygCE",
		"al": "_1T12tbcC6990b-fIMG5LYW",
		"am": "_31HdarMDfXvAgjizVUoeHk",
		"ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
		"ar": "_2qJleMgRbIErIrx3kQF57O",
		"as": "_2ZPVYL8Vjn-vdWZToCEhjN",
		"at": "_1hWilvnrVbANEHRyLGlF-m",
		"au": "_2zJE4K6o-ftWqhb3exXZgk",
		"aw": "_1UroMxX5JHt9bjGdHwa1OY",
		"az": "_-Y2xueZ_1mEtB9YDOqEGB",
		"ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
		"bb": "_34600Kl8Wac9Hx7S3-3U6b",
		"bd": "_3WBX90V5VJXA7-vSUfEWCh",
		"be": "BcK33edOPcbYdkxxvOApy",
		"bf": "ShN64-J7UZdswoQjkf7L_",
		"bg": "_2A9PgkQEF5_KbvHvDf6_lY",
		"bh": "_10p3rxNRYOhv8-BtZuq1w8",
		"bi": "_6MzP1qXXDFAZVL7nBmRiH",
		"bj": "_2U8H1sji9LfDEW706KyKvF",
		"bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
		"bn": "PgMDvF79WHl3kaklOmhw3",
		"bo": "_7MheGVInaTi-QLxw5PiUi",
		"br": "_1BDNUyT0cHDlbCBFgrrLkJ",
		"bs": "_3vcASZB5bu7mJAzTzaRkWe",
		"bt": "esu4pvyd9ZFWrf-etnrva",
		"bw": "_2Hbv1I361RJFK3Ph2xPlu_",
		"by": "_2tbYam6Og8RAicMhX9SXvI",
		"bz": "_3xB704PIgqFnU2zTG-JZFN",
		"ca": "_36FyK29nkNl9Ez7yWh04AS",
		"cd": "_9PnHTqK1pSn_GIAbBtPT2",
		"cf": "_2LgMF7o1A3a2cgw5jkpvZV",
		"cg": "_3hYc9Y3UdCphltZKe2vJWk",
		"ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
		"ci": "FoSGkvvMDFAVcvsZBWX-Z",
		"ck": "_1742IgEaHW3SZU7h_-nkwr",
		"cl": "_36IaMt7ntEwUsH4lwN4tW-",
		"cm": "_1N8krqbPtlsEVsh6SaCetm",
		"cn": "IfkD3fwbUSx9FZflX6iIU",
		"co": "_3Y7u7ONzxyZVjZYzS1OHTr",
		"cr": "Gw5Qz4qBNZjPDmpQmi-d2",
		"cu": "ZuHtEp_knwZcbwTTJkRgI",
		"cv": "o6BzJCyjRH1pOsf_HpbQ6",
		"cw": "hRElJCQXyNIITDZ6UQVut",
		"cy": "_2cHKWrINPNO6L8BEOdtJCG",
		"cz": "nS617LE8Qcckdv9HJTWpt",
		"de": "fqJD93WBywDPs0lrLEXLT",
		"dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
		"dk": "_3fpBLMtuUi0kowy3ziMRYd",
		"dm": "_3gMwGkQW-OGFx1U7vd7VMD",
		"do": "G9EZGjpXLJUyQuREesyGO",
		"dz": "_3Nka0vwv6nZpeugyuqYQIJ",
		"ec": "_18t83SdIOs8EY6iF0zV0CZ",
		"ee": "_1miCbYr55XmBKvcUu6XetR",
		"eg": "_1T55wMh1svM7M5QGxFM2ex",
		"er": "c0Ab9spCQ4VnXr_6xijnD",
		"es": "_1lutiEL9tJpdNgKmnTT6Ld",
		"et": "_2GGXIPO2kOV6CUsu65V4Z3",
		"fi": "_1I-g5oWpQznT5QZuBfQ8A",
		"fj": "_3oeTP_GhC_XzsjzHW86oDc",
		"fk": "_3-_BjK4NArHS0nyf0DLc4F",
		"fm": "_1WQYGDC-zTatxog3SIwE80",
		"fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
		"fr": "_3-mqatBXfaTfex8LWjnIDA",
		"bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
		"mf": "_34f4ya9mcbpIcQPgHJ4I6c",
		"ga": "_15_iO4CJaXbX7PySxoldPF",
		"gb": "_1vZuFSSey59_ixozre-0L_",
		"gd": "_26Ub0jcjDpVD4nwM7m5n4e",
		"ge": "_27ctDR0Hf6HO15MgHS8wyh",
		"gf": "_2S6C39D4wNBuVSqzYM5Ldy",
		"gh": "_3vjGi6-umA-RzwxRFaTfNN",
		"gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
		"gl": "_1OTvyS4D4UOkymKuDLxUdx",
		"gm": "_3-0gezNOVCHKzaLYGUySo2",
		"gn": "_8f6uadrEfnS9IX8DEIpKO",
		"gp": "_36yEj9UcEbZcI0WJvgmk0B",
		"gq": "xHX18x9xk7PhDBlgsvnad",
		"gr": "HTk_eFej1VrCiBuKBIfLT",
		"gt": "hgmUbzxaHNZNL6frPhPeb",
		"gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
		"gw": "_36JwaXqhh4gBrIvAy4c1KO",
		"gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
		"hk": "_1mT74O5OVtonPLmYnVVOu7",
		"hn": "_1ze0KI-TYxTrDcXlMOu24s",
		"hr": "ZIDUSRfcbDCZTyhqWGPob",
		"ht": "Y65Ad5pf3z7ufcknP0vhk",
		"hu": "_3EHKICvcensXt5hEu8Nkfs",
		"id": "_3oZE8uvxIFK7M9DCEtsSCD",
		"ie": "_2RNmpg94YYioQp2fWyz_xn",
		"il": "_2Mq_no7KYxPp2NSLGS1Tcs",
		"in": "_1UlEZ269GihRa58c5mCEBN",
		"io": "_3ovelrc7S_DdmXxL-8uuwk",
		"iq": "_3VSlK6DYHrBgKbkE2Rng2N",
		"ir": "NRX2sFBmuPSJ9EOigyuEP",
		"is": "_25HaTNE7x74CJO9S1mnm4I",
		"it": "_1-LmlhbrcpKN-xjESmR_sO",
		"jm": "VsvDBply-4FtMoJhi8Cvu",
		"jo": "yEE3hbkzWK8CSCrCJibCo",
		"jp": "_3oxjjz1uD2cX2QsoSToLgz",
		"ke": "_1ksOT6KMPd99EWuWCXPga_",
		"kg": "_2CMnR3yv5DGwDc8p3uoOjp",
		"kh": "_927b1QnaSWnN35i3bVewJ",
		"ki": "_2CuDp55lqYTpFp68D4IWep",
		"km": "_3tvMTeZYZMzBB9bGn9lV9E",
		"kn": "_6kbCvwc22pJX0tNv3HToQ",
		"kp": "_3tIPOe5PNrHH-bgCGaZTJj",
		"kr": "_2653rpVUuy3ETaw1mogdnF",
		"kw": "_1SKg_lTe0ShbPSOl44eKjp",
		"ky": "tgj8SOv7bYoF7qfbbQWNG",
		"kz": "bchn50J152EdQa0zf3k5u",
		"la": "mu9oycLgpKX8_yLLkR5b9",
		"lb": "_2TcAFbagIrNyc6mgzRVNW0",
		"lc": "_2IFItnUNT-albvpN-ksxd2",
		"li": "_3_E6nQspv6zJQLQI24puaS",
		"lk": "_2M2wq3qQhGeUegbBTs7ilH",
		"lr": "L4o4xOg0s6QbasyIRPgyF",
		"ls": "LhBB6SRin61WSFtUwaEfe",
		"lt": "ITDUphrnMkKItKGMVHZf8",
		"lu": "_1mVW30sc4i-1M8tDPCQlL",
		"lv": "_3rq6vE2IagAsGI6iESAcJq",
		"ly": "_3se_Nzm1WQrEN3VZYiJJrv",
		"ma": "_fSDiNxp_jjfqkQcWffDM",
		"mc": "_2hRTRZeBtDGN4mNeWBZVgB",
		"md": "_26jDl0skadEwmUYDGmEzST",
		"me": "_388lJj_7sQdyd9HL7pMrar",
		"mg": "_3aFoqVWcvG3p47Vwa6UuoE",
		"mh": "_1YHi6OtXmKfP15ZNbwYGgy",
		"mk": "_9QVyhHcp8yH762J8fWXhC",
		"ml": "yYD99PoyhgFI4912_qoyJ",
		"mm": "URzk8-j7LcySpGUMJf_Qk",
		"mn": "_1J-lktQUTK0rydBz3foJGF",
		"mo": "_1sbL0zhHof-KbfGWu2qjqF",
		"mp": "_1tJjJlSjRw5AnqcXXmGwCI",
		"mq": "fHob9sxaJrTuqSc0xL744",
		"mr": "t-Bmj7a31aA-IwcRcL0ua",
		"ms": "_2xyT54DQP62zWDySH7-Kdy",
		"mt": "_1Ul_OlGODc8S0QplVq94PV",
		"mu": "_1yIBERRJqnV33pTq2VpKRc",
		"mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
		"mw": "_3i8n-5-htdGNJLgn96O21",
		"mx": "_16-6zoyiVzSGB1O72cUTzV",
		"my": "_3W2P0D9eTN4BQoOcThOsaM",
		"mz": "wJ8icX7Asp3dSImkXOdTM",
		"na": "_1qt_F94mybbX5kr0ArtN-Z",
		"nc": "h82AMIuCGdKf69Hc_nM6D",
		"ne": "_2mVa5nGsijzD93WRl8dk64",
		"nf": "_3XQ9oUH_84SsdZLjpVRuqT",
		"ng": "_1uyyH1GZjsEk3YpaUSmmG6",
		"ni": "_22_3H6UeFo26o3fSavtQaX",
		"nl": "_93asfBYgR8C7bEDucZO8l",
		"bq": "_37A1nwIz7Z3obwUjmliw4s",
		"no": "_2-sVmkWiLn_ogTikc0c0Eg",
		"np": "_1PqZSwf5cuMNmbE7bpKe67",
		"nr": "_9q5Rg9Xn0G2buivFSGySP",
		"nu": "RLhVdyjL9Cex8ekaJqirU",
		"nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
		"om": "_9mZYNhgBLiQg-j1FeVprJ",
		"pa": "_3S7TrzxJIEYVghUMVHB6E7",
		"pe": "_3V5sP7VvdGOFqApj7POYl2",
		"pf": "_1YzdrkyHO-eCcEFF-hjZl7",
		"pg": "ddWAanlQJPlB0QDWO6dAF",
		"ph": "_2TGbmCcqHlJFCssz78MxOs",
		"pk": "_2JerTABYGCUN8FLjpnDzKy",
		"pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
		"pm": "_29Hoo7EsoSHtvRFvlVg2cD",
		"pr": "_3_pkwz60KLoYcbKwaRvIsS",
		"ps": "_3jenITZ_yUYS7kU1HwFEHj",
		"pt": "_1vz8ABWy5Yd43_JhaTWq9u",
		"pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
		"py": "_1_W41pJLcGMRhLdU997clv",
		"qa": "Z0tjAakoNSOs14KuenmRi",
		"re": "_3k5KF4jzE7HUitQw9MQKnp",
		"ro": "_2b8XhT3-7NgjAC8gJJkpis",
		"rs": "_2MUJr9MQbiKRTd_g0TaRQr",
		"ru": "HjzPW2CxxNMSGZw1ugFW7",
		"rw": "_23TGIOoPmB9QYqIPG6W3tA",
		"sa": "_34WM8rSonfayW0vJ3koqJS",
		"sb": "_3486rZNsCjvTmIoHbjK8mG",
		"sc": "_3meAM_iQCU6MyfPQJTN3yl",
		"sd": "_2x6XeHNF__4s9VVfFXCJhO",
		"se": "_66VDclGQXxpdUR8uE3ZFa",
		"sg": "tv3I_hfLcUJ_8i9ewVcUz",
		"sh": "_1syDbbhbumwMwwD7Dwkb1V",
		"si": "_3jsffwJjGr2sMEofSTTGkG",
		"sk": "_1EpYAUcQLCqbYB48Auixqb",
		"sl": "_3STJQv9nY5mol4cW82D2ci",
		"sm": "_9aTR-AZMTaYHRmDVAyFTM",
		"sn": "_3mTatYTWeJQQACfV7xzRhi",
		"so": "_1LnWon2slwLMqAHzhkRT4c",
		"sr": "_1GSedFwSsf5isgOi3p0x6U",
		"ss": "_1sq99LOjKKgery3luOXOFn",
		"st": "_1O6vYx_NaXFBAs1qYxgwaB",
		"sv": "_10D9RGnRzUv14bYWQaC23c",
		"sx": "KonDEEzH2JzIWsVUBzFdY",
		"sy": "_1ZAnqGYeixOJVFwwt6hNIo",
		"sz": "_3FeOFkec3sXYbvQhWDdIM7",
		"tc": "_1FZvldKEV-vz12TyyNfEf",
		"td": "_31fysfDRtTWVKcX_UjX0ty",
		"tg": "H60Kyr6MsF6nvRz5l7EfN",
		"th": "SHZkbUz1c_H_zDOfxLc4",
		"tj": "_2MRI0fA4OLgepXVooYMu9H",
		"tk": "_1W959S9LHLCKhz3xi4MpHe",
		"tl": "_1lMF_0nwQXTyBRRzRj7hBF",
		"tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
		"tn": "_2MeGi_bqLVuCaRtJzs3QqA",
		"to": "_3egwC_50WENVPaap_uwXr8",
		"tr": "_2KiPy3o6m7JCKQWPY2fI1d",
		"tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
		"tv": "_2D9VWSmHkhgNemAaIKF_cp",
		"tw": "_2J7nVAh1zEa7kV5Ba51CLV",
		"tz": "_2acF96LLqMjlbfMX1oiAjT",
		"ua": "_2rr3Tyr8dP6vDvE0khEDKT",
		"ug": "D7gjzKmlr78rNWXXw90np",
		"us": "_1l5RtWI_acgLVeCd5fjgHG",
		"uy": "_1zX6hTsIa2TtL6dgR47eQ9",
		"uz": "_29NUL3VtwK1_RWUyPsY2ei",
		"va": "_39kTgRBkhqqGVLUTJvK_67",
		"vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
		"ve": "_3Lk2Svkm2NTAVpUfiY_No5",
		"vg": "_3SiYuGrNzW9DNkXwTZugyj",
		"vi": "_2BiiERObu5xcE6P1SZxLdj",
		"vn": "_3kSg6iW0KLoUpJ0g70fckK",
		"vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
		"wf": "Arz0xEqJcbKbLmPz_tXTS",
		"ws": "_3oTaxcmbTriEd90-cXNqD8",
		"ye": "gxtmCiQO2ao4JTQXuRUIJ",
		"za": "_25HyrYKmQQAteF_LwADnIt",
		"zm": "Kui2u7hZHcNBqlzbqR-vQ",
		"zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
		"hide": "_2kO_U0LXcg71jJA6RSia2e",
		"v-hide": "_2HBc009zwTsSlkh8P8tH10",
		"invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
		"flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
		"open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
		"selected-flag": "_10c169vRt8V92_nQ_S0KtR",
		"flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
		"arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
		"up": "_2ykRnfq4f2nlmZGfvzrn92",
		"country-list": "UlTusogWL2urjgGgLNpcD",
		"divider": "_2zMaTbM3nSdE07wOs7YYRt",
		"country": "uL848pHFWhb_G94Ak-KX5",
		"dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
		"highlight": "BLa_2aA2PkYD2PsO2fvNC",
		"country-name": "_3ih_ovRiGmAkpjxuz63nhk",
		"uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
		"fileUpload": "_2WENukerx3mNXkTyu0UXQf",
		"uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
		"upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
		"blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
		"feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
		"errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
		"gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
		"red": "_3wj0AXV9gqX9YG1nk-2u9J",
		"green": "_3KPVxc3su8ewtuKZgu8TGv",
		"orange": "_3cLlE5QI9XJwY6e7jO5bLg",
		"capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
		"importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
		"importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
		"importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
		"icon": "_12rnwIUewKT2PdtWMnNyD5",
		"importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
		"broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
		"broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
		"btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
		"textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
		"spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
		"pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
		"lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
		"removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
		"inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
		"popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
		"dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
		"dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
		"applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
		"filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
		"btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
		"assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
		"pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
		"assTab": "y4LW63OuadI0JWTQBnbJ1",
		"heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
		"radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
		"wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
		"leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
		"rightBox": "DP21PoKxwKk_vJyOuQTcr",
		"gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
		"actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
		"gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
		"actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
		"gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
		"morePref": "JBm94eKPIFI8vfiroATJ6",
		"tile": "_1Ssp2zTovh7AwJWuRkgnge",
		"tileItems": "_3cDqgy8AedDYzhy8Euosis",
		"tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
		"tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
		"category": "_2Ow56TBY2Y24yY5SjVRU4l",
		"innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
		"maxScore": "_3uL97t2vemfuAs83cAFhjE",
		"maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
		"scored": "_12gGWK_s69JBGzOAX7ClkT",
		"scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
		"remTile": "_3vgBsvWRGVVRwIEDn1TquO",
		"tileBody": "dF1WC_PeNjG87K2XGMIcS",
		"tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
		"gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
		"gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
		"assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
		"blue": "K7acjAQMroOGGtUqqojYy",
		"yellow": "G7N-PGOIbGO_ZkaqBu2mx",
		"txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
		"txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
		"txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
		"txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
		"txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
		"txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
		"addTile": "lCw_kxhsAPcuM3yFAqvpF",
		"addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
		"addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
		"commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
		"totalScore": "FDG4LAia-7JDDtxb7R4Kb",
		"totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
		"textBox": "_13VdIFmMegxz_eR8VIXN_M",
		"totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
		"totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
		"resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
		"resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
		"resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
		"headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
		"scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
		"resultBody": "N6kKlySaRGbRcB4bBmpZ0",
		"resGroup": "_2byM-_1N3yjHb2dpmlikdf",
		"resTile": "DZeuj4DKkdAPKCgYd76RK",
		"resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
		"resRating": "R7j9mxFZmdmLgC7bPXpyN",
		"txtSize": "_977ldMQMMiHQ0YG_61T3g",
		"txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
		"resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
		"resInput": "_14gsxA36f-uYOfxGDvr_gi",
		"activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
		"feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
		"fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
		"feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
		"profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
		"profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
		"profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
		"name": "_25-6SxUiv8zhOMEVTRrg8w",
		"commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
		"addpdng": "_6rQH8tivz8ELIWszpbahs",
		"good": "_3lOxcxDfxhPcuhLBJHo4Ur",
		"vGood": "l_IAfocpDxfvpU316U0EI",
		"fair": "_3I3YapUnBVxgs-ZsGf3Poh",
		"poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
		id: 'Please_fill_all_the_fields'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
		id: 'Please_fill_all_the_fields'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
		id: 'question_name_cannot_have_only_white_spaces'
	});
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
		id: 'Provide_atleast_Two_Options'
	});
	
	var _ref5 = _jsx(_reactIntl.FormattedMessage, {
		id: 'options_cannot_have_only_white_spaces'
	});
	
	var _ref6 = _jsx(_reactIntl.FormattedMessage, {
		id: 'Options_cannot_be_same'
	});
	
	var _ref7 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref8 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'poll_list'
	}));
	
	var _ref9 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref10 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref11 = _jsx(_reactIntl.FormattedMessage, {
		id: 'update_poll'
	});
	
	var _ref12 = _jsx(_reactIntl.FormattedMessage, {
		id: 'create_poll'
	});
	
	var _ref13 = _jsx(_reactIntl.FormattedMessage, {
		id: 'update_poll'
	});
	
	var _ref14 = _jsx(_reactIntl.FormattedMessage, {
		id: 'create_poll'
	});
	
	var _ref15 = _jsx('label', {
		htmlFor: 'inputQuestion',
		className: 'control-label col-md-2'
	}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'question'
	}));
	
	var _ref16 = _jsx('div', {
		className: 'col-md-2'
	}, void 0);
	
	var _ref17 = _jsx(_reactIntl.FormattedMessage, {
		id: 'add'
	});
	
	var _ref18 = _jsx(_reactIntl.FormattedMessage, {
		id: 'remove'
	});
	
	var _ref19 = _jsx(_reactIntl.FormattedMessage, {
		id: 'answer_choice'
	});
	
	var _ref20 = _jsx(_reactIntl.FormattedMessage, {
		id: 'cancel'
	});
	
	var _ref21 = _jsx(_reactFontawesome2.default, {
		name: 'fa-paper-plane'
	});
	
	var _ref22 = _jsx(_reactIntl.FormattedMessage, {
		id: 'Update'
	});
	
	var _ref23 = _jsx(_reactIntl.FormattedMessage, {
		id: 'save'
	});
	
	var _ref24 = _jsx(_reactFontawesome2.default, {
		name: 'fa-paper-plane'
	});
	
	var _ref25 = _jsx(_reactIntl.FormattedMessage, {
		id: 'update_publish'
	});
	
	var _ref26 = _jsx(_reactIntl.FormattedMessage, {
		id: 'save_publish'
	});
	
	var CreatePoll = function (_Component) {
		_inherits(CreatePoll, _Component);
	
		function CreatePoll(props) {
			_classCallCheck(this, CreatePoll);
	
			var _this = _possibleConstructorReturn(this, (CreatePoll.__proto__ || Object.getPrototypeOf(CreatePoll)).call(this, props));
	
			_this.handleWorkDashboard = function (obj) {
				_this.props.imHost == true && _this.props.workDashboardData.sync == true ? _this.props.syncCallback(obj) : _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			};
	
			_this.createPoll = function (publish, e) {
				e.preventDefault();
				/* checking the state value for prevent the double click event */
				if (!_.isEmpty(_this.props.workDashboardData.pollContentData) && _this.props.workDashboardData.pollContentData.submissions.length <= 0 || _this.props.workDashboardData.pollContentData == null) {
					if (_this.state.saveStatus == false) {
						if (_this.state.question == '') {
							_this.setState({
								error: _ref
							});
						} else {
							var emptyOptions = _.includes(_this.state.values, '');
							for (var i = 0; i < _this.state.values.length; i++) {
								if (/^\s+$/.test(_this.state.values[i])) {
									var whitespaceOptions = true;
								} else {
									var whitespaceOptions = false;
								}
							}
							var trimValues = _.map(_this.state.values, _.trim);
							var duplicateValues = _.uniq(trimValues).length !== trimValues.length;
							if (emptyOptions) {
								_this.setState({
									error: _ref2
								});
							} else if (/^\s+$/.test(_this.state.question)) {
								_this.setState({
									error: _ref3
								});
							} else if (_this.state.values.length < 2) {
								_this.setState({
									error: _ref4
								});
							} else if (whitespaceOptions) {
								_this.setState({
									error: _ref5
								});
							} else if (duplicateValues) {
								_this.setState({
									error: _ref6
								});
							} else {
								/* setting the state value true for prevent the double click event */
								_this.setState({ saveStatus: true });
								var pollData = {
									question: _this.state.question.trim(),
									options: trimValues,
									roomId: _this.props.roomId,
									publish: publish,
									pollId: _this.props.workDashboardData && _this.props.workDashboardData.pollContentData && _this.props.workDashboardData.pollContentData.question ? _this.props.workDashboardData.pollContentData._id : ''
								};
								_this.props.dispatch((0, _WorkDashboardActions.createPollRequest)({ pollData: pollData })).then(function (res) {
									return _this.setResponse(res);
								});
							}
						}
					}
				} else {
					_this.setState({
						question: _this.props.workDashboardData.pollContentData.question,
						values: _.clone(_this.props.workDashboardData.pollContentData.options)
					});
					alertify.alert("Poll can't be updated as there are submissions based on this poll.");
				}
			};
	
			_this.setResponse = _this.setResponse.bind(_this);
			_this.state = {
				question: '',
				values: [''],
				error: '',
				saveStatus: false
			};
			_this.confObject = new _WoogeenManager2.default();
			return _this;
		}
	
		_createClass(CreatePoll, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				if (this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.question) {
					var data = this.props.workDashboardData.pollContentData;
					this.setState({
						question: data.question,
						values: _.clone(data.options)
					});
				}
			}
		}, {
			key: 'handlePollList',
			value: function handlePollList() {
				this.props.pollListCallback();
				var obj = { current: 'pollList', pollContent: false, pollList: true, pollContentData: null, pollContentIndex: null, createPoll: false, submissionList: false, pollReports: false };
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'viewUser',
	
	
			//Code changed by - Najib, Desc - routing is called only for non-guest users
			value: function viewUser() {
				if (!this.props.isGuest) {
					_reactRouter.browserHistory.push('/profile/' + this.props.workDashboardData.pollContentData.createdBy._id);
				}
			}
		}, {
			key: 'handleQuestion',
			value: function handleQuestion(event) {
				this.setState({ question: event.target.value });
			}
		}, {
			key: 'handleOption',
			value: function handleOption(index, e) {
				var oldState = this.state.values;
				oldState[index] = e.target.value;
				this.setState({ values: oldState });
			}
		}, {
			key: 'handleAddOption',
			value: function handleAddOption() {
				var oldState = this.state.values;
				oldState.push('');
				this.setState({ values: oldState });
			}
		}, {
			key: 'handleRemoveOption',
			value: function handleRemoveOption() {
				var oldState = this.state.values;
				oldState.pop('');
				this.setState({ values: oldState });
			}
		}, {
			key: 'setResponse',
			value: function setResponse(res) {
				/* updating the state value as false for prevent the double click event */
				this.setState({ saveStatus: false });
				//changeBy: pranathi, disc: added alert model boxes
				if (res.status) {
					alertify.alert("Sucess", res.message, function () {}).setting({ 'label': this.props.intl.messages.ok });
	
					this.props.pollListCallback();
	
					// changeBy: pranathi, disc: at the time of creating poll, updating workdashboard store
					var obj = {
						command: 'RELOAD_POLLS_LIST',
						content: {},
						type: 'OBJECT'
					};
	
					this.confObject.sendMessage(obj, 0);
				} else {
					alertify.alert(this.props.intl.messages.warning, res.error, function () {}).setting({ 'label': this.props.intl.messages.ok });
				}
			}
		}, {
			key: 'handlePollContent',
			value: function handlePollContent() {
				var obj = { current: 'pollList', pollContent: true, pollList: false, createPoll: false, submissionList: false, pollReports: false };
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;
	
				var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
				var cls_btnSaveAssign = ' ' + _Dashboard2.default.btnSaveAssign + ' ';
	
				var data = this.props.workDashboardData.pollContentData;
				var profileImage = data ? data.createdBy ? data.createdBy.profile ? data.createdBy.profile.profileImage : '' : '' : '';
				if (profileImage == '' || profileImage == undefined || profileImage == null) {
					var imagePath = '/images/profile-pics/defaultStudent.jpg';
				} else {
					var imagePath = '/uploads/' + profileImage;
				}
				if (data && data.question) {
					if (data.question.length > 10) {
						var question = data.question.substring(0, 10) + '...';
					} else {
						var question = data.question;
					}
				}
	
				return _jsx('div', {}, void 0, _jsx('div', {
					className: _Dashboard2.default.whiteCard
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.breadCrum
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'roomName'
				}, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref7, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'pollList',
					onClick: this.handlePollList.bind(this)
				}, void 0, _ref8)), this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.question ? _ref9 : null, this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.question ? _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'pollContent',
					onClick: this.handlePollContent.bind(this)
				}, void 0, _jsx('span', {
					title: this.props.workDashboardData.pollContentData.question
				}, void 0, question))) : null, _ref10, _jsx('li', {}, void 0, _jsx('span', {}, void 0, this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.question ? _ref11 : _ref12)))), _jsx('div', {
					className: _Dashboard2.default.topicViewheader
				}, void 0, _jsx('h1', {
					className: _Dashboard2.default.mainHeadingTxt
				}, void 0, this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.question ? _ref13 : _ref14)), _jsx('label', {
					className: _component2.default.errorPre
				}, void 0, this.state.error), _jsx('div', {
					className: _Dashboard2.default.topicsListBody
				}, void 0, _jsx('form', {
					className: 'form-horizontal'
				}, void 0, _jsx('div', {
					className: 'form-group'
				}, void 0, _ref15, _jsx('div', {
					className: 'col-md-10'
				}, void 0, _react2.default.createElement('textarea', { id: 'question', className: 'form-control', placeholder: '', value: this.state.question, onChange: this.handleQuestion.bind(this), ref: 'question', maxLength: 300, autoFocus: 'true' }))), _jsx('div', {}, void 0, this.state.values.map(function (item, index) {
					return _jsx(_TextBox2.default, {
						value: item,
						index: index,
						change: _this2.handleOption.bind(_this2, index)
					}, index);
				}), _jsx('div', {
					className: 'form-group'
				}, void 0, _ref16, _jsx('p', {
					className: 'col-md-10'
				}, void 0, _jsx('a', {
					id: 'addQuestion',
					onClick: this.handleAddOption.bind(this)
				}, void 0, _ref17), ' /', _jsx('a', {
					id: 'remove',
					onClick: this.handleRemoveOption.bind(this)
				}, void 0, _ref18), ' ', _ref19))), _jsx('div', {
					className: _Dashboard2.default.submitBtnBlock
				}, void 0, _jsx('div', {
					className: 'pull-right'
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.blockSaveAssign
				}, void 0, _jsx('button', {
					id: 'submitPollList',
					type: 'submit',
					onClick: this.handlePollList.bind(this)
				}, void 0, _ref20), '\xA0\xA0', _jsx('button', {
					id: 'createPollBtn',
					type: 'submit',
					className: cls_btnSaveAssign,
					onClick: this.createPoll.bind(this, false)
				}, void 0, _ref21, this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.question ? _ref22 : _ref23), '\xA0\xA0', _jsx('button', {
					id: 'savePublish',
					type: 'submit',
					className: cls_btnSaveAssign,
					onClick: this.createPoll.bind(this, true)
				}, void 0, _ref24, ' ', this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.question ? _ref25 : _ref26))))))));
			}
		}]);
	
		return CreatePoll;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			dashboardData: (0, _UserDashboardReducer.dashboardData)(state),
			intl: state.intl,
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state)
		};
	}
	
	CreatePoll.contextTypes = {
		intl: _react2.default.PropTypes.object.isRequired
	
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(CreatePoll);

/***/ },

/***/ 491:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Hangout = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactRedux = __webpack_require__(16);
	
	var _Sources = __webpack_require__(427);
	
	var _Sources2 = _interopRequireDefault(_Sources);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _VideoInConf = __webpack_require__(510);
	
	var _VideoInConf2 = _interopRequireDefault(_VideoInConf);
	
	var _HostControl = __webpack_require__(424);
	
	var _HostControl2 = _interopRequireDefault(_HostControl);
	
	var _LoginActions = __webpack_require__(21);
	
	var _Analytics = __webpack_require__(66);
	
	var _Analytics2 = _interopRequireDefault(_Analytics);
	
	var _AuthController = __webpack_require__(9);
	
	var _AuthController2 = _interopRequireDefault(_AuthController);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _InviteBox = __webpack_require__(401);
	
	var _InviteBox2 = _interopRequireDefault(_InviteBox);
	
	var _lodash = __webpack_require__(7);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	// import ControlVideo from './ControlVideo';
	
	// import { clearGuestAccount } from '../../../Communication/ConferenceActions';
	
	var _ref = _jsx('div', {
	  className: 'col-md-12'
	}, void 0, _jsx('br', {}));
	
	var _ref2 = _jsx('div', {
	  className: 'col-md-12 text-center'
	}, void 0, _jsx(_reactFontawesome2.default, {
	  name: 'ban',
	  size: '5x'
	}));
	
	var _ref3 = _jsx('div', {
	  className: 'col-md-6'
	}, void 0, _jsx('h3', {}, void 0, "If you're having a problem with your camera:"), _jsx('br', {}), _jsx('ul', {}, void 0, _jsx('li', {}, void 0, 'Close any open applications that use a camera or microphone, such as other video-calling or chat programs.'), _jsx('li', {}, void 0, 'Make sure your camera is compatible with your computer.'), _jsx('li', {}, void 0, 'Download the most recent drivers for your camera from the manufacturer\'s website.'), _jsx('li', {}, void 0, 'Try restarting your browser.')));
	
	var _ref4 = _jsx('div', {
	  className: 'col-md-6'
	}, void 0, _jsx('h3', {}, void 0, 'Having a problem with your video call\'s sound?'), _jsx('br', {}), _jsx('ul', {}, void 0, _jsx('li', {}, void 0, 'If you have an external microphone or speakers, make sure they\'re plugged into the correct sockets on your computer.'), _jsx('li', {}, void 0, 'Check that your microphone isn\'t on mute. Some microphones have buttons to mute or un-mute. If you\'re using a headset, it may have a mute switch on the side of the headset or on the cable that connects to your computer.'), _jsx('li', {}, void 0, 'Close any open applications that use a camera or microphone. For example, other video calling or chat programs.'), _jsx('li', {}, void 0, 'Make sure your friend has their microphone set up correctly.')));
	
	var _ref5 = _jsx('div', {
	  className: 'col-md-12'
	}, void 0, 'If you\'re still experiencing a problem after trying the suggestions above, Please contact us at hotech@peoplelinkvc.com');
	
	var _ref6 = _jsx('div', {
	  className: 'col-md-12'
	}, void 0, _jsx('br', {}), _jsx('br', {}), _jsx('hr', {}));
	
	var _ref7 = _jsx('div', {
	  className: 'col-md-9'
	}, void 0, '\xA0');
	
	var _ref8 = _jsx(_reactFontawesome2.default, {
	  name: 'cog'
	});
	
	var _ref9 = _jsx('img', {
	  src: '/images/white-icons/host-white.png'
	});
	
	var _ref10 = _jsx(_reactFontawesome2.default, {
	  name: 'arrows-alt'
	});
	
	var _ref11 = _jsx(_reactFontawesome2.default, {
	  name: 'times'
	});
	
	var _ref12 = _jsx(_reactFontawesome2.default, {
	  name: 'bars'
	});
	
	var _ref13 = _jsx('img', {
	  src: '/images/white-icons/end-call.png'
	});
	
	var _ref14 = _jsx('img', {
	  src: '/images/white-icons/white-share.png',
	  alt: 'share-icon'
	});
	
	var Hangout = exports.Hangout = function (_Component) {
	  _inherits(Hangout, _Component);
	
	  function Hangout(props) {
	    _classCallCheck(this, Hangout);
	
	    var _this = _possibleConstructorReturn(this, (Hangout.__proto__ || Object.getPrototypeOf(Hangout)).call(this, props));
	
	    _this.showOrHideInviteBox = function (response) {
	      if (_this.state.showInviteBox) {
	        _this.setState({
	          showInviteBox: !_this.state.showInviteBox, roomId: null, scheduleId: null, roomKey: '', slotId: null
	        });
	      } else {
	        _this.setState({
	          showInviteBox: !_this.state.showInviteBox, roomId: response.roomid, scheduleId: _this.props.scheduleId, roomKey: response.roomkey, slotId: response.slotId
	        });
	      }
	    };
	
	    _this.state = {
	      videos: [],
	      audioIn: [],
	      audioOut: [],
	      cameraDevices: [],
	      showHost: false,
	      newWidth: 0,
	      selfVideo: false,
	      showInviteBox: false,
	      showNavBar: false,
	      videoPosition: [],
	      lastSpeakerIndex: -1,
	      lastPresenterIndex: -1
	    };
	    _this.videos = [];
	    _this.selfVideo = null;
	    _this.SyncSpeaker = _this.SyncSpeaker.bind(_this);
	    _this.props.confObject.SetSpeakerListener(_this.SyncSpeaker);
	    _this.flipSettings = _this.flipSettings.bind(_this);
	    _this.setPresenter = _this.setPresenter.bind(_this);
	
	    _this.setRemoveVideo = _this.setRemoveVideo.bind(_this);
	
	    _this.props.confObject.setRemoveVideo(_this.setRemoveVideo);
	    // this.endCall = this.endCall.bind(this);
	
	    _this.HandleSyncSSPdf = _this.HandleSyncSSPdf.bind(_this);
	    _this.props.confObject.SyncSSPdfListener(_this.HandleSyncSSPdf);
	
	    _this.HandleSyncPdfClose = _this.HandleSyncPdfClose.bind(_this);
	    _this.props.confObject.SyncPdfCloseListener(_this.HandleSyncPdfClose);
	
	    _this.HandleSyncCurrent = _this.HandleSyncCurrent.bind(_this);
	    _this.props.confObject.SyncListener(_this.HandleSyncCurrent);
	    return _this;
	  }
	
	  _createClass(Hangout, [{
	    key: 'setRemoveVideo',
	    value: function setRemoveVideo(stream) {
	      console.log("Remove Video Hangout Req", stream);
	      var stIndex = _.findIndex(this.videos, ['key', stream.id()]);
	      if (stIndex >= 0) {
	        this.videos.splice(stIndex, 1);
	        this.setState({ videos: this.videos });
	        this.state.videoPosition = new Array(this.videos.length).fill({ index: -1, sid: "" });
	      } else if (stream == null) {}
	      // this.videos.splice(stIndex, 0);
	      // this.setState({videos: this.videos});
	
	
	      // this.setState({videoLength: this.videos.length});
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.token != '' && this.props.token != undefined) {
	        var that = this;
	        this.props.confObject.getConference(this.props.iceServers, this.props.transport, function (res) {
	          that.joinConference();
	        });
	      }
	      this.props.hideHeader(true, this.state.showNavBar);
	
	      document.addEventListener("onwebkitfullscreenchange", function (state) {
	        console.log('Full Screen - Change', state);
	      });
	    }
	  }, {
	    key: 'flipSettings',
	    value: function flipSettings() {
	
	      if (!this.state.flip) {
	
	        var that = this;
	        this.props.confObject.getDevices(function (deviceInfos) {
	
	          that.audioIn = [];
	          that.audioOut = [];
	          that.cameraDevices = [];
	
	          for (var i = 0; i !== deviceInfos.length; ++i) {
	            var deviceInfo = deviceInfos[i];
	
	            var deviceID = deviceInfo.deviceId;
	            var deviceKind = deviceInfo.kind;
	            var deviceText = '';
	
	            if (deviceKind === 'audioinput') {
	              deviceText = deviceInfo.label || 'Microphone';
	              that.audioIn.push([deviceID, deviceText]);
	            } else if (deviceKind === 'audiooutput') {
	              deviceText = deviceInfo.label || 'Speaker';
	              that.audioOut.push([deviceID, deviceText]);
	            } else if (deviceKind === 'videoinput') {
	              deviceText = deviceInfo.label || 'Camera';
	              that.cameraDevices.push([deviceID, deviceText]);
	            }
	          }
	
	          // console.log("DEV", that.cameraDevices);
	          that.setState({ audioIn: that.audioIn, audioOut: that.audioOut, cameraDevices: that.cameraDevices });
	        });
	      }
	
	      this.setState({ flip: !this.state.flip });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      console.log("Count ", nextProps.streams.length);
	      var that = this;
	      var resolutionBtns = [];
	      if (this.props.roomType == "Mix") {
	        if (nextProps.streams != null && nextProps.streams.length > 0) {
	          this.props.confObject.trySubscribeMixStream(function (stream) {
	            console.log("Mix Stream Received", stream);
	            // stream.resolutions().map(function(resolution) {
	
	            // });
	            that.displayStream(stream);
	          });
	        }
	      } else {
	        // console.log(layout_16[nextProps.streamCount]);
	        if (nextProps.streams != null && nextProps.streams.length > 0) {
	          this.subscribeVideos(nextProps.streams);
	        }
	      }
	    }
	  }, {
	    key: 'subscribeVideo',
	    value: function subscribeVideo(stream) {
	      L.Logger.info('New stream in conference:', stream.id());
	      var that = this;
	      if (!stream.showing && stream.mediaStream == undefined && stream.from != "") {
	        this.props.confObject.trySubscribeStream(stream, function (stream) {
	          that.displayStream(stream);
	        });
	      } else {
	        console.log("Stream already subscrubed", stream);
	        if (!stream.showing && stream.from != "" && stream.mediaStream) {
	          this.displayStream(stream);
	        }
	      }
	    }
	  }, {
	    key: 'subscribeVideos',
	    value: function subscribeVideos(streams) {
	      console.log("Subscribe Videos");
	      var that = this;
	      streams.map(function (stream, index) {
	        console.log("Video on Hangout", stream, index);
	        if (index == 0) {
	          //Refresh Selfvideo once;
	          that.selfVideo = that.props.confObject.getLocalStream();
	
	          if (that.selfVideo) {
	            // that.selfVideo.sid = stream.id();
	            that.displayStream(that.selfVideo, true);
	            that.setState({ selfVideo: true });
	          }
	        } else {
	          if (stream) {
	            L.Logger.info('stream in conference:', stream.id());
	            if (!stream.showing) {
	              that.subscribeVideo(stream);
	            }
	          }
	        }
	      });
	      // console.log("Count",streams);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.confObject.hideLocalStream();
	      this.props.hideHeader(false, false);
	    }
	  }, {
	    key: 'getSubscribers',
	    value: function getSubscribers(streams) {}
	  }, {
	    key: 'joinConference',
	    value: function joinConference() {
	      var that = this;
	      var settings = { video: this.props.selfVideo, publish: this.props.publishVideo,
	        audio: this.props.selfAudio, codec: this.props.codec,
	        uid: this.props.myid, videoResolution: this.props.videoResolution, roomKey: this.props.roomKey,
	        hostId: this.props.hostId, scheduleId: this.props.scheduleId,
	        users: this.props.users
	      };
	      console.log(this.props.token, this.props.confObject);
	      this.props.confObject.joinConference(this.props.token, settings, function (status, streams, selfVideo) {
	        // console.log(selfVideo, streams);
	        if (selfVideo) {
	          if (that.props.roomType != "Mix") {
	            // that.displayStream(selfVideo, true);
	            that.selfVideo = selfVideo;
	            that.setState({ selfVideo: true });
	          } else {
	            that.selfVideo = selfVideo;
	            that.setState({ selfVideo: true });
	          }
	        }
	        that.props.sendStreams(streams);
	      });
	    }
	  }, {
	    key: 'setSpeaker',
	    value: function setSpeaker(stream) {
	      var defIndex = _.findIndex(this.props.streams, ['sid', stream.id()]);
	
	      if (defIndex > 1) {
	
	        //   var stIndex = _.findIndex(this.videos, ['key', stream.id()]);
	        //   stream.hide();
	
	        //   /*The moment the selected user set as speaker, remove him from the scroll list.*/
	        //   this.videos.splice(stIndex, 1);
	
	        //   So now remove current speaker from the presenter screen, 
	        //   so previous speaker will have space to go there.
	        //   let sp_stream = this.props.streams[1];
	        //   if(sp_stream.showing){
	        //         let elementId = document.getElementById(sp_stream.elementId).parentElement.id;
	        //         sp_stream.hide();
	        //         document.getElementById(sp_stream.elementId).remove();
	        //   }
	        this.props.confObject.setSpeaker(stream);
	      }
	    }
	  }, {
	    key: 'removeVideo',
	    value: function removeVideo(sid) {
	      var isVideoFound = _.findIndex(this.videos, ['key', sid]);
	      console.log("Remove Addtional Video Index", isVideoFound, sid);
	      if (isVideoFound >= 0) {
	        var removedStream = _.pullAt(this.videos, [isVideoFound]);
	        console.log("Removed Video Stream", removedStream);
	        this.setState({ videos: this.videos });
	      }
	    }
	  }, {
	    key: 'updateVideoPosition',
	    value: function updateVideoPosition(position, lastSpeakerIndex, lastPresenterIndex) {
	      this.state.lastPresenterIndex = lastPresenterIndex;
	      this.state.lastSpeakerIndex = lastSpeakerIndex;
	      this.setState({ videoPosition: position });
	    }
	  }, {
	    key: 'getVideoPosition',
	    value: function getVideoPosition() {
	      return { videoPosition: this.state.videoPosition, lastPresenterIndex: this.state.lastPresenterIndex, lastSpeakerIndex: this.state.lastSpeakerIndex };
	    }
	  }, {
	    key: 'displayStream',
	    value: function displayStream(stream) {
	      var self = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	      // var layout = layout_16[this.props.streamCount]
	      if (stream.sid != undefined) {
	        var isVideoFound = _.findIndex(this.videos, ['key', stream.sid]);
	        console.log("isVideoFound", isVideoFound, stream.sid, stream);
	        if (isVideoFound < 0 /*&& stream.id() != null*/) {
	            var streamLength = store.getState().conference.streams.length;
	            this.state.videoPosition = new Array(streamLength).fill({ index: -1 });
	
	            var objVideo = _jsx(_VideoInConf2.default, {
	              sCount: this.props.streamCount,
	              newWidth: this.state.newWidth,
	              muteOrAudio: self,
	              removeVideo: this.removeVideo.bind(this),
	              roomType: this.props.roomType,
	              confObject: this.props.confObject,
	              streamId: stream.sid,
	              stream: stream,
	              speaker: this.requestSpeaker.bind(this),
	              isGuest: this.props.isGuest,
	              videoPosition: this.state.videoPosition,
	              updateVideoPosition: this.updateVideoPosition.bind(this),
	              getVideoPosition: this.getVideoPosition.bind(this)
	            }, stream.sid, ' ');
	            this.videos.push(objVideo);
	            this.setState({ videos: this.videos });
	            console.log(this.videos);
	          }
	      }
	    }
	  }, {
	    key: 'requestSpeaker',
	    value: function requestSpeaker(stream) {
	      //Message Format {type: 'IMG | TXT | VID', content: '', command: 'INDCHAT | GRPCHAT | ETC'}
	      //Request other terminals
	      var objSpeaker = {
	        command: 'SPEAKER-REQ',
	        content: { stream_from: stream.from, streamId: stream.id() },
	        type: 'STRING'
	      };
	
	      this.props.confObject.sendMessage(objSpeaker, 0);
	    }
	  }, {
	    key: 'endCall',
	    value: function endCall() {
	      this.props.confObject.endConference(this.props.roomKey);
	      this.props.endCallBack();
	      // console.log(this.props.isGuest);
	      // if (this.props.isGuest) {
	      //   this.props.dispatch(clearGuestAccount(this.props.roomKey)).then(res => this.logOut(res));
	      // };
	    }
	
	    // logOut(res){
	    //   if (res.status) {
	    //     Analytics.destroyObj();
	    //     store.dispatch(ClearImage());
	    //     AuthClient.deleteSession();
	    //     browserHistory.push('/');
	    //   } else {
	    //     console.log("Failed to remove guest.");
	    //   }
	    // }
	
	  }, {
	    key: 'showHost',
	    value: function showHost() {
	      if (this.props.imHost == false && this.props.confHostId != '' && this.props.confHostId != this.props.myid) {
	        alertify.alert('Access Denied', 'Host already exist, at a time one host is allowed.', function () {});
	      } else {
	        this.setState({ showHost: true });
	      }
	    }
	  }, {
	    key: 'closeHost',
	    value: function closeHost() {
	      this.setState({ showHost: false });
	    }
	  }, {
	    key: 'setPresenter',
	    value: function setPresenter() {
	      if (this.selfVideo) {
	        this.props.confObject.setPresenter(this.selfVideo.sid);
	      }
	    }
	  }, {
	    key: 'fullScreen',
	    value: function fullScreen() {
	      var elem = document.getElementById("videoConf");
	      if (elem.requestFullscreen) {
	        elem.requestFullscreen();
	      } else if (elem.msRequestFullscreen) {
	        elem.msRequestFullscreen();
	      } else if (elem.mozRequestFullScreen) {
	        elem.mozRequestFullScreen();
	      } else if (elem.webkitRequestFullscreen) {
	        elem.webkitRequestFullscreen();
	      }
	
	      this.setState({ newWidth: document.body.clientWidth });
	    }
	  }, {
	    key: 'showInviteBox',
	    value: function showInviteBox() {
	      this.setState({ showInviteBox: !this.state.showInviteBox });
	    }
	  }, {
	    key: 'showResponse',
	    value: function showResponse(response) {
	      if (response.status) {
	        console.log("Success in response");
	        // this.refs.dashboardcontainer.success(response.message, ``);
	      } else if (response.error) {
	        console.log("error in showResponse === ", response.error);
	        // this.refs.dashboardcontainer.error(response.error, ``);
	      }
	    }
	  }, {
	    key: 'restartConference',
	    value: function restartConference() {
	      //this.props.confObject.endConference(this.props.params.rid, true);
	      location.reload();
	      // this.endCallBack();
	    }
	  }, {
	    key: 'showNavBar',
	    value: function showNavBar() {
	      this.props.hideHeader(true, !this.state.showNavBar);
	      this.setState({ showNavBar: !this.state.showNavBar });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var cls_SelfVideoCard = '' + _Dashboard2.default.selfVideoCard;
	      return _jsx('div', {
	        className: _Dashboard2.default.conferenceLayout
	      }, void 0, this.props.confFeedbackBlock == 2 ? _jsx('div', {
	        id: 'feedbackBlocker',
	        className: _Dashboard2.default.feedbackBlocker
	      }, void 0, _jsx('div', {
	        className: 'container'
	      }, void 0, _jsx('div', {
	        className: 'row'
	      }, void 0, _ref, _ref2, _jsx('div', {
	        className: 'col-md-12'
	      }, void 0, _jsx('h1', {}, void 0, this.props.confFeedback)), _ref3, _ref4, _ref5, _ref6), _jsx('div', {
	        className: 'row'
	      }, void 0, _ref7, _jsx('div', {
	        className: 'col-md-3'
	      }, void 0, _jsx('button', {
	        type: 'button',
	        className: 'btn btn-success pull-left',
	        onClick: this.restartConference.bind(this)
	      }, void 0, 'Restart Conference'))))) : '', _jsx(_InviteBox2.default, {
	        showModal: this.state.showInviteBox,
	        hidecallback: this.showOrHideInviteBox.bind(this),
	        scheduleId: this.props.scheduleId,
	        slotId: this.props.slotId,
	        userId: this.props.myid,
	        errorCallback: this.showResponse.bind(this),
	        roomKey: window.location.protocol + "//" + window.location.hostname + window.location.pathname,
	        confFlag: this.props.confObject.getConnectionStatus()
	      }), this.state.selfVideo ? _jsx('div', {
	        className: _Dashboard2.default.videoSettings,
	        onClick: this.flipSettings.bind(this),
	        title: this.props.intl.messages.video_settings
	      }, void 0, _ref8) : '', this.props.hosticon && !this.props.isGuest ? _jsx('div', {
	        className: _Dashboard2.default.videoSettings,
	        onClick: this.showHost.bind(this),
	        style: this.props.imHost == true ? { left: "80px", backgroundColor: "#ff0000" } : { left: "80px" },
	        title: this.props.imHost ? this.props.intl.messages.revoke_host : this.props.intl.messages.become_host
	      }, void 0, _ref9, _jsx(_HostControl2.default, {
	        presenterfunc: this.setPresenter,
	        closeHost: this.closeHost.bind(this),
	        showModal: this.state.showHost
	      })) : null, _jsx('div', {
	        className: _Dashboard2.default.videoFullHangout,
	        onClick: this.fullScreen.bind(this),
	        title: this.props.intl.messages.full_Screen
	      }, void 0, _ref10), _jsx('div', {
	        className: _Dashboard2.default.mobNavCall,
	        onClick: this.showNavBar.bind(this),
	        title: 'Nav Bar'
	      }, void 0, this.state.showNavBar ? _ref11 : _ref12), _jsx('div', {
	        id: 'videoConf',
	        className: _Dashboard2.default.videoConf,
	        style: this.props.isGuest ? { "width": "calc(100vw - 0px)" } : {}
	      }, void 0, this.state.videos, this.state.videos.length > 0 ? _jsx('div', {
	        id: 'endCall',
	        onClick: this.endCall.bind(this),
	        className: _Dashboard2.default.endBtnHangout
	      }, void 0, _ref13) : ''), this.state.flip ? _jsx('div', {
	        className: _Dashboard2.default.hangoutSettings
	      }, void 0, _jsx(_Sources2.default, {
	        imHost: this.props.imHost,
	        flipfunc: this.flipSettings,
	        confObject: this.props.confObject,
	        audioIn: this.state.audioIn,
	        audioOut: this.state.audioOut,
	        cameraDevices: this.state.cameraDevices
	      })) : '', this.props.shareicon && !this.props.isGuest ? _jsx('div', {
	        className: _Dashboard2.default.shareInviteHangout,
	        title: this.props.intl.messages.share_Link,
	        onClick: this.showInviteBox.bind(this)
	      }, void 0, _ref14) : null, this.props.confFeedback != '' ? _jsx('div', {
	        className: _Dashboard2.default.feedbackStatus
	      }, void 0, _jsx('p', {}, void 0, this.props.confFeedback)) : '');
	    }
	
	    //////////////////////
	
	  }, {
	    key: 'HandleSyncPdfClose',
	    value: function HandleSyncPdfClose(obj) {
	      this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
	    }
	  }, {
	    key: 'HandleSyncSSPdf',
	    value: function HandleSyncSSPdf(obj) {
	      this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
	    }
	  }, {
	    key: 'SyncSpeaker',
	    value: function SyncSpeaker(sid, sender) {
	      if (this.props.streams) {
	        var defIndex = _.findIndex(this.props.streams, ['sid', sid]);
	        if (defIndex >= 0) {
	          this.setSpeaker(this.props.streams[defIndex]);
	        }
	      }
	    }
	  }, {
	    key: 'HandleSyncCurrent',
	    value: function HandleSyncCurrent(obj) {
	      var objEntity = null;
	      if (obj.current == 'handraise') objEntity = { sync: obj.sync, current: obj.current, handraiseCount: 0, handraiseupdates: false };else if (obj.current == 'roomchat') objEntity = { sync: obj.sync, current: obj.current, roomCount: 0 };else if (obj.current == 'topicList') objEntity = Object.assign(obj);else if (obj.current == 'assignmentList') objEntity = Object.assign(obj);else if (obj.current == 'pollList') objEntity = Object.assign(obj);else if (obj.current == 'screenshare') {
	        objEntity = Object.assign(obj);
	        objEntity["ssNotification"] = false;
	        // objEntity = {sync : obj.sync, current : obj.current, ssNotification : false, showButtons : obj.showButtons};
	      } else objEntity = { sync: obj.sync, current: obj.current };
	      this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(objEntity));
	    }
	
	    ////////////////////
	
	  }]);
	
	  return Hangout;
	}(_react.Component);
	
	Hangout.contextTypes = {
	  intl: _react2.default.PropTypes.object.isRequired,
	  router: _react2.default.PropTypes.object
	};
	
	Hangout.defaultProps = { selfVideo: true, selfAudio: true, publishVideo: true };
	
	exports.default = (0, _reactRedux.connect)()((0, _reactIntl.injectIntl)(Hangout));

/***/ },

/***/ 492:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(64);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _component = {
		"form-control": "QmIrbtmLmFNpHdWMqFMWS",
		"innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
		"colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
		"error": "_3jAfmA6J7YmNDyB2VfsCxP",
		"mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
		"dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
		"iElement": "_2crZNiFs8z8oNhzPDC1qOE",
		"oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
		"iLabel": "_3Pyvct_srCoSvJCgGG41jw",
		"oLabel": "NsxWZpxBqBX8wky_O477_",
		"iForm": "_3IlToa7pigrSS8KWut_dJ8",
		"oForm": "_3N0YNUcfI5U02VSmBEbYot",
		"iFormField": "_12yKSn29WLZIE6fvGQfcrN",
		"oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
		"iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
		"oFormGroup": "_386CxczA49XX2-ejr3Qe55",
		"formNext": "ccTxjcG6_GZO9OgzW33HT",
		"iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
		"oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
		"iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
		"oContainer": "_2tEAAtqgoutuOUU96rNvv1",
		"iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
		"oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
		"iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
		"iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
		"whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
		"iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
		"active": "_2fF1Q9nO2O_1B8Ldb4RM52",
		"scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
		"errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
		"errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
		"whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
		"greyCard": "_34l9W17Mt1koxHLd1yUqgk",
		"reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
		"countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
		"react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
		"ad": "N3bKXyhfwvWT3eAEC9Nno",
		"ae": "taXUT8yfjgRMeSH3rMNxy",
		"af": "_2vH4qShCgBPBO4GR8BdNvd",
		"ag": "n8QfWtvpZLMpatCUqX2Td",
		"ai": "_3fPX_RcpesOPxFsmsaygCE",
		"al": "_1T12tbcC6990b-fIMG5LYW",
		"am": "_31HdarMDfXvAgjizVUoeHk",
		"ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
		"ar": "_2qJleMgRbIErIrx3kQF57O",
		"as": "_2ZPVYL8Vjn-vdWZToCEhjN",
		"at": "_1hWilvnrVbANEHRyLGlF-m",
		"au": "_2zJE4K6o-ftWqhb3exXZgk",
		"aw": "_1UroMxX5JHt9bjGdHwa1OY",
		"az": "_-Y2xueZ_1mEtB9YDOqEGB",
		"ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
		"bb": "_34600Kl8Wac9Hx7S3-3U6b",
		"bd": "_3WBX90V5VJXA7-vSUfEWCh",
		"be": "BcK33edOPcbYdkxxvOApy",
		"bf": "ShN64-J7UZdswoQjkf7L_",
		"bg": "_2A9PgkQEF5_KbvHvDf6_lY",
		"bh": "_10p3rxNRYOhv8-BtZuq1w8",
		"bi": "_6MzP1qXXDFAZVL7nBmRiH",
		"bj": "_2U8H1sji9LfDEW706KyKvF",
		"bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
		"bn": "PgMDvF79WHl3kaklOmhw3",
		"bo": "_7MheGVInaTi-QLxw5PiUi",
		"br": "_1BDNUyT0cHDlbCBFgrrLkJ",
		"bs": "_3vcASZB5bu7mJAzTzaRkWe",
		"bt": "esu4pvyd9ZFWrf-etnrva",
		"bw": "_2Hbv1I361RJFK3Ph2xPlu_",
		"by": "_2tbYam6Og8RAicMhX9SXvI",
		"bz": "_3xB704PIgqFnU2zTG-JZFN",
		"ca": "_36FyK29nkNl9Ez7yWh04AS",
		"cd": "_9PnHTqK1pSn_GIAbBtPT2",
		"cf": "_2LgMF7o1A3a2cgw5jkpvZV",
		"cg": "_3hYc9Y3UdCphltZKe2vJWk",
		"ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
		"ci": "FoSGkvvMDFAVcvsZBWX-Z",
		"ck": "_1742IgEaHW3SZU7h_-nkwr",
		"cl": "_36IaMt7ntEwUsH4lwN4tW-",
		"cm": "_1N8krqbPtlsEVsh6SaCetm",
		"cn": "IfkD3fwbUSx9FZflX6iIU",
		"co": "_3Y7u7ONzxyZVjZYzS1OHTr",
		"cr": "Gw5Qz4qBNZjPDmpQmi-d2",
		"cu": "ZuHtEp_knwZcbwTTJkRgI",
		"cv": "o6BzJCyjRH1pOsf_HpbQ6",
		"cw": "hRElJCQXyNIITDZ6UQVut",
		"cy": "_2cHKWrINPNO6L8BEOdtJCG",
		"cz": "nS617LE8Qcckdv9HJTWpt",
		"de": "fqJD93WBywDPs0lrLEXLT",
		"dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
		"dk": "_3fpBLMtuUi0kowy3ziMRYd",
		"dm": "_3gMwGkQW-OGFx1U7vd7VMD",
		"do": "G9EZGjpXLJUyQuREesyGO",
		"dz": "_3Nka0vwv6nZpeugyuqYQIJ",
		"ec": "_18t83SdIOs8EY6iF0zV0CZ",
		"ee": "_1miCbYr55XmBKvcUu6XetR",
		"eg": "_1T55wMh1svM7M5QGxFM2ex",
		"er": "c0Ab9spCQ4VnXr_6xijnD",
		"es": "_1lutiEL9tJpdNgKmnTT6Ld",
		"et": "_2GGXIPO2kOV6CUsu65V4Z3",
		"fi": "_1I-g5oWpQznT5QZuBfQ8A",
		"fj": "_3oeTP_GhC_XzsjzHW86oDc",
		"fk": "_3-_BjK4NArHS0nyf0DLc4F",
		"fm": "_1WQYGDC-zTatxog3SIwE80",
		"fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
		"fr": "_3-mqatBXfaTfex8LWjnIDA",
		"bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
		"mf": "_34f4ya9mcbpIcQPgHJ4I6c",
		"ga": "_15_iO4CJaXbX7PySxoldPF",
		"gb": "_1vZuFSSey59_ixozre-0L_",
		"gd": "_26Ub0jcjDpVD4nwM7m5n4e",
		"ge": "_27ctDR0Hf6HO15MgHS8wyh",
		"gf": "_2S6C39D4wNBuVSqzYM5Ldy",
		"gh": "_3vjGi6-umA-RzwxRFaTfNN",
		"gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
		"gl": "_1OTvyS4D4UOkymKuDLxUdx",
		"gm": "_3-0gezNOVCHKzaLYGUySo2",
		"gn": "_8f6uadrEfnS9IX8DEIpKO",
		"gp": "_36yEj9UcEbZcI0WJvgmk0B",
		"gq": "xHX18x9xk7PhDBlgsvnad",
		"gr": "HTk_eFej1VrCiBuKBIfLT",
		"gt": "hgmUbzxaHNZNL6frPhPeb",
		"gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
		"gw": "_36JwaXqhh4gBrIvAy4c1KO",
		"gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
		"hk": "_1mT74O5OVtonPLmYnVVOu7",
		"hn": "_1ze0KI-TYxTrDcXlMOu24s",
		"hr": "ZIDUSRfcbDCZTyhqWGPob",
		"ht": "Y65Ad5pf3z7ufcknP0vhk",
		"hu": "_3EHKICvcensXt5hEu8Nkfs",
		"id": "_3oZE8uvxIFK7M9DCEtsSCD",
		"ie": "_2RNmpg94YYioQp2fWyz_xn",
		"il": "_2Mq_no7KYxPp2NSLGS1Tcs",
		"in": "_1UlEZ269GihRa58c5mCEBN",
		"io": "_3ovelrc7S_DdmXxL-8uuwk",
		"iq": "_3VSlK6DYHrBgKbkE2Rng2N",
		"ir": "NRX2sFBmuPSJ9EOigyuEP",
		"is": "_25HaTNE7x74CJO9S1mnm4I",
		"it": "_1-LmlhbrcpKN-xjESmR_sO",
		"jm": "VsvDBply-4FtMoJhi8Cvu",
		"jo": "yEE3hbkzWK8CSCrCJibCo",
		"jp": "_3oxjjz1uD2cX2QsoSToLgz",
		"ke": "_1ksOT6KMPd99EWuWCXPga_",
		"kg": "_2CMnR3yv5DGwDc8p3uoOjp",
		"kh": "_927b1QnaSWnN35i3bVewJ",
		"ki": "_2CuDp55lqYTpFp68D4IWep",
		"km": "_3tvMTeZYZMzBB9bGn9lV9E",
		"kn": "_6kbCvwc22pJX0tNv3HToQ",
		"kp": "_3tIPOe5PNrHH-bgCGaZTJj",
		"kr": "_2653rpVUuy3ETaw1mogdnF",
		"kw": "_1SKg_lTe0ShbPSOl44eKjp",
		"ky": "tgj8SOv7bYoF7qfbbQWNG",
		"kz": "bchn50J152EdQa0zf3k5u",
		"la": "mu9oycLgpKX8_yLLkR5b9",
		"lb": "_2TcAFbagIrNyc6mgzRVNW0",
		"lc": "_2IFItnUNT-albvpN-ksxd2",
		"li": "_3_E6nQspv6zJQLQI24puaS",
		"lk": "_2M2wq3qQhGeUegbBTs7ilH",
		"lr": "L4o4xOg0s6QbasyIRPgyF",
		"ls": "LhBB6SRin61WSFtUwaEfe",
		"lt": "ITDUphrnMkKItKGMVHZf8",
		"lu": "_1mVW30sc4i-1M8tDPCQlL",
		"lv": "_3rq6vE2IagAsGI6iESAcJq",
		"ly": "_3se_Nzm1WQrEN3VZYiJJrv",
		"ma": "_fSDiNxp_jjfqkQcWffDM",
		"mc": "_2hRTRZeBtDGN4mNeWBZVgB",
		"md": "_26jDl0skadEwmUYDGmEzST",
		"me": "_388lJj_7sQdyd9HL7pMrar",
		"mg": "_3aFoqVWcvG3p47Vwa6UuoE",
		"mh": "_1YHi6OtXmKfP15ZNbwYGgy",
		"mk": "_9QVyhHcp8yH762J8fWXhC",
		"ml": "yYD99PoyhgFI4912_qoyJ",
		"mm": "URzk8-j7LcySpGUMJf_Qk",
		"mn": "_1J-lktQUTK0rydBz3foJGF",
		"mo": "_1sbL0zhHof-KbfGWu2qjqF",
		"mp": "_1tJjJlSjRw5AnqcXXmGwCI",
		"mq": "fHob9sxaJrTuqSc0xL744",
		"mr": "t-Bmj7a31aA-IwcRcL0ua",
		"ms": "_2xyT54DQP62zWDySH7-Kdy",
		"mt": "_1Ul_OlGODc8S0QplVq94PV",
		"mu": "_1yIBERRJqnV33pTq2VpKRc",
		"mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
		"mw": "_3i8n-5-htdGNJLgn96O21",
		"mx": "_16-6zoyiVzSGB1O72cUTzV",
		"my": "_3W2P0D9eTN4BQoOcThOsaM",
		"mz": "wJ8icX7Asp3dSImkXOdTM",
		"na": "_1qt_F94mybbX5kr0ArtN-Z",
		"nc": "h82AMIuCGdKf69Hc_nM6D",
		"ne": "_2mVa5nGsijzD93WRl8dk64",
		"nf": "_3XQ9oUH_84SsdZLjpVRuqT",
		"ng": "_1uyyH1GZjsEk3YpaUSmmG6",
		"ni": "_22_3H6UeFo26o3fSavtQaX",
		"nl": "_93asfBYgR8C7bEDucZO8l",
		"bq": "_37A1nwIz7Z3obwUjmliw4s",
		"no": "_2-sVmkWiLn_ogTikc0c0Eg",
		"np": "_1PqZSwf5cuMNmbE7bpKe67",
		"nr": "_9q5Rg9Xn0G2buivFSGySP",
		"nu": "RLhVdyjL9Cex8ekaJqirU",
		"nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
		"om": "_9mZYNhgBLiQg-j1FeVprJ",
		"pa": "_3S7TrzxJIEYVghUMVHB6E7",
		"pe": "_3V5sP7VvdGOFqApj7POYl2",
		"pf": "_1YzdrkyHO-eCcEFF-hjZl7",
		"pg": "ddWAanlQJPlB0QDWO6dAF",
		"ph": "_2TGbmCcqHlJFCssz78MxOs",
		"pk": "_2JerTABYGCUN8FLjpnDzKy",
		"pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
		"pm": "_29Hoo7EsoSHtvRFvlVg2cD",
		"pr": "_3_pkwz60KLoYcbKwaRvIsS",
		"ps": "_3jenITZ_yUYS7kU1HwFEHj",
		"pt": "_1vz8ABWy5Yd43_JhaTWq9u",
		"pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
		"py": "_1_W41pJLcGMRhLdU997clv",
		"qa": "Z0tjAakoNSOs14KuenmRi",
		"re": "_3k5KF4jzE7HUitQw9MQKnp",
		"ro": "_2b8XhT3-7NgjAC8gJJkpis",
		"rs": "_2MUJr9MQbiKRTd_g0TaRQr",
		"ru": "HjzPW2CxxNMSGZw1ugFW7",
		"rw": "_23TGIOoPmB9QYqIPG6W3tA",
		"sa": "_34WM8rSonfayW0vJ3koqJS",
		"sb": "_3486rZNsCjvTmIoHbjK8mG",
		"sc": "_3meAM_iQCU6MyfPQJTN3yl",
		"sd": "_2x6XeHNF__4s9VVfFXCJhO",
		"se": "_66VDclGQXxpdUR8uE3ZFa",
		"sg": "tv3I_hfLcUJ_8i9ewVcUz",
		"sh": "_1syDbbhbumwMwwD7Dwkb1V",
		"si": "_3jsffwJjGr2sMEofSTTGkG",
		"sk": "_1EpYAUcQLCqbYB48Auixqb",
		"sl": "_3STJQv9nY5mol4cW82D2ci",
		"sm": "_9aTR-AZMTaYHRmDVAyFTM",
		"sn": "_3mTatYTWeJQQACfV7xzRhi",
		"so": "_1LnWon2slwLMqAHzhkRT4c",
		"sr": "_1GSedFwSsf5isgOi3p0x6U",
		"ss": "_1sq99LOjKKgery3luOXOFn",
		"st": "_1O6vYx_NaXFBAs1qYxgwaB",
		"sv": "_10D9RGnRzUv14bYWQaC23c",
		"sx": "KonDEEzH2JzIWsVUBzFdY",
		"sy": "_1ZAnqGYeixOJVFwwt6hNIo",
		"sz": "_3FeOFkec3sXYbvQhWDdIM7",
		"tc": "_1FZvldKEV-vz12TyyNfEf",
		"td": "_31fysfDRtTWVKcX_UjX0ty",
		"tg": "H60Kyr6MsF6nvRz5l7EfN",
		"th": "SHZkbUz1c_H_zDOfxLc4",
		"tj": "_2MRI0fA4OLgepXVooYMu9H",
		"tk": "_1W959S9LHLCKhz3xi4MpHe",
		"tl": "_1lMF_0nwQXTyBRRzRj7hBF",
		"tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
		"tn": "_2MeGi_bqLVuCaRtJzs3QqA",
		"to": "_3egwC_50WENVPaap_uwXr8",
		"tr": "_2KiPy3o6m7JCKQWPY2fI1d",
		"tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
		"tv": "_2D9VWSmHkhgNemAaIKF_cp",
		"tw": "_2J7nVAh1zEa7kV5Ba51CLV",
		"tz": "_2acF96LLqMjlbfMX1oiAjT",
		"ua": "_2rr3Tyr8dP6vDvE0khEDKT",
		"ug": "D7gjzKmlr78rNWXXw90np",
		"us": "_1l5RtWI_acgLVeCd5fjgHG",
		"uy": "_1zX6hTsIa2TtL6dgR47eQ9",
		"uz": "_29NUL3VtwK1_RWUyPsY2ei",
		"va": "_39kTgRBkhqqGVLUTJvK_67",
		"vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
		"ve": "_3Lk2Svkm2NTAVpUfiY_No5",
		"vg": "_3SiYuGrNzW9DNkXwTZugyj",
		"vi": "_2BiiERObu5xcE6P1SZxLdj",
		"vn": "_3kSg6iW0KLoUpJ0g70fckK",
		"vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
		"wf": "Arz0xEqJcbKbLmPz_tXTS",
		"ws": "_3oTaxcmbTriEd90-cXNqD8",
		"ye": "gxtmCiQO2ao4JTQXuRUIJ",
		"za": "_25HyrYKmQQAteF_LwADnIt",
		"zm": "Kui2u7hZHcNBqlzbqR-vQ",
		"zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
		"hide": "_2kO_U0LXcg71jJA6RSia2e",
		"v-hide": "_2HBc009zwTsSlkh8P8tH10",
		"invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
		"flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
		"open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
		"selected-flag": "_10c169vRt8V92_nQ_S0KtR",
		"flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
		"arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
		"up": "_2ykRnfq4f2nlmZGfvzrn92",
		"country-list": "UlTusogWL2urjgGgLNpcD",
		"divider": "_2zMaTbM3nSdE07wOs7YYRt",
		"country": "uL848pHFWhb_G94Ak-KX5",
		"dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
		"highlight": "BLa_2aA2PkYD2PsO2fvNC",
		"country-name": "_3ih_ovRiGmAkpjxuz63nhk",
		"uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
		"fileUpload": "_2WENukerx3mNXkTyu0UXQf",
		"uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
		"upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
		"blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
		"feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
		"errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
		"gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
		"red": "_3wj0AXV9gqX9YG1nk-2u9J",
		"green": "_3KPVxc3su8ewtuKZgu8TGv",
		"orange": "_3cLlE5QI9XJwY6e7jO5bLg",
		"capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
		"importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
		"importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
		"importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
		"icon": "_12rnwIUewKT2PdtWMnNyD5",
		"importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
		"broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
		"broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
		"btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
		"textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
		"spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
		"pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
		"lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
		"removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
		"inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
		"popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
		"dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
		"dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
		"applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
		"filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
		"btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
		"assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
		"pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
		"assTab": "y4LW63OuadI0JWTQBnbJ1",
		"heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
		"radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
		"wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
		"leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
		"rightBox": "DP21PoKxwKk_vJyOuQTcr",
		"gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
		"actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
		"gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
		"actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
		"gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
		"morePref": "JBm94eKPIFI8vfiroATJ6",
		"tile": "_1Ssp2zTovh7AwJWuRkgnge",
		"tileItems": "_3cDqgy8AedDYzhy8Euosis",
		"tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
		"tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
		"category": "_2Ow56TBY2Y24yY5SjVRU4l",
		"innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
		"maxScore": "_3uL97t2vemfuAs83cAFhjE",
		"maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
		"scored": "_12gGWK_s69JBGzOAX7ClkT",
		"scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
		"remTile": "_3vgBsvWRGVVRwIEDn1TquO",
		"tileBody": "dF1WC_PeNjG87K2XGMIcS",
		"tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
		"gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
		"gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
		"assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
		"blue": "K7acjAQMroOGGtUqqojYy",
		"yellow": "G7N-PGOIbGO_ZkaqBu2mx",
		"txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
		"txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
		"txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
		"txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
		"txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
		"txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
		"addTile": "lCw_kxhsAPcuM3yFAqvpF",
		"addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
		"addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
		"commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
		"totalScore": "FDG4LAia-7JDDtxb7R4Kb",
		"totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
		"textBox": "_13VdIFmMegxz_eR8VIXN_M",
		"totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
		"totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
		"resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
		"resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
		"resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
		"headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
		"scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
		"resultBody": "N6kKlySaRGbRcB4bBmpZ0",
		"resGroup": "_2byM-_1N3yjHb2dpmlikdf",
		"resTile": "DZeuj4DKkdAPKCgYd76RK",
		"resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
		"resRating": "R7j9mxFZmdmLgC7bPXpyN",
		"txtSize": "_977ldMQMMiHQ0YG_61T3g",
		"txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
		"resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
		"resInput": "_14gsxA36f-uYOfxGDvr_gi",
		"activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
		"feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
		"fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
		"feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
		"profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
		"profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
		"profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
		"name": "_25-6SxUiv8zhOMEVTRrg8w",
		"commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
		"addpdng": "_6rQH8tivz8ELIWszpbahs",
		"good": "_3lOxcxDfxhPcuhLBJHo4Ur",
		"vGood": "l_IAfocpDxfvpU316U0EI",
		"fair": "_3I3YapUnBVxgs-ZsGf3Poh",
		"poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _reactRedux = __webpack_require__(16);
	
	var _Modal = __webpack_require__(52);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _roles = __webpack_require__(46);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
		id: 'Please_select_any_option'
	});
	
	var _ref2 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref3 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'poll_list'
	}));
	
	var _ref4 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref5 = _jsx('img', {
		src: '/images/black-icons/black-update-poll.png',
		alt: 'manage-poll-icon'
	});
	
	var _ref6 = _jsx('img', {
		src: '/images/black-icons/delete-box-black.png',
		alt: 'manage-poll-icon'
	});
	
	var _ref7 = _jsx('img', {
		src: '/images/black-icons/black-submission.png',
		alt: 'manage-poll-icon'
	});
	
	var _ref8 = _jsx('img', {
		src: '/images/black-icons/black-graph.png',
		alt: 'manage-poll-icon'
	});
	
	var _ref9 = _jsx('img', {
		src: '/images/black-icons/black-graph.png',
		alt: 'manage-poll-icon'
	});
	
	var _ref10 = _jsx(_reactIntl.FormattedMessage, {
		id: 'author'
	});
	
	var _ref11 = _jsx(_reactFontawesome2.default, {
		name: 'question'
	});
	
	var _ref12 = _jsx(_reactFontawesome2.default, {
		name: 'fa-paper-plane'
	});
	
	var _ref13 = _jsx(_reactIntl.FormattedMessage, {
		id: 'submit'
	});
	
	var _ref14 = _jsx('div', {
		className: 'pull-right'
	}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'submitted'
	})));
	
	var PollContent = function (_Component) {
		_inherits(PollContent, _Component);
	
		function PollContent(props) {
			_classCallCheck(this, PollContent);
	
			var _this = _possibleConstructorReturn(this, (PollContent.__proto__ || Object.getPrototypeOf(PollContent)).call(this, props));
	
			_this.handleWorkDashboard = function (obj) {
				_this.props.imHost == true && _this.props.workDashboardData.sync == true ? _this.props.syncCallback(obj) : _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			};
	
			_this.submitAnswer = function () {
				if (_this.state.answer == '') {
					_this.setState({
						error: _ref
					});
				} else {
					var pollData = {
						roomId: _this.props.roomId,
						pollId: _this.props.workDashboardData.pollContentData._id,
						answer: _this.state.answer
					};
					_this.props.dispatch((0, _WorkDashboardActions.savePollAnswerRequest)({ pollData: pollData })).then(function (res) {
						return _this.setResponse(res);
					});
				}
			};
	
			_this.handlePollContSelSync = function (objEntity) {
				var obj = {
					command: 'POLL-CONT-SEL-SYNC',
					content: { data: objEntity },
					type: 'OBJECT'
				};
				_this.props.confObject.sendMessage(obj, 0);
			};
	
			_this.handleSelection = _this.handleSelection.bind(_this);
			_this.props.confObject.PollContentSelectListener(_this.handleSelection);
			_this.setResponse = _this.setResponse.bind(_this);
			_this.state = {
				userData: null,
				answer: '',
				submitted: false,
				error: ''
			};
			_this.confObject = new _WoogeenManager2.default();
			return _this;
		}
	
		_createClass(PollContent, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var pollData = {
					roomId: this.props.roomId,
					pollId: this.props.workDashboardData.pollContentData._id
				};
				this.props.dispatch((0, _WorkDashboardActions.getPollSubmissionsRequest)(pollData));
				this.setdata(this.props.loggedInData);
	
				if (this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.submissions && this.props.workDashboardData.pollContentData.submissions.length > 0) {
					var student = _.find(this.props.workDashboardData.pollContentData.submissions, ['submittedBy._id', this.props.workDashboardData.uid]);
	
					if (student != undefined) {
						this.setState({
							answer: student.answer,
							submitted: true
						});
					}
				}
			}
		}, {
			key: 'setdata',
			value: function setdata(result) {
				// console.log("Dashboard Data", result);
				if (result && result.data && result.data._id) {
					this.setState({ userData: result.data });
				}
			}
		}, {
			key: 'handlePollList',
			value: function handlePollList() {
				this.props.pollListCallback();
				var obj = { current: 'pollList', pollContent: false, pollList: true, createPoll: false, submissionList: false, pollReports: false };
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'setSelector',
			value: function setSelector() {
				var obj = null;
				if (this.props.workDashboardData.sync == true && this.props.imHost == true) {
					if (window.getSelection) {
						var range = window.getSelection().getRangeAt(0);
						var preSelectionRange = range.cloneRange();
						preSelectionRange.selectNodeContents(this.refs.editor);
						preSelectionRange.setEnd(range.startContainer, range.startOffset);
						var start = preSelectionRange.toString().length;
	
						obj = {
							start: start,
							end: start + range.toString().length,
							uid: this.props.workDashboardData.uid
						};
					} else if (document.selection && document.selection.type != "Control") {
						var selectedTextRange = document.selection.createRange();
						var preSelectionTextRange = document.body.createTextRange();
						preSelectionTextRange.moveToElementText(this.refs.editor);
						preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
						var _start = preSelectionTextRange.text.length;
	
						obj = {
							start: _start,
							end: _start + selectedTextRange.text.length,
							uid: this.props.workDashboardData.uid
						};
					}
					this.handlePollContSelSync(obj);
				}
			}
		}, {
			key: 'selectHandler',
			value: function selectHandler() {
				this.setSelector();
			}
	
			//Code changed by - Najib, Desc - routing is called only for non-guest users
	
		}, {
			key: 'viewUser',
			value: function viewUser() {
				if (!this.props.isGuest) {
					_reactRouter.browserHistory.push('/profile/' + this.props.workDashboardData.pollContentData.createdBy._id);
				}
			}
		}, {
			key: 'updatePoll',
			value: function updatePoll() {
				this.props.updatePollCallback();
				var obj = { current: 'pollList', pollContent: false, pollList: false, createPoll: true, submissionList: false, pollReports: false };
				this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			}
		}, {
			key: 'deletePoll',
			value: function deletePoll(pollId) {
				var id = pollId;
				var props = this.props;
				var response = this.setResponse;
	
				alertify.confirm(this.props.intl.messages.warning, this.props.intl.messages.delete_poll_alert, function (result) {
					if (result) {
						var pollData = {
							roomId: props.roomId,
							pollId: pollId
						};
						props.dispatch((0, _WorkDashboardActions.deletePollRequest)(pollData)).then(function (res) {
							return response(res);
						});
					}
				}, function () {}).setting('labels', { 'ok': this.props.intl.messages.ok, 'cancel': this.props.intl.messages.cancel });
			}
		}, {
			key: 'handleSubmission',
			value: function handleSubmission(e) {
				this.setState({
					answer: e.target.value,
					error: ''
				});
			}
		}, {
			key: 'setResponse',
			value: function setResponse(res) {
				//changeBy: pranathi, disc: added alert model boxes
				if (res.status) {
					if (res.errorCode == 200) {
						this.setState({
							submitted: true
						});
						alertify.alert("Sucess", res.message, function () {}).setting({ 'label': this.props.intl.messages.ok });
	
						var pollData = {
							roomId: this.props.roomId,
							pollId: this.props.workDashboardData.pollContentData._id
						};
						this.props.dispatch((0, _WorkDashboardActions.getPollSubmissionsRequest)(pollData));
					} else {
						alertify.alert("Sucess", res.message, function () {}).setting({ 'label': this.props.intl.messages.ok });
	
						this.props.pollListCallback();
	
						var obj = { current: 'pollList', pollContent: false, pollList: true, pollContentData: null, pollContentIndex: null, createPoll: false, submissionList: false, pollReports: false };
						this.handleWorkDashboard(obj);
	
						var deleteObj = {
							command: 'RELOAD_POLLS_LIST',
							content: {},
							type: 'OBJECT'
						};
	
						this.confObject.sendMessage(deleteObj, 0);
					}
				} else {
					if (res.errorCode == 404) {
						alertify.alert(this.props.intl.messages.warning, res.error, function () {}).setting({ 'label': this.props.intl.messages.ok });
						var _obj = { current: 'pollList', pollContent: false, pollList: true, pollContentData: null, pollContentIndex: null, createPoll: false, submissionList: false, pollReports: false };
						this.handleWorkDashboard(_obj);
						this.props.pollListCallback();
						var roomObj = {
							roomKey: this.props.roomKey
						};
						this.props.dispatch((0, _WorkDashboardActions.getConferencePollData)(roomObj));
					} else {
						alertify.alert(this.props.intl.messages.warning, res.error, function () {}).setting({ 'label': this.props.intl.messages.ok });
					}
				}
			}
		}, {
			key: 'submissionList',
			value: function submissionList() {
				var _this2 = this;
	
				var pollData = {
					roomId: this.props.roomId,
					pollId: this.props.workDashboardData.pollContentData._id
				};
				this.props.dispatch((0, _WorkDashboardActions.getPollSubmissionsRequest)(pollData)).then(function (res) {
					return _this2.setSubmissionResponse(res);
				});
			}
		}, {
			key: 'setSubmissionResponse',
			value: function setSubmissionResponse(res) {
				var obj = { current: 'pollList', pollContent: false, pollList: false, createPoll: false, submissionList: true, pollReports: false };
				this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			}
		}, {
			key: 'reports',
			value: function reports() {
				var _this3 = this;
	
				var pollData = {
					roomId: this.props.roomId,
					pollId: this.props.workDashboardData.pollContentData._id
				};
				this.props.dispatch((0, _WorkDashboardActions.getPollSubmissionsRequest)(pollData)).then(function (res) {
					return _this3.setReportResponse(res);
				});
			}
		}, {
			key: 'setReportResponse',
			value: function setReportResponse(res) {
				var obj = { current: 'pollList', pollContent: false, pollList: false, createPoll: false, submissionList: false, pollReports: true };
				this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			}
		}, {
			key: 'render',
			value: function render() {
				var _this4 = this;
	
				var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_topicAuthorGuest = 'clearfix ' + _Dashboard2.default.topicAuthorGuest;
				var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
				var cls_formInline = _Dashboard2.default.formInline + ' form-inline';
	
				var data = this.props.workDashboardData.pollContentData;
				var profileImage = data ? data.createdBy ? data.createdBy.profile ? data.createdBy.profile.profileImage : '' : '' : '';
				if (profileImage == '' || profileImage == undefined || profileImage == null) {
					var imagePath = '/images/profile-pics/defaultStudent.jpg';
				} else {
					var imagePath = '/uploads/' + profileImage;
				}
	
				if (data && data.question && data.question.length > 10) {
					var question = data.question.substring(0, 10) + '...';
				} else {
					var question = data && data.question ? data.question : '';
				}
	
				return _jsx('div', {}, void 0, _jsx('div', {
					className: _Dashboard2.default.whiteCard
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.breadCrum
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'roomName'
				}, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref2, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'pollList',
					onClick: this.handlePollList.bind(this)
				}, void 0, _ref3)), _ref4, _jsx('li', {}, void 0, _jsx('span', {
					title: this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.question
				}, void 0, question))), this.state.userData != null && (this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.createdBy && this.props.workDashboardData.pollContentData.createdBy._id == this.state.userData._id || this.state.userData.role == _roles.Roles.Admin || this.state.userData.role == _roles.Roles.Lmsadmin) ? _jsx('div', {
					className: _Dashboard2.default.absoluteRightActionBlock
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'updatePoll',
					title: this.props.intl.messages.update_poll,
					onClick: this.updatePoll.bind(this)
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _ref5))), _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'deletePoll',
					title: this.props.intl.messages.delete_poll,
					onClick: this.deletePoll.bind(this, this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData._id)
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _ref6))), _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'submissionList',
					title: this.props.intl.messages.submission_list,
					onClick: this.submissionList.bind(this)
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _ref7))), _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'reports',
					title: this.props.intl.messages.reports,
					onClick: this.reports.bind(this)
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _ref8))))) : null, this.props.role == _roles.Roles.Student || this.props.isGuest == true ? this.state.submitted ? _jsx('div', {
					className: _Dashboard2.default.absoluteRightActionBlock
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'reports',
					title: this.props.intl.messages.reports,
					onClick: this.reports.bind(this)
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _ref9))))) : null : null), _jsx('div', {
					className: _Dashboard2.default.topicViewheader
				}, void 0), _jsx('label', {
					className: _component2.default.errorPre
				}, void 0, this.state.error), _jsx('div', {
					className: _Dashboard2.default.topicsListBody
				}, void 0, _jsx('div', {
					className: cls_authorsBox
				}, void 0, _jsx('span', {
					className: _Dashboard2.default.hrzlList
				}, void 0, _jsx('div', {
					className: this.props.isGuest ? cls_topicAuthorGuest : cls_topicAuthor
				}, void 0, _jsx('img', {
					id: 'viewprofile',
					src: imagePath,
					onClick: this.viewUser.bind(this),
					title: this.props.intl.messages.viewprofile
				}), _jsx('div', {
					className: _Dashboard2.default.authorInfo
				}, void 0, _jsx('p', {
					className: _Dashboard2.default.authorName
				}, void 0, this.props.workDashboardData && this.props.workDashboardData.pollContentData && this.props.workDashboardData.pollContentData.createdBy && this.props.workDashboardData.pollContentData.createdBy.firstname, ' ', this.props.workDashboardData && this.props.workDashboardData.pollContentData.createdBy && this.props.workDashboardData.pollContentData.createdBy.lastname), _jsx('p', {
					className: _Dashboard2.default.authorDisg
				}, void 0, _ref10))))), _jsx('div', {
					className: _Dashboard2.default.topicsListBody
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx('div', {
					className: _Dashboard2.default.questionBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.questionHeading
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.questionIconCircle
				}, void 0, _ref11), _jsx('h3', {}, void 0, this.props.workDashboardData.pollContentData.question)), _jsx('div', {
					className: _Dashboard2.default.chooseAnswerBlock
				}, void 0, _jsx('form', {
					className: cls_formInline
				}, void 0,
				// this.props.role == Roles.Student
				// ?
				_jsx('div', {
					className: 'radio'
				}, void 0, this.props.workDashboardData.pollContentData.options.map(function (item, index) {
					if (_this4.state.answer == item) {
						var checked = true;
					} else {
						var checked = false;
					}
					var number = index + 1;
					if (_this4.state.submitted != true) {
						return _jsx('label', {
							className: 'radio-inline'
						}, index, _jsx('input', {
							id: 'optradio',
							type: 'radio',
							name: 'optradio',
							value: item,
							checked: checked,
							onChange: _this4.handleSubmission.bind(_this4)
						}), _jsx('span', {}, void 0, number, ')'), ' ', item);
					} else {
						return _jsx('label', {
							className: 'radio-inline'
						}, index, _jsx('input', {
							id: 'optradio',
							type: 'radio',
							name: 'optradio',
							value: item,
							checked: checked,
							disabled: true
						}), _jsx('span', {}, void 0, number, ')'), ' ', item);
					}
				}))
				//  	:
				// this.props.workDashboardData.pollContentData.options.map((item, index)=>{
				// 	var number = index + 1
				// 	return <label className="radio-inline" key={index}>
				//        <span>{number})</span> {item}
				//      </label>
				// })
				))))),
				// this.props.role == Roles.Student
				// ?
				this.state.submitted != true ? _jsx('div', {
					className: _Dashboard2.default.submitBtnBlock
				}, void 0, _jsx('div', {
					className: 'pull-right'
				}, void 0, _jsx('button', {
					id: 'submitAnswer',
					type: 'submit',
					className: _Dashboard2.default.btnApplyAll,
					onClick: this.submitAnswer
				}, void 0, _ref12, '  ', _ref13))) : _ref14
				// : null
				))));
			}
	
			///////////////////////
	
		}, {
			key: 'handleSelection',
			value: function handleSelection(obj) {
				if (obj.uid != this.props.workDashboardData.uid) {
					if (document.createRange) {
						var charIndex = 0,
						    range = document.createRange();
						range.setStart(this.refs.editor, 0);
						range.collapse(true);
						var nodeStack = [this.refs.editor],
						    node = void 0,
						    foundStart = false,
						    stop = false;
						while (!stop && (node = nodeStack.pop())) {
							if (node.nodeType == 3) {
								var nextCharIndex = charIndex + node.length;
								if (!foundStart && obj.start >= charIndex && obj.start <= nextCharIndex) {
									range.setStart(node, obj.start - charIndex);
									foundStart = true;
								}
								if (foundStart && obj.end >= charIndex && obj.end <= nextCharIndex) {
									range.setEnd(node, obj.end - charIndex);
									stop = true;
								}
								charIndex = nextCharIndex;
							} else {
								var i = node.childNodes.length;
								while (i--) {
									nodeStack.push(node.childNodes[i]);
								}
							}
						}
						var sel = window.getSelection();
						sel.removeAllRanges();
						sel.addRange(range);
					} else if (document.body.createTextRange) {
						var textRange = document.body.createTextRange();
						textRange.moveToElementText(this.refs.editor);
						textRange.collapse(true);
						textRange.moveEnd("character", obj.end);
						textRange.moveStart("character", obj.start);
						textRange.select();
					}
				}
			}
		}]);
	
		return PollContent;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			intl: state.intl,
			loggedInData: (0, _LoginReducer.loggedInData)(state),
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state)
		};
	}
	
	PollContent.contextTypes = {
		intl: _react2.default.PropTypes.object.isRequired
	
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(PollContent);

/***/ },

/***/ 493:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _roles = __webpack_require__(46);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
		id: 'author'
	});
	
	var _ref2 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'published'
	}));
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
		id: 'publish'
	});
	
	var _ref4 = _jsx(_reactBootstrap.Col, {
		md: 3
	});
	
	var _ref5 = _jsx(_reactIntl.FormattedMessage, {
		id: 'view_result'
	});
	
	var _ref6 = _jsx(_reactBootstrap.Col, {
		md: 4
	});
	
	var _ref7 = _jsx(_reactIntl.FormattedMessage, {
		id: 'view_result'
	});
	
	var _ref8 = _jsx(_reactIntl.FormattedMessage, {
		id: 'submit_poll'
	});
	
	var _ref9 = _jsx(_reactIntl.FormattedMessage, {
		id: 'submitted'
	});
	
	var _ref10 = _jsx(_reactIntl.FormattedMessage, {
		id: 'submit_poll'
	});
	
	var _ref11 = _jsx(_reactIntl.FormattedMessage, {
		id: 'submitted'
	});
	
	var PollData = function (_Component) {
		_inherits(PollData, _Component);
	
		function PollData(props) {
			_classCallCheck(this, PollData);
	
			var _this = _possibleConstructorReturn(this, (PollData.__proto__ || Object.getPrototypeOf(PollData)).call(this, props));
	
			_this.state = {
				submitted: false
			};
			_this.confObject = new _WoogeenManager2.default();
			return _this;
		}
	
		_createClass(PollData, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				if (this.props.data && this.props.data.submissions && this.props.data.submissions.length > 0) {
					var user = _.find(this.props.data.submissions, ['submittedBy._id', this.props.workDashboardData.uid]);
					if (user != undefined) {
						this.setState({
							submitted: true
						});
					}
				}
			}
		}, {
			key: 'handleFullPoll',
			value: function handleFullPoll() {
				this.props.contantCallback();
			}
	
			//Code changed by - Najib, Desc - routing is called only for non-guest users
	
		}, {
			key: 'viewUser',
			value: function viewUser() {
				if (!this.props.isGuest) {
					_reactRouter.browserHistory.push('/profile/' + this.props.data.createdBy._id);
				}
			}
		}, {
			key: 'publishPoll',
			value: function publishPoll(pollData) {
				var _this2 = this;
	
				var pollInfo = pollData;
				if (pollInfo.publish == false) {
					var _pollData = {
						roomId: this.props.roomId,
						pollId: pollInfo._id
					};
					this.props.dispatch((0, _WorkDashboardActions.publishPollRequest)(_pollData)).then(function (res) {
						return _this2.setPublishResponse(res);
					});
				}
			}
		}, {
			key: 'setPublishResponse',
			value: function setPublishResponse(res) {
				var obj = {
					command: 'RELOAD_POLLS_LIST',
					content: {},
					type: 'OBJECT'
				};
	
				this.confObject.sendMessage(obj, 0);
			}
		}, {
			key: 'viewResults',
			value: function viewResults() {
				var _this3 = this;
	
				var pollData = {
					roomId: this.props.roomId,
					pollId: this.props.data._id
				};
				this.props.dispatch((0, _WorkDashboardActions.getPollSubmissionsRequest)(pollData)).then(function (res) {
					return _this3.setSubmissionResponse(res);
				});
			}
		}, {
			key: 'setSubmissionResponse',
			value: function setSubmissionResponse(res) {
				var data = res.data;
				this.props.resultCallback(data.pollContentData);
			}
		}, {
			key: 'render',
			value: function render() {
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_topicAuthorGuest = 'clearfix ' + _Dashboard2.default.topicAuthorGuest;
				var cls_publishBtn = _Dashboard2.default.btnPost + ' ' + _Dashboard2.default.btnApplyAll;
				var data = this.props.data;
				var profileImage = data ? data.createdBy ? data.createdBy.profile ? data.createdBy.profile.profileImage : '' : '' : '';
				if (profileImage == '' || profileImage == undefined || profileImage == null) {
					var imagePath = '/images/profile-pics/defaultStudent.jpg';
				} else {
					var imagePath = '/uploads/' + profileImage;
				}
				if (this.props.data != null) {
					return _jsx('li', {}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
						className: _Dashboard2.default.listTitle
					}, void 0, _jsx(_reactRouter.Link, {
						id: 'fullPoll',
						onClick: this.handleFullPoll.bind(this)
					}, void 0, this.props.data.question))), _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
						md: 5
					}, void 0, _jsx('div', {
						className: this.props.isGuest ? cls_topicAuthorGuest : cls_topicAuthor
					}, void 0, _jsx('img', {
						id: 'viewprofile',
						src: imagePath,
						onClick: this.viewUser.bind(this),
						title: this.props.intl.messages.viewprofile
					}), _jsx('div', {
						className: _Dashboard2.default.authorInfo
					}, void 0, _jsx('p', {
						className: _Dashboard2.default.authorName
					}, void 0, this.props.data.createdBy.firstname, ' ', this.props.data.createdBy.lastname), _jsx('p', {
						className: _Dashboard2.default.authorDisg
					}, void 0, _ref)))), this.props.role != _roles.Roles.Student ? this.props.data.createdBy._id == this.props.workDashboardData.uid ? _jsx(_reactBootstrap.Col, {
						md: 3
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.shortDecBlock
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.fullTopic
					}, void 0, this.props.data.publish ? _ref2 : _jsx('button', {
						id: 'publishPoll',
						className: cls_publishBtn,
						onClick: this.publishPoll.bind(this, this.props.data)
					}, void 0, _ref3)))) : _ref4 : this.props.role == _roles.Roles.Student ? this.state.submitted ? _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.shortDecBlock
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.fullTopic
					}, void 0, _jsx(_reactRouter.Link, {
						id: 'viewResults',
						onClick: this.viewResults.bind(this)
					}, void 0, _ref5)))) : _ref6 : null, this.props.role != _roles.Roles.Student ? this.props.data.publish ? _jsx(_reactBootstrap.Col, {
						md: 2
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.shortDecBlock
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.fullTopic
					}, void 0, _jsx(_reactRouter.Link, {
						id: 'viewResults',
						onClick: this.viewResults.bind(this)
					}, void 0, _ref7)))) : null : this.state.submitted != true ? _jsx(_reactBootstrap.Col, {
						md: 2
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.shortDecBlock
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.fullTopic
					}, void 0, _jsx(_reactRouter.Link, {
						id: 'submitPoll',
						onClick: this.handleFullPoll.bind(this)
					}, void 0, _ref8)))) : _jsx(_reactBootstrap.Col, {
						md: 2
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.shortDecBlock
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.fullTopic
					}, void 0, _ref9))), this.props.role != _roles.Roles.Student && this.props.data.publish ? this.state.submitted != true ? _jsx(_reactBootstrap.Col, {
						md: 2
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.shortDecBlock
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.fullTopic
					}, void 0, _jsx(_reactRouter.Link, {
						id: 'submitPoll',
						onClick: this.handleFullPoll.bind(this)
					}, void 0, _ref10)))) : _jsx(_reactBootstrap.Col, {
						md: 2
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.shortDecBlock
					}, void 0, _jsx('span', {
						className: _Dashboard2.default.fullTopic
					}, void 0, _ref11))) : null));
				} else return;
			}
		}]);
	
		return PollData;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			intl: state.intl,
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state)
		};
	}
	
	PollData.contextTypes = {
		intl: _react2.default.PropTypes.object.isRequired
	
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(PollData);

/***/ },

/***/ 494:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _PollContent = __webpack_require__(492);
	
	var _PollContent2 = _interopRequireDefault(_PollContent);
	
	var _PollData = __webpack_require__(493);
	
	var _PollData2 = _interopRequireDefault(_PollData);
	
	var _CreatePoll = __webpack_require__(490);
	
	var _CreatePoll2 = _interopRequireDefault(_CreatePoll);
	
	var _PollSubmissionList = __webpack_require__(496);
	
	var _PollSubmissionList2 = _interopRequireDefault(_PollSubmissionList);
	
	var _PollReports = __webpack_require__(495);
	
	var _PollReports2 = _interopRequireDefault(_PollReports);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _roles = __webpack_require__(46);
	
	var _WorkDashboardReloadReducer = __webpack_require__(154);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref2 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'poll_list'
	})));
	
	var _ref3 = _jsx('img', {
		src: '/images/black-icons/black-create-poll.png',
		alt: 'manage-poll-icon'
	});
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
		id: 'welcome_room'
	});
	
	var _ref5 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'list_polls'
	}));
	
	var _ref6 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_polls_yet'
	}), ' ');
	
	var PollList = function (_Component) {
		_inherits(PollList, _Component);
	
		function PollList(props) {
			_classCallCheck(this, PollList);
	
			var _this = _possibleConstructorReturn(this, (PollList.__proto__ || Object.getPrototypeOf(PollList)).call(this, props));
	
			_this.handleWorkDashboard = function (obj) {
				_this.props.imHost == true && _this.props.workDashboardData.sync == true ? _this.props.syncCallback(obj) : _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			};
	
			_this.state = {
				refresh: false,
				pollListData: []
			};
			return _this;
		}
	
		_createClass(PollList, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var obj = {
					roomKey: this.props.roomKey
				};
				this.props.dispatch((0, _WorkDashboardActions.getConferencePollData)(obj));
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (this.props.workDashboardReload.pollList != nextProps.workDashboardReload.pollList) {
					var obj = {
						roomKey: this.props.roomKey
					};
					this.props.dispatch((0, _WorkDashboardActions.getConferencePollData)(obj));
				}
			}
		}, {
			key: 'handleFullPoll',
			value: function handleFullPoll(index, data) {
				var obj = { current: 'pollList', pollContent: true, pollList: false, pollContentData: data, pollContentIndex: index, createPoll: false, submissionList: false, pollReports: false };
				if (data.publish == true) {
					this.handleWorkDashboard(obj);
				} else {
					this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
				}
			}
		}, {
			key: 'handleList',
			value: function handleList() {
				var obj = { current: 'pollList', pollContent: false, pollList: true, createPoll: false, submissionList: false, pollReports: false };
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'syncCallback',
			value: function syncCallback(obj) {
				this.props.syncCallback(obj);
			}
		}, {
			key: 'createPoll',
			value: function createPoll() {
				var obj = { current: 'pollList', pollContent: false, pollList: false, pollContentData: null, pollContentIndex: null, createPoll: true, submissionList: false, pollReports: false };
				this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			}
		}, {
			key: 'updatePoll',
			value: function updatePoll() {
				var obj = { current: 'pollList', pollContent: false, pollList: false, createPoll: true, submissionList: false, pollReports: false };
				this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			}
		}, {
			key: 'refreshPollList',
			value: function refreshPollList() {
				var _this2 = this;
	
				this.setState({
					refresh: true
				});
				var obj = {
					roomKey: this.props.roomKey
				};
				this.props.dispatch((0, _WorkDashboardActions.getConferencePollData)(obj)).then(function (res) {
					return _this2.setResponse(res);
				});
			}
		}, {
			key: 'setResponse',
			value: function setResponse(res) {
				this.setState({
					refresh: false
				});
			}
		}, {
			key: 'viewResults',
			value: function viewResults(index, data) {
				var obj = { current: 'pollList', pollContent: false, pollList: false, pollContentData: data, pollContentIndex: index, createPoll: false, submissionList: false, pollReports: true };
				if (data.publish == true) {
					this.handleWorkDashboard(obj);
				} else {
					this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _this3 = this;
	
				var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
	
				var pollList = this.props.workDashboardData.pollList ? _jsx('div', {
					className: _Dashboard2.default.whiteCard
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.breadCrum
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {}, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref, _ref2), _jsx('div', {
					className: _Dashboard2.default.absoluteRightActionBlock
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					onClick: this.refreshPollList.bind(this),
					title: this.props.intl.messages.refresh_polls
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _jsx('img', {
					src: '/images/black-icons/black-regenerate.png',
					className: this.state.refresh == true ? _Dashboard2.default.spinAnimation : null
				})))), this.props.role != _roles.Roles.Student && this.props.isGuest == false ? _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					title: this.props.intl.messages.create_poll,
					onClick: this.createPoll.bind(this)
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconBox
				}, void 0, _ref3))) : null))), _jsx('div', {
					className: _Dashboard2.default.topicsListheader
				}, void 0, _jsx('h2', {
					className: _Dashboard2.default.headingTxt
				}, void 0, _ref4, _jsx('span', {}, void 0, this.props.roomName)), _ref5), _jsx('div', {
					className: _Dashboard2.default.topicsListBody
				}, void 0, _jsx('ul', {}, void 0,
				// this.state.pollListData && this.state.pollListData.length > 0
				this.props.workDashboardData && this.props.workDashboardData.pollListData && this.props.workDashboardData.pollListData.length > 0 ? this.props.workDashboardData.pollListData.map(function (data, index) {
					return _jsx(_PollData2.default, {
						data: data,
						contantCallback: _this3.handleFullPoll.bind(_this3, index, data),
						sync: _this3.props.workDashboardData.sync,
						imHost: _this3.props.imHost,
						confObject: _this3.props.confObject,
						role: _this3.props.role,
						roomId: _this3.props.roomId,
						resultCallback: _this3.viewResults.bind(_this3, index),
						isGuest: _this3.props.isGuest
					}, data._id);
				}) : _jsx('li', {}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
					className: _Dashboard2.default.listTitle
				}, void 0, _ref6)))))) : null;
	
				return _jsx('div', {}, void 0, pollList, this.props.workDashboardData.pollContent ? _jsx(_PollContent2.default, {
					roomName: this.props.roomName,
					confObject: this.props.confObject,
					imHost: this.props.imHost,
					syncCallback: this.syncCallback.bind(this),
					pollListCallback: this.handleList.bind(this),
					role: this.props.role,
					updatePollCallback: this.updatePoll.bind(this),
					roomId: this.props.roomId,
					isGuest: this.props.isGuest,
					roomKey: this.props.roomKey
				}) : null, this.props.workDashboardData.createPoll ? _jsx(_CreatePoll2.default, {
					roomName: this.props.roomName,
					pollListCallback: this.handleList.bind(this),
					roomId: this.props.roomId,
					isGuest: this.props.isGuest,
					roomKey: this.props.roomKey
				}) : null, this.props.workDashboardData.submissionList ? _jsx(_PollSubmissionList2.default, {
					roomName: this.props.roomName,
					pollListCallback: this.handleList.bind(this),
					roomId: this.props.roomId
				}) : null, this.props.workDashboardData.pollReports ? _jsx(_PollReports2.default, {
					roomName: this.props.roomName,
					pollListCallback: this.handleList.bind(this),
					roomId: this.props.roomId
				}) : null);
			}
		}]);
	
		return PollList;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
			intl: state.intl,
			workDashboardReload: (0, _WorkDashboardReloadReducer.workDashboardReload)(state)
		};
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(PollList);

/***/ },

/***/ 495:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _PollSubmissionData = __webpack_require__(426);
	
	var _PollSubmissionData2 = _interopRequireDefault(_PollSubmissionData);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _UserDashboardReducer = __webpack_require__(88);
	
	var _roles = __webpack_require__(46);
	
	var _highcharts = __webpack_require__(402);
	
	var _highcharts2 = _interopRequireDefault(_highcharts);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	try {
	  __webpack_require__(525)(_highcharts2.default);
	} catch (e) {
	  console.log('error in pollReports');
	}
	// require('highcharts/modules/no-data-to-display')(Highcharts);
	// require('highcharts/highcharts-3d')(Highcharts);  
	
	
	var Chart = function (_Component) {
	  _inherits(Chart, _Component);
	
	  function Chart() {
	    _classCallCheck(this, Chart);
	
	    return _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).apply(this, arguments));
	  }
	
	  _createClass(Chart, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.chart = new _highcharts2.default[this.props.type || "Chart"](this.refs.chart, this.props.options);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.chart.destroy();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('div', { ref: 'chart' });
	    }
	  }]);
	
	  return Chart;
	}(_react.Component);
	
	var _ref = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref2 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'poll_list'
	}));
	
	var _ref3 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref4 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref5 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'reports'
	})));
	
	var _ref6 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	  id: 'poll_analysis'
	}));
	
	var PollReports = function (_Component2) {
	  _inherits(PollReports, _Component2);
	
	  function PollReports(props) {
	    _classCallCheck(this, PollReports);
	
	    var _this2 = _possibleConstructorReturn(this, (PollReports.__proto__ || Object.getPrototypeOf(PollReports)).call(this, props));
	
	    _this2.handleWorkDashboard = function (obj) {
	      _this2.props.imHost == true && _this2.props.workDashboardData.sync == true ? _this2.props.syncCallback(obj) : _this2.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
	    };
	
	    return _this2;
	  }
	
	  _createClass(PollReports, [{
	    key: 'handleList',
	    value: function handleList() {
	      var obj = { current: 'pollList', pollContent: false, pollList: true, pollContentData: null, pollContentIndex: null, createPoll: false, submissionList: false, pollReports: false };
	      this.handleWorkDashboard(obj);
	    }
	  }, {
	    key: 'syncCallback',
	    value: function syncCallback(obj) {
	      this.props.syncCallback(obj);
	    }
	  }, {
	    key: 'handlePollContent',
	    value: function handlePollContent() {
	      var obj = { current: 'pollList', pollContent: true, pollList: false, createPoll: false, submissionList: false, pollReports: false };
	      this.handleWorkDashboard(obj);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
	      var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
	      var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
	
	      var submissionData = this.props.workDashboardData ? this.props.workDashboardData.pollContentData ? this.props.workDashboardData.pollContentData.submissions : '' : '';
	      var optionData = this.props.workDashboardData ? this.props.workDashboardData.pollContentData ? this.props.workDashboardData.pollContentData.options : '' : '';
	
	      var finalData = [];
	
	      optionData.forEach(function (option) {
	        var count = 0;
	        submissionData.forEach(function (answerData) {
	          if (option == answerData.answer) {
	            count = count + 1;
	          }
	        });
	        var percentage = count / submissionData.length * 100;
	        if (!isNaN(percentage)) {
	          finalData.push({
	            name: option,
	            y: percentage
	          });
	        } else {
	          finalData.push({
	            name: option,
	            y: count
	          });
	        }
	      });
	
	      var options = {
	        chart: {
	          type: 'column'
	        },
	
	        title: {
	          text: this.props.workDashboardData.pollContentData.question,
	          widthAdjust: -100,
	          style: { "text-align": "justify" }
	        },
	
	        xAxis: {
	          type: 'category'
	        },
	
	        yAxis: {
	          min: 0,
	          max: 100,
	          title: {
	            text: this.props.intl.messages.total_percentage
	          }
	        },
	
	        credits: {
	          enabled: false
	        },
	
	        tooltip: {
	          // headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
	          pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.1f}% polls</b><br/>'
	        },
	
	        plotOptions: {
	          series: {
	            borderWidth: 0,
	            dataLabels: {
	              enabled: true,
	              format: '{point.y:.1f}%'
	            },
	            animation: {
	              duration: 1000
	            }
	          }
	        },
	
	        series: [{
	          name: this.props.intl.messages.options,
	          colorByPoint: true,
	          data: finalData
	        }]
	      };
	
	      var data = this.props.workDashboardData;
	      if (data.pollContentData && data.pollContentData.question && data.pollContentData.question.length > 10) {
	        var question = data.pollContentData.question.substring(0, 10) + '...';
	      } else {
	        var question = data.pollContentData.question;
	      }
	
	      return _jsx('div', {
	        className: _Dashboard2.default.whiteCard
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.breadCrum
	      }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
	        id: 'roomName'
	      }, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
	        id: 'pollList',
	        onClick: this.handleList.bind(this)
	      }, void 0, _ref2)), _ref3, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
	        id: 'pollContent',
	        onClick: this.handlePollContent.bind(this)
	      }, void 0, _jsx('span', {
	        title: this.props.workDashboardData.pollContentData.question
	      }, void 0, question))), _ref4, _ref5)), _jsx('div', {
	        className: _Dashboard2.default.topicsListheader
	      }, void 0, _ref6), _jsx('div', {
	        className: _Dashboard2.default.topicsListBody
	      }, void 0, _jsx(Chart, {
	        container: 'chart',
	        options: options,
	        question: this.props.workDashboardData.pollContentData.question
	      })));
	    }
	  }]);
	
	  return PollReports;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    dashboardData: (0, _UserDashboardReducer.dashboardData)(state),
	    workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
	    intl: state.intl
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(PollReports);

/***/ },

/***/ 496:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _PollSubmissionData = __webpack_require__(426);
	
	var _PollSubmissionData2 = _interopRequireDefault(_PollSubmissionData);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _UserDashboardReducer = __webpack_require__(88);
	
	var _roles = __webpack_require__(46);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref2 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'poll_list'
	}));
	
	var _ref3 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref4 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, '/'));
	
	var _ref5 = _jsx('li', {}, void 0, _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'submission_list'
	})));
	
	var _ref6 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'list_poll_submissions'
	}));
	
	var _ref7 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_submittions_yet'
	}), ' ');
	
	var PollSubmissionList = function (_Component) {
		_inherits(PollSubmissionList, _Component);
	
		function PollSubmissionList(props) {
			_classCallCheck(this, PollSubmissionList);
	
			var _this = _possibleConstructorReturn(this, (PollSubmissionList.__proto__ || Object.getPrototypeOf(PollSubmissionList)).call(this, props));
	
			_this.handleWorkDashboard = function (obj) {
				_this.props.imHost == true && _this.props.workDashboardData.sync == true ? _this.props.syncCallback(obj) : _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			};
	
			return _this;
		}
	
		_createClass(PollSubmissionList, [{
			key: 'handleList',
			value: function handleList() {
				var obj = { current: 'pollList', pollContent: false, pollList: true, pollContentData: null, pollContentIndex: null, createPoll: false, submissionList: false, pollReports: false };
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'syncCallback',
			value: function syncCallback(obj) {
				this.props.syncCallback(obj);
			}
		}, {
			key: 'handlePollContent',
			value: function handlePollContent() {
				var obj = { current: 'pollList', pollContent: true, pollList: false, createPoll: false, submissionList: false, pollReports: false };
				this.handleWorkDashboard(obj);
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;
	
				var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
	
				var data = this.props.workDashboardData;
				if (data.pollContentData && data.pollContentData.question && data.pollContentData.question.length > 10) {
					var question = data.pollContentData.question.substring(0, 10) + '...';
				} else {
					var question = data.pollContentData.question;
				}
	
				var submissionList = this.props.workDashboardData.submissionList ? _jsx('div', {
					className: _Dashboard2.default.whiteCard
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.breadCrum
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'roomName'
				}, void 0, _jsx('span', {}, void 0, this.props.roomName))), _ref, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'pollList',
					onClick: this.handleList.bind(this)
				}, void 0, _ref2)), _ref3, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'pollContent',
					onClick: this.handlePollContent.bind(this)
				}, void 0, _jsx('span', {
					title: this.props.workDashboardData.pollContentData.question
				}, void 0, question))), _ref4, _ref5)), _jsx('div', {
					className: _Dashboard2.default.topicsListheader
				}, void 0, _ref6), _jsx('div', {
					className: _Dashboard2.default.topicsListBody
				}, void 0, _jsx('ul', {}, void 0, this.props.workDashboardData.pollContentData.submissions.length > 0 ? this.props.workDashboardData.pollContentData.submissions.map(function (data, index) {
					return _jsx(_PollSubmissionData2.default, {
						data: data,
						sync: _this2.props.workDashboardData.sync,
						imHost: _this2.props.imHost,
						confObject: _this2.props.confObject
					}, data._id);
				}) : _jsx('li', {}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
					className: _Dashboard2.default.listTitle
				}, void 0, _ref7)))))) : null;
	
				return _jsx('div', {}, void 0, submissionList);
			}
		}]);
	
		return PollSubmissionList;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			dashboardData: (0, _UserDashboardReducer.dashboardData)(state),
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
			intl: state.intl
		};
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(PollSubmissionList);

/***/ },

/***/ 497:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PresenterConf = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactRedux = __webpack_require__(16);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _roles = __webpack_require__(46);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _HostControl = __webpack_require__(424);
	
	var _HostControl2 = _interopRequireDefault(_HostControl);
	
	var _SelfVideo = __webpack_require__(505);
	
	var _SelfVideo2 = _interopRequireDefault(_SelfVideo);
	
	var _SpeakerVideo = __webpack_require__(506);
	
	var _SpeakerVideo2 = _interopRequireDefault(_SpeakerVideo);
	
	var _Sources = __webpack_require__(427);
	
	var _Sources2 = _interopRequireDefault(_Sources);
	
	var _ImageSlider = __webpack_require__(421);
	
	var _ImageSlider2 = _interopRequireDefault(_ImageSlider);
	
	var _VideoInScroller = __webpack_require__(428);
	
	var _VideoInScroller2 = _interopRequireDefault(_VideoInScroller);
	
	var _Analytics = __webpack_require__(66);
	
	var _Analytics2 = _interopRequireDefault(_Analytics);
	
	var _InviteBox = __webpack_require__(401);
	
	var _InviteBox2 = _interopRequireDefault(_InviteBox);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	// import ControlVideo from './ControlVideo';
	
	
	var _ref = _jsx(_reactFontawesome2.default, {
	  name: 'cog'
	});
	
	var _ref2 = _jsx('img', {
	  src: '/images/white-icons/host-white.png'
	});
	
	var _ref3 = _jsx('img', {
	  src: '/images/white-icons/white-share.png',
	  alt: 'share-icon'
	});
	
	var _ref4 = _jsx('img', {
	  src: '/images/white-icons/end-call.png'
	});
	
	var PresenterConf = exports.PresenterConf = function (_Component) {
	  _inherits(PresenterConf, _Component);
	
	  function PresenterConf(props) {
	    _classCallCheck(this, PresenterConf);
	
	    var _this = _possibleConstructorReturn(this, (PresenterConf.__proto__ || Object.getPrototypeOf(PresenterConf)).call(this, props));
	
	    _this.showOrHideInviteBox = function (response) {
	      if (_this.state.showInviteBox) {
	        _this.setState({
	          showInviteBox: !_this.state.showInviteBox
	        });
	      } else {
	        _this.setState({
	          showInviteBox: !_this.state.showInviteBox
	        });
	      }
	    };
	
	    _this.state = {
	      showControl: false,
	      flip: false,
	      showHost: false,
	      selfVideo: false,
	      videos: [],
	      videoLength: 0,
	      audioIn: [],
	      audioOut: [],
	      cameraDevices: [],
	      enableVAD: false,
	      mixStream: null,
	      showInviteBox: false
	    };
	
	    _this.selfVideo = null;
	    _this.presenterVideo = null;
	    _this.speakerVideo = null;
	
	    _this.found_presenter = false;
	    _this.found_speaker = false;
	
	    _this.videos = [];
	
	    _this.audioIn = [];
	    _this.audioOut = [];
	    _this.cameraDevices = [];
	
	    _this.setSelfVideo = _this.setSelfVideo.bind(_this);
	    _this.setRemoveVideo = _this.setRemoveVideo.bind(_this);
	    _this.SyncSpeaker = _this.SyncSpeaker.bind(_this);
	    _this.setPresenter = _this.setPresenter.bind(_this);
	    _this.flipSettings = _this.flipSettings.bind(_this);
	    _this.mixStream = null;
	    // if(this.props.noScrollConf){
	    // this.props.confObject.SetSpeakerListener(this.SyncSpeaker);
	    _this.props.confObject.setSelfVideo(_this.setSelfVideo);
	    _this.props.confObject.setRemoveVideo(_this.setRemoveVideo);
	
	    //this.beforeUnload = this.beforeUnload.bind(this);
	    // }
	
	    _this.amEarly = false;
	    return _this;
	  }
	
	  _createClass(PresenterConf, [{
	    key: 'setRemoveVideo',
	    value: function setRemoveVideo(stream) {
	      var stIndex = _.findIndex(this.videos, ['key', stream.id()]);
	      if (stIndex >= 0) {
	        this.videos.splice(stIndex, 1);
	      }
	
	      this.setState({ videoLength: this.videos.length });
	    }
	  }, {
	    key: 'setSelfVideo',
	    value: function setSelfVideo(stream) {
	      console.log("Self Video Taken", stream);
	      this.selfVideo = stream;
	      this.setState({ selfVideo: true });
	    }
	  }, {
	    key: 'beforeUnload',
	    value: function beforeUnload() {
	      // var res = confirm("Do you really want to exit!");
	      // if (res == true) {
	      // if(this.props.logId){
	      //   var _objAnalytics = new Analytics();
	      //   _objAnalytics.UpdateAttendance(this.props.logId);
	      // }
	      // } else {
	      //     //"You pressed Cancel!";
	      // }
	      return true;
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.token != '' && this.props.token != undefined) {
	        var that = this;
	        this.props.confObject.getConference(this.props.iceServers, this.props.transport, function (res) {
	          that.joinConference();
	        });
	      }
	
	      //window.addEventListener("beforeunload", this.beforeUnload); 
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      //window.removeEventListener("beforeunload", this.beforeUnload);
	
	      this.props.confObject.hideLocalStream();
	      if (this.props.logId) {
	        var _objAnalytics = new _Analytics2.default();
	        _objAnalytics.UpdateAttendance(this.props.logId);
	      }
	    }
	  }, {
	    key: 'getSubscribers',
	    value: function getSubscribers(streams) {}
	  }, {
	    key: 'joinConference',
	    value: function joinConference() {
	      var that = this;
	      var settings = { video: this.props.selfVideo, publish: this.props.publishVideo,
	        audio: this.props.selfAudio, codec: this.props.codec,
	        uid: this.props.myid, videoResolution: this.props.videoResolution,
	        role: this.props.role, users: this.props.users, roomKey: this.props.roomKey,
	        hostId: this.props.hostId, scheduleId: this.props.scheduleId
	      };
	      this.props.confObject.joinConference(this.props.token, settings, function (status, streams, selfVideo) {
	        that.selfVideo = selfVideo;
	        console.log("SELF Video", selfVideo);
	        that.setState({ selfVideo: true });
	        that.props.sendStreams(streams);
	      });
	    }
	  }, {
	    key: 'showHost',
	    value: function showHost() {
	      if (this.props.imHost == false && this.props.confHostId != '' && this.props.confHostId != this.props.myid) {
	        alertify.alert('Access Denied', 'Host already exist, at a time one host is allowed.', function () {});
	      } else {
	        this.setState({ showHost: true });
	      }
	    }
	  }, {
	    key: 'closeHost',
	    value: function closeHost() {
	      this.setState({ showHost: false });
	    }
	  }, {
	    key: 'showControl',
	    value: function showControl() {
	      this.setState({ showControl: true });
	    }
	  }, {
	    key: 'closeControl',
	    value: function closeControl() {
	      this.setState({ showControl: false });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.roomType == 'Mix') {
	        var that = this;
	        this.props.confObject.trySubscribeMixStream(function (stream) {
	          // this.mixStream = stream;
	          that.setState({ mixStream: stream });
	        });
	
	        return;
	      }
	      console.log("Prop Received", nextProps);
	      this.selfVideo = this.props.confObject.getLocalStream();
	      if (nextProps.streams.length > 1) {
	
	        this.found_presenter = false;
	        this.presenterVideo = null;
	
	        for (var i = 1; i < nextProps.streams.length; i++) {
	          var tmp_stream = nextProps.streams[i];
	          if (tmp_stream != null) {
	            var stIndex = _.findIndex(this.videos, ['key', tmp_stream.id()]);
	
	            if (tmp_stream.presenter) {
	
	              this.found_presenter = true;
	              this.presenterVideo = tmp_stream;
	
	              if (stIndex >= 0) {
	                this.videos.splice(stIndex, 1);
	              }
	            }
	
	            if (tmp_stream.speaker) {
	              console.log("Props D", nextProps);
	              this.found_speaker = true;
	              this.speakerVideo = tmp_stream;
	
	              if (stIndex >= 0) {
	                this.videos.splice(stIndex, 1);
	              }
	              console.log('After Popped', this.videos);
	            }
	
	            if (tmp_stream.presenter != true && tmp_stream.speaker != true && nextProps.roomType != 'Mix') {
	              if (stIndex < 0) {
	                var objVideo = _jsx(_VideoInScroller2.default, {
	                  confObject: this.props.confObject,
	                  streamId: tmp_stream.id(),
	                  stream: tmp_stream
	                }, tmp_stream.id());
	                this.videos.push(objVideo);
	              }
	            }
	          }
	        }
	
	        // if(!this.found_presenter){
	        //   this.setState({presenterVideo: false});
	        // }
	
	        this.setState({ videos: this.videos });
	        window.scrollVideos = this.videos;
	      } else {
	        this.videos = [];
	      }
	
	      // let vLengthArray = _.intersection(this.videos, nextProps.streams);
	
	      this.setState({ videoLength: this.videos.length });
	      console.log("Video Length", this.videos.length, this.state.videoLength, this.videos);
	    }
	  }, {
	    key: 'endCall',
	    value: function endCall() {
	      this.props.confObject.endConference(this.props.roomKey);
	      this.props.endCallBack();
	    }
	  }, {
	    key: 'setPresenter',
	    value: function setPresenter() {
	      if (this.selfVideo) {
	        this.props.confObject.setPresenter(this.selfVideo.sid);
	      }
	    }
	  }, {
	    key: 'flipSettings',
	    value: function flipSettings() {
	
	      if (!this.state.flip) {
	
	        var that = this;
	        this.props.confObject.getDevices(function (deviceInfos) {
	
	          that.audioIn = [];
	          that.audioOut = [];
	          that.cameraDevices = [];
	
	          for (var i = 0; i !== deviceInfos.length; ++i) {
	            var deviceInfo = deviceInfos[i];
	
	            var deviceID = deviceInfo.deviceId;
	            var deviceKind = deviceInfo.kind;
	            var deviceText = '';
	
	            if (deviceKind === 'audioinput') {
	              deviceText = deviceInfo.label || 'Microphone';
	              that.audioIn.push([deviceID, deviceText]);
	            } else if (deviceKind === 'audiooutput') {
	              deviceText = deviceInfo.label || 'Speaker';
	              that.audioOut.push([deviceID, deviceText]);
	            } else if (deviceKind === 'videoinput') {
	              deviceText = deviceInfo.label || 'Camera';
	              that.cameraDevices.push([deviceID, deviceText]);
	            }
	          }
	
	          console.log("DEV", that.cameraDevices);
	          that.setState({ audioIn: that.audioIn, audioOut: that.audioOut, cameraDevices: that.cameraDevices });
	        });
	      }
	
	      this.setState({ flip: !this.state.flip });
	    }
	  }, {
	    key: 'enableVad',
	    value: function enableVad() {
	      var vadStatus = !this.state.enableVAD;
	      this.setState({ enableVAD: vadStatus });
	      this.props.confObject.enableVad(vadStatus);
	    }
	  }, {
	    key: 'showInviteBox',
	    value: function showInviteBox() {
	      this.setState({ showInviteBox: !this.state.showInviteBox });
	    }
	  }, {
	    key: 'showResponse',
	    value: function showResponse(response) {
	      if (response.status) {
	        console.log("Success in response");
	        // this.refs.dashboardcontainer.success(response.message, ``);
	      } else if (response.error) {
	        console.log("error in showResponse === ", response.error);
	        // this.refs.dashboardcontainer.error(response.error, ``);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	
	      var cls_big = '' + _Dashboard2.default.videoPresenter;
	      var cls_sm = '' + _Dashboard2.default.video160;
	
	      var cls_scrollMain = '' + _Dashboard2.default.subscirbersVideo;
	
	      //Check is it Early wait or not?
	      if (this.props.streams.length == 1 && this.props.streams[0] == null) {
	        this.amEarly = true;
	      } else {
	        this.amEarly = false;
	      }
	
	      var showPresenter = false;
	      var selfFrom = this.selfVideo ? this.selfVideo.sid : '';
	      // console.log("showPresenter before", showPresenter, this.props.presenterId);
	      if (this.props.presenterId != '' && this.props.presenterId != null && selfFrom != this.props.presenterId) {
	        showPresenter = true;
	        cls_sm = '' + _Dashboard2.default.video160;
	        cls_big = '' + _Dashboard2.default.videoPresenter;
	      } else if (this.props.role == _roles.Roles.Student && this.props.presenterId != '' && this.props.presenterId != null) {
	        showPresenter = true;
	        cls_sm = '' + _Dashboard2.default.video160;
	        cls_big = '' + _Dashboard2.default.videoPresenter;
	      } else {
	        cls_sm = '' + _Dashboard2.default.videoPresenter;
	        cls_big = _Dashboard2.default.video160 + '  ' + _Dashboard2.default.hideObject;
	      }
	
	      var showSpeaker = false;
	      if (this.props.speakerId != '' && this.props.speakerId != null && selfFrom != this.props.speakerId) {
	        showSpeaker = true;
	        cls_sm = '' + _Dashboard2.default.video160;
	        cls_big = '' + _Dashboard2.default.videoPresenter;
	      } else if (this.props.role == _roles.Roles.Student && this.props.speakerId != '' && this.props.speakerId != null && !this.selfVideo) {
	        showSpeaker = true;
	        cls_sm = '' + _Dashboard2.default.video160;
	        cls_big = '' + _Dashboard2.default.videoPresenter;
	      }
	
	      //console.log("showPresenter after", showPresenter);
	
	      // console.log( "Speaker VIDEO", this.props.speakerId);
	
	      var cls_fix = '';
	      if (this.props.presenterId && this.props.speakerId /* && this.selfVideo && this.props.presenterId != '' && this.props.speakerId != ''*/) {
	          if (this.props.presenterId == selfFrom || this.props.speakerId == selfFrom) {
	            //Then make self as 50 and speaker component as 50
	            cls_sm = _Dashboard2.default.videoPresenter + ' ' + _Dashboard2.default.video50;
	            cls_big = _Dashboard2.default.videoPresenter + ' ' + _Dashboard2.default.video50;
	          } else if (this.props.presenterId != '' && this.props.speakerId != '') {
	            cls_sm = '' + _Dashboard2.default.video160;
	            cls_big = _Dashboard2.default.videoPresenter + ' ' + _Dashboard2.default.video50;
	            cls_fix = '' + _Dashboard2.default.videofix;
	          }
	        } else if (this.props.role == _roles.Roles.Student && this.props.presenterId != '' && this.props.speakerId != '') {
	        cls_sm = _Dashboard2.default.video160 + ' ' + _Dashboard2.default.hideObject;
	        cls_big = _Dashboard2.default.videoPresenter + ' ' + _Dashboard2.default.video50;
	        cls_fix = '' + _Dashboard2.default.videofix;
	      }
	
	      if (!this.selfVideo) {
	        cls_sm = _Dashboard2.default.video160 + ' ' + _Dashboard2.default.hideObject;
	      }
	
	      var cls_SelfVideoCard = '' + _Dashboard2.default.selfVideoCard;
	      // if(this.state.flip){
	      //   cls_SelfVideoCard = `${styles.selfVideoCard}`;
	      // }
	
	      var showYet = false;
	      if (!showPresenter && !showSpeaker && !this.selfVideo) {
	        showYet = true;
	      }
	
	      var vadController = '' + _Dashboard2.default.vadController;
	      if (this.state.enableVAD) {
	        vadController = _Dashboard2.default.vadController + ' ' + _Dashboard2.default.selectedSpeaker;
	      }
	
	      var showMix = false;
	
	      if (this.props.roomType == 'Mix') {
	        showMix = true;
	        showPresenter = false;
	        showSpeaker = false;
	        cls_sm = _Dashboard2.default.video160 + ' ' + _Dashboard2.default.hideObject;
	        cls_big = '' + _Dashboard2.default.videoPresenter;
	        showYet = false;
	      }
	
	      //changed by jyothi for becomehost & Revoke host, enable VAD & Disable VAD conditions
	
	      return _jsx('div', {
	        id: 'objPresenter'
	      }, void 0, _jsx(_InviteBox2.default, {
	        showModal: this.state.showInviteBox,
	        hidecallback: this.showOrHideInviteBox.bind(this),
	        scheduleId: this.props.scheduleId,
	        slotId: this.props.slotId,
	        userId: this.props.myid,
	        errorCallback: this.showResponse.bind(this),
	        roomKey: window.location.protocol + "//" + window.location.hostname + window.location.pathname,
	        confFlag: this.props.confObject.getConnectionStatus()
	      }), _jsx('div', {
	        className: _Dashboard2.default.video480
	      }, void 0, this.selfVideo ? _jsx('div', {
	        className: _Dashboard2.default.videoSettings,
	        onClick: this.flipSettings,
	        title: this.props.intl.messages.video_settings
	      }, void 0, _ref) : '', _jsx('div', {
	        className: cls_SelfVideoCard
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.frontDisp
	      }, void 0, this.props.confFeedback != '' ? _jsx('p', {
	        className: _Dashboard2.default.hostYetMsg
	      }, void 0, this.props.confFeedback) : '', this.props.hosticon && this.state.selfVideo ? _jsx('div', {
	        className: _Dashboard2.default.videoController,
	        onClick: this.showHost.bind(this),
	        style: this.props.imHost == true ? { backgroundColor: "#ff0000" } : {},
	        title: this.props.imHost ? this.props.intl.messages.revoke_host : this.props.intl.messages.become_host
	      }, void 0, _ref2, _jsx(_HostControl2.default, {
	        presenterfunc: this.setPresenter,
	        closeHost: this.closeHost.bind(this),
	        showModal: this.state.showHost
	      })) : null, _jsx('div', {
	        id: 'dvPresenterScreen',
	        className: cls_big
	      }, void 0, this.amEarly ? _jsx('div', {
	        className: _Dashboard2.default.early
	      }, void 0, 'Presenter/Host not yet joined or left the meeting') : '', showMix ? _jsx(_SpeakerVideo2.default, {
	        speakerId: this.props.speakerId,
	        presenterId: this.props.presenterId,
	        confObject: this.props.confObject,
	        uid: this.props.myid,
	        stream: this.state.mixStream,
	        id: 'speaker1'
	      }) : '', showPresenter ? _jsx(_SpeakerVideo2.default, {
	        speakerId: this.props.speakerId,
	        presenterId: this.props.presenterId,
	        confObject: this.props.confObject,
	        uid: this.props.myid,
	        stream: this.presenterVideo,
	        id: 'speaker1'
	      }) : '', showSpeaker ? _jsx(_SpeakerVideo2.default, {
	        clsFix: cls_fix,
	        speakerId: this.props.speakerId,
	        presenterId: this.props.presenterId,
	        confObject: this.props.confObject,
	        uid: this.props.myid,
	        stream: this.speakerVideo,
	        id: 'speaker2'
	      }) : ''), _jsx('div', {
	        id: 'dvSmallScreen',
	        className: cls_sm
	      }, void 0, _jsx(_SelfVideo2.default, {
	        speakerId: this.props.speakerId,
	        presenterId: this.props.presenterId,
	        confObject: this.props.confObject,
	        uid: this.props.myid,
	        stream: this.selfVideo,
	        id: 'self1'
	      })), this.props.shareicon && this.state.selfVideo ? _jsx('div', {
	        className: _Dashboard2.default.shareInviteConf,
	        title: this.props.intl.messages.share_Link,
	        onClick: this.showInviteBox.bind(this)
	      }, void 0, _ref3) : null, _jsx('div', {
	        id: 'endCall',
	        onClick: this.endCall.bind(this),
	        className: _Dashboard2.default.endBtnPresenter
	      }, void 0, _ref4)), this.state.flip ? _jsx('div', {
	        className: _Dashboard2.default.backDisp
	      }, void 0, _jsx(_Sources2.default, {
	        flipfunc: this.flipSettings,
	        imHost: this.props.imHost,
	        confObject: this.props.confObject,
	        audioIn: this.state.audioIn,
	        audioOut: this.state.audioOut,
	        cameraDevices: this.state.cameraDevices
	      })) : '')), !this.props.noScrollConf && this.state.videoLength > 0 ? _jsx('div', {
	        className: cls_scrollMain
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.scrollImageContainer
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.galleryWrap
	      }, void 0, _jsx(_ImageSlider2.default, {
	        delay: 0,
	        visibleItems: 3,
	        length: this.props.streams.length - 2,
	        id: 'confScroller'
	      }, void 0, this.state.videos)))) : '');
	    }
	
	    //Run Only When No ScrollConf Present
	
	  }, {
	    key: 'setSpeaker',
	    value: function setSpeaker(stream) {
	      var defIndex = _.findIndex(this.props.streams, ['from', stream.from]);
	      console.log("Def Index", defIndex);
	      if (defIndex > 1) {
	        //0th place is self so skiped, 1th place is spekaer so skipped.
	        this.props.confObject.onlyPresenter(false);
	
	        /*So now remove current speaker from the presenter screen, 
	        so previous speaker will have space to go there.*/
	        var sp_stream = this.props.streams[1];
	        if (sp_stream.showing) {
	          var elementId = document.getElementById(sp_stream.elementId).parentElement.id;
	          sp_stream.hide();
	          document.getElementById(sp_stream.elementId).remove();
	        }
	        this.props.confObject.setSpeaker(stream);
	      } else if (defIndex == 0) {
	        //Speaker asking him self to be speaker
	        console.log('Self as speaker While No ScrollConf');
	        this.props.confObject.onlyPresenter(true);
	      } else if (defIndex == 1) {
	        //The requested stream already in speaker area.
	        this.props.confObject.onlyPresenter(false);
	      }
	    }
	  }, {
	    key: 'SyncSpeaker',
	    value: function SyncSpeaker(from, sender) {
	      console.log("Sync Called", from);
	      if (this.props.streams && this.props.noScrollConf) {
	        var defIndex = _.findIndex(this.props.streams, ['from', from]);
	        var hostIndex = _.findIndex(this.props.streams, ['from', sender]);
	
	        this.props.confObject.setHostFlag(hostIndex);
	
	        console.log("Sender Index", defIndex);
	        if (defIndex >= 0) {
	          this.setSpeaker(this.props.streams[defIndex]);
	        } else {
	          console.log("Stream un-identified", from, this.props.streams[0]);
	          //So check them in attendees list to make sure thats me (myself)
	          var attIndex = _.findIndex(this.props.attendees, ['id', from]);
	
	          if (attIndex >= 0) {
	            //Wow you found some body, but make sure thats me
	            if (this.props.attendees[attIndex].name == this.props.myid) {
	              //Wow you got it, its me.... now you do what you want
	              this.props.streams[0].from = from;
	              this.setSpeaker(this.props.streams[0]);
	            }
	          }
	        }
	      }
	    }
	  }]);
	
	  return PresenterConf;
	}(_react.Component);
	
	PresenterConf.contextTypes = {
	  router: _react2.default.PropTypes.object,
	  intl: _react2.default.PropTypes.object.isRequired
	};
	
	PresenterConf.defaultProps = { noScrollConf: false, selfVideo: true, selfAudio: true, publishVideo: true };
	
	exports.default = (0, _reactIntl.injectIntl)(PresenterConf);

/***/ },

/***/ 498:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _component = {
	  "form-control": "QmIrbtmLmFNpHdWMqFMWS",
	  "innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
	  "colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
	  "error": "_3jAfmA6J7YmNDyB2VfsCxP",
	  "mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
	  "dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
	  "iElement": "_2crZNiFs8z8oNhzPDC1qOE",
	  "oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
	  "iLabel": "_3Pyvct_srCoSvJCgGG41jw",
	  "oLabel": "NsxWZpxBqBX8wky_O477_",
	  "iForm": "_3IlToa7pigrSS8KWut_dJ8",
	  "oForm": "_3N0YNUcfI5U02VSmBEbYot",
	  "iFormField": "_12yKSn29WLZIE6fvGQfcrN",
	  "oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
	  "iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
	  "oFormGroup": "_386CxczA49XX2-ejr3Qe55",
	  "formNext": "ccTxjcG6_GZO9OgzW33HT",
	  "iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
	  "oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
	  "iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
	  "oContainer": "_2tEAAtqgoutuOUU96rNvv1",
	  "iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
	  "oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
	  "iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
	  "iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
	  "whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
	  "iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
	  "active": "_2fF1Q9nO2O_1B8Ldb4RM52",
	  "scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
	  "errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
	  "errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
	  "whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
	  "greyCard": "_34l9W17Mt1koxHLd1yUqgk",
	  "reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
	  "countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
	  "react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
	  "ad": "N3bKXyhfwvWT3eAEC9Nno",
	  "ae": "taXUT8yfjgRMeSH3rMNxy",
	  "af": "_2vH4qShCgBPBO4GR8BdNvd",
	  "ag": "n8QfWtvpZLMpatCUqX2Td",
	  "ai": "_3fPX_RcpesOPxFsmsaygCE",
	  "al": "_1T12tbcC6990b-fIMG5LYW",
	  "am": "_31HdarMDfXvAgjizVUoeHk",
	  "ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
	  "ar": "_2qJleMgRbIErIrx3kQF57O",
	  "as": "_2ZPVYL8Vjn-vdWZToCEhjN",
	  "at": "_1hWilvnrVbANEHRyLGlF-m",
	  "au": "_2zJE4K6o-ftWqhb3exXZgk",
	  "aw": "_1UroMxX5JHt9bjGdHwa1OY",
	  "az": "_-Y2xueZ_1mEtB9YDOqEGB",
	  "ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
	  "bb": "_34600Kl8Wac9Hx7S3-3U6b",
	  "bd": "_3WBX90V5VJXA7-vSUfEWCh",
	  "be": "BcK33edOPcbYdkxxvOApy",
	  "bf": "ShN64-J7UZdswoQjkf7L_",
	  "bg": "_2A9PgkQEF5_KbvHvDf6_lY",
	  "bh": "_10p3rxNRYOhv8-BtZuq1w8",
	  "bi": "_6MzP1qXXDFAZVL7nBmRiH",
	  "bj": "_2U8H1sji9LfDEW706KyKvF",
	  "bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
	  "bn": "PgMDvF79WHl3kaklOmhw3",
	  "bo": "_7MheGVInaTi-QLxw5PiUi",
	  "br": "_1BDNUyT0cHDlbCBFgrrLkJ",
	  "bs": "_3vcASZB5bu7mJAzTzaRkWe",
	  "bt": "esu4pvyd9ZFWrf-etnrva",
	  "bw": "_2Hbv1I361RJFK3Ph2xPlu_",
	  "by": "_2tbYam6Og8RAicMhX9SXvI",
	  "bz": "_3xB704PIgqFnU2zTG-JZFN",
	  "ca": "_36FyK29nkNl9Ez7yWh04AS",
	  "cd": "_9PnHTqK1pSn_GIAbBtPT2",
	  "cf": "_2LgMF7o1A3a2cgw5jkpvZV",
	  "cg": "_3hYc9Y3UdCphltZKe2vJWk",
	  "ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
	  "ci": "FoSGkvvMDFAVcvsZBWX-Z",
	  "ck": "_1742IgEaHW3SZU7h_-nkwr",
	  "cl": "_36IaMt7ntEwUsH4lwN4tW-",
	  "cm": "_1N8krqbPtlsEVsh6SaCetm",
	  "cn": "IfkD3fwbUSx9FZflX6iIU",
	  "co": "_3Y7u7ONzxyZVjZYzS1OHTr",
	  "cr": "Gw5Qz4qBNZjPDmpQmi-d2",
	  "cu": "ZuHtEp_knwZcbwTTJkRgI",
	  "cv": "o6BzJCyjRH1pOsf_HpbQ6",
	  "cw": "hRElJCQXyNIITDZ6UQVut",
	  "cy": "_2cHKWrINPNO6L8BEOdtJCG",
	  "cz": "nS617LE8Qcckdv9HJTWpt",
	  "de": "fqJD93WBywDPs0lrLEXLT",
	  "dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
	  "dk": "_3fpBLMtuUi0kowy3ziMRYd",
	  "dm": "_3gMwGkQW-OGFx1U7vd7VMD",
	  "do": "G9EZGjpXLJUyQuREesyGO",
	  "dz": "_3Nka0vwv6nZpeugyuqYQIJ",
	  "ec": "_18t83SdIOs8EY6iF0zV0CZ",
	  "ee": "_1miCbYr55XmBKvcUu6XetR",
	  "eg": "_1T55wMh1svM7M5QGxFM2ex",
	  "er": "c0Ab9spCQ4VnXr_6xijnD",
	  "es": "_1lutiEL9tJpdNgKmnTT6Ld",
	  "et": "_2GGXIPO2kOV6CUsu65V4Z3",
	  "fi": "_1I-g5oWpQznT5QZuBfQ8A",
	  "fj": "_3oeTP_GhC_XzsjzHW86oDc",
	  "fk": "_3-_BjK4NArHS0nyf0DLc4F",
	  "fm": "_1WQYGDC-zTatxog3SIwE80",
	  "fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
	  "fr": "_3-mqatBXfaTfex8LWjnIDA",
	  "bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
	  "mf": "_34f4ya9mcbpIcQPgHJ4I6c",
	  "ga": "_15_iO4CJaXbX7PySxoldPF",
	  "gb": "_1vZuFSSey59_ixozre-0L_",
	  "gd": "_26Ub0jcjDpVD4nwM7m5n4e",
	  "ge": "_27ctDR0Hf6HO15MgHS8wyh",
	  "gf": "_2S6C39D4wNBuVSqzYM5Ldy",
	  "gh": "_3vjGi6-umA-RzwxRFaTfNN",
	  "gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
	  "gl": "_1OTvyS4D4UOkymKuDLxUdx",
	  "gm": "_3-0gezNOVCHKzaLYGUySo2",
	  "gn": "_8f6uadrEfnS9IX8DEIpKO",
	  "gp": "_36yEj9UcEbZcI0WJvgmk0B",
	  "gq": "xHX18x9xk7PhDBlgsvnad",
	  "gr": "HTk_eFej1VrCiBuKBIfLT",
	  "gt": "hgmUbzxaHNZNL6frPhPeb",
	  "gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
	  "gw": "_36JwaXqhh4gBrIvAy4c1KO",
	  "gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
	  "hk": "_1mT74O5OVtonPLmYnVVOu7",
	  "hn": "_1ze0KI-TYxTrDcXlMOu24s",
	  "hr": "ZIDUSRfcbDCZTyhqWGPob",
	  "ht": "Y65Ad5pf3z7ufcknP0vhk",
	  "hu": "_3EHKICvcensXt5hEu8Nkfs",
	  "id": "_3oZE8uvxIFK7M9DCEtsSCD",
	  "ie": "_2RNmpg94YYioQp2fWyz_xn",
	  "il": "_2Mq_no7KYxPp2NSLGS1Tcs",
	  "in": "_1UlEZ269GihRa58c5mCEBN",
	  "io": "_3ovelrc7S_DdmXxL-8uuwk",
	  "iq": "_3VSlK6DYHrBgKbkE2Rng2N",
	  "ir": "NRX2sFBmuPSJ9EOigyuEP",
	  "is": "_25HaTNE7x74CJO9S1mnm4I",
	  "it": "_1-LmlhbrcpKN-xjESmR_sO",
	  "jm": "VsvDBply-4FtMoJhi8Cvu",
	  "jo": "yEE3hbkzWK8CSCrCJibCo",
	  "jp": "_3oxjjz1uD2cX2QsoSToLgz",
	  "ke": "_1ksOT6KMPd99EWuWCXPga_",
	  "kg": "_2CMnR3yv5DGwDc8p3uoOjp",
	  "kh": "_927b1QnaSWnN35i3bVewJ",
	  "ki": "_2CuDp55lqYTpFp68D4IWep",
	  "km": "_3tvMTeZYZMzBB9bGn9lV9E",
	  "kn": "_6kbCvwc22pJX0tNv3HToQ",
	  "kp": "_3tIPOe5PNrHH-bgCGaZTJj",
	  "kr": "_2653rpVUuy3ETaw1mogdnF",
	  "kw": "_1SKg_lTe0ShbPSOl44eKjp",
	  "ky": "tgj8SOv7bYoF7qfbbQWNG",
	  "kz": "bchn50J152EdQa0zf3k5u",
	  "la": "mu9oycLgpKX8_yLLkR5b9",
	  "lb": "_2TcAFbagIrNyc6mgzRVNW0",
	  "lc": "_2IFItnUNT-albvpN-ksxd2",
	  "li": "_3_E6nQspv6zJQLQI24puaS",
	  "lk": "_2M2wq3qQhGeUegbBTs7ilH",
	  "lr": "L4o4xOg0s6QbasyIRPgyF",
	  "ls": "LhBB6SRin61WSFtUwaEfe",
	  "lt": "ITDUphrnMkKItKGMVHZf8",
	  "lu": "_1mVW30sc4i-1M8tDPCQlL",
	  "lv": "_3rq6vE2IagAsGI6iESAcJq",
	  "ly": "_3se_Nzm1WQrEN3VZYiJJrv",
	  "ma": "_fSDiNxp_jjfqkQcWffDM",
	  "mc": "_2hRTRZeBtDGN4mNeWBZVgB",
	  "md": "_26jDl0skadEwmUYDGmEzST",
	  "me": "_388lJj_7sQdyd9HL7pMrar",
	  "mg": "_3aFoqVWcvG3p47Vwa6UuoE",
	  "mh": "_1YHi6OtXmKfP15ZNbwYGgy",
	  "mk": "_9QVyhHcp8yH762J8fWXhC",
	  "ml": "yYD99PoyhgFI4912_qoyJ",
	  "mm": "URzk8-j7LcySpGUMJf_Qk",
	  "mn": "_1J-lktQUTK0rydBz3foJGF",
	  "mo": "_1sbL0zhHof-KbfGWu2qjqF",
	  "mp": "_1tJjJlSjRw5AnqcXXmGwCI",
	  "mq": "fHob9sxaJrTuqSc0xL744",
	  "mr": "t-Bmj7a31aA-IwcRcL0ua",
	  "ms": "_2xyT54DQP62zWDySH7-Kdy",
	  "mt": "_1Ul_OlGODc8S0QplVq94PV",
	  "mu": "_1yIBERRJqnV33pTq2VpKRc",
	  "mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
	  "mw": "_3i8n-5-htdGNJLgn96O21",
	  "mx": "_16-6zoyiVzSGB1O72cUTzV",
	  "my": "_3W2P0D9eTN4BQoOcThOsaM",
	  "mz": "wJ8icX7Asp3dSImkXOdTM",
	  "na": "_1qt_F94mybbX5kr0ArtN-Z",
	  "nc": "h82AMIuCGdKf69Hc_nM6D",
	  "ne": "_2mVa5nGsijzD93WRl8dk64",
	  "nf": "_3XQ9oUH_84SsdZLjpVRuqT",
	  "ng": "_1uyyH1GZjsEk3YpaUSmmG6",
	  "ni": "_22_3H6UeFo26o3fSavtQaX",
	  "nl": "_93asfBYgR8C7bEDucZO8l",
	  "bq": "_37A1nwIz7Z3obwUjmliw4s",
	  "no": "_2-sVmkWiLn_ogTikc0c0Eg",
	  "np": "_1PqZSwf5cuMNmbE7bpKe67",
	  "nr": "_9q5Rg9Xn0G2buivFSGySP",
	  "nu": "RLhVdyjL9Cex8ekaJqirU",
	  "nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
	  "om": "_9mZYNhgBLiQg-j1FeVprJ",
	  "pa": "_3S7TrzxJIEYVghUMVHB6E7",
	  "pe": "_3V5sP7VvdGOFqApj7POYl2",
	  "pf": "_1YzdrkyHO-eCcEFF-hjZl7",
	  "pg": "ddWAanlQJPlB0QDWO6dAF",
	  "ph": "_2TGbmCcqHlJFCssz78MxOs",
	  "pk": "_2JerTABYGCUN8FLjpnDzKy",
	  "pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
	  "pm": "_29Hoo7EsoSHtvRFvlVg2cD",
	  "pr": "_3_pkwz60KLoYcbKwaRvIsS",
	  "ps": "_3jenITZ_yUYS7kU1HwFEHj",
	  "pt": "_1vz8ABWy5Yd43_JhaTWq9u",
	  "pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
	  "py": "_1_W41pJLcGMRhLdU997clv",
	  "qa": "Z0tjAakoNSOs14KuenmRi",
	  "re": "_3k5KF4jzE7HUitQw9MQKnp",
	  "ro": "_2b8XhT3-7NgjAC8gJJkpis",
	  "rs": "_2MUJr9MQbiKRTd_g0TaRQr",
	  "ru": "HjzPW2CxxNMSGZw1ugFW7",
	  "rw": "_23TGIOoPmB9QYqIPG6W3tA",
	  "sa": "_34WM8rSonfayW0vJ3koqJS",
	  "sb": "_3486rZNsCjvTmIoHbjK8mG",
	  "sc": "_3meAM_iQCU6MyfPQJTN3yl",
	  "sd": "_2x6XeHNF__4s9VVfFXCJhO",
	  "se": "_66VDclGQXxpdUR8uE3ZFa",
	  "sg": "tv3I_hfLcUJ_8i9ewVcUz",
	  "sh": "_1syDbbhbumwMwwD7Dwkb1V",
	  "si": "_3jsffwJjGr2sMEofSTTGkG",
	  "sk": "_1EpYAUcQLCqbYB48Auixqb",
	  "sl": "_3STJQv9nY5mol4cW82D2ci",
	  "sm": "_9aTR-AZMTaYHRmDVAyFTM",
	  "sn": "_3mTatYTWeJQQACfV7xzRhi",
	  "so": "_1LnWon2slwLMqAHzhkRT4c",
	  "sr": "_1GSedFwSsf5isgOi3p0x6U",
	  "ss": "_1sq99LOjKKgery3luOXOFn",
	  "st": "_1O6vYx_NaXFBAs1qYxgwaB",
	  "sv": "_10D9RGnRzUv14bYWQaC23c",
	  "sx": "KonDEEzH2JzIWsVUBzFdY",
	  "sy": "_1ZAnqGYeixOJVFwwt6hNIo",
	  "sz": "_3FeOFkec3sXYbvQhWDdIM7",
	  "tc": "_1FZvldKEV-vz12TyyNfEf",
	  "td": "_31fysfDRtTWVKcX_UjX0ty",
	  "tg": "H60Kyr6MsF6nvRz5l7EfN",
	  "th": "SHZkbUz1c_H_zDOfxLc4",
	  "tj": "_2MRI0fA4OLgepXVooYMu9H",
	  "tk": "_1W959S9LHLCKhz3xi4MpHe",
	  "tl": "_1lMF_0nwQXTyBRRzRj7hBF",
	  "tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
	  "tn": "_2MeGi_bqLVuCaRtJzs3QqA",
	  "to": "_3egwC_50WENVPaap_uwXr8",
	  "tr": "_2KiPy3o6m7JCKQWPY2fI1d",
	  "tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
	  "tv": "_2D9VWSmHkhgNemAaIKF_cp",
	  "tw": "_2J7nVAh1zEa7kV5Ba51CLV",
	  "tz": "_2acF96LLqMjlbfMX1oiAjT",
	  "ua": "_2rr3Tyr8dP6vDvE0khEDKT",
	  "ug": "D7gjzKmlr78rNWXXw90np",
	  "us": "_1l5RtWI_acgLVeCd5fjgHG",
	  "uy": "_1zX6hTsIa2TtL6dgR47eQ9",
	  "uz": "_29NUL3VtwK1_RWUyPsY2ei",
	  "va": "_39kTgRBkhqqGVLUTJvK_67",
	  "vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
	  "ve": "_3Lk2Svkm2NTAVpUfiY_No5",
	  "vg": "_3SiYuGrNzW9DNkXwTZugyj",
	  "vi": "_2BiiERObu5xcE6P1SZxLdj",
	  "vn": "_3kSg6iW0KLoUpJ0g70fckK",
	  "vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
	  "wf": "Arz0xEqJcbKbLmPz_tXTS",
	  "ws": "_3oTaxcmbTriEd90-cXNqD8",
	  "ye": "gxtmCiQO2ao4JTQXuRUIJ",
	  "za": "_25HyrYKmQQAteF_LwADnIt",
	  "zm": "Kui2u7hZHcNBqlzbqR-vQ",
	  "zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
	  "hide": "_2kO_U0LXcg71jJA6RSia2e",
	  "v-hide": "_2HBc009zwTsSlkh8P8tH10",
	  "invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
	  "flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
	  "open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
	  "selected-flag": "_10c169vRt8V92_nQ_S0KtR",
	  "flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
	  "arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
	  "up": "_2ykRnfq4f2nlmZGfvzrn92",
	  "country-list": "UlTusogWL2urjgGgLNpcD",
	  "divider": "_2zMaTbM3nSdE07wOs7YYRt",
	  "country": "uL848pHFWhb_G94Ak-KX5",
	  "dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
	  "highlight": "BLa_2aA2PkYD2PsO2fvNC",
	  "country-name": "_3ih_ovRiGmAkpjxuz63nhk",
	  "uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
	  "fileUpload": "_2WENukerx3mNXkTyu0UXQf",
	  "uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
	  "upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
	  "blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
	  "feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
	  "errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
	  "gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
	  "red": "_3wj0AXV9gqX9YG1nk-2u9J",
	  "green": "_3KPVxc3su8ewtuKZgu8TGv",
	  "orange": "_3cLlE5QI9XJwY6e7jO5bLg",
	  "capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
	  "importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
	  "importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
	  "importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
	  "icon": "_12rnwIUewKT2PdtWMnNyD5",
	  "importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
	  "broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
	  "broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
	  "btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
	  "textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
	  "spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
	  "pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
	  "lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
	  "removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
	  "inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
	  "popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
	  "dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
	  "dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
	  "applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
	  "filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
	  "btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
	  "assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
	  "pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
	  "assTab": "y4LW63OuadI0JWTQBnbJ1",
	  "heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
	  "radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
	  "wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
	  "leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
	  "rightBox": "DP21PoKxwKk_vJyOuQTcr",
	  "gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
	  "actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
	  "gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
	  "actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
	  "gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
	  "morePref": "JBm94eKPIFI8vfiroATJ6",
	  "tile": "_1Ssp2zTovh7AwJWuRkgnge",
	  "tileItems": "_3cDqgy8AedDYzhy8Euosis",
	  "tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
	  "tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
	  "category": "_2Ow56TBY2Y24yY5SjVRU4l",
	  "innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
	  "maxScore": "_3uL97t2vemfuAs83cAFhjE",
	  "maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
	  "scored": "_12gGWK_s69JBGzOAX7ClkT",
	  "scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
	  "remTile": "_3vgBsvWRGVVRwIEDn1TquO",
	  "tileBody": "dF1WC_PeNjG87K2XGMIcS",
	  "tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
	  "gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
	  "gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
	  "assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
	  "blue": "K7acjAQMroOGGtUqqojYy",
	  "yellow": "G7N-PGOIbGO_ZkaqBu2mx",
	  "txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
	  "txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
	  "txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
	  "txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
	  "txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
	  "txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
	  "addTile": "lCw_kxhsAPcuM3yFAqvpF",
	  "addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
	  "addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
	  "commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
	  "totalScore": "FDG4LAia-7JDDtxb7R4Kb",
	  "totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
	  "textBox": "_13VdIFmMegxz_eR8VIXN_M",
	  "totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
	  "totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
	  "resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
	  "resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
	  "resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
	  "headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
	  "scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
	  "resultBody": "N6kKlySaRGbRcB4bBmpZ0",
	  "resGroup": "_2byM-_1N3yjHb2dpmlikdf",
	  "resTile": "DZeuj4DKkdAPKCgYd76RK",
	  "resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
	  "resRating": "R7j9mxFZmdmLgC7bPXpyN",
	  "txtSize": "_977ldMQMMiHQ0YG_61T3g",
	  "txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
	  "resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
	  "resInput": "_14gsxA36f-uYOfxGDvr_gi",
	  "activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
	  "feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
	  "fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
	  "feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
	  "profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
	  "profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
	  "profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
	  "name": "_25-6SxUiv8zhOMEVTRrg8w",
	  "commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
	  "addpdng": "_6rQH8tivz8ELIWszpbahs",
	  "good": "_3lOxcxDfxhPcuhLBJHo4Ur",
	  "vGood": "l_IAfocpDxfvpU316U0EI",
	  "fair": "_3I3YapUnBVxgs-ZsGf3Poh",
	  "poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _ConfSettings = {
	  "contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
	  "attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
	  "groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
	  "indiChatFixed": "_121x6wkYY9bMxq2znilpes",
	  "settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
	  "openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
	  "openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
	  "openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
	  "onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
	  "onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
	  "tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
	  "tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
	  "tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
	  "modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
	  "modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
	  "modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
	  "block50": "_3KEUbD9sh-5efPnOe48KQu",
	  "nohover": "m7jTOV3afDX3KYXfpJDuW",
	  "fileUpload": "_1Ta80WwlyVY6khGgoelZff",
	  "modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
	  "active": "_3wgRcJQgpFwV1Tze6eaYAL",
	  "modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
	  "noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
	  "modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
	  "navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
	  "backSearch": "w7BGjmEiChPoMYjET5k8R",
	  "subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
	  "topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
	  "modContactList": "_1zmiGIPb92yNtOu845RHyM",
	  "chatBox": "_2taDr3sNLvZl64o7TkBTEg",
	  "callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
	  "midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
	  "modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
	  "contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
	  "avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
	  "contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
	  "listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
	  "onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
	  "busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
	  "bgOffline": "jL-R5aQBwO_2EmgAsiay1",
	  "bgOnline": "_3TEYblB_gY5codKEtLqX7q",
	  "adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
	  "addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
	  "formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
	  "inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
	  "btn": "_27VXnOss6C0tcmiXDJyEQY",
	  "btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
	  "topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
	  "modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
	  "addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
	  "btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
	  "btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
	  "contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
	  "asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
	  "modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
	  "headerText": "_2POMQ33JzpZXRKNQwhKTpK",
	  "optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
	  "settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
	  "click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
	  "radio": "_1YNHku8cDP1FxyBn3XkUJY",
	  "modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
	  "modChatContainer": "_21msPTbxn87ey3RWsSt_35",
	  "selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
	  "avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
	  "messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
	  "downloadFile": "_33q4w5biPTOCecW_SwRklY",
	  "downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
	  "textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
	  "otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
	  "chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
	  "modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
	  "chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
	  "formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
	  "sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
	  "avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
	  "setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
	  "iconBlock": "_1llySoPNa1j3k655fl2PNS",
	  "passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
	  "meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
	  "meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
	  "inputError": "_30zq1PCjl9v2jnkrDEFjSK",
	  "formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
	  "calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
	  "endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
	  "schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
	  "schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
	  "schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
	  "onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
	  "repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
	  "repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
	  "schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
	  "schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
	  "inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
	  "setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
	  "dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
	  "actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
	  "actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
	  "indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
	  "alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
	  "centerBlock": "HLVHVZhqp-7yopt3Ah073",
	  "btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
	  "transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
	  "btnTransport": "szHYW92cM7tgGZoXatQyg",
	  "helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
	  "sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
	  "scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
	  "scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
	  "sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
	  "sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
	  "sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
	  "popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
	  "btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
	  "emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
	  "formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
	  "formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
	  "colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
	  "colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
	  "endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
	  "toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _ChatActions = __webpack_require__(30);
	
	var _moment = __webpack_require__(1);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _Modal = __webpack_require__(52);
	
	var _lib = __webpack_require__(45);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _ChatReducer = __webpack_require__(39);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ToastMessageFactory = _react2.default.createFactory(_lib.ToastMessage.animation);
	
	var _ref = _jsx('li', {}, void 0, ' ', _jsx(_reactIntl.FormattedMessage, {
	  id: 'start_chating'
	}), ' ');
	
	var _ref2 = _jsx(_Modal.Footer, {}, void 0);
	
	var _ref3 = _jsx(_reactFontawesome2.default, {
	  name: 'arrow-circle-o-down'
	});
	
	var _ref4 = _jsx(_reactFontawesome2.default, {
	  name: 'arrow-circle-o-down'
	});
	
	var _ref5 = _jsx(_reactFontawesome2.default, {
	  name: 'arrow-circle-o-down'
	});
	
	var _ref6 = _jsx(_reactFontawesome2.default, {
	  name: 'clock-o'
	});
	
	var _ref7 = _jsx('li', {}, void 0, ' ', _jsx(_reactIntl.FormattedMessage, {
	  id: 'start_chating'
	}), ' ');
	
	var _ref8 = _jsx('label', {
	  htmlFor: 'fileRoomInput'
	}, void 0, _jsx(_reactFontawesome2.default, {
	  name: 'paperclip'
	}));
	
	var _ref9 = _jsx('img', {
	  src: '/images/black-icons/black-paper-plane.png'
	});
	
	var _ref10 = _jsx('label', {
	  htmlFor: 'exportChat'
	}, void 0, _jsx('img', {
	  src: '/images/black-icons/black-export.png',
	  alt: 'Export Chat'
	}));
	
	var _ref11 = _jsx('img', {
	  src: '/images/black-icons/delete-box-black.png',
	  alt: 'Clear Chat'
	});
	
	var RoomChat = function (_Component) {
	  _inherits(RoomChat, _Component);
	
	  function RoomChat(props) {
	    _classCallCheck(this, RoomChat);
	
	    var _this = _possibleConstructorReturn(this, (RoomChat.__proto__ || Object.getPrototypeOf(RoomChat)).call(this, props));
	
	    _this.reqDataObj = function () {
	      var roomKey = _this.state.roomKey != null ? _this.state.roomKey : _this.props.roomKey;
	      var obj = { /*sentBy : this.props.uid,*/
	        sentTo: roomKey,
	        chatType: 'Room'
	      };
	      console.log("obj in reqDataObj === ", obj);
	      (0, _ChatActions.getRoomChatData)(obj).then(function (res) {
	        return _this.setChatData(res);
	      });
	    };
	
	    _this.setChatData = function (res) {
	      // console.log("res in room chat === ", res);
	      if (res.status && res.data) {
	        _this.setState({ chatData: res.data });
	      } else if (res && res.errorCode == 208) {
	        _reactRouter.browserHistory.push('/');
	      } else {
	        _this.refs.chatscontainer.error(res.error);
	      }
	    };
	
	    _this.handleChange = function (e) {
	      _this.setState({ msgContent: e.target.value });
	      if (e.key == 'Enter') {
	        _this.sendMsg();
	      }
	    };
	
	    _this.sendMsg = function (e) {
	      if (_this.state.msgContent.trim() != '') {
	        var fileName = '';
	        var messageType = '';
	        var url = _this.state.msgContent.trim();
	        var regexQuery = /(http(s)?:\\)?([\w-]+\.)+[\w-]+[.com|.in|.org]+(\[\?%&=]*)?/;
	        var retVal = new RegExp(regexQuery);
	        if (retVal.test(url)) {
	          var reg = new RegExp(/(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/, "g");
	          url.match(reg);
	          if (RegExp.$3.indexOf('youtu') > -1) {
	            fileName = RegExp.$6;
	            messageType = "YOUTUBE";
	          } else if (RegExp.$3.indexOf('vimeo') > -1) {
	            fileName = RegExp.$6;
	            messageType = "VIMEO";
	          } else {
	            messageType = "URL";
	          }
	          //console.log("fileName", fileName);
	          console.log("messageType", messageType);
	        } else {
	          messageType = "TXT";
	        }
	        var obj = {
	          /*sentBy : this.state.uid,*/
	          roomKey: _this.state.roomKey,
	          chatType: _this.chatType,
	          messageType: messageType,
	          message: url,
	          fileName: fileName
	          // console.log("client obj", obj)
	          //Chnaged by rajesh for clearing the chat message
	        };_this.temp = _this.state.msgContent;
	        _this.setState({ msgContent: '' });
	        (0, _ChatActions.sendRoomMessage)(obj).then(function (res) {
	          return _this.clearInput(res);
	        });
	      }
	    };
	
	    _this.exportChat = function () {
	
	      var roomKey = _this.state.roomKey != null ? _this.state.roomKey : _this.props.roomKey;
	      return (0, _apiCaller2.default)('export-room-chat/' + roomKey, 'get').then(function (res) {
	        return _this.exportData(res);
	      });
	    };
	
	    _this.clearInput = function (res) {
	      var that = _this;
	      // console.log("response", res);
	      if (res.status) {
	        // this.setState({ msgContent : '' });
	        _this.setState({ chatData: res.data });
	        _this.newChatDataRequest();
	      } else if (res && res.errorCode == 208) {
	        _reactRouter.browserHistory.push('/');
	      } else {
	        //assign previous value when error come from res
	        _this.setState({ msgContent: _this.temp });
	        _this.refs.chatscontainer.error(res.error);
	      }
	    };
	
	    _this.newChatDataRequest = function () {
	      var obj = {
	        command: 'ROOM-CHAT',
	        content: { chatData: {} },
	        type: 'OBJECT'
	      };
	      _this.props.confObject.sendMessage(obj, 0);
	    };
	
	    _this.handleUpload = function (e) {
	      //console.log(e.target)
	      var reader = new FileReader();
	      var file = e.target.files[0];
	
	      if (!file) {
	        return;
	      } else if (file.size > 20971520) {
	        alertify.alert(_this.props.intl.messages.warning, _this.props.intl.messages.chat_file_alert, function () {}).setting({ 'label': _this.props.intl.messages.ok });
	        return;
	      }
	
	      // For progress bar 
	      var that = _this;
	      reader.onprogress = function (data) {
	
	        // code changed by - Najib, On firefox, progress(percentage data) never reaches 100 so progress bar always visible. To work around, hiding progress bar(only for firefox) if progress(percentage data) is greater than 95.  
	        var ua = navigator.userAgent.toLowerCase();
	        //console.log("browser type", ua);
	        var br = /firefox/;
	        if (data.lengthComputable) {
	          var progress = parseInt(data.loaded / data.total * 100, 10);
	
	          if (progress == 100) {
	            that.setState({
	              progressBar: false,
	              progress: ''
	            });
	          } else if (br.test(ua) && progress >= 95) {
	            that.setState({
	              progressBar: false,
	              progress: ''
	            });
	          } else if (that.state.progressBar == true) {
	            that.setState({
	              progress: progress
	            });
	          } else {
	            that.setState({
	              progressBar: true,
	              progress: progress
	            });
	          }
	        }
	      };
	
	      //console.log(file)
	      reader.onload = function (img) {
	        var dataURI = img.target.result;
	        this.imageData["file"] = dataURI.split(',')[1];
	        this.imageData["fileName"] = file.name;
	        this.imageData["fileSize"] = file.size;
	        if (file.type == 'application/zip') {
	          this.imageData["fileType"] = 'zip';
	        } else if (file.type != "") {
	          this.imageData["fileType"] = file.type.substring(0, file.type.indexOf("/"));
	        }
	        var fileFormat = file.name.split(".");
	        var length = fileFormat.length;
	        var typeOfFile = _.trim(fileFormat[length - 1]);
	        var allowedFormats = _.map(['xlsx', 'xls', 'doc', 'docx', 'ppt', 'pptx', 'txt', 'pdf', 'odp', 'odt', 'ods', 'png', 'jpeg', 'jpg', 'gif', 'wav', 'mp3', 'wmv', 'mp4', 'mkv', 'avi'], _.trim);
	        var data = this.imageData;
	        if (allowedFormats.includes(typeOfFile) || file.type == 'application/zip') {
	          this.saveFile(data);
	        } else {
	          this.refs.chatscontainer.error('Sorry File Not Supported');
	        }
	      }.bind(_this);
	      reader.readAsDataURL(file);
	    };
	
	    _this.runOnce = true;
	    _this.chatType = 'Room';
	    _this.state = {
	      roomKey: null,
	      msgContent: '',
	      chatData: null,
	      showImageModal: false,
	      message: '',
	      fileType: '',
	      progress: '',
	      progressBar: false,
	      displayName: '',
	      fileName: '',
	      fileId: '',
	      download: false
	    };
	    _this.temp = '';
	    _this.imageData = {};
	    _this.FetchRoomChatData = _this.FetchRoomChatData.bind(_this);
	    _this.props.confObject.RoomChatListener(_this.FetchRoomChatData);
	    return _this;
	  }
	
	  _createClass(RoomChat, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props && this.props.roomKey) {
	        this.setState({ roomKey: this.props.roomKey });
	        this.reqDataObj();
	      }
	      if (!this.props.noConference) {
	        this.refs.roomchatinput.focus();
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var objDiv = document.getElementById("roomChatBody");
	      if (objDiv != undefined) {
	        objDiv.scrollTop = objDiv.scrollHeight;
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps && nextProps.roomKey && this.state.roomKey == null) {
	        this.setState({ roomKey: nextProps.roomKey });
	        if (this.runOnce) {
	          this.reqDataObj();
	          this.runOnce = false;
	        }
	      }
	    }
	  }, {
	    key: 'exportData',
	    value: function exportData(response) {
	      if (response.status == true) {
	        this.setState({
	          download: true,
	          fileName: "/" + response.fileName
	        });
	        document.getElementById("export").click();
	        this.refs.chatscontainer.success('Exported Successfully');
	      } else {
	        this.refs.chatscontainer.error(response.error + ' ', '');
	      }
	    }
	  }, {
	    key: 'FetchRoomChatData',
	    value: function FetchRoomChatData() {
	      this.reqDataObj();
	    }
	  }, {
	    key: 'saveFile',
	    value: function saveFile(data) {
	      var _this2 = this;
	
	      var messageType;
	      if (data.fileType == "application" || data.fileType == "zip" || data.fileType == "text") {
	        messageType = 'FILE';
	      } else if (data.fileType == "image") {
	        messageType = 'IMG';
	      } else if (data.fileType == "audio") {
	        messageType = 'MEDIA';
	      } else if (data.fileType == "video") {
	        messageType = 'VIDEO';
	      }
	      var obj = {
	        /*sentBy : this.state.uid,*/
	        roomKey: this.state.roomKey,
	        chatType: this.chatType,
	        messageType: messageType,
	        message: data.fileName,
	        file: data.file,
	        fileSize: data.fileSize
	      };
	      (0, _ChatActions.sendRoomMessage)(obj).then(function (res) {
	        return _this2.clearInput(res);
	      });
	    }
	  }, {
	    key: 'handleImage',
	    value: function handleImage(imageName, fileType) {
	      this.setState({
	        showImageModal: true,
	        fileName: imageName,
	        fileType: fileType,
	        displayName: imageName
	      });
	    }
	  }, {
	    key: 'hideImageModal',
	    value: function hideImageModal() {
	      this.setState({
	        showImageModal: false,
	        fileName: '',
	        fileType: ''
	      });
	    }
	  }, {
	    key: 'handleURLVideo',
	    value: function handleURLVideo(fileName, fileType) {
	      this.setState({
	        showImageModal: true,
	        fileId: fileName.fileId,
	        fileType: fileType.messageType
	      });
	    }
	  }, {
	    key: 'viewUser',
	    value: function viewUser(id) {
	      if (id && this.props.loggedInData && this.props.loggedInData.data && !this.props.loggedInData.data.guest) {
	        _reactRouter.browserHistory.push('/profile/' + id);
	      }
	    }
	  }, {
	    key: 'handleClearChat',
	    value: function handleClearChat() {
	      var self = this;
	      alertify.confirm(this.props.intl.messages.warning, this.props.intl.messages.delete_room_chat_alert, function (result) {
	        if (result) {
	          (0, _ChatActions.clearRoomChat)(self.state.roomKey).then(function (res) {
	            return self.clearChat(res);
	          });
	        }
	      }, function () {}).setting('labels', { 'ok': this.props.intl.messages.ok, 'cancel': this.props.intl.messages.cancel });
	    }
	  }, {
	    key: 'clearChat',
	    value: function clearChat(res) {
	      console.log("res--", res);
	      if (res.status) {
	        this.setState({ chatData: res.data });
	        this.newChatDataRequest();
	      } else {
	        this.refs.chatscontainer.error(res.error);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this,
	          _React$createElement;
	
	      //console.log("chat data----", this.state.chatData);
	      var varLink = '';
	      if (this.state.fileType == "YOUTUBE") {
	        varLink = "https://www.youtube.com/embed/" + this.state.fileId;
	      } else if (this.state.fileType == "VIMEO") {
	        varLink = "https://vimeo.com/" + this.state.fileId;
	      } else {
	        var showFileName = '';
	        var extn = '';
	        showFileName = this.state.fileName.substring(this.state.fileName.indexOf("_") + 1);
	
	        //code changed by - Najib, Desc- Limiting file name if exceeds 35 character 
	        extn = showFileName.substring(showFileName.lastIndexOf('.') + 1, showFileName.length) || showFileName;
	        if (showFileName.length > 35) {
	          varLink = showFileName.substr(0, 35) + '...' + extn;
	        } else {
	          varLink = showFileName;
	        }
	      }
	
	      var guestStatus = null;
	      if (this.props.loggedInData && this.props.loggedInData.data && this.props.loggedInData.data.guest) {
	        guestStatus = true;
	      }
	
	      var cls_selfPostMsg = _Dashboard2.default.selfPostMsg + ' clearfix';
	      var cls_selfPostMsgGuest = _Dashboard2.default.selfPostMsgGuest + ' clearfix';
	      var chats = _ref;
	      var self = this;
	
	      var fileURL = "/uploads/" + this.state.fileName;
	      //const fileName = this.state.fileName.substring(this.state.fileName.indexOf("_") + 1);
	      var youTubeLink = "https://www.youtube.com/embed/" + this.state.fileId;
	      var vimeoLink = "https://player.vimeo.com/video/" + this.state.fileId + "?api=1&player_id=player_1";
	      var showImageModal = this.state.showImageModal ? _jsx('div', {}, void 0, _jsx(_reactBootstrap.Modal, {
	        show: this.state.showImageModal,
	        onHide: this.hideImageModal.bind(this)
	      }, void 0, _jsx(_Modal.Header, {
	        closeButton: true
	      }, void 0, _jsx(_Modal.Title, {
	        className: _Dashboard2.default.popHeadingAll
	      }, void 0, varLink)), _jsx(_Modal.Body, {}, void 0, _jsx('div', {
	        className: _Dashboard2.default.mediaView
	      }, void 0, this.state.fileType == "VIDEO" ? _jsx('div', {
	        className: _Dashboard2.default.videoWrapper
	      }, void 0, _jsx('video', {
	        src: fileURL,
	        controls: true
	      })) : this.state.fileType == "IMG" ? _jsx('img', {
	        src: fileURL
	      }) : this.state.fileType == "YOUTUBE" ? _jsx('div', {
	        className: _Dashboard2.default.videoWrapper
	      }, void 0, _jsx('iframe', {
	        src: youTubeLink
	      })) : this.state.fileType == "VIMEO" ? _jsx('div', {
	        className: _Dashboard2.default.videoWrapper
	      }, void 0, _jsx('iframe', {
	        src: vimeoLink
	      })) : null)), _ref2)) : null;
	
	      var now = this.state.progress;
	      var progressBar = this.state.progressBar ? _jsx(_reactBootstrap.ProgressBar, {
	        bsStyle: 'success',
	        now: now,
	        label: now + '%'
	      }) : null;
	
	      if (this.state.chatData && this.state.chatData.length > 0) {
	        chats = this.state.chatData.map(function (chat) {
	          var messageType = chat.messageType;
	          var fileName = chat.message;
	          var fileId = chat.fileName;
	          var message;
	          if (chat.messageType == 'FILE' || chat.messageType == 'MEDIA') {
	            var chatMessage = chat.message.substring(chat.message.indexOf("_") + 1);
	            var link = "/uploads/" + chat.message;
	            var ext = chatMessage.split('.').pop();
	            var src = "/images/icons/" + ext + ".png";
	            message = _jsx('div', {}, void 0, _jsx('img', {
	              src: src
	            }), _jsx('span', {
	              className: _Dashboard2.default.textField
	            }, void 0, chatMessage), _jsx(_reactRouter.Link, {
	              id: 'download',
	              href: link,
	              download: true
	            }, void 0, _jsx('span', {
	              className: _Dashboard2.default.downloadFile
	            }, void 0, _ref3)));
	          } else if (chat.messageType == 'IMG') {
	            var _chatMessage = chat.message.substring(chat.message.indexOf("_") + 1);
	            var _src = "/uploads/" + chat.message;
	            message = _jsx('div', {}, void 0, _jsx('div', {
	              className: _Dashboard2.default.chatMediaBox
	            }, void 0, _jsx('img', {
	              id: 'Image',
	              src: _src,
	              title: _chatMessage,
	              onClick: _this3.handleImage.bind(_this3, chat.message, chat.messageType)
	            }, chat.message)), _jsx(_reactRouter.Link, {
	              id: 'download',
	              href: _src,
	              download: true
	            }, void 0, _jsx('span', {
	              className: _Dashboard2.default.downloadMedia
	            }, void 0, _ref4)));
	          } else if (chat.messageType == 'VIDEO') {
	            var _chatMessage2 = chat.message.substring(chat.message.indexOf("_") + 1);
	            var _src2 = "/uploads/" + chat.message;
	            message = _jsx('div', {}, void 0, _jsx('div', {
	              className: _Dashboard2.default.chatMediaBox
	            }, void 0, _jsx('video', {
	              id: 'video',
	              src: _src2,
	              title: _chatMessage2,
	              onClick: _this3.handleImage.bind(_this3, chat.message, chat.messageType)
	            }, chat.message)), _jsx(_reactRouter.Link, {
	              id: 'download',
	              href: _src2,
	              download: true
	            }, void 0, _jsx('span', {
	              className: _Dashboard2.default.downloadMedia
	            }, void 0, _ref5)));
	          } else if (chat.messageType == 'VIMEO') {
	            var duration = '';
	            if (chat.duration) {
	              var m = chat.duration / 60 | 0;
	              var s = chat.duration % 60 | 0;
	              duration = _moment2.default.utc().minutes(m).seconds(s).format("mm:ss");
	            }
	            var _src3 = chat.vimeoThumbnail ? chat.vimeoThumbnail : "/images/black-icons/black-start.png";
	            var title = chat.title ? chat.title : 'No Name';
	            message = _jsx('div', {
	              className: _Dashboard2.default.mediaListBlock
	            }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, chat._id, _jsx(_reactRouter.Link, {}, void 0, _jsx('div', {
	              className: _Dashboard2.default.videoThubBox
	            }, void 0, _jsx('div', {
	              className: _Dashboard2.default.timeDisplay
	            }, void 0, _jsx('p', {}, void 0, duration)), _jsx('img', {
	              id: 'urlVideo',
	              src: _src3,
	              onClick: _this3.handleURLVideo.bind(_this3, { fileId: fileId }, { messageType: messageType }),
	              title: title
	            }, fileId))), _jsx('label', {
	              title: title
	            }, void 0, title))));
	          } else if (chat.messageType == 'YOUTUBE') {
	            var _src4 = "http://img.youtube.com/vi/" + fileId + "/1.jpg";
	            var _title = chat.title ? chat.title : 'No Name';
	            message = _jsx('div', {
	              className: _Dashboard2.default.mediaListBlock
	            }, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, chat._id, _jsx(_reactRouter.Link, {}, void 0, _jsx('div', {
	              className: _Dashboard2.default.videoThubBox
	            }, void 0, _jsx('div', {
	              className: _Dashboard2.default.timeDisplay
	            }, void 0, _jsx('p', {}, void 0, chat.duration ? _moment2.default.duration(chat.duration).minutes() + ":" + _moment2.default.duration(chat.duration).seconds() : null)), _jsx('img', {
	              id: 'urlVideo',
	              src: _src4,
	              width: '100',
	              height: '100',
	              onClick: _this3.handleURLVideo.bind(_this3, { fileId: fileId }, { messageType: messageType }),
	              title: _title
	            }, fileId))), _jsx('label', {
	              title: _title
	            }, void 0, _title))));
	          } else if (chat.messageType == 'URL') {
	            if (!fileName.match(/http/g)) {
	              var addHead = "https://";
	              var url = addHead + fileName;
	            } else {
	              var url = fileName;
	            }
	            message = _jsx('a', {
	              id: 'file',
	              href: url,
	              target: '_blank'
	            }, void 0, _jsx('p', {}, void 0, fileName));
	          } else {
	            message = _jsx('p', {}, void 0, chat.message);
	          }
	
	          var pic = '/images/profile-pics/defaultStudent.jpg';
	          // console.log("this.state.progressBar", this.state.progressBar);
	          var currDate = (0, _moment2.default)().endOf('day');
	          var msgDate = (0, _moment2.default)(chat.createdOn).endOf('day');
	          var sentOn = (0, _moment2.default)(chat.createdOn).seconds(0).format('hh:mm A');
	          if (+currDate > +msgDate) sentOn = (0, _moment2.default)(chat.createdOn).format('DD-MM-YY hh:mm A');
	          if (chat.sentBy && chat.sentBy.profile && chat.sentBy.profile.profileImage) pic = "/uploads/" + chat.sentBy.profile.profileImage;
	
	          return chat.sentBy && chat.sentBy._id ? _jsx('li', {}, chat._id, _jsx('div', {
	            className: cls_selfPostMsg
	          }, void 0, _jsx(_reactRouter.Link, {
	            id: 'viewprofile',
	            className: guestStatus ? _Dashboard2.default.avatarCircle40Guest : _Dashboard2.default.avatarCircle40,
	            onClick: _this3.viewUser.bind(_this3, chat.sentBy._id),
	            title: _this3.props.intl.messages.viewprofile
	          }, void 0, _jsx('img', {
	            src: pic
	          })), _jsx('div', {
	            className: _Dashboard2.default.listedMsgBlock
	          }, void 0, _jsx('div', {
	            className: _Dashboard2.default.avatarNameBlock
	          }, void 0, _jsx('h2', {}, void 0, chat.sentBy.firstname, ' ', chat.sentBy.lastname), _jsx('p', {}, void 0, _ref6, ' ', sentOn)), _jsx('div', {
	            className: _Dashboard2.default.listedMsg
	          }, void 0, message)))) : null;
	        });
	      } else {
	        chats = _ref7;
	      }
	
	      return _jsx('div', {
	        className: _Dashboard2.default.whiteboard
	      }, void 0, _react2.default.createElement(_lib.ToastContainer, {
	        toastMessageFactory: ToastMessageFactory,
	        ref: 'chatscontainer',
	        className: 'toast-bottom-right'
	      }), _jsx('div', {
	        className: _Dashboard2.default.whiteBoardContainer
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.roomChatContainer
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.roomChatMsnger,
	        id: 'roomChatBody'
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.roomChatList
	      }, void 0, _jsx('ul', {}, void 0, chats))), !this.props.noConference ? _jsx('div', {
	        className: _Dashboard2.default.roomChatTypeMsg
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.writeMsg
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.attachIcon,
	        title: self.context.intl.messages.attach_file
	      }, void 0, _ref8, _react2.default.createElement('input', (_React$createElement = { id: 'fileRoomInput', type: 'file', ref: 'fileRoomInput' }, _defineProperty(_React$createElement, 'id', 'fileRoomInput'), _defineProperty(_React$createElement, 'accept', '.xlsx,.xls,.doc, .docx,.ppt, .pptx,.txt,.pdf,.odp,.odt,.ods,.png,.jpeg,.jpg,.gif,.wav,.mp3,.wmv,application/zip,.mp4,.mkv'), _defineProperty(_React$createElement, 'onChange', this.handleUpload.bind(this)), _defineProperty(_React$createElement, 'value', ''), _React$createElement))), _jsx('div', {
	        className: _Dashboard2.default.msgInput
	      }, void 0, _react2.default.createElement('input', { id: 'roomchatinput', type: 'text', ref: 'roomchatinput', className: _Dashboard2.default.msgInputTxt, placeholder: this.props.intl.messages.say_something, onChange: this.handleChange, value: this.state.msgContent, onKeyPress: this.handleChange })), _jsx('div', {
	        id: 'sendMessage',
	        className: _Dashboard2.default.attachIcon,
	        title: this.props.intl.messages.push_the_message,
	        onClick: this.sendMsg
	      }, void 0, _ref9), this.props.imHost ? _jsx('span', {}, void 0, _jsx('div', {
	        id: 'exportChat',
	        className: _Dashboard2.default.attachIcon,
	        title: this.props.intl.messages.export_chat,
	        onClick: this.exportChat
	      }, void 0, _ref10), _jsx('div', {
	        id: 'clearChat',
	        className: _Dashboard2.default.attachIcon,
	        title: self.context.intl.messages.clear_room_chat,
	        onClick: this.handleClearChat.bind(this)
	      }, void 0, _jsx('label', {
	        htmlFor: 'clearChat'
	      }, void 0, _ref11))) : null)) : null)), showImageModal, progressBar, this.state.download ? _jsx('a', {
	        href: this.state.fileName,
	        id: 'export',
	        download: true
	      }, void 0, ' ') : null);
	    }
	  }]);
	
	  return RoomChat;
	}(_react.Component);
	
	RoomChat.contextTypes = {
	  intl: _react2.default.PropTypes.object.isRequired
	};
	
	// Retrieve data from store as props
	function mapStateToProps(state) {
	  return {
	    intl: state.intl,
	    loggedInData: (0, _LoginReducer.loggedInData)(state)
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(RoomChat);

/***/ },

/***/ 502:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.SchedulePassword = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Modal = __webpack_require__(52);
	
	var _ConfSettings = {
	    "contactListFixed": "_3YyeeAlwH39lu4k1AcsVzz",
	    "attendeesListFixed": "_2K0WCxOutftWQWUC97yMC7",
	    "groupChatFixed": "_3_JIhKB0tI9DD5OYYcFFhO",
	    "indiChatFixed": "_121x6wkYY9bMxq2znilpes",
	    "settingOptionsFixed": "_3paKcIA8hOSOXOYxlVoxNm",
	    "openSettingOptions": "Luc2pUw4qPvGeP6xwmHcG",
	    "openMyContacts": "_1C6XGrkAGrUazLBzl1a02S",
	    "openIndiChat": "UQfb0iYQl4dhQKuOnsjni",
	    "onCalPadding1": "_3gqfldlZ-Z_Sekdsf_JmV8",
	    "onCalPadding2": "TpdjC_Scf0J7ibmshcsHB",
	    "tableBlock": "_2Pi4V-gyA8hujIg37JdcPF",
	    "tableBlockRow": "_1KxRi3MxZO0VArI7RlCPxV",
	    "tableBlockCell": "_3w6tOWgPscVGXLLUlIP7GM",
	    "modAsideHeader": "_3-QQh-Lc7fsJw9YCfe35cM",
	    "modAsideHeaderWhite": "_1DkMVq5OjZv2giJ2lz8Xbx",
	    "modHeaderList": "_1VcV32VYR_IteNriuqUrZx",
	    "block50": "_3KEUbD9sh-5efPnOe48KQu",
	    "nohover": "m7jTOV3afDX3KYXfpJDuW",
	    "fileUpload": "_1Ta80WwlyVY6khGgoelZff",
	    "modHeaderWhiteList": "QSATVkaBXWZG4ZflFM5PB",
	    "active": "_3wgRcJQgpFwV1Tze6eaYAL",
	    "modNoContacts": "_2dScJey0ocmQJ61rLItP-A",
	    "noContactsCircle": "_3fppM4qH32McKUY31Jd-6v",
	    "modSearchBlock": "_2ixaFhqvPC_d1LihI6OOiz",
	    "navbarFormCustom": "yKPBmk6p-C2xFA-2Ows1k",
	    "backSearch": "w7BGjmEiChPoMYjET5k8R",
	    "subNavBars": "AH4Om8A-_X-udTyFQ7ZaF",
	    "topLeftLogo": "_1-GqCHAZRcGKZa8ZI-O_X3",
	    "modContactList": "_1zmiGIPb92yNtOu845RHyM",
	    "chatBox": "_2taDr3sNLvZl64o7TkBTEg",
	    "callBox": "_3Gp0sm-V9Sto6Pc6w2dIJk",
	    "midTitle": "_1CjowBdVtt6x8kMj4GrzgR",
	    "modAsideListBody": "_2DV2QAFRMgCwwweXaahjbD",
	    "contactContainer": "BX4gsvYQEJ_UxHYXquiM_",
	    "avatarBox": "_3bvAwAP34cIm79JtYGBa_9",
	    "contactInfoBox": "_3cjt3RdW6fRpFCY2cWtvKD",
	    "listStatusCircle": "P_Vqoj0CkeWDRXFsu5ehX",
	    "onlineColor": "_1wBno7dwEzhNENm5FFYuNf",
	    "busyColor": "_1n4n0IG8nR8VNBkhdiq1hk",
	    "bgOffline": "jL-R5aQBwO_2EmgAsiay1",
	    "bgOnline": "_3TEYblB_gY5codKEtLqX7q",
	    "adjustForModal": "_1u3ETV1bbhpgq63k3OJztN",
	    "addOn": "_1Q2E4mFH1Nbr5A47e3lt7L",
	    "formControlCustom": "BFcJiZMNYiw9nyvHzU7Rx",
	    "inputGroupBtn": "_2nCnROACf_M8pzec6EM7E6",
	    "btn": "_27VXnOss6C0tcmiXDJyEQY",
	    "btnSearch": "ZfOcSiAJS-yXPDPQgHF4e",
	    "topMrgZero": "_2o-JH37Bqi-l9CT81GRGjn",
	    "modProfileCard": "_2JPfY65up63hkI3vhK4ptW",
	    "addNowBlock": "_1W6-RmWzqJiQLK1pcBavDu",
	    "btnAddContact": "_3aNMiTsg3DLcR-4J2Y_5MR",
	    "btnAddedContact": "_1bX98ziw9A1ojzalhVjdIn",
	    "contactInfoBlock": "_1Wo1W59FlAtVXV30dsfoPD",
	    "asideBodySecondary": "_10yt3T9QoXDhC8rqK-kAA2",
	    "modSelectChoice": "_33_xmT9lclkFPIqAT9rNlC",
	    "headerText": "_2POMQ33JzpZXRKNQwhKTpK",
	    "optionsBlock": "_2Hljs23RSy64iPvRKW8UVf",
	    "settingsOptionInput": "Avxs4QLLmPyHnmuu6zFH6",
	    "click-wave": "_1B9ixe0Xk37c7IQaSeA-9F",
	    "radio": "_1YNHku8cDP1FxyBn3XkUJY",
	    "modChatBody": "_9MKv9eaGfnPfSvgrjOIeK",
	    "modChatContainer": "_21msPTbxn87ey3RWsSt_35",
	    "selfChatBox": "_2YE5OVKMMJqey9Zvc5_Dk-",
	    "avatarCircle": "_3t6DqYa8W4OjIj_EF90-T1",
	    "messageBox": "_2T5QmUyalQ5yF2jPtvDJDr",
	    "downloadFile": "_33q4w5biPTOCecW_SwRklY",
	    "downloadMedia": "LiHJPdfKZT7yHz2F8sr0U",
	    "textField": "_3zRLRN3HHrTZ_xaEcFhS9C",
	    "otherChatBox": "_1qZ7OG5sw3T_39aOzvAyCc",
	    "chatMediaBox": "VS8lEUQuRxq9jwuxa4f0-",
	    "modChatFooter": "_3Kb0OVypvH6v1meOExS2Oq",
	    "chatWrite": "_2jwPxajNYm5H_vrK7q_9tM",
	    "formControlChatOverwrite": "F6fdFHvEw_Mpy1wlxe2Bg",
	    "sendMessage": "_2OxgF4p4Jtp0wysNk_Dy5_",
	    "avatarCircleGuest": "_2xlj1cSx9qua6H5Rjhy3wC",
	    "setConfPassword": "_2m3UxvMEUMBkXP7gGLc3ox",
	    "iconBlock": "_1llySoPNa1j3k655fl2PNS",
	    "passWordBlock": "_2z5dmQWuPHtQL2grl4Rd92",
	    "meetingDetails": "_1sj35kVEBVp66LoUjk7Pvl",
	    "meetingInfoBlock": "_1T7YyYvtu5N7JuDsWHAgPR",
	    "inputError": "_30zq1PCjl9v2jnkrDEFjSK",
	    "formControlOverwrite": "_2yPlkP5pH38hsoOHEV9Yrb",
	    "calendarInlineBlock": "_3-PsrheDdsPKEdUSGIir2n",
	    "endsOnBlock": "gkiQ3RaZAclcm5W2_yi1v",
	    "schedlDate": "_1R340GeG3VFBlX-dP9P0Ub",
	    "schedlTime": "_3CKgTfQeRBoFX_uCGzKeNG",
	    "schedlDuration": "P1l9_DlNKhzuxO45SRUzq",
	    "onSpan": "_1rAiAWHfT1m-kgPikHlRXs",
	    "repeatsList1": "_RT_TjG0GSJVgzkhOcoGM",
	    "repeatsList2": "_3jQ7JwdBE8oJGy-gjbHtwh",
	    "schedlHour": "_1ArS5dXvY1zt9tn0Sc_z_f",
	    "schedlMins": "_2dwV_Lh-ernG9imoJU1hpw",
	    "inputGroupAddonOverwrite": "_3fLlY1-oVeGeMJUk7JZxW8",
	    "setDueDateOverwrite": "_23XZMgNyAur3QMU5c-hiT",
	    "dateTimePickerBlock": "_7EHobKKJefSu_2XmHE49F",
	    "actionBlock": "_2ETKg3XUqJOstPZcN_kqEu",
	    "actionButtonBox": "_2xe2-CWYD_0PEak4DXOGv9",
	    "indChatNotification": "_14IhbO1qkUW6uAP7NxZsbH",
	    "alignMidBlock": "_3hun2u2tqVy7KR7JqmMf6P",
	    "centerBlock": "HLVHVZhqp-7yopt3Ah073",
	    "btnCodec": "pDa1Eh41y3LmhqUTgK-UT",
	    "transBlock": "_1qfpk41qZbXSP1Lma_yvNe",
	    "btnTransport": "szHYW92cM7tgGZoXatQyg",
	    "helpdesk": "_3_EJ-vjbaDbucjQz2CYAjT",
	    "sliderA": "_2wwiNxtBAlrjRa7R2Jz_iO",
	    "scheduFullBlock": "_1gzSrAarjNRvFeiRj044Pu",
	    "scheduImgBlock": "_3J0gQCTcBOKDfB0jlMAtrt",
	    "sliderB": "_3IdDVUuL8XEJZcsFNi5DNT",
	    "sliderText": "_3aTkGPXbvwzEcm-3mn-d8p",
	    "sideDrop": "_3OKv2xPQewcH8b_Ei7HU6K",
	    "popHeadingAll": "_2p3SY545DrLPd7fl4Izqbd",
	    "btnApplyAll": "_2fyYhx6LAR6RJEHKRk9QXt",
	    "emailInChatText": "_29xq-DgQlxvSeE_5T3jrT3",
	    "formGroup": "_3KjN0y7pluCsc5z7xi6g2j",
	    "formGroupLabel": "_3FTezjO4FR-bN9QI0TPU6g",
	    "colForinput1": "_2M0ngeCbsTsOe_UXDZGYfW",
	    "colForinput2": "_1y0IYYKA3YAxi9BkFZt9tl",
	    "endOnPara": "_1pcv1il3aX3hB0V2sNJjfn",
	    "toastTop": "_1kFxA5k985kes0bDJBKYjM"
	};
	
	var _ConfSettings2 = _interopRequireDefault(_ConfSettings);
	
	var _component = {
	    "form-control": "QmIrbtmLmFNpHdWMqFMWS",
	    "innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
	    "colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
	    "error": "_3jAfmA6J7YmNDyB2VfsCxP",
	    "mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
	    "dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
	    "iElement": "_2crZNiFs8z8oNhzPDC1qOE",
	    "oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
	    "iLabel": "_3Pyvct_srCoSvJCgGG41jw",
	    "oLabel": "NsxWZpxBqBX8wky_O477_",
	    "iForm": "_3IlToa7pigrSS8KWut_dJ8",
	    "oForm": "_3N0YNUcfI5U02VSmBEbYot",
	    "iFormField": "_12yKSn29WLZIE6fvGQfcrN",
	    "oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
	    "iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
	    "oFormGroup": "_386CxczA49XX2-ejr3Qe55",
	    "formNext": "ccTxjcG6_GZO9OgzW33HT",
	    "iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
	    "oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
	    "iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
	    "oContainer": "_2tEAAtqgoutuOUU96rNvv1",
	    "iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
	    "oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
	    "iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
	    "iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
	    "whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
	    "iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
	    "active": "_2fF1Q9nO2O_1B8Ldb4RM52",
	    "scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
	    "errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
	    "errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
	    "whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
	    "greyCard": "_34l9W17Mt1koxHLd1yUqgk",
	    "reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
	    "countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
	    "react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
	    "ad": "N3bKXyhfwvWT3eAEC9Nno",
	    "ae": "taXUT8yfjgRMeSH3rMNxy",
	    "af": "_2vH4qShCgBPBO4GR8BdNvd",
	    "ag": "n8QfWtvpZLMpatCUqX2Td",
	    "ai": "_3fPX_RcpesOPxFsmsaygCE",
	    "al": "_1T12tbcC6990b-fIMG5LYW",
	    "am": "_31HdarMDfXvAgjizVUoeHk",
	    "ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
	    "ar": "_2qJleMgRbIErIrx3kQF57O",
	    "as": "_2ZPVYL8Vjn-vdWZToCEhjN",
	    "at": "_1hWilvnrVbANEHRyLGlF-m",
	    "au": "_2zJE4K6o-ftWqhb3exXZgk",
	    "aw": "_1UroMxX5JHt9bjGdHwa1OY",
	    "az": "_-Y2xueZ_1mEtB9YDOqEGB",
	    "ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
	    "bb": "_34600Kl8Wac9Hx7S3-3U6b",
	    "bd": "_3WBX90V5VJXA7-vSUfEWCh",
	    "be": "BcK33edOPcbYdkxxvOApy",
	    "bf": "ShN64-J7UZdswoQjkf7L_",
	    "bg": "_2A9PgkQEF5_KbvHvDf6_lY",
	    "bh": "_10p3rxNRYOhv8-BtZuq1w8",
	    "bi": "_6MzP1qXXDFAZVL7nBmRiH",
	    "bj": "_2U8H1sji9LfDEW706KyKvF",
	    "bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
	    "bn": "PgMDvF79WHl3kaklOmhw3",
	    "bo": "_7MheGVInaTi-QLxw5PiUi",
	    "br": "_1BDNUyT0cHDlbCBFgrrLkJ",
	    "bs": "_3vcASZB5bu7mJAzTzaRkWe",
	    "bt": "esu4pvyd9ZFWrf-etnrva",
	    "bw": "_2Hbv1I361RJFK3Ph2xPlu_",
	    "by": "_2tbYam6Og8RAicMhX9SXvI",
	    "bz": "_3xB704PIgqFnU2zTG-JZFN",
	    "ca": "_36FyK29nkNl9Ez7yWh04AS",
	    "cd": "_9PnHTqK1pSn_GIAbBtPT2",
	    "cf": "_2LgMF7o1A3a2cgw5jkpvZV",
	    "cg": "_3hYc9Y3UdCphltZKe2vJWk",
	    "ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
	    "ci": "FoSGkvvMDFAVcvsZBWX-Z",
	    "ck": "_1742IgEaHW3SZU7h_-nkwr",
	    "cl": "_36IaMt7ntEwUsH4lwN4tW-",
	    "cm": "_1N8krqbPtlsEVsh6SaCetm",
	    "cn": "IfkD3fwbUSx9FZflX6iIU",
	    "co": "_3Y7u7ONzxyZVjZYzS1OHTr",
	    "cr": "Gw5Qz4qBNZjPDmpQmi-d2",
	    "cu": "ZuHtEp_knwZcbwTTJkRgI",
	    "cv": "o6BzJCyjRH1pOsf_HpbQ6",
	    "cw": "hRElJCQXyNIITDZ6UQVut",
	    "cy": "_2cHKWrINPNO6L8BEOdtJCG",
	    "cz": "nS617LE8Qcckdv9HJTWpt",
	    "de": "fqJD93WBywDPs0lrLEXLT",
	    "dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
	    "dk": "_3fpBLMtuUi0kowy3ziMRYd",
	    "dm": "_3gMwGkQW-OGFx1U7vd7VMD",
	    "do": "G9EZGjpXLJUyQuREesyGO",
	    "dz": "_3Nka0vwv6nZpeugyuqYQIJ",
	    "ec": "_18t83SdIOs8EY6iF0zV0CZ",
	    "ee": "_1miCbYr55XmBKvcUu6XetR",
	    "eg": "_1T55wMh1svM7M5QGxFM2ex",
	    "er": "c0Ab9spCQ4VnXr_6xijnD",
	    "es": "_1lutiEL9tJpdNgKmnTT6Ld",
	    "et": "_2GGXIPO2kOV6CUsu65V4Z3",
	    "fi": "_1I-g5oWpQznT5QZuBfQ8A",
	    "fj": "_3oeTP_GhC_XzsjzHW86oDc",
	    "fk": "_3-_BjK4NArHS0nyf0DLc4F",
	    "fm": "_1WQYGDC-zTatxog3SIwE80",
	    "fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
	    "fr": "_3-mqatBXfaTfex8LWjnIDA",
	    "bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
	    "mf": "_34f4ya9mcbpIcQPgHJ4I6c",
	    "ga": "_15_iO4CJaXbX7PySxoldPF",
	    "gb": "_1vZuFSSey59_ixozre-0L_",
	    "gd": "_26Ub0jcjDpVD4nwM7m5n4e",
	    "ge": "_27ctDR0Hf6HO15MgHS8wyh",
	    "gf": "_2S6C39D4wNBuVSqzYM5Ldy",
	    "gh": "_3vjGi6-umA-RzwxRFaTfNN",
	    "gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
	    "gl": "_1OTvyS4D4UOkymKuDLxUdx",
	    "gm": "_3-0gezNOVCHKzaLYGUySo2",
	    "gn": "_8f6uadrEfnS9IX8DEIpKO",
	    "gp": "_36yEj9UcEbZcI0WJvgmk0B",
	    "gq": "xHX18x9xk7PhDBlgsvnad",
	    "gr": "HTk_eFej1VrCiBuKBIfLT",
	    "gt": "hgmUbzxaHNZNL6frPhPeb",
	    "gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
	    "gw": "_36JwaXqhh4gBrIvAy4c1KO",
	    "gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
	    "hk": "_1mT74O5OVtonPLmYnVVOu7",
	    "hn": "_1ze0KI-TYxTrDcXlMOu24s",
	    "hr": "ZIDUSRfcbDCZTyhqWGPob",
	    "ht": "Y65Ad5pf3z7ufcknP0vhk",
	    "hu": "_3EHKICvcensXt5hEu8Nkfs",
	    "id": "_3oZE8uvxIFK7M9DCEtsSCD",
	    "ie": "_2RNmpg94YYioQp2fWyz_xn",
	    "il": "_2Mq_no7KYxPp2NSLGS1Tcs",
	    "in": "_1UlEZ269GihRa58c5mCEBN",
	    "io": "_3ovelrc7S_DdmXxL-8uuwk",
	    "iq": "_3VSlK6DYHrBgKbkE2Rng2N",
	    "ir": "NRX2sFBmuPSJ9EOigyuEP",
	    "is": "_25HaTNE7x74CJO9S1mnm4I",
	    "it": "_1-LmlhbrcpKN-xjESmR_sO",
	    "jm": "VsvDBply-4FtMoJhi8Cvu",
	    "jo": "yEE3hbkzWK8CSCrCJibCo",
	    "jp": "_3oxjjz1uD2cX2QsoSToLgz",
	    "ke": "_1ksOT6KMPd99EWuWCXPga_",
	    "kg": "_2CMnR3yv5DGwDc8p3uoOjp",
	    "kh": "_927b1QnaSWnN35i3bVewJ",
	    "ki": "_2CuDp55lqYTpFp68D4IWep",
	    "km": "_3tvMTeZYZMzBB9bGn9lV9E",
	    "kn": "_6kbCvwc22pJX0tNv3HToQ",
	    "kp": "_3tIPOe5PNrHH-bgCGaZTJj",
	    "kr": "_2653rpVUuy3ETaw1mogdnF",
	    "kw": "_1SKg_lTe0ShbPSOl44eKjp",
	    "ky": "tgj8SOv7bYoF7qfbbQWNG",
	    "kz": "bchn50J152EdQa0zf3k5u",
	    "la": "mu9oycLgpKX8_yLLkR5b9",
	    "lb": "_2TcAFbagIrNyc6mgzRVNW0",
	    "lc": "_2IFItnUNT-albvpN-ksxd2",
	    "li": "_3_E6nQspv6zJQLQI24puaS",
	    "lk": "_2M2wq3qQhGeUegbBTs7ilH",
	    "lr": "L4o4xOg0s6QbasyIRPgyF",
	    "ls": "LhBB6SRin61WSFtUwaEfe",
	    "lt": "ITDUphrnMkKItKGMVHZf8",
	    "lu": "_1mVW30sc4i-1M8tDPCQlL",
	    "lv": "_3rq6vE2IagAsGI6iESAcJq",
	    "ly": "_3se_Nzm1WQrEN3VZYiJJrv",
	    "ma": "_fSDiNxp_jjfqkQcWffDM",
	    "mc": "_2hRTRZeBtDGN4mNeWBZVgB",
	    "md": "_26jDl0skadEwmUYDGmEzST",
	    "me": "_388lJj_7sQdyd9HL7pMrar",
	    "mg": "_3aFoqVWcvG3p47Vwa6UuoE",
	    "mh": "_1YHi6OtXmKfP15ZNbwYGgy",
	    "mk": "_9QVyhHcp8yH762J8fWXhC",
	    "ml": "yYD99PoyhgFI4912_qoyJ",
	    "mm": "URzk8-j7LcySpGUMJf_Qk",
	    "mn": "_1J-lktQUTK0rydBz3foJGF",
	    "mo": "_1sbL0zhHof-KbfGWu2qjqF",
	    "mp": "_1tJjJlSjRw5AnqcXXmGwCI",
	    "mq": "fHob9sxaJrTuqSc0xL744",
	    "mr": "t-Bmj7a31aA-IwcRcL0ua",
	    "ms": "_2xyT54DQP62zWDySH7-Kdy",
	    "mt": "_1Ul_OlGODc8S0QplVq94PV",
	    "mu": "_1yIBERRJqnV33pTq2VpKRc",
	    "mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
	    "mw": "_3i8n-5-htdGNJLgn96O21",
	    "mx": "_16-6zoyiVzSGB1O72cUTzV",
	    "my": "_3W2P0D9eTN4BQoOcThOsaM",
	    "mz": "wJ8icX7Asp3dSImkXOdTM",
	    "na": "_1qt_F94mybbX5kr0ArtN-Z",
	    "nc": "h82AMIuCGdKf69Hc_nM6D",
	    "ne": "_2mVa5nGsijzD93WRl8dk64",
	    "nf": "_3XQ9oUH_84SsdZLjpVRuqT",
	    "ng": "_1uyyH1GZjsEk3YpaUSmmG6",
	    "ni": "_22_3H6UeFo26o3fSavtQaX",
	    "nl": "_93asfBYgR8C7bEDucZO8l",
	    "bq": "_37A1nwIz7Z3obwUjmliw4s",
	    "no": "_2-sVmkWiLn_ogTikc0c0Eg",
	    "np": "_1PqZSwf5cuMNmbE7bpKe67",
	    "nr": "_9q5Rg9Xn0G2buivFSGySP",
	    "nu": "RLhVdyjL9Cex8ekaJqirU",
	    "nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
	    "om": "_9mZYNhgBLiQg-j1FeVprJ",
	    "pa": "_3S7TrzxJIEYVghUMVHB6E7",
	    "pe": "_3V5sP7VvdGOFqApj7POYl2",
	    "pf": "_1YzdrkyHO-eCcEFF-hjZl7",
	    "pg": "ddWAanlQJPlB0QDWO6dAF",
	    "ph": "_2TGbmCcqHlJFCssz78MxOs",
	    "pk": "_2JerTABYGCUN8FLjpnDzKy",
	    "pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
	    "pm": "_29Hoo7EsoSHtvRFvlVg2cD",
	    "pr": "_3_pkwz60KLoYcbKwaRvIsS",
	    "ps": "_3jenITZ_yUYS7kU1HwFEHj",
	    "pt": "_1vz8ABWy5Yd43_JhaTWq9u",
	    "pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
	    "py": "_1_W41pJLcGMRhLdU997clv",
	    "qa": "Z0tjAakoNSOs14KuenmRi",
	    "re": "_3k5KF4jzE7HUitQw9MQKnp",
	    "ro": "_2b8XhT3-7NgjAC8gJJkpis",
	    "rs": "_2MUJr9MQbiKRTd_g0TaRQr",
	    "ru": "HjzPW2CxxNMSGZw1ugFW7",
	    "rw": "_23TGIOoPmB9QYqIPG6W3tA",
	    "sa": "_34WM8rSonfayW0vJ3koqJS",
	    "sb": "_3486rZNsCjvTmIoHbjK8mG",
	    "sc": "_3meAM_iQCU6MyfPQJTN3yl",
	    "sd": "_2x6XeHNF__4s9VVfFXCJhO",
	    "se": "_66VDclGQXxpdUR8uE3ZFa",
	    "sg": "tv3I_hfLcUJ_8i9ewVcUz",
	    "sh": "_1syDbbhbumwMwwD7Dwkb1V",
	    "si": "_3jsffwJjGr2sMEofSTTGkG",
	    "sk": "_1EpYAUcQLCqbYB48Auixqb",
	    "sl": "_3STJQv9nY5mol4cW82D2ci",
	    "sm": "_9aTR-AZMTaYHRmDVAyFTM",
	    "sn": "_3mTatYTWeJQQACfV7xzRhi",
	    "so": "_1LnWon2slwLMqAHzhkRT4c",
	    "sr": "_1GSedFwSsf5isgOi3p0x6U",
	    "ss": "_1sq99LOjKKgery3luOXOFn",
	    "st": "_1O6vYx_NaXFBAs1qYxgwaB",
	    "sv": "_10D9RGnRzUv14bYWQaC23c",
	    "sx": "KonDEEzH2JzIWsVUBzFdY",
	    "sy": "_1ZAnqGYeixOJVFwwt6hNIo",
	    "sz": "_3FeOFkec3sXYbvQhWDdIM7",
	    "tc": "_1FZvldKEV-vz12TyyNfEf",
	    "td": "_31fysfDRtTWVKcX_UjX0ty",
	    "tg": "H60Kyr6MsF6nvRz5l7EfN",
	    "th": "SHZkbUz1c_H_zDOfxLc4",
	    "tj": "_2MRI0fA4OLgepXVooYMu9H",
	    "tk": "_1W959S9LHLCKhz3xi4MpHe",
	    "tl": "_1lMF_0nwQXTyBRRzRj7hBF",
	    "tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
	    "tn": "_2MeGi_bqLVuCaRtJzs3QqA",
	    "to": "_3egwC_50WENVPaap_uwXr8",
	    "tr": "_2KiPy3o6m7JCKQWPY2fI1d",
	    "tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
	    "tv": "_2D9VWSmHkhgNemAaIKF_cp",
	    "tw": "_2J7nVAh1zEa7kV5Ba51CLV",
	    "tz": "_2acF96LLqMjlbfMX1oiAjT",
	    "ua": "_2rr3Tyr8dP6vDvE0khEDKT",
	    "ug": "D7gjzKmlr78rNWXXw90np",
	    "us": "_1l5RtWI_acgLVeCd5fjgHG",
	    "uy": "_1zX6hTsIa2TtL6dgR47eQ9",
	    "uz": "_29NUL3VtwK1_RWUyPsY2ei",
	    "va": "_39kTgRBkhqqGVLUTJvK_67",
	    "vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
	    "ve": "_3Lk2Svkm2NTAVpUfiY_No5",
	    "vg": "_3SiYuGrNzW9DNkXwTZugyj",
	    "vi": "_2BiiERObu5xcE6P1SZxLdj",
	    "vn": "_3kSg6iW0KLoUpJ0g70fckK",
	    "vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
	    "wf": "Arz0xEqJcbKbLmPz_tXTS",
	    "ws": "_3oTaxcmbTriEd90-cXNqD8",
	    "ye": "gxtmCiQO2ao4JTQXuRUIJ",
	    "za": "_25HyrYKmQQAteF_LwADnIt",
	    "zm": "Kui2u7hZHcNBqlzbqR-vQ",
	    "zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
	    "hide": "_2kO_U0LXcg71jJA6RSia2e",
	    "v-hide": "_2HBc009zwTsSlkh8P8tH10",
	    "invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
	    "flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
	    "open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
	    "selected-flag": "_10c169vRt8V92_nQ_S0KtR",
	    "flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
	    "arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
	    "up": "_2ykRnfq4f2nlmZGfvzrn92",
	    "country-list": "UlTusogWL2urjgGgLNpcD",
	    "divider": "_2zMaTbM3nSdE07wOs7YYRt",
	    "country": "uL848pHFWhb_G94Ak-KX5",
	    "dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
	    "highlight": "BLa_2aA2PkYD2PsO2fvNC",
	    "country-name": "_3ih_ovRiGmAkpjxuz63nhk",
	    "uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
	    "fileUpload": "_2WENukerx3mNXkTyu0UXQf",
	    "uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
	    "upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
	    "blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
	    "feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
	    "errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
	    "gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
	    "red": "_3wj0AXV9gqX9YG1nk-2u9J",
	    "green": "_3KPVxc3su8ewtuKZgu8TGv",
	    "orange": "_3cLlE5QI9XJwY6e7jO5bLg",
	    "capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
	    "importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
	    "importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
	    "importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
	    "icon": "_12rnwIUewKT2PdtWMnNyD5",
	    "importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
	    "broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
	    "broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
	    "btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
	    "textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
	    "spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
	    "pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
	    "lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
	    "removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
	    "inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
	    "popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
	    "dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
	    "dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
	    "applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
	    "filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
	    "btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
	    "assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
	    "pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
	    "assTab": "y4LW63OuadI0JWTQBnbJ1",
	    "heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
	    "radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
	    "wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
	    "leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
	    "rightBox": "DP21PoKxwKk_vJyOuQTcr",
	    "gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
	    "actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
	    "gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
	    "actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
	    "gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
	    "morePref": "JBm94eKPIFI8vfiroATJ6",
	    "tile": "_1Ssp2zTovh7AwJWuRkgnge",
	    "tileItems": "_3cDqgy8AedDYzhy8Euosis",
	    "tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
	    "tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
	    "category": "_2Ow56TBY2Y24yY5SjVRU4l",
	    "innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
	    "maxScore": "_3uL97t2vemfuAs83cAFhjE",
	    "maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
	    "scored": "_12gGWK_s69JBGzOAX7ClkT",
	    "scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
	    "remTile": "_3vgBsvWRGVVRwIEDn1TquO",
	    "tileBody": "dF1WC_PeNjG87K2XGMIcS",
	    "tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
	    "gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
	    "gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
	    "assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
	    "blue": "K7acjAQMroOGGtUqqojYy",
	    "yellow": "G7N-PGOIbGO_ZkaqBu2mx",
	    "txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
	    "txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
	    "txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
	    "txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
	    "txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
	    "txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
	    "addTile": "lCw_kxhsAPcuM3yFAqvpF",
	    "addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
	    "addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
	    "commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
	    "totalScore": "FDG4LAia-7JDDtxb7R4Kb",
	    "totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
	    "textBox": "_13VdIFmMegxz_eR8VIXN_M",
	    "totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
	    "totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
	    "resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
	    "resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
	    "resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
	    "headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
	    "scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
	    "resultBody": "N6kKlySaRGbRcB4bBmpZ0",
	    "resGroup": "_2byM-_1N3yjHb2dpmlikdf",
	    "resTile": "DZeuj4DKkdAPKCgYd76RK",
	    "resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
	    "resRating": "R7j9mxFZmdmLgC7bPXpyN",
	    "txtSize": "_977ldMQMMiHQ0YG_61T3g",
	    "txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
	    "resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
	    "resInput": "_14gsxA36f-uYOfxGDvr_gi",
	    "activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
	    "feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
	    "fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
	    "feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
	    "profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
	    "profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
	    "profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
	    "name": "_25-6SxUiv8zhOMEVTRrg8w",
	    "commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
	    "addpdng": "_6rQH8tivz8ELIWszpbahs",
	    "good": "_3lOxcxDfxhPcuhLBJHo4Ur",
	    "vGood": "l_IAfocpDxfvpU316U0EI",
	    "fair": "_3I3YapUnBVxgs-ZsGf3Poh",
	    "poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _Admin = {
	    "form-control": "_3f5Ek_BxZWp4TgAvO9iMgx",
	    "progressLabel": "_3-0689LiR7tz_vbtEfR1IJ",
	    "progress": "_32kzRKjl47M7AcFAivyyho",
	    "progressBar": "_2tVD6KALTWwOtUWFBlQDYS",
	    "progressBox": "_2Qr6h8u0j6wWBgfM9ImZaH",
	    "backButton": "_1mSyVAqBsfEZTzTQCfa3-K",
	    "containerRight": "_3tnvGMV_GO0AC00W0gw2hh",
	    "googleContainer": "_1G8DyX--1Xskim3uSHbxil",
	    "googleContainer1": "_1ZjsrGjPe95kiwJYTjPkf3",
	    "googleContainer2": "_1Mz0pDpSBEwdM2zIV6C6fv",
	    "header": "_2xHja59x-eRkfv95koY1ce",
	    "hdingTxt": "_2vmmaaBm31MpdA6XdlLb-a",
	    "body": "_1wybmROxdPMB2DSkLyTGGx",
	    "navRight": "_2fWAne55trxpJYagJCezpL",
	    "navHorizontal": "_1A7tvkxk7I_j5nNLuqefTL",
	    "active": "_1mqL1x9MCLjw6_Ok5T24oF",
	    "midContainer": "_1oKiSeTflL6v2wZC13o7oC",
	    "formField": "P8wcycRRhQUOqnf0qytj0",
	    "profilePic": "_3aRF_0HyetnxrqWGcm1aLi",
	    "fullname": "m8-V01m5JYGd00wGYRCbo",
	    "position": "aCZ3mMjMPWmB1Xr4poVi_",
	    "txtContainer": "_3ClFeWgw-L5WuuBj8HkrvF",
	    "plagiarism": "_1AZ5VzYP5cYxVevuaI0oMO",
	    "inlineEditGroup": "_2N66DG2rQQKSPETQ6mawRj",
	    "inlineEdit": "_3DdeSJlCLh_AOUeDMiLm78",
	    "inlineEditEnable": "_3Zaq8ayjsOGjyHa2auG-U5",
	    "inlineEditGroupFlex": "BXy72cn-LPpnSIiPDnhAb",
	    "labelResultFlex": "rAVOuVWP50uwFnw-Oe-bE",
	    "viewImgFtrAction": "_2_Bz03CKxQfK-0BvdyYC8s",
	    "avatarImgupload": "nUprwkNIeC7RawCr8CXF4",
	    "avatarImgView": "jkHB80N7bfBf9N_0v88Dn",
	    "imgCrop": "_1yk06rwIipstCWo7DqY-Ws",
	    "avatarPhoto": "_1IASy4Ccwsc1Hlx8k4RQe2",
	    "profileAvatarPhoto": "_1udreMpjAE8aoD8Mr1WDPX",
	    "avatar-edit": "_9jMINRNIvMojA4-7ToTgA",
	    "avatarEdit": "_1P3t9fZCx_BDEh54G9VMgl",
	    "whiteCard": "_3nWLSHJLAYRQXSGi-S7-vX",
	    "whiteTile": "KCFNekbG6kNm7QCCmxcOC",
	    "customCanvas": "w29HZnYIY9DcdSxgGf9Fb",
	    "mobHr": "_2Uz1BxUe1xQyjJolIb8Mb7",
	    "infoTxt": "_2wQRugv9iTG-hhDdVuitIF",
	    "headerActionBlock": "_51GdvsLiRoxKfOP3MoGkM",
	    "headerTxt": "_1W4z8e13TJHcZmz5Ehbd-4",
	    "headerAction": "_1zobKkXfrcR7sMxBy5FmWe",
	    "actionBtnGroup": "X1rvYjQ0-Eqdn5OzP4KYI",
	    "headingBlock": "Hq2BSnJ5sBVw7PFqVs_NC",
	    "headingTxt": "IA7VynD7jO_xLZWz7aACg",
	    "userListGroup": "_2Ph1IkZvWiWem8t4CFkNm3",
	    "userAction": "_3WwIl6WKXGAOaK4TyzOKBf",
	    "userAction1": "_3s7onQjF7EP4cHRisLd3Mg",
	    "userAction2": "_3bGxsnSHuTWpNqSqi5jTtw",
	    "searchUsersListBlock": "_3H7ves2vQHYlcaRZjP6_lz",
	    "searchUsersListGroup": "_3lhIsnjhJIPWnX1NLu1FHR",
	    "searchBox": "_79ROL_K6mHBW5o2LSPYyD",
	    "whiteSearch": "_4QtoweRYn8fpMnZENdnnf",
	    "whiteIconSearch": "_8753oABxDX3rcNGmogytj",
	    "chartBlockCust": "_3OFhY2qrOgAV6bnfH5xA89",
	    "chartBlock": "_1N5hAom0NINnkAkgO0pUTQ",
	    "whiteSearchIcon": "_26bBhlXLANk52ms5a6VjEK",
	    "whiteIconText": "_2PMNPb1XU5-9DfgCXv6Rvz",
	    "whiteSearchSubmit": "X0b5oWXuK3cmvic_4QADO",
	    "userChecked": "_2Ri43PGbT_X9Hbhtxok5Ul",
	    "modInvitation": "_3XnYK47C6zCKGiEimfJNgq",
	    "invitationInfoBlock": "_3tRIQM3GobtsNmRdSzJiL8",
	    "brdrBtm": "_3LAMx5QbZVHureehjLL4Uo",
	    "imgBox": "_1XfnRYUr9pBKPOkxUFFX9f",
	    "fadeOutBlock": "BqKSWhdDuwTWAv1DHA7BU",
	    "checkCircle": "QSuL4Yo2KoUnXG-jx-Sa8",
	    "fadeOutBlockVisible": "_13D0mm_Hk7KYLaykKBevZz",
	    "inviteBlockTxt": "_1MRUsIlHELLDg4HUqftFKz",
	    "accessCode": "_2A1xO-c_Nzf9HroP_rOatO",
	    "accessCodeBox": "Qdmv4DR-xmH2sAv32gXXC",
	    "roomLink": "_3GAUEPkkabqWlcSfevhUau",
	    "multipleValInput": "_22Sz8_7dvrmB4KCI7kdRjM",
	    "inputHidden": "_3nKfZeEqzQufGuxDQsbVY-",
	    "gropListInfoBlock": "_NvEQdPKcGY20g4fSMurk",
	    "gropListInfoHeader": "_3x4LSw28PrhROipsZFRSLx",
	    "gropListInfoBody": "_1mcNp9TzwryfTaq6sSYfJ_",
	    "gropListInfoHeadingTxt": "_30GxtoXa1jkUjd1hz6xFdo",
	    "gropListName": "_2Eg6V7gwwk_gtkw6vvfNhx",
	    "groupListActionBlock": "_3NgOcbt39p_JI7nWKOUj9v",
	    "groupUsersList": "_3BNBtwGgubE1dGc3EPNM1I",
	    "avatarBox": "_7FV9BuwcMLtNbsCjWfZJw",
	    "avatarNameBlock": "_2cP80vK5OntyL4CAozp8QS",
	    "removeGroupUser": "_3Ar4MBI4-jdPw-yj6GUSs-",
	    "locationBlock": "_3mytHS_Ee_AtswYlQfMNJg",
	    "locationContainer": "GqFlk81qWkoM8pg8rM9mT",
	    "locationHeader": "mgZJ5PYIcU3xilagy40bF",
	    "deleteLocation": "_2y7ZZz5HDKl47nPZW5uv3D",
	    "locationBody": "_9tu9wEbJADVdffughhYgF",
	    "remove": "_2qTNEmDNBxEEHjfsZx6jUU",
	    "viewUserCurser": "CZheuAXrjNPRHRcbOQzSP",
	    "studentListBlock": "_1F103jVt16fCcfwQJuE2A8",
	    "addStudentsBlock": "s_BF417lLX83dLjUOk9Qj",
	    "removeIcon": "_39I8WxiFCBLNvr-skjcvJ9",
	    "studentblock": "_1npAxnK_u_EjOeG19x_gPa",
	    "studentListGroup": "_34y4x8qUqmoZtAAds5qqkz",
	    "participantsGroup": "_1WE6rhw-vc9NjeF5qmA-Mm",
	    "tablestyle": "NFm0ne64_mxmk9G4Rk6SG",
	    "tdStyle": "_3Anaxi4FYG9zJvL03elgEQ",
	    "thStyle": "_253KYsN6UeeVvx_kTT0FTG",
	    "hidetext": "_2Qz2riUa6vlhNSOMLl6wKv",
	    "removeStyle": "XmJHLhTym-EGI-3dZGbWc",
	    "attendenceBlockControl": "_2fYKK_Pr-_FnpTp0vDy7ws",
	    "highcharts-container": "g_tYqwkdBltv3zyfc0fjB",
	    "highcharts-3d-chart": "_3bXmxuc9uwXkpYG1sI7Wy4",
	    "lineHight32": "_39uMY54CvPnF20Hpq0ebgE",
	    "lineHight31": "_2Cr1PrXQc0tqvsLRtwEVFc",
	    "removePdng": "j5wasHyxigllgK3-KBNZp",
	    "endDateWidth": "K1BBDRJALUo1UDGm0zfBJ",
	    "dateControls": "_2oEC52PpxbN1YKwQLMvvZM",
	    "dateRange": "_1nsQZIi6oLo2RRnHcRUDH0",
	    "applyBtn": "IVfAmjUj2J2xaGMBT-9QG",
	    "filterTxt": "bSDHN9CU6ghjIR5JT1vS9",
	    "gPlusBtn": "_1fkNizbuffPOMlUBeF0C8K",
	    "facebookBtn": "_33LFFuv2b50fQxMUzgYLBM",
	    "btnBothfg1": "_2S2xLvR5Z4mId-yZY1j4Ka",
	    "btnBothfg2": "YF5WdJw31ZN1ZFt_oVbps",
	    "fbConnectProfile": "a4olE1Yr7WBxvPlCBP0n8",
	    "fbDisonnectProfile": "_3GeLpMYgDKHgEN2rHWC_1g",
	    "googleDisonnect": "_2-uwB5pqA-eF07BCD1_PqM",
	    "inLine": "_3SKSHSNT9quu0AEumeGTQT",
	    "inputGrade": "_2Q0ilim6NermuOEyggbVkC",
	    "flexContainer": "_3ELNW3V19Qpndrzsv3951F",
	    "actionRightAbs": "_1uuENocETyaOc2rRiwior5",
	    "closebtn": "_2GrTt3NBt2HkOlxHF614-3",
	    "editClosebtn": "wpV9V72-_ceslWX8JrnXB",
	    "first": "_35E4iHqMVJmbMgmzKL6Tv5",
	    "headerAdustPd": "_1nESRK-sNAUHFBu6EMERMb",
	    "flexItem": "_1Etv1bivyDOzFLsR_AlRIQ",
	    "formH5": "_23XBDJVodLOklMKND6BFwz",
	    "qgHeader": "_1Ej_TSxD1VVsqaZ5rYaG5h",
	    "editableFormControl": "_3nZKmtH-W0zw2UmsaMTJxW",
	    "formControl": "_1Zgt_J9y7nqfvWRWytzMeh",
	    "blockSaveAssign": "_1sRncd5eVV30oP77Pn6fxy",
	    "blockSaveAssign2": "_2POtXxR94UQpnt45GkLCfg",
	    "btnSaveAssign": "_3sgMh3C_xwBY-m57xQa2f9",
	    "btnSaveAssign2": "jpgtw2yKEH9RfINfX88pH",
	    "blockSaveGrade": "GGQLK2P_KDJIBUiwtLjaw",
	    "btnCancelGrade": "W4YNgM2XN5hkyETaGhUR2",
	    "btnSaveGrade": "_2eyI7soEd7DxGFD3-4GQku",
	    "btnAddGrade": "_1K2WOpGhk_Q4IoS2ZUf8hf",
	    "blockAddGrade": "_1O-zGuXiXgnw-U1l38HqxQ",
	    "btnAllCancel": "_23SiDDtLT1pT26oIsV4Tfd",
	    "btnApplyAll": "_17I5QbiC31ZqoS-j8ioPIc",
	    "inputGroupManage": "keJXfy3O3ZSv-n0JMFAfx",
	    "diconnectFbIcon": "_2Us20v8WA8mrpggJ6QnkKk",
	    "gIcong": "_104bXiLSEBaJt6qZ1uVqlO",
	    "gTextg": "_1SEMPATJm2_wne7kQlcG10",
	    "gmailIconConnect": "_3YCjXf4NX2ZJi8O1tUA7Ub",
	    "errorSaveAssign": "_1Cs3UFa1oi8pL2tQ-yOM-m",
	    "mainSaveAssign": "_2fP5quvRifvwxDNbx7L6X9",
	    "rowBottom": "_1kntlbOJwAJUcePEvL_kF8",
	    "seprator": "_2UGm2z7pTnp444hmFIFOIp",
	    "checkAssignQues": "_2iZMx3rWcQHdK7gzZAk6W1",
	    "inputAllCap": "_3b5YN89TYavUWP0IUCpP4J",
	    "localHeadMain": "_3RG8HTuYYDkFftvW6DqXY0",
	    "localHeadBlock": "_30XFANlOzaJYlY3_t5ho8U",
	    "nameheadProfile": "pt9XSChA3KBzQoKyGuVhU",
	    "allLabelInApp": "GpVwJxC7AGu9zLNGFoW87",
	    "proPicEdit": "_2TyVz7TK4Od13iZrubrZla",
	    "popHeadingAll": "_26LFoD0SOoue-56tKApy1J",
	    "textCapAll": "dmP3hNbZiWb10oxof-KKb",
	    "stuReportsOne": "_3AhyOrylvMZicPK7bHodXL",
	    "stuReportsTwo": "_3T0910-J2oReRdy8ZxNZiB",
	    "topicNameReport": "_1XpYjQcqHsjOXXvgjsWdX5",
	    "emailTransCap": "_1jX1RtADJ5IvrJd3Wtpyh_",
	    "txtDetailContent": "_1j9Ns7mzyM42Nmll1uh1He",
	    "addStudPop1": "_1QsP-l51F-3uG7QXomAW0P",
	    "addStudPop2": "pJUMNDAuP9bGHel-6ESf",
	    "addStudInput": "_1d7y3JxPS4_K3b3aRquCU2",
	    "addStudText": "bfDwzSKIRHVbJQpazT_Il",
	    "changePassInner": "_1jDrP6USHJgwHuHx84G6vW",
	    "fdInfoBlock": "_2gANItlTdO-wHoINbI1-T",
	    "fdInfo": "jkgczk2IOaooUA2sdYQcY",
	    "fdName": "_1GOg26hVpb9pUXFN9I9y75",
	    "fdListBlock": "Dyl11NUfA-U4x7uR32_nE",
	    "fdQues": "_2YaCGTu2m7P2XdqDPQiRwz",
	    "fdAns": "_25xB1C18_oF2MVuf5cn3zq",
	    "errorJoinConf": "_2FeZW5vDq4l2uCwYqTPhHN",
	    "qleditor": "_17N2ULf7_DBC-wvog56baS",
	    "txtCenter": "_--WLGzdyVj5fD3vNr-Zkv",
	    "addpdng": "_3c2v0Duo7UJRMD8C9viMiX",
	    "progress-bar": "A2ftBZ69PzksWTqo3GY0k",
	    "formInputBox": "_2iVSgkRQ2H-sx7DVceswIC",
	    "mainSpinBlock": "_3CZ3lYofgnCvue7BeOTlIz",
	    "innerSpinBlock": "_3m-KZNJLa-KBy4_GVdiO01",
	    "loginContainerBoth": "_2cFyrrDIIB0AnjCLMjCEcB"
	};
	
	var _Admin2 = _interopRequireDefault(_Admin);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
	    id: 'submit'
	});
	
	var _ref2 = _jsx('h2', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
	    id: 'enter_schedule_password'
	}));
	
	var _ref3 = _jsx('img', {
	    src: '/images/black-icons/black-lock.png'
	});
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
	    id: 'conference_access'
	});
	
	var _ref5 = _jsx(_reactIntl.FormattedMessage, {
	    id: 'cancel'
	});
	
	var SchedulePassword = exports.SchedulePassword = function (_Component) {
	    _inherits(SchedulePassword, _Component);
	
	    function SchedulePassword(props) {
	        _classCallCheck(this, SchedulePassword);
	
	        var _this = _possibleConstructorReturn(this, (SchedulePassword.__proto__ || Object.getPrototypeOf(SchedulePassword)).call(this, props));
	
	        _this.handlePasswordChange = function (e) {
	            if (e.target.value == '') {
	                _this.setState({
	                    error: '',
	                    password: ''
	                });
	            } else {
	                _this.setState({ password: e.target.value });
	            }
	        };
	
	        _this.handlePasswordEnterKey = function (e) {
	            if (e.key === 'Enter') {
	                _this.handleSave(e);
	            }
	        };
	
	        _this.handleSave = function (e) {
	            e.preventDefault();
	            var obj = {
	                password: _this.state.password,
	                scheduleId: _this.props.scheduleId
	            };
	            if (obj.password && obj.password != "") {
	                (0, _apiCaller2.default)('validate-schedule-password', 'post', { data: obj }).then(function (res) {
	                    if (res.status) {
	                        // if password sucess authenticate conference                   
	                        _this.props.callback();
	                        // this.props.closeHost();
	                    } else {
	                        _this.setState({ error: res.error });
	                    }
	                });
	            } else {
	                _this.setState({ error: _this.props.intl.messages.please_enter_schedule_password });
	            }
	        };
	
	        _this.cls_btnSaveEdit = 'btn btn-success btn-icon btn-sm';
	        _this.state = {
	            error: '',
	            password: ''
	        };
	        return _this;
	    }
	
	    _createClass(SchedulePassword, [{
	        key: 'closeModal',
	        value: function closeModal() {
	            this.setState({
	                error: '',
	                password: ''
	            });
	            if (this.props.guest) alertify.error('Please Join Conference again using same link');
	            _reactRouter.browserHistory.push('/');
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var bodyData = null;
	            var buttonLabel = null;
	
	            buttonLabel = _ref;
	            bodyData = _jsx('div', {
	                className: _ConfSettings2.default.setConfPassword
	            }, void 0, _ref2, _jsx('div', {
	                className: _ConfSettings2.default.iconBlock
	            }, void 0, _ref3), _jsx('div', {
	                className: _ConfSettings2.default.passWordBlock
	            }, void 0, _jsx('input', {
	                id: 'password',
	                type: 'password',
	                name: 'password',
	                value: this.state.password,
	                onChange: this.handlePasswordChange,
	                autoFocus: 'autofocus',
	                maxLength: 15,
	                onKeyPress: this.handlePasswordEnterKey
	            })));
	            return _jsx(_reactBootstrap.Modal, {
	                show: this.props.showModal,
	                onHide: this.closeModal.bind(this)
	            }, void 0, _jsx(_Modal.Header, {
	                closeButton: true
	            }, void 0, _jsx(_Modal.Title, {
	                className: _ConfSettings2.default.popHeadingAll
	            }, void 0, _ref4)), _jsx('form', {
	                onSubmit: this.handleSave.bind(this)
	            }, void 0, _jsx(_Modal.Body, {}, void 0, bodyData), _jsx(_Modal.Footer, {}, void 0, _jsx('div', {
	                className: _Admin2.default.errorJoinConf
	            }, void 0, _jsx('label', {}, void 0, this.state.error)), _jsx('div', {
	                className: _Admin2.default.blockSaveAssign
	            }, void 0, _jsx('button', {
	                id: 'cancel',
	                onClick: this.closeModal.bind(this)
	            }, void 0, _ref5), _jsx('button', {
	                id: 'submitPassword',
	                type: 'submit',
	                className: _Admin2.default.btnSaveAssign
	            }, void 0, buttonLabel)))));
	        }
	    }]);
	
	    return SchedulePassword;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	    return {
	        intl: state.intl
	    };
	}
	
	SchedulePassword.contextTypes = {
	    router: _react2.default.PropTypes.object,
	    intl: _react2.default.PropTypes.object.isRequired
	};
	
	SchedulePassword.defaultProps = { showModal: false };
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(SchedulePassword);

/***/ },

/***/ 503:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _roles = __webpack_require__(46);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _PdfView = __webpack_require__(425);
	
	var _PdfView2 = _interopRequireDefault(_PdfView);
	
	var _reactRedux = __webpack_require__(16);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _LoginReducer = __webpack_require__(20);
	
	var _Loading = __webpack_require__(142);
	
	var _Loading2 = _interopRequireDefault(_Loading);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
		id: 'share_your_screen_document'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
		id: 'requested_for_share_document_please_wait'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
		id: 'request_for_share_document'
	});
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
		id: 'share_your_screen_document'
	});
	
	var _ref5 = _jsx(_reactIntl.FormattedMessage, {
		id: 'requested_for_share_document_please_wait'
	});
	
	var _ref6 = _jsx(_reactIntl.FormattedMessage, {
		id: 'become_a_host'
	});
	
	var _ref7 = _jsx(_reactIntl.FormattedMessage, {
		id: 'request_access_share'
	});
	
	var _ref8 = _jsx(_reactIntl.FormattedMessage, {
		id: 'become_host_to_access_bellow_features'
	});
	
	var _ref9 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'share_your_screen'
	}));
	
	var _ref10 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'share_your_document'
	}));
	
	var _ref11 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'share_your_document'
	}));
	
	var _ref12 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'share_your_document'
	}));
	
	var _ref13 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'share_your_document'
	}));
	
	var _ref14 = _jsx('img', {
		src: '/images/icons/doc.png'
	});
	
	var _ref15 = _jsx('img', {
		src: '/images/icons/docx.png'
	});
	
	var _ref16 = _jsx('img', {
		src: '/images/icons/ppt.png'
	});
	
	var _ref17 = _jsx('img', {
		src: '/images/icons/pdf.png'
	});
	
	var _ref18 = _jsx('img', {
		src: '/images/black-icons/delete-black.png'
	});
	
	var _ref19 = _jsx('img', {
		src: '/images/black-icons/delete-box-black.png'
	});
	
	var _ref20 = _jsx(_reactIntl.FormattedMessage, {
		id: 'note'
	});
	
	var _ref21 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'share_file_alert'
	}));
	
	var _ref22 = _jsx(_Loading2.default, {});
	
	var ScreenShare = function (_Component) {
		_inherits(ScreenShare, _Component);
	
		function ScreenShare(props) {
			_classCallCheck(this, ScreenShare);
	
			var _this = _possibleConstructorReturn(this, (ScreenShare.__proto__ || Object.getPrototypeOf(ScreenShare)).call(this, props));
	
			_this.handleUpload = function (e) {
				_this.setState({ showBecomeHost: false });
				//console.log(e.target)
				var reader = new FileReader();
				var file = e.target.files[0];
				if (!file) {
					return;
				} else if (file.size > 10485760) {
					alertify.alert(_this.props.intl.messages.warning, _this.props.intl.messages.share_file_alert, function () {}).setting({ 'label': _this.props.intl.messages.ok });
					return;
				} else if (file.type.substring(0, file.type.indexOf("/")) != 'application') {
					alertify.alert(_this.props.intl.messages.warning, _this.props.intl.messages.invalid_file_format, function () {}).setting({ 'label': _this.props.intl.messages.ok });
					return;
				}
				//console.log(file)
				reader.onload = function (img) {
					//console.log(img)
					var dataURI = img.target.result;
					//console.log('dataURI')
					this.imageData["file"] = dataURI.split(',')[1];
					this.imageData["fileName"] = file.name;
					this.imageData["fileSize"] = file.size;
					// console.log(file.type)
					if (file.type == 'application/zip') {
						this.imageData["fileType"] = 'zip';
					} else {
						this.imageData["fileType"] = file.type.substring(0, file.type.indexOf("/"));
					}
					var data = this.imageData;
					this.saveFile(data);
				}.bind(_this);
				reader.readAsDataURL(file);
			};
	
			_this.highlightBecomHost = function () {
				/*console.log("highlightBecomHost");*/
				_this.setState({ showBecomeHost: true });
			};
	
			_this.viewfile = function () {
				_this.props.updateSS({ waitforview: false, ssPdfView: true, showButtons: false, ssUploadedby: _this.props.loggedInData.data._id, pdfFileName: _this.props.workDashboardData.fileData.fileName });
				_this.props.fileStatusCallback({ filestatus: false, fileData: null });
			};
	
			_this.abortfile = function () {
				(0, _WorkDashboardActions.closeSharedDocument)(_this.props.workDashboardData.fileData.fileName);
				_this.props.updateSS({ waitforview: false });
				_this.props.fileStatusCallback({ filestatus: false, fileData: null });
			};
	
			_this.handleShareRequest = function () {
				if (!_this.props.workDashboardData.shareRequestId && _this.props.workDashboardData.shareRequestId == "") {
					var data = _this.props.loggedInData.data;
					_this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ shareRequestId: 'REQUESTED' }));
					var obj = {
						command: 'REQ-SHARE',
						content: { id: data._id, firstname: data.firstname },
						type: 'OBJECT'
					};
					_this.confObject.requestScreenShareAccess(obj);
				}
			};
	
			_this.closePdfCallback = function (objEntity) {
				if (_this.props.imHost == true || _this.props.workDashboardData.shareRequestId != "" && _this.props.workDashboardData.shareRequestId == _this.props.workDashboardData.uid) {
					objEntity['showButtons'] = true;
					objEntity['ssNotification'] = false;
					(0, _WorkDashboardActions.closeSharedDocument)(objEntity.fileName);
					_this.syncPdfClose(objEntity);
				} else _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(objEntity));
			};
	
			_this.stopScreenShare = function () {
				console.log("stopScreenShare enter");
				_this.confObject.stopScreenShare();
			};
	
			_this.pauseScreenShare = function () {
				console.log("pauseScreenShare enter");
				// this.setState({ screenplay: false });
				_this.confObject.pauseScreenShare();
				var objEntity = {
					screenplay: false
				};
				_this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(objEntity));
			};
	
			_this.playScreenShare = function () {
				console.log("playScreenShare enter");
				// this.setState({ screenplay: true });
				_this.confObject.playScreenShare();
				var objEntity = {
					screenplay: true
				};
				_this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(objEntity));
			};
	
			_this.syncPdfClose = function (objEntity) {
				var obj = {
					command: 'SYNC-PDF-CLOSE',
					content: { data: objEntity },
					type: 'OBJECT'
				};
				_this.confObject.sendMessage(obj, 0);
			};
	
			_this.imageData = {};
			_this.state = {
				showBecomeHost: false,
				requestStatus: false,
				loading: true
				// screenplay: true
			};
			_this.confObject = new _WoogeenManager2.default();
			_this.showScreen = false;
			_this.HandleSyncPdfClose = _this.HandleSyncPdfClose.bind(_this);
			_this.confObject.SyncPdfCloseListener(_this.HandleSyncPdfClose);
			return _this;
		}
	
		_createClass(ScreenShare, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var obj = {};
				if (this.props.workDashboardData.ssPdfView == true) {
					obj = { showButtons: false };
				}
				this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
				var that = this;
				// console.log("chrome === ", chrome);
				if (typeof chrome !== "undefined") {
					try {
						chrome.runtime.sendMessage('jckdbnkecmmpemaghimijhehobdeplmd', { getStream: false }, function (response) {
							console.log("chrome response === ", response);
							if (response !== undefined) that.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ ScreenExtInstalled: true }));
						});
					} catch (error) {
						this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ ScreenExtInstalled: false }));
					}
				}
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				var that = this;
				console.log("Screen Received", nextProps.screenStream);
				if (nextProps.screenStream) {
					if (!nextProps.screenStream.showing && this.confObject.getSubscrbedStream() == null) {
						this.confObject.trySubscribeStream(nextProps.screenStream, function (stream) {
							// console.log("Screen try to show");
							that.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ showButtons: false }));
							stream.show('screen');
							that.confObject.setSubscribedScreen(stream);
							that.showScreen = true;
						});
					} else {
						if (!this.showScreen) {
							if (this.confObject.getSubscrbedStream() != null) {
								this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ showButtons: false }));
								this.confObject.getSubscrbedStream().show('screen');
								this.showScreen = true;
							}
						}
					}
				}
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				if (this.confObject.getSubscrbedStream() != null) {
					this.confObject.getSubscrbedStream().hide();
					this.showScreen = false;
				}
			}
		}, {
			key: 'shareScreen',
			value: function shareScreen() {
				if (this.props.imHost || this.props.workDashboardData.shareRequestId && this.props.workDashboardData.shareRequestId != "" && this.props.workDashboardData.shareRequestId == this.props.workDashboardData.uid) {
					if (!this.props.workDashboardData.ScreenExtInstalled && typeof chrome !== "undefined") {
						var that = this;
						try {
							chrome.webstore.install('https://chrome.google.com/webstore/detail/jckdbnkecmmpemaghimijhehobdeplmd', function (e) {
								that.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ ScreenExtInstalled: true }));
								that.confObject.screenShare(function (stats) {
									that.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ showButtons: false, selfShare: true }));
								}, function (status) {});
							}, function (e) {
								window.open('https://chrome.google.com/webstore/detail/instavc-desktop-sharing-e/jckdbnkecmmpemaghimijhehobdeplmd', '_blank' // <- This is what makes it open in a new window.
								);
								console.log(e);
							});
						} catch (error) {}
					} else {
						var _that = this;
						this.confObject.screenShare(function (stats) {
							_that.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ showButtons: false, selfShare: true }));
						}, function (status) {});
					}
				} else {
					this.highlightBecomHost();
				}
			}
		}, {
			key: 'saveFile',
			value: function saveFile(obj) {
				if (this.props.workDashboardData.waitforview != true) {
					this.props.updateSS({ waitforview: true });
					this.setState({ loading: false });
					var data = obj;
					var url = "/api/upload-sharing-document";
					var self = this;
					FileAPI.upload({
						data: data,
						url: url,
						complete: function complete(err, res) {
							self.setState({ loading: true });
	
							//console.log(err)
							// console.log(data, err);
							if (err) {
								console.log("err---", err);
								self.props.fileStatusCallback({ filestatus: false });
								self.props.updateSS({ waitforview: false });
								alertify.alert("Error", err, function (result) {});
							} else {
								var _data = JSON.parse(res.response);
								if (_data && _data.status && _data.data) {
									var resData = _data.data;
									delete resData['status'];
									/*callApi('convert-to-pdf', 'post', { data : resData }).then(res => {
	        	if (res.status) {
	        		self.props.fileStatusCallback({filestatus: 'completed'});
	        	} else {
	        		console.log("res.error === ", res.error);
	        		self.props.fileStatusCallback({filestatus: false, fileData: null});
	        		self.props.updateSS({ waitforview : false });
	        		alertify.alert("Error", res.error, function (result) { } );
	        	}
	        });
	        self.props.fileStatusCallback({filestatus : 'loading', fileData: resData});*/
									self.props.fileStatusCallback({ filestatus: 'completed', fileData: resData });
								} else if (_data.error) {
									console.log("data.error === ", _data.error);
									self.props.fileStatusCallback({ filestatus: false });
									self.props.updateSS({ waitforview: false });
									alertify.alert("Error", _data.error, function (result) {});
								} else {
									self.props.fileStatusCallback({ filestatus: false });
									self.props.updateSS({ waitforview: false });
									alertify.alert("Error", "Internal server error", function (result) {});
								}
							}
						}
					});
				} else {
					alertify.alert("Warning", "Some one trying to share please wait...", function (result) {});
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var screenClass = _Dashboard2.default.screenShare + ' ' + _Dashboard2.default.screen;
				var cls_hide_screenshare = _Dashboard2.default.screenShareBlock + ' hidden-xs hidden-sm';
	
				if (this.props.workDashboardData.showButtons || this.props.workDashboardData.selfShare) {
					screenClass = _Dashboard2.default.hideObject + ' ' + _Dashboard2.default.screen;
				}
				var cls_becomehost = {
					color: "#d62626"
				};
	
				return _jsx('div', {
					className: _Dashboard2.default.whiteBoardContainer
				}, void 0, this.state.loading ? this.props.workDashboardData.ssPdfView && this.props.hostId != '' ? _jsx(_PdfView2.default, {
					fileName: this.props.workDashboardData.pdfFileName,
					imHost: this.props.imHost == true || this.props.workDashboardData.shareRequestId == this.props.workDashboardData.uid ? true : false,
					confObject: this.confObject,
					closeCallback: this.closePdfCallback,
					hostId: this.props.hostId
				}) : this.props.workDashboardData.showButtons ? _jsx('div', {
					className: _Dashboard2.default.centerAlign
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.msgBlock
				}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
					md: 12
				}, void 0, this.props.role == _roles.Roles.Student ? this.props.workDashboardData.shareRequestId && this.props.workDashboardData.shareRequestId != "" && this.props.workDashboardData.shareRequestId == this.props.workDashboardData.uid ? _jsx('p', {
					className: _Dashboard2.default.textHeading
				}, void 0, _ref, ' ') : this.props.workDashboardData.shareRequestId == 'REQUESTED' ? _jsx('p', {
					className: _Dashboard2.default.textHeading
				}, void 0, ' ', _ref2, ' ') : _jsx('p', {
					className: _Dashboard2.default.textHeading
				}, void 0, ' ', _ref3, _jsx('a', {
					id: 'shareDocumentRequest',
					style: this.state.showBecomeHost ? cls_becomehost : null,
					onClick: this.handleShareRequest
				}, void 0, ' Click Here'), ' ') : (this.props.role == _roles.Roles.Admin || this.props.role == _roles.Roles.Moderator || this.props.role == _roles.Roles.User) && !this.props.imHost ? this.props.workDashboardData.shareRequestId && this.props.workDashboardData.shareRequestId != "" && this.props.workDashboardData.shareRequestId == this.props.workDashboardData.uid ? _jsx('p', {
					className: _Dashboard2.default.textHeading
				}, void 0, _ref4, ' ') : this.props.workDashboardData.shareRequestId == 'REQUESTED' ? _jsx('p', {
					className: _Dashboard2.default.textHeading
				}, void 0, ' ', _ref5, ' ') : _jsx('p', {
					className: _Dashboard2.default.textHeading,
					style: this.state.showBecomeHost ? cls_becomehost : null
				}, void 0, ' ', _ref6, ' OR ', _jsx('a', {
					id: 'becomeHost',
					style: this.state.showBecomeHost ? cls_becomehost : null,
					onClick: this.handleShareRequest
				}, void 0, ' ', _ref7), ' ') : _jsx('p', {
					className: _Dashboard2.default.textHeading,
					style: this.state.showBecomeHost ? cls_becomehost : null
				}, void 0, this.props.imHost == false ? _ref8 : null))), _jsx('div', {
					className: cls_hide_screenshare
				}, void 0, _jsx('div', {
					id: 'shareYourScreen',
					className: _Dashboard2.default.screenShareBtn,
					title: this.props.intl.messages.share_your_screen,
					onClick: this.shareScreen.bind(this)
				}, void 0, _jsx('img', {
					src: '/images/white-icons/white-screen-share.png',
					title: this.props.intl.messages.share_your_screen
				})), _ref9), this.props.imHost || this.props.workDashboardData.shareRequestId && this.props.workDashboardData.shareRequestId != "" && this.props.workDashboardData.shareRequestId == this.props.workDashboardData.uid ? this.props.workDashboardData.filestatus == 'loading' || this.props.workDashboardData.filestatus == 'completed' ? _jsx('div', {
					className: _Dashboard2.default.screenShareBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.screenShareDisableBtn,
					title: this.props.intl.messages.share_your_document
				}, void 0, _jsx('img', {
					src: '/images/white-icons/white-documents-sharing.png',
					title: this.props.intl.messages.share_your_document
				})), _ref10) : this.props.workDashboardData.waitforview == true ? _jsx('div', {
					className: _Dashboard2.default.screenShareBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.screenShareDisableBtn,
					title: this.props.intl.messages.share_your_document
				}, void 0, _jsx('img', {
					src: '/images/white-icons/white-documents-sharing.png',
					title: this.props.intl.messages.share_your_document
				})), _ref11) : _jsx('div', {
					className: _Dashboard2.default.screenShareBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.screenShareBtn,
					title: this.props.intl.messages.share_your_document
				}, void 0, _jsx('input', {
					id: 'inputShareDoc',
					className: _Dashboard2.default.documentShareBtn,
					type: 'file',
					accept: '.doc, .docx, .ppt, .pptx, .pdf',
					onChange: this.handleUpload.bind(this),
					value: ''
				}), _jsx('img', {
					src: '/images/white-icons/white-documents-sharing.png',
					title: this.props.intl.messages.share_your_document
				})), _ref12) : _jsx('div', {
					className: _Dashboard2.default.screenShareBlock
				}, void 0, _jsx('div', {
					id: 'shareDocument',
					className: _Dashboard2.default.screenShareBtn,
					title: this.props.intl.messages.share_your_document,
					onClick: this.highlightBecomHost
				}, void 0, _jsx('img', {
					src: '/images/white-icons/white-documents-sharing.png',
					title: this.props.intl.messages.share_your_document
				})), _ref13), (this.props.imHost || this.props.workDashboardData.shareRequestId && this.props.workDashboardData.shareRequestId != "" && this.props.workDashboardData.shareRequestId == this.props.workDashboardData.uid) && this.props.workDashboardData.filestatus != false ? _jsx('div', {
					className: _Dashboard2.default.loadMsg
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.listBox
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconType
				}, void 0, this.props.workDashboardData.fileData.fileExt == "doc" ? _ref14 : this.props.workDashboardData.fileData.fileExt == "docx" ? _ref15 : this.props.workDashboardData.fileData.fileExt == "ppt" || this.props.workDashboardData.fileData.fileExt == "pptx" ? _ref16 : _ref17), _jsx('div', {
					className: _Dashboard2.default.fileInfo
				}, void 0, _jsx('h3', {}, void 0, this.props.workDashboardData.fileData.fileName.substring(this.props.workDashboardData.fileData.fileName.indexOf("_") + 1, this.props.workDashboardData.fileData.fileName.length)), _jsx('p', {}, void 0, _jsx('i', {}, void 0, Math.round(this.props.workDashboardData.fileData.fileSize / 1000), ' KB'))), _jsx('div', {
					className: _Dashboard2.default.actionButtons
				}, void 0, this.props.workDashboardData.filestatus == 'loading' ? _jsx('div', {
					className: _Dashboard2.default.loadIconBox
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.loadingTxt
				}, void 0, ' loading... '), _jsx('span', {
					id: 'abortFile',
					className: _Dashboard2.default.clickIcon,
					onClick: this.abortfile
				}, void 0, _ref18)) : this.props.workDashboardData.filestatus == 'completed' ? _jsx('div', {
					className: _Dashboard2.default.loadIconBox
				}, void 0, _jsx('button', {
					id: 'viewFile',
					className: _Dashboard2.default.viewBtn,
					onClick: this.viewfile
				}, void 0, 'View'), _jsx('span', {
					id: 'abortFile',
					className: _Dashboard2.default.clickIcon,
					onClick: this.abortfile
				}, void 0, _ref19)) : null))) : null, _jsx('div', {}, void 0, _jsx('span', {
					className: _Dashboard2.default.msgFileNote
				}, void 0, ' ', _ref20, ': '), _ref21))) : this.props.workDashboardData.selfShare ? _jsx('div', {
					className: _Dashboard2.default.centerAlign
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.screenShareBlock
				}, void 0, _jsx('div', {
					id: 'stopScreenShareBtn',
					className: _Dashboard2.default.screenShareBtn1,
					title: this.props.intl.messages.stop_screen_share,
					onClick: this.stopScreenShare
				}, void 0, _jsx('img', {
					src: '/images/white-icons/white-stop.png',
					title: this.props.intl.messages.stop_screen_share
				})), _jsx('p', {}, void 0)), this.props.workDashboardData.screenplay ? _jsx('div', {
					className: _Dashboard2.default.screenShareBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.screenShareBtn1,
					style: { backgroundColor: "#ff0000 !important" },
					title: this.props.intl.messages.pause_screen_share
				}, void 0, _jsx('img', {
					src: '/images/white-icons/white-pause.png',
					title: this.props.intl.messages.pause_screen_share,
					onClick: this.pauseScreenShare
				})), _jsx('p', {}, void 0)) : _jsx('div', {
					className: _Dashboard2.default.screenShareBlock
				}, void 0, _jsx('div', {
					id: 'playScreenShare',
					className: _Dashboard2.default.screenShareBtn1,
					title: this.props.intl.messages.play_screen_share
				}, void 0, _jsx('img', {
					src: '/images/white-icons/white-play.png',
					title: this.props.intl.messages.play_screen_share,
					onClick: this.playScreenShare
				})), _jsx('p', {}, void 0))) : null : _jsx('div', {
					className: _Dashboard2.default.loadScreenConf
				}, void 0, _ref22), this.props.workDashboardData.ssPdfView != true ? _jsx('div', {
					id: 'screen',
					className: screenClass
				}, void 0) : null);
			}
	
			///////////////////////////
	
		}, {
			key: 'HandleSyncPdfClose',
	
	
			////////////////////////////
			value: function HandleSyncPdfClose(obj) {
				this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
			}
		}]);
	
		return ScreenShare;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
		return {
			workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
			loggedInData: (0, _LoginReducer.loggedInData)(state),
			intl: state.intl
		};
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(ScreenShare);

/***/ },

/***/ 504:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ScrollConf = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _ImageSlider = __webpack_require__(421);
	
	var _ImageSlider2 = _interopRequireDefault(_ImageSlider);
	
	var _VideoInScroller = __webpack_require__(428);
	
	var _VideoInScroller2 = _interopRequireDefault(_VideoInScroller);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	var ScrollConf = exports.ScrollConf = function (_Component) {
	  _inherits(ScrollConf, _Component);
	
	  function ScrollConf(props) {
	    _classCallCheck(this, ScrollConf);
	
	    var _this = _possibleConstructorReturn(this, (ScrollConf.__proto__ || Object.getPrototypeOf(ScrollConf)).call(this, props));
	
	    _this.state = {
	      childLength: 0,
	      videos: []
	    };
	
	    _this.count = 0;
	    _this.videos = [];
	    _this.SyncSpeaker = _this.SyncSpeaker.bind(_this);
	
	    _this.props.confObject.SetSpeakerListener(_this.SyncSpeaker);
	    return _this;
	  }
	
	  _createClass(ScrollConf, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.streams != null) {
	        this.subscribeVideos(this.props.streams);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.confObject.hideRemoteStream();
	    }
	  }, {
	    key: 'subscribeVideo',
	    value: function subscribeVideo(stream) {
	      L.Logger.info('New stream in conference:', stream.id());
	      var that = this;
	      if (!stream.showing && stream.mediaStream == undefined && stream.from != "") {
	        this.props.confObject.trySubscribeStream(stream, function (stream) {
	          that.displayStream(stream);
	        });
	      } else {
	        console.log("Stream already subscrubed", stream);
	        if (!stream.showing && stream.from != "" && stream.mediaStream) {
	          this.displayStream(stream);
	        }
	      }
	    }
	  }, {
	    key: 'subscribeVideos',
	    value: function subscribeVideos(streams) {
	      var that = this;
	      var capIndex = 1;
	
	      /*if(this.props.onlyPresenter){
	        capIndex = 0;
	      }*/
	
	      streams.map(function (stream, index) {
	        if (index > capIndex) {
	          L.Logger.info('stream in conference:', stream.id());
	          if (!stream.showing) {
	            that.subscribeVideo(stream);
	          }
	        } else {
	          /*Its important to set this state to avoid duplicate div id and prevent the accedent 
	          removal of other parent element, when streen disconnects from socket*/
	          that.setState({ videos: [] });
	        }
	      });
	    }
	  }, {
	    key: 'displayStream',
	    value: function displayStream(stream) {
	      /*Clone is mandatory to use, since stream has been delt between two components, 
	      and there is a time gap which bring black screen during the speaker change.*/
	      var objStream = _.clone(stream);
	      var objVideo = _jsx(_VideoInScroller2.default, {
	        speaker: this.requestSpeaker.bind(this),
	        streamId: objStream.id(),
	        stream: objStream
	      }, objStream.id(), ' ');
	
	      var that = this;
	
	      /*Check the cloned objects maintain the equal count of global stream count and splice 
	      the unwanted objects from its own array.*/
	      this.videos.map(function (tmpObj, index) {
	        var exIndex = _.findIndex(that.props.streams, ['from', tmpObj.props.stream.from]);
	        if (exIndex < 0) {
	          that.videos.splice(index, 1);
	        } else if (exIndex == 1) {
	          that.videos.splice(index, 1);
	        }
	      });
	
	      /*Sometime key may duplicate, after few switch over between scroll to presenter 
	      by speaker switch, so to avaoid the key duplicate error, find if any key present, 
	      before push the object*/
	      var stIndex = _.findIndex(this.videos, ['key', objStream.id()]);
	
	      if (stIndex >= 0) {
	        this.videos[stIndex] = objVideo;
	      } else {
	        this.videos.push(objVideo);
	      }
	
	      this.setState({ videos: this.videos });
	    }
	  }, {
	    key: 'requestSpeaker',
	    value: function requestSpeaker(stream) {
	      //Message Format {type: 'IMG | TXT | VID', content: '', command: 'INDCHAT | GRPCHAT | ETC'}
	      //Request other terminals
	      var objSpeaker = {
	        command: 'SPEAKER-REQ',
	        content: { stream_from: stream.from },
	        type: 'STRING'
	      };
	
	      this.props.confObject.sendMessage(objSpeaker, 0);
	    }
	  }, {
	    key: 'setSpeaker',
	    value: function setSpeaker(stream) {
	      var defIndex = _.findIndex(this.props.streams, ['from', stream.from]);
	
	      console.log("Speaker Request", defIndex);
	
	      if (defIndex > 1) {
	        //0th place is self so skiped, 1th place is spekaer so skipped.
	        this.props.confObject.onlyPresenter(false);
	
	        var stIndex = _.findIndex(this.videos, ['key', stream.id()]);
	        stream.hide();
	
	        /*The moment the selected user set as speaker, remove him from the scroll list.*/
	        this.videos.splice(stIndex, 1);
	
	        /*So now remove current speaker from the presenter screen, 
	        so previous speaker will have space to go there.*/
	        var sp_stream = this.props.streams[1];
	        if (sp_stream.showing) {
	          var elementId = document.getElementById(sp_stream.elementId).parentElement.id;
	          sp_stream.hide();
	          document.getElementById(sp_stream.elementId).remove();
	        }
	        this.props.confObject.setSpeaker(stream);
	      } else if (defIndex == 0) {
	        //Speaker asking him self to be speaker
	        console.log('Self as speaker');
	        this.props.confObject.onlyPresenter(true);
	      } else if (defIndex == 1) {
	        //The requested stream already in speaker area.
	        this.props.confObject.onlyPresenter(false);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var cls_scrollMain = void 0;
	      if (this.props.streamCount <= 1) {
	        cls_scrollMain = _Dashboard2.default.subscirbersVideo + ' ' + _Dashboard2.default.hideObject;
	      } else {
	        cls_scrollMain = '' + _Dashboard2.default.subscirbersVideo;
	      }
	
	      return _jsx('div', {
	        className: cls_scrollMain
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.scrollImageContainer
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.galleryWrap
	      }, void 0, _jsx(_ImageSlider2.default, {
	        delay: 0,
	        visibleItems: 3,
	        length: this.props.streamCount - 1,
	        id: 'confScroller'
	      }, void 0, this.state.videos))));
	    }
	
	    //////////////////////
	
	
	  }, {
	    key: 'SyncSpeaker',
	    value: function SyncSpeaker(from, sender) {
	      if (this.props.streams) {
	        var defIndex = _.findIndex(this.props.streams, ['from', from]);
	        if (defIndex >= 0) {
	          this.setSpeaker(this.props.streams[defIndex]);
	        } else {
	          console.log("Stream un-identified", from, this.props.streams[0]);
	          //So check them in attendees list to make sure thats me (myself)
	          var attIndex = _.findIndex(this.props.attendees, ['id', from]);
	
	          if (attIndex >= 0) {
	            //Wow you found some body, but make sure thats me
	            if (this.props.attendees[attIndex].name == this.props.myid) {
	              //Wow you got it, its me.... now you do what you want
	              this.setSpeaker(this.props.streams[0]);
	            }
	          }
	        }
	      }
	    }
	
	    ////////////////////
	
	  }]);
	
	  return ScrollConf;
	}(_react.Component);
	
	exports.default = ScrollConf;

/***/ },

/***/ 505:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SelfVideo = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _ControlVideo = __webpack_require__(423);
	
	var _ControlVideo2 = _interopRequireDefault(_ControlVideo);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _StatsReducer = __webpack_require__(165);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _Layout = __webpack_require__(411);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ = __webpack_require__(7);
	
	var SelfVideo = exports.SelfVideo = function (_Component) {
	  _inherits(SelfVideo, _Component);
	
	  function SelfVideo(props) {
	    _classCallCheck(this, SelfVideo);
	
	    // console.log("Self Video Mute", props.stream);
	    var _this = _possibleConstructorReturn(this, (SelfVideo.__proto__ || Object.getPrototypeOf(SelfVideo)).call(this, props));
	
	    _this.state = {
	      showing: false,
	      flip: false,
	      audioInputSelect: null,
	      audioOutputSelect: null,
	      videoSelect: null,
	      mute: props.stream ? props.stream.mute : false
	    };
	    _this.stream = null;
	    return _this;
	  }
	
	  _createClass(SelfVideo, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // console.log("New Object Stream", nextProps.stream, this.state.showing, this.stream);
	      this.setState({ mute: nextProps.stream ? nextProps.stream.mute || false : false });
	      if (nextProps.stream != null && this.stream == null) {
	
	        this.stream = nextProps.stream;
	
	        if (!this.state.showing) {
	          // this.stream.from = this.props.uid;
	          console.log("Show Self Video");
	          this.showVideo(this.stream);
	        }
	      } else if (nextProps.stream == null) {
	        this.setState({ showing: false });
	        this.stream = null;
	      } else if (nextProps.stream && nextProps.stream.mediaStream == null) {
	        this.stream = null;
	        this.setState({ showing: false });
	      } else if (this.stream.mediaStream == null && nextProps.stream.mediaStream != null) {
	        this.stream = nextProps.stream;
	        this.showVideo(this.stream);
	      }
	    }
	  }, {
	    key: 'showVideo',
	    value: function showVideo(stream) {
	      var _video = document.getElementById(this.props.id);
	      if (_video) {
	        //Create URL
	        console.log("SElf URL0");
	        var _streamURL = (window.URL || webkitURL).createObjectURL(stream.mediaStream);
	        _video.src = _streamURL;
	        _video.volume = 0;
	
	        this.setState({ showing: true });
	      }
	    }
	  }, {
	    key: 'changeResolution',
	    value: function changeResolution() {
	      var that = this;
	      this.props.confObject.createCamera(function (stream) {
	        console.log("new Stream", stream);
	        that.showVideo(stream);
	      });
	    }
	  }, {
	    key: 'flipSettings',
	    value: function flipSettings() {
	
	      if (this.state.flip) {
	        this.props.confObject.getDevices(function (deviceInfos) {
	          for (var i = 0; i !== deviceInfos.length; ++i) {
	            var deviceInfo = deviceInfos[i];
	
	            var deviceID = deviceInfo.deviceId;
	            var deviceKind = deviceInfo.kind;
	            var deviceText = '';
	
	            if (deviceKind === 'audioinput') {
	              deviceText = deviceInfo.label || 'Microphone';
	            } else if (deviceKind === 'audiooutput') {
	              deviceText = deviceInfo.label || 'Speaker';
	            } else if (deviceKind === 'videoinput') {
	              deviceText = deviceInfo.label || 'Camera';
	            }
	          }
	        });
	      }
	
	      this.setState({ flip: !this.state.flip });
	    }
	  }, {
	    key: 'selfPresenter',
	    value: function selfPresenter() {
	      if (this.props.presenterId == this.props.stream.sid) {
	        this.props.confObject.offPresenter();
	      } else {
	        this.props.confObject.setPresenter(this.props.stream.sid);
	      }
	    }
	  }, {
	    key: 'requestFullScreen',
	    value: function requestFullScreen(e) {
	      var elem = document.getElementById(this.props.id);
	      if (elem.mozRequestFullScreen) {
	        elem.mozRequestFullScreen();
	      } else if (elem.webkitEnterFullScreen) {
	        elem.webkitEnterFullScreen();
	      }
	      // e.currentTarget.requestFullscreen();
	    }
	  }, {
	    key: 'mute',
	    value: function mute() {
	      // var _mute = !this.state.mute;
	      // this.setState({mute: _mute});
	
	      // if(_mute){
	      //   this.props.confObject.Mute(this.props.stream);
	      // }else{
	      //   this.props.confObject.UnMute(this.props.stream);
	      // }
	      this.setState({ mute: this.props.confObject._MuteOrUnMute(this.props.stream) });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	
	      var cls_SelfVideoCard = '' + _Dashboard2.default.selfVideoCard;
	      if (this.state.flip) {
	        cls_SelfVideoCard = _Dashboard2.default.selfVideoCard + ' ' + _Dashboard2.default.flipped;
	      }
	
	      var cls_SelfSpeaker = '' + _Dashboard2.default.speakerSelf;
	      if (this.props.stream && this.props.presenterId == this.props.stream.sid) {
	        cls_SelfSpeaker = _Dashboard2.default.speakerSelf + ' ' + _Dashboard2.default.selectedSpeaker;
	      }
	
	      //changed by jyothi for become Presenter & Revoke Presenter condition
	      return _jsx('div', {
	        id: 'selfVideo',
	        className: _Dashboard2.default.selfVideo
	      }, void 0, this.props.conferenceDetails.imHost ? _jsx('div', {
	        className: cls_SelfSpeaker,
	        title: this.props.presenterId ? this.props.intl.messages.revoke_presenter : this.props.intl.messages.become_presenter
	      }, void 0, _jsx('img', {
	        onClick: this.selfPresenter.bind(this),
	        src: '/images/white-icons/presenter-whtie.png'
	      })) : null, _jsx('div', {
	        className: _Dashboard2.default.nameVideo
	      }, void 0, 'You'), _jsx('video', {
	        onDoubleClick: this.requestFullScreen.bind(this),
	        id: this.props.id,
	        autoPlay: true
	      }), _jsx('div', {
	        className: _Dashboard2.default.controlBar
	      }, void 0, this.props.conferenceDetails.remoteMute ? _jsx('div', {
	        className: _Dashboard2.default.remoteMute
	      }, void 0, 'Muted by Host') : '', this.state.mute || this.props.conferenceDetails.remoteMute ? _jsx(_reactFontawesome2.default, {
	        name: 'microphone-slash',
	        title: this.props.intl.messages.mute_unmute,
	        onClick: this.mute.bind(this)
	      }) : _jsx(_reactFontawesome2.default, {
	        name: 'microphone',
	        title: this.props.intl.messages.mute_unmute,
	        onClick: this.mute.bind(this)
	      })));
	    }
	  }]);
	
	  return SelfVideo;
	}(_react.Component);
	
	SelfVideo.contextTypes = {};
	
	function mapStateToProps(state) {
	  return {
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state)
	  };
	}
	
	SelfVideo.defaultProps = {};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)((0, _reactIntl.injectIntl)(SelfVideo));

/***/ },

/***/ 506:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SpeakerVideo = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _Layout = __webpack_require__(411);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** 
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @Author: "VM Rajaprathap",
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * @Purpose: "Used to show Speaker/Presenter Video, in LMS View"
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */
	
	var SpeakerVideo = exports.SpeakerVideo = function (_Component) {
	  _inherits(SpeakerVideo, _Component);
	
	  function SpeakerVideo(props) {
	    _classCallCheck(this, SpeakerVideo);
	
	    var _this = _possibleConstructorReturn(this, (SpeakerVideo.__proto__ || Object.getPrototypeOf(SpeakerVideo)).call(this, props));
	
	    _this.state = {
	      showing: false,
	      mute: props.stream ? props.stream.mute : false,
	      volume: props.stream ? props.stream.volume : false
	    };
	    _this.stream = null;
	    _this._video = null;
	    return _this;
	  }
	
	  /**
	  * @Function Name: "handleVideo",
	  * @Purpose: "Subscribe the stream if required and validate all the possibilites of 
	              stream object's health and suplly to showVideo function",
	  * @Request Object: <subscribed stream>,
	  * @Response: void
	  */
	
	
	  _createClass(SpeakerVideo, [{
	    key: 'handleVideo',
	    value: function handleVideo(mystream) {
	
	      //New Stream
	      var _stream = mystream;
	
	      console.log("TEST STReam", mystream, this.state.showing, this.stream);
	      if (_stream != null) {
	
	        if (!this.state.showing || this.stream && this.stream.sid != _stream.sid) {
	          this.stream = _stream;
	
	          if (this.stream.mediaStream) {
	            //If mediaStream object present, stream already subscribed.
	            this.showVideo(this.stream);
	          } else {
	            //If mediaStream is null, subscribe the video from conference object.
	            var that = this;
	            console.log("Try Subscribe");
	            this.props.confObject.trySubscribeStream(this.stream, function (stream) {
	              that.stream = stream;
	              that.showVideo(stream);
	            });
	          }
	        } else {
	          //State where blob is present but not displayed in video element.
	          if (this.stream && _stream.mediaStream != null) {
	            //Making sure the existing stream is not null.
	            if (this.stream.sid == _stream.sid) {
	              // this.showVideo(this.stream);
	            }
	          }
	        } ///if Low
	      } else {
	
	        if (this.stream) {
	          if (this._video) {
	            this.setState({ showing: false });
	            this._video.src = null;
	            this.stream = null;
	          }
	        }
	      } ////If Top
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.handleVideo(this.props.stream);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      console.log("SP VID REC", nextProps.stream);
	      this.handleVideo(nextProps.stream);
	    }
	
	    /**
	    * @Function Name: "showVideo",
	    * @Purpose: "Create BLOB for the given stream object and supply the blob to video element",
	    * @Request Object: stream,
	    * @Response  void,
	    */
	
	  }, {
	    key: 'showVideo',
	    value: function showVideo(stream) {
	      this._video = document.getElementById(this.props.id);
	      if (this._video) {
	        //Create URL
	        var _streamURL = (window.URL || webkitURL).createObjectURL(stream.mediaStream);
	        this._video.src = _streamURL;
	        // this._video.volume = 0;
	
	        this.setState({ showing: true });
	      }
	    }
	
	    /**
	    * @Function Name: "offSpeaker",
	    * @Purpose: "Reset all the speaker id from store",
	    * @Request: void,
	    * @Response: void,
	    */
	
	  }, {
	    key: 'offSpeaker',
	    value: function offSpeaker() {
	      this.props.confObject.offSpeaker();
	    }
	  }, {
	    key: 'requestFullScreen',
	    value: function requestFullScreen(e) {
	      var elem = document.getElementById(this.props.id);
	      if (elem.mozRequestFullScreen) {
	        elem.mozRequestFullScreen();
	      } else if (elem.webkitEnterFullScreen) {
	        elem.webkitEnterFullScreen();
	      }
	      // e.currentTarget.requestFullscreen();
	    }
	  }, {
	    key: 'mute',
	    value: function mute() {
	      var _mute = this.props.confObject.MuteOrUnMute(this.props.stream);
	      this.setState({ mute: _mute });
	      // this.setState({volume: _mute});
	    }
	  }, {
	    key: 'mute_v',
	    value: function mute_v(blockval) {
	      if (blockval) {
	        return;
	      }
	      var _mute = this.props.confObject.volumeOnorOff(this.props.stream);
	      this.setState({ volume: _mute });
	      // this.setState({mute: _mute});
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	
	      var cls_SelfVideoCard = '' + _Dashboard2.default.selfVideoCard;
	
	      var _stream = this.props.stream;
	
	      var cls_SelfSpeaker = '' + _Dashboard2.default.speakerRemote;
	      if (_stream && (this.props.presenterId == _stream.sid || this.props.speakerId == _stream.sid)) {
	        cls_SelfSpeaker = _Dashboard2.default.speakerRemote + ' ' + _Dashboard2.default.selectedSpeaker;
	      }
	
	      var cls_speaker = _Dashboard2.default.selfVideo + ' ' + this.props.clsFix;
	
	      //changed by jyothi for become Presenter & Revoke Presenter condition
	      return _jsx('div', {
	        id: 'speakerVideo',
	        className: cls_speaker
	      }, void 0, this.props.conferenceDetails.imHost && this.props.conferenceDetails && this.props.conferenceDetails.confData && this.props.conferenceDetails.confData.roomType != 'Mix' ? _jsx('div', {
	        className: cls_SelfSpeaker,
	        title: this.props.intl.messages.revoke_speaker
	      }, void 0, _jsx('img', {
	        onClick: this.offSpeaker.bind(this),
	        src: '/images/white-icons/speaker-white.png'
	      })) : null, _stream ? _jsx('div', {
	        className: _Dashboard2.default.nameVideo
	      }, void 0, _stream.fname) : _jsx('div', {
	        className: _Dashboard2.default.nameVideo
	      }, void 0, '\'...\''), _jsx('video', {
	        onDoubleClick: this.requestFullScreen.bind(this),
	        id: this.props.id,
	        autoPlay: true
	      }), _jsx('div', {
	        className: _Dashboard2.default.controlBar
	      }, void 0, this.state.volume ? _jsx(_reactFontawesome2.default, {
	        name: 'volume-off',
	        title: this.props.intl.messages.volume_on_off,
	        onClick: this.mute_v.bind(this, false)
	      }) : _jsx(_reactFontawesome2.default, {
	        name: 'volume-up',
	        title: this.props.intl.messages.volume_on_off,
	        onClick: this.mute_v.bind(this, this.state.mute)
	      }), '\xA0\xA0', this.props.conferenceDetails.imHost && this.props.conferenceDetails.confData.roomType != "Mix" ? _stream && _stream.mute ? _jsx(_reactFontawesome2.default, {
	        title: this.props.intl.messages.remote_mute_unmute,
	        name: 'microphone-slash',
	        onClick: this.mute.bind(this)
	      }) : _jsx(_reactFontawesome2.default, {
	        title: this.props.intl.messages.remote_mute_unmute,
	        name: 'microphone',
	        onClick: this.mute.bind(this)
	      }) : ''));
	    }
	  }]);
	
	  return SpeakerVideo;
	}(_react.Component);
	
	function mapStateToProps(state) {
	  return {
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state)
	  };
	}
	
	SpeakerVideo.defaultProps = {};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)((0, _reactIntl.injectIntl)(SpeakerVideo));

/***/ },

/***/ 507:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _RenderQuestions = __webpack_require__(387);
	
	var _RenderQuestions2 = _interopRequireDefault(_RenderQuestions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactFontawesome2.default, {
	  name: 'question'
	});
	
	var _ref2 = _jsx('p', {}, void 0, 'Type your answer');
	
	var Subjective = function (_Component) {
	  _inherits(Subjective, _Component);
	
	  function Subjective(props) {
	    _classCallCheck(this, Subjective);
	
	    return _possibleConstructorReturn(this, (Subjective.__proto__ || Object.getPrototypeOf(Subjective)).call(this, props));
	  }
	
	  _createClass(Subjective, [{
	    key: 'render',
	    value: function render() {
	      var _jsx2;
	
	      return _jsx('li', {}, this.props.data._id, _jsx('div', {
	        className: _Dashboard2.default.questionBlock
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.questionHeading
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.questionIconCircle
	      }, void 0, _ref), _jsx(_RenderQuestions2.default, {
	        question: this.props.data.question
	      })), _jsx('div', {
	        className: _Dashboard2.default.chooseAnswerBlock
	      }, void 0, _ref2, _jsx('form', {
	        className: 'form-inline'
	      }, void 0, _jsx('textarea', (_jsx2 = {
	        id: 'answer',
	        className: 'form-control',
	        rows: '5'
	      }, _defineProperty(_jsx2, 'id', ''), _defineProperty(_jsx2, 'onChange', this.props.answer), _jsx2))))));
	    }
	  }]);
	
	  return Subjective;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {};
	}
	
	Subjective.contextTypes = {
	  intl: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(Subjective);

/***/ },

/***/ 508:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
	  id: 'option'
	});
	
	var TextBox = function (_Component) {
	  _inherits(TextBox, _Component);
	
	  function TextBox(props) {
	    _classCallCheck(this, TextBox);
	
	    return _possibleConstructorReturn(this, (TextBox.__proto__ || Object.getPrototypeOf(TextBox)).call(this, props));
	  }
	
	  _createClass(TextBox, [{
	    key: 'render',
	    value: function render() {
	
	      var number = this.props.index + 1;
	
	      return _jsx('div', {
	        className: 'form-group'
	      }, void 0, _jsx('label', {
	        htmlFor: 'option',
	        className: 'control-label col-md-2'
	      }, void 0, _ref, ' ', number), _jsx('div', {
	        className: 'col-md-10'
	      }, void 0, _jsx('input', {
	        id: 'value',
	        type: 'text',
	        className: 'form-control',
	        value: this.props.value,
	        placeholder: '',
	        onChange: this.props.change,
	        maxLength: 150
	      })));
	    }
	  }]);
	
	  return TextBox;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {};
	}
	
	TextBox.contextTypes = {
	  intl: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(TextBox);

/***/ },

/***/ 509:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
		id: 'author'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
		id: 'fulltopic'
	});
	
	var TopicData = function (_Component) {
		_inherits(TopicData, _Component);
	
		function TopicData(props) {
			_classCallCheck(this, TopicData);
	
			return _possibleConstructorReturn(this, (TopicData.__proto__ || Object.getPrototypeOf(TopicData)).call(this, props));
		}
	
		_createClass(TopicData, [{
			key: 'handleFullTopic',
			value: function handleFullTopic() {
				this.props.contantCallback(this.props.data);
			}
	
			//Code changed by - Najib, Desc - routing is called only for non-guest users
	
		}, {
			key: 'viewUser',
			value: function viewUser() {
				if (!this.props.isGuest) {
					_reactRouter.browserHistory.push('/profile/' + this.props.data.createdBy._id);
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
				var cls_topicAuthorGuest = 'clearfix ' + _Dashboard2.default.topicAuthorGuest;
				var data = this.props.data;
				var profileImage = data ? data.createdBy ? data.createdBy.profile ? data.createdBy.profile.profileImage : '' : '' : '';
				if (profileImage == '' || profileImage == undefined || profileImage == null) {
					var imagePath = '/images/profile-pics/defaultStudent.jpg';
				} else {
					var imagePath = '/uploads/' + profileImage;
				}
				if (this.props.data != null) {
					return _jsx('li', {}, void 0, _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
						className: _Dashboard2.default.listTitle
					}, void 0, _jsx(_reactRouter.Link, {
						id: 'fullTopic',
						onClick: this.handleFullTopic.bind(this)
					}, void 0, this.props.data.topicName))), _jsx(_reactBootstrap.Row, {}, void 0, _jsx(_reactBootstrap.Col, {
						md: 4
					}, void 0, _jsx('div', {
						className: this.props.isGuest ? cls_topicAuthorGuest : cls_topicAuthor
					}, void 0, _jsx('img', {
						id: 'viewprofile',
						src: imagePath,
						onClick: this.viewUser.bind(this),
						title: this.props.intl.messages.viewprofile
					}), _jsx('div', {
						className: _Dashboard2.default.authorInfo
					}, void 0, _jsx('p', {
						className: _Dashboard2.default.authorName
					}, void 0, this.props.data && this.props.data.createdBy && this.props.data.createdBy.firstname ? this.props.data.createdBy.firstname : '', ' ', this.props.data && this.props.data.createdBy && this.props.data.createdBy.lastname ? this.props.data.createdBy.lastname : ''), _jsx('p', {
						className: _Dashboard2.default.authorDisg
					}, void 0, _ref)))), _jsx(_reactBootstrap.Col, {
						md: 8
					}, void 0, _jsx('div', {
						className: _Dashboard2.default.shortDecBlock
					}, void 0, _jsx('p', {}, void 0, this.props.data.description), _jsx('span', {
						className: _Dashboard2.default.fullTopic
					}, void 0, _jsx(_reactRouter.Link, {
						id: 'fullTopic',
						onClick: this.handleFullTopic.bind(this)
					}, void 0, _ref2))))));
				} else return;
			}
		}]);
	
		return TopicData;
	}(_react.Component);
	
	exports.default = (0, _reactIntl.injectIntl)(TopicData);

/***/ },

/***/ 510:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.VideoInConf = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _StatsReducer = __webpack_require__(165);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _WoogeenManager = __webpack_require__(29);
	
	var _WoogeenManager2 = _interopRequireDefault(_WoogeenManager);
	
	var _Layout = __webpack_require__(411);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	// import ControlVideo from './ControlVideo';
	
	var _ = __webpack_require__(7);
	
	var _ref = _jsx('img', {
	  src: '/images/white-icons/speaker-white.png'
	});
	
	var VideoInConf = exports.VideoInConf = function (_Component) {
	  _inherits(VideoInConf, _Component);
	
	  function VideoInConf(props) {
	    _classCallCheck(this, VideoInConf);
	
	    var _this = _possibleConstructorReturn(this, (VideoInConf.__proto__ || Object.getPrototypeOf(VideoInConf)).call(this, props));
	
	    _this.state = {
	      showControl: false,
	      clientHeight: 0,
	      clientWidth: 0,
	      showing: false,
	      mute: props.stream.mute || false,
	      volume: props.stream.volume || false
	    };
	
	    _this.statsTicker = null;
	    _this.updateDimensions = _this.updateDimensions.bind(_this);
	
	    return _this;
	  }
	
	  _createClass(VideoInConf, [{
	    key: 'updateDimensions',
	    value: function updateDimensions() {
	      // console.log("CL Height",document.body.clientHeight);
	      // this.setState({clientHeight: document.body.clientHeight, clientWidth: document.body.clientWidth})
	      this.setState({ clientHeight: document.body.clientHeight, clientWidth: window.innerWidth });
	    }
	  }, {
	    key: 'showControl',
	    value: function showControl() {
	      this.setState({ showControl: true });
	      var that = this;
	      var stream = this.props.stream;
	      if (this.props.stream && this.props.stream.showing) {
	        // this.statsTicker = setInterval(function(){
	        //   console.log('Interval');
	        //   that.getStats(stream);
	        // }, 2000);
	      }
	    }
	  }, {
	    key: 'closeControl',
	    value: function closeControl() {
	      clearInterval(this.statsTicker);
	
	      this.setState({ showControl: false });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      console.log('Is Full Screen', this.isFullScreen());
	      if (nextProps.newWidth > 0) {
	        this.setState({ clientHeight: document.body.clientHeight, clientWidth: document.body.clientWidth });
	      }
	
	      // if(this.props.conferenceDetails.remoteMute){
	
	      // }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.stream) {
	        if (this.props.stream.mediaStream) {
	          console.log('confvid', this.props.stream);
	          this.showVideo(this.props.stream);
	        }
	      }
	
	      this.setState({ clientHeight: document.body.clientHeight, clientWidth: document.body.clientWidth });
	      window.addEventListener("resize", this.updateDimensions);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.stream.hide();
	      window.removeEventListener("resize", this.updateDimensions);
	    }
	  }, {
	    key: 'setSpeaker',
	    value: function setSpeaker() {
	      // alert(this.props.stream);
	      // this.props.speaker(this.props.stream);
	      if (this.props.conferenceDetails.speaker == this.props.streamId) {
	        this.props.confObject.offSpeaker();
	      } else {
	        var obj = {
	          command: 'SPEAKER-ON',
	          content: { speaker: store.getState().conference.speaker, streamId: this.props.stream.id() },
	          type: 'OBJECT'
	        };
	        this.props.confObject.sendMessage(obj, 0);
	      }
	    }
	  }, {
	    key: 'getStats',
	    value: function getStats(stream) {
	      // console.log("Stats Interval", stream);
	      this.props.confObject.getStreamReport(stream, function (obj, status) {
	        if (status) {
	          ///Report Received
	          // console.log("Stats", obj);
	        } else {
	          ///Error Received
	          console.log("ERROR STATS", obj);
	        }
	      });
	    }
	  }, {
	    key: 'showVideo',
	    value: function showVideo(stream) {
	      console.log("Show Video on hangout", stream);
	      var _video = document.getElementById(this.props.stream.sid);
	      if (_video) {
	        //Create URL
	        var _streamURL = (window.URL || webkitURL).createObjectURL(stream.mediaStream);
	        _video.src = _streamURL;
	        // _video.volume = 0;
	
	        this.setState({ showing: true });
	      }
	    }
	  }, {
	    key: 'removeAddtional',
	    value: function removeAddtional(sid) {
	      // console.log("Remove Index", iIndex);
	      this.props.removeVideo(this.props.stream.sid);
	      this.props.confObject.removeAdditionalCamera(sid);
	    }
	  }, {
	    key: 'requestFullScreen',
	    value: function requestFullScreen(e) {
	      var elem = document.getElementById(this.props.stream.id());
	      if (elem.mozRequestFullScreen) {
	        elem.mozRequestFullScreen();
	      } else if (elem.webkitEnterFullScreen) {
	        elem.webkitEnterFullScreen();
	      }
	      // e.currentTarget.requestFullscreen();
	    }
	  }, {
	    key: 'mute',
	    value: function mute() {
	      var _mute = this.props.confObject.MuteOrUnMute(this.props.stream);
	      this.setState({ mute: _mute });
	      // this.setState({volume: _mute});
	    }
	  }, {
	    key: 'mute_v',
	    value: function mute_v(blockval) {
	      if (blockval) {
	        return;
	      }
	      var _mute = this.props.confObject.volumeOnorOff(this.props.stream);
	      this.setState({ volume: _mute });
	      // this.setState({mute: _mute});
	    }
	  }, {
	    key: 'handleTouchTap',
	    value: function handleTouchTap() {
	      console.log("Long Touch");
	    }
	  }, {
	    key: 'isFullScreen',
	    value: function isFullScreen() {
	      return document.webkitIsFullScreen || //Webkit browsers
	      document.mozFullScreen || // Firefox
	      document.msFullScreenElement !== undefined; // IE
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var subVID = 'confvid' + this.props.streamId;
	      // console.log("Its height", this.state.clientHeight);
	      // let windowWidth = document.body.getClientRects()[0].width - 65;
	      var windowHeight = this.state.clientHeight; //document.body.clientHeight;
	      var windowWidth = windowHeight * 16 / 9;
	      // console.log("W and H", windowWidth, windowHeight);
	      var fixWidth = (this.state.clientWidth - 50 - windowWidth) / 2;
	      var obj = this.props.getVideoPosition();
	      var videoPosition = obj.videoPosition;
	      var lastSpeakerIndex = obj.lastSpeakerIndex;
	      var lastPresenterIndex = obj.lastPresenterIndex;
	
	      if (this.state.clientWidth < 600 || this.props.isGuest) {
	        fixWidth = (this.state.clientWidth - 0 - windowWidth) / 2;
	      }
	
	      if (this.isFullScreen()) {
	        // windowHeight =
	        // console.log("Full Screen Occupaied");
	        fixWidth = 0;
	        windowHeight = screen.height;
	        windowWidth = windowHeight * 16 / 9;
	      }
	
	      var length = this.props.conferenceDetails.streams.length - 1;
	
	      if (this.props.conferenceDetails.streams[0] && this.props.conferenceDetails.streams[0].from == "") {
	        length--;
	      } else if (this.props.conferenceDetails.streams[0] == null) {
	        length--;
	      }
	
	      var objLayout = _Layout.layout_16[length];
	      // console.log("Layout ");
	      var aspectRatio_H = 9 / 16;
	
	      var _h = 0;
	      var gap = 0;
	      var tgap = 0;
	
	      var allstreams = _.compact(this.props.conferenceDetails.streams);
	      var i = _.findIndex(allstreams, ['sid', this.props.stream.id()]);
	      var icpy = i;
	      var iPresenter = _.findIndex(allstreams, ['presenter', true]);
	      var iSpeaker = _.findIndex(allstreams, ['speaker', true]);
	
	      if (iPresenter < 0 || iSpeaker < 0) {
	        this.props.updateVideoPosition(videoPosition, -1);
	      }
	
	      if (lastSpeakerIndex != iSpeaker || lastPresenterIndex != iPresenter) {
	        if (lastSpeakerIndex != iSpeaker) {
	          var isSpeakerFound = _.findIndex(videoPosition, ['index', lastSpeakerIndex]);
	          videoPosition = new Array(videoPosition.length).fill({ index: -1, sid: "" });
	        }
	
	        if (lastPresenterIndex != iPresenter) {
	          var isPresenterFound = _.findIndex(videoPosition, ['index', lastPresenterIndex]);
	          videoPosition = new Array(videoPosition.length).fill({ index: -1, sid: "" });
	        }
	        lastSpeakerIndex = iSpeaker;
	        lastPresenterIndex = iPresenter;
	        this.props.updateVideoPosition(videoPosition, lastSpeakerIndex, lastPresenterIndex);
	      }
	
	      if (this.props.roomType != "Mix") {
	
	        // console.log("FFFFFFF", length, i);
	        var thisStream = this.props.stream;
	        if (i < 0) {
	          i = 0;
	        } else {
	          thisStream = allstreams[i];
	        }
	
	        if (iPresenter >= 0 && iSpeaker >= 0) {
	          console.log("2 Condition", iPresenter, iSpeaker, thisStream, i);
	          console.log("videoposition", videoPosition);
	          if (thisStream.presenter && i != 1) {
	            videoPosition[1] = { index: i, sid: thisStream.sid };
	            this.props.updateVideoPosition(videoPosition, lastSpeakerIndex, lastPresenterIndex);
	            i = 1; //Making sure this guy get right place
	          } else if (thisStream.speaker && i != 0) {
	            videoPosition[0] = { index: i, sid: thisStream.sid };
	            this.props.updateVideoPosition(videoPosition, lastSpeakerIndex, lastPresenterIndex);
	            i = 0; //Making sure this gux`y get right place
	          } else if (!thisStream.presenter && !thisStream.speaker && i == 0) {
	            videoPosition[2] = { index: i, sid: thisStream.sid };
	            this.props.updateVideoPosition(videoPosition, lastSpeakerIndex, lastPresenterIndex);
	            i = 2;
	          } else if (!thisStream.presenter && !thisStream.speaker) {
	            var emptyIndex = -1;
	            var startIndex;
	            var updatedIndex = -1;
	            if (videoPosition.length == 3) {
	              startIndex = videoPosition.length;
	            } else {
	              // Hard coded because 0 - speaker, 1 - presenter, 2 - self
	              startIndex = 3;
	            }
	            if (iPresenter == 0 || iSpeaker == 0) {
	              startIndex = startIndex - 1;
	            }
	            console.log('startIndex', startIndex);
	            var splicearray = _.clone(videoPosition);
	            splicearray.splice(0, startIndex);
	            var sliceIndex = _.findIndex(splicearray, ['index', i]);
	            if (sliceIndex < 0) {
	              var emptyIndex = _.findIndex(splicearray, ['index', -1]);
	              console.log('emptyIndex', emptyIndex);
	              updatedIndex = emptyIndex + startIndex;
	              console.log('updatedIndex', updatedIndex);
	            } else {
	              updatedIndex = sliceIndex + startIndex;
	            }
	            videoPosition[updatedIndex] = { index: i, sid: thisStream.sid };
	            this.props.updateVideoPosition(videoPosition, lastSpeakerIndex, lastPresenterIndex);
	            i = updatedIndex;
	          }
	        } else if (iPresenter >= 0 && iSpeaker < 0) {
	          // console.log("A Condition", iPresenter, iSpeaker, this.props.stream, i);
	          if (thisStream.presenter && i != 0) {
	            i = 0; //Making sure this guy get right place
	          } else if (i == 0) {
	            i = iPresenter;
	          }
	        } else if (iSpeaker >= 0 && iPresenter < 0) {
	          // console.log("B Condition", iPresenter, iSpeaker, this.props.stream, i);
	          if (thisStream.speaker && i != 0) {
	            i = 0; //Making sure this guy get right place
	          } else if (i == 0) {
	            i = iSpeaker;
	          }
	        }
	      }
	
	      // if (iPresenter < 0 && iSpeaker < 0 ){
	      //   i = icpy + 0; //nobody found as speaker or presenter; let the flow be the same
	      // }else if(iPresenter >= 0 && iSpeaker >= 0 && (!this.props.stream.speaker && !this.props.stream.presenter) && (i == 0 || i == 1)){
	      //   //Looks both place reserved
	      //   i = icpy + 2;
	      // }else if(iPresenter >= 0 && (!this.props.stream.speaker && !this.props.stream.presenter) && i ==0){
	      //   i = icpy + 1;
	      // }else if(iSpeaker >= 0 && (!this.props.stream.speaker && !this.props.stream.presenter) && i == 1){
	      //   i = icpy + 1;
	      // }
	
	      // console.log("Lenght --- Test", i, this.props.stream);
	
	      // if(length>1){
	      //     if(i==0){
	      //       i = 1;
	      //     }else if(i == 1){
	      //       i = 0;
	      //     }
	      // }
	      // console.log("Index", i);
	      if (this.props.roomType == "Mix") {
	        objLayout = _Layout.layout_16[0];
	        i = 0;
	      }
	
	      if (length >= 0 && objLayout && objLayout.region[i]) {
	        _h = windowWidth * objLayout.region[i].relativeSize * aspectRatio_H;
	        gap = windowWidth * objLayout.region[i].gap * 0.5;
	        tgap = (windowHeight - windowWidth * objLayout.region[i].tgap * aspectRatio_H) / 2;
	      }
	      // console.log(windowWidth * objLayout.region[i].left + gap, windowWidth);
	      var vidStyle = {
	        left: windowWidth * objLayout.region[i].left + gap + fixWidth,
	        top: _h * objLayout.region[i].top + tgap + 'px',
	        height: _h + 'px',
	        width: windowWidth * objLayout.region[i].relativeSize + 'px',
	        position: 'absolute',
	        overflow: 'hidden'
	      };
	
	      var cls_mixFix = '';
	      // console.log('Stream Count', this.props.sCount, allstreams.length);
	      var sCount = allstreams.length;
	      if (this.props.roomType == "Mix" && (sCount == 6 || sCount == 8 || sCount == 10 || sCount == 14 || sCount == 15 || sCount >= 17)) {
	        // vidStyle['object-fit'] = 'contain !important';
	        cls_mixFix = '' + _Dashboard2.default.mixFix;
	      } else if (this.props.roomType == "Mix") {
	        cls_mixFix = '' + _Dashboard2.default.mixFixCover;
	      }
	
	      var selfId = this.props.confObject.getSelfId();
	      var showSelf = true;
	      var stremsWithoutSelf = _.clone(allstreams);
	
	      if (selfId == this.props.stream.from && this.props.roomType != "Mix") {
	        showSelf = false;
	
	        _.pull(stremsWithoutSelf, this.props.stream);
	        if (sCount == 1) cls_mixFix = '' + _Dashboard2.default.mobConfSingle;else if (sCount == 2) cls_mixFix = '' + _Dashboard2.default.videoConfMobileSelf;else if (sCount == 3) cls_mixFix = '' + _Dashboard2.default.videoConfMobileSelfThree;else cls_mixFix = '' + _Dashboard2.default.videoConfMobileSelfFourLayout;
	      }
	
	      if (showSelf) {
	        // console.log("allstreams====== ", allstreams);
	        if (sCount == 2) {
	          cls_mixFix = '' + _Dashboard2.default.videoConfMobileOther;
	        } else if (sCount == 3) {
	          console.log("stremsWithoutSelf[0].from--", stremsWithoutSelf[0].from, this.props.stream.from);
	          if (stremsWithoutSelf[1].from == this.props.stream.from) cls_mixFix = '' + _Dashboard2.default.videoConfMobileOtherThreeRight;else cls_mixFix = '' + _Dashboard2.default.videoConfMobileOtherThreeLeft;
	        } else if (sCount == 4) {
	          if (stremsWithoutSelf[1].from == this.props.stream.from) {
	            cls_mixFix = '' + _Dashboard2.default.videoConfMobileOtherThreeRight;
	          } else if (stremsWithoutSelf[2].from == this.props.stream.from) {
	            cls_mixFix = '' + _Dashboard2.default.videoConfMobileOtherFourLeft;
	          } else {
	            cls_mixFix = '' + _Dashboard2.default.videoConfMobileOtherThreeLeft;
	          }
	        } else cls_mixFix = '' + _Dashboard2.default.videoConfMobileOtherThreeLeft;
	      }
	
	      // console.log(vidStyle);
	      /*<div id={scrlVID} className="rsc-slider-item" style={scrlStyle}>
	          <div id={subVID} className="rsc-slider-item-img rsc-slider-item_transparent" style={subStyle}>
	           </div>
	        </div>
	               { this.props.stream.additional ?
	              <div className={styles.removeOption} title="Remove Additional Camera!" onClick={this.removeAddtional.bind(this, this.props.stream.id())}>x</div>
	              : null
	            }
	            <div className={styles.controllerListBlock}>
	              <ul>
	                <li title="Remove this user">
	                  <img src="/images/white-icons/remove-user.png" />
	                </li>
	                <li title="View performance graph">
	                  <img src="/images/white-icons/graph-report.png" />
	                </li>
	              </ul>
	            </div>
	            {this.props.conferenceDetails.imHost && showSelf ?
	              <div className={styles.speakerSelf} onClick={this.setSpeaker.bind(this)}>
	               <img src="/images/white-icons/speaker-white.png" />
	              </div>
	            : null}
	         */
	      return _jsx('div', {
	        style: vidStyle,
	        className: cls_mixFix
	      }, void 0, !showSelf ? _jsx('video', {
	        id: this.props.stream.sid,
	        autoPlay: true,
	        muted: true,
	        onDoubleClick: this.requestFullScreen.bind(this)
	      }) : _jsx('video', {
	        id: this.props.stream.sid,
	        autoPlay: true,
	        onDoubleClick: this.requestFullScreen.bind(this)
	      }), this.props.stream.additional ? _jsx('div', {
	        className: _Dashboard2.default.removeOption,
	        title: 'Remove Additional Camera!',
	        onClick: this.removeAddtional.bind(this, this.props.stream.id())
	      }, void 0, 'x') : null, this.props.conferenceDetails.imHost && showSelf && this.props.roomType != 'Mix' ? _jsx('div', {
	        className: _Dashboard2.default.speakerSelf,
	        onClick: this.setSpeaker.bind(this),
	        style: this.props.conferenceDetails.speaker == this.props.streamId ? { backgroundColor: "#ff0000" } : {},
	        title: this.props.conferenceDetails.speaker == this.props.streamId ? this.props.intl.messages.revoke_speaker : this.props.intl.messages.make_speaker_vedio
	      }, void 0, _ref) : null, _jsx('div', {
	        className: _Dashboard2.default.controlBar
	      }, void 0, this.props.muteOrAudio && this.props.stream.mute ? this.props.conferenceDetails.remoteMute ? _jsx('div', {
	        className: _Dashboard2.default.remoteMute
	      }, void 0, 'Muted by Host') : '' : '', this.props.muteOrAudio ? this.props.stream.mute ? _jsx(_reactFontawesome2.default, {
	        name: 'microphone-slash',
	        title: this.props.intl.messages.mute_unmute,
	        onClick: this.mute.bind(this, this.props.conferenceDetails.remoteMute)
	      }, void 0) : _jsx(_reactFontawesome2.default, {
	        name: 'microphone',
	        title: this.props.intl.messages.mute_unmute,
	        onClick: this.mute.bind(this, this.props.conferenceDetails.remoteMute)
	      }) : this.state.volume ? _jsx(_reactFontawesome2.default, {
	        name: 'volume-off',
	        title: this.props.intl.messages.volume_on_off,
	        onClick: this.mute_v.bind(this, false)
	      }) : _jsx(_reactFontawesome2.default, {
	        name: 'volume-up',
	        title: this.props.intl.messages.volume_on_off,
	        onClick: this.mute_v.bind(this, this.state.mute)
	      }), '\xA0\xA0', this.props.conferenceDetails.imHost && showSelf && this.props.roomType != "Mix" ? this.props.stream.mute ? !this.state.volume ? _jsx(_reactFontawesome2.default, {
	        title: this.props.intl.messages.remote_mute_unmute,
	        name: 'microphone-slash',
	        onClick: this.mute.bind(this)
	      }, void 0) : '' : _jsx(_reactFontawesome2.default, {
	        title: this.props.intl.messages.remote_mute_unmute,
	        name: 'microphone',
	        onClick: this.mute.bind(this)
	      }) : ''), this.props.stream && this.props.roomType != "Mix" ? !showSelf ? _jsx('div', {
	        className: _Dashboard2.default.nameVideo
	      }, void 0, 'You') : _jsx('div', {
	        className: _Dashboard2.default.nameVideo
	      }, void 0, this.props.stream.fname) : 'Loading...');
	    }
	  }]);
	
	  return VideoInConf;
	}(_react.Component);
	
	VideoInConf.contextTypes = {};
	
	function mapStateToProps(state) {
	  return {
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state),
	    statsDetails: (0, _StatsReducer.statsDetails)(state)
	  };
	}
	
	VideoInConf.defaultProps = {};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)((0, _reactIntl.injectIntl)(VideoInConf));

/***/ },

/***/ 511:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('img', {
	  src: '/images/whiteboard/move-tool.png'
	});
	
	var _ref2 = _jsx('img', {
	  src: '/images/whiteboard/pencil.png'
	});
	
	var _ref3 = _jsx('img', {
	  src: '/images/whiteboard/square.png'
	});
	
	var _ref4 = _jsx('img', {
	  src: '/images/whiteboard/circle.png'
	});
	
	var _ref5 = _jsx('img', {
	  src: '/images/whiteboard/oval.png'
	});
	
	var _ref6 = _jsx('img', {
	  src: '/images/whiteboard/line.png'
	});
	
	var _ref7 = _jsx('img', {
	  src: '/images/whiteboard/a.png'
	});
	
	var _ref8 = _jsx('img', {
	  src: '/images/whiteboard/delete.png'
	});
	
	var _ref9 = _jsx('img', {
	  src: '/images/whiteboard/whiteboard.png'
	});
	
	var _ref10 = _jsx('canvas', {
	  id: 'canvas'
	});
	
	var WhiteBoard = function (_Component) {
	  _inherits(WhiteBoard, _Component);
	
	  function WhiteBoard(props) {
	    _classCallCheck(this, WhiteBoard);
	
	    var _this = _possibleConstructorReturn(this, (WhiteBoard.__proto__ || Object.getPrototypeOf(WhiteBoard)).call(this, props));
	
	    _this.canvas = null;
	    _this.isDown = false;
	    _this.lineColor = '#000';
	    _this.fillColor = null;
	    _this.pauseSelection = false;
	    _this.jsonObjects = [];
	    _this.state = {
	      current: 'Pointer'
	    };
	    return _this;
	  }
	
	  _createClass(WhiteBoard, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      console.log("Its mounted", window.width, window.height);
	      this.canvas = new fabric.Canvas('canvas');
	      // this.canvas.setWidth(document.getElementById('canvPlace').offsetWidth);
	      // this.canvas.setHeight(document.getElementById('canvPlace').offsetHeight);
	      this.canvas.setWidth(window.innerWidth - 602);
	      this.canvas.setHeight(window.innerHeight - 144);
	      // console.log("Its mounted", document.getElementById('canvPlace').offsetWidth, document.getElementById('canvPlace').offsetHeight);
	
	      if (this.canvas && this.props && this.props.whiteBoardData) {
	        // console.log("whiteBoardData-- ", this.props.whiteBoardData)
	        this.canvas.loadFromJSON(this.props.whiteBoardData);
	        this.canvas.renderAll();
	      }
	
	      this.SyncWhiteBoard = this.SyncWhiteBoard.bind(this);
	      this.props.confObject.WhiteBoardListener(this.SyncWhiteBoard);
	
	      var that = this;
	      this.canvas.on("path:created", function (o) {
	        that.emitCanvas();
	      });
	
	      this.canvas.on('object:modified', function (o) {
	        that.emitCanvas();
	      });
	
	      this.canvas.on('before:selection:cleared', function (o) {
	        that.emitCanvas();
	      });
	      //Default Brush
	      // this.canvas.isDrawingMode = true;
	      // this.canvas.freeDrawingBrush.width = 5;
	    }
	  }, {
	    key: 'emitCanvas',
	    value: function emitCanvas() {
	      var jsonData = JSON.stringify(this.canvas);
	
	      //Undo and Redo
	      // this.jsonObjects.push(jsonData);
	
	      var objWb = {
	        command: 'WB-SYNC',
	        content: { wbContent: jsonData },
	        type: 'STRING'
	      };
	      this.props.confObject.sendMessage(objWb, 0);
	      // var objWB = {key: 'WB', sender: Meteor.userId(), data: jsonData};
	
	      // objCore.Conference(objCore).sendMessages(objWB);
	    }
	  }, {
	    key: 'selectDrawing',
	    value: function selectDrawing(e) {
	      this.setState({ current: e.currentTarget.title });
	      this.canvas.isDrawingMode = false;
	      this.canvas.selection = true;
	    }
	  }, {
	    key: 'pencil',
	    value: function pencil(e) {
	      this.setState({ current: e.currentTarget.title });
	      this.canvas.isDrawingMode = true;
	      this.canvas.freeDrawingBrush.width = 5;
	      this.canvas.freeDrawingBrush.color = this.lineColor;
	    }
	  }, {
	    key: 'rectangleDraw',
	    value: function rectangleDraw(e) {
	      this.setState({ current: e.currentTarget.title });
	      this.canvas.isDrawingMode = false;
	      var rect, isDown, origX, origY;
	
	      var that = this;
	      this.clearCanvasEvents();
	      this.canvas.observe('mouse:down', function (o) {
	        that.isDown = true;
	        var pointer = that.canvas.getPointer(o.e);
	        origX = pointer.x;
	        origY = pointer.y;
	        var pointer = that.canvas.getPointer(o.e);
	        rect = new fabric.Rect({
	          left: origX,
	          top: origY,
	          originX: 'left',
	          originY: 'top',
	          width: pointer.x - origX,
	          height: pointer.y - origY,
	          angle: 0,
	          fill: 'rgba(0,0,0,0)',
	          stroke: that.lineColor,
	          strokeWidth: 3,
	          transparentCorners: false
	        });
	        that.canvas.add(rect);
	      });
	
	      this.canvas.observe('mouse:move', function (o) {
	        if (!that.isDown) return;
	        var pointer = that.canvas.getPointer(o.e);
	
	        if (origX > pointer.x) {
	          rect.set({ left: Math.abs(pointer.x) });
	        }
	        if (origY > pointer.y) {
	          rect.set({ top: Math.abs(pointer.y) });
	        }
	
	        if (rect) {
	          rect.set({ width: Math.abs(origX - pointer.x) });
	          rect.set({ height: Math.abs(origY - pointer.y) });
	        }
	
	        that.canvas.renderAll();
	        that.canvas.isDrawingMode = false;
	      });
	
	      this.canvas.observe('mouse:up', function (o) {
	        that.isDown = false;
	        that.canvas.remove(rect);
	        that.canvas.off('mouse:down');
	        that.canvas.off('mouse:move');
	        that.canvas.off('mouse:up');
	        that.canvas.add(rect);
	        that.emitCanvas();
	      });
	    }
	  }, {
	    key: 'clearCanvasEvents',
	    value: function clearCanvasEvents() {
	      this.canvas.off('mouse:down');
	      this.canvas.off('mouse:move');
	      this.canvas.off('mouse:up');
	    }
	  }, {
	    key: 'circleDraw',
	    value: function circleDraw(e) {
	      this.setState({ current: e.currentTarget.title });
	      this.canvas.isDrawingMode = false;
	      var circle, isDown, origX, origY;
	
	      var that = this;
	      this.clearCanvasEvents();
	      this.canvas.observe('mouse:down', function (o) {
	        that.isDown = true;
	        var pointer = that.canvas.getPointer(o.e);
	        origX = pointer.x;
	        origY = pointer.y;
	        circle = new fabric.Circle({
	          left: pointer.x,
	          top: pointer.y,
	          //radius: 1,
	          radius: pointer.x - origX,
	          fill: 'rgba(0,0,0,0)',
	          stroke: that.lineColor,
	          strokeWidth: 3,
	          selectable: true,
	          originX: 'center', originY: 'center'
	        });
	        that.canvas.add(circle);
	      });
	
	      this.canvas.observe('mouse:move', function (o) {
	        if (!that.isDown) return;
	
	        var pointer = that.canvas.getPointer(o.e);
	        if (circle) {
	          circle.set({ radius: Math.abs(origX - pointer.x) });
	        }
	        that.canvas.renderAll();
	        that.canvas.isDrawingMode = false;
	        that.canvas.off('mouse:down');
	      });
	
	      this.canvas.observe('mouse:up', function (o) {
	        that.isDown = false;
	        that.canvas.remove(circle);
	        that.canvas.off('mouse:down');
	        that.canvas.off('mouse:move');
	        that.canvas.off('mouse:up');
	        that.canvas.add(circle);
	        that.canvas.selection = false;
	        that.emitCanvas();
	      });
	    }
	  }, {
	    key: 'lineDraw',
	    value: function lineDraw(e) {
	      this.setState({ current: e.currentTarget.title });
	      var line, isDown, origX, origY;
	      var that = this;
	      this.isDown = false;
	      this.canvas.isDrawingMode = false;
	      this.clearCanvasEvents();
	      this.canvas.observe('mouse:down', function (o) {
	        that.isDown = true;
	        var pointer = that.canvas.getPointer(o.e);
	        var points = [pointer.x, pointer.y, pointer.x, pointer.y];
	        line = new fabric.Line(points, {
	          strokeWidth: 5,
	          fill: 'rgba(0,0,0,0)',
	          stroke: that.lineColor,
	          originX: 'center',
	          originY: 'center'
	        });
	        that.canvas.add(line);
	      });
	
	      this.canvas.observe('mouse:move', function (o) {
	        if (!that.isDown) return;
	        var pointer = that.canvas.getPointer(o.e);
	        line.set({ x2: pointer.x, y2: pointer.y });
	        that.canvas.renderAll();
	        that.canvas.off('mouse:down');
	      });
	
	      this.canvas.observe('mouse:up', function (o) {
	        that.isDown = false;
	        that.canvas.remove(line);
	        that.canvas.off('mouse:move');
	        that.canvas.off('mouse:down');
	        that.canvas.off('mouse:up');
	        that.canvas.add(line);
	        that.emitCanvas();
	      });
	    }
	  }, {
	    key: 'ellipseDraw',
	    value: function ellipseDraw(e) {
	      this.clearCanvasEvents();
	      this.setState({ current: e.currentTarget.title });
	      this.canvas.isDrawingMode = false;
	      var ellip, isDown, origX, origY;
	      var that = this;
	      console.log("this.isDown === ", that.isDown);
	      this.canvas.observe('mouse:down', function (o) {
	        that.isDown = true;
	        var pointer = that.canvas.getPointer(o.e);
	        origX = pointer.x;
	        origY = pointer.y;
	        var pointer = that.canvas.getPointer(o.e);
	        ellip = new fabric.Ellipse({
	          left: origX,
	          top: origY,
	          originX: 'center',
	          originY: 'center',
	          rx: 1,
	          ry: 1,
	          angle: 0,
	          fill: 'rgba(0,0,0,0)',
	          stroke: that.lineColor,
	          strokeWidth: 3,
	          selectable: true,
	          transparentCorners: true
	        });
	        that.canvas.add(ellip);
	      });
	
	      this.canvas.observe('mouse:move', function (o) {
	        if (!that.isDown) return;
	        var pointer = that.canvas.getPointer(o.e);
	        ellip.set({ rx: Math.abs(origX - pointer.x) });
	        ellip.set({ ry: Math.abs(origY - pointer.y) });
	        that.canvas.renderAll();
	        that.canvas.isDrawingMode = false;
	      });
	
	      this.canvas.observe('mouse:up', function (o) {
	        that.isDown = false;
	        that.canvas.remove(ellip);
	        that.canvas.off('mouse:down');
	        that.canvas.off('mouse:up');
	        that.canvas.off('mouse:move');
	        that.canvas.add(ellip);
	        that.emitCanvas();
	      });
	    }
	  }, {
	    key: 'setText',
	    value: function setText(e) {
	      console.log("active object === ", this.canvas.getActiveObject());
	      // this.canvas.selection = false;
	      this.canvas.isDrawingMode = false;
	
	      if (this.canvas.getActiveObject()) {
	        this.canvas.discardActiveObject();
	      }
	      this.setState({ current: e.currentTarget.title });
	
	      var that = this;
	      var t;
	      this.clearCanvasEvents();
	      this.pauseSelection = true;
	      this.canvas.on('mouse:down', function (o) {
	        console.log('Moving....');
	        var pointer = that.canvas.getPointer(o.e);
	        var origX = pointer.x;
	        var origY = pointer.y;
	
	        t = new fabric.IText("Enter Text Here...", {
	          top: origY,
	          left: origX,
	          width: 200,
	          height: 200,
	          fill: that.lineColor,
	          fontSize: 22,
	          lockScalingX: false,
	          lockScalingY: false,
	          hasRotatingPoint: false,
	          transparentCorners: false,
	          cornerSize: 7,
	          selectionStart: 0,
	          selectionEnd: 18
	        });
	
	        t.on("selection:changed", function () {
	          // console.log("change event");
	          if (t.text == "Enter Text Here...") {
	            // t.selectAll();
	            // t.text = "";
	          }
	        });
	
	        t.on("editing:entered", function () {
	          if (t.text == "Enter Text Here...") {
	            // t.selectAll();
	            // t.text = "";
	          }
	        });
	
	        that.canvas.add(t).setActiveObject(t);
	        // that.canvas.renderAll();
	        t.enterEditing();
	        // t.selectAll();
	        // that.canvas.setActiveObject(t);
	
	        t.on("editing:exited", function () {
	          console.log("EDITED");
	          if (t.text == "") {
	            t.text = "Enter Text Here...";
	          }
	          t.off("selection:changed");
	          t.off("editing:exited");
	          t.off("editing:entered");
	          // that.pauseSelection = false;
	          that.emitCanvas();
	        });
	
	        that.canvas.off('mouse:down');
	      });
	      // this.canvas.on("text:changed", function(){
	      // 	// that.emitCanvas();
	      // 	that.canvas.off('mouse:down');
	      // });
	
	      // emitCanvas();
	    }
	  }, {
	    key: 'removeActiveObject',
	    value: function removeActiveObject(e) {
	      this.setState({ current: e.currentTarget.title });
	      this.canvas.isDrawingMode = false;
	
	      var that = this;
	      var activeObject = this.canvas.getActiveObject();
	      var activeGroup = this.canvas.getActiveObjects();
	      console.log('Active', activeObject.length, activeGroup.length);
	      if (activeGroup.length == 1) {
	        // if (confirm('Are you sure?')) {
	        this.canvas.remove(activeObject);
	        // }
	      }
	
	      if (activeGroup.length > 1) {
	        if (confirm('Are you sure?')) {
	          // var objectsInGroup = activeGroup.getObjects();
	          // this.canvas.discardActiveGroup();
	          activeGroup.forEach(function (object) {
	            that.canvas.remove(object);
	          });
	        }
	      }
	
	      this.emitCanvas();
	    }
	  }, {
	    key: 'clearAll',
	    value: function clearAll(e) {
	      console.log("whiteboard cleared");
	      this.setState({ current: e.currentTarget.title });
	      this.canvas.isDrawingMode = false;
	      var self = this;
	      alertify.confirm(this.props.intl.messages.warning, this.props.intl.messages.delete_whiteboardObjects_alert, function (result) {
	        if (result) {
	          self.canvas.clear();
	          self.emitCanvas();
	        }
	      }, function () {}).setting('labels', { 'ok': this.props.intl.messages.ok, 'cancel': this.props.intl.messages.cancel });;
	    }
	  }, {
	    key: 'setLineColor',
	    value: function setLineColor(e) {
	      this.lineColor = e.target.value;
	      var activeObject = this.canvas.getActiveObject();
	      if (activeObject) {
	        activeObject.stroke = this.lineColor;
	        activeObject.color = this.lineColor;
	      }
	
	      if (this.canvas.isDrawingMode) {
	        // this.canvas.isDrawingMode = false;
	        this.canvas.freeDrawingBrush.color = this.lineColor;
	        // this.canvas.isDrawingMode = true;
	      }
	
	      // emitCanvas();
	    }
	  }, {
	    key: 'setFillColor',
	    value: function setFillColor(e) {
	      var colorValue = e.target.value;
	      var activeObject = this.canvas.getActiveObject();
	      if (activeObject) {
	        activeObject.fill = colorValue;
	        this.canvas.renderAll();
	        this.emitCanvas();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var cls_flexToolBar = _Dashboard2.default.toolBarFlex + ' ' + _Dashboard2.default.flexColumn;
	      return _jsx('div', {
	        className: _Dashboard2.default.whiteBoardContainer
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.whiteboardToolBar
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.thinScroll
	      }, void 0, _jsx('ul', {
	        className: cls_flexToolBar
	      }, void 0, _jsx('li', {
	        id: 'pointer',
	        title: this.props.intl.messages.pointer,
	        onClick: this.selectDrawing.bind(this),
	        className: this.state.current == 'Pointer' ? _Dashboard2.default.active : ''
	      }, void 0, _ref), _jsx('li', {
	        id: 'pencil',
	        title: this.props.intl.messages.pencil,
	        onClick: this.pencil.bind(this),
	        className: this.state.current == 'Pencil' ? _Dashboard2.default.active : ''
	      }, void 0, _ref2), _jsx('li', {
	        id: 'square',
	        title: this.props.intl.messages.square,
	        onClick: this.rectangleDraw.bind(this),
	        className: this.state.current == 'Square' ? _Dashboard2.default.active : ''
	      }, void 0, _ref3), _jsx('li', {
	        id: 'circle',
	        title: this.props.intl.messages.circle,
	        onClick: this.circleDraw.bind(this),
	        className: this.state.current == 'Circle' ? _Dashboard2.default.active : ''
	      }, void 0, _ref4), _jsx('li', {
	        id: 'oval',
	        title: this.props.intl.messages.oval,
	        onClick: this.ellipseDraw.bind(this),
	        className: this.state.current == 'Oval' ? _Dashboard2.default.active : ''
	      }, void 0, _ref5), _jsx('li', {
	        id: 'line',
	        title: this.props.intl.messages.line,
	        onClick: this.lineDraw.bind(this),
	        className: this.state.current == 'Line' ? _Dashboard2.default.active : ''
	      }, void 0, _ref6), _jsx('li', {
	        id: 'alphabets',
	        title: this.props.intl.messages.alphabets,
	        onClick: this.setText.bind(this),
	        className: this.state.current == 'Alphabets' ? _Dashboard2.default.active : ''
	      }, void 0, _ref7), _jsx('li', {
	        id: 'delete',
	        title: this.props.intl.messages.delete,
	        onClick: this.removeActiveObject.bind(this),
	        className: this.state.current == 'Delete' ? _Dashboard2.default.active : ''
	      }, void 0, _ref8), _jsx('li', {
	        id: 'eraseAll',
	        title: this.props.intl.messages.erase_all,
	        onClick: this.clearAll.bind(this),
	        className: this.state.current == 'Erase All' ? _Dashboard2.default.active : ''
	      }, void 0, _ref9), _jsx('li', {
	        id: 'fillBackgroundColor',
	        title: this.props.intl.messages.fill_background_colors,
	        className: _Dashboard2.default.colorPallet
	      }, void 0, _jsx('input', {
	        type: 'color',
	        id: 'colorpicker',
	        onChange: this.setFillColor.bind(this),
	        'data-toggle': 'tooltip',
	        'data-placement': 'right',
	        title: this.props.intl.messages.background
	      })), _jsx('li', {
	        id: 'stroke',
	        title: this.props.intl.messages.stroke,
	        className: _Dashboard2.default.colorPallet
	      }, void 0, _jsx('input', {
	        className: _Dashboard2.default.line,
	        type: 'color',
	        id: 'linecolor',
	        onChange: this.setLineColor.bind(this),
	        'data-toggle': 'tooltip',
	        'data-placement': 'right',
	        title: this.props.intl.messages.line_color
	      }))))), _jsx('div', {
	        id: 'canvPlace',
	        className: _Dashboard2.default.canvasContainer
	      }, void 0, _ref10));
	    }
	
	    ////////////////////////////////
	
	  }, {
	    key: 'SyncWhiteBoard',
	    value: function SyncWhiteBoard(objData) {
	      // console.log(objData, this.canvas);
	      if (this.canvas && objData) {
	        this.canvas.loadFromJSON(objData);
	        this.canvas.renderAll();
	      }
	    }
	    /////////////////////////////
	
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      // console.log("this.props.confObject-----------", this.props.confObject.getConnectionStatus())
	      if (this.props.confObject.getConnectionStatus()) {
	        this.props.saveWhiteBoardData(JSON.stringify(this.canvas));
	      }
	    }
	  }]);
	
	  return WhiteBoard;
	}(_react.Component);
	
	WhiteBoard.contextTypes = {
	  intl: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = (0, _reactIntl.injectIntl)(WhiteBoard);

/***/ },

/***/ 512:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.WorkDashboard = undefined;
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _apiCaller = __webpack_require__(8);
	
	var _apiCaller2 = _interopRequireDefault(_apiCaller);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactRedux = __webpack_require__(16);
	
	var _UserDashboardActions = __webpack_require__(24);
	
	var _UserDashboardReducer = __webpack_require__(88);
	
	var _WorkDashboardReducer = __webpack_require__(53);
	
	var _WorkDashboardActions = __webpack_require__(65);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _TopicList = __webpack_require__(415);
	
	var _TopicList2 = _interopRequireDefault(_TopicList);
	
	var _TopicContent = __webpack_require__(414);
	
	var _TopicContent2 = _interopRequireDefault(_TopicContent);
	
	var _Handraise = __webpack_require__(516);
	
	var _Handraise2 = _interopRequireDefault(_Handraise);
	
	var _WhiteBoard = __webpack_require__(511);
	
	var _WhiteBoard2 = _interopRequireDefault(_WhiteBoard);
	
	var _ScreenShare = __webpack_require__(503);
	
	var _ScreenShare2 = _interopRequireDefault(_ScreenShare);
	
	var _RoomChat = __webpack_require__(498);
	
	var _RoomChat2 = _interopRequireDefault(_RoomChat);
	
	var _AssignmentList = __webpack_require__(486);
	
	var _AssignmentList2 = _interopRequireDefault(_AssignmentList);
	
	var _PollList = __webpack_require__(494);
	
	var _PollList2 = _interopRequireDefault(_PollList);
	
	var _roles = __webpack_require__(46);
	
	var _RightBarReducer = __webpack_require__(69);
	
	var _Dashboard = {
	  "form-control": "_3QTibw0rkcFfD_rm05fYpe",
	  "modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
	  "modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
	  "modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
	  "modCardNav": "_3loUQ1qct_oQ4wieMS1228",
	  "modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
	  "workingCheck": "_592AUrRTUL8onhwqbxqac",
	  "mixVideo": "_2eK-0JEHV5noltLccwowgE",
	  "sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
	  "slider": "_2cGkL2aNr4JZcI0kLJh9ls",
	  "myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
	  "previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
	  "nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
	  "modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
	  "leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
	  "ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
	  "btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
	  "btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
	  "smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
	  "bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
	  "modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
	  "blueCard": "_11TZYQavvX8COjECoUgPsF",
	  "modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
	  "searchBox": "_3he4ui3qAj57b2OD0g_MrS",
	  "searchInput": "VagCUKtwyxZiLgTJt0kMV",
	  "closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
	  "showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
	  "modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
	  "modCardChild": "_2DCytLWPd8KHc237Ppml1o",
	  "modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
	  "calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
	  "myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
	  "txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
	  "mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
	  "myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
	  "modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
	  "roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
	  "linkColor": "_3kasMgaSOTifGjyZXjvxS1",
	  "lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
	  "regenerate": "_3CwInHfgvgsAlez12CnEQz",
	  "inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
	  "copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
	  "copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
	  "copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
	  "hide": "_2fFHqMt987ggp68qb7JdFy",
	  "animate": "_3SFp1mkccnXvRmsAIrzZxF",
	  "show": "FwOXzCB8nuuPUjOzsgDyv",
	  "modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
	  "startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
	  "alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
	  "audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
	  "modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
	  "txt": "kFHV6maF3bI1k2N7_R_5q",
	  "checkRight": "_2sMaWl324_9RhY6dMbTikS",
	  "infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
	  "checkBox": "KgBWCpsb2Et90D-gku9QZ",
	  "troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
	  "showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
	  "modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
	  "toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
	  "toggleRound": "h3ckwWDCix86h_Lck1kn",
	  "iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
	  "icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
	  "icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
	  "infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
	  "optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
	  "click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
	  "checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
	  "scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
	  "scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
	  "scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
	  "current": "_372awUtOsPgtfGPPnKHhSa",
	  "dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
	  "timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
	  "meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
	  "organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
	  "adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
	  "modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
	  "placeRight": "_2Xnik9BNXqFS-jPl33deSR",
	  "iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
	  "bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
	  "bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
	  "bgStart": "_3IgunDq0eAu2vDHG8XppCD",
	  "modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
	  "headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
	  "roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
	  "confMain": "_3DqSw1WO99YIEPjLT7FLrl",
	  "videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
	  "videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
	  "imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
	  "imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
	  "imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
	  "roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
	  "roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
	  "roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
	  "actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
	  "rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
	  "actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
	  "imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
	  "imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
	  "blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
	  "roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
	  "roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
	  "roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
	  "createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
	  "settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
	  "click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
	  "radio": "qxUUOVMacCUJsb9wWAT-o",
	  "radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
	  "checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
	  "checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
	  "topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
	  "cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
	  "cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
	  "smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
	  "onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
	  "onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
	  "onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
	  "onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
	  "onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
	  "GS": "gYv6Cki40O7MnS-2FaqAC",
	  "ok": "_1Lu0E7LDefbes51ctyJTSd",
	  "eV": "_2zR0VU1YVyla1NyOJsoNt",
	  "oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
	  "wO": "_3_Q6v5QVQmu3FgDIGULq9H",
	  "wA": "_2sE0qIiO12OWPJMWwoaBje",
	  "vR": "SkmcAQ-pe5bh3hsSUQGkY",
	  "vN": "aQ6tWWFJ-VTFIfjmWdAhd",
	  "vT": "_1DfSysrHxZlzt5_lQKQ5KI",
	  "vM": "_2bUxn2HXClWnGtbUfff1kk",
	  "vO": "SRVhsCSJElL2N2bncZ66l",
	  "xi": "lmPSkKyMX9pnMT4fbsRhq",
	  "cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
	  "block480": "CQcSBF6UT-a90qhoUJPZA",
	  "blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
	  "makeFull": "_15po1tkQ6kCMy_PbUji69G",
	  "workArea": "_1NAQYgBgRL0sU85k42CFpA",
	  "workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
	  "workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
	  "active": "_1ArF26g-C4U3LYU8KWRPCo",
	  "countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
	  "countCircle1": "w9r97x-TiZxNDWCuFVXX-",
	  "starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
	  "blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
	  "workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
	  "nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
	  "tableBox": "_20w-PnQsoQFJJOW3drkuod",
	  "tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
	  "tableCell": "rzgi6k_bVCkPYcosAQq-S",
	  "video480": "vGx0JzLcpR4w3ZqSu6Nmp",
	  "videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
	  "videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
	  "videoController": "_1Ign37hAc56flxBG7iE-pz",
	  "vadController": "Mdp86yCq328fUgmiBmu4V",
	  "shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
	  "shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
	  "controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
	  "openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
	  "hostController": "_2xrFY7BsSofHMEkTcGwWCL",
	  "video50": "_2IHlSfyoCPLnOpOXs8b2hX",
	  "selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
	  "speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
	  "speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
	  "videofix": "_3FaL1qNE_WulRajpajfURR",
	  "video160": "_2bulcQMuegySb8QvR4hhyA",
	  "videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
	  "conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
	  "videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
	  "fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
	  "mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
	  "subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
	  "attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
	  "scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
	  "galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
	  "gallery": "WNmBQRphY9tp_5yj1LFNa",
	  "videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
	  "video160x90": "_1byH3fApt-wi8zgcAMAJVv",
	  "searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
	  "navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
	  "addon": "_2UweSIkLiYggOPFf0_GS1t",
	  "formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
	  "btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
	  "notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
	  "notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
	  "notificationList": "_26WZcpU2IM9wIbja_r2zM_",
	  "listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
	  "bgAway": "kgCnPze4tmnUJnBY0OB_a",
	  "bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
	  "bgOffline": "_3Fg060l40snk46xcJ1ofJP",
	  "bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
	  "actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
	  "notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
	  "name": "_1MHehTYf0-emGYZtBQLmlF",
	  "new": "_8eRoDRyl4tE_u8pIOUwe1",
	  "notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
	  "hideObject": "_57kGZQ91Yjc7XHsu_wETC",
	  "hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
	  "whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
	  "breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
	  "topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
	  "topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
	  "headingTxt": "_3E9yestQl1n2YRJqne1wuI",
	  "mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
	  "pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
	  "flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
	  "flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
	  "flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
	  "flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
	  "topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
	  "topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
	  "topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
	  "dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
	  "dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
	  "selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
	  "pastTopic": "_3MIQello5WqJvKXgVxQq8x",
	  "nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
	  "select-style": "_396MZIiLZ-HHho-zgl1C4F",
	  "faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
	  "dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
	  "questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
	  "questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
	  "questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
	  "chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
	  "submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
	  "rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
	  "listTitle": "_1MEYJ804i4UDBRUufPe61T",
	  "topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
	  "authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
	  "authorName": "_6ozdfbrPgEh9x2X44pTWM",
	  "authorDisg": "_2D1NfK9OldseGrg3AXIk17",
	  "shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
	  "fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
	  "fullTopic": "_3Pli_905bfPpb5cIfqdmak",
	  "authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
	  "hrzlList": "_2xG2_aPEpjELARQTB86ef8",
	  "mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
	  "videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
	  "mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
	  "videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
	  "audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
	  "audioWidth": "dK2oAupgsDxYmadGgHYQa",
	  "resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
	  "questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
	  "dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
	  "dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
	  "timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
	  "currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
	  "popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
	  "volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
	  "contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
	  "rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
	  "chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
	  "clickWave": "LTcaWPNKuZ1DwZkpawqeK",
	  "inputMargin": "MF3QMxB5GBmImpYNYYOVC",
	  "removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
	  "removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
	  "statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
	  "statsHeader": "_285bYsv_FztKZIUtNWy5fE",
	  "statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
	  "answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
	  "formInline": "Z7FVY_mGYFLJ5PAkXt8l",
	  "resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
	  "resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
	  "resultsBody": "xzwLGWItp2MVp12qw8wVH",
	  "userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
	  "resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
	  "resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
	  "resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
	  "resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
	  "spanNames": "OCZOSIYqN7iTyeN4lz8H4",
	  "gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
	  "precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
	  "resultBg": "_8jhcRCROQvFaxY85y_xIk",
	  "resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
	  "resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
	  "broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
	  "cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
	  "cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
	  "cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
	  "boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
	  "bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
	  "bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
	  "bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
	  "broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
	  "bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
	  "handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
	  "cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
	  "cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
	  "iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
	  "headingBloack": "TQ_yU80bbvRi_74JGoMU6",
	  "askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
	  "textArea": "_3dN7ybahNCsckxhPiD07TT",
	  "textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
	  "replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
	  "repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
	  "btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
	  "btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
	  "cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
	  "btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
	  "userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
	  "avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
	  "nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
	  "avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
	  "guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
	  "notificationListGuest": "_10woS_UrLKE46ZjTd797v",
	  "selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
	  "avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
	  "guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
	  "topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
	  "questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
	  "bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
	  "avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
	  "postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
	  "postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
	  "postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
	  "postedTime": "_3JbETbcjAgExmXiR-1hDMp",
	  "postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
	  "listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
	  "postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
	  "postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
	  "postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
	  "userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
	  "expired": "_2lmG1quG5YqLe5KeEQHfuV",
	  "questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
	  "arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
	  "whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
	  "whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
	  "whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
	  "canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
	  "thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
	  "toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
	  "flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
	  "colorPallet": "gZqx-z3hQc6YEu1T43LR_",
	  "line": "_1B3Gt8Fi0K13ejNWSm_Olj",
	  "centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
	  "screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
	  "screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
	  "screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
	  "msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
	  "textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
	  "screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
	  "documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
	  "loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
	  "listBox": "_3kQmECEo829bBDN_jgTS3v",
	  "iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
	  "fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
	  "actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
	  "loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
	  "loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
	  "clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
	  "viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
	  "GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
	  "GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
	  "GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
	  "inputTxt": "WOB0iD23T16A4qvjUGMbB",
	  "GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
	  "GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
	  "sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
	  "sharing": "_2K4aaosBX43FwufpsvwsuD",
	  "roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
	  "roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
	  "roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
	  "roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
	  "avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
	  "listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
	  "avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
	  "listedMsg": "fQLv4tzdilpf6Gh24l0pj",
	  "downloadFile": "_73W96Y7HjyT210KK5B8kr",
	  "downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
	  "textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
	  "chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
	  "writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
	  "attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
	  "msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
	  "msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
	  "lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
	  "grayCard": "_14C5MY3tlKUnhIplp-P9F9",
	  "grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
	  "grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
	  "filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
	  "uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
	  "btnUpload": "_2IOozhknYZae6TZnW7Qib",
	  "helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
	  "fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
	  "heading": "_14qifIYGkwSGUJU-JdaVcA",
	  "uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
	  "controlBar": "_-urTc0azZ3-vp1NVqeeYv",
	  "remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
	  "bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
	  "bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
	  "bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
	  "urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
	  "inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
	  "wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
	  "listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
	  "ldHeader": "_1slAj86rbMftbX9t0AaHJq",
	  "ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
	  "feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
	  "feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
	  "feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
	  "feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
	  "feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
	  "circle104": "_3Aky67sZg-SMVFOPePCkQa",
	  "feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
	  "ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
	  "ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
	  "radioBlock": "_3w4E57d6-_evtHYRXhogp8",
	  "bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
	  "bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
	  "bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
	  "fbInput": "_1uXdY8_zpei10SjAdrwf3T",
	  "clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
	  "ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
	  "ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
	  "fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
	  "fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
	  "customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
	  "header": "_1TwSIsxvkVmzR5FLt8xux5",
	  "fdText": "_337STHXS8TG9ykaH0OSQ-0",
	  "fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
	  "fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
	  "midChoice": "tm2bJJNxFshKUU46rKv-k",
	  "fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
	  "fdBlock": "_1I60go8leztL3xpuoXJSHR",
	  "fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
	  "feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
	  "blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
	  "btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
	  "custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
	  "custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
	  "custFbInput": "DSZ2RL63kssI2K1aCGdCp",
	  "screenShare": "_1jdacozafgDzH4389wbZC1",
	  "loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
	  "muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
	  "muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
	  "endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
	  "endBtnHangout": "PefgFJehfFdAG6qgRskUA",
	  "selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
	  "early": "_3_xeMXpY5u3I9qrFVhxjJ4",
	  "selfVideo": "HyCIN_Szj18CUIFBvOVzr",
	  "selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
	  "frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
	  "backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
	  "flipped": "_39HG1m9XJCxv4xemiiOyiL",
	  "nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
	  "editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
	  "accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
	  "accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
	  "textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
	  "fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
	  "viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
	  "infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
	  "profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
	  "profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
	  "avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
	  "activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
	  "inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
	  "avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
	  "txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
	  "viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
	  "detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
	  "detailsLabel": "gZrvCAQaemmpNG3SODIFp",
	  "detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
	  "detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
	  "emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
	  "connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
	  "avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
	  "connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
	  "emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
	  "otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
	  "capitalize": "KppKGcFEDo_NZ826dTluU",
	  "viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
	  "showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
	  "viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
	  "hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
	  "viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
	  "datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
	  "selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
	  "scheduled": "_2avyA2LOPpcSycWlMHPaUH",
	  "pastschedule": "x-xQy4E7A2__JqHtMNGHP",
	  "txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
	  "controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
	  "tabContainer": "xcRXxsat6i1ayovZImHbk",
	  "tabContent": "_1U1PBlFztvJukf4hnZGW4T",
	  "contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
	  "contentSource": "LpxHAZQVT8QjwDiMNPwa8",
	  "contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
	  "contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
	  "controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
	  "reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
	  "cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
	  "fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
	  "formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
	  "graphBox": "_1SnrpiNio41LCfQ9PZB62t",
	  "formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
	  "formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
	  "formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
	  "rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
	  "emptyFill": "_2jogfsQjLH20deON2lOPwJ",
	  "lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
	  "reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
	  "itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
	  "itemsValue": "T_-Rux7E9Mn_irEdP5PML",
	  "camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
	  "cameraInfo": "mblzkQvrhcm5_8S324wPZ",
	  "selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
	  "uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
	  "uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
	  "deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
	  "clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
	  "yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
	  "circle24": "CjrFI5HahIAdAOjPKZFo2",
	  "yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
	  "hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
	  "hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
	  "mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
	  "videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
	  "absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
	  "iconBox": "tiI0SDpOfPW0oEsJN8nqj",
	  "spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
	  "spin": "_3PPOnKUpRgqVMMspqO9BoW",
	  "backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
	  "hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
	  "removeOption": "_3PVQHXou4BI73YFyurGNte",
	  "marksCss": "EgcJYbeHfheQ9gsE0MBNr",
	  "optainMarks": "rTUshkT8F5t28qovt97oz",
	  "studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
	  "pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
	  "feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
	  "btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
	  "confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
	  "btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
	  "requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
	  "popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
	  "popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
	  "msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
	  "msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
	  "mixFix": "Rm8qQtPGV9iknEmazrm95",
	  "mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
	  "fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
	  "screen": "_3vKpk07E4_RokFS0iRQTKc",
	  "feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
	  "closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
	  "errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
	  "docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
	  "loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
	  "AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
	  "AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
	  "topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
	  "videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
	  "videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
	  "mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
	  "videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
	  "videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
	  "videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
	  "videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
	  "videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
	  "headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
	  "footerFixed": "_3CER6mZw4OVF4ZbshrE158",
	  "modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
	  "elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
	  "minimize": "OxDwL4sly8-c12oeVQP_W",
	  "iconChecked": "T4ZzBMChxZsczOvvckZRp",
	  "iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
	  "slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
	  "toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
	  "checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx('img', {
	  src: '/images/black-icons/topics-black.png'
	});
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'topics'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'screen_share'
	});
	
	var _ref4 = _jsx('img', {
	  src: '/images/black-icons/whiteboard-black.png'
	});
	
	var _ref5 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'whiteboard'
	});
	
	var _ref6 = _jsx('img', {
	  src: '/images/black-icons/handrise-black.png'
	});
	
	var _ref7 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'hand_raise'
	});
	
	var _ref8 = _jsx('img', {
	  src: '/images/black-icons/individual-chat.png'
	});
	
	var _ref9 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'room_chat'
	});
	
	var _ref10 = _jsx('img', {
	  src: '/images/black-icons/black-assignments.png'
	});
	
	var _ref11 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'room_assignments'
	});
	
	var _ref12 = _jsx('img', {
	  src: '/images/black-icons/black-poll.png'
	});
	
	var _ref13 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'polls'
	});
	
	var _ref14 = _jsx('img', {
	  src: '/images/black-icons/1-35.png'
	});
	
	var _ref15 = _jsx(_reactIntl.FormattedMessage, {
	  id: 'sync'
	});
	
	var _ref16 = _jsx('li', {
	  className: 'pull-right'
	}, void 0, _jsx(_reactRouter.Link, {
	  className: 'clearfix'
	}, void 0, _jsx('img', {
	  src: '/images/black-icons/1-35.png'
	})));
	
	var WorkDashboard = exports.WorkDashboard = function (_Component) {
	  _inherits(WorkDashboard, _Component);
	
	  function WorkDashboard(props) {
	    _classCallCheck(this, WorkDashboard);
	
	    var _this = _possibleConstructorReturn(this, (WorkDashboard.__proto__ || Object.getPrototypeOf(WorkDashboard)).call(this, props));
	
	    _this.handlecurrent = function (e) {
	      var id = e.currentTarget.id;
	      if (_this.props.workDashboardData.sync == true && _this.props && _this.props.conferenceDetails && _this.props.conferenceDetails.imHost == true) {
	        var obj = {
	          current: id, topicList: _this.props.workDashboardData.topicList, topicContent: _this.props.workDashboardData.topicContent, tid: _this.props.workDashboardData.tid,
	          conductQuestion: _this.props.workDashboardData.conductQuestion, questionnaireId: _this.props.workDashboardData.questionnaireId, questionnaireName: _this.props.workDashboardData.questionnaireName,
	          pdfView: _this.props.workDashboardData.pdfView, fileId: _this.props.workDashboardData.fileId,
	          sync: _this.props.workDashboardData.sync, assignmentList: _this.props.workDashboardData.assignmentList, pollList: _this.props.workDashboardData.pollList
	        };
	        if (id == "handraise") {
	          obj['handraiseCount'] = 0;
	          obj['handraiseupdates'] = false;
	        } else if (id == 'roomchat') obj['roomCount'] = 0;else if (id == 'screenshare') {
	          obj['ssNotification'] = false;
	          obj['showButtons'] = _this.props.workDashboardData.showButtons;
	        }
	        _this.handleSync(obj);
	      } else if (_this.props.workDashboardData.sync == true && _this.props && _this.props.conferenceDetails && _this.props.conferenceDetails.imHost == false) {
	        if (id == "handraise") _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: id, handraiseCount: 0, handraiseupdates: false, syncCurrent: _this.props.workDashboardData.current }));else if (id == 'roomchat' && id == _this.props.workDashboardData.syncCurrent) _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: id, roomCount: 0, syncCurrent: '' }));else if (id == 'screenshare' && id == _this.props.workDashboardData.syncCurrent) _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: id, ssNotification: false, syncCurrent: '' }));else if (id == 'topicList' && id == _this.props.workDashboardData.syncCurrent) {
	          var setobj = {
	            current: id,
	            syncCurrent: ''
	          };
	          var _workDashboardData = _this.props.workDashboardData;
	          if (_workDashboardData.topicContent == false && _workDashboardData.conductQuestion == false && _workDashboardData.pdfView == false) {
	            setobj['topicList'] = true;
	          }
	          _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(setobj));
	        } else if (id == _this.props.workDashboardData.syncCurrent) _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: id, syncCurrent: '' }));
	      } else {
	        if (id == "handraise") _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: id, handraiseCount: 0, handraiseupdates: false }));else if (id == 'roomchat') _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: id, roomCount: 0 }));else if (id == 'screenshare') _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: id, ssNotification: false }));else if (id == 'topicList') {
	          var _setobj = {
	            current: id
	          };
	          var _workDashboardData2 = _this.props.workDashboardData;
	          if (_workDashboardData2.topicContent == false && _workDashboardData2.conductQuestion == false && _workDashboardData2.pdfView == false) {
	            _setobj['topicList'] = true;
	          }
	          _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(_setobj));
	        } else {
	          _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: id }));
	        }
	      }
	    };
	
	    _this.updateSScallback = function (obj) {
	      if (_this.props.conferenceDetails.imHost == true || _this.props.workDashboardData.shareRequestId != "" && _this.props.workDashboardData.shareRequestId == _this.props.workDashboardData.uid) _this.handleSSPdfSync(obj);else _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
	    };
	
	    _this.fileStatusCallback = function (obj) {
	      _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
	    };
	
	    _this.saveWhiteBoardData = function (wbData) {
	      _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ whiteBoardData: wbData }));
	    };
	
	    _this.handleSyncScroll = function (objEntity) {
	      var obj = {
	        command: 'SCROLL-SYNC-REQ',
	        content: { data: objEntity },
	        type: 'OBJECT'
	      };
	      _this.props.confObject.sendMessage(obj, 0);
	    };
	
	    _this.syncRequest = function () {
	      var objEntity = {
	        current: _this.props.workDashboardData.current, topicList: _this.props.workDashboardData.topicList, topicContent: _this.props.workDashboardData.topicContent, tid: _this.props.workDashboardData.tid,
	        conductQuestion: _this.props.workDashboardData.conductQuestion, questionnaireId: _this.props.workDashboardData.questionnaireId, questionnaireName: _this.props.workDashboardData.questionnaireName,
	        pdfView: _this.props.workDashboardData.pdfView, fileId: _this.props.workDashboardData.fileId,
	        sync: !_this.props.workDashboardData.sync, ssPdfView: _this.props.workDashboardData.ssPdfView, pdfFileName: _this.props.workDashboardData.pdfFileName, showButtons: _this.props.workDashboardData.showButtons
	        /*let objEntity = this.props.workDashboardData;
	        objEntity['sync'] = !this.props.workDashboardData.sync;*/
	
	      };var obj = {
	        command: 'SYNC-REQ',
	        content: { data: objEntity },
	        type: 'OBJECT'
	      };
	      _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ sync: !_this.props.workDashboardData.sync }));
	      _this.props.confObject.sendMessage(obj, 0);
	    };
	
	    _this.handleSync = function (objEntity) {
	      var obj = {
	        command: 'SYNC-REQ',
	        content: { data: objEntity },
	        type: 'OBJECT'
	      };
	      _this.props.confObject.sendMessage(obj, 0);
	    };
	
	    _this.handleTopicSync = function (objEntity) {
	      var obj = {
	        command: 'TOPIC-SYNC-REQ',
	        content: { data: objEntity },
	        type: 'OBJECT'
	      };
	      _this.props.confObject.sendMessage(obj, 0);
	    };
	
	    _this.handleTopicSyncCallback = function (obj) {
	      _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
	    };
	
	    _this.handleAssignmentSync = function (objEntity) {
	      var obj = {
	        command: 'ASSIGNMENT-SYNC-REQ',
	        content: { data: objEntity },
	        type: 'OBJECT'
	      };
	      _this.props.confObject.sendMessage(obj, 0);
	    };
	
	    _this.handleAssignmentSyncCallback = function (obj) {
	      _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
	    };
	
	    _this.handlePollSync = function (objEntity) {
	      var obj = {
	        command: 'POLL-SYNC-REQ',
	        content: { data: objEntity },
	        type: 'OBJECT'
	      };
	      _this.props.confObject.sendMessage(obj, 0);
	    };
	
	    _this.handlePollSyncCallback = function (obj) {
	      _this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
	    };
	
	    _this.handleSSPdfSync = function (objEntity) {
	      var obj = {
	        command: 'SYNC-SS-PDF-REQ',
	        content: { data: objEntity },
	        type: 'OBJECT'
	      };
	      _this.props.confObject.sendMessage(obj, 0);
	    };
	
	    _this.state = {
	      noConference: false
	    };
	
	    _this.HandleSyncCurrent = _this.HandleSyncCurrent.bind(_this);
	    _this.props.confObject.SyncListener(_this.HandleSyncCurrent);
	
	    /*this.getRoomNotification = this.getRoomNotification.bind(this);
	    this.props.confObject.RoomNotificationListener(this.getRoomNotification);*/
	
	    _this.handraiseNotification = _this.handraiseNotification.bind(_this);
	    _this.props.confObject.HandraiseNotificationListener(_this.handraiseNotification);
	
	    _this.handraiseAnsNotification = _this.handraiseAnsNotification.bind(_this);
	    _this.props.confObject.HandraiseAnsNotificationListener(_this.handraiseAnsNotification);
	    _this.handleScroll = _this.handleScroll.bind(_this);
	
	    _this.chageScroll = _this.chageScroll.bind(_this);
	    _this.props.confObject.SyncScrollListener(_this.chageScroll);
	
	    _this.handleTopicSyncCallback = _this.handleTopicSyncCallback.bind(_this);
	    _this.props.confObject.TopicListener(_this.handleTopicSyncCallback);
	
	    _this.handleAssignmentSyncCallback = _this.handleAssignmentSyncCallback.bind(_this);
	    _this.props.confObject.AssignmentListener(_this.handleAssignmentSyncCallback);
	
	    _this.handlePollSyncCallback = _this.handlePollSyncCallback.bind(_this);
	    _this.props.confObject.PollListener(_this.handlePollSyncCallback);
	
	    _this.HandleSyncSSPdf = _this.HandleSyncSSPdf.bind(_this);
	    _this.props.confObject.SyncSSPdfListener(_this.HandleSyncSSPdf);
	
	    _this.handleSSNotification = _this.handleSSNotification.bind(_this);
	    _this.props.confObject.ScreenShareNotificationListener(_this.handleSSNotification);
	    return _this;
	  }
	
	  _createClass(WorkDashboard, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var obj = {
	        roomKey: this.props.roomKey
	      };
	      this.props.dispatch((0, _WorkDashboardActions.getRoomDetails)(obj));
	      if (this.props.workDashboardData.sync == true && this.props.workDashboardData.current == '') {
	        if (this.props.features.indexOf("Topics") != -1) {
	          this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: 'topicList', topicList: true, roomKey: this.props.roomKey, uid: this.props.uid }));
	          // this.props.dispatch(getConferenceTopicData(obj));
	          this.props.dispatch((0, _WorkDashboardActions.roomChatNotifications)(this.props.roomKey));
	        } else {
	          this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: 'roomchat', roomKey: this.props.roomKey, roomCount: 0, uid: this.props.uid }));
	        }
	      } else if (this.props.workDashboardData.sync == true) {
	        this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ uid: this.props.uid, roomKey: this.props.roomKey }));
	      } else if (this.props.workDashboardData.current == '') {
	        if (this.props.features.indexOf("Topics") != -1) {
	          this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: 'topicList', topicList: true, roomKey: this.props.roomKey, uid: this.props.uid }));
	          // this.props.dispatch(getConferenceTopicData(obj));
	          this.props.dispatch((0, _WorkDashboardActions.roomChatNotifications)(this.props.roomKey));
	        } else {
	          this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: 'roomchat', roomKey: this.props.roomKey, roomCount: 0, uid: this.props.uid }));
	        }
	      } /*else if(this.props.workDashboardData.current == 'topicList'){
	        this.props.dispatch(getConferenceTopicData(obj));
	        }*/
	
	      // let that = this;
	      // if (typeof(chrome) !== "undefined") {
	      //   chrome.runtime.sendMessage('jckdbnkecmmpemaghimijhehobdeplmd',{getStream:false}, function (response){
	      //     console.log("response === ",response);
	      //     if(response != undefined)
	      //       that.props.dispatch(setWorkDashboard({ScreenExtInstalled : true}));
	      //   });
	      // }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState({ noConference: nextProps.noConference });
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.confObject.clearWorkDashboardListener();
	    }
	  }, {
	    key: 'handleScroll',
	    value: function handleScroll(event) {
	      if (this.props.conferenceDetails.imHost == true && this.props.workDashboardData.sync == true) {
	        var top = event.target.scrollTop;
	        var position = event.target.scrollHeight - event.target.clientHeight;
	        var percentage = top / position;
	        this.handleSyncScroll({ percentage: percentage, id: this.props.uid, current: this.props.workDashboardData.current });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var cls_workArea = 'pull-left ' + _Dashboard2.default.blockLeftWArea;
	      if (this.props.rightBar.arrow) cls_workArea += 'slideBlockLA';
	      if (this.state.noConference) {
	        cls_workArea = 'pull-left ' + _Dashboard2.default.blockLeftWArea + ' ' + _Dashboard2.default.makeFull;
	      }
	      var cls_areaTabs = 'clearfix ' + _Dashboard2.default.presenterTabs;
	      var cls_topicAuthor = 'clearfix ' + _Dashboard2.default.topicAuthor;
	      var cls_authorsBox = 'clearfix ' + _Dashboard2.default.authorsBox;
	
	      // console.log("this.props.workDashboardData.roomCount", this.props.workDashboardData.roomCount);
	
	      // className={styles.whiteBoardContainer}
	      var cls_wb = _Dashboard2.default.whiteboard + ' hidden-xs hidden-sm';
	      var cls_wb_hidden = _Dashboard2.default.hideObject + ' hidden-xs hidden-sm';
	      var cls_sh = '' + _Dashboard2.default.whiteboard;
	      var cls_rc = '' + _Dashboard2.default.whiteboard;
	      var cls_sync = _Dashboard2.default.active + ' pull-right';
	      var cls_active_hidden = _Dashboard2.default.active + ' hidden-xs hidden-sm';
	      var cls_screenshare = this.props.workDashboardData.ssNotification == true ? _Dashboard2.default.sharingImg + ' clearfix' : "clearfix";
	      return _jsx('div', {
	        className: cls_workArea
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.workArea
	      }, void 0, _jsx('div', {
	        className: _Dashboard2.default.workAreaHeader
	      }, void 0, _jsx('ul', {
	        className: 'clearfix'
	      }, void 0, this.props.features.indexOf("Topics") != -1 ? _jsx('li', {
	        className: this.props.workDashboardData.current == 'topicList' ? _Dashboard2.default.active : ''
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: 'clearfix',
	        onClick: this.handlecurrent,
	        id: 'topicList'
	      }, void 0, _ref, _jsx('span', {
	        className: _Dashboard2.default.blockSpan
	      }, void 0, _ref2))) : null, !this.state.noConference && this.props.features.indexOf("Screen Share") != -1 ? _jsx('li', {
	        className: this.props.workDashboardData.current == 'screenshare' ? _Dashboard2.default.active : ''
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: cls_screenshare,
	        onClick: this.handlecurrent,
	        id: 'screenshare'
	      }, void 0, _jsx('img', {
	        className: _Dashboard2.default.sharing,
	        src: '/images/black-icons/screenshare-black.png'
	      }), _jsx('span', {
	        className: _Dashboard2.default.blockSpan
	      }, void 0, _ref3))) : null, !this.state.noConference && this.props.features.indexOf("Whiteboard") != -1 ? _jsx('li', {
	        className: this.props.workDashboardData.current == 'whiteboard' ? cls_active_hidden : 'hidden-xs hidden-sm'
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: 'clearfix',
	        onClick: this.handlecurrent,
	        id: 'whiteboard'
	      }, void 0, _ref4, _jsx('span', {
	        className: _Dashboard2.default.blockSpan
	      }, void 0, _ref5))) : null, this.props.features.indexOf("Q&A") != -1 ? _jsx('li', {
	        className: this.props.workDashboardData.current == 'handraise' ? _Dashboard2.default.active : ''
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: 'clearfix',
	        onClick: this.handlecurrent,
	        id: 'handraise'
	      }, void 0, _ref6, this.props.workDashboardData.handraiseCount > 0 && this.props.workDashboardData.handraiseupdates == true ? _jsx('span', {
	        className: _Dashboard2.default.countCircle1
	      }, void 0, this.props.workDashboardData.handraiseCount, '+') : this.props.workDashboardData.handraiseCount > 0 ? _jsx('span', {
	        className: _Dashboard2.default.countCircle
	      }, void 0, this.props.workDashboardData.handraiseCount) : this.props.workDashboardData.handraiseupdates == true ? _jsx('span', {
	        className: _Dashboard2.default.countCircle
	      }, void 0, this.props.workDashboardData.handraiseCount, '+') : '', _jsx('span', {
	        className: _Dashboard2.default.blockSpan
	      }, void 0, _ref7))) : null, _jsx('li', {
	        className: this.props.workDashboardData.current == 'roomchat' ? _Dashboard2.default.active : ''
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: 'clearfix',
	        onClick: this.handlecurrent,
	        id: 'roomchat'
	      }, void 0, _ref8, this.props.workDashboardData.roomCount > 0 ? _jsx('span', {
	        className: _Dashboard2.default.countCircle
	      }, void 0, this.props.workDashboardData.roomCount) : null, _jsx('span', {
	        className: _Dashboard2.default.blockSpan
	      }, void 0, _ref9))), this.props.role == _roles.Roles.Student ? _jsx('li', {
	        className: this.props.workDashboardData.current == 'assignmentList' ? _Dashboard2.default.active : ''
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: 'clearfix',
	        onClick: this.handlecurrent,
	        id: 'assignmentList'
	      }, void 0, _ref10, _jsx('span', {
	        className: _Dashboard2.default.blockSpan
	      }, void 0, _ref11))) : null, _jsx('li', {
	        className: this.props.workDashboardData.current == 'pollList' ? _Dashboard2.default.active : ''
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: 'clearfix',
	        onClick: this.handlecurrent,
	        id: 'pollList'
	      }, void 0, _ref12, _jsx('span', {
	        className: _Dashboard2.default.blockSpan
	      }, void 0, _ref13))), this.props && this.props.conferenceDetails && this.props.conferenceDetails.imHost == true ? _jsx('li', {
	        className: this.props.workDashboardData.sync == true ? cls_sync : 'pull-right'
	      }, void 0, _jsx(_reactRouter.Link, {
	        className: 'clearfix',
	        onClick: this.syncRequest,
	        id: 'sync'
	      }, void 0, _ref14, _jsx('span', {
	        className: _Dashboard2.default.blockSpan
	      }, void 0, _ref15))) : this.props.workDashboardData.sync == true ? _ref16 : null)), _react2.default.createElement(
	        'div',
	        { className: _Dashboard2.default.workAreaBody, onScroll: this.handleScroll, ref: 'scrollDiv' },
	        this.props.workDashboardData.current == "topicList" ? _jsx(_TopicList2.default, {
	          roomName: this.props.workDashboardData.roomName,
	          syncCallback: this.handleTopicSync,
	          roomKey: this.props.roomKey,
	          imHost: this.props.conferenceDetails.imHost,
	          confObject: this.props.confObject,
	          roomId: this.props.workDashboardData.roomId,
	          role: this.props.role,
	          isGuest: this.props.isGuest
	        }) : null,
	        _jsx('div', {
	          className: !this.state.noConference && this.props.workDashboardData.current == 'whiteboard' ? cls_wb : cls_wb_hidden
	        }, void 0, _jsx(_WhiteBoard2.default, {
	          confObject: this.props.confObject,
	          whiteBoardData: this.props.workDashboardData.whiteBoardData,
	          saveWhiteBoardData: this.saveWhiteBoardData
	        })),
	        this.state.noConference ? null : this.props.features.indexOf("Screen Share") != -1 && !this.state.noConference ? _jsx('div', {
	          className: this.props.workDashboardData.current == 'screenshare' ? cls_sh : _Dashboard2.default.hideObject
	        }, void 0, _jsx(_ScreenShare2.default, {
	          screenStream: this.props.screenStream,
	          confObject: this.props.confObject,
	          updateSS: this.updateSScallback,
	          fileStatusCallback: this.fileStatusCallback,
	          imHost: this.props.conferenceDetails && this.props.conferenceDetails.imHost ? this.props.conferenceDetails.imHost : false,
	          role: this.props.role,
	          hostId: this.props.conferenceDetails && this.props.conferenceDetails.hostId ? this.props.conferenceDetails.hostId : ''
	        })) : null,
	        this.props.workDashboardData.current == 'handraise' ? _jsx(_Handraise2.default, {
	          uid: this.props.workDashboardData.uid,
	          confObject: this.props.confObject,
	          roomKey: this.props.workDashboardData.roomKey,
	          noConference: this.state.noConference
	        }) : null,
	        this.props.workDashboardData.current == 'roomchat' ? _jsx(_RoomChat2.default, {
	          uid: this.props.workDashboardData.uid,
	          roomKey: this.props.roomKey,
	          confObject: this.props.confObject,
	          noConference: this.state.noConference,
	          imHost: this.props.conferenceDetails.imHost
	        }) : null,
	        this.props.role == _roles.Roles.Student ? this.props.workDashboardData.current == "assignmentList" ? _jsx(_AssignmentList2.default, {
	          roomKey: this.props.roomKey,
	          roomName: this.props.workDashboardData.roomName,
	          syncCallback: this.handleAssignmentSync,
	          imHost: this.props.conferenceDetails.imHost,
	          confObject: this.props.confObject,
	          isGuest: this.props.isGuest
	        }) : null : null,
	        this.props.workDashboardData.current == "pollList" ? _jsx(_PollList2.default, {
	          roomKey: this.props.roomKey,
	          roomName: this.props.workDashboardData.roomName,
	          syncCallback: this.handlePollSync,
	          imHost: this.props.conferenceDetails.imHost,
	          confObject: this.props.confObject,
	          roomId: this.props.workDashboardData.roomId,
	          role: this.props.role,
	          isGuest: this.props.isGuest
	        }) : null
	      )));
	    }
	
	    /////////////////////////////////
	
	  }, {
	    key: 'chageScroll',
	    value: function chageScroll(obj) {
	      if (obj.id != this.props.uid) {
	        this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ current: obj.current }));
	        var scrollDiv = this.refs.scrollDiv;
	        var mytop = scrollDiv.scrollTop;
	        var position = scrollDiv.scrollHeight - scrollDiv.clientHeight;
	        var top = obj.percentage * position;
	        scrollDiv.scrollTop = top;
	      }
	    }
	  }, {
	    key: 'HandleSyncCurrent',
	    value: function HandleSyncCurrent(obj) {
	      var objEntity = null;
	      if (obj.current == 'handraise') objEntity = { sync: obj.sync, current: obj.current, handraiseCount: 0, handraiseupdates: false };else if (obj.current == 'roomchat') objEntity = { sync: obj.sync, current: obj.current, roomCount: 0 };else if (obj.current == 'topicList') objEntity = Object.assign(obj);else if (obj.current == 'assignmentList') objEntity = Object.assign(obj);else if (obj.current == 'pollList') objEntity = Object.assign(obj);else if (obj.current == 'screenshare') {
	        objEntity = Object.assign(obj);
	        objEntity["ssNotification"] = false;
	        // objEntity = {sync : obj.sync, current : obj.current, ssNotification : false, showButtons : obj.showButtons};
	      } else if (obj.current == 'whiteboard') {
	        if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {
	          console.log("mobile view");
	          objEntity = { sync: obj.sync };
	        } else {
	          objEntity = { sync: obj.sync, current: obj.current };
	        }
	      } else {
	        objEntity = { sync: obj.sync, current: obj.current };
	      }
	      this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(objEntity));
	    }
	  }, {
	    key: 'handraiseNotification',
	    value: function handraiseNotification(obj) {
	      // console.log("obj in handraiseNotification === ", obj);
	      if (this.props.workDashboardData.current != 'handraise' && obj.status == true) {
	        this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ handraiseCount: this.props.workDashboardData.handraiseCount + 1 }));
	      } else if (this.props.workDashboardData.current != 'handraise' && obj.status == false) {
	
	        //changes done for handraise count(Responsible : Prateek, Date : 21/08/2017)
	        this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ handraiseCount: this.props.workDashboardData.handraiseCount - 1 }));
	        // console.log("delete question");      
	      }
	    }
	  }, {
	    key: 'handraiseAnsNotification',
	    value: function handraiseAnsNotification(obj) {
	      if (this.props.workDashboardData.current != 'handraise') {
	        this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ handraiseupdates: true }));
	      }
	    }
	  }, {
	    key: 'HandleSyncSSPdf',
	    value: function HandleSyncSSPdf(obj) {
	      if (this.props.workDashboardData.current != 'screenshare') {
	        obj['ssNotification'] = true;
	      }
	      this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)(obj));
	    }
	  }, {
	    key: 'handleSSNotification',
	    value: function handleSSNotification(obj) {
	      if (this.props.workDashboardData.current != 'screenshare') {
	        this.props.dispatch((0, _WorkDashboardActions.setWorkDashboard)({ ssNotification: true }));
	      }
	    }
	
	    /////////////////////////////////
	
	  }]);
	
	  return WorkDashboard;
	}(_react.Component);
	
	// Retrieve data from store as props
	
	
	function mapStateToProps(state) {
	  return {
	    intl: state.intl,
	    dashboardData: (0, _UserDashboardReducer.dashboardData)(state),
	    conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state),
	    workDashboardData: (0, _WorkDashboardReducer.workDashboardData)(state),
	    rightBar: (0, _RightBarReducer.rightBar)(state)
	  };
	}
	
	WorkDashboard.contextTypes = {};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(WorkDashboard);

/***/ },

/***/ 515:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _component = {
		"form-control": "QmIrbtmLmFNpHdWMqFMWS",
		"innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
		"colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
		"error": "_3jAfmA6J7YmNDyB2VfsCxP",
		"mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
		"dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
		"iElement": "_2crZNiFs8z8oNhzPDC1qOE",
		"oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
		"iLabel": "_3Pyvct_srCoSvJCgGG41jw",
		"oLabel": "NsxWZpxBqBX8wky_O477_",
		"iForm": "_3IlToa7pigrSS8KWut_dJ8",
		"oForm": "_3N0YNUcfI5U02VSmBEbYot",
		"iFormField": "_12yKSn29WLZIE6fvGQfcrN",
		"oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
		"iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
		"oFormGroup": "_386CxczA49XX2-ejr3Qe55",
		"formNext": "ccTxjcG6_GZO9OgzW33HT",
		"iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
		"oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
		"iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
		"oContainer": "_2tEAAtqgoutuOUU96rNvv1",
		"iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
		"oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
		"iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
		"iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
		"whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
		"iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
		"active": "_2fF1Q9nO2O_1B8Ldb4RM52",
		"scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
		"errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
		"errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
		"whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
		"greyCard": "_34l9W17Mt1koxHLd1yUqgk",
		"reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
		"countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
		"react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
		"ad": "N3bKXyhfwvWT3eAEC9Nno",
		"ae": "taXUT8yfjgRMeSH3rMNxy",
		"af": "_2vH4qShCgBPBO4GR8BdNvd",
		"ag": "n8QfWtvpZLMpatCUqX2Td",
		"ai": "_3fPX_RcpesOPxFsmsaygCE",
		"al": "_1T12tbcC6990b-fIMG5LYW",
		"am": "_31HdarMDfXvAgjizVUoeHk",
		"ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
		"ar": "_2qJleMgRbIErIrx3kQF57O",
		"as": "_2ZPVYL8Vjn-vdWZToCEhjN",
		"at": "_1hWilvnrVbANEHRyLGlF-m",
		"au": "_2zJE4K6o-ftWqhb3exXZgk",
		"aw": "_1UroMxX5JHt9bjGdHwa1OY",
		"az": "_-Y2xueZ_1mEtB9YDOqEGB",
		"ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
		"bb": "_34600Kl8Wac9Hx7S3-3U6b",
		"bd": "_3WBX90V5VJXA7-vSUfEWCh",
		"be": "BcK33edOPcbYdkxxvOApy",
		"bf": "ShN64-J7UZdswoQjkf7L_",
		"bg": "_2A9PgkQEF5_KbvHvDf6_lY",
		"bh": "_10p3rxNRYOhv8-BtZuq1w8",
		"bi": "_6MzP1qXXDFAZVL7nBmRiH",
		"bj": "_2U8H1sji9LfDEW706KyKvF",
		"bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
		"bn": "PgMDvF79WHl3kaklOmhw3",
		"bo": "_7MheGVInaTi-QLxw5PiUi",
		"br": "_1BDNUyT0cHDlbCBFgrrLkJ",
		"bs": "_3vcASZB5bu7mJAzTzaRkWe",
		"bt": "esu4pvyd9ZFWrf-etnrva",
		"bw": "_2Hbv1I361RJFK3Ph2xPlu_",
		"by": "_2tbYam6Og8RAicMhX9SXvI",
		"bz": "_3xB704PIgqFnU2zTG-JZFN",
		"ca": "_36FyK29nkNl9Ez7yWh04AS",
		"cd": "_9PnHTqK1pSn_GIAbBtPT2",
		"cf": "_2LgMF7o1A3a2cgw5jkpvZV",
		"cg": "_3hYc9Y3UdCphltZKe2vJWk",
		"ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
		"ci": "FoSGkvvMDFAVcvsZBWX-Z",
		"ck": "_1742IgEaHW3SZU7h_-nkwr",
		"cl": "_36IaMt7ntEwUsH4lwN4tW-",
		"cm": "_1N8krqbPtlsEVsh6SaCetm",
		"cn": "IfkD3fwbUSx9FZflX6iIU",
		"co": "_3Y7u7ONzxyZVjZYzS1OHTr",
		"cr": "Gw5Qz4qBNZjPDmpQmi-d2",
		"cu": "ZuHtEp_knwZcbwTTJkRgI",
		"cv": "o6BzJCyjRH1pOsf_HpbQ6",
		"cw": "hRElJCQXyNIITDZ6UQVut",
		"cy": "_2cHKWrINPNO6L8BEOdtJCG",
		"cz": "nS617LE8Qcckdv9HJTWpt",
		"de": "fqJD93WBywDPs0lrLEXLT",
		"dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
		"dk": "_3fpBLMtuUi0kowy3ziMRYd",
		"dm": "_3gMwGkQW-OGFx1U7vd7VMD",
		"do": "G9EZGjpXLJUyQuREesyGO",
		"dz": "_3Nka0vwv6nZpeugyuqYQIJ",
		"ec": "_18t83SdIOs8EY6iF0zV0CZ",
		"ee": "_1miCbYr55XmBKvcUu6XetR",
		"eg": "_1T55wMh1svM7M5QGxFM2ex",
		"er": "c0Ab9spCQ4VnXr_6xijnD",
		"es": "_1lutiEL9tJpdNgKmnTT6Ld",
		"et": "_2GGXIPO2kOV6CUsu65V4Z3",
		"fi": "_1I-g5oWpQznT5QZuBfQ8A",
		"fj": "_3oeTP_GhC_XzsjzHW86oDc",
		"fk": "_3-_BjK4NArHS0nyf0DLc4F",
		"fm": "_1WQYGDC-zTatxog3SIwE80",
		"fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
		"fr": "_3-mqatBXfaTfex8LWjnIDA",
		"bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
		"mf": "_34f4ya9mcbpIcQPgHJ4I6c",
		"ga": "_15_iO4CJaXbX7PySxoldPF",
		"gb": "_1vZuFSSey59_ixozre-0L_",
		"gd": "_26Ub0jcjDpVD4nwM7m5n4e",
		"ge": "_27ctDR0Hf6HO15MgHS8wyh",
		"gf": "_2S6C39D4wNBuVSqzYM5Ldy",
		"gh": "_3vjGi6-umA-RzwxRFaTfNN",
		"gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
		"gl": "_1OTvyS4D4UOkymKuDLxUdx",
		"gm": "_3-0gezNOVCHKzaLYGUySo2",
		"gn": "_8f6uadrEfnS9IX8DEIpKO",
		"gp": "_36yEj9UcEbZcI0WJvgmk0B",
		"gq": "xHX18x9xk7PhDBlgsvnad",
		"gr": "HTk_eFej1VrCiBuKBIfLT",
		"gt": "hgmUbzxaHNZNL6frPhPeb",
		"gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
		"gw": "_36JwaXqhh4gBrIvAy4c1KO",
		"gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
		"hk": "_1mT74O5OVtonPLmYnVVOu7",
		"hn": "_1ze0KI-TYxTrDcXlMOu24s",
		"hr": "ZIDUSRfcbDCZTyhqWGPob",
		"ht": "Y65Ad5pf3z7ufcknP0vhk",
		"hu": "_3EHKICvcensXt5hEu8Nkfs",
		"id": "_3oZE8uvxIFK7M9DCEtsSCD",
		"ie": "_2RNmpg94YYioQp2fWyz_xn",
		"il": "_2Mq_no7KYxPp2NSLGS1Tcs",
		"in": "_1UlEZ269GihRa58c5mCEBN",
		"io": "_3ovelrc7S_DdmXxL-8uuwk",
		"iq": "_3VSlK6DYHrBgKbkE2Rng2N",
		"ir": "NRX2sFBmuPSJ9EOigyuEP",
		"is": "_25HaTNE7x74CJO9S1mnm4I",
		"it": "_1-LmlhbrcpKN-xjESmR_sO",
		"jm": "VsvDBply-4FtMoJhi8Cvu",
		"jo": "yEE3hbkzWK8CSCrCJibCo",
		"jp": "_3oxjjz1uD2cX2QsoSToLgz",
		"ke": "_1ksOT6KMPd99EWuWCXPga_",
		"kg": "_2CMnR3yv5DGwDc8p3uoOjp",
		"kh": "_927b1QnaSWnN35i3bVewJ",
		"ki": "_2CuDp55lqYTpFp68D4IWep",
		"km": "_3tvMTeZYZMzBB9bGn9lV9E",
		"kn": "_6kbCvwc22pJX0tNv3HToQ",
		"kp": "_3tIPOe5PNrHH-bgCGaZTJj",
		"kr": "_2653rpVUuy3ETaw1mogdnF",
		"kw": "_1SKg_lTe0ShbPSOl44eKjp",
		"ky": "tgj8SOv7bYoF7qfbbQWNG",
		"kz": "bchn50J152EdQa0zf3k5u",
		"la": "mu9oycLgpKX8_yLLkR5b9",
		"lb": "_2TcAFbagIrNyc6mgzRVNW0",
		"lc": "_2IFItnUNT-albvpN-ksxd2",
		"li": "_3_E6nQspv6zJQLQI24puaS",
		"lk": "_2M2wq3qQhGeUegbBTs7ilH",
		"lr": "L4o4xOg0s6QbasyIRPgyF",
		"ls": "LhBB6SRin61WSFtUwaEfe",
		"lt": "ITDUphrnMkKItKGMVHZf8",
		"lu": "_1mVW30sc4i-1M8tDPCQlL",
		"lv": "_3rq6vE2IagAsGI6iESAcJq",
		"ly": "_3se_Nzm1WQrEN3VZYiJJrv",
		"ma": "_fSDiNxp_jjfqkQcWffDM",
		"mc": "_2hRTRZeBtDGN4mNeWBZVgB",
		"md": "_26jDl0skadEwmUYDGmEzST",
		"me": "_388lJj_7sQdyd9HL7pMrar",
		"mg": "_3aFoqVWcvG3p47Vwa6UuoE",
		"mh": "_1YHi6OtXmKfP15ZNbwYGgy",
		"mk": "_9QVyhHcp8yH762J8fWXhC",
		"ml": "yYD99PoyhgFI4912_qoyJ",
		"mm": "URzk8-j7LcySpGUMJf_Qk",
		"mn": "_1J-lktQUTK0rydBz3foJGF",
		"mo": "_1sbL0zhHof-KbfGWu2qjqF",
		"mp": "_1tJjJlSjRw5AnqcXXmGwCI",
		"mq": "fHob9sxaJrTuqSc0xL744",
		"mr": "t-Bmj7a31aA-IwcRcL0ua",
		"ms": "_2xyT54DQP62zWDySH7-Kdy",
		"mt": "_1Ul_OlGODc8S0QplVq94PV",
		"mu": "_1yIBERRJqnV33pTq2VpKRc",
		"mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
		"mw": "_3i8n-5-htdGNJLgn96O21",
		"mx": "_16-6zoyiVzSGB1O72cUTzV",
		"my": "_3W2P0D9eTN4BQoOcThOsaM",
		"mz": "wJ8icX7Asp3dSImkXOdTM",
		"na": "_1qt_F94mybbX5kr0ArtN-Z",
		"nc": "h82AMIuCGdKf69Hc_nM6D",
		"ne": "_2mVa5nGsijzD93WRl8dk64",
		"nf": "_3XQ9oUH_84SsdZLjpVRuqT",
		"ng": "_1uyyH1GZjsEk3YpaUSmmG6",
		"ni": "_22_3H6UeFo26o3fSavtQaX",
		"nl": "_93asfBYgR8C7bEDucZO8l",
		"bq": "_37A1nwIz7Z3obwUjmliw4s",
		"no": "_2-sVmkWiLn_ogTikc0c0Eg",
		"np": "_1PqZSwf5cuMNmbE7bpKe67",
		"nr": "_9q5Rg9Xn0G2buivFSGySP",
		"nu": "RLhVdyjL9Cex8ekaJqirU",
		"nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
		"om": "_9mZYNhgBLiQg-j1FeVprJ",
		"pa": "_3S7TrzxJIEYVghUMVHB6E7",
		"pe": "_3V5sP7VvdGOFqApj7POYl2",
		"pf": "_1YzdrkyHO-eCcEFF-hjZl7",
		"pg": "ddWAanlQJPlB0QDWO6dAF",
		"ph": "_2TGbmCcqHlJFCssz78MxOs",
		"pk": "_2JerTABYGCUN8FLjpnDzKy",
		"pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
		"pm": "_29Hoo7EsoSHtvRFvlVg2cD",
		"pr": "_3_pkwz60KLoYcbKwaRvIsS",
		"ps": "_3jenITZ_yUYS7kU1HwFEHj",
		"pt": "_1vz8ABWy5Yd43_JhaTWq9u",
		"pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
		"py": "_1_W41pJLcGMRhLdU997clv",
		"qa": "Z0tjAakoNSOs14KuenmRi",
		"re": "_3k5KF4jzE7HUitQw9MQKnp",
		"ro": "_2b8XhT3-7NgjAC8gJJkpis",
		"rs": "_2MUJr9MQbiKRTd_g0TaRQr",
		"ru": "HjzPW2CxxNMSGZw1ugFW7",
		"rw": "_23TGIOoPmB9QYqIPG6W3tA",
		"sa": "_34WM8rSonfayW0vJ3koqJS",
		"sb": "_3486rZNsCjvTmIoHbjK8mG",
		"sc": "_3meAM_iQCU6MyfPQJTN3yl",
		"sd": "_2x6XeHNF__4s9VVfFXCJhO",
		"se": "_66VDclGQXxpdUR8uE3ZFa",
		"sg": "tv3I_hfLcUJ_8i9ewVcUz",
		"sh": "_1syDbbhbumwMwwD7Dwkb1V",
		"si": "_3jsffwJjGr2sMEofSTTGkG",
		"sk": "_1EpYAUcQLCqbYB48Auixqb",
		"sl": "_3STJQv9nY5mol4cW82D2ci",
		"sm": "_9aTR-AZMTaYHRmDVAyFTM",
		"sn": "_3mTatYTWeJQQACfV7xzRhi",
		"so": "_1LnWon2slwLMqAHzhkRT4c",
		"sr": "_1GSedFwSsf5isgOi3p0x6U",
		"ss": "_1sq99LOjKKgery3luOXOFn",
		"st": "_1O6vYx_NaXFBAs1qYxgwaB",
		"sv": "_10D9RGnRzUv14bYWQaC23c",
		"sx": "KonDEEzH2JzIWsVUBzFdY",
		"sy": "_1ZAnqGYeixOJVFwwt6hNIo",
		"sz": "_3FeOFkec3sXYbvQhWDdIM7",
		"tc": "_1FZvldKEV-vz12TyyNfEf",
		"td": "_31fysfDRtTWVKcX_UjX0ty",
		"tg": "H60Kyr6MsF6nvRz5l7EfN",
		"th": "SHZkbUz1c_H_zDOfxLc4",
		"tj": "_2MRI0fA4OLgepXVooYMu9H",
		"tk": "_1W959S9LHLCKhz3xi4MpHe",
		"tl": "_1lMF_0nwQXTyBRRzRj7hBF",
		"tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
		"tn": "_2MeGi_bqLVuCaRtJzs3QqA",
		"to": "_3egwC_50WENVPaap_uwXr8",
		"tr": "_2KiPy3o6m7JCKQWPY2fI1d",
		"tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
		"tv": "_2D9VWSmHkhgNemAaIKF_cp",
		"tw": "_2J7nVAh1zEa7kV5Ba51CLV",
		"tz": "_2acF96LLqMjlbfMX1oiAjT",
		"ua": "_2rr3Tyr8dP6vDvE0khEDKT",
		"ug": "D7gjzKmlr78rNWXXw90np",
		"us": "_1l5RtWI_acgLVeCd5fjgHG",
		"uy": "_1zX6hTsIa2TtL6dgR47eQ9",
		"uz": "_29NUL3VtwK1_RWUyPsY2ei",
		"va": "_39kTgRBkhqqGVLUTJvK_67",
		"vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
		"ve": "_3Lk2Svkm2NTAVpUfiY_No5",
		"vg": "_3SiYuGrNzW9DNkXwTZugyj",
		"vi": "_2BiiERObu5xcE6P1SZxLdj",
		"vn": "_3kSg6iW0KLoUpJ0g70fckK",
		"vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
		"wf": "Arz0xEqJcbKbLmPz_tXTS",
		"ws": "_3oTaxcmbTriEd90-cXNqD8",
		"ye": "gxtmCiQO2ao4JTQXuRUIJ",
		"za": "_25HyrYKmQQAteF_LwADnIt",
		"zm": "Kui2u7hZHcNBqlzbqR-vQ",
		"zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
		"hide": "_2kO_U0LXcg71jJA6RSia2e",
		"v-hide": "_2HBc009zwTsSlkh8P8tH10",
		"invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
		"flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
		"open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
		"selected-flag": "_10c169vRt8V92_nQ_S0KtR",
		"flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
		"arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
		"up": "_2ykRnfq4f2nlmZGfvzrn92",
		"country-list": "UlTusogWL2urjgGgLNpcD",
		"divider": "_2zMaTbM3nSdE07wOs7YYRt",
		"country": "uL848pHFWhb_G94Ak-KX5",
		"dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
		"highlight": "BLa_2aA2PkYD2PsO2fvNC",
		"country-name": "_3ih_ovRiGmAkpjxuz63nhk",
		"uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
		"fileUpload": "_2WENukerx3mNXkTyu0UXQf",
		"uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
		"upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
		"blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
		"feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
		"errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
		"gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
		"red": "_3wj0AXV9gqX9YG1nk-2u9J",
		"green": "_3KPVxc3su8ewtuKZgu8TGv",
		"orange": "_3cLlE5QI9XJwY6e7jO5bLg",
		"capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
		"importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
		"importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
		"importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
		"icon": "_12rnwIUewKT2PdtWMnNyD5",
		"importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
		"broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
		"broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
		"btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
		"textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
		"spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
		"pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
		"lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
		"removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
		"inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
		"popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
		"dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
		"dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
		"applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
		"filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
		"btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
		"assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
		"pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
		"assTab": "y4LW63OuadI0JWTQBnbJ1",
		"heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
		"radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
		"wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
		"leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
		"rightBox": "DP21PoKxwKk_vJyOuQTcr",
		"gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
		"actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
		"gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
		"actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
		"gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
		"morePref": "JBm94eKPIFI8vfiroATJ6",
		"tile": "_1Ssp2zTovh7AwJWuRkgnge",
		"tileItems": "_3cDqgy8AedDYzhy8Euosis",
		"tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
		"tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
		"category": "_2Ow56TBY2Y24yY5SjVRU4l",
		"innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
		"maxScore": "_3uL97t2vemfuAs83cAFhjE",
		"maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
		"scored": "_12gGWK_s69JBGzOAX7ClkT",
		"scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
		"remTile": "_3vgBsvWRGVVRwIEDn1TquO",
		"tileBody": "dF1WC_PeNjG87K2XGMIcS",
		"tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
		"gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
		"gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
		"assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
		"blue": "K7acjAQMroOGGtUqqojYy",
		"yellow": "G7N-PGOIbGO_ZkaqBu2mx",
		"txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
		"txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
		"txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
		"txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
		"txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
		"txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
		"addTile": "lCw_kxhsAPcuM3yFAqvpF",
		"addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
		"addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
		"commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
		"totalScore": "FDG4LAia-7JDDtxb7R4Kb",
		"totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
		"textBox": "_13VdIFmMegxz_eR8VIXN_M",
		"totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
		"totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
		"resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
		"resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
		"resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
		"headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
		"scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
		"resultBody": "N6kKlySaRGbRcB4bBmpZ0",
		"resGroup": "_2byM-_1N3yjHb2dpmlikdf",
		"resTile": "DZeuj4DKkdAPKCgYd76RK",
		"resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
		"resRating": "R7j9mxFZmdmLgC7bPXpyN",
		"txtSize": "_977ldMQMMiHQ0YG_61T3g",
		"txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
		"resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
		"resInput": "_14gsxA36f-uYOfxGDvr_gi",
		"activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
		"feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
		"fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
		"feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
		"profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
		"profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
		"profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
		"name": "_25-6SxUiv8zhOMEVTRrg8w",
		"commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
		"addpdng": "_6rQH8tivz8ELIWszpbahs",
		"good": "_3lOxcxDfxhPcuhLBJHo4Ur",
		"vGood": "l_IAfocpDxfvpU316U0EI",
		"fair": "_3I3YapUnBVxgs-ZsGf3Poh",
		"poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _DataTable = {
		"pagination": "TYVzvPvnVhHwh2cU0hA4A",
		"current": "g_uiyu9x1FtjxSP7SG8ZE",
		"table": "MT1wq7GO1NFQY49F82EQ7",
		"headerRow": "_25DfSs-Nwm51luhPR-2j-T",
		"col": "_2AskW4twyvDT4DurTsqR8L",
		"row": "_2WqrTHsuiMmLB0IEBY1vgS",
		"responsivetable": "_31nKaPaXXLrfOOGeGa9GTs",
		"whiteCard": "ryCbWg89OoNEh8LdzqXon",
		"noDataBox": "XRJX9QsZKouxzWnXKoUUp",
		"infoTxt": "_1NZmMey1sQV0aCxxqVtPDu",
		"mainSpinBlock": "_3BEgVxQ9PDQKlEjIHevKr5",
		"innerSpinBlock": "_2Ot9A0ys89IJntrdA5WyyE"
	};
	
	var _DataTable2 = _interopRequireDefault(_DataTable);
	
	var _HandraiseActions = __webpack_require__(417);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var moment = __webpack_require__(1);
	
	var _ref = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_replies'
	}));
	
	var _ref2 = _jsx(_reactFontawesome2.default, {
		name: 'fa fa-reply'
	});
	
	var _ref3 = _jsx('span', {}, void 0, ' ', _jsx(_reactIntl.FormattedMessage, {
		id: 'reply'
	}));
	
	var _ref4 = _jsx(_reactIntl.FormattedMessage, {
		id: 'post'
	});
	
	var Answer = function (_Component) {
		_inherits(Answer, _Component);
	
		function Answer(props) {
			_classCallCheck(this, Answer);
	
			var _this = _possibleConstructorReturn(this, (Answer.__proto__ || Object.getPrototypeOf(Answer)).call(this, props));
	
			_this.getReplyData = function (obj) {
				obj['_id'] = _this.props.qid;
				(0, _HandraiseActions.getReplies)(obj).then(function (res) {
					return _this.replyresponse(res);
				});
			};
	
			_this.handleReply = function () {
				_this.setState({ reply: !_this.state.reply });
			};
	
			_this.handleReplyValue = function (e) {
				_this.setState({ replyValue: e.target.value, error: '' });
			};
	
			_this.saveReply = function () {
				var value = _this.state.replyValue.trim();
				if (value != '') {
					_this.setState({ error: '', replyValue: '' });
					var obj = {
						comment: value,
						replyOn: _this.props.data._id
					};
					var id = _this.props.qid;
					(0, _HandraiseActions.saveReply)(obj, id).then(function (res) {
						return _this.saveresponse(res, obj.replyOn, value);
					});
				} else {
					_this.setState({ error: 'Please enter your comment' });
				}
			};
	
			_this.saveresponse = function (response, id, value) {
				if (response.status) {
					_this.setState({ error: '' });
					_this.newReplyRequest({ replyOn: id });
				} else {
					_this.setState({ error: response.error, replyValue: value });
				}
			};
	
			_this.replyresponse = function (response, value) {
				if (response.status) {
					_this.setState({ error: '', data: response.data, total: response.count });
				} else {
					_this.setState({ error: response.error, replyValue: value });
				}
			};
	
			_this.renderReply = function () {
				var self = _this;
				var cls_askQuestion = _Dashboard2.default.askQuestionBlock + ' clearfix';
				var cls_postBtnInside = _Dashboard2.default.postBtnInside + ' ' + _Dashboard2.default.btnApplyAll + ' pull-right';
				if (_this.state.data != null && _this.state.data.length > 0) {
					var now = moment().endOf('day');
					var replies = _this.state.data.map(function (doc) {
						return _jsx('li', {
							className: 'clearfix'
						}, doc._id, _jsx(_reactRouter.Link, {
							id: 'viewprofile',
							className: _Dashboard2.default.avatarSmall
						}, void 0, _jsx('img', {
							src: doc.author && doc.author.profile && doc.author.profile.profileImage ? "/uploads/" + doc.author.profile.profileImage : "/images/profile-pics/defaultStudent.jpg",
							onClick: _this.viewUser.bind(_this, doc.author._id),
							title: _this.props.intl.messages.viewprofile
						})), _jsx('div', {
							className: _Dashboard2.default.postedQueBlock
						}, void 0, _jsx('span', {
							className: _Dashboard2.default.postedUserName
						}, void 0, doc.author && doc.author.firstname && doc.author.lastname ? doc.author.firstname + ' ' + doc.author.lastname : doc.author && doc.author.firstname ? doc.author.firstname : '-'), _jsx('span', {
							className: _Dashboard2.default.postedAnsTxt
						}, void 0, doc.comment), _jsx('p', {
							className: _Dashboard2.default.postedTime
						}, void 0, +moment(doc.replyAt).endOf('day') == +now ? moment(doc.replyAt).format('hh:mm A') : moment(doc.replyAt).format('DD/MM/YYYY hh:mm A'))));
					});
					return _jsx('ul', {}, void 0, replies);
				} else {
					return _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
						className: _DataTable2.default.noDataBox
					}, void 0, _ref));
				}
			};
	
			_this.newReplyRequest = function (data) {
				var obj = {
					command: 'HAND-RAISE-REPLY',
					content: { data: data, id: data.replyOn },
					type: 'OBJECT'
				};
				_this.props.confObject.sendMessage(obj, 0);
			};
	
			_this.state = {
				reply: false,
				replyValue: '',
				error: '',
				data: null,
				total: 0
			};
			_this.FetchReplyData = _this.FetchReplyData.bind(_this);
			return _this;
		}
	
		_createClass(Answer, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				if (this.props.qid) {
					var obj = {
						replyOn: this.props.data._id
						// this.getReplyData(obj);
					};this.setState({ data: this.props.data.replies, total: this.props.data.replycount });
					this.props.confObject.HandraiseReplyListener(this.FetchReplyData, obj.replyOn);
				}
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				this.setState({ data: nextProps.data.replies, total: nextProps.data.replycount });
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this.props.confObject.ClearHandraiseReplyListener(this.props.data._id);
			}
		}, {
			key: 'viewUser',
			value: function viewUser(id) {
				_reactRouter.browserHistory.push('/profile/' + id);
			}
		}, {
			key: 'render',
			value: function render() {
				var answer = this.props.data;
				var cls_askQuestion = _Dashboard2.default.askQuestionBlock + ' clearfix';
				var cls_postBtnInside = _Dashboard2.default.postBtnInside + ' ' + _Dashboard2.default.btnApplyAll + ' pull-right';
				//console.log("answerReplyValue--->", self.state.answerReplyValue);	
				var now = moment().endOf('day');
				var create = answer && answer.answerAt ? moment(answer.answerAt).endOf('day') : null;
				var time = "--:--";
				if (create != null) {
					if (+create == +now) time = moment(answer.answerAt).format('hh:mm A');else time = moment(answer.answerAt).format('DD/MM/YYYY hh:mm A');
				}
				return _jsx('li', {
					className: 'clearfix'
				}, void 0, _jsx(_reactRouter.Link, {
					id: 'viewprofile',
					className: _Dashboard2.default.avatarSmall
				}, void 0, _jsx('img', {
					src: answer.author && answer.author.profile && answer.author.profile.profileImage ? "/uploads/" + answer.author.profile.profileImage : "/images/profile-pics/defaultStudent.jpg",
					onClick: this.viewUser.bind(this, answer.author._id),
					title: this.props.intl.messages.viewprofile
				})), _jsx('div', {
					className: _Dashboard2.default.postedQueBlock
				}, void 0, _jsx('span', {
					className: _Dashboard2.default.postedUserName
				}, void 0, answer.author && answer.author.firstname && answer.author.lastname ? answer.author.firstname + ' ' + answer.author.lastname : answer.author && answer.author.firstname ? answer.author.firstname : '-'), _jsx('span', {
					className: _Dashboard2.default.postedAnsTxt
				}, void 0, answer.answer), _jsx('p', {
					className: _Dashboard2.default.postedTime
				}, void 0, time)), _jsx('div', {
					className: _Dashboard2.default.bottomActions
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'reply',
					onClick: this.handleReply,
					title: this.context.intl.messages.your_comment
				}, void 0, _jsx('span', {}, void 0, this.state.total, ' ', _ref2, ' '), _ref3)))), this.state.reply ? _jsx('div', {
					className: _Dashboard2.default.replyBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.repliedInfo
				}, void 0, this.renderReply()), !this.props.noConference ? _jsx('div', {
					className: cls_askQuestion
				}, void 0, _react2.default.createElement('textarea', { id: 'textAreaRecom', className: _Dashboard2.default.textAreaRecom, placeholder: this.context.intl.messages.your_comment, ref: 'replyanswer', value: this.state.replyValue, onChange: this.handleReplyValue }), _jsx('button', {
					id: 'saveReply',
					className: cls_postBtnInside,
					onClick: this.saveReply
				}, void 0, _ref4), _jsx('label', {
					id: 'replyError',
					className: _component2.default.errorPre
				}, void 0, this.state.error ? this.state.error : '')) : null) : null);
			}
	
			//////////////////////////
	
		}, {
			key: 'FetchReplyData',
			value: function FetchReplyData(obj) {
				this.getReplyData(obj);
			}
			//////////////////////////
	
		}]);
	
		return Answer;
	}(_react.Component);
	
	Answer.contextTypes = {
		intl: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = (0, _reactIntl.injectIntl)(Answer);

/***/ },

/***/ 516:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactIntl = __webpack_require__(11);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactRedux = __webpack_require__(16);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _component = {
		"form-control": "QmIrbtmLmFNpHdWMqFMWS",
		"innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
		"colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
		"error": "_3jAfmA6J7YmNDyB2VfsCxP",
		"mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
		"dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
		"iElement": "_2crZNiFs8z8oNhzPDC1qOE",
		"oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
		"iLabel": "_3Pyvct_srCoSvJCgGG41jw",
		"oLabel": "NsxWZpxBqBX8wky_O477_",
		"iForm": "_3IlToa7pigrSS8KWut_dJ8",
		"oForm": "_3N0YNUcfI5U02VSmBEbYot",
		"iFormField": "_12yKSn29WLZIE6fvGQfcrN",
		"oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
		"iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
		"oFormGroup": "_386CxczA49XX2-ejr3Qe55",
		"formNext": "ccTxjcG6_GZO9OgzW33HT",
		"iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
		"oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
		"iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
		"oContainer": "_2tEAAtqgoutuOUU96rNvv1",
		"iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
		"oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
		"iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
		"iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
		"whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
		"iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
		"active": "_2fF1Q9nO2O_1B8Ldb4RM52",
		"scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
		"errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
		"errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
		"whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
		"greyCard": "_34l9W17Mt1koxHLd1yUqgk",
		"reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
		"countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
		"react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
		"ad": "N3bKXyhfwvWT3eAEC9Nno",
		"ae": "taXUT8yfjgRMeSH3rMNxy",
		"af": "_2vH4qShCgBPBO4GR8BdNvd",
		"ag": "n8QfWtvpZLMpatCUqX2Td",
		"ai": "_3fPX_RcpesOPxFsmsaygCE",
		"al": "_1T12tbcC6990b-fIMG5LYW",
		"am": "_31HdarMDfXvAgjizVUoeHk",
		"ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
		"ar": "_2qJleMgRbIErIrx3kQF57O",
		"as": "_2ZPVYL8Vjn-vdWZToCEhjN",
		"at": "_1hWilvnrVbANEHRyLGlF-m",
		"au": "_2zJE4K6o-ftWqhb3exXZgk",
		"aw": "_1UroMxX5JHt9bjGdHwa1OY",
		"az": "_-Y2xueZ_1mEtB9YDOqEGB",
		"ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
		"bb": "_34600Kl8Wac9Hx7S3-3U6b",
		"bd": "_3WBX90V5VJXA7-vSUfEWCh",
		"be": "BcK33edOPcbYdkxxvOApy",
		"bf": "ShN64-J7UZdswoQjkf7L_",
		"bg": "_2A9PgkQEF5_KbvHvDf6_lY",
		"bh": "_10p3rxNRYOhv8-BtZuq1w8",
		"bi": "_6MzP1qXXDFAZVL7nBmRiH",
		"bj": "_2U8H1sji9LfDEW706KyKvF",
		"bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
		"bn": "PgMDvF79WHl3kaklOmhw3",
		"bo": "_7MheGVInaTi-QLxw5PiUi",
		"br": "_1BDNUyT0cHDlbCBFgrrLkJ",
		"bs": "_3vcASZB5bu7mJAzTzaRkWe",
		"bt": "esu4pvyd9ZFWrf-etnrva",
		"bw": "_2Hbv1I361RJFK3Ph2xPlu_",
		"by": "_2tbYam6Og8RAicMhX9SXvI",
		"bz": "_3xB704PIgqFnU2zTG-JZFN",
		"ca": "_36FyK29nkNl9Ez7yWh04AS",
		"cd": "_9PnHTqK1pSn_GIAbBtPT2",
		"cf": "_2LgMF7o1A3a2cgw5jkpvZV",
		"cg": "_3hYc9Y3UdCphltZKe2vJWk",
		"ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
		"ci": "FoSGkvvMDFAVcvsZBWX-Z",
		"ck": "_1742IgEaHW3SZU7h_-nkwr",
		"cl": "_36IaMt7ntEwUsH4lwN4tW-",
		"cm": "_1N8krqbPtlsEVsh6SaCetm",
		"cn": "IfkD3fwbUSx9FZflX6iIU",
		"co": "_3Y7u7ONzxyZVjZYzS1OHTr",
		"cr": "Gw5Qz4qBNZjPDmpQmi-d2",
		"cu": "ZuHtEp_knwZcbwTTJkRgI",
		"cv": "o6BzJCyjRH1pOsf_HpbQ6",
		"cw": "hRElJCQXyNIITDZ6UQVut",
		"cy": "_2cHKWrINPNO6L8BEOdtJCG",
		"cz": "nS617LE8Qcckdv9HJTWpt",
		"de": "fqJD93WBywDPs0lrLEXLT",
		"dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
		"dk": "_3fpBLMtuUi0kowy3ziMRYd",
		"dm": "_3gMwGkQW-OGFx1U7vd7VMD",
		"do": "G9EZGjpXLJUyQuREesyGO",
		"dz": "_3Nka0vwv6nZpeugyuqYQIJ",
		"ec": "_18t83SdIOs8EY6iF0zV0CZ",
		"ee": "_1miCbYr55XmBKvcUu6XetR",
		"eg": "_1T55wMh1svM7M5QGxFM2ex",
		"er": "c0Ab9spCQ4VnXr_6xijnD",
		"es": "_1lutiEL9tJpdNgKmnTT6Ld",
		"et": "_2GGXIPO2kOV6CUsu65V4Z3",
		"fi": "_1I-g5oWpQznT5QZuBfQ8A",
		"fj": "_3oeTP_GhC_XzsjzHW86oDc",
		"fk": "_3-_BjK4NArHS0nyf0DLc4F",
		"fm": "_1WQYGDC-zTatxog3SIwE80",
		"fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
		"fr": "_3-mqatBXfaTfex8LWjnIDA",
		"bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
		"mf": "_34f4ya9mcbpIcQPgHJ4I6c",
		"ga": "_15_iO4CJaXbX7PySxoldPF",
		"gb": "_1vZuFSSey59_ixozre-0L_",
		"gd": "_26Ub0jcjDpVD4nwM7m5n4e",
		"ge": "_27ctDR0Hf6HO15MgHS8wyh",
		"gf": "_2S6C39D4wNBuVSqzYM5Ldy",
		"gh": "_3vjGi6-umA-RzwxRFaTfNN",
		"gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
		"gl": "_1OTvyS4D4UOkymKuDLxUdx",
		"gm": "_3-0gezNOVCHKzaLYGUySo2",
		"gn": "_8f6uadrEfnS9IX8DEIpKO",
		"gp": "_36yEj9UcEbZcI0WJvgmk0B",
		"gq": "xHX18x9xk7PhDBlgsvnad",
		"gr": "HTk_eFej1VrCiBuKBIfLT",
		"gt": "hgmUbzxaHNZNL6frPhPeb",
		"gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
		"gw": "_36JwaXqhh4gBrIvAy4c1KO",
		"gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
		"hk": "_1mT74O5OVtonPLmYnVVOu7",
		"hn": "_1ze0KI-TYxTrDcXlMOu24s",
		"hr": "ZIDUSRfcbDCZTyhqWGPob",
		"ht": "Y65Ad5pf3z7ufcknP0vhk",
		"hu": "_3EHKICvcensXt5hEu8Nkfs",
		"id": "_3oZE8uvxIFK7M9DCEtsSCD",
		"ie": "_2RNmpg94YYioQp2fWyz_xn",
		"il": "_2Mq_no7KYxPp2NSLGS1Tcs",
		"in": "_1UlEZ269GihRa58c5mCEBN",
		"io": "_3ovelrc7S_DdmXxL-8uuwk",
		"iq": "_3VSlK6DYHrBgKbkE2Rng2N",
		"ir": "NRX2sFBmuPSJ9EOigyuEP",
		"is": "_25HaTNE7x74CJO9S1mnm4I",
		"it": "_1-LmlhbrcpKN-xjESmR_sO",
		"jm": "VsvDBply-4FtMoJhi8Cvu",
		"jo": "yEE3hbkzWK8CSCrCJibCo",
		"jp": "_3oxjjz1uD2cX2QsoSToLgz",
		"ke": "_1ksOT6KMPd99EWuWCXPga_",
		"kg": "_2CMnR3yv5DGwDc8p3uoOjp",
		"kh": "_927b1QnaSWnN35i3bVewJ",
		"ki": "_2CuDp55lqYTpFp68D4IWep",
		"km": "_3tvMTeZYZMzBB9bGn9lV9E",
		"kn": "_6kbCvwc22pJX0tNv3HToQ",
		"kp": "_3tIPOe5PNrHH-bgCGaZTJj",
		"kr": "_2653rpVUuy3ETaw1mogdnF",
		"kw": "_1SKg_lTe0ShbPSOl44eKjp",
		"ky": "tgj8SOv7bYoF7qfbbQWNG",
		"kz": "bchn50J152EdQa0zf3k5u",
		"la": "mu9oycLgpKX8_yLLkR5b9",
		"lb": "_2TcAFbagIrNyc6mgzRVNW0",
		"lc": "_2IFItnUNT-albvpN-ksxd2",
		"li": "_3_E6nQspv6zJQLQI24puaS",
		"lk": "_2M2wq3qQhGeUegbBTs7ilH",
		"lr": "L4o4xOg0s6QbasyIRPgyF",
		"ls": "LhBB6SRin61WSFtUwaEfe",
		"lt": "ITDUphrnMkKItKGMVHZf8",
		"lu": "_1mVW30sc4i-1M8tDPCQlL",
		"lv": "_3rq6vE2IagAsGI6iESAcJq",
		"ly": "_3se_Nzm1WQrEN3VZYiJJrv",
		"ma": "_fSDiNxp_jjfqkQcWffDM",
		"mc": "_2hRTRZeBtDGN4mNeWBZVgB",
		"md": "_26jDl0skadEwmUYDGmEzST",
		"me": "_388lJj_7sQdyd9HL7pMrar",
		"mg": "_3aFoqVWcvG3p47Vwa6UuoE",
		"mh": "_1YHi6OtXmKfP15ZNbwYGgy",
		"mk": "_9QVyhHcp8yH762J8fWXhC",
		"ml": "yYD99PoyhgFI4912_qoyJ",
		"mm": "URzk8-j7LcySpGUMJf_Qk",
		"mn": "_1J-lktQUTK0rydBz3foJGF",
		"mo": "_1sbL0zhHof-KbfGWu2qjqF",
		"mp": "_1tJjJlSjRw5AnqcXXmGwCI",
		"mq": "fHob9sxaJrTuqSc0xL744",
		"mr": "t-Bmj7a31aA-IwcRcL0ua",
		"ms": "_2xyT54DQP62zWDySH7-Kdy",
		"mt": "_1Ul_OlGODc8S0QplVq94PV",
		"mu": "_1yIBERRJqnV33pTq2VpKRc",
		"mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
		"mw": "_3i8n-5-htdGNJLgn96O21",
		"mx": "_16-6zoyiVzSGB1O72cUTzV",
		"my": "_3W2P0D9eTN4BQoOcThOsaM",
		"mz": "wJ8icX7Asp3dSImkXOdTM",
		"na": "_1qt_F94mybbX5kr0ArtN-Z",
		"nc": "h82AMIuCGdKf69Hc_nM6D",
		"ne": "_2mVa5nGsijzD93WRl8dk64",
		"nf": "_3XQ9oUH_84SsdZLjpVRuqT",
		"ng": "_1uyyH1GZjsEk3YpaUSmmG6",
		"ni": "_22_3H6UeFo26o3fSavtQaX",
		"nl": "_93asfBYgR8C7bEDucZO8l",
		"bq": "_37A1nwIz7Z3obwUjmliw4s",
		"no": "_2-sVmkWiLn_ogTikc0c0Eg",
		"np": "_1PqZSwf5cuMNmbE7bpKe67",
		"nr": "_9q5Rg9Xn0G2buivFSGySP",
		"nu": "RLhVdyjL9Cex8ekaJqirU",
		"nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
		"om": "_9mZYNhgBLiQg-j1FeVprJ",
		"pa": "_3S7TrzxJIEYVghUMVHB6E7",
		"pe": "_3V5sP7VvdGOFqApj7POYl2",
		"pf": "_1YzdrkyHO-eCcEFF-hjZl7",
		"pg": "ddWAanlQJPlB0QDWO6dAF",
		"ph": "_2TGbmCcqHlJFCssz78MxOs",
		"pk": "_2JerTABYGCUN8FLjpnDzKy",
		"pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
		"pm": "_29Hoo7EsoSHtvRFvlVg2cD",
		"pr": "_3_pkwz60KLoYcbKwaRvIsS",
		"ps": "_3jenITZ_yUYS7kU1HwFEHj",
		"pt": "_1vz8ABWy5Yd43_JhaTWq9u",
		"pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
		"py": "_1_W41pJLcGMRhLdU997clv",
		"qa": "Z0tjAakoNSOs14KuenmRi",
		"re": "_3k5KF4jzE7HUitQw9MQKnp",
		"ro": "_2b8XhT3-7NgjAC8gJJkpis",
		"rs": "_2MUJr9MQbiKRTd_g0TaRQr",
		"ru": "HjzPW2CxxNMSGZw1ugFW7",
		"rw": "_23TGIOoPmB9QYqIPG6W3tA",
		"sa": "_34WM8rSonfayW0vJ3koqJS",
		"sb": "_3486rZNsCjvTmIoHbjK8mG",
		"sc": "_3meAM_iQCU6MyfPQJTN3yl",
		"sd": "_2x6XeHNF__4s9VVfFXCJhO",
		"se": "_66VDclGQXxpdUR8uE3ZFa",
		"sg": "tv3I_hfLcUJ_8i9ewVcUz",
		"sh": "_1syDbbhbumwMwwD7Dwkb1V",
		"si": "_3jsffwJjGr2sMEofSTTGkG",
		"sk": "_1EpYAUcQLCqbYB48Auixqb",
		"sl": "_3STJQv9nY5mol4cW82D2ci",
		"sm": "_9aTR-AZMTaYHRmDVAyFTM",
		"sn": "_3mTatYTWeJQQACfV7xzRhi",
		"so": "_1LnWon2slwLMqAHzhkRT4c",
		"sr": "_1GSedFwSsf5isgOi3p0x6U",
		"ss": "_1sq99LOjKKgery3luOXOFn",
		"st": "_1O6vYx_NaXFBAs1qYxgwaB",
		"sv": "_10D9RGnRzUv14bYWQaC23c",
		"sx": "KonDEEzH2JzIWsVUBzFdY",
		"sy": "_1ZAnqGYeixOJVFwwt6hNIo",
		"sz": "_3FeOFkec3sXYbvQhWDdIM7",
		"tc": "_1FZvldKEV-vz12TyyNfEf",
		"td": "_31fysfDRtTWVKcX_UjX0ty",
		"tg": "H60Kyr6MsF6nvRz5l7EfN",
		"th": "SHZkbUz1c_H_zDOfxLc4",
		"tj": "_2MRI0fA4OLgepXVooYMu9H",
		"tk": "_1W959S9LHLCKhz3xi4MpHe",
		"tl": "_1lMF_0nwQXTyBRRzRj7hBF",
		"tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
		"tn": "_2MeGi_bqLVuCaRtJzs3QqA",
		"to": "_3egwC_50WENVPaap_uwXr8",
		"tr": "_2KiPy3o6m7JCKQWPY2fI1d",
		"tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
		"tv": "_2D9VWSmHkhgNemAaIKF_cp",
		"tw": "_2J7nVAh1zEa7kV5Ba51CLV",
		"tz": "_2acF96LLqMjlbfMX1oiAjT",
		"ua": "_2rr3Tyr8dP6vDvE0khEDKT",
		"ug": "D7gjzKmlr78rNWXXw90np",
		"us": "_1l5RtWI_acgLVeCd5fjgHG",
		"uy": "_1zX6hTsIa2TtL6dgR47eQ9",
		"uz": "_29NUL3VtwK1_RWUyPsY2ei",
		"va": "_39kTgRBkhqqGVLUTJvK_67",
		"vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
		"ve": "_3Lk2Svkm2NTAVpUfiY_No5",
		"vg": "_3SiYuGrNzW9DNkXwTZugyj",
		"vi": "_2BiiERObu5xcE6P1SZxLdj",
		"vn": "_3kSg6iW0KLoUpJ0g70fckK",
		"vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
		"wf": "Arz0xEqJcbKbLmPz_tXTS",
		"ws": "_3oTaxcmbTriEd90-cXNqD8",
		"ye": "gxtmCiQO2ao4JTQXuRUIJ",
		"za": "_25HyrYKmQQAteF_LwADnIt",
		"zm": "Kui2u7hZHcNBqlzbqR-vQ",
		"zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
		"hide": "_2kO_U0LXcg71jJA6RSia2e",
		"v-hide": "_2HBc009zwTsSlkh8P8tH10",
		"invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
		"flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
		"open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
		"selected-flag": "_10c169vRt8V92_nQ_S0KtR",
		"flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
		"arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
		"up": "_2ykRnfq4f2nlmZGfvzrn92",
		"country-list": "UlTusogWL2urjgGgLNpcD",
		"divider": "_2zMaTbM3nSdE07wOs7YYRt",
		"country": "uL848pHFWhb_G94Ak-KX5",
		"dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
		"highlight": "BLa_2aA2PkYD2PsO2fvNC",
		"country-name": "_3ih_ovRiGmAkpjxuz63nhk",
		"uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
		"fileUpload": "_2WENukerx3mNXkTyu0UXQf",
		"uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
		"upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
		"blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
		"feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
		"errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
		"gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
		"red": "_3wj0AXV9gqX9YG1nk-2u9J",
		"green": "_3KPVxc3su8ewtuKZgu8TGv",
		"orange": "_3cLlE5QI9XJwY6e7jO5bLg",
		"capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
		"importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
		"importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
		"importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
		"icon": "_12rnwIUewKT2PdtWMnNyD5",
		"importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
		"broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
		"broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
		"btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
		"textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
		"spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
		"pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
		"lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
		"removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
		"inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
		"popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
		"dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
		"dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
		"applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
		"filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
		"btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
		"assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
		"pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
		"assTab": "y4LW63OuadI0JWTQBnbJ1",
		"heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
		"radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
		"wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
		"leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
		"rightBox": "DP21PoKxwKk_vJyOuQTcr",
		"gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
		"actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
		"gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
		"actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
		"gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
		"morePref": "JBm94eKPIFI8vfiroATJ6",
		"tile": "_1Ssp2zTovh7AwJWuRkgnge",
		"tileItems": "_3cDqgy8AedDYzhy8Euosis",
		"tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
		"tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
		"category": "_2Ow56TBY2Y24yY5SjVRU4l",
		"innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
		"maxScore": "_3uL97t2vemfuAs83cAFhjE",
		"maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
		"scored": "_12gGWK_s69JBGzOAX7ClkT",
		"scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
		"remTile": "_3vgBsvWRGVVRwIEDn1TquO",
		"tileBody": "dF1WC_PeNjG87K2XGMIcS",
		"tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
		"gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
		"gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
		"assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
		"blue": "K7acjAQMroOGGtUqqojYy",
		"yellow": "G7N-PGOIbGO_ZkaqBu2mx",
		"txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
		"txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
		"txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
		"txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
		"txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
		"txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
		"addTile": "lCw_kxhsAPcuM3yFAqvpF",
		"addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
		"addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
		"commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
		"totalScore": "FDG4LAia-7JDDtxb7R4Kb",
		"totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
		"textBox": "_13VdIFmMegxz_eR8VIXN_M",
		"totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
		"totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
		"resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
		"resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
		"resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
		"headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
		"scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
		"resultBody": "N6kKlySaRGbRcB4bBmpZ0",
		"resGroup": "_2byM-_1N3yjHb2dpmlikdf",
		"resTile": "DZeuj4DKkdAPKCgYd76RK",
		"resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
		"resRating": "R7j9mxFZmdmLgC7bPXpyN",
		"txtSize": "_977ldMQMMiHQ0YG_61T3g",
		"txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
		"resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
		"resInput": "_14gsxA36f-uYOfxGDvr_gi",
		"activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
		"feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
		"fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
		"feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
		"profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
		"profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
		"profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
		"name": "_25-6SxUiv8zhOMEVTRrg8w",
		"commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
		"addpdng": "_6rQH8tivz8ELIWszpbahs",
		"good": "_3lOxcxDfxhPcuhLBJHo4Ur",
		"vGood": "l_IAfocpDxfvpU316U0EI",
		"fair": "_3I3YapUnBVxgs-ZsGf3Poh",
		"poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _DataTable = {
		"pagination": "TYVzvPvnVhHwh2cU0hA4A",
		"current": "g_uiyu9x1FtjxSP7SG8ZE",
		"table": "MT1wq7GO1NFQY49F82EQ7",
		"headerRow": "_25DfSs-Nwm51luhPR-2j-T",
		"col": "_2AskW4twyvDT4DurTsqR8L",
		"row": "_2WqrTHsuiMmLB0IEBY1vgS",
		"responsivetable": "_31nKaPaXXLrfOOGeGa9GTs",
		"whiteCard": "ryCbWg89OoNEh8LdzqXon",
		"noDataBox": "XRJX9QsZKouxzWnXKoUUp",
		"infoTxt": "_1NZmMey1sQV0aCxxqVtPDu",
		"mainSpinBlock": "_3BEgVxQ9PDQKlEjIHevKr5",
		"innerSpinBlock": "_2Ot9A0ys89IJntrdA5WyyE"
	};
	
	var _DataTable2 = _interopRequireDefault(_DataTable);
	
	var _HandraiseActions = __webpack_require__(417);
	
	var _HandraiseQuestion = __webpack_require__(517);
	
	var _HandraiseQuestion2 = _interopRequireDefault(_HandraiseQuestion);
	
	var _ConferenceReducer = __webpack_require__(47);
	
	var _LoginReducer = __webpack_require__(20);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _ref = _jsx(_reactIntl.FormattedMessage, {
		id: 'load_more'
	});
	
	var _ref2 = _jsx('h2', {}, void 0, _jsx(_reactFontawesome2.default, {
		name: 'frown-o'
	}));
	
	var _ref3 = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_questions'
	}));
	
	var _ref4 = _jsx('img', {
		src: '/images/black-icons/black-help.png'
	});
	
	var _ref5 = _jsx(_reactIntl.FormattedMessage, {
		id: 'ask'
	});
	
	var _ref6 = _jsx(_reactIntl.FormattedMessage, {
		id: 'post'
	});
	
	var Handraise = function (_Component) {
		_inherits(Handraise, _Component);
	
		function Handraise(props) {
			_classCallCheck(this, Handraise);
	
			var _this = _possibleConstructorReturn(this, (Handraise.__proto__ || Object.getPrototypeOf(Handraise)).call(this, props));
	
			_this.getData = function (objEntity) {
				var obj = {
					// uid : this.props.uid,
					roomKey: _this.props.roomKey,
					limit: _this.state.limit
				};
				if (objEntity) {
					// obj['uid'] = objEntity.uid;
					obj['roomKey'] = objEntity.roomKey;
				}
				(0, _HandraiseActions.getHandraiseData)(obj).then(function (res) {
					return _this.setresponse(res);
				});
			};
	
			_this.handleQuestion = function (e) {
				_this.setState({ question: e.target.value,
					errorMsg: ''
				});
			};
	
			_this.handleHandraise = function (e) {
				e.preventDefault();
				var value = _this.state.question.trim();
				if (value != '') {
					_this.setState({ question: '' });
					var obj = {
						question: value,
						roomKey: _this.props.roomKey
						// limit : this.state.limit
					};
					(0, _HandraiseActions.saveQuestionRequest)(obj).then(function (res) {
						return _this.createresponse(res, value, true);
					});
				} else {
					_this.setState({ errorMsg: _this.props.intl.messages.please_enter_the_question });
				}
			};
	
			_this.clickmore = function () {
				var count = _this.state.limit + _this.skip;
				_this.setState({ limit: count });
				var obj = {
					uid: _this.props.uid,
					roomKey: _this.props.roomKey,
					limit: count
				};
				(0, _HandraiseActions.getHandraiseData)(obj).then(function (res) {
					return _this.setresponse(res);
				});
			};
	
			_this.setresponse = function (response) {
				if (response.status) {
					_this.setState({ data: response.data, total: response.count, error: '' });
				} else if (res && res.errorCode == 208) {
					browserHistory.push('/');
				} else {
					_this.setState({ error: response.error });
				}
			};
	
			_this.createresponse = function (response, value, status) {
				if (response.status) {
					_this.newQuestionRequest(status);
				} else {
					_this.setState({ error: response.error, question: value });
				}
			};
	
			_this.makeSpeaker = function (obj) {
				var defIndex = _.findIndex(_this.props.conferenceDetails.attendees, ['name', obj.uid]);
				console.log("defIndex === ", defIndex);
				if (defIndex > -1) {
					var id = _this.props.conferenceDetails.attendees[defIndex].id;
					var streamIndex = _.findIndex(_this.props.conferenceDetails.streams, ['from', id]);
					console.log("streamIndex === ", streamIndex);
					if (streamIndex > -1) {
						var objSpeaker = {
							command: 'SPEAKER-REQ',
							content: { stream_from: id },
							type: 'STRING'
						};
						_this.props.confObject.sendMessage(objSpeaker, 0);
					} else {
						var _obj = {
							command: 'REQ-VIDEO',
							content: { attendeesData: {} },
							type: 'OBJECT'
						};
						_this.props.confObject.sendMessage(_obj, id);
					}
				} else {
					console.log("Make speaker user not in stream");
				}
			};
	
			_this.renderQuestions = function (data) {
				var guestStatus = null;
				if (_this.props.loggedInData && _this.props.loggedInData.data && _this.props.loggedInData.data.guest) {
					guestStatus = _this.props.loggedInData.data.guest;
					//console.log("guestStatus", guestStatus);
				}
				if (data != null && data.length > 0) {
					var self = _this;
					var questions = data.map(function (doc) {
						return _jsx(_HandraiseQuestion2.default, {
							data: doc,
							confObject: self.props.confObject,
							roomType: self.props.conferenceDetails && self.props.conferenceDetails.confData ? self.props.conferenceDetails.confData.roomType : '',
							uid: self.props.uid,
							editQuestionCb: self.createresponse,
							questionLimit: self.state.limit,
							noConference: self.props.noConference,
							roomKey: self.props.roomKey,
							host: self.props.conferenceDetails ? self.props.conferenceDetails.imHost : false,
							makeSpeaker: self.makeSpeaker,
							guestStatus: guestStatus
						}, doc._id);
					});
					return _jsx('div', {}, void 0, questions, _this.state.total > _this.state.limit ? _jsx('div', {
						className: _Dashboard2.default.loadmore
					}, void 0, ' ', _jsx('a', {
						onClick: _this.clickmore
					}, void 0, _ref), ' ') : null);
				} else {
					return _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
						className: _Dashboard2.default.whiteCard
					}, void 0, _jsx('div', {
						className: _DataTable2.default.noDataBox
					}, void 0, _ref2, _ref3)));
				}
			};
	
			_this.newQuestionRequest = function (status) {
				var obj = {
					command: 'HAND-RAISE',
					content: { data: { status: status } },
					type: 'OBJECT'
				};
				_this.props.confObject.sendMessage(obj, 0);
			};
	
			_this.state = {
				question: '',
				errorMsg: '',
				data: null,
				limit: 3,
				total: 0
			};
			_this.skip = 3;
			_this.handleQuestion = _this.handleQuestion.bind(_this);
			_this.handleHandraise = _this.handleHandraise.bind(_this);
			_this.FetchHandraiseData = _this.FetchHandraiseData.bind(_this);
			_this.props.confObject.HandraiseListener(_this.FetchHandraiseData);
	
			return _this;
		}
	
		_createClass(Handraise, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				if (this.props.roomKey) {
					this.getData();
				}
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this.props.confObject.ClearHandraiseListener();
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (nextProps.roomKey != this.props.roomKey) {
					var obj = {
						uid: nextProps.uid,
						roomKey: nextProps.roomKey
					};
					this.getData(obj);
				}
			}
		}, {
			key: 'render',
			value: function render() {
	
				console.log("this.props.loggedInData", this.props.loggedInData);
				var cls_cardHrHeader = _Dashboard2.default.cardHrHeader + ' clearfix';
				var cls_askQuestion = _Dashboard2.default.askQuestionBlock + ' clearfix';
				var cls_postBtn = _Dashboard2.default.btnPost + ' btn btn-sm btn-primary pull-right';
				var cls_btnPostQandA = ' ' + _Dashboard2.default.btnPostQandA + ' ';
	
				return _jsx('div', {
					className: _Dashboard2.default.handRiseContent
				}, void 0, !this.props.noConference ? _jsx('div', {
					className: _Dashboard2.default.cardHandRise
				}, void 0, _jsx('div', {
					className: cls_cardHrHeader
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.iconInline
				}, void 0, _ref4), _jsx('div', {
					className: _Dashboard2.default.headingBloack
				}, void 0, _jsx('h2', {
					className: _Dashboard2.default.headingTxt
				}, void 0, _ref5))), _jsx('div', {
					className: cls_askQuestion
				}, void 0, _jsx('textarea', {
					id: 'askQuestion',
					className: _Dashboard2.default.textArea,
					value: this.state.question,
					placeholder: this.context.intl.messages.ask_question,
					onChange: this.handleQuestion
				}), _jsx('div', {
					className: _Dashboard2.default.blockSaveAssign
				}, void 0, _jsx('button', {
					id: 'postQandA',
					className: cls_btnPostQandA,
					onClick: this.handleHandraise
				}, void 0, _ref6))), _jsx('label', {
					id: 'postQandAError',
					className: _component2.default.errorPre
				}, void 0, this.state.errorMsg ? this.state.errorMsg : '')) : null, _jsx('div', {
					className: _Dashboard2.default.cardQuestionListBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.cardHandRise
				}, void 0, this.renderQuestions(this.state.data))));
			}
	
			/////////////////////////////////
	
		}, {
			key: 'FetchHandraiseData',
			value: function FetchHandraiseData(obj) {
				// console.log("obj in fetch handraise === ",obj);
				this.getData();
			}
			/////////////////////////////////
	
		}]);
	
		return Handraise;
	}(_react.Component);
	
	function mapStateToProps(state) {
		return {
			intl: state.intl,
			conferenceDetails: (0, _ConferenceReducer.conferenceDetails)(state),
			loggedInData: (0, _LoginReducer.loggedInData)(state)
		};
	}
	
	Handraise.contextTypes = {
		intl: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(Handraise);

/***/ },

/***/ 517:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(5);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactBootstrap = __webpack_require__(14);
	
	var _reactRouter = __webpack_require__(3);
	
	var _reactFontawesome = __webpack_require__(15);
	
	var _reactFontawesome2 = _interopRequireDefault(_reactFontawesome);
	
	var _Dashboard = {
		"form-control": "_3QTibw0rkcFfD_rm05fYpe",
		"modMeetingDetails": "_1CwtOtjIl7BtR-ODYYWhKL",
		"modTimeDisplay": "N4WWa8wLsLU6K-JdBjEyf",
		"modScheduleListBlock": "_1CnQV2qsrA2o9rbL8uE3Wf",
		"modCardNav": "_3loUQ1qct_oQ4wieMS1228",
		"modRoomInfoBlock": "_2JFYfytDm0cvAHCf5L-xcy",
		"workingCheck": "_592AUrRTUL8onhwqbxqac",
		"mixVideo": "_2eK-0JEHV5noltLccwowgE",
		"sliderWrapper": "_2tnn4cPZ5fD1lRAARa0HpH",
		"slider": "_2cGkL2aNr4JZcI0kLJh9ls",
		"myRoomListBlock": "_31HoMdhKh-IM9Y_Oc1NnDi",
		"previousSlide": "_1YxWrktQzGdSFemi7BVLvX",
		"nextSlide": "_2UlCmrfXJHjthn45B2-bmw",
		"modDashboardLeftBlock": "_1VqwJetzVjHYMlnURE4Kjg",
		"leftBlockContainer": "_-zQSWzKZxDa74I0VAkxLW",
		"ctrlHeight": "_23yxFDv3YkctjCMkevogHM",
		"btnOrangeAbsl": "_2JotX0yjVlFy8IGkaoQgbp",
		"btnBlueAbsl": "_2eGWhq2e5CnGMHhY55jOSP",
		"smH2": "_1O-rdnW6AGV6UiFdAwgKBM",
		"bdr": "_3gD-pzKqxdUIPMPVlaNhQj",
		"modDashboardCard": "_2PHQXcDk2k_ltm0pO1h8N-",
		"blueCard": "_11TZYQavvX8COjECoUgPsF",
		"modCardHeader": "EYf_WR2wkK-blqOtDcG9l",
		"searchBox": "_3he4ui3qAj57b2OD0g_MrS",
		"searchInput": "VagCUKtwyxZiLgTJt0kMV",
		"closeSearchInput": "_2KGEDLYswXjUBuym7nslSW",
		"showSearchBox": "_2rv4VTiOLNo3pb3INB9BV7",
		"modCardBody": "_3Rd2HFBaxlylosGdDLTUE-",
		"modCardChild": "_2DCytLWPd8KHc237Ppml1o",
		"modCardCalendarBlock": "PVL_XnLeFz3zFQ6miOeL2",
		"calendarBox": "_3a_CIRULoLNKiOzXy6OY2V",
		"myRoomBlock": "_1RUvLzuPIdQYpPonjgZzlD",
		"txtWhite": "_1nqx_BReMyFP5sNDt4WXGl",
		"mySchedulesIcon": "_3MxWBL9WveOt-kBqs_G0EW",
		"myRefreshIcon": "_2hw85F4M_gYjFA4GTUlScL",
		"modCardHeaderFlex": "_18uk968hXtEQXJGEG-u4Ox",
		"roomInfoDetaile": "_2KOEC9i7TEiW-nAAB6Ud83",
		"linkColor": "_3kasMgaSOTifGjyZXjvxS1",
		"lnkBox": "_1tHb0M_HuP3uSe4GiSjbj8",
		"regenerate": "_3CwInHfgvgsAlez12CnEQz",
		"inviteActions": "_19pDqSDmm_cUzVa0QuKvk3",
		"copyLink": "_2y9M_YTWlleUMBeaU3RrKE",
		"copyingLink": "_1mrfxFUtLzNtmoht7wr1cb",
		"copiedLink": "_2x3vMGPt5j9prhmwGGAU-y",
		"hide": "_2fFHqMt987ggp68qb7JdFy",
		"animate": "_3SFp1mkccnXvRmsAIrzZxF",
		"show": "FwOXzCB8nuuPUjOzsgDyv",
		"modStartConference": "_1R4NfTmYO4jzEQq3pllFs6",
		"startConferenceIcon": "_1eA9vgnIerMVm1dAf6xVUi",
		"alignMidBlock": "_393F6fdwTi-gY58XmebPJ6",
		"audioVideoBlock": "_2eXtpa4wfrDaOfVcZFVVc1",
		"modTroubleshootBlock": "_4KlnAv4BCunWHCyqDAuKR",
		"txt": "kFHV6maF3bI1k2N7_R_5q",
		"checkRight": "_2sMaWl324_9RhY6dMbTikS",
		"infoBox": "_5-R4SjNqMfmNDwZbvsefQ",
		"checkBox": "KgBWCpsb2Et90D-gku9QZ",
		"troubleshootFooter": "_1n0upOEEFhv73I2ig-cv37",
		"showTroubleshootBlock": "_1no-FxscU7MuJxqk0zGjRy",
		"modToggleMode": "tPMxdUNWsAMQKuFofMNqP",
		"toggleBtn": "WBoxChEmSYUFbAdtrVSqD",
		"toggleRound": "h3ckwWDCix86h_Lck1kn",
		"iconbox": "_3Y3o_rE45E4feU4Sn6kwBV",
		"icon-unchecked": "_2IFqdNxTU8Xd_iTZF1ArQx",
		"icon-checked": "_3vRpztbzRqE7xv5eDapQZv",
		"infoDisplayBox": "_3wBfO0GUocFZI5MRR6qxcR",
		"optionInputCopy": "_2W1WYQxcVeZ2JTWIFufExE",
		"click-wave-copy": "_3mT80RDeMj4wrP8KtxvRFk",
		"checkbox": "_6-n25TO0Vln7Ca-Vy72Ch",
		"scheduleBodyBlock": "_2fwc-AXiV1SrifKIFhohL6",
		"scheduleLeftBlock": "pUpQVknCd4qnJu2T551G3",
		"scheduleRightBlock": "_14belIp04YiXHz5KF9UXYy",
		"current": "_372awUtOsPgtfGPPnKHhSa",
		"dateDisplay": "_1_iZDARcFMOTbp_QeIIOI6",
		"timeDisplay": "_3B0mT6Fk3SM223Px1HUH8q",
		"meetingTitle": "_1uLvLrUsYcTwiGrKdq5eUX",
		"organizerDetials": "_3SKfeUJZBN6SxSMD__ptF5",
		"adjustTime": "_3oDuqi79Y7MgmQrGUEL1jU",
		"modScheduleControls": "_3T43tGc9mqRFVTBPXPMw0K",
		"placeRight": "_2Xnik9BNXqFS-jPl33deSR",
		"iconCircle": "_3Y-t8bejHE9Fup7Ec4Pq4E",
		"bgDelete": "_1GJNdjnKMlD4EmNPmz-4K_",
		"bgEdit": "_2f8OUVb2BafjvLAbHdpqu7",
		"bgStart": "_3IgunDq0eAu2vDHG8XppCD",
		"modRoomControls": "F-uWXK-tE6BFtie7rpoxk",
		"headerActionBtn": "_2plXnacMateNoHwCkqwEWQ",
		"roomItem": "_3vHBrLrbe6sJAGbDPlt7Qf",
		"confMain": "_3DqSw1WO99YIEPjLT7FLrl",
		"videoTwoLayout": "_3xZVvS7VtYVHB1C52yfJ7O",
		"videoWraperSixNine": "_2N7l28dVpZtRzo_4fuy4CF",
		"imagePreviewFilename": "_1jLcpueFPZwkrcrxF-U9ac",
		"imagePreviewInput": "_2t6FXh0BmCB06JtUVyoy0X",
		"imagePreviewInputTitle": "_2JDThzyQXrTnrtd4cmet0B",
		"roomLinkBlock": "_37M0_Gc_Z5AM9lz0cZOSW3",
		"roomLinkBlockHide": "PeLMcCOiRD_An3rWzxmah",
		"roomLinkTxtBlock": "NG4_A1nq83gEJ-HM8XE8k",
		"actionBlock": "_2Rr5TiG1tzRNiDq_mF9ejw",
		"rightActionBlock": "_3EytWjhfBIoUeu9MTDtMMZ",
		"actionIcon": "_2BhbHObfvKj_tyOtnCXlvk",
		"imgRefresh": "_13otDg3j3KkZ7Lk4FL4LT",
		"imgRefreshMain": "_8N5c3xRz0bu2JeO4zX4Z1",
		"blockInvit": "_1gBTW13j-eU0FdmnLCIBNR",
		"roomListactionBlock": "iWAiRaW7Cor9n5Wlcx0Bv",
		"roomListactionStart": "_2zLPuOdZcM54YCxM2km0Vy",
		"roomListactionOptions": "krdltQkwUcpo0KkM7BuJf",
		"createBlock": "_1rxZmkIwxOC9yaafXpBxoR",
		"settingsOptionInput": "_3h8Dd-219Cc38uJcT4_l_K",
		"click-wave": "_1AusaJ8rjI7Xfk8RllzgGB",
		"radio": "qxUUOVMacCUJsb9wWAT-o",
		"radioTopic": "_3fsmlsU4qITdB2vjnmzplM",
		"checkboxText": "_3n8ibXrQlE0pId0LR3P9J2",
		"checkboxDiv": "QUFPwjlrTJ0wlpPD3rTGU",
		"topicCompleteDiv": "_3niKskbh0a3vrBWTheTuE_",
		"cmnToggle": "CVBdEgFXXxnePrTgrbZVl",
		"cmnToggleRound": "_1jJ7wCt7sv5qEOCb6DDMqc",
		"smallTxt": "_3kU4p_OtCkXHW6JKxKn2IO",
		"onOffSwitch": "_3nd3we3qsV7UU1qIfbkBIp",
		"onOffSwitchCheckbox": "_2xJlS1TE2_yY6bDF78r8e0",
		"onOffSwitchLabel": "_1XyyBxoKftSfYbx19hQ0sm",
		"onOffSwitchInner": "_3FEhuqjn0CdbG-yYTgJlMy",
		"onOffSwitchSwitch": "Ji6tIyDKYXg3yf4q7Bi--",
		"GS": "gYv6Cki40O7MnS-2FaqAC",
		"ok": "_1Lu0E7LDefbes51ctyJTSd",
		"eV": "_2zR0VU1YVyla1NyOJsoNt",
		"oj": "_1nf6cU1pEv5Z8F7hFdj8C7",
		"wO": "_3_Q6v5QVQmu3FgDIGULq9H",
		"wA": "_2sE0qIiO12OWPJMWwoaBje",
		"vR": "SkmcAQ-pe5bh3hsSUQGkY",
		"vN": "aQ6tWWFJ-VTFIfjmWdAhd",
		"vT": "_1DfSysrHxZlzt5_lQKQ5KI",
		"vM": "_2bUxn2HXClWnGtbUfff1kk",
		"vO": "SRVhsCSJElL2N2bncZ66l",
		"xi": "lmPSkKyMX9pnMT4fbsRhq",
		"cancelMail": "_1eDK6WOXFAHqpoVg4HER_J",
		"block480": "CQcSBF6UT-a90qhoUJPZA",
		"blockLeftWArea": "_2Ra0QuoABT2hw0fdb7QADQ",
		"makeFull": "_15po1tkQ6kCMy_PbUji69G",
		"workArea": "_1NAQYgBgRL0sU85k42CFpA",
		"workAreaHeader": "_3i9r4DymxkePSH6FVA1ejH",
		"workAreaBody": "_1SREnE3-oM_CpLlyoQX4Ib",
		"active": "_1ArF26g-C4U3LYU8KWRPCo",
		"countCircle": "_2JR5DcJrnOIHHyRVfiJX_F",
		"countCircle1": "w9r97x-TiZxNDWCuFVXX-",
		"starNotification": "_1-6U_h3ED6F9OlSlfx59sy",
		"blockSpan": "_25AWsl97g1QtnIlMpm3K_j",
		"workRoomName": "_1sa6G3v0RMuN8rVGQksPuu",
		"nametxt": "_3p_2O_fUHAbaZKVFlPaCsW",
		"tableBox": "_20w-PnQsoQFJJOW3drkuod",
		"tableRow": "_2IyLAOJQcVk92kSTfEG1Si",
		"tableCell": "rzgi6k_bVCkPYcosAQq-S",
		"video480": "vGx0JzLcpR4w3ZqSu6Nmp",
		"videoFullHangout": "_32dlwY514UbriuXtN7Kdz-",
		"videoSettings": "_3r2Q2qErK_JrBZupy-pU3D",
		"videoController": "_1Ign37hAc56flxBG7iE-pz",
		"vadController": "Mdp86yCq328fUgmiBmu4V",
		"shareInviteConf": "_3Cjt1HotzzG0y-CxnkGixB",
		"shareInviteHangout": "_2_9t2eh-6SNKpCSJqYDQ_x",
		"controllerListBlock": "_2dSgvdbIanqyW8Ne0lL6TJ",
		"openCBL": "_3THL2FyC3Tzz4jIXTQqiJh",
		"hostController": "_2xrFY7BsSofHMEkTcGwWCL",
		"video50": "_2IHlSfyoCPLnOpOXs8b2hX",
		"selectedSpeaker": "_2DbZB-qdUdixJpfhf6wPtz",
		"speakerSelf": "DRA-_qaqpq6CJA4Mb-4b9",
		"speakerRemote": "_3Hap2aT2hqvdjaeCu5XM1R",
		"videofix": "_3FaL1qNE_WulRajpajfURR",
		"video160": "_2bulcQMuegySb8QvR4hhyA",
		"videoPresenter": "_3kwg8CiHo3BWJagulUUCv1",
		"conferenceLayout": "_2vCvZzAr0eY7Edu-YYwVrj",
		"videoConf": "_2Sp9vfxQI9qT3rGP5JhUGg",
		"fullScreen": "_2iE2SUPU6KAwW7hQAEurjS",
		"mobNavCall": "_3GxLZTgHEl_Yha4Rt-OTL4",
		"subscirbersVideo": "_2ohPRE8x7wFyxoOTUdffTG",
		"attendeesListBlock": "jZyehi7HJvjpJMnXjXplm",
		"scrollImageContainer": "_1dYvLHhKqviwsoT_F_wDjY",
		"galleryWrap": "_3aeCJ8MDrOQ018R6-1Xz92",
		"gallery": "WNmBQRphY9tp_5yj1LFNa",
		"videoBox160x90": "_3meuZ6rf0vh4GWooITg4FX",
		"video160x90": "_1byH3fApt-wi8zgcAMAJVv",
		"searchAttendees": "_3xkER30ZEucYNqT0KwJSkj",
		"navBar": "_3NRqy7EL7CgjfHrv7HTYW7",
		"addon": "_2UweSIkLiYggOPFf0_GS1t",
		"formControlCustom": "_29u1wAxpPpW0FzlqmesNru",
		"btnSearch": "_3XPRZ2acWwy9VWtnlHN33a",
		"notificationBlock": "_3x5_pIqdcDrCvgWR5NVdkV",
		"notificationBody": "_3b2YAC1tmb2cJ5axySX1Lo",
		"notificationList": "_26WZcpU2IM9wIbja_r2zM_",
		"listStatusCircle": "_1Bd9V6UXKhF3VoOSKT3CUf",
		"bgAway": "kgCnPze4tmnUJnBY0OB_a",
		"bgDntDistrub": "_3tpT-4OlAfL5hakZQVux5r",
		"bgOffline": "_3Fg060l40snk46xcJ1ofJP",
		"bgOnline": "_3umWfif8Ug5jnBAR8R_oWa",
		"actionBox": "_2oHyjHrSJNz9-eU9x7b8DX",
		"notficationName": "_1m5CAvP-BlRxa_Eoa4NLiA",
		"name": "_1MHehTYf0-emGYZtBQLmlF",
		"new": "_8eRoDRyl4tE_u8pIOUwe1",
		"notificationText": "_3zt-_GLmLbBzRmOr-I0LHs",
		"hideObject": "_57kGZQ91Yjc7XHsu_wETC",
		"hideObject1": "_1iWHKXKm2FUw0jpRuo-7xk",
		"whiteCard": "_1gbfWpuPLdIXAGHiAHQDfB",
		"breadCrum": "_1jOegZ8vPtKnc1jeQ9wwD",
		"topicsListheader": "_3uxPBqtHfzw5PJYNFdTBpb",
		"topicViewheader": "_1ivGPxBuiD5S3eSckvS1F0",
		"headingTxt": "_3E9yestQl1n2YRJqne1wuI",
		"mainHeadingTxt": "_2jaSy32Sa46PslN_yvliWN",
		"pdfViewheader": "_1NtklnkdHeNLckVHS430iQ",
		"flexHeader": "_2RNRAbze1OVPbh7Qq2HTDo",
		"flexRightAction": "GZvKO2tQSYCC-rR35CM9q",
		"flexActionList": "_1apa5Nl3KJ8ew2teXPGmGb",
		"flexActionListSpan": "_2WjQOPRiFvm-f25lPt965F",
		"topicsListBody": "_2E2VBM_64FqxcWtVu2KHaC",
		"topicsListFooter": "qawuhsFKu-cjeGBEt4RYn",
		"topicListBar": "_3HgGD4HtcWyFVvyvl2ZOtK",
		"dropdownBar": "_1SZG2Sl_IjoMI2OjWbA5Id",
		"dropdownList": "_2h__9ylGrN2-Qqw6JKRakU",
		"selectStyle": "_1q59wKuN_hTo6ELOdxYMKo",
		"pastTopic": "_3MIQello5WqJvKXgVxQq8x",
		"nextTopic": "_2n6cLCfKS4CA_8LApGVxP5",
		"select-style": "_396MZIiLZ-HHho-zgl1C4F",
		"faIcons": "_3sPlnDs0WSPN4hWYxOQC5P",
		"dropdwonaBar": "_3uvNOnFpDLhvjBK6LwPgvg",
		"questionBlock": "_3j01LxubnPY8Zin6Xb4Sws",
		"questionHeading": "_3d4zlzbrtXjqz96MrZC5T",
		"questionIconCircle": "_2nNPIbnlo257g5iAvqD_Cn",
		"chooseAnswerBlock": "_3bAkmxIYMlZec02RAUYxg7",
		"submitBtnBlock": "_1Fi0FYBjo0B90OgOnm8YEa",
		"rightAns": "_3EJQ9Bd__2JVFWsHHT3HBw",
		"listTitle": "_1MEYJ804i4UDBRUufPe61T",
		"topicAuthor": "_2AkPf3QWGyrbRwvy5LRsnu",
		"authorInfo": "_11Y75XEQnR6SUD4RFky3pP",
		"authorName": "_6ozdfbrPgEh9x2X44pTWM",
		"authorDisg": "_2D1NfK9OldseGrg3AXIk17",
		"shortDecBlock": "_3Je3YUnBMn3t55lcoovPzW",
		"fullDottedBlock": "VnHDgOsqZoVUVg_yUB_Vk",
		"fullTopic": "_3Pli_905bfPpb5cIfqdmak",
		"authorsBox": "_2lGEvR4TtguQDmXWpo8S4y",
		"hrzlList": "_2xG2_aPEpjELARQTB86ef8",
		"mediaListBlock": "_i1VaAQ-sCNAen45Xbkmr",
		"videoThubBox": "_1GumGOvJr99CdUQVnfPBDl",
		"mediaView": "_2b3-ImLT9sWY9-gEjaN6zf",
		"videoWrapper": "a4Eohj5CN9NtDBPk2Qpev",
		"audioWrapper": "_30ub_6ZUP6byP2PFyRyKG6",
		"audioWidth": "dK2oAupgsDxYmadGgHYQa",
		"resourceList": "_2ZbyeZQoo-Nlq0zRPjU5C2",
		"questionCircleSmall": "_2MFvDUZpsTjBizdA8Ovgus",
		"dateTimeBlock": "_3OC306wGuvzKF7F6GfCx5E",
		"dateTime": "_1Z9zb41XgUJGPIXahD9r3J",
		"timeMrg": "_3RnkXq6ZcaynuwvzXVP12a",
		"currentVideoControllers": "_3kashb5f4PB17jcHEVRT2e",
		"popupCurrentVideo": "_3ssWuUXBGfwUidS1g6Kbkk",
		"volumeControllerBlock": "_1xAJ-Q1GiiPqGheM3W2mH2",
		"contolItems": "_3qpiuXUmKBpRZzNmbEdCwM",
		"rangeBlock": "WipkYA-VcS3mEoI2nVIBJ",
		"chooseInput": "_2pBHcAS3Od5jcyzTDJvjYI",
		"clickWave": "LTcaWPNKuZ1DwZkpawqeK",
		"inputMargin": "MF3QMxB5GBmImpYNYYOVC",
		"removeThisUser": "_2hrM2JinvCUkn2QmbxeEak",
		"removeUserBlock": "UxuxKn6Gg-6am_DYzswxQ",
		"statsBlock": "_2g8ymjJkIDZ9gyEk0SXWqG",
		"statsHeader": "_285bYsv_FztKZIUtNWy5fE",
		"statsBody": "_2RsJrDcl9eMBRSnmXQhpVc",
		"answerStatus": "_6WzqlC42ZMJxZsbeTPjic",
		"formInline": "Z7FVY_mGYFLJ5PAkXt8l",
		"resultsBlock": "_1dSxfqcGuRi10Zf-o8Sy2v",
		"resultsHeader": "_1iuxKmmSqnDUJKqZcoE4Vt",
		"resultsBody": "xzwLGWItp2MVp12qw8wVH",
		"userInfoBlock": "_20F6JQ242qnK-l_-ydJlOH",
		"resultsAvatar": "_1FFgHXbC-XNhIq07nGVmFb",
		"resultUserDetails": "_3CBQUgePb7sAvJEAjFOfZE",
		"resultsUserName": "SY4mqtkuPEtiJ2RquaO61",
		"resCourseDtl": "tsZZ2UeIijlYCKkt-yrrz",
		"spanNames": "OCZOSIYqN7iTyeN4lz8H4",
		"gradeVal": "_39cTAKxCimT4cpFY2Q0Pc8",
		"precentageVal": "_9F2X6CTxTmOMALnLEyjCw",
		"resultBg": "_8jhcRCROQvFaxY85y_xIk",
		"resultBgColor": "_3e2kjUvxB5dOmBN3dR5t52",
		"resultTxt": "i_Tfk2LAPxzoyCXWs_N4z",
		"broadcastContent": "oRGcF2vjQ1WswdRUw4wZo",
		"cardBroadcastCon": "_2RRIWwX7GUt7bRmr5oEDkT",
		"cardBroadcastNotAdmin": "_3E_-rHj34eHWhAU2L3CbGI",
		"cardBroadcast": "_2_C2HaINv0VwkhzLOilnd_",
		"boradCHeader": "_2DboIyd2ktgXfDXq5w4Bb7",
		"bcIconInline": "_3bs4pFWhxfK0CgQYN4aKzW",
		"bcHeadingBloack": "_1s-8LLKTvwj5xuYsMAxY2t",
		"bcHeadingTxt": "_1TLsN9kK8omRUmyucob2Dn",
		"broadcastNewsBlock": "YLgVAwgrlpXE6Rda-AvH0",
		"bcTextArea": "_1zOxgCoMKR_LO5IJh5kyf_",
		"handRiseContent": "_2pDxarc6ckdmi-EmeaztP2",
		"cardHandRise": "_2-pstaHl-UL60lr6hbXpHI",
		"cardHrHeader": "_2dnh8BOiBjOdK3UVcs1pT0",
		"iconInline": "_8Df3H_wNvPcGZZRX-E5Zo",
		"headingBloack": "TQ_yU80bbvRi_74JGoMU6",
		"askQuestionBlock": "S4JQJXBqQwVJqdW52W6O3",
		"textArea": "_3dN7ybahNCsckxhPiD07TT",
		"textAreaRecom": "_2RQkeF_-wCDhnAwn5ZqXs4",
		"replyBlock": "_7KIns7pK6Et2bJMFLAXxD",
		"repliedInfo": "_1hCoa34OtstZ9c5pkJK7se",
		"btnPost": "lE6aJc2ZVVBJEJO-lu4A5",
		"btnPostNews": "_1GDPkD3Pqrm-WHN8AaYbRb",
		"cardQuestionListBlock": "hZx_vqJe5Qu4y_5RsWtQh",
		"btnPostQandA": "_2LeItkvBERArOvUPIdZutS",
		"userQuestionPost": "_26yl64tliiZWMBaDFHinhy",
		"avatarCircle": "_1_-knNt1dv799aKLtWYfaW",
		"nameQuestion": "_2aMY5FEWYdY-DMt3hsQutH",
		"avatarGuestCircle": "_33bb2Dv3EIksPAvcceQj58",
		"guestNameQuestion": "_2yPUXePRVjSf7NqPrJwkV7",
		"notificationListGuest": "_10woS_UrLKE46ZjTd797v",
		"selfPostMsg": "UF5cH_Z5JLpQMTNbjchOv",
		"avatarCircle40Guest": "_1WCtCo7nACeBQqOMhW3Ym2",
		"guestStatus": "LXwjgTgsQbpxGP-LtS_ld",
		"topicAuthorGuest": "pHG707x8j_hG4Puo8fEGU",
		"questionActionsBlock": "_2Nor4nr8SU86tsF3ewwoP",
		"bottomActions": "_39eBGH1T8fg9hpG0cFoY-A",
		"avatarSmall": "_2Pgk7un86GExXKis1ZfsUY",
		"postedQueBlock": "_18qce1Xm9vi8oFbDr23uAM",
		"postedUserName": "_3Ja9ilqa2POZCyFbqpW8YA",
		"postedAnsTxt": "_3hV-imqFSQSFxcU2_XHsk0",
		"postedTime": "_3JbETbcjAgExmXiR-1hDMp",
		"postedAnswersBlock": "x7HfMMKJvC3WhnFlWmRYz",
		"listPostedAns": "_2ziyM0OrViZU_2gPkbzfds",
		"postAnswerInList": "_3zQ6qchIZU3eG6o6sXPF-X",
		"postAnsTextArea": "_3Z4qamqjNmjd9fu-bf4VjL",
		"postBtnInside": "_5oyZ8fn65UA-xzIyIihvB",
		"userQuestioninline": "_3-7-dWfUdHdcwWgYQc8ETE",
		"expired": "_2lmG1quG5YqLe5KeEQHfuV",
		"questionActionBtn": "_3i2E-AMYxuNPRhasvO-qfw",
		"arrowBlock": "_33SA4BSSfD9AmHpvYBWtM5",
		"whiteboard": "_1JrzAlUaaS4yvWvxIHlvXU",
		"whiteBoardContainer": "_2KN2qEPzbJHYr6YZ6Isf6Z",
		"whiteboardToolBar": "_1RW1If3ysSunn2C4GvQhtz",
		"canvasContainer": "_3fXbkjZhJMpsxvYMR3_Y7P",
		"thinScroll": "_3jwhB3qAIY7nqOZyPwQvOV",
		"toolBarFlex": "_14Z1UloGleIvjFZuxUescQ",
		"flexColumn": "_33OTV_R7Caz3GFRj1C5HKk",
		"colorPallet": "gZqx-z3hQc6YEu1T43LR_",
		"line": "_1B3Gt8Fi0K13ejNWSm_Olj",
		"centerAlign": "_2xvjSnBwv8QfVdYsFCV4mL",
		"screenShareBlock": "_39hrZZRAdy1FsKQ7QLNUz1",
		"screenShareBtn": "_2fiRStJEIQ15ntKDykWz2W",
		"screenShareDisableBtn": "_2CciW3BjaeE9SR17jjlzkH",
		"msgBlock": "_1uV5e-yig-mEeYlZKwCwZ3",
		"textHeading": "_2xEmNwNuxoELPwUxfNtpF-",
		"screenShareBtn1": "_6CfVpKk7B-9Ua-SjV45Nc",
		"documentShareBtn": "_2y8i1t26hOSahDgMnXCk3F",
		"loadMsg": "_3BPPdyWBPd6ER5gPz0QvKR",
		"listBox": "_3kQmECEo829bBDN_jgTS3v",
		"iconType": "_3ECKM0uK-dbRZTp4_zIZfy",
		"fileInfo": "_16c9TD81smzmc6Hx-N_6h9",
		"actionButtons": "_3ZQTEK13Cg1oPa0TgAT-Jv",
		"loadIconBox": "zwXx-7n4iYSSPVaTH9Jdj",
		"loadingTxt": "_5HxTuABsdMJGfGDIZ7KTH",
		"clickIcon": "_2vmcrrorNSoW2mxuO-YRmz",
		"viewBtn": "_2t25cP1fcnEHX2p9Ob0vsB",
		"GcenterAlign": "_1QgQHpu8rEGIsPevaPgHpb",
		"GmsgBlock": "qpjYAHJoLY6LP3Es9T59B",
		"GinputGroup": "_1hILNc6zjthnYjmx5qcfEr",
		"inputTxt": "WOB0iD23T16A4qvjUGMbB",
		"GbtnProceed": "_10kuqC5fmzifivzO8grcIj",
		"GscHeading": "_9M_87CpYRjV7PxZSp2AM1",
		"sharingImg": "_3QDdFbGwKj7LVM_Zdrvw6Q",
		"sharing": "_2K4aaosBX43FwufpsvwsuD",
		"roomChatContainer": "hdwAXX9Gv2IqvGfyrr7f0",
		"roomChatMsnger": "fUTB-KDXqt9Q7dG6LyQF4",
		"roomChatTypeMsg": "BJwgYrEoE2cCNIHuecHjV",
		"roomChatList": "_3L3Qsg806KpJ0sFMKfYnzA",
		"avatarCircle40": "_37c-pP8ZhsaCA_dBqlCvBk",
		"listedMsgBlock": "_3lWB7hF5eHGv-LjYRRufr2",
		"avatarNameBlock": "_2akL2SXeRHxZWX74HOxhw2",
		"listedMsg": "fQLv4tzdilpf6Gh24l0pj",
		"downloadFile": "_73W96Y7HjyT210KK5B8kr",
		"downloadMedia": "_3F2asc8NSHSlZuBI8g89zB",
		"textField": "_3UvnuZDEUYa6Mdzpad6Fzt",
		"chatMediaBox": "_14KCLHjxCFLnGTXMVnyOwy",
		"writeMsg": "_10ipn0dFaAOx_fHDbQbK4j",
		"attachIcon": "z8_E7UhHKqb1GHxjCAL3b",
		"msgInput": "_3J2q0dKOYN5RX2dIu7_1tt",
		"msgInputTxt": "hS79giTgrE9N9VsNTzYUg",
		"lineThrough": "_3GVN5aAbJeMP1oyZj4FHVl",
		"grayCard": "_14C5MY3tlKUnhIplp-P9F9",
		"grayCardHeader": "_1GWV9DYcf6silwfQUJX3Ww",
		"grayCardBody": "_15QsWVRn4iwzlrga2Nh5SG",
		"filesBtnBlock": "_1l0Tp7NY5564BipetBJjfU",
		"uploadBtnBlock": "_2HkZeYwi6051Zz_4SLQw2_",
		"btnUpload": "_2IOozhknYZae6TZnW7Qib",
		"helpTip": "_3WvYpGaU3lAKE5SrxjrIWT",
		"fadeIn": "EOuXjQRzjRFcfcb7xPbjf",
		"heading": "_14qifIYGkwSGUJU-JdaVcA",
		"uploadTxt": "Q7LfnwHlCzGc5Oj8psN7a",
		"controlBar": "_-urTc0azZ3-vp1NVqeeYv",
		"remoteMute": "_2HnEF_FDMRaXINcfuCLeha",
		"bgBlueUpload": "spzydlKO3OYHAJE1PYY6H",
		"bgGreenUpload": "_1f7dUC1CxVj9DjooAMEN5B",
		"bgRedUpload": "_2hgIY_eCLmbpLmSMI753A-",
		"urlConverterBlock": "M2ZaPnBvp708xyutzuPyR",
		"inputGroup": "_1sprpdzsES8qlhbBtT4SD0",
		"wrapperContainer": "_3xAWkYUThiBOAuoHjmJtlb",
		"listDisplayBlock": "_19xoqFnfI0N1z3HcY-zwjy",
		"ldHeader": "_1slAj86rbMftbX9t0AaHJq",
		"ldBody": "_3npQjCmGu6RB3P0rOdvvzc",
		"feebackText": "_2NDuRpEZ4Wmy4vO1IGxJjO",
		"feedbackButton": "_3EIg6rUVMIzJ9R_ttW8Dgk",
		"feedbackBlock": "_3-HNwS1ArAMVob97a158n3",
		"feedbackRow": "_17v1n7G48x1Z05N3h_g2IF",
		"feedbackContent": "_1DwS-A3nhHgjUkHDrbuhiX",
		"circle104": "_3Aky67sZg-SMVFOPePCkQa",
		"feebCustAll": "_3Hep3V7lMuF1Hc_vGj3iuy",
		"ratingInfo": "_1XXOYmTN9oexXEBvs0098c",
		"ratingOptions": "_3uPXsK5kXxzDBNzwPK23Cd",
		"radioBlock": "_3w4E57d6-_evtHYRXhogp8",
		"bgAvg": "_k4_b6GzZHVVgHaEMFqjp",
		"bgGood": "_1rbJJs8YDeUSKDnXj5vUUT",
		"bgPoor": "_3J3ZFU1yFf4XiMIAcw4T0e",
		"fbInput": "_1uXdY8_zpei10SjAdrwf3T",
		"clickBlast": "_22Wjm-xyJ34SC9hC61FXWV",
		"ratingNumInput": "_3ZOY1VJoOBoWeAeoiUjc2z",
		"ratingNum": "_6uaoQDlAKy-Xw0LvMgAef",
		"fbTextarea": "vpDjfDPcccIx2BQVp9CF9",
		"fbSubmitAction": "_3Kq2Vs5ZT0Eifzi5ETD6O8",
		"customFeedback": "_2lkyUKZELnbhH7kRLu_DoP",
		"header": "_1TwSIsxvkVmzR5FLt8xux5",
		"fdText": "_337STHXS8TG9ykaH0OSQ-0",
		"fdButton": "_1UXNdxJFLaBjcJLnOlo12x",
		"fdBody": "_3b_1iZg1W8U6E6ewdTtwVx",
		"midChoice": "tm2bJJNxFshKUU46rKv-k",
		"fbQuestion": "_13PPoLG4gIZ7yEAsaAVC8S",
		"fdBlock": "_1I60go8leztL3xpuoXJSHR",
		"fbOptions": "_1piXq2yGvgalP9LFCEVIQ5",
		"feedbackFooter": "zA0OOeTb-EVBCOLBRgiTp",
		"blockSaveAssign": "_3xu8KRhYb_Gw0mKD95BtW",
		"btnSaveAssign": "_23Cvf-4jZDkpkQF2jhebA5",
		"custRadioBlock": "_3IE7ONc7URxqe3Yw4GUZig",
		"custRatingOptions": "_2O4SJoxUEMGmPZF_FKEWIH",
		"custFbInput": "DSZ2RL63kssI2K1aCGdCp",
		"screenShare": "_1jdacozafgDzH4389wbZC1",
		"loadmore": "_1tdkek3jBA8PX-GFoyRSu0",
		"muteBtnPresenter": "_1deATnNKvo7VDEkSi3oFLc",
		"muteBtnHangout": "_2VdXKHr-tiiInNLYDltho2",
		"endBtnPresenter": "KYuRhoYLhOGQMIViYFgyu",
		"endBtnHangout": "PefgFJehfFdAG6qgRskUA",
		"selfCongfAction": "_2WTrSpCaDpf5ss99HVqIz0",
		"early": "_3_xeMXpY5u3I9qrFVhxjJ4",
		"selfVideo": "HyCIN_Szj18CUIFBvOVzr",
		"selfVideoCard": "HMDJAYrYZyBIJeqMWlLqW",
		"frontDisp": "_3HdbMGne4U1VbWHAAifP0v",
		"backDisp": "_3sLCQkw2IXXwHMlzoWsyGo",
		"flipped": "_39HG1m9XJCxv4xemiiOyiL",
		"nameVideo": "_1T6cysBNdgM-VA7yvpjPjj",
		"editBroadcast": "_1nlxgmNhjjB2HbbFVmn8Tu",
		"accessWrapper": "_1njLy8ZgRetiKrbYePxEyU",
		"accessBtnBlock": "_2M8h-rmMvjTnsWu-R0Xuir",
		"textAccessBlock": "FUnbiYOoqChe9btjN-Gfm",
		"fixedProfileContainer": "_1y0Y-PVPluOtV9T-f-CX4T",
		"viewIndiProfileBlock": "_16fg7BjDM7Atq4bHN1yS3z",
		"infoIndiProfileBlodk": "_2lhLdmQQQgLs0aQYjtO8Ln",
		"profileAvatarBlock": "KNxiupbMBOddozf1HVVDI",
		"profileInfoBlock": "_2RX1_7GABlRgscAgnuWJMp",
		"avatarCircle80": "y2uu87JDWlb9waEP6MG8m",
		"activeCircle": "_3e4XPMOjyToUbrXWu0ZkgG",
		"inactiveCircle": "_3HUafiox2d58MZWSvcbdcg",
		"avatarDetails": "_3NI1Bh97jPDj-2h8H4ZIq2",
		"txtTitle": "M3hEuXhJvNXMg7Y5KLMMH",
		"viewAll": "_1BRKGbPbj3Dfycx2DIAjpc",
		"detailsFlexBlock": "_3akFxwMceJsdribRj80Vf-",
		"detailsLabel": "gZrvCAQaemmpNG3SODIFp",
		"detailsValue": "_2nLUsUodo2oh6tbb0I9PYd",
		"detailsValueCompany": "_3Zz9yJQLm-C_o3WLBT3C51",
		"emailPersonalId": "_3-2GdUgscFsrHoUfF4H9VP",
		"connectionList": "_1IMwA2AXBA26rg9oKcAMKc",
		"avatarCircle32": "_1cX2BxddsaIcsAchaN_0bR",
		"connectionListDetails": "_2FFF1AgPcs9V52KBbrnqGq",
		"emptyString": "_3cNTa9YM5AtVeASNM5KqhX",
		"otherDetails": "_3Eu5FaQSVWpGHcrJkTvBP8",
		"capitalize": "KppKGcFEDo_NZ826dTluU",
		"viewAllList": "dqtBLxPfbwAnk_IyNPnpF",
		"showViewAllList": "_3VRn2vds7oVl0eZbYp8deW",
		"viewAllHeader": "aUdmf36uFKMNJ02h0Ng7a",
		"hideViewList": "_2K0K3uL5lzpD8nFKv7Ek3e",
		"viewAllBody": "LKpf7rzjhaCU9sKzKmZH-",
		"datePicLegend": "_36xaVYWrArVCc3pP2GIxNu",
		"selected": "_3ffpfHx2YPv6ZNoh7KV0w3",
		"scheduled": "_2avyA2LOPpcSycWlMHPaUH",
		"pastschedule": "x-xQy4E7A2__JqHtMNGHP",
		"txtDisplay": "_37GrOE75rrUaBv7KKTPu0E",
		"controllerBock": "_3akv9_RRBbNQwXvB7tlGII",
		"tabContainer": "xcRXxsat6i1ayovZImHbk",
		"tabContent": "_1U1PBlFztvJukf4hnZGW4T",
		"contentCameraResolution": "UYdmyEIL8_WVmBDZt14jY",
		"contentSource": "LpxHAZQVT8QjwDiMNPwa8",
		"contentBandwidth": "_1wmenJvLyWxAE-HQLQluDI",
		"contentReports": "_2eZub5PkqTuoN4O8UKMCt6",
		"controllerForm": "_1cagy3dcEUn69N4Rx51UxX",
		"reportBlock": "_3C6ty5LWWnJSjY-9wXkoeA",
		"cameraSettingBlock": "_3oG4mEv7c2vdKW5HgLPs3w",
		"fadeInScale": "_2asY4Ihuqh2etZxEUNY9c-",
		"formGroup": "_1K2Unr1hIW-6cSpqAFb5xR",
		"graphBox": "_1SnrpiNio41LCfQ9PZB62t",
		"formGropBottom": "_21xk7cYpdspRbfO-zU4U71",
		"formGroupLabel": "bGXt7ziC5ec-frylDOf-m",
		"formControl": "wFCWdJ2O1uJLf5DZ0hCcZ",
		"rangeSlider": "_3SGnp747YKXvbKZO6X5wry",
		"emptyFill": "_2jogfsQjLH20deON2lOPwJ",
		"lspanCgrl": "_2WrPwNXh5DjswV7j0r9PmX",
		"reportItems": "_1O0FX0KhcVM-MW4mfdamIW",
		"itemsKey": "_1qTsbm6D0TFwSwHOupXw2m",
		"itemsValue": "T_-Rux7E9Mn_irEdP5PML",
		"camResolutionBlock": "_2kefycfi5LHRpuhe7l60yK",
		"cameraInfo": "mblzkQvrhcm5_8S324wPZ",
		"selectRadioBlock": "_2-9LRZYzp7PZaQiIsM3e7T",
		"uploadAssignmentblock": "_3MN_mbK5O4fYb2WEwXmH5Y",
		"uploadAssignmentButton": "_1PoxxC4oxwriU86mJ7qhHj",
		"deleteAssignmentButton": "_2YkzoSsbt7DSRwDJNfhXey",
		"clickWaveCircle": "T5wUa_0RzAoVS3I6HihYr",
		"yourPresenterInfo": "_29gZRxnU0RQOGIrijmQpFb",
		"circle24": "CjrFI5HahIAdAOjPKZFo2",
		"yourPresenterTxt": "_3z0OdWoxl7bX9qTLdisag3",
		"hostYet": "_2cs7d7oLUVytfEHZUlGA2E",
		"hostYetMsg": "_2Ys57tiYoVcvmd2leqTF-m",
		"mixStream": "_1LUz2OrsSUeHU8vnr5BJ0Y",
		"videoBackButton": "_1DzzbyNFYIMSoXIPvcZwC-",
		"absoluteRightActionBlock": "_1R7HE-MlHi9o59f3uPQCJL",
		"iconBox": "tiI0SDpOfPW0oEsJN8nqj",
		"spinAnimation": "_2faDr9xWFNRebZW8IkffzI",
		"spin": "_3PPOnKUpRgqVMMspqO9BoW",
		"backButtonBlock": "_2KqS4BUTUcxlsidNmRfy8A",
		"hangoutSettings": "_2F6Phx0wOsh0CNMdsObMZP",
		"removeOption": "_3PVQHXou4BI73YFyurGNte",
		"marksCss": "EgcJYbeHfheQ9gsE0MBNr",
		"optainMarks": "rTUshkT8F5t28qovt97oz",
		"studentHeaderMarksInfo": "_3_iS1Yl_iuR0ZcX1gX2ec8",
		"pollResultTitle": "M1T7vRAoyi0rIl9XaqZbp",
		"feedbackBlocker": "_6gjYic2V-simeXsjUuftd",
		"btnSaveGrade": "_1THZJrITz878_5_fKYf74y",
		"confActionButton": "_22tu-fogD6d4CRmJqrG6Bs",
		"btnApplyAll": "_8EMs98NWa7qHJpi5U7cxu",
		"requestTxtAll": "_1McRkoB5bQKwPj6HuuSOCl",
		"popHeadingAll": "_2MIDDaI4stVeOaNEB92TuJ",
		"popHeadingAllExtra": "a51na2wMDOfY1cVESKtjT",
		"msgFileTypes": "_315ZK7yu6fP9c1WvrOYcRq",
		"msgFileNote": "_354_FEG5sdCZmZfK77KFUP",
		"mixFix": "Rm8qQtPGV9iknEmazrm95",
		"mixFixCover": "_2pfiVdzP2VOSeIHngYKD2c",
		"fileUploadBreakWord": "_17ZBN2fyz6Q3UKwH4BJMez",
		"screen": "_3vKpk07E4_RokFS0iRQTKc",
		"feedbackStatus": "_2KQ84_MjjF7fBpXFH8rvSB",
		"closeDocShare": "_1XZ-Q8Rh2g3aysUbZ_iqmb",
		"errorSetDuration": "_3-td4OAqHFJ-YufJB5kQtw",
		"docBtnShare": "_3NvHS8c39ySZV7TIXeBJBN",
		"loadScreenConf": "_3DswbXvH9aMXW-qoiD1xvM",
		"AssignResult1": "i8gIWjkaQsnYIbR2E8MHy",
		"AssignResult2": "_2nxdkYVzTkim-_f2y9aqe2",
		"topicViewFlex": "_24pmumoAYskwBrJWqUoclQ",
		"videoConfMobileSelf": "_3aak6rKjIyDrkQrIWvFxZG",
		"videoConfMobileSelfThree": "_17w9ZGhmCKUMEcNX1dIrOI",
		"mobConfSingle": "FLyDCJLWAs6Q3cH4NXAkF",
		"videoConfMobileOther": "_2Bj0noEHqP0h56fuE2TphG",
		"videoConfMobileSelfFourLayout": "GgKjt3BLg2JUm9cPsNYki",
		"videoConfMobileOtherThreeLeft": "_21vVqdOKMRpjRlvYxnX78y",
		"videoConfMobileOtherThreeRight": "_3caI7KfDJBdD5Ay-P-Iu6M",
		"videoConfMobileOtherFourLeft": "_1hrvxkKhpa0qz8iOeYUEI",
		"headerTop": "_1XniUG5B5tsBSDTrbqJI7b",
		"footerFixed": "_3CER6mZw4OVF4ZbshrE158",
		"modDashboarCard": "_2npR83py7q94WLj-1bwhVI",
		"elasticWrapper": "_2V7iMxM_Ymm3vSG3aBdZdu",
		"minimize": "OxDwL4sly8-c12oeVQP_W",
		"iconChecked": "T4ZzBMChxZsczOvvckZRp",
		"iconUnchecked": "_2_sUSKmoPEAlYtm7yTVaRA",
		"slideBlockLA": "_1cD99lNu0AQKOMlCESVeR0",
		"toMarginLabel": "_1b8DGF-CLLbxWUaH88KkE",
		"checkAfter": "_3ujst9KhyfF5BdtgxtAoDR"
	};
	
	var _Dashboard2 = _interopRequireDefault(_Dashboard);
	
	var _component = {
		"form-control": "QmIrbtmLmFNpHdWMqFMWS",
		"innerWhiteTopic": "_32MPoieZt8YkhQqGNafOkY",
		"colonBlack": "_3WjF6qk6LGz-u5ks49gdcB",
		"error": "_3jAfmA6J7YmNDyB2VfsCxP",
		"mandatory": "_1cwTV0Re5ORIhqzxJLXMH1",
		"dynamicBreadCrumb": "_3QcYRL_UPZtqWKDFd5rcZB",
		"iElement": "_2crZNiFs8z8oNhzPDC1qOE",
		"oElement": "_1jUn1j1KBWo8dmqJ_0hdBD",
		"iLabel": "_3Pyvct_srCoSvJCgGG41jw",
		"oLabel": "NsxWZpxBqBX8wky_O477_",
		"iForm": "_3IlToa7pigrSS8KWut_dJ8",
		"oForm": "_3N0YNUcfI5U02VSmBEbYot",
		"iFormField": "_12yKSn29WLZIE6fvGQfcrN",
		"oFormField": "_5FMFIwRlrpPkQn-lkZ65Z",
		"iFormGroup": "_1LZRfACwm57iOGUxKozUVE",
		"oFormGroup": "_386CxczA49XX2-ejr3Qe55",
		"formNext": "ccTxjcG6_GZO9OgzW33HT",
		"iSubFormGroup": "u1jVXJqFT0vqGYzzRAhFY",
		"oSubFormGroup": "DDmyOnrHoBdsklkH9petO",
		"iContainer": "_2wz-gNWcGQfLXBCiToDWjI",
		"oContainer": "_2tEAAtqgoutuOUU96rNvv1",
		"iSubMenu": "XCOXe3mm5CZP0qxtnZPyC",
		"oSubMenu": "_1Rx5COiw9Ae92TeE3LnwRm",
		"iTopMenu": "_34RmLz4U_lA3sL18SjVR2-",
		"iMenuContainer": "N8LzghkGxja2Hkx0A-vzE",
		"whiteTopMenu": "YQfoPq5fhhEoPFvP-VF1W",
		"iSubMenuContainer": "_357Fb5CZ0VyABwYB9VmmIE",
		"active": "_2fF1Q9nO2O_1B8Ldb4RM52",
		"scheduleerror": "_34M0UOwV0tW7xV7AV2Cz7P",
		"errorPre": "_1ft-as7ic7_8EXp1iz5sfW",
		"errorclass": "_3jvk8bfxyC_tWLn1pBOytU",
		"whiteCard": "L2E7_Tzcp2MrkuuUlBf3t",
		"greyCard": "_34l9W17Mt1koxHLd1yUqgk",
		"reactTelInput": "_2OA1bLJ7mQFTEL9gP1dDif",
		"countryList": "_2ARbPU2OQ7JLphJ2g0U0F-",
		"react-tel-input": "_2PMN3xMEp7kCR8iQoBjSrd",
		"ad": "N3bKXyhfwvWT3eAEC9Nno",
		"ae": "taXUT8yfjgRMeSH3rMNxy",
		"af": "_2vH4qShCgBPBO4GR8BdNvd",
		"ag": "n8QfWtvpZLMpatCUqX2Td",
		"ai": "_3fPX_RcpesOPxFsmsaygCE",
		"al": "_1T12tbcC6990b-fIMG5LYW",
		"am": "_31HdarMDfXvAgjizVUoeHk",
		"ao": "_1Zb9qi0G-pe7OWK-cu6BoS",
		"ar": "_2qJleMgRbIErIrx3kQF57O",
		"as": "_2ZPVYL8Vjn-vdWZToCEhjN",
		"at": "_1hWilvnrVbANEHRyLGlF-m",
		"au": "_2zJE4K6o-ftWqhb3exXZgk",
		"aw": "_1UroMxX5JHt9bjGdHwa1OY",
		"az": "_-Y2xueZ_1mEtB9YDOqEGB",
		"ba": "_2FSEeZiYqoYo0pJ5J2uXJC",
		"bb": "_34600Kl8Wac9Hx7S3-3U6b",
		"bd": "_3WBX90V5VJXA7-vSUfEWCh",
		"be": "BcK33edOPcbYdkxxvOApy",
		"bf": "ShN64-J7UZdswoQjkf7L_",
		"bg": "_2A9PgkQEF5_KbvHvDf6_lY",
		"bh": "_10p3rxNRYOhv8-BtZuq1w8",
		"bi": "_6MzP1qXXDFAZVL7nBmRiH",
		"bj": "_2U8H1sji9LfDEW706KyKvF",
		"bm": "_3AOdFLNLEBMwpaIygqQ4Zo",
		"bn": "PgMDvF79WHl3kaklOmhw3",
		"bo": "_7MheGVInaTi-QLxw5PiUi",
		"br": "_1BDNUyT0cHDlbCBFgrrLkJ",
		"bs": "_3vcASZB5bu7mJAzTzaRkWe",
		"bt": "esu4pvyd9ZFWrf-etnrva",
		"bw": "_2Hbv1I361RJFK3Ph2xPlu_",
		"by": "_2tbYam6Og8RAicMhX9SXvI",
		"bz": "_3xB704PIgqFnU2zTG-JZFN",
		"ca": "_36FyK29nkNl9Ez7yWh04AS",
		"cd": "_9PnHTqK1pSn_GIAbBtPT2",
		"cf": "_2LgMF7o1A3a2cgw5jkpvZV",
		"cg": "_3hYc9Y3UdCphltZKe2vJWk",
		"ch": "_3BLJ9WmZAyoQNVnGDTm0hl",
		"ci": "FoSGkvvMDFAVcvsZBWX-Z",
		"ck": "_1742IgEaHW3SZU7h_-nkwr",
		"cl": "_36IaMt7ntEwUsH4lwN4tW-",
		"cm": "_1N8krqbPtlsEVsh6SaCetm",
		"cn": "IfkD3fwbUSx9FZflX6iIU",
		"co": "_3Y7u7ONzxyZVjZYzS1OHTr",
		"cr": "Gw5Qz4qBNZjPDmpQmi-d2",
		"cu": "ZuHtEp_knwZcbwTTJkRgI",
		"cv": "o6BzJCyjRH1pOsf_HpbQ6",
		"cw": "hRElJCQXyNIITDZ6UQVut",
		"cy": "_2cHKWrINPNO6L8BEOdtJCG",
		"cz": "nS617LE8Qcckdv9HJTWpt",
		"de": "fqJD93WBywDPs0lrLEXLT",
		"dj": "_1Rb2ZC6bLR2kLQHrXt3fi1",
		"dk": "_3fpBLMtuUi0kowy3ziMRYd",
		"dm": "_3gMwGkQW-OGFx1U7vd7VMD",
		"do": "G9EZGjpXLJUyQuREesyGO",
		"dz": "_3Nka0vwv6nZpeugyuqYQIJ",
		"ec": "_18t83SdIOs8EY6iF0zV0CZ",
		"ee": "_1miCbYr55XmBKvcUu6XetR",
		"eg": "_1T55wMh1svM7M5QGxFM2ex",
		"er": "c0Ab9spCQ4VnXr_6xijnD",
		"es": "_1lutiEL9tJpdNgKmnTT6Ld",
		"et": "_2GGXIPO2kOV6CUsu65V4Z3",
		"fi": "_1I-g5oWpQznT5QZuBfQ8A",
		"fj": "_3oeTP_GhC_XzsjzHW86oDc",
		"fk": "_3-_BjK4NArHS0nyf0DLc4F",
		"fm": "_1WQYGDC-zTatxog3SIwE80",
		"fo": "_2Xp5yMjRKQGGiCb4PPbdrr",
		"fr": "_3-mqatBXfaTfex8LWjnIDA",
		"bl": "_3QJ0ZMybaJjeqWZHvkXeIl",
		"mf": "_34f4ya9mcbpIcQPgHJ4I6c",
		"ga": "_15_iO4CJaXbX7PySxoldPF",
		"gb": "_1vZuFSSey59_ixozre-0L_",
		"gd": "_26Ub0jcjDpVD4nwM7m5n4e",
		"ge": "_27ctDR0Hf6HO15MgHS8wyh",
		"gf": "_2S6C39D4wNBuVSqzYM5Ldy",
		"gh": "_3vjGi6-umA-RzwxRFaTfNN",
		"gi": "_1VP2WL3_4ou1de2Ng8Wmd_",
		"gl": "_1OTvyS4D4UOkymKuDLxUdx",
		"gm": "_3-0gezNOVCHKzaLYGUySo2",
		"gn": "_8f6uadrEfnS9IX8DEIpKO",
		"gp": "_36yEj9UcEbZcI0WJvgmk0B",
		"gq": "xHX18x9xk7PhDBlgsvnad",
		"gr": "HTk_eFej1VrCiBuKBIfLT",
		"gt": "hgmUbzxaHNZNL6frPhPeb",
		"gu": "_3qeSb_MjyQ-VPPpwNWgXpl",
		"gw": "_36JwaXqhh4gBrIvAy4c1KO",
		"gy": "_3ZZcZTZlIH4DUUQ2BIamaK",
		"hk": "_1mT74O5OVtonPLmYnVVOu7",
		"hn": "_1ze0KI-TYxTrDcXlMOu24s",
		"hr": "ZIDUSRfcbDCZTyhqWGPob",
		"ht": "Y65Ad5pf3z7ufcknP0vhk",
		"hu": "_3EHKICvcensXt5hEu8Nkfs",
		"id": "_3oZE8uvxIFK7M9DCEtsSCD",
		"ie": "_2RNmpg94YYioQp2fWyz_xn",
		"il": "_2Mq_no7KYxPp2NSLGS1Tcs",
		"in": "_1UlEZ269GihRa58c5mCEBN",
		"io": "_3ovelrc7S_DdmXxL-8uuwk",
		"iq": "_3VSlK6DYHrBgKbkE2Rng2N",
		"ir": "NRX2sFBmuPSJ9EOigyuEP",
		"is": "_25HaTNE7x74CJO9S1mnm4I",
		"it": "_1-LmlhbrcpKN-xjESmR_sO",
		"jm": "VsvDBply-4FtMoJhi8Cvu",
		"jo": "yEE3hbkzWK8CSCrCJibCo",
		"jp": "_3oxjjz1uD2cX2QsoSToLgz",
		"ke": "_1ksOT6KMPd99EWuWCXPga_",
		"kg": "_2CMnR3yv5DGwDc8p3uoOjp",
		"kh": "_927b1QnaSWnN35i3bVewJ",
		"ki": "_2CuDp55lqYTpFp68D4IWep",
		"km": "_3tvMTeZYZMzBB9bGn9lV9E",
		"kn": "_6kbCvwc22pJX0tNv3HToQ",
		"kp": "_3tIPOe5PNrHH-bgCGaZTJj",
		"kr": "_2653rpVUuy3ETaw1mogdnF",
		"kw": "_1SKg_lTe0ShbPSOl44eKjp",
		"ky": "tgj8SOv7bYoF7qfbbQWNG",
		"kz": "bchn50J152EdQa0zf3k5u",
		"la": "mu9oycLgpKX8_yLLkR5b9",
		"lb": "_2TcAFbagIrNyc6mgzRVNW0",
		"lc": "_2IFItnUNT-albvpN-ksxd2",
		"li": "_3_E6nQspv6zJQLQI24puaS",
		"lk": "_2M2wq3qQhGeUegbBTs7ilH",
		"lr": "L4o4xOg0s6QbasyIRPgyF",
		"ls": "LhBB6SRin61WSFtUwaEfe",
		"lt": "ITDUphrnMkKItKGMVHZf8",
		"lu": "_1mVW30sc4i-1M8tDPCQlL",
		"lv": "_3rq6vE2IagAsGI6iESAcJq",
		"ly": "_3se_Nzm1WQrEN3VZYiJJrv",
		"ma": "_fSDiNxp_jjfqkQcWffDM",
		"mc": "_2hRTRZeBtDGN4mNeWBZVgB",
		"md": "_26jDl0skadEwmUYDGmEzST",
		"me": "_388lJj_7sQdyd9HL7pMrar",
		"mg": "_3aFoqVWcvG3p47Vwa6UuoE",
		"mh": "_1YHi6OtXmKfP15ZNbwYGgy",
		"mk": "_9QVyhHcp8yH762J8fWXhC",
		"ml": "yYD99PoyhgFI4912_qoyJ",
		"mm": "URzk8-j7LcySpGUMJf_Qk",
		"mn": "_1J-lktQUTK0rydBz3foJGF",
		"mo": "_1sbL0zhHof-KbfGWu2qjqF",
		"mp": "_1tJjJlSjRw5AnqcXXmGwCI",
		"mq": "fHob9sxaJrTuqSc0xL744",
		"mr": "t-Bmj7a31aA-IwcRcL0ua",
		"ms": "_2xyT54DQP62zWDySH7-Kdy",
		"mt": "_1Ul_OlGODc8S0QplVq94PV",
		"mu": "_1yIBERRJqnV33pTq2VpKRc",
		"mv": "_3VqQ1QKRZyrVO6o8AvYgsR",
		"mw": "_3i8n-5-htdGNJLgn96O21",
		"mx": "_16-6zoyiVzSGB1O72cUTzV",
		"my": "_3W2P0D9eTN4BQoOcThOsaM",
		"mz": "wJ8icX7Asp3dSImkXOdTM",
		"na": "_1qt_F94mybbX5kr0ArtN-Z",
		"nc": "h82AMIuCGdKf69Hc_nM6D",
		"ne": "_2mVa5nGsijzD93WRl8dk64",
		"nf": "_3XQ9oUH_84SsdZLjpVRuqT",
		"ng": "_1uyyH1GZjsEk3YpaUSmmG6",
		"ni": "_22_3H6UeFo26o3fSavtQaX",
		"nl": "_93asfBYgR8C7bEDucZO8l",
		"bq": "_37A1nwIz7Z3obwUjmliw4s",
		"no": "_2-sVmkWiLn_ogTikc0c0Eg",
		"np": "_1PqZSwf5cuMNmbE7bpKe67",
		"nr": "_9q5Rg9Xn0G2buivFSGySP",
		"nu": "RLhVdyjL9Cex8ekaJqirU",
		"nz": "_1LHfwPg-iXjSTdjVKJ2BYn",
		"om": "_9mZYNhgBLiQg-j1FeVprJ",
		"pa": "_3S7TrzxJIEYVghUMVHB6E7",
		"pe": "_3V5sP7VvdGOFqApj7POYl2",
		"pf": "_1YzdrkyHO-eCcEFF-hjZl7",
		"pg": "ddWAanlQJPlB0QDWO6dAF",
		"ph": "_2TGbmCcqHlJFCssz78MxOs",
		"pk": "_2JerTABYGCUN8FLjpnDzKy",
		"pl": "_3X1Zo6JhS7aPUTPWCBJyzX",
		"pm": "_29Hoo7EsoSHtvRFvlVg2cD",
		"pr": "_3_pkwz60KLoYcbKwaRvIsS",
		"ps": "_3jenITZ_yUYS7kU1HwFEHj",
		"pt": "_1vz8ABWy5Yd43_JhaTWq9u",
		"pw": "_3Yr0RZMbOD2QJkTtMx_HIk",
		"py": "_1_W41pJLcGMRhLdU997clv",
		"qa": "Z0tjAakoNSOs14KuenmRi",
		"re": "_3k5KF4jzE7HUitQw9MQKnp",
		"ro": "_2b8XhT3-7NgjAC8gJJkpis",
		"rs": "_2MUJr9MQbiKRTd_g0TaRQr",
		"ru": "HjzPW2CxxNMSGZw1ugFW7",
		"rw": "_23TGIOoPmB9QYqIPG6W3tA",
		"sa": "_34WM8rSonfayW0vJ3koqJS",
		"sb": "_3486rZNsCjvTmIoHbjK8mG",
		"sc": "_3meAM_iQCU6MyfPQJTN3yl",
		"sd": "_2x6XeHNF__4s9VVfFXCJhO",
		"se": "_66VDclGQXxpdUR8uE3ZFa",
		"sg": "tv3I_hfLcUJ_8i9ewVcUz",
		"sh": "_1syDbbhbumwMwwD7Dwkb1V",
		"si": "_3jsffwJjGr2sMEofSTTGkG",
		"sk": "_1EpYAUcQLCqbYB48Auixqb",
		"sl": "_3STJQv9nY5mol4cW82D2ci",
		"sm": "_9aTR-AZMTaYHRmDVAyFTM",
		"sn": "_3mTatYTWeJQQACfV7xzRhi",
		"so": "_1LnWon2slwLMqAHzhkRT4c",
		"sr": "_1GSedFwSsf5isgOi3p0x6U",
		"ss": "_1sq99LOjKKgery3luOXOFn",
		"st": "_1O6vYx_NaXFBAs1qYxgwaB",
		"sv": "_10D9RGnRzUv14bYWQaC23c",
		"sx": "KonDEEzH2JzIWsVUBzFdY",
		"sy": "_1ZAnqGYeixOJVFwwt6hNIo",
		"sz": "_3FeOFkec3sXYbvQhWDdIM7",
		"tc": "_1FZvldKEV-vz12TyyNfEf",
		"td": "_31fysfDRtTWVKcX_UjX0ty",
		"tg": "H60Kyr6MsF6nvRz5l7EfN",
		"th": "SHZkbUz1c_H_zDOfxLc4",
		"tj": "_2MRI0fA4OLgepXVooYMu9H",
		"tk": "_1W959S9LHLCKhz3xi4MpHe",
		"tl": "_1lMF_0nwQXTyBRRzRj7hBF",
		"tm": "_2ZB_Dy2eRo6J0ylRkqC62I",
		"tn": "_2MeGi_bqLVuCaRtJzs3QqA",
		"to": "_3egwC_50WENVPaap_uwXr8",
		"tr": "_2KiPy3o6m7JCKQWPY2fI1d",
		"tt": "_3Hbn6Wi0dSnyrjdgeMmYmf",
		"tv": "_2D9VWSmHkhgNemAaIKF_cp",
		"tw": "_2J7nVAh1zEa7kV5Ba51CLV",
		"tz": "_2acF96LLqMjlbfMX1oiAjT",
		"ua": "_2rr3Tyr8dP6vDvE0khEDKT",
		"ug": "D7gjzKmlr78rNWXXw90np",
		"us": "_1l5RtWI_acgLVeCd5fjgHG",
		"uy": "_1zX6hTsIa2TtL6dgR47eQ9",
		"uz": "_29NUL3VtwK1_RWUyPsY2ei",
		"va": "_39kTgRBkhqqGVLUTJvK_67",
		"vc": "_2EwnB8Pe5TZDGdNIXOvzzg",
		"ve": "_3Lk2Svkm2NTAVpUfiY_No5",
		"vg": "_3SiYuGrNzW9DNkXwTZugyj",
		"vi": "_2BiiERObu5xcE6P1SZxLdj",
		"vn": "_3kSg6iW0KLoUpJ0g70fckK",
		"vu": "_1UdrzjuDjSDu6-DJ5yV9cQ",
		"wf": "Arz0xEqJcbKbLmPz_tXTS",
		"ws": "_3oTaxcmbTriEd90-cXNqD8",
		"ye": "gxtmCiQO2ao4JTQXuRUIJ",
		"za": "_25HyrYKmQQAteF_LwADnIt",
		"zm": "Kui2u7hZHcNBqlzbqR-vQ",
		"zw": "_3VPnIcPuwZ3cFvNOHPN8ar",
		"hide": "_2kO_U0LXcg71jJA6RSia2e",
		"v-hide": "_2HBc009zwTsSlkh8P8tH10",
		"invalid-number": "_17iYQoyXCPAB8XfsRqDdDH",
		"flag-dropdown": "_1JTLnRuUJ50FBWDCCCWc4b",
		"open-dropdown": "jG7mLbpUfq5nh2TzhXfBa",
		"selected-flag": "_10c169vRt8V92_nQ_S0KtR",
		"flag": "_2AEEM5AZQcsUPJUQZSd8Rr",
		"arrow": "_3GOH36qvhOwAJd2ppQ3AOB",
		"up": "_2ykRnfq4f2nlmZGfvzrn92",
		"country-list": "UlTusogWL2urjgGgLNpcD",
		"divider": "_2zMaTbM3nSdE07wOs7YYRt",
		"country": "uL848pHFWhb_G94Ak-KX5",
		"dial-code": "FxUYLz6b2tBEUXdb9DRqQ",
		"highlight": "BLa_2aA2PkYD2PsO2fvNC",
		"country-name": "_3ih_ovRiGmAkpjxuz63nhk",
		"uploadFile": "_3CUi48rtxy1m3Wz0o2aHk_",
		"fileUpload": "_2WENukerx3mNXkTyu0UXQf",
		"uploadLabel": "_1VYdz-DRIuPqCKWlu5Rd5W",
		"upload": "_2DUvBpBYzPWlV-6Yx2Pjas",
		"blackTxt": "Z1W_HNjnSJTqNclgOwR-3",
		"feedbackTextArea": "_14APtzGfaR_yoeAQJMJT5z",
		"errorModal": "_2PEnO-md-8qd3dF2cZGhMD",
		"gradeColor": "_16sNzVDnEzucQAxknLYKQQ",
		"red": "_3wj0AXV9gqX9YG1nk-2u9J",
		"green": "_3KPVxc3su8ewtuKZgu8TGv",
		"orange": "_3cLlE5QI9XJwY6e7jO5bLg",
		"capitalize": "_2yqvFrqWq4uakYy_s3eeMY",
		"importBtnBlock": "OwSu91np9HnUW1VdSX5hA",
		"importBtnUpload": "_2eJ0cgHJ9Qj4GAz9x1jChE",
		"importBtnInput": "_3ZCvqG4C-pjYzfgVNN8eze",
		"icon": "_12rnwIUewKT2PdtWMnNyD5",
		"importFileOnclick": "_2qsz43E0kYpZO89nXXV13S",
		"broadcastWhiteCard": "_2Vf8tRdA-IkCpzrPwrxoLi",
		"broadcastNews": "eK8W5URbLbE8ER1zsFc6V",
		"btnPost": "_30ipfhZp6Vv-ikKnFNtEI7",
		"textArea": "_3uPzOKXSyhgfRUhfmeVwfC",
		"spinnerCss": "_1ouaIjiJ2MFv5PI5UqZ1ev",
		"pdfView": "_2DquMFdC6rEzAaWJ2U-ahy",
		"lineHight32": "_3RF4CWuoSHP3JddZnzrhZh",
		"removePdng": "_3XuIzA6t9BoFiZfEFhOn3f",
		"inputAllCap": "_6YEeMYUnLHaS691RRjq7L",
		"popHeadingAll": "_2suWB3cd5kOd2yUCJCr640",
		"dateControls": "_1BrlYTxzEBCsm_zJ9PPGkp",
		"dateRange": "_1JBu7w3GlOnQBH8oh1-EXg",
		"applyBtn": "_2Rz8lBsFU8i7B9Ia-G-cv3",
		"filterTxt": "_1Wdy1Hr8CUuuK8O9Liz3yi",
		"btnApplyAll": "_1Y_QiGh-mkiUfuuiix0Yeb",
		"assCanvas": "_2Ue4kVYDy-eQJrbNCKv0yC",
		"pdfBlock": "_3UAEHpi6NrNz6ZDh2Lfk0E",
		"assTab": "y4LW63OuadI0JWTQBnbJ1",
		"heightForScroll": "_1s76YPnhEAnqK63LsEzIZh",
		"radioNewProfile": "_1RD_hASO-4hwDMMDABPgkH",
		"wrapper": "IVU-3tPtgRn_cBMA2jD_Y",
		"leftBox": "_2c_UkbRVkIhCuEx7sFrhEz",
		"rightBox": "DP21PoKxwKk_vJyOuQTcr",
		"gradeBlock": "_1KaDEKb6KgB6xx-gEx-KTu",
		"actionBoxTop": "_10AdTDYinFiKZ9H30uacSD",
		"gradeBody": "_2pAeBQb2ZLvpxG09x5oJnS",
		"actionBoxBottom": "_1UHK6epVvw6XZJ1KLDuQuI",
		"gradeGroup": "_3VI0hvgPHy6r31t8WOJVDq",
		"morePref": "JBm94eKPIFI8vfiroATJ6",
		"tile": "_1Ssp2zTovh7AwJWuRkgnge",
		"tileItems": "_3cDqgy8AedDYzhy8Euosis",
		"tileHeader": "_1LhZQenbqV0FNu-ykdOEI3",
		"tileHeaderLeft": "_2MwtFA5OodvfH7RxQPCPQ_",
		"category": "_2Ow56TBY2Y24yY5SjVRU4l",
		"innerScoreBoth": "ndEN_RpJfrJ_tKG_RA68v",
		"maxScore": "_3uL97t2vemfuAs83cAFhjE",
		"maxScoreInput": "TKf_xWbkl0UNSxyusGMn8",
		"scored": "_12gGWK_s69JBGzOAX7ClkT",
		"scoreInput": "_2Mk4HrrcAyqwuFRTOgl3lh",
		"remTile": "_3vgBsvWRGVVRwIEDn1TquO",
		"tileBody": "dF1WC_PeNjG87K2XGMIcS",
		"tileRatings": "_2CCbhFQsjWGMpVC9Wui7Vr",
		"gradeBox": "_1yi9i3Jl0hqMYPn1Tgv_cF",
		"gradeDisabledBox": "_14nvGiDb0wY_EIfoptsCdF",
		"assignmentResultActive": "_2tWSBiPrHoK1xrmZ6QsC-W",
		"blue": "K7acjAQMroOGGtUqqojYy",
		"yellow": "G7N-PGOIbGO_ZkaqBu2mx",
		"txtGreen": "_3ozvzoCtqRqS2AzlUELKKF",
		"txtBlue": "_4IOpBzUT2qYXMYt5UKiJP",
		"txtYellow": "_27BE3ODkiyosiM3HqlgtFT",
		"txtOrange": "_3uTqWL645yWk5qXsaxxH_M",
		"txtRed": "_3WDBRR7fo7Gn2KKo7rrE_Q",
		"txtppl": "_3nfbHs21ZfqnZ9n2wICEDb",
		"addTile": "lCw_kxhsAPcuM3yFAqvpF",
		"addContral": "_1aQuHhQkJrKTdNBYcoAQFh",
		"addIconCircle": "_2lFLErjrZAe1ZXjCbykAVD",
		"commentBox": "_2h0b9sj0Y_QpQzSh6njVoO",
		"totalScore": "FDG4LAia-7JDDtxb7R4Kb",
		"totalScoreInput": "_23XbNFEiJgqq0S35rhnpj6",
		"textBox": "_13VdIFmMegxz_eR8VIXN_M",
		"totalScoreSpan": "_2Pj4PN_f9FgyLDc9JE4vu9",
		"totalScoreText": "_1YbsVQIx_uSOAygZtwoTNK",
		"resultBox": "_3XB8yAFjZjZubswP7rs3Lt",
		"resultBlock": "FmvbKk1ChtYs7Lm76nRaX",
		"resultHeader": "_1AWxMTonqDqoWhnz1g9d-d",
		"headingTxt": "_1GSvGEp7hTrEpIa-UkynQZ",
		"scoreBox": "_3HTg1VUMSPfLvdZUBsj2N_",
		"resultBody": "N6kKlySaRGbRcB4bBmpZ0",
		"resGroup": "_2byM-_1N3yjHb2dpmlikdf",
		"resTile": "DZeuj4DKkdAPKCgYd76RK",
		"resCriteria": "_22AwZF3M7Ffw8GTgoz2DSi",
		"resRating": "R7j9mxFZmdmLgC7bPXpyN",
		"txtSize": "_977ldMQMMiHQ0YG_61T3g",
		"txtplBlue": "_27vNfTLrgUcEIvntpfFS_N",
		"resScored": "_1T5pr7r7hw9rq_NyVSB0lM",
		"resInput": "_14gsxA36f-uYOfxGDvr_gi",
		"activeTxt": "_3mkD5eqWDun2pAM_mx16kZ",
		"feedbackBox": "_1ae7KB7aTT79QKO6O85GzI",
		"fbHeader": "idU-Kkkc7R8cdYS_Ayh47",
		"feedbackGroup": "AKd59EZ_Qjl6GE1amJRlx",
		"profileBox": "_1JFzTlQEl2bDxwqAx77fbj",
		"profileImg": "_3k-2OFHHSzyQUB7Zkcc21l",
		"profileDetails": "_2wxDQDzYCXmmG6lQaOlEj7",
		"name": "_25-6SxUiv8zhOMEVTRrg8w",
		"commentTxt": "_2tLMve1A4CHR8jTUu5J1jI",
		"addpdng": "_6rQH8tivz8ELIWszpbahs",
		"good": "_3lOxcxDfxhPcuhLBJHo4Ur",
		"vGood": "l_IAfocpDxfvpU316U0EI",
		"fair": "_3I3YapUnBVxgs-ZsGf3Poh",
		"poor": "_1uSJT6ULTWAvr1S_77KhIZ"
	};
	
	var _component2 = _interopRequireDefault(_component);
	
	var _HandraiseActions = __webpack_require__(417);
	
	var _Answer = __webpack_require__(515);
	
	var _Answer2 = _interopRequireDefault(_Answer);
	
	var _DataTable = {
		"pagination": "TYVzvPvnVhHwh2cU0hA4A",
		"current": "g_uiyu9x1FtjxSP7SG8ZE",
		"table": "MT1wq7GO1NFQY49F82EQ7",
		"headerRow": "_25DfSs-Nwm51luhPR-2j-T",
		"col": "_2AskW4twyvDT4DurTsqR8L",
		"row": "_2WqrTHsuiMmLB0IEBY1vgS",
		"responsivetable": "_31nKaPaXXLrfOOGeGa9GTs",
		"whiteCard": "ryCbWg89OoNEh8LdzqXon",
		"noDataBox": "XRJX9QsZKouxzWnXKoUUp",
		"infoTxt": "_1NZmMey1sQV0aCxxqVtPDu",
		"mainSpinBlock": "_3BEgVxQ9PDQKlEjIHevKr5",
		"innerSpinBlock": "_2Ot9A0ys89IJntrdA5WyyE"
	};
	
	var _DataTable2 = _interopRequireDefault(_DataTable);
	
	var _reactIntl = __webpack_require__(11);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var moment = __webpack_require__(1);
	
	var _ref = _jsx('p', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'no_answers'
	}));
	
	var _ref2 = _jsx(_reactIntl.FormattedMessage, {
		id: 'cancel'
	});
	
	var _ref3 = _jsx(_reactIntl.FormattedMessage, {
		id: 'save'
	});
	
	var _ref4 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'answers'
	}));
	
	var _ref5 = _jsx('span', {}, void 0, _jsx(_reactFontawesome2.default, {
		name: 'pencil-square-o'
	}), ' ');
	
	var _ref6 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'edit'
	}));
	
	var _ref7 = _jsx('span', {}, void 0, _jsx(_reactFontawesome2.default, {
		name: 'times'
	}), ' ');
	
	var _ref8 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'delete'
	}));
	
	var _ref9 = _jsx('span', {}, void 0, _jsx(_reactFontawesome2.default, {
		name: 'video-camera'
	}), ' ');
	
	var _ref10 = _jsx('span', {}, void 0, _jsx(_reactIntl.FormattedMessage, {
		id: 'make_speaker'
	}));
	
	var _ref11 = _jsx(_reactIntl.FormattedMessage, {
		id: 'previous_answers'
	});
	
	var _ref12 = _jsx(_reactIntl.FormattedMessage, {
		id: 'post'
	});
	
	var HandraiseQuestion = function (_Component) {
		_inherits(HandraiseQuestion, _Component);
	
		function HandraiseQuestion(props) {
			_classCallCheck(this, HandraiseQuestion);
	
			var _this = _possibleConstructorReturn(this, (HandraiseQuestion.__proto__ || Object.getPrototypeOf(HandraiseQuestion)).call(this, props));
	
			_this.getAnswerData = function (obj) {
				obj['limit'] = _this.state.limit;
				(0, _HandraiseActions.getAnswers)(obj).then(function (res) {
					return _this.setresponse(res);
				});
			};
	
			_this.showAnswers = function (e) {
				_this.setState({ showAnswers: !_this.state.showAnswers });
			};
	
			_this.postAnswer = function () {
				var value = _this.refs.answer.value.trim();
				if (value != '') {
					_this.refs.answer.value = '';
					_this.setState({ error: '' });
					var id = _this.state.data._id;
					var answer = value;
					(0, _HandraiseActions.sendAnswer)(id, answer).then(function (res) {
						return _this.saveresponse(res, id, value);
					});
				} else {
					_this.refs.answer.value = value;
					_this.setState({ error: 'Please enter the answer' });
				}
			};
	
			_this.saveresponse = function (response, id, value) {
				if (response.status) {
					_this.setState({ error: '' });
					_this.newAnswerRequest({ _id: id });
				} else {
					_this.refs.answer.value = value;
					_this.setState({ error: response.error });
				}
			};
	
			_this.loadmore = function () {
				var newlimit = _this.state.limit + _this.skip;
				_this.setState({ limit: newlimit });
				var obj = {
					_id: _this.props.data._id,
					limit: newlimit
				};
				(0, _HandraiseActions.getAnswers)(obj).then(function (res) {
					return _this.setresponse(res);
				});
			};
	
			_this.setresponse = function (response) {
				if (response.status) {
					_this.setState({ answers: response.data, total: response.count, error: '' });
				} else {
					_this.setState({ error: response.error });
				}
			};
	
			_this.handleDelete = function () {
				var qid = _this.props.data._id;
				var self = _this;
				alertify.confirm(_this.props.intl.messages.warning, _this.props.intl.messages.delete_question_alert, function (result) {
					if (result) {
						(0, _HandraiseActions.deleteQuestion)(qid).then(function (res) {
							return self.editresponse(res, '', false);
						});
					}
				}, function () {
					/*cancel event*/
				}).setting('labels', { 'ok': _this.props.intl.messages.ok, 'cancel': _this.props.intl.messages.cancel });
			};
	
			_this.handleEdit = function () {
				_this.setState({ edit: true });
			};
	
			_this.handleQuestionValue = function () {
				var value = _this.refs.editanswer.value;
				_this.setState({ editQuestionValue: value });
			};
	
			_this.cancelEditQuestion = function () {
				_this.setState({ edit: false, editerror: '', editQuestionValue: _this.props.data.question });
			};
	
			_this.saveEditQuestion = function () {
				var value = _this.state.editQuestionValue.trim();
				if (value != '') {
					var obj = {
						question: value,
						_id: _this.props.data._id,
						limit: _this.props.questionLimit,
						author: _this.props.uid,
						roomKey: _this.props.roomKey
					};
					(0, _HandraiseActions.saveQuestionRequest)(obj).then(function (res) {
						return _this.editresponse(res, value, true);
					});
				} else {
					_this.setState({ editerror: "Please enter the question" });
				}
			};
	
			_this.editresponse = function (response, value, status) {
				if (response.status) {
					_this.setState({ editerror: '', edit: false });
					if (status == true) _this.editRequest({ _id: _this.props.data._id });else _this.props.editQuestionCb(response, '', false);
				} else {
					_this.setState({ editerror: response.error, editQuestionValue: value });
				}
			};
	
			_this.loadAnswers = function () {
	
				var cls_askQuestion = _Dashboard2.default.askQuestionBlock + ' clearfix';
				var cls_postBtnInside = _Dashboard2.default.postBtnInside + ' ' + _Dashboard2.default.btnApplyAll + ' pull-right';
	
				if (_this.state.answers != null && _this.state.answers.length > 0) {
					var self = _this;
					var answers = _this.state.answers.map(function (doc) {
						return _jsx(_Answer2.default, {
							data: doc,
							uid: self.props.uid,
							qid: self.state.data._id,
							confObject: self.props.confObject,
							noConference: self.props.noConference
						}, doc._id);
					});
					return _jsx('ul', {}, void 0, answers);
				} else {
					return _jsx(_reactBootstrap.Row, {}, void 0, _jsx('div', {
						className: _DataTable2.default.noDataBox
					}, void 0, _ref));
				}
			};
	
			_this.makeSpeaker = function () {
				var data = _this.state.data;
				var obj = {
					qid: data._id,
					uid: data.author._id
				};
				_this.props.makeSpeaker(obj);
			};
	
			_this.newAnswerRequest = function (data) {
				var obj = {
					command: 'HAND-RAISE-ANSWER',
					content: { data: data, id: data._id },
					type: 'OBJECT'
				};
				_this.props.confObject.sendMessage(obj, 0);
			};
	
			_this.editRequest = function (data) {
				var obj = {
					command: 'HAND-RAISE-EDIT',
					content: { data: data, id: data._id },
					type: 'OBJECT'
				};
				_this.props.confObject.sendMessage(obj, 0);
			};
	
			_this.state = {
				showAnswers: false, error: '', data: null, limit: 3, total: 0, answers: null, edit: false, editQuestionValue: '', editerror: ''
			};
			_this.skip = 3;
			_this.FetchAnswerData = _this.FetchAnswerData.bind(_this);
			_this.getEditData = _this.getEditData.bind(_this);
			return _this;
		}
	
		_createClass(HandraiseQuestion, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				if (this.props.data) {
					this.setState({ data: this.props.data, total: this.props.data.anscount, editQuestionValue: this.props.data.question });
					var obj = {
						_id: this.props.data._id
					};
					this.props.confObject.HandraiseAnsListener(this.FetchAnswerData, obj._id);
					this.props.confObject.EditHandraiseListener(this.getEditData, obj._id);
					this.getAnswerData(obj);
				}
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this.props.confObject.ClearHandraiseAnsListener(this.state.data._id);
				this.props.confObject.ClearEditHandraiseListener(this.state.data._id);
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (nextProps.roomKey != this.props.roomKey) {
					nextProps.confObject.HandraiseAnsListener(this.FetchAnswerData, nextProps.data._id);
					this.setState({ data: nextProps.data, editQuestionValue: nextProps.data.question });
				}
			}
		}, {
			key: 'viewUser',
			value: function viewUser(id) {
				if (!this.props.guestStatus) {
					_reactRouter.browserHistory.push('/profile/' + id);
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _jsx2;
	
				var data = this.state.data;
				//console.log("this.props.guestStatus", this.props.guestStatus);
				// console.log("data === ",data);
				var cls_userQuestionPost = _Dashboard2.default.userQuestionPost + ' clearfix';
				var cls_postBtnInside = _Dashboard2.default.postBtnInside + ' ' + _Dashboard2.default.questionActionBtn + ' ' + _Dashboard2.default.btnApplyAll + ' pull-right';
				var cls_askQuestion = _Dashboard2.default.askQuestionBlock + ' clearfix';
				var now = moment().endOf('day');
				var create = data && data.createdAt ? moment(data.createdAt).endOf('day') : null;
				var time = "--:--";
				if (create != null) {
					if (+create == +now) time = moment(data.createdAt).format('hh:mm A');else time = moment(data.createdAt).format('DD/MM/YYYY hh:mm A');
				}
				return _jsx('div', {}, void 0, this.state.edit ? _jsx('div', {
					className: cls_askQuestion
				}, void 0, _react2.default.createElement('textarea', { id: 'editAnswer', className: _Dashboard2.default.textArea, ref: 'editanswer', value: this.state.editQuestionValue, onChange: this.handleQuestionValue }), _jsx('label', {
					id: 'editError',
					className: _component2.default.error
				}, void 0, this.state.editerror ? this.state.editerror : ''), _jsx('div', {
					className: _Dashboard2.default.blockSaveAssign
				}, void 0, _jsx('button', {
					id: 'cancelEditQuestion',
					onClick: this.cancelEditQuestion
				}, void 0, _ref2), _jsx('button', {
					id: 'saveEditQuestion',
					className: _Dashboard2.default.btnSaveAssign,
					onClick: this.saveEditQuestion
				}, void 0, _ref3))) : _jsx('div', {
					className: cls_userQuestionPost
				}, void 0, _jsx(_reactRouter.Link, {
					id: 'viewprofile',
					className: this.props.guestStatus ? _Dashboard2.default.avatarGuestCircle : _Dashboard2.default.avatarCircle
				}, void 0, _jsx('img', {
					src: data && data.author && data.author.profile && data.author.profile.profileImage ? "/uploads/" + data.author.profile.profileImage : "/images/profile-pics/default-user.png",
					onClick: this.viewUser.bind(this, data && data.author && data.author._id ? data.author._id : ''),
					title: this.props.intl.messages.viewprofile
				})), _jsx('div', {
					className: this.props.guestStatus ? _Dashboard2.default.guestNameQuestion : _Dashboard2.default.nameQuestion
				}, void 0, _jsx('h2', {}, void 0, data && data.author && data.author.firstname && data.author.lastname ? data.author.firstname + ' ' + data.author.lastname : data && data.author && data.author.firstname ? data.author.firstname : 'User Name'), _jsx('p', {}, void 0, data && data.question), _jsx('p', {
					className: _Dashboard2.default.timeDisplay
				}, void 0, time))), _jsx('div', {
					className: _Dashboard2.default.questionActionsBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.bottomActions
				}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx(_reactRouter.Link, (_jsx2 = {
					id: 'seeAllAnswers',
					title: this.context.intl.messages.see_all_answers
				}, _defineProperty(_jsx2, 'id', data && data._id), _defineProperty(_jsx2, 'onClick', this.showAnswers), _jsx2), void 0, _jsx('span', {}, void 0, this.state.total, ' '), _ref4)), data && data.author && data.author._id == this.props.uid && this.state.edit == false && !this.props.noConference ? _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'editQuestion',
					onClick: this.handleEdit,
					title: this.context.intl.messages.edit_the_question
				}, void 0, _ref5, _ref6)) : null, data && data.author && data.author._id == this.props.uid && !this.props.noConference ? _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'deleteQuestion',
					onClick: this.handleDelete,
					title: this.context.intl.messages.delete_the_question
				}, void 0, _ref7, _ref8)) : null, this.props.host == true && data && data.author && data.author._id != this.props.uid && this.props.roomType != 'Mix' ? _jsx('li', {}, void 0, _jsx(_reactRouter.Link, {
					id: 'makeSpeaker',
					title: this.context.intl.messages.make_speaker,
					onClick: this.makeSpeaker
				}, void 0, _ref9, _ref10)) : null))), this.state.showAnswers ? _jsx('div', {
					className: _Dashboard2.default.postedAnswersBlock
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.listPostedAns
				}, void 0, _jsx('div', {
					className: _Dashboard2.default.listPostedAns
				}, void 0, this.loadAnswers(), this.state.total > this.state.limit ? _jsx('a', {
					id: 'previousAnswers',
					href: '#',
					onClick: this.loadmore
				}, void 0, _ref11) : null)), !this.props.noConference ? _jsx('div', {
					className: _Dashboard2.default.postAnswerInList
				}, void 0, _react2.default.createElement('textarea', { id: 'answerQuestion', className: _Dashboard2.default.postAnsTextArea, placeholder: this.context.intl.messages.answer_the_question, ref: 'answer' }), _jsx('button', {
					id: 'postAnswer',
					className: cls_postBtnInside,
					onClick: this.postAnswer
				}, void 0, _ref12), _jsx('label', {
					id: 'postAnswerError',
					className: _component2.default.errorPre
				}, void 0, this.state.error ? this.state.error : '')) : null) : null);
			}
	
			//////////////////////////////
	
		}, {
			key: 'FetchAnswerData',
			value: function FetchAnswerData(obj) {
				this.getAnswerData(obj);
			}
		}, {
			key: 'getEditData',
			value: function getEditData(obj) {
				var _this2 = this;
	
				(0, _HandraiseActions.getHandraiseQues)(obj._id).then(function (res) {
					if (res.status) _this2.setState({ data: res.data });
				});
			}
	
			///////////////////////////////
	
		}]);
	
		return HandraiseQuestion;
	}(_react.Component);
	
	HandraiseQuestion.contextTypes = {
		intl: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = (0, _reactIntl.injectIntl)(HandraiseQuestion);

/***/ }

};;